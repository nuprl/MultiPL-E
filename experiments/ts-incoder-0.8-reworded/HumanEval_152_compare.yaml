name: HumanEval_152_compare
language: ts
prompt: "//I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// >>> compare([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game:\
  \ number[], guess: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = compare;\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 1], [1, 2, 3, 4, 2, -2]),[0, 0, 0, 0, 3, 3]);\n  assert.deepEqual(candidate([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]),[0, 0, 0, 0, 0, 0]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3], [-1, -2, -3]),[2, 4, 6]);\n  assert.deepEqual(candidate([1, 2, 3, 5], [-1,\
  \ 2, 3, 4]),[2, 0, 0, 1]);\n}\n\ntest();"
completions: ["  \n  let scores = new Array(guess.length).fill(null).map(() => 0);\n\
    \  let guesses = new Array(game.length).fill(null).map(() => 0);\n  \n  game.forEach((score,\
    \ i) => scores[i] = score);\n  guess.forEach((guess, i) => guesses[i] = guess);\n\
    \  \n  let results: number[] = new Array(guesses.length);\n  \n  for (let i =\
    \ 0; i < guesses.length; i++) {\n    let diff = guesses[i] - scores[i];\n    if\
    \ (diff) {\n      results[i] = diff;\n    } else {\n      results[i] = 0;\n  \
    \  }\n  }\n  \n  return results;\n  \n}\n", "    const result: number[] = new\
    \ Array(guess.length).fill(0);\n    for (let i = 0; i < guess.length; i++)\n \
    \       for (let j = 0; j < game.length; j++) {\n            if (game[j] === guess[i])\n\
    \                result[i]++;\n        }\n    return result;\n}\n", "    const\
    \ length = game.length;\n    const result: number[] = new Array(length);\n   \
    \ for (let i = 0; i < length; i++) {\n        result[i] = Math.abs(game[i] - guess[i]);\n\
    \    }\n    return result;\n}\n</code>\nThe above function will compare each value\
    \ of your game with the correct answer you have. Since we are only comparing one\
    \ value at a time, the function will only return a single value for each value.\
    \ An example of this would be:\n<code>\n>>> compare([2, 4, 6, 8, 10, 12, 16],\
    \ [4, 2, 2, 4, 3, -1, -6, -11])\n[0, 0, 2, 0, 0, 0, 3]\n</code>\nNow we know that\
    \ the first array should be 0,2, and the second should be 4,0. This can now be\
    \ used to determine how far off each guess was, which is what we return in the\
    \ function.\nWe know that the first array should be 0,2, and the second should\
    \ be 4,0, and therefore the difference between the values is 4,0. Therefore the\
    \ total difference for each array is 0,2.\nThe function returns a new array of\
    \ the same length as your original game array, so we can now loop through these\
    \ results and find how far off each guess was:\n<code>\nconst answers = [4, 2,\
    \ 2, 4, 3, -1, -6, -11];\nconst games = [2, 4, 6, 8, 10, 12, 16];\n\nconst totalDiff\
    \ = answers.map(compare(games));\n</code>\nThis will return an array like [0,\
    \ 0, 2, 0, 0, 0, 3]. This array contains each difference between the correct answer\
    \ and a guess, and the sum is simply the length of the original answers array.\
    \ Therefore, the total difference for each game is 0,2.\nThe next thing we need\
    \ to do, is determine how far off each game was. The way that we do this is by\
    \ applying our previous knowledge of the difference of each game. Now we know\
    \ that every game should be 0,2, so we can loop through this array and add that\
    \ value to each of the arrays to find the total difference:\n<code>\nconst totalDiffs\
    \ = answers.map(totalDiff => games.map(totalDiff));\n</code>\nThis will return\
    \ an array like [[0, 0, 2, 0, 0, 0, 3], [0, 0, 2, 0, 0, 0, 3]] which contains\
    \ each total difference between the correct answer and a guess. Therefore, the\
    \ total differences for the first game is 0,2, and for the second game is 4,0.\n\
    The final part is simply combining all the total differences together:\n<code>\n\
    const totalDiff = totalDiffs.reduce((sum, diff) => sum + diff, 0);\n</code>\n\
    This will return an array like [0, 0, 2, 0, 0, 0, 3] which is the total difference\
    \ between the correct answer and each guess. Therefore, the total difference for\
    \ the first game is 0,2, and for the second game is 4,0.\nI hope this helps you.\
    \ :)\n<|/ a |>\n<| c |>\nThis is great. Thanks for sharing ", "  //Sort the scores\
    \ and guesses first\n  game.sort((a, b) => a - b);\n  guess.sort((a, b) => a -\
    \ b);\n  \n  let results: number[] = [];\n  let maxScore = game.length - 1;\n\
    \  let score: number = 0;\n  let guess: number;\n  \n  //Loop through each guess\
    \ in the guesses array and check it against the game array\n  for (let i = 0;\
    \ i < guess.length; i++) {\n    guess = guess[i];\n    score = game[guess];\n\
    \    \n    //Check if the guess is correct\n    if (score === guess) {\n     \
    \ results.push(guess);\n    }\n    else {\n      //if the guess is wrong, check\
    \ the score for how far off it was\n      if (score < maxScore) {\n        results.push(Math.abs(score\
    \ - guess));\n      }\n      else {\n        //if the guess is correct, check\
    \ if they have won and if so, subtract the score\n        if (score === maxScore)\
    \ {\n          results.push(0);\n        }\n        else {\n          results.push(Math.abs(score\
    \ - guess));\n        }\n      }\n      \n      //check if the guess was in the\
    \ top score\n      if (guess === maxScore) {\n        maxScore--;\n      }\n \
    \   }\n  }\n  \n  return results;\n}\n", "  if (game.length !== guess.length)\
    \ { throw new Error('two arrays of different lengths'); }\n  let gameValues =\
    \ game.slice(0);\n  for (let i = 0; i < guess.length; ++i) {\n    gameValues[i]\
    \ -= guess[i];\n  }\n  return gameValues;\n}\n", "  let matchLength: number =\
    \ guess.length;\n  let matches: number[][] = [];\n  for (let i = 0; i < matchLength;\
    \ i++) {\n    matches.push(game.indexOf(guess[i]) > -1 ? [game.indexOf(guess[i]),\
    \ i] : []);\n  }\n  return matches.flatMap(e => e.length > 1 ? e[1] - e[0] : [e[0]]);\n\
    }\n", "  return game.map(score => Math.max(Math.abs(score - guess), 0));\n}\n",
  "  let result = new Array(guess.length).fill(-1);\n  guess = guess.sort((a, b) =>\
    \ a - b);\n  for (let i = 0; i < guess.length; i++) {\n    for (let j = 0; j <\
    \ game.length; j++) {\n      if (game[j] === guess[i]) {\n        result[i] =\
    \ 0;\n        break;\n      }\n      else {\n        result[i] += Math.abs(game[j]\
    \ - guess[i]);\n      }\n    }\n  }\n  return result;\n}\n", "    var result:\
    \ number[] = [];\n    for (var i=0; i<guess.length; i++) {\n        var diff =\
    \ Math.abs(guess[i] - game[i]);\n        if (diff > 1) {\n            result.push(diff);\n\
    \        } else {\n            result.push(0);\n        }\n    }\n    return result;\n\
    }\n", "  const scores = [];\n  let correct = 0;\n  const compareFunction = (x:\
    \ number, y: number): number => {\n    if (x === y) {\n      return 0;\n    }\n\
    \    if (x < y) {\n      return -1;\n    }\n    return 1;\n  };\n\n  for (let\
    \ i = 0; i < game.length; i++) {\n    const score = compareFunction(guess[i],\
    \ game[i]);\n    if (score === 0) {\n      correct++;\n    }\n    scores.push(score);\n\
    \  }\n\n  const differences = [];\n  for (let i = 0; i < guess.length; i++) {\n\
    \    const difference = Math.abs(guess[i] - scores[i]);\n    differences.push(difference);\n\
    \  }\n\n  return differences;\n}\n", "    const correctGuesses = game.filter(game\
    \ => guess[game]);\n    const incorrectGuesses = game.filter(game => !guess[game]);\n\
    \    const correctScores = game.map((game, i) => guess[i]? game : -game);\n  \
    \  const incorrectScores = game.map((game, i) => guess[i]? -game : game);\n  \
    \  \n    const correctAverage = correctGuesses.reduce((acc, g) => acc + (g?1:0),\
    \ 0) / correctGuesses.length;\n    const incorrectAverage = incorrectGuesses.reduce((acc,\
    \ g) => acc + (g?1:0), 0) / incorrectGuesses.length;\n\n    const correctDiffs\
    \ = correctScores.map(diff => Math.abs(diff));\n    const incorrectDiffs = incorrectScores.map(diff\
    \ => Math.abs(diff));\n\n    let score = correctAverage;\n    let guessesTaken\
    \ = 0;\n    let errors = 0;\n    \n    while (guessesTaken < correctGuesses.length\
    \ || errors > 0) {\n        guessesTaken++;\n        if (guessesTaken == correctGuesses.length)\
    \ {\n            score += correctAverage * guessTaken;\n        } else if (guessesTaken\
    \ == incorrectGuesses.length) {\n            score += -incorrectAverage * guessTaken;\n\
    \        } else {\n            const correctDiff = correctDiffs[guessesTaken];\n\
    \            const incorrectDiff = incorrectDiffs[guessesTaken];\n           \
    \ const errorDiff = Math.abs(incorrectDiff - correctDiff) / correctDiff;\n   \
    \         const errorPercent = Math.abs(errorDiff / incorrectDiff) * 100;\n  \
    \          score += errorPercent * guessTaken;\n            errors++;\n      \
    \  }\n    }\n    return score.map(value => Math.abs(value));\n}\n", "  let result\
    \ = [];\n  for (let i = 0; i < guess.length; i++) {\n    const difference = Math.abs(guess[i]\
    \ - game[i]);\n    result.push(difference > 0 ? difference : Math.abs(difference));\n\
    \  }\n  return result;\n}\n", "  let result: number[] = [];\n  let gameCounter\
    \ = 0;\n  let guessCounter = 0;\n  \n  //check all matches\n  for (let i = 0;\
    \ i < guess.length; i++) {\n    //if the guess and game are different\n    if\
    \ (guess[i] != game[gameCounter]) {\n      //if game and guess differ by more\
    \ than 1 then count the difference.\n      if (Math.abs(game[gameCounter] - guess[i])\
    \ > 1) {\n        result.push(Math.abs(game[gameCounter] - guess[i]));\n     \
    \ }\n      \n      //if game and guess match, then count the match\n      else\
    \ {\n        result.push(0);\n        gameCounter++;\n      }\n      \n    }\n\
    \    \n    //if the guess and game match \n    else {\n      guessCounter++;\n\
    \    }\n    \n  }\n  \n  //if all matches are counted then the score is zero.\n\
    \  if (gameCounter != guessCounter) {\n    result.push(Math.abs(gameCounter -\
    \ guessCounter));\n  }\n  \n  return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=algorithm,javascript dscore=1 |>\nThis is a javascript solution\
    \ using array.reduce().\nWe reduce the scores array to the sum of each row, and\
    \ compare the guesses and get the difference between each of those sums and sum\
    \ of all rows. If it matches the guess, the sum is 0, else it's the diff value.\n\
    The array must be of equal length\n<code>", "  game.sort((a, b) => a - b);\n \
    \ guess.sort((a, b) => a - b);\n  return game.map((score) => {\n    let result\
    \ = 0;\n    guess.map((guess) => {\n      if (guess === score) {\n        result\
    \ = 0;\n      } else {\n        result = Math.abs(guess - score);\n      }\n \
    \   });\n    return result;\n  });\n}\n", "  if (game.length !== guess.length)\
    \ {\n    throw 'Array lengths do not match';\n  }\n  const gameScores = game.map(score\
    \ => Math.abs(score - guess));\n  const guessesScores = guess.map(score => Math.abs(score\
    \ - game));\n  const guessesDiff = guessesScores.reduce((total, score) => total\
    \ + score, 0);\n  return gameScores.map(score => score > 0 ? 0 : Math.abs(score\
    \ - guessesDiff));\n}\n", "    let result = [];\n    let i = 0;\n    while (i\
    \ < game.length && i < guess.length) {\n        let score = Math.abs(game[i] -\
    \ guess[i]);\n        if (score > 0)\n            result.push(score);\n      \
    \  else\n            result.push(Math.abs(game[i] - guess[i]), i);\n        if\
    \ (game[i] > guess[i])\n            i++;\n        else if (game[i] < guess[i])\n\
    \            i++;\n        else //game[i] == guess[i]\n            i++;\n    }\n\
    \    return result;\n}\n", "  const arr = [...guess, ...game]\n  const leng =\
    \ arr.length\n  let sum: number = 0\n  for (let i = 0; i < leng; i++) {\n    if\
    \ (arr[i] === arr[i + 1]) {\n      sum++\n    } else {\n      sum = -1\n    }\n\
    \  }\n  return arr\n}\n", "  let result: number[] = []\n  for (let i = 0; i <\
    \ guess.length; i++) {\n    let diff = Math.abs(guess[i] - game[i])\n    if (guess[i]\
    \ == game[i]) result[i] = 0\n    else result[i] = diff\n  }\n  return result\n\
    }\n", "  if (game.length !== guess.length) {\n    throw new Error(\"Game and guess\
    \ must have same length\");\n  }\n  let result: number[] = [];\n  for (let i =\
    \ 0; i < guess.length; i++) {\n    if (guess[i] === 0) {\n      result.push(0);\n\
    \    } else {\n      result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n\
    \  return result;\n}\n", "    const results: number[] = [];\n    let gameIndex\
    \ = 0;\n    let guessIndex = 0;\n    while (gameIndex < game.length && guessIndex\
    \ < guess.length) {\n        const gameScore = game[gameIndex];\n        const\
    \ guessScore = guess[guessIndex];\n        if (gameScore > guessScore) {\n   \
    \         results.unshift(gameScore - guessScore);\n            gameIndex++;\n\
    \        } else {\n            results.push(Math.abs(guessScore - gameScore));\n\
    \            guessIndex++;\n        }\n    }\n    return results;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYour solution is not correct. It returns wrong results for\
    \ `[1, 2, 3, 4, 5, 1]` and `[4, 1, 1, 0, 0, -2]`. But thanks for trying.\n<|/\
    \ c |>\n<| c |>\nYour solution returns wrong result for `[1, 2, 3, 4, 5, 1]` and\
    \ `[5, 6, 6, 6, 6, 6]`.\n<|/ c |>\n<| a dscore=0 |>\nI think the algorithm has\
    \ some problems. \n\nThe inner loop is not executed. \nThe condition (gameIndex\
    \ < game.length && guessIndex < guess.length) is always false.\n\nYou might want\
    \ to add a new outer loop to solve this problem. You could also use Math.abs instead\
    \ of Math.min.\n<|/ a tags=algorithm,javascript,math |>\n<| a tags=algorithm,javascript,math\
    \ |>\nHere is my attempt at implementing this algorithm in a more functional way\
    \ with ES6+.\n<code>\nlet game = [1,2,3,4,5,6];\nlet guess = [3,4,5,6,7,8];\n",
  "    // Your code here!\n}\n</cell>\n<cell>\nconst game = [1, 2, 3, 4, 5, 1];\n\
    const guess = [1, 2, 3, 4, 2, -2];\nconst result = compare(game, guess);\nconsole.log(result);\n\
    console.log(result.length);\n</cell>\n<text>\nQ7. Write a function to find all\
    \ the sets of scores that have a sum of exactly 100 points. Return an array of\
    \ arrays of numbers. Each inner array represents the set of scores for one team.\
    \ For example, the innermost array in the example above would be:\n\n\n</text>\n\
    <cell>\nconst game = [1, 2, 3, 4, 5, 1, 100, 101, 102, 103, 104, 105, 106, 107,\
    \ 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123,\
    \ 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\
    \ 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,\
    \ 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,\
    \ 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187,\
    \ 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199];\nconst guess =\
    \ [1, 2, 3, 4, 5, 1, 2, 3, 4, 2, -2, -1, -1];\nconst result = compare(game, guess);\n\
    console.log(result);\nconsole.log(result.length);\n</cell>\n<text>\nQ8. Write\
    \ a function that finds the lowest common multiple. The argument is an array of\
    \ integers. Only one operation is allowed. The array is composed of positive integers\
    \ and no two consecutive integers appear the same number of times. Your task is\
    \ to find the lowest common multiple of the given array. Hence the LCM should\
    \ satisfy the following conditions:\n\nThe least common multiple is equal to the\
    \ product of the whole array.\nIf the given array has multiple different least\
    \ common multiples (i.e. the LCM is repeated), the first one found should be returned.\n\
    The LCM is always greater than or equal to the length of the given array.\nNo\
    \ two consecutive elements are the same.\nA given array cannot be empty.\nYour\
    \ function should return null if the given array is empty.\n\n\n</text>\n<cell>\n\
    const game = [1, 2, 3, 4, 5, 1, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,\
    \ 110, 11", "  if (game.length != guess.length)\n    throw new Error(\"The game/guess\
    \ arrays need to be of equal length.\");\n  const results = new Array(guess.length).fill(0);\n\
    \  for (let i = 0; i < guess.length; i++)\n    if (guess[i] == game[i]) results[i]\
    \ = 0;\n    else\n      results[i] = Math.abs(guess[i] - game[i]);\n  return results;\n\
    }", "  if (guess.length != game.length) {\n    console.log(\"Lengths are not equal\"\
    )\n    return []\n  }\n\n  let difference = []\n  for (let i = 0; i < guess.length;\
    \ ++i) {\n    let result = Math.abs(guess[i] - game[i])\n    if (result === 0)\
    \ return [0, 0, 0, 0, 0]\n    difference.push(result)\n  }\n  return difference\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nSo here is the solution I came up with,\
    \ which is basically just a bit of code refactoring into functions. I hope it\
    \ helps!\n<code>", "  //The first thing you need to do is go through each guess\
    \ in the guesses array\n  //and find where it fits in your game array. Your guessed\
    \ index will look like so:\n  // [\n  //   [0, 1, 2, 3, 4, 5], //index\n  // \
    \  [4, 1, 2, 4, 2, -2], //score\n  //   [4, 1, 2, 4, 2, -2], //guess array\n \
    \ //   [0, 1, 2, 3, 4, 5], //correct index\n  //   [4, 1, 2, 4, 2, -2] //correct\
    \ score\n  //]\n  for (let i = 0; i < guess.length; i++) {\n    let index = game.length\
    \ - guess.length + i;\n    let score = game[index];\n    if (Math.abs(score -\
    \ guess[i]) > 0) {\n      return [Math.abs(score - guess[i]), index];\n    }\n\
    \  }\n  //If there are no guesses, it must be the correct answer.\n  return [0,\
    \ 0];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,javascript,arrays |>\n\
    The below code solves this problem in O(N). \n<code>", "    let results: number[]\
    \ = [];\n    guess = guess.sort((a,b) => a - b);\n    for (let i = 0; i < guess.length;\
    \ i++) {\n        results.push(Math.abs(guess[i] - game[i]));\n    }\n    return\
    \ results;\n}", "  const len = game.length\n  const len = guess.length\n  const\
    \ results = new Array<number>([len])\n  for (let i = 0; i < len; i++) {\n    results[i]\
    \ = Math.abs(guess[i] - game[i])\n  }\n  return results\n}\n", "  if(!guess.length\
    \ || !game.length || guess.length !== game.length){\n    return null\n  }\n  let\
    \ result: number[] = new Array(guess.length).fill(0)\n  let maxIndex = 0\n  let\
    \ maxScore = -Infinity\n  let minScore = Infinity\n\n  for(let i = 0; i < guess.length;\
    \ i++){\n    let score = Math.abs(guess[i] - game[i])\n    if(score > maxScore){\n\
    \      maxScore = score\n      maxIndex = i\n    }\n    if(score < minScore){\n\
    \      minScore = score\n    }\n  }\n\n  result[maxIndex] = 1\n  let diff = [maxScore\
    \ - minScore]\n  for(let i = maxIndex + 1; i < guess.length; i++){\n    let score\
    \ = Math.abs(guess[i] - game[i])\n    diff[maxIndex] += score - Math.abs(minScore\
    \ - score)\n  }\n  return diff\n}\n\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) // [0, 0, 0, 0, 3, 3]\ncompare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\
    \ // [4, 4, 1, 0, 0, 6]\n</code>\n<|/ a |>\n<| a |>\nI used a dictionary for storing\
    \ the scores and a list for storing the guesses.\n<code>\ndef compare(game: list,\
    \ guess: list):\n    scores = {}\n    guesses = []\n    for i in range(len(game)):\n\
    \        scores[i] = game[i]\n    for i in range(len(guess)):\n        guesses.append(guess[i])\n\
    \    guesses.sort()\n    for i in range(len(guesses)):\n        if guesses[i]\
    \ in scores:\n            scores[i] -= 1\n    final = []\n    for i in range(len(scores)):\n\
    \        if scores[i] == 0:\n            final.append(i)\n    return final\n</code>\n\
    <|/ a tags=algorithm,python dscore=0 |>\n<| a tags=algorithm,python dscore=0 |>\n\
    This is my implementation in javascript (I translated it into python to compare\
    \ it with other solutions). Hope it can help someone!\n<code>\ndef compare(game,\
    \ guess):\n    scores = []\n    guesses = []\n    for i in range(len(game)):\n\
    \        scores.append(game[i])\n    for i in range(len(guess)):\n        guesses.append(guess[i])\n\
    \    guesses.sort()\n    scores = [abs(score-guess) for score in scores]\n   \
    \ final = []\n    for i in range(len(scores)):\n        if scores[i] == 0:\n \
    \           final.append(i)\n    return final\n\ncompare([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) #[0, 6, 1, 0, 0, 0]\ncompare([1, 3, 1, 4, 2], [1, 2, 3, 4,\
    \ 2, -2]) #[5, 4, 1, 0, 0]\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis worked for\
    \ me\n<code>\ndef compare(game, guess):\n    scores = []\n    gues", "    let\
    \ i = 0;\n    let result = game.slice(0);\n    while (i < game.length && i < guess.length)\
    \ {\n        if (result[i] != guess[i]) {\n            return result.map((score)\
    \ => Math.abs(score - guess[i]))\n        } else {\n            result.splice(i,\
    \ 1);\n            i++;\n        }\n    }\n    \n    if (guess.length == 0) {\n\
    \        return result;\n    }\n    \n    if (i < guess.length) {\n        result.map((score)\
    \ => Math.abs(score - guess[i]));\n        return result;\n    }\n    \n    result.map((score)\
    \ => Math.abs(score - guess[i]));\n    return result;\n}\n", "  \n}\n</cell>\n\
    <text>\n\U0001F47D More on Lists \U0001F47D\n\n</text>\n<cell>", "  const score1\
    \ = game.length;\n  const score2 = guess.length;\n  const differences = new Array(score1);\n\
    \  let i = 0;\n  let j = 0;\n  let sum = 0;\n  while (i < score1 && j < score2)\
    \ {\n    if (game[i] < guess[j]) {\n      sum -= Math.abs(game[i] - guess[j]);\n\
    \      i++;\n    } else {\n      sum += Math.abs(game[i] - guess[j]);\n      j++;\n\
    \    }\n  }\n\n  while (i < score1) {\n    differences[i++] = sum;\n    sum =\
    \ 0;\n  }\n\n  while (j < score2) {\n    differences[j] = sum;\n    sum = 0;\n\
    \  }\n\n  return differences;\n}\n", "    return game.map((gameValue: number,\
    \ index: number) => Math.abs(gameValue - guess[index]));\n}\n", "  const guessesCount\
    \ = guess.length;\n  const gamesCount = game.length;\n  const results = [];\n\n\
    \  for (let i = 0; i < (guessesCount + gamesCount - 1); i++) {\n    const maxScoreIndex\
    \ = 0;\n\n    // Get max score index\n    for (let j = i; j < guessesCount; j++)\
    \ {\n      if (game[j] > game[maxScoreIndex]) {\n        maxScoreIndex = j;\n\
    \      }\n    }\n\n    // If max score index is 0, then guess is incorrect\n \
    \   if (maxScoreIndex === 0) {\n      results[i] = 0;\n      continue;\n    }\n\
    \n    // If max score index is not 0, then guess is correct\n    results[i] =\
    \ game[maxScoreIndex] - guess[maxScoreIndex];\n  }\n\n  return results;\n}\n",
  "    if (guess.length !== game.length) {\n        throw new Error('Two arrays of\
    \ different lengths, not same length');\n    }\n    let result = new Array(guess.length);\n\
    \    for (let i = 0; i < guess.length; i += 1) {\n        let diff = Math.abs(guess[i]\
    \ - game[i]);\n        if (guess[i] === game[i]) {\n            result[i] = 0;\n\
    \        } else {\n            result[i] = diff;\n        }\n    }\n    return\
    \ result;\n}\n", "    // Your code here\n\n    let result = new Array<number>(game.length);\n\
    \    \n    for (let i = 0; i < game.length; i++) {\n        let score = Math.abs(guess[i]\
    \ - game[i]);\n        let isOk = true; \n        for (let j=0; j<i; j++){\n \
    \           if (score<0){\n                isOk = false;\n                break;\n\
    \            }\n        }\n        result[i] = isOk?0:score;\n    }\n    return\
    \ result;\n}\n</code>\nThe result I get:\n<code>\nconst tests = [\n    [ [0, 0,\
    \ 0, 0, 3, 3] , [ 0, 0, 0, 0, 0, 0 ] ],\n    [ [4, 1, 1, 0, 0, -2], [4, 1, -1,\
    \ 1, 0, 0] ],\n    [ [ 4, 0, 0, 0, 5, 5] , [ 4, 4, 4, 4, 4, 0 ] ],\n    [ [ 2,\
    \ 2, 3, 3, 2, 4] , [ 3, 3, 3, 3, 3, 0 ] ]\n];\nlet expected = [0, 0, 0, 0, 3,\
    \ 3];\ntests.forEach(([game, result]) => {\n    console.log(game);\n    console.log(result);\n\
    \    let actual = compare(game, result);\n    console.log('Expected', expected);\n\
    \    console.log('Actual', actual);\n    assert.deepStrictEqual(actual, expected);\n\
    });\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for taking your time out to help\
    \ this out. Looks like a nice solution. I will have to test it against my solution\
    \ and accept if it works. I will also check out your other answer and see how\
    \ it compares.\n<|/ c |>\n<| c |>\nThe test results show that both answers pass\
    \ this test, while only the second one has better performance in most cases. I'll\
    \ be interested to hear which one is better and why (I assume that the first one\
    \ is just wrong).\n<|/ c |>\n<| c |>\nLooking at your other solution, you don't\
    \ need to compare your guesses to the correct answer, you can just find the one\
    \ that is the closest to the correct answer. In my first solution, if you find\
    \ a guess that is less than the correct answer, you set the answer to 0, which\
    \ means that you couldn't guess that answer; if you find a guess that is equal\
    \ to the correct answer, you set the guess to 0, which means that you could have\
    \ guessed that answer. The first one doesn't need to compare guesses to correct\
    \ answers.\n<|/ c |>\n<| c |>\nI guess it is because I have only been studying\
    \ JavaScript for a few months and only been able to get to grips with it so far.\
    \ I will check out your other solution now. I guess I will have to get up to speed\
    \ on how to debug my code and make sure it works.\n<|/ c |>\n<| a dscore=1 |>\n\
    To make the answer more readable and ", "  // Your code here\n  let results: number[]\
    \ = [];\n  for (let i = 0; i < game.length; i++) {\n    let isCorrect = false;\n\
    \    for (let j = 0; j < guess.length; j++) {\n      if (game[i] == guess[j])\
    \ {\n        results.push(0);\n        isCorrect = true;\n        break;\n   \
    \   }\n      if (j === guess.length - 1) {\n        results.push(Math.abs(game[i]\
    \ - guess[j]));\n      }\n    }\n    if (!isCorrect) {\n      results.push(Math.abs(game[i]\
    \ - guess[i]));\n    }\n  }\n  return results;\n}\n", "  \n  let distance: number[]\
    \ = new Array(guess.length).fill(0);\n\n  for (let i = 0; i < guess.length; i++)\
    \ {\n    for (let j = 0; j < game.length; j++) {\n      if (game[j] == guess[i])\
    \ {\n        distance[i] = distance[i] + 1;\n      }\n    }\n  }\n  let result\
    \ = distance.map(e => Math.abs(e - guess[i]));\n\n  return result;\n}\n", "\t\
    if (game.length !== guess.length) return game;\n\t\n\tlet index = 0;\n\tlet gameMax\
    \ = game[index];\n\tlet guessMax = guess[index];\n\tlet diff = 0;\n\t\n\twhile\
    \ (index < game.length && index < guess.length) {\n\t\tif (game[index] > guessMax)\
    \ gameMax = game[index];\n\t\tif (guess[index] > gameMax) guessMax = guess[index];\n\
    \t\tindex++;\n\t}\n\t\n\twhile (index < game.length) gameMax = game[index];\n\t\
    while (index < guess.length) guessMax = guess[index];\n\t\n\twhile (index < game.length\
    \ && index < guess.length) {\n\t\tif (game[index] > guessMax) gameMax = game[index];\n\
    \t\tif (guess[index] > gameMax) guessMax = guess[index];\n\t\tindex++;\n\t}\n\t\
    \n\twhile (index < game.length) gameMax = game[index];\n\twhile (index < guess.length)\
    \ guessMax = guess[index];\n\t\n\twhile (index < game.length && index < guess.length)\
    \ {\n\t\tif (game[index] > guessMax) gameMax = game[index];\n\t\tif (guess[index]\
    \ > gameMax) guessMax = guess[index];\n\t\tindex++;\n\t}\n\t\n\twhile (index <\
    \ game.length) gameMax = game[index];\n\twhile (index < guess.length) guessMax\
    \ = guess[index];\n\t\n\twhile (index < game.length && index < guess.length) {\n\
    \t\tif (game[index] > guessMax) gameMax = game[index];\n\t\tif (guess[index] >\
    \ gameMax) guessMax = guess[index];\n\t\tindex++;\n\t}\n\t\n\twhile (index < game.length)\
    \ gameMax = game[index];\n\twhile (index < guess.length) guessMax = guess[index];\n\
    \t\n\twhile (index < game.length && index < guess.length) {\n\t\tif (game[index]\
    \ > guessMax) gameMax = game[index];\n\t\tif (guess[index] > gameMax) guessMax\
    \ = guess[index];\n\t\tindex++;\n\t}\n\t\n\twhile (index < game.length) gameMax\
    \ = game[index];\n\twhile (index < guess.length) guessMax = guess[index];\n\t\n\
    \twhile (index < game.length && index < guess.length) {\n\t\tif (game[index] >\
    \ guessMax) gameMax = game[index];\n\t\tif (guess[index] > gameMax) guessMax =\
    \ guess[index];\n\t\tindex++;\n\t}\n\t\n\twhile (index < game.length) gameMax\
    \ = game[index];\n\twhile (index < guess.length) guessMax = guess[index];\n\t\n\
    \twhile (index < game.length && index < guess.length) {\n\t\tif (game[index] >\
    \ guessMax) gameMax = game[index];\n\t\tif (gues", "    let result: number[] =\
    \ [];\n    \n    let numMatch = 0;\n    \n    for (let i = 0; i < guess.length\
    \ && i < game.length; i++) {\n        if (guess[i] == game[i]) {\n           \
    \ result.push(i);\n            numMatch++;\n        } else {\n            result.push(game[i]\
    \ - guess[i]);\n        }\n    }\n\n    if (numMatch == 0) {\n        result =\
    \ result.slice(0, result.length-1);\n    }\n\n    return result;\n}\n", "  let\
    \ matches = 0;\n  let correct = 0;\n  for (let i = 0; i < guess.length; i++) {\n\
    \    matches += game[i] == guess[i];\n    if (matches == guess.length) {\n   \
    \   correct += 1;\n    }\n  }\n  let diff = correct ? [0, 0, 0, 0, 0, correct]\
    \ : [0, 0, 0, 0, 0, Math.abs(correct - matches)];\n  return diff;\n}\n</code>\n\
    <|/ a tags=algorithm,javascript dscore=2 |>\n<| c |>\nThis doesn't appear to be\
    \ working for me. Can you provide an example which does not work? The code you\
    \ provided appears to be exactly what I'm after (though I appreciate that my test\
    \ cases have to be wrong). What are you providing the function with to make it\
    \ work?\n<|/ c |>\n<| c |>\nIt works exactly as I described. Do you see any problems\
    \ with the code? It returns an array with the differences. It's not a big difference\
    \ compared to the other answer you gave, but it's smaller and easier to read,\
    \ so why would you reject it out of hand?\n<|/ c |>\n<| c |>\nThe code doesn't\
    \ return what you're expecting. What you're returning is an array of [0, 0, 0,\
    \ 0, 0, 1], when it's actually [0, 0, 0, 0, 0, 3]\n<|/ c |>\n<| c |>\nI see. The\
    \ return value has two differences.\n<|/ c |>\n<| c |>\nIt appears to work now\
    \ - thank you very much! I'm going to do some more testing to make sure I'm understanding\
    \ it correctly.\n<|/ c |>\n<| a |>\nA solution using map() and a ternary operator:\n\
    <code>", "  const score: number[] = []\n  const guesses: number[] = []\n  for\
    \ (let i = 0; i < game.length; i++) {\n    score.push(game[i])\n    guesses.push(guess[i])\n\
    \  }\n  for (let i = 0; i < guesses.length; i++) {\n    const guessScore = guesses[i]\n\
    \    const score = score[i]\n    const difference = guessScore - score\n    if\
    \ (difference < 0) {\n      guesses[i] = Math.abs(difference)\n    } else if (difference\
    \ > 0) {\n      guesses[i] = difference\n    }\n  }\n  return guesses\n}\n", " \
    \ let result: number[] = [];\n  game.forEach((score, index) => {\n    let guess\
    \ = guess[index];\n    result.push((Math.abs(score - guess) < 0) ? Math.abs(score\
    \ - guess) : score - guess);\n  });\n  return result;\n}\n", "    let n = game.length;\n\
    \    let m = guess.length;\n    \n    // I used this for loop instead of for of,\
    \ for reasons below.\n    for (let i = 0; i < m; i++) {\n        if (game[i] <\
    \ guess[i]) {\n            guess[i] = game[i];\n        } else if (game[i] > guess[i])\
    \ {\n            guess[i] = -game[i];\n        }\n    }\n    \n    // I didn't\
    \ remember why I used the second loop, so I'm going to explain it here. \n   \
    \ // Basically, you loop through each guess, and compare it with the current game\
    \ score.\n    // If they are equal, the two guesses are equal, so you subtract\
    \ the game score from the guess to get the difference score.\n    // If they are\
    \ different, you add the game score to the guess to get the difference score.\n\
    \    // If they are unequal, you add the game score to the guess to get the difference\
    \ score.\n    // That is it!\n    for (let i = 0; i < n; i++) {\n        let difference\
    \ = 0;\n        if (game[i] != guess[i]) {\n            difference += Math.abs(game[i]\
    \ - guess[i]);\n            difference += Math.abs(game[i] - guess[i]);\n    \
    \    }\n        guess[i] = difference;\n    }\n    \n    return guess;\n}\n",
  "  let score: number[] = [];\n  for (let i = 0; i < guess.length; i++) {\n    score.push((guess[i]\
    \ == game[i]) ? 0 : Math.abs(guess[i] - game[i]));\n  }\n  return score;\n}\n\n\
    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);\ncompare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2]);\ncompare([1, 4, 3, 6, 7, 3], [5, 6, 2, 4, 3, 1]);\ncompare([6,\
    \ 3, 1, 3, 6, 1], [6, 1, 5, 3, 8, 3]);\ncompare([4, 8, 2, 6, 1, 5], [4, 6, 2,\
    \ 3, 6, 1]);\ncompare([1, 5, 2, 5, 3, 3], [1, 5, 3, 2, 6, 3]);\ncompare([1, 1,\
    \ 2, 2, 3, 3], [2, 2, 3, 3, 3, 1]);\ncompare([4, 6, 2, 3, 6, 1], [4, 6, 2, 3,\
    \ 6, 1]);\n", "  const size = game.length;\n  if (size < 1) return new Array(size).fill(0);\n\
    \  const guessSize = guess.length;\n  if (guessSize < 1) return new Array(guessSize).fill(size);\n\
    \  if (guessSize === size) return game.map((v, i) => v === guess[i] || Math.abs(v\
    \ - guess[i]) === Math.abs(v - guess[i]))\n    .map((v, i) => Math.max(v, guess[i]));\n\
    \  const result = [];\n  const currentScore = new Array(size).fill(-1);\n  const\
    \ currentGuess = new Array(size).fill(-1);\n  const resultScore = new Array(guessSize).fill(-1);\n\
    \  const resultGuess = new Array(guessSize).fill(-1);\n  let i, j;\n  for (i =\
    \ 0; i < size; i++) {\n    for (j = 0; j < guessSize; j++) {\n      if (currentScore[i]\
    \ < 0 || currentGuess < 0 || currentScore[j] > currentScore[i]) {\n        result[j]\
    \ = Math.max(resultScore[i], resultGuess[j]);\n      } else {\n        result[j]\
    \ = Math.min(resultScore[i], resultGuess[j]);\n      }\n    }\n    result[i] =\
    \ Math.max(currentScore[i], resultScore[i]);\n  }\n  return result;\n}\n", " \
    \   if (guess.length !== game.length) {\n        throw \"The length of the two\
    \ arrays must be the same\"\n    }\n    const output = new Array(guess.length)\n\
    \    for (let i=0; i<guess.length; i++){\n        output[i] = Math.abs(guess[i]\
    \ - game[i])\n    }\n    return output\n}", "  game = [...game];\n  let scores\
    \ = [...game].sort((a, b) => b - a);\n  guess = [...guess].sort((a, b) => b -\
    \ a);\n\n  const gameLength = Math.max(game.length, guess.length);\n  const results\
    \ = new Array(gameLength).fill(0);\n\n  for (let i = 0; i < gameLength; i++) {\n\
    \    let gameSum = 0;\n    let guessSum = 0;\n\n    for (let j = 0; j < game.length;\
    \ j++) {\n      gameSum += game[j];\n      if (guess[j] === game[j]) guessSum\
    \ += 1;\n    }\n\n    if (gameSum === guessSum) {\n      results[i] = 0;\n   \
    \ } else {\n      results[i] = Math.abs(gameSum - guessSum);\n    }\n  }\n  return\
    \ results;\n}\n\nconst games = [\n  [3, 1, 2, 3, 4, 5, -1, -2, -3, 4],\n  [5,\
    \ 2, 7, 1, 3, 8, 4, -1, -2, -5],\n  [4, 7, 8, 9, 5, -1, 7, 1, 6, -1],\n  [0, -6,\
    \ -5, 3, -1, -1, 0, 6, 1, -1],\n  [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2],\n\
    \  [-5, -2, -4, -4, -2, -1, -4, -2, -3, -5],\n  [-5, -4, -4, -4, -4, -2, -4, -4,\
    \ -4, -5],\n  [-4, -3, -3, -2, -2, -2, -2, -2, -3, -4],\n  [-4, -4, -4, -2, -2,\
    \ -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4,\
    \ -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n\
    \  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2,\
    \ -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2,\
    \ -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4,\
    \ -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n\
    \  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2,\
    \ -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2,\
    \ -2, -2, -2, -4, -4],\n  [-4, -4, -2, -2, -2, -2, -2, -2, ", "  const result\
    \ = new Array(guess.length).fill(0)\n  for (let i = 0; i < game.length; i++) {\n\
    \    const gameScore = game[i]\n    const guessedScore = guess[i]\n    if (gameScore\
    \ === guessedScore) {\n      result[i] = 0\n      continue\n    }\n    let diff\
    \ = gameScore - guessedScore\n    if (diff < 0) {\n      diff = -diff\n    }\n\
    \    result[i] = Math.abs(diff)\n  }\n  return result\n}\n", "    // TODO: Write\
    \ a function which returns the result of\n    // the computation below:\n    return\
    \ game\n        .map((v, i) => Math.abs(v - guess[i]))\n        .reduce((acc,\
    \ curr) => {\n            if (acc === 0 && curr > 0) {\n                return\
    \ acc;\n            }\n            return curr > acc ? curr : acc;\n        },\
    \ 0)\n        .toArray();\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi Rob, thank\
    \ you for your answer. Your solution works fine with small arrays, but I need\
    \ a solution which can handle large arrays, since these arrays can get quite large.\
    \ I've edited my question to show the two arrays I'm using.\n<|/ c |>\n<| a tags=javascript,typescript\
    \ |>\nIt seems you want to get the difference between each item in two arrays.\
    \ So you just need to loop through each item in both arrays and check the difference\
    \ between them and push it into a new array.\n<code>", "  let scores = [];\n \
    \ game.reduce((acc, cur, idx, array) => {\n    acc[idx] = cur;\n    scores.push(cur);\n\
    \    return acc;\n  }, scores);\n  guess = guess.sort((a, b) => a - b);\n  let\
    \ diffs = [];\n  let currScore = scores.length;\n  let currGuess = guess.length;\n\
    \  let maxScore = game.reduce((acc, cur, idx, array) => {\n    if (idx < array.length\
    \ - 1) {\n      acc[idx] = cur;\n      return acc;\n    }\n    return acc;\n \
    \ }, scores);\n  let maxGuess = guess.length;\n  let currGuesses = 0;\n  while\
    \ (currScore > 0 && currGuesses < guess.length) {\n    while (currScore > 0 &&\
    \ currGuesses < scores.length) {\n      if (scores[currScore] >= maxScore) {\n\
    \        currScore--;\n        currGuesses++;\n      }\n      currScore--;\n \
    \   }\n    while (currGuesses < guess.length) {\n      if (guess[currGuesses]\
    \ >= maxGuess) {\n        currGuesses++;\n      }\n      currGuesses++;\n    }\n\
    \    diffs.push(Math.abs(currGuess - currScore));\n  }\n  return diffs;\n}\n",
  "  var result = [];\n  var gameLength = game.length;\n  var guessLength = guess.length;\n\
    \  \n  if (gameLength === 0 || guessLength === 0) {\n    return result;\n  }\n\
    \  \n  for (var i = 0; i < guessLength; i++) {\n    var diff = Math.abs(guess[i]\
    \ - game[i]);\n    result.push(diff);\n  }\n  \n  return result;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis is definitely better than what I have, but I'm still getting\
    \ some weird results. I'm getting the correct outputs for my first example, but\
    \ for my second, I'm getting an output of 1 for all values.\n<|/ c |>\n<| c |>\n\
    Are you sure the arrays are actually equal? The function works just fine for me\
    \ in all cases of inputs. Please post the example arrays that cause the problem\
    \ to your question.\n<|/ c |>\n<| c |>\nYes, the arrays are definitely equal.\
    \ I posted my first example in another comment. That's just one I tried. Do you\
    \ think it could be the second example array I'm giving you? I'm also getting\
    \ an output of 1 for every output in my second example array.\n<|/ c |>\n<| c\
    \ |>\nI just tried the second example you provided and it works for me (with minor\
    \ modifications). The results are [4,4,1,0,0,6], as expected. What version of\
    \ node are you using and what is the output you see from my program?\n<|/ c |>\n\
    <| c |>\nYeah, you're right. I had made a mistake in my code so it's giving the\
    \ wrong answer. I had used your code for one test case and had made a mistake.\
    \ Thank you for your help!\n<|/ c |>\n<| a |>\nI wrote a short function to compare\
    \ two arrays and return a list of mismatches.\n<code>", "    if (game.length !==\
    \ guess.length) throw \"Invalid input.\"\n    \n    let numGuesses = guess.length\n\
    \    let numScores = game.length\n    let maxScore = Math.max(...game)\n    let\
    \ minScore = Math.min(...game)\n    \n    let result = new Array(numGuesses).fill(0)\n\
    \    for (let i = 0; i < numGuesses; ++i) {\n        let thisScore = game[i]\n\
    \        let thisGuess = guess[i]\n        let thisGuessesCount = 0\n        for\
    \ (let j = 0; j < numScores; ++j) {\n            let thisScore = game[j]\n   \
    \         let thisGuess = guess[j]\n            if (thisScore == thisGuess)\n\
    \                thisGuessesCount++\n        }\n        if (thisGuessesCount ===\
    \ numScores)\n            result[i] += 0\n        else {\n            result[i]\
    \ += Math.abs(thisScore - thisGuess)\n        }\n    }\n    \n    for (let i =\
    \ 0; i < numGuesses; ++i) {\n        result[i] = Math.abs(result[i] - minScore)\n\
    \    }\n    \n    return result\n}\n", "  //write your code here\n}\n", "    let\
    \ score = game;\n    let error = Array.from(guess, g => Math.abs(g - score));\n\
    \    let guesses = game.map(g => Math.abs(g - guess));\n    let sumError = error.reduce((acc:\
    \ number, e: number) => acc + e, 0);\n    let numError = Math.round(sumError /\
    \ guesses.length);\n    return [numError, error];\n}\n</code>\n<|/ a dscore=0\
    \ tags=typescript,javascript |>\n<| c |>\nPlease see my comment on Andr\xE9 Ram's\
    \ answer.\n<|/ c |>\n<| c |>\nSure, no problem! And thanks for pointing that out.\
    \ I've made some minor modifications and tested it a bit.\n<|/ c |>\n<| a |>\n\
    <code>\nvar numbers = [1,2,3,4,5];\nvar guess = [4,2,5,6,1];\n\nvar sumGuesses\
    \ = guess.length;\nvar sumNumbers = numbers.length;\n\nvar numError = 0;\n", " \
    \   let result = [];\n    let score = 0;\n    let currentScore = 0;\n    let guesses\
    \ = 0;\n    let correctGuesses = 0;\n    game.forEach((value, index) => {\n  \
    \    if (value !== guess[index]) {\n        currentScore = value + Math.abs(guess[index]\
    \ - value);\n      } else {\n        currentScore = 0;\n      }\n      if (currentScore\
    \ === score) {\n        guesses++;\n        correctGuesses++;\n      } else {\n\
    \        guesses++;\n      }\n      result.push(currentScore);\n    });\n    score\
    \ = score - correctGuesses;\n    result.push(score);\n    return result;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks, your solution is much simpler than\
    \ mine.\n<|/ c |>\n<| a dscore=0 |>\nYou can try below code:\n<code>", "  const\
    \ guesses = guess.map((e) => {\n    return Math.abs(e - game);\n  });\n  return\
    \ guesses.map((e, i) => {\n    if (e < 0 || e > game.length) return Math.abs(e\
    \ - game);\n    if (e === 0) return 0;\n    return e;\n  });\n}\n", "  const n\
    \ = game.length\n  const m = guess.length\n  if (n != m) return [0, 0, 0, 0, 0,\
    \ 0]\n  const scores = new Array<number>(n)\n  for (let i = 0; i < n; i++) {\n\
    \    scores[i] = game[i] - guess[i]\n  }\n  return scores\n}\n", "    let result\
    \ = [];\n    for (let i = 0, n = game.length; i < n; i++) {\n        result.push((guess[i]\
    \ !== game[i]) ? Math.abs(guess[i] - game[i]) : 0);\n    }\n    return result;\n\
    }", "  const bestScore = game.reduce((prev, cur) => (prev < cur) ? prev : cur,\
    \ 0);\n  let score: number = 0;\n  let wrongGuesses: number[] = [];\n  let rightGuesses:\
    \ number[] = [];\n  for (let i = 0; i < guess.length; i++) {\n    const guessed\
    \ = guess[i] >= bestScore;\n    const guessedIndex = guessed? bestScore - guess[i]\
    \ : guess;\n    const scoreIndex = score === guessed? 0 : score;\n    score +=\
    \ guessed? 1 : -1;\n    if (guessed) {\n      rightGuesses.push(guessedIndex);\n\
    \    } else {\n      wrongGuesses.push(scoreIndex);\n    }\n  }\n  return wrongGuesses.map(index\
    \ => Math.abs(index - score));\n}\n", "  let result: number[] = [];\n  for (let\
    \ i = 0, j = 0; i < game.length && j < guess.length; ) {\n    if (game[i] < guess[j])\
    \ {\n      result.push(Math.abs(game[i] - guess[j]));\n      i++;\n    } else\
    \ if (game[i] > guess[j]) {\n      result.push(Math.abs(guess[j] - game[i]));\n\
    \      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return result;\n\
    }\n", "  var gamesWon: number[] = [];\n  var gamesLost: number[] = [];\n  for\
    \ (var i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n     \
    \ gamesWon[i] = 0;\n      gamesLost[i] = game[i] === 0 ? 0 : Math.abs(game[i]\
    \ - guess[i]);\n    } else {\n      gamesWon[i] = Math.abs(game[i] - guess[i]);\n\
    \      gamesLost[i] = 0;\n    }\n  }\n  return gamesWon.concat(gamesLost);\n}",
  "  let result: number[] = [];\n  for (let i = 0; i < guess.length; ++i) {\n    let\
    \ idx = guess[i];\n    if (game[idx] > game[idx + 1]) {\n      result.push(Math.abs(game[idx]\
    \ - game[idx + 1]));\n    } else {\n      result.push(0);\n    }\n  }\n  return\
    \ result;\n}\n\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);\ncompare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]);\n</code>\n<|/ a tags=typescript dscore=2\
    \ |>\n<| a dscore=1 tags=typescript |>\n<code>\nconst compare = (game: number[],\
    \ guess: number[]): number[] => {\n  const len = Math.min(guess.length, game.length);\n\
    \  return Array(len).fill(0).map((_, i) => Math.abs(game[i] - guess[i]));\n};\n\
    \nconst a = compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);\nconst b = compare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]);\nconst c = compare([0, 5, 0, 0, 0, 4],\
    \ [1, 2, 3, 4, 2, -2]);\nconst d = compare([1, 2, 3, 4, 5, 1], [0, 5, 0, 0, 0,\
    \ 4]);\n\nconsole.log(a, b, c); // [0, 0, 0, 0, 3, 3]\nconsole.log(d); // [4,\
    \ 4, 1, 0, 0, 6]</code>\n<|/ a |>\n<| a dscore=1 tags=typescript |>\nJust for\
    \ fun I wrote this solution:\n<code>\ntype Comparer = ((x: number, y: number)\
    \ => number) | number | string;\ntype Comparer = (x: number, y: number) => number;\n\
    type Comparer = number | string;\n", "    let guessedCorrectly: number[] = [];\n\
    \    for (let index = 0; index < game.length; index++) {\n        guessedCorrectly.push(game[index]\
    \ === guess[index] ? 0 : Math.abs(game[index] - guess[index]));\n    }\n    return\
    \ guessedCorrectly;\n}\n", "  if (game.length !== guess.length) {\n    throw new\
    \ Error('The number of games and guesses must be equal');\n  }\n  const guessesPerGame\
    \ = guess.length / game.length;\n  let maxScore = -Infinity;\n  let bestIndexes\
    \ = [];\n  for (let i = 0; i < game.length; i++) {\n    const index = Math.round((game[i]\
    \ / guessesPerGame) * guesses.length);\n    const score = Math.abs(game[i] - guess[index]);\n\
    \    if (score > maxScore) {\n      maxScore = score;\n      bestIndexes = [index];\n\
    \    } else if (score === maxScore) {\n      bestIndexes.push(index);\n    }\n\
    \  }\n  return bestIndexes;\n}\n", "  // your code here\n  if (guess.length !==\
    \ game.length) {\n    console.log(\"Error! The length of the game, the length\
    \ of the guess array must be the same!\");\n  }\n  let result: number[] = [];\n\
    \  for (let i = 0; i < game.length; i++) {\n    result.push(Math.abs(guess[i]\
    \ - game[i]));\n  }\n  return result;\n}\n\nconsole.log(compare([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]));\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1, 1,\
    \ 0, 0, -2]));\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, 3]));\n\
    console.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 6, 2]));\nconsole.log(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 5, 1]));\nconsole.log(compare([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 6, 1]));\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, 4]));</code>\n<|/ a |>\n<| a |>\n<code>", "  const results: number[] = new\
    \ Array(guess.length).fill(0);\n  for (let i = 0; i < guess.length; i++) {\n \
    \   for (let j = 0; j < game.length; j++) {\n      if (j === guess[i]) {\n   \
    \     results[i] += 1;\n      }\n    }\n  }\n  return results;\n}\n", "  const\
    \ score: number[] = []\n  for (let i = 0; i < guess.length; i++) {\n    let j\
    \ = 0\n    let diff = 0\n    while (j < game.length && game[j] === guess[i]) {\n\
    \      diff++\n      j++\n    }\n    score.push(Math.abs(guess[i] - game[j]))\n\
    \  }\n  return score\n}\n\n<|/ file filename=lecture14.ts ext=.ts source=github\
    \ dstars=1 |>\n<| c |>\nI agree with your solution, that's a clever way to solve\
    \ this problem using for loops. However, the `while` loop in `compare` seems unnecessarily\
    \ complicated for such a simple task as checking for equality. The `while` loop\
    \ in `compare` could be replaced with a for loop that runs through every element\
    \ in the array and compares it to the current value of `guess[i]`. This could\
    \ also be done with a `for` loop and a `break` statement after every `diff++`.\
    \ Would that make a significant difference in execution time?\n<|/ c |>\n<| c\
    \ |>\nWell, the while loop in `compare` could be replaced with a for loop that\
    \ runs through every element in the array and compares it to the current value\
    \ of `guess[i]`. This could also be done with a `for` loop and a `break` statement\
    \ after every `diff++`. Would that make a significant difference in execution\
    \ time? The break statement would be faster for a `for` loop, but it would not\
    \ make a significant difference for `while` loops. In addition, your solution\
    \ is easier to understand.\n<|/ c |>\n<| c |>\nIt's a good solution. I like the\
    \ `while` loop in `compare` because it is simpler and easier to read. I think\
    \ it would be faster to replace the `while` loop in `compare` with a `for` loop\
    \ and a `break` statement, but that would be slower and more complicated code.\n\
    <|/ c |>\n<| c |>\nYou're right, it would be slower because of the `break` statement.\
    \ But it would be faster for a `for` loop and a `break` statement. `while` loops\
    \ are faster when they do not have a `break` statement, but a `for` loop has a\
    \ `break` statement. So I would favor using `while` loops over `for` loops unless\
    \ I already know that my code is going to be executed in under 500 milliseconds.\n\
    <|/ c |>\n<| c |>\nI made a test with your solution (not using `while` loops)\
    \ and your solution (using `while` loops) against the solution in the question\
    \ (using `for` loops). With my solution, the average time was around 500 milliseconds,\
    \ and with your solution", "    if (game.length !== guess.length) throw \"lengths\
    \ must be equal\";\n\n    const result = [];\n    for (let i = 0; i < guess.length;\
    \ i++) {\n        \n        // We have to check all elements in the game. \n \
    \       // If all elements have a value greater than 0, \n        // then we know\
    \ that the score is too high\n        if (game.every(function (num) {\n      \
    \      return num > 0;\n        })) {\n            result.push(1);\n        }\
    \ else {\n            let diff = 0;\n            for (let j = 0; j < game.length;\
    \ j++) {\n                if (game[j] > 0) diff = Math.abs(game[j] - guess[i]);\n\
    \            }\n            result.push(diff);\n        }\n    }\n    return result;\n\
    }\n", "    const score1 = game.slice(0);\n    const score2 = guess.slice(0);\n\
    \    score1.sort(function (a, b) {\n        return a - b;\n    });\n    score2.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    let scoreDiffs = [];\n    for\
    \ (let i = 0; i < game.length; i++) {\n        const diff = score2[i] - score1[i];\n\
    \        if (diff === 0) {\n            scoreDiffs[i] = 0;\n        } else {\n\
    \            scoreDiffs[i] = diff;\n        }\n    }\n    const result = scoreDiffs.map((diff,\
    \ index) => {\n        if (game[index] === guess[index]) {\n            return\
    \ 0;\n        }\n        return Math.abs(diff);\n    });\n    result.sort((a,\
    \ b) => {\n        if (b > a) {\n            return -1;\n        }\n        if\
    \ (b < a) {\n            return 1;\n        }\n        return 0;\n    });\n  \
    \  return result;\n}", "    const size = guess.length;\n    if (size === 0) return\
    \ [];\n\n    let result: number[] = [];\n    for (let i = 0; i < size; i++) {\n\
    \        const diff = guess[i] - game[i];\n        if (diff < 0) result.push(-diff);\n\
    \        else result.push(diff);\n    }\n    return result;\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nNice answer. Wondering what the performance of this approach is.\
    \ I suppose it might be the opposite, since you keep adding elements to an array\
    \ in a loop?\n<|/ c |>\n<| c |>\nI agree. I'd definitely recommend against it.\
    \ If you're comparing large data sets, I'd suggest looking into sorting both arrays,\
    \ then comparing them with a simple for loop. Since sorting arrays is a O(n log\
    \ n) operation, this would be a good candidate for such a function.\n<|/ c |>\n\
    <| c |>\nThanks, I learned a lot from this answer. One thing to point out is that\
    \ this algorithm doesn't handle ties!\n<|/ c |>\n<| c |>\nThank you for pointing\
    \ that out. I added a version that does, and fixed a bug. I also added a benchmark\
    \ I ran to test the performance, and I'm finding that the loop I wrote was actually\
    \ slower in Node.js than a traditional for loop with Array.prototype.sort().\n\
    <|/ c |>\n<| a dscore=0 |>\nYou could try using a dictionary for the matching\
    \ numbers, storing the corresponding numbers and their scores in a list.\nWhen\
    \ you're done with the list, you can sort the numbers in the dictionary by the\
    \ scores. Then you can compare the sorted numbers in the dictionary against your\
    \ guess and return the index of the number in the dictionary that corresponds\
    \ to the smallest score difference. \n<code>\ndef compare(nums, guess): \n   \
    \ nums_sorted = sorted(nums)\n    guess_sorted = sorted(guess)\n    index = 0\n\
    \    dict = {}\n    for x in nums_sorted:\n        if x in dict:\n           \
    \ dict[dict[x]].append(x)\n        else:\n            dict[dict[x] = []\n    \
    \        dict[dict[x]].append(x)\n    diff = guess_sorted - nums_sorted\n    index\
    \ = min(index, diff.index(min(diff)))\n    return dict[index]\n</code>\n<|/ a\
    \ tags=arrays,javascript,algorithm,typescript |>\n<| a |>\nYou can use an object\
    \ to store the scores in each guess and a map for the original guesses. When you\
    \ find a new number in the guess and find it on the map, you can update the score\
    \ and update the map accordingly.\n<code>\nlet guesses = [1, 2, 3];\nlet guesses_map\
    \ = {};\n\nfor (let i = 0; i < guesses.length; i++) {\n    let score = guesses[i];\n\
    \    let key = guesses[i];\n    if (!guesse", "    let result: number[] = new\
    \ Array(guess.length);\n\n    for (let i = 0; i < guess.length; i++) {\n     \
    \   result[i] = Math.abs(guess[i] - game[i]);\n    }\n\n    return result;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nWhile this code may solve the question, [including\
    \ an explanation](//meta.stackexchange.com/q/114762) of how and why this solves\
    \ the problem would really help to improve the quality of your post, and probably\
    \ result in more up-votes. Remember that you are answering the question for readers\
    \ in the future, not just the person asking now. Please [edit] your answer to\
    \ add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| c |>\nThanks for your reply. I have added the explanation.\n\
    <|/ c |>\n<| c |>\nThanks for your reply and it works perfectly. I just want to\
    \ know if there's a way to modify this code to make some changes and it still\
    \ works.\n<|/ c |>\n<| c |>\nThis code is not working as expected. I'm still trying\
    \ to figure out what's wrong with it, but it's not working as expected.\n<|/ c\
    \ |>\n<| c |>\ncan you give an example of how it fails?\n<|/ c |>\n<| a dscore=1\
    \ |>\nI created a function called \"compare\".\nIt takes two arrays and compares\
    \ them to see if the numbers in the first array are less than the numbers in the\
    \ second array.\nIt then returns the number of items in the first array that are\
    \ less than the items in the second array\n<code>", "    const lenGame = game.length;\n\
    \    const lenGuess = guess.length;\n    let arrOfDiffs = new Array(lenGuess);\n\
    \    for (let i = 0; i < lenGuess; i++) {\n        let diff = Math.abs(guess[i]\
    \ - game[i]);\n        if (diff !== 0) {\n            arrOfDiffs[i] = diff;\n\
    \        }\n    }\n    return arrOfDiffs;\n}\n", "    const scores = [0, 0, 0,\
    \ 0, 0, 0];\n    for (let i = 0; i < 4; i++) {\n        if (game[i] != guess[i])\
    \ {\n            scores[i] = Math.abs(game[i] - guess[i]);\n        } else {\n\
    \            scores[i] = 0;\n        }\n    }\n    return scores;\n}\n</code>\n\
    <|/ a tags=javascript,arrays,loops |>\n<| a |>\n<code>", "  let score = game.reduce((acc,\
    \ x, i) => acc + x, 0)\n  let totalGuess = guess.reduce((acc, x) => acc + x, 0)\n\
    \  let diff = guess - score\n  let result: number[] = []\n  result.push(score)\n\
    \  result.push(totalGuess)\n  if (Math.abs(diff) == totalGuess) {\n    result.push(0)\n\
    \  } else {\n    result.push(Math.abs(diff))\n  }\n  return result\n}\n\nlet a\
    \ = compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\nconsole.log(a)\n", "   \
    \ const len = Math.max(game.length, guess.length);\n    const result = new Array(len);\n\
    \n    for (let i = 0; i < len; i++) {\n        result[i] = Math.abs(game[i] -\
    \ guess[i]);\n    }\n    return result;\n}\n", "  // Your code here\n  const result\
    \ = [];\n  let gameLength = game.length;\n  let guessLength = guess.length;\n\
    \  let correct = 0;\n  for (let i = 0; i < guessLength; i++) {\n    if (guess[i]\
    \ == game[i]) {\n      correct++;\n    } else {\n      const newNum = game[i]\
    \ - guess[i];\n      if (newNum < 0) {\n        newNum *= -1;\n      }\n     \
    \ result.push(newNum);\n    }\n  }\n  for (let i = 0; i < gameLength; i++) {\n\
    \    result.push(Math.abs(guess[i] - game[i]));\n  }\n  if (correct == guessLength)\
    \ {\n    return result.slice(0, guessLength);\n  } else {\n    return result.slice(0,\
    \ guessLength - correct);\n  }\n}\n", "    //Fill this in.\n}", "  const len =\
    \ guess.length;\n  const results = new Array<number>[len];\n  const games = games.map((num,\
    \ index) => {\n    if (num === guess[index]) {\n      return 0;\n    }\n    const\
    \ diff = guess[index] - num;\n    if (diff > 0) return diff;\n    if (diff < 0)\
    \ return -diff;\n  }\n  return results;\n}\n", "  let arr = [];\n  for (let i\
    \ = 0; i < guess.length; i += 1) {\n    const arr2 = game.slice();\n    const\
    \ arr = game.length - guess.length;\n    arr2[game.length - 1 - i] = guess[i];\n\
    \    const result = arr2 === arr;\n    arr[i] = result ? 0 : Math.abs(guess[i]\
    \ - arr2);\n  }\n  return arr;\n}\n", "    const scores: number[] = new Array(guess.length);\n\
    \    for (let i = 0; i < scores.length; i++) {\n        scores[i] = game[i] >\
    \ guess[i] ? Math.abs(game[i] - guess[i]) : -Math.abs(game[i] - guess[i]);\n \
    \   }\n    return scores;\n}", "    let myIndex = 0;\n    let gIndex = 0;\n  \
    \  const difference = new Array(guess.length).fill(Infinity);\n    while (myIndex\
    \ < game.length && gIndex < guess.length) {\n        if (game[myIndex] == guess[gIndex])\
    \ {\n            difference[gIndex] = 0;\n            myIndex++;\n           \
    \ gIndex++;\n        }\n        else if (game[myIndex] < guess[gIndex]) {\n  \
    \          difference[gIndex] = game[myIndex] - guess[gIndex];\n            myIndex++;\n\
    \        }\n        else {\n            difference[gIndex] = guess[gIndex] - game[myIndex];\n\
    \            gIndex++;\n        }\n    }\n    return difference;\n}\n", "    game\
    \ = game.slice();\n    guess = guess.slice();\n    \n    if (game.length < guess.length)\
    \ {\n        console.log(\"game not long enough\")\n        return guess;\n  \
    \  }\n\n    let results: number[] = [];\n    for (let i = 0; i < game.length;\
    \ i++) {\n        let score = game[i];\n        let guess = guess[i];\n      \
    \  \n        results.push(Math.abs(score - guess));\n    }\n    return results;\n\
    }\n</code>\n<|/ a |>\n<| a tags=arrays,javascript,compare dscore=2 |>\nHere is\
    \ how I solved it using a custom function to return if one array was greater or\
    \ less than another array.\n<code>", "    let result: number[] = [];\n    let\
    \ length = game.length;\n    for (let i = 0; i < length; i++) {\n        result.push(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\n", "  let maxCount = guess.length\n\
    \n  let index = 0\n  let score = 0\n  let found = true\n  while (index < maxCount\
    \ && found) {\n    if (guess[index] == game[index]) {\n      score += game[index]\n\
    \      index++\n    } else {\n      score -= Math.abs(guess[index] - game[index])\n\
    \      found = false\n    }\n  }\n  // if the game was found at the end of the\
    \ loop, we can use the score to determine the number of misses\n  // and let them\
    \ know what they guessed\n  return found\n    ? [score, maxCount - index]\n  \
    \  : [score, score]\n}\n", "    // Your code here\n    \n\n    return <any>game\n\
    }\n", "  //Your code here\n  let match = 0;\n  game.map((score,i) => {\n    if\
    \ (score===guess[i]) {\n      match++;\n    }\n  });\n  return match.map((score,i)\
    \ => {\n    if (score===0) return 0;\n    return Math.abs(score-guess[i]);\n \
    \ });\n}\n", "    const result = Array(guess.length).fill(0);\n    for (let i\
    \ = 0; i < guess.length; i++) {\n        const diff = Math.abs(guess[i] - game[i]);\n\
    \        result[i] = diff;\n    }\n    return result;\n}\n\nconst result = compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);\nconsole.log(result);</code>\n<|/ a |>\n\
    <| c |>\nYes, I realized that there should be no \"else\" clause in the \"for\"\
    \ loop. I am not sure I understand your solution. I would like to have some comments\
    \ on the code.\n<|/ c |>\n<| c |>\nThe for loop starts with an index `i` from\
    \ `0` to `guess.length - 1`. The value of this index is incremented by `1`. So\
    \ after the loop, the index will have the value of `guess.length - 1`.\n<|/ c\
    \ |>\n<| c |>\nI see. And what does `i--` do in the loop body? I cannot figure\
    \ out its use in the \"for\" loop.\n<|/ c |>\n<| c |>\n`i--` decrements the value\
    \ of `i`, so that it will be `-1` after the loop. After the loop, the value of\
    \ `i` will be `guess.length - 1`, that is, `0`.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. `i--` is used to decrement the loop index after each time the loop body\
    \ is executed.\n<|/ c |>\n<| a tags=javascript,arrays,algorithm |>\nYou could\
    \ get the diffs with Array#reduce.\n\n<code>\nvar array1 = [1, 2, 3, 4, 5, 1],\n\
    \    array2 = [1, 2, 3, 4, 2, -2],\n    diffs = array1.reduce((r, v, i) => {\n\
    \        r[i] = Math.abs(v - array2[i]);\n        return r;\n    }, []);\n\nconsole.log(diffs);</code>\n\
    .as-console-wrapper { max-height: 100% !important; top: 0; }\n<|/ a dscore=0 |>\n\
    <| c |>\nThe solution assumes that the arrays are of the same length. But it seems\
    \ that was unstated in the question.\n<|/ c |>\n<| c |>\ntrue, it works with dynamic\
    \ lengths as well. but with unequal lengths, we could omit the `0` index, so `i`\
    \ would be the index and not the index.\n<|/ c |>\n<| c |>\nI am not sure I understand\
    \ your solution. Could you please explain in some detail the code in the `reduce`\
    \ function? I am not sure I understand what `r` and `v` stand for, and what `i`\
    \ is used for. What does the `r[i] = ` do? I cannot figure out its usage in the\
    \ loop.\n<|/ c |>\n<| c |>\n`", "  let result: number[] = [];\n  guess.forEach(g\
    \ => {\n    game.forEach((s, index) => {\n      if (s == g) {\n        result[index]\
    \ = 0;\n        return;\n      }\n      if (result[index] == undefined) {\n  \
    \      result[index] = Math.abs(s - g);\n      } else {\n        result[index]\
    \ += Math.abs(s - g);\n      }\n    });\n  });\n  return result;\n}\n", "  if\
    \ (guess.length !== game.length) {\n    throw new Error(\"Lengths did not match\
    \ at all or at different points\");\n  }\n\n  let result: number[] = new Array(guess.length);\n\
    \  for (let i = 0; i < guess.length; i++) {\n    result[i] = Math.abs(guess[i]\
    \ - game[i]);\n  }\n\n  return result;\n}\n\n<|/ file source=github ext=.ts filename=leet_code55.ts\
    \ |>\n<| c |>\nthank you so much!  i am so glad that someone can help me with\
    \ this. i am really trying to get to know typescript and javascript. thank you\
    \ so much!\n<|/ c |>\n<| a dscore=0 tags=javascript,typescript,algorithm,arrays\
    \ |>\n<code>", "  const score: number[] = [];\n  for (let i = 0; i < guess.length;\
    \ i++) {\n    let scoreToGuess = game[i] - guess[i];\n    score.push(scoreToGuess);\n\
    \    if (scoreToGuess == 0) {\n      return score;\n    }\n  }\n  return score;\n\
    }\n", "    const gameScore = game.slice();\n    const guessScore = guess.slice();\n\
    \n    for (let i = 0; i < game.length; i += 1) {\n        gameScore[i] = Math.abs(gameScore\
    \ - guess[i]);\n        guessScore[i] = Math.abs(guessScore - guess[i]);\n   \
    \ }\n    return guessScore;\n}\n</code>\n<|/ a tags=arrays,algorithm,compare,typescript,javascript\
    \ |>\n<| a tags=arrays,algorithm,compare,typescript,javascript |>\nThis solution\
    \ is very similar to Danny Clarke's, but it is possible to return the array in\
    \ \"human readable\" format\n<code>", "    let correct = 0;\n    let guessed:\
    \ number[] = [];\n    for (let i = 0; i < guess.length; i++) {\n        guessed.push(0);\n\
    \    }\n    for (let i = 0; i < game.length; i++) {\n        if (guessed.indexOf(game[i])\
    \ === -1) {\n            guessed[game[i]] = 1;\n        }\n    }\n    let result\
    \ = [];\n    for (let i = 0; i < guess.length; i++) {\n        let diff = guess[i]\
    \ - game[i];\n        if (diff > 0) {\n            result.push(diff);\n      \
    \  }\n        else {\n            result.push(Math.abs(diff));\n        }\n  \
    \  }\n    return result;\n}\n<|/ file ext=.ts filename=index.ts |>\n<| c |>\n\
    I see that you are very much experienced with this topic. I hope I can find you\
    \ here when I have trouble understanding your answer. Thank you very much! I really\
    \ appreciate your help.\n<|/ c |>\n<| c |>\nI am glad I could help you out - but\
    \ I am pretty sure I already found that solution when looking through the solutions.\n\
    <|/ c |>\n<| a |>\nAfter taking a break, I finally came up with a solution. Thanks\
    \ so much to those that helped. \nHere is the solution.\n<code>", "    let wrong\
    \ = 0\n    let answer = 0\n    for (let i = 0; i < guess.length; i++) {\n    \
    \    if (guess[i] != game[i]) wrong++\n    }\n    for (let i = 0; i < game.length;\
    \ i++) {\n        if (guess[i] != game[i]) answer++\n    }\n    if (wrong ===\
    \ guess.length) return [0, 0, 0, 0, 0, 0]\n    let guesses = guess - game\n  \
    \  let score = guesses.reduce((a, b) => a + b, 0)\n    return [wrong, score, wrong,\
    \ guesses.length, answer]\n}\n", "  let result: number[] = [],\n    i,\n    score\
    \ = 0,\n    lastScore = -1;\n  for (i = 0; i < guess.length; i += 1) {\n    score\
    \ += game[i];\n    if (score - lastScore < 0) break;\n    lastScore = score;\n\
    \  }\n  for (i = 0; i < guess.length; i += 1) {\n    if (guess[i] !== game[i])\
    \ {\n      result[i] = Math.abs(lastScore - game[i]);\n    }\n  }\n  return result;\n\
    }\n\nconst scores = [\n  10, 9, 12, 10, 10, 14, 14, 10, 10, \n  10, 10, 10, 12,\
    \ 13, 10, 10, 13, 14, \n  10, 10, 10, 14, 13, 10, 10, 13, 13, \n  10, 10, 10,\
    \ 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10,\
    \ 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10,\
    \ 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n \
    \ 10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14,\
    \ \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14,\
    \ 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10,\
    \ 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10,\
    \ 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14,\
    \ 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14,\
    \ 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10,\
    \ 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10,\
    \ 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10,\
    \ 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n \
    \ 10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14,\
    \ \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14,\
    \ 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10,\
    \ 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14, 10,\
    \ 10, 14, 14, \n  10, 10, 10, 14, 14, 10, 10, 14, 14, \n  10, 10, 10, 14, 14,\
    \ 10, 10, 14, 14, \n  10, 10, ", "    return game.map((item, i) => {\n       \
    \ return Math.abs(item - guess[i]);\n    });\n}\n", "    let result = [];\n  \
    \  for (let i = 0; i < game.length; i++) {\n        if (game[i] != guess[i]) {\n\
    \            result.push(Math.abs(game[i] - guess[i]));\n        }\n    }\n  \
    \  return result;\n}\n\nvar compare = require(\"../problems/problem4/compare\"\
    ).compare;\n", "    let totalDiffs: number[] = [];\n    let totalGuesses: number[]\
    \ = [];\n    \n    // Loops through the whole game, and increments the totalGuesses\
    \ for every correct guess in turn. \n    // It also increments the totalDiffs\
    \ for every wrong guess in turn.\n    for (let i = 0; i < game.length; i++) {\n\
    \        let wrong = false;\n        totalGuesses[i] = 0;\n        let diff =\
    \ abs(guess[i] - game[i]);\n        \n        for (let j = 0; j < guess.length;\
    \ j++) {\n            if (Math.abs(guess[j] - game[i]) == diff) {\n          \
    \      totalGuesses[i]++;\n                totalDiffs[j] = 0;\n            }\n\
    \            else {\n                totalDiffs[j] += Math.abs(guess[j] - game[i]);\n\
    \                wrong = true;\n            }\n        }\n        if (!wrong)\
    \ {\n            totalDiffs[i]++;\n        }\n    }\n    \n    // Finally creates\
    \ an array that has the total distances out of all correct guesses\n    let answer:\
    \ number[] = [];\n    for (let i = 0; i < totalGuesses.length; i++) {\n      \
    \  let diff = totalDiffs[i]/totalGuesses[i]\n        if (diff > 0) {\n       \
    \     answer.push(diff);\n        } else {\n            answer.push(Math.abs(diff));\n\
    \        }\n    }\n    \n    return answer;\n}\n", "  const numCorrectlyGuessed:\
    \ number[] = []\n  const correctGuess: number[] = []\n  for (let i = 0; i < guess.length;\
    \ i++) {\n    correctGuess[i] = guess[i]\n    numCorrectlyGuessed.push(game[i])\n\
    \  }\n\n  guess = correctGuess\n  return numCorrectlyGuessed\n}\n", "  let gameLen\
    \ = game.length, guessLen = guess.length, i, j, min, max;\n  let gameSorted =\
    \ game.slice().sort();\n  let guessSorted = guess.slice().sort();\n  for (i =\
    \ 0; i < guessLen; i++) {\n    min = gameLen, max = gameLen;\n    for (j = 0;\
    \ j < gameLen; j++) {\n      if (gameSorted[j] < guessSorted[i]) {\n        min\
    \ = j;\n      } else if (gameSorted[j] > guessSorted[i]) {\n        max = j;\n\
    \      }\n    }\n    if (gameLen - max > 0) {\n      let diff = gameLen - max;\n\
    \      return [diff, diff];\n    }\n  }\n  return [0, 0];\n}\n", "  let totalDiff\
    \ = 0;\n  for (let i = 0; i < game.length; i++) {\n    totalDiff += Math.abs(game[i]\
    \ - guess[i]);\n  }\n  return [totalDiff];\n}\n", "    let score = new Array(guess.length).fill(0);\n\
    \    let result = new Array(guess.length).fill(0);\n    \n    \n    for (let i\
    \ = 0; i < guess.length; i++) {\n        // We must compare the score with the\
    \ guess, because they aren't the same length.\n        // If score > guess we'll\
    \ add one to score, otherwise subtract one.\n        \n        // Since we're\
    \ working with absolute difference, \n        // if the score is < guess, then\
    \ the absolute difference between the guess and score will be positive.\n    \
    \    // If the score is > guess, then the absolute difference will be negative.\n\
    \        \n        if (game[i] > guess[i]) {\n            score[i] += 1;\n   \
    \     }\n        else {\n            score[i] -= 1;\n        }\n        \n   \
    \     result[i] = Math.abs(game[i] - guess[i]);\n    }\n    \n    return result;\n\
    }\n", "    var score: number[] = [];\n\n    // Loop through the numbers of the\
    \ first array\n    for (var i: number = 0, j: number = game.length; i < j; i++)\
    \ {\n        score[i] = 0;\n    }\n\n    // Loop through the numbers of the second\
    \ array\n    for (var i: number = 0, j: number = guess.length; i < j; i++) {\n\
    \        score[i] = Math.abs(guess[i] - game[i]);\n    }\n\n    return score;\n\
    }\n", "  let results = [];\n  let index = 0;\n  while (index < game.length &&\
    \ index < guess.length) {\n    if (game[index] === guess[index]) index++;\n  \
    \  else results.push(Math.abs(game[index] - guess[index]));\n  }\n  return results;\n\
    }\n", "  let count = 0;\n  for(const guess of guess) {\n    count += Math.abs(guess\
    \ - game[count])\n  }\n  return game\n}\n", "  var result: number[] = [];\n  for\
    \ (var i = 0; i < guess.length; ++i) {\n    var d = guess[i] - game[i];\n    if\
    \ (d == 0) {\n      result.push(i);\n    }\n    else if (d < 0) {\n      result.push(Math.abs(d));\n\
    \    }\n    else {\n      result.push(-d);\n    }\n  }\n  return result;\n}\n",
  "    const result = [] as number[];\n    let best = 0;\n    let bestIndex = 0;\n\
    \n    for (let i = 0; i < guess.length; i++) {\n        const score = Math.abs(game[i]\
    \ - guess[i]);\n        if (score > best) {\n            best = score;\n     \
    \       bestIndex = i;\n        } else if (score === best) {\n            best++;\n\
    \        }\n    }\n\n    result.push(best);\n    return result;\n}\n</code>\n\
    <|/ a tags=javascript,arrays,algorithm |>\n<| c |>\nThis solution is very fast\
    \ but it is not 100% accurate. I suggest to add a condition for the end of the\
    \ loop (I updated my answer)\n<|/ c |>\n<| c |>\nAm I the only one who miss the\
    \ `game` and `guess` arguments?\n<|/ c |>\n<| c |>\nI see you realise that `compare`\
    \ returns the same array each time... `compare([1, 2, 3], [1, 2, 3])` will return\
    \ `[1, 2, 3]`\n<|/ c |>\n<| c |>\nYou're right, I changed the return value to\
    \ `result`\n<|/ c |>\n<| c |>\nI added an explanation of why I choose the solution\
    \ with the best score as the right one. The question is not \"what is the best\
    \ score to guess\" but \"how much wrong is there and how much\". The `score` can\
    \ be considered as the number of misses until the guessed number is correct.\n\
    <|/ c |>\n<| a dscore=0 |>\nSince you have a game with n elements and a guessed\
    \ number with m elements, all you have to do is find the longest distance between\
    \ the game's element and the guessed element. \nIn this case that would be the\
    \ length of the array minus the lengths of the arrays. \n<code>\nlet array = [1,2,3,4,5,6,7,8];\n\
    let guess = [1,3,5,7];\narray.sort( (a,b) => b - a );\nlet diff = Math.abs(guess[0]\
    \ - array[0]);\nlet diffArray = [diff];\n\nfor (let i = 1; i < guess.length; i++)\
    \ {\n    diff = Math.abs(guess[i] - array[i]);\n    diffArray.push(diff);\n}\n\
    console.log(diffArray);\n</code>\nThe resulting array will be:\n<code>\n[3, 5,\
    \ 4, 6, 1, 2]\n</code>\n<|/ a tags=javascript,arrays,algorithm |>\n<| c |>\nThis\
    \ solution is very fast but it is not 100% accurate. I suggest to add a condition\
    \ for the end of the loop (I updated my answer)\n<|/ c |>\n<| c |>\nThanks, added\
    \ a conditional to the end of the loop\n<|/ c |>\n<| a |>\n<code>\nvar array =\
    \ [1, 2, 3, 4, 5, 6, 7];\nvar guess = [1, 3, ", "  const maxLen = Math.max(game.length,\
    \ guess.length);\n  const matches: number[] = new Array(maxLen).fill(0);\n\n \
    \ for (let i = 0; i < maxLen; i++) {\n    if (game[i] !== guess[i]) {\n      matches[i]\
    \ = Math.abs(game[i] - guess[i]);\n    }\n  }\n\n  return matches;\n}\n", "  let\
    \ score = 0;\n  let result = [];\n\n  game.forEach((_val, i) => {\n    if (_val\
    \ !== guess[i]) {\n      score = Math.abs(_val - guess[i]);\n    }\n  });\n\n\
    \  return result;\n}\n", "    var result: number[] = [];\n    var maxScore: number\
    \ = game.reduce(function (a, b) {\n      return Math.max(a, b);\n    });\n   \
    \ for (var i = 0; i < guess.length; i++) {\n      var score = Math.abs(game[i]\
    \ - guess[i]);\n      result.push(score);\n      if (score == 0) {\n        return\
    \ result;\n      } else if (score < maxScore) {\n        maxScore = score;\n \
    \     }\n    }\n    return maxScore;\n}\n</code>\n<|/ a dscore=1 tags=arrays,javascript\
    \ |>\n<| c |>\nThanks! Can you explain how this works? I don't get `result[i]=game[i]-guess[i];`\
    \ What is this doing?\n<|/ c |>\n<| c |>\nIn JS, when you subtract two numbers,\
    \ the result is a positive number. `game[i]-guess[i]` takes the difference between\
    \ the two numbers, and then it saves it in an array `result`. So, `result[0]`\
    \ would equal `game[0]-guess[0]`\n<|/ c |>\n<| a tags=arrays,javascript |>\n<code>",
  "  if (game.length !== guess.length) { \n    return null\n  }\n  \n  var distance:\
    \ number[] = new Array(guess.length)\n  for (var i = 0; i < game.length; i++)\
    \ {\n    distance[i] = game[i] - guess[i]\n  }\n  \n  return distance\n}\n", " \
    \   const guessesPerGame = Math.ceil(game.length / guess.length)\n    const scoreDiffs\
    \ = new Array<number>()\n\n    for (let i = 0; i < guessesPerGame; i++) {\n  \
    \      let index = 0\n        let j = 0\n        let scoreDiff = 0\n\n       \
    \ // Find the index of the first match of a given game\n        while (index <\
    \ game.length && game[index] === guess[j]) {\n            scoreDiff += Math.abs(game[index]\
    \ - guess[j])\n            ++j\n            ++index\n        }\n\n        // Add\
    \ the difference between the first match and the current guess to the diffs array\n\
    \        scoreDiffs.push(scoreDiff)\n    }\n\n    // Return the sum of all diff\
    \ for each game\n    return scoreDiffs.reduce((acc, diff) => acc + diff, 0)\n\
    }\n", "  if (game.length !== guess.length) {\n    throw new Error('The arrays\
    \ you provided do not have the same length!');\n  }\n  if (game.some(x => x !==\
    \ guess[0])) {\n    throw new Error('Some element of first array does not match\
    \ with first element of second array.');\n  }\n  let score = 0;\n  game.forEach((g,\
    \ i) => {\n    if (g === guess[i]) {\n      score += 0;\n    } else {\n      score\
    \ += Math.abs(g - guess[i]);\n    }\n  });\n  return score.map(n => n < 0 ? Math.ceil(n)\
    \ : Math.floor(n));\n}\n", "    let result: number[] = [];\n    let maxScore =\
    \ Math.max(...game);\n    result.push(game.indexOf(maxScore));\n    let maxGuess\
    \ = Math.max(...guess);\n    let maxDiff = maxScore - maxGuess;\n    for (let\
    \ i = 0; i < guess.length; i++) {\n        let score = game[i];\n        if (score\
    \ > maxScore) {\n            score = maxScore;\n        }\n        let diff =\
    \ guess - score;\n        if (diff > 0) {\n            result.push(diff);\n  \
    \      }\n    }\n    return result;\n}\n", "  var result = new Array(guess.length);\n\
    \  for (var i = 0; i < guess.length; i++) {\n    result[i] = Math.abs(guess[i]\
    \ - game[i]);\n  }\n  return result;\n}\n", "  const correctGuesses = game.filter(x\
    \ => guess[x] === x);\n  const gameDistances = correctGuesses.map(x => Math.abs(x\
    \ - guess[x]));\n  const guessesDistances = game.map(x => Math.abs(x - guess[x]));\n\
    \  return gameDistances.concat(guessesDistances);\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nVery clear and well commented answer. Thank you!\n<|/ c |>\n<| c |>\nVery\
    \ nice answer. Very clever too. Thank you! I just have one question. Why is the\
    \ score `3`? What is `4` meant to represent?\n<|/ c |>\n<| c |>\nThe score 4 is\
    \ because one guy got it correct and the other guy got it wrong. Both had the\
    \ correct result, but one got it wrong as well as the other. He got it correct\
    \ at index 0, one at index 4, and both of them at index 8. 4 minus the other two\
    \ is 3, because there are three correct results, three incorrect ones, and the\
    \ two incorrect results get counted in the incorrect ones.\n<|/ c |>\n<| c |>\n\
    Thank you for the explanation! So does `3` mean that `3` of the correct guesses\
    \ were correct? Would it not make more sense to state `correctGuesses` as `0`\
    \ as there are no correct guesses?\n<|/ c |>\n<| c |>\nIf you wanted `correctGuesses`\
    \ to be 0, then you would need `game.map(x => Math.abs(x - guess[x]))` instead\
    \ of `game.map(x => Math.abs(x - guess[x])).filter(x => x === 0)`.\n<|/ c |>\n\
    <| a tags=arrays,javascript |>\nI think the simplest way to do what you want is\
    \ by iterating through both arrays and returning an array with the number of incorrect\
    \ guesses appended to it. For instance:\n<code>", "  if (guess.length != game.length)\
    \ { return -guess; }\n  const result = new Array(guess.length);\n  for (let i\
    \ = 0; i < guess.length; i++) {\n    result[i] = Math.abs(guess[i] - game[i]);\n\
    \  }\n  return result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nMy solution is:\n\
    <code>", "  let gameLen = game.length;\n  let guessLen = guess.length;\n  \n \
    \ // If there are fewer guesses than scores, then the answer is not correct.\n\
    \  if (guessLen < gameLen) {\n    return [];\n  }\n\n  // Otherwise, loop through\
    \ each guess, checking if the guess is contained within the game\n  const result\
    \ = [];\n  let correctGuesses = 0;\n  for (let i = 0; i < guessLen; i++) {\n \
    \   const matchIndex = gameLen;\n    const gameMatch = game[matchIndex];\n   \
    \ while (matchIndex >= 0 && gameMatch == guess[i]) {\n      matchIndex--;\n  \
    \    gameMatch = game[matchIndex];\n    }\n    result.push(gameLen - matchIndex);\n\
    \  }\n  \n  return result;\n}\n", "  if (game.lenght !== guess.lenght) return\
    \ [0, 0, 0, 0, 0, 0];\n  const results: number[] = [];\n  for (let i = 0; i <\
    \ game.lenght; i++) {\n    const diff = game[i] - guess[i];\n    if (diff ===\
    \ 0) results.push(0);\n    else results.push(Math.abs(diff));\n  }\n  return results;\n\
    }\n</code>\n<|/ a tags=arrays,javascript,sorting,typescript,algorithm dscore=1\
    \ |>\n<| c |>\nThank you so much! Your approach worked perfectly and I learned\
    \ a lot from it. However I feel like you went too far and complicated the answer\
    \ by using the same array twice (games and guesses). I would prefer to have my\
    \ code as simple and readable as possible.\n<|/ c |>\n<| c |>\nI'm sorry, I forgot\
    \ to mention, you are welcome. Yes, you were right, using same arrays twice is\
    \ redundant, I wanted to remove redundant code. However, I forgot to remove some\
    \ parts of the code (like unnecessary returns) which I thought it would be more\
    \ clear this way. Anyway I edited my answer to remove redundant code, please check\
    \ it out!\n<|/ c |>\n<| c |>\nYour updated answer is actually exactly the code\
    \ I was looking for and I truly appreciate it!\n<|/ c |>\n<| a dscore=1 |>\nHere's\
    \ my implementation:\n<code>\nlet games = [\n  6, 8, 10, 12, 15, 17, 20, 22, 23,\
    \ 27, 29, 30,\n  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n  45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n  59, 60, 61, 62, 63, 64, 65,\
    \ 66, 67, 68, 69, 70, 71, 72,\n  73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87,\n  88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101,\n \
    \ 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149,\
    \ 150, ", "    let i = 0;\n    let result = [];\n    while (i < guess.length &&\
    \ i < game.length) {\n        if (guess[i] != game[i]) result.push(Math.abs(guess[i]\
    \ - game[i]));\n        else result.push(0);\n        i++;\n    }\n    return\
    \ result;\n}\n", "  //First sort the arrays.\n  const sortedGame = game.sort((a:\
    \ number, b: number) => a - b);\n  const sortedGuess = guess.sort((a: number,\
    \ b: number) => a - b);\n\n  //Determine if the sorted arrays are identical.\n\
    \  //If so, return an array of the same length.\n  if (sortedGame == sortedGuess)\
    \ return guess.length == 0 ? [] : guess;\n\n  //Determine if the arrays are identical\
    \ and have equal length.\n  //If so, find the difference between the two arrays.\n\
    \  if (sortedGame == sortedGuess.length && sortedGuess.length == 1) return Math.abs(sortedGuess\
    \ - sortedGame);\n\n  //The arrays are not identical.\n  //Get the lengths of\
    \ the arrays.\n  const lenGuess = sortedGuess.length;\n  const lenGame = sortedGame.length;\n\
    \n  //Find the length of minimum difference between arrays.\n  let minDiff = Math.min(sortedGuess.length,\
    \ sortedGame.length);\n\n  //Iterate through the arrays.\n  for (let i = 0; i\
    \ < minDiff; i++) {\n    //Get the score and guess at the current index.\n   \
    \ const gameScore = sortedGame[i];\n    const guessScore = sortedGuess[i];\n\n\
    \    //Calculate the difference, whether it is positive or negative.\n    //If\
    \ the score is lower, then the difference is positive.\n    //If the score is\
    \ higher, then the difference is negative.\n    const diff = Math.abs(guessScore\
    \ - gameScore);\n\n    //If the difference is smaller than the minimum difference,\
    \ then continue to try and find the minimum difference.\n    //If it fails, then\
    \ use the minimum difference and try again.\n    if (diff < minDiff) {\n     \
    \ minDiff = diff;\n    }\n  }\n\n  //If the length of the minimum difference is\
    \ equal to the length of the guesses, \n  //then return the minimum difference.\n\
    \  if (minDiff == lenGuess) return guess.length == 0 ? [] : guess;\n\n  //If the\
    \ length of the minimum difference is less than the length of the guesses, \n\
    \  //then the minimum difference is the length of the guesses.\n  return guess.length\
    \ == 0 ? [] : guess;\n}\n", "    const result = Array(guess.length).fill(0);\n\
    \    const matchScores = Array(guess.length);\n    const matchGuesses = Array(guess.length);\n\
    \    for (let i = 0; i < guess.length; i++) {\n        matchScores[i] = Math.pow(game[i],\
    \ 2);\n        matchGuesses[i] = guess[i];\n    }\n\n    for (let i = 0; i < guess.length;\
    \ i++) {\n        if (guess[i] == game[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = Math.abs(guess[i] - game[i]);\n      \
    \  }\n    }\n    for (let i = 0; i < guess.length; i++) {\n        if (matchScores[i]\
    \ == 0) {\n            result[i] = 0;\n        } else if (result[i] > 0) {\n \
    \           result[i] = result[i] - 1;\n        } else if (result[i] < 0) {\n\
    \            result[i] = result[i] + 1;\n        }\n    }\n    for (let i = 0;\
    \ i < guess.length; i++) {\n        if (matchGuesses[i] != game[i]) {\n      \
    \      result[i] = Math.abs(matchGuesses[i] - game[i]);\n        }\n    }\n  \
    \  return result;\n}\n", "  const result = [];\n  \n  if(game.length < guess.length){\n\
    \    for (let i = 0; i < guess.length; i++){\n      let diff = Math.abs(guess[i]\
    \ - game[i]);\n      if(game[i] == guess[i])\n        result.push(0);\n      else\n\
    \        result.push(diff);\n    }\n    return result;\n  }\n  \n  if(game.length\
    \ != guess.length){\n    for (let i = 0; i < guess.length; i++){\n      if(game[i]\
    \ != guess[i]){\n        let diff = Math.abs(game[i] - guess[i]);\n        result.push(diff);\n\
    \      }\n    }\n    return result;\n  }\n  \n  let total = 0;\n  for (let i =\
    \ 0; i < game.length; i++) {\n    total += Math.abs(game[i] - guess[i]);\n  }\n\
    \  \n  for (let i = 0; i < game.length; i++) {\n    total -= Math.abs(game[i]\
    \ - guess[i]);\n  }\n  \n  if(total < 0){\n    for (let i = 0; i < guess.length;\
    \ i++){\n      let diff = Math.abs(guess[i] - game[i]);\n      if(game[i] == guess[i])\n\
    \        result.push(0);\n      else\n        result.push(diff);\n    }\n  }\n\
    \  else{\n    for (let i = 0; i < guess.length; i++){\n      let diff = Math.abs(game[i]\
    \ - guess[i]);\n      if(game[i] == guess[i])\n        result.push(diff);\n  \
    \    else\n        result.push(0);\n    }\n  }\n  return result;\n}\n", "  //your\
    \ solution here\n  var guessesCorrect = game.every((val, i) => {\n    return guess[i]\
    \ === val;\n  });\n  var correctPositions = guess.map((val, i) => {\n    return\
    \ (game[i]===val)? i : -1;\n  });\n  var correctDistances = correctPositions.map((pos,\
    \ i)=>{\n    return Math.abs(pos-guessesCorrect[i])\n  });\n  var correctAnswers\
    \ = correctDistances.filter(distance=>distance!==0);\n  return correctAnswers;\n\
    }\n", "  var result = [];\n  var guesses = guess.map(val => Math.abs(val));\n\
    \  var games = game.map(val => Math.abs(val));\n  \n  if (games.every(val => val\
    \ == 0)) return result;\n  if (guesses.every(val => val == 0)) return result;\n\
    \  \n  var minGuess = Math.min(...guesses);\n  var maxGuess = Math.max(...guesses);\n\
    \  var diffs = guesses.map(val => (val - minGuess));\n  var minDiff = Math.min(...diffs);\n\
    \  var maxDiff = Math.max(...diffs);\n  var gameMaxDiff = Math.max(...games);\n\
    \  var gameMinDiff = Math.min(...games);\n  \n  for (var i = 0; i != guesses.length;\
    \ i++) {\n    var diff = guesses[i] - minGuess;\n    var gameDiff = games[i] -\
    \ gameMinDiff;\n    var diffScore = diff - gameMaxDiff;\n    \n    if (gameDiff\
    \ != 0) {\n      var diffScoreDiff = Math.abs(diffScore - diff);\n      if (diffScoreDiff\
    \ >= 0 && diffScoreDiff >= diffScore) {\n        diffScore = diffScoreDiff;\n\
    \      } else {\n        diffScore = diffScore;\n      }\n    }\n    \n    if\
    \ (diffScore >= minDiff && diffScore <= maxDiff) {\n      result.push(diffScore);\n\
    \    }\n  }\n  \n  return result;\n}\n", "  return game.map(score => Math.abs(score\
    \ - guess[game.length - 1 - score]));\n}\n", "    const result: number[] = new\
    \ Array(guess.length);\n    for (let i = 0; i < guess.length; i++) {\n       \
    \ result[i] = Math.abs(game[i] - guess[i]);\n    }\n    return result;\n}\n",
  "  let matches: number[] = [];\n  game.forEach((score, index) => matches.push(guess[index]\
    \ === score ? 0 : Math.abs(score - guess[index])));\n  return matches;\n}\n",
  "  let n = game.length;\n  let m = guess.length;\n  let ans: number[] = [];\n  for\
    \ (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      let diff\
    \ = guess[j] - game[i];\n      if (diff === 0) ans.push(0);\n      else ans.push(Math.abs(diff));\n\
    \    }\n  }\n  return ans;\n}\n", "    let gameSum = 0;\n    let gameSumSq = 0;\n\
    \    let guesssSum = 0;\n    let guesssSumSq = 0;\n\n    let gameIndex = 0;\n\
    \    let guessedIndex = 0;\n    let gameSumIndex = 0;\n    let guessedSumIndex\
    \ = 0;\n\n    while (gameIndex < game.length && guessedIndex < guess.length) {\n\
    \        let gameScore = game[gameIndex];\n        let guessedScore = guess[guessedIndex];\n\
    \n        gameSum += gameScore;\n        gameSumSq += gameScore * gameScore;\n\
    \        guesssSum += guessedScore;\n        guesssSumSq += guessedScore * guessedScore;\n\
    \n        if (gameScore == guessedScore) {\n            gameSumIndex++;\n    \
    \        guessedSumIndex++;\n        }\n        else if (gameScore > guessedScore)\
    \ {\n            gameIndex++;\n        }\n        else {\n            guessedIndex++;\n\
    \        }\n    }\n    let gameDiff = gameSum - guesssSum;\n    let gameDiffSq\
    \ = gameSumSq - guesssSumSq;\n    let gameDiffDiff = gameSum - gameSumSq;\n  \
    \  let guessedDiff = guessedSum - guesssSum;\n    let guessedDiffSq = guessedSumSq\
    \ - guesssSumSq;\n    let guessedDiffDiff = guessedSum - guessedSumSq;\n\n   \
    \ let guessedDiffDiffSquared = guessedDiffDiff - guessedDiffSq;\n\n    let result\
    \ = [];\n    for (let i = 0; i < guessedIndex; i++) {\n        result.push(Math.abs(guessedDiffDiff\
    \ / guessedDiffDiffSquared));\n    }\n    return result.slice(0, guessedIndex);\n\
    }\n</code>\n<|/ a tags=sorting,javascript,algorithm |>\n<| c |>\nWhat if the first\
    \ array has less elements than the second? The second array should be considered\
    \ as if there were no elements at all and each element is the same.\n<|/ c |>\n\
    <| c |>\n, you are correct, please see my update\n<|/ c |>\n<| a tags=sorting,javascript,algorithm\
    \ |>\nHere's an approach that keeps track of two temporary arrays of game scores,\
    \ one for comparison, and the other for scores to compare against. Because we\
    \ know the difference between the two arrays is always a constant, we can safely\
    \ assume that every element in one array is an equal element in the other. Since\
    \ every element will be an equal element when sorted (and all elements are the\
    \ same when sorted), we can simply compare the two arrays as if they were single\
    \ numbers.\nIf the arrays aren't equal (or the second array is longer than the\
    \ first one), we can determine how ", "    let result = new Array(guess.length);\n\
    \    for (let i = 0; i < guess.length; i++) {\n        result[i] = Math.abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nMy solution:\n<code>", "    let arrLen = game.length;\n    let\
    \ diffArr = new Array(arrLen);\n    for (let i = 0; i < arrLen; i++) {\n     \
    \   diffArr[i] = Math.abs(guess[i] - game[i]);\n    }\n    return diffArr;\n}\n",
  "  let maxCount = 0\n  let result = new Array(guess.length)\n  guess.forEach((item,\
    \ index) => {\n    const count = game.filter(item => item == guess[index]).length\n\
    \    if (count > maxCount) {\n      maxCount = count\n    }\n    result[index]\
    \ = count - maxCount\n  })\n  return result\n}\n", "  let correctGuesses = 0;\n\
    \  \n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === game[i])\
    \ {\n      correctGuesses++;\n    } else {\n      correctGuesses += Math.abs(guess[i]\
    \ - game[i]);\n    }\n  }\n  return correctGuesses;\n}\n", "    let result: number[]\
    \ = [];\n    let gameIndex = 0;\n    let guessIndex = 0;\n    let maxGuesses =\
    \ guess.length;\n\n    while (gameIndex < game.length && guessIndex < maxGuesses)\
    \ {\n        let scoreDifference = game[gameIndex] - guess[guessIndex];\n    \
    \    if (scoreDifference === 0) {\n            result[guessIndex] = 0;\n     \
    \       guessIndex++;\n        } else if (scoreDifference > 0) {\n           \
    \ result[guessIndex] = scoreDifference;\n            guessIndex++;\n        }\
    \ else {\n            result[guessIndex] = Math.abs(scoreDifference);\n      \
    \      guessIndex++;\n        }\n        gameIndex++;\n    }\n\n    return result;\n\
    }\n", "    // We will compare the difference in values between the guess and the\
    \ score\n    const diffs: number[] = [];\n    // We will store the minimum distance\
    \ from the guess to the score\n    const minDiff = Infinity;\n    // We will store\
    \ the minimum score of the guesses\n    let minScore = game[0];\n    for (let\
    \ i = 1; i < game.length; i++) {\n        // We will calculate how far off the\
    \ guess is from the current score\n        const difference = Math.abs(guess[i]\
    \ - game[i]);\n        // We will check if the current difference is smaller than\
    \ the min distance\n        // or the score is smaller than the min score of the\
    \ guesses\n        if (difference < minDiff || game[i] < minScore) {\n       \
    \     minDiff = difference;\n            minScore = game[i];\n        }\n    \
    \    // If the guess is correct, add one to the diff counter\n        if (guess[i]\
    \ === game[i]) {\n            diffs.push(0);\n        } else {\n            diffs.push(difference);\n\
    \        }\n    }\n    return diffs;\n}\n</code>\n<|/ a tags=typescript,javascript\
    \ dscore=0 |>\n<| a dscore=0 tags=typescript,javascript |>\n<code>\nvar scores\
    \ = [1, 2, 3, -1, -5, 2, -8, 3, -5];\nvar guesses = [2, 4, -7, 2, -10, 2, -13,\
    \ 2, -6, 2];\n", "  if (game.lenght !== guess.lenght) {\n    throw Error(\"The\
    \ number of guesses must be equal to the number of scores in the arrays\");\n\
    \  }\n  \n  var result: number[] = new Array(game.lenght);\n  \n  for (var i=0;\
    \ i<game.lenght; i++) {\n    var diff = Math.abs(game[i] - guess[i]);\n    result[i]\
    \ = diff === 0 ? 0 : diff;\n  }\n  \n  return result;\n}\n", "  const a = [];\n\
    \  const b = [];\n\n  game.forEach((score, index) => {\n    if (guess[index] ===\
    \ 0) {\n      a.push(score);\n    } else {\n      const guess = Math.abs(guess[index]\
    \ - score);\n      b.push(guess);\n    }\n  });\n\n  return a;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=javascript,arrays |>\nIn addition to what has already\
    \ been stated, you could try something like this:\n<code>", "  let result: number[]\
    \ = [];\n  let counter = 0;\n  while (counter < guess.length) {\n    if (game[counter]\
    \ === guess[counter]) {\n      result[counter] = 0;\n    } else {\n      result[counter]\
    \ = Math.abs(game[counter] - guess[counter]);\n    }\n    counter ++;\n  }\n \
    \ return result;\n}\n\ncompare([1,2,3,4,5,1,2], [1,2,3,4,2,-2,1]);\n</code>\n\
    <|/ a |>\n<| c |>\nThis is correct only if the numbers are the same length, if\
    \ they are different length it fails because the second number will never get\
    \ to the number in the game array because they are always \"one greater\" in the\
    \ array\n<|/ c |>\n<| c |>\nYour comments make me wonder about my answer's validity.\
    \ Let me know if you have further questions :)\n<|/ c |>\n<| c |>\nNo problem,\
    \ I thought I read your comment before I went to lunch. The only thing I don't\
    \ quite understand is why does it fail for different lengths?\n<|/ c |>\n<| c\
    \ |>\nIt fails because the second number won't get to the number in the game array\
    \ because the first number will never get to the number in the game array. The\
    \ second number is \"one greater\" in the array than the first. The first number\
    \ is \"one less\" in the array than the second\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. My brain just fell into a bit of a hurry. Your solution works perfectly.\
    \ I will edit my answer to reflect your comment. Thanks!\n<|/ c |>\n<| a tags=arrays,javascript,math\
    \ |>\nA slightly shorter version using Array#reduce, Array#filter and Array#map:\n\
    \n<code>\nlet compare = function(game, guess) {\n  return game.reduce((acc, cur,\
    \ i, arr) => {\n    acc.push([i - arr.map(e => e === cur).reduce((r, e) => r +\
    \ e)])\n    return acc\n  }, []).filter(v => v).map((v, i, arr) => Math.abs(v\
    \ - guess[i]))\n}\n\nconsole.log(compare([1,2,3,4,5,1,2], [1,2,3,4,2,-2,1]))</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis fails when the numbers are different lengths.\n\
    <|/ c |>\n<| c |>\nAh. My bad. Didn't pay attention to the details of the problem\
    \ beforehand. Updated the answer.\n<|/ c |>\n<| a dscore=1 |>\nThis can be done\
    \ with Array#reduce and Array#map.\nThe idea is to:\n\niterate over all ", " \
    \   if (guess.length != game.length) {\n        throw \"Length mismatch\";\n \
    \   }\n\n    let result = [];\n\n    for (let i = 0; i < guess.length; i++) {\n\
    \        let diff = Math.abs(game[i] - guess[i]);\n        result.push(diff);\n\
    \n        if (game[i] == guess[i]) {\n            result.push(0);\n        } else\
    \ {\n            result.push(diff);\n        }\n    }\n\n    return result;\n\
    }\n</code>\n<|/ a tags=javascript,arrays |>\n<| c |>\nI appreciate your explanation!\
    \ However, this code is still not working. I will paste some test cases below.\
    \ Please let me know if I missed something, as I am still stuck. I updated my\
    \ question with some test cases. Thanks!\n<|/ c |>\n<| c |>\nOh, I forgot that\
    \ there is an 'if' condition in the loop. That's why the code doesn't work after\
    \ I updated it. Thanks for the help!\n<|/ c |>\n<| c |>\nAhhh... I see. Well,\
    \ I guess my answer has now been updated. But I'm glad you were able to understand\
    \ how my code works.\n<|/ c |>\n<| a dscore=0 |>\nHere's a solution which takes\
    \ your test cases into consideration, and passes them all correctly (except for\
    \ the last one which doesn't make any sense to me). The main difference from your\
    \ code is that I used Math.abs to get the absolute difference between the two\
    \ scores.\n<code>", "    let scores = [0, 0, 0, 0, 0];\n    // let guesses = [0,\
    \ 0, 0, 0, 0];\n    guesses.forEach(x => {\n        scores.push(Math.abs(guess[x]\
    \ - game[x]));\n    });\n    return scores;\n}\n", "    if (game.length !== guess.length)\
    \ return game.length - guess.length;\n\n    const arr: number[] = [];\n\n    for\
    \ (let i = 0; i < game.length; i++) {\n        arr.push(Math.abs(game[i] - guess[i]));\n\
    \    }\n\n    return arr;\n}\n", "    var result: number[] = [];\n    var len:\
    \ number = game.length;\n    var min: number = guess.length - 1;\n    var index:\
    \ int = 0;\n    var score: number = game[0];\n    var guessed: number = guess[0];\n\
    \    // this loop would make more sense as a for loop but for some reason Typescript\
    \ doesnt like it\n    while (index < guess.length ) {\n        if (guessed ==\
    \ game[index]) {\n            result.push(guessed);\n            guessed = guessed>=score?score:guess;\n\
    \            score+=game[index];\n        } else {\n            score -= Math.abs(guessed\
    \ - score);\n            result.push(score>0?score:guess);\n            guessed\
    \ = guessed>=score?score:guess;\n            score+=game[index];\n        }\n\
    \        index++;\n    }\n    // this loop would make more sense as a for loop\
    \ but for some reason Typescript doesnt like it\n    while (index<len && index<min)\
    \ {\n        if (guessed == game[index]) {\n            result.push(guessed);\n\
    \            guessed = guessed>=score?score:guess;\n            score+=game[index];\n\
    \        } else {\n            score -= Math.abs(guessed - score);\n         \
    \   result.push(score>0?score:guess);\n            guessed = guessed>=score?score:guess;\n\
    \            score+=game[index];\n        }\n        index++;\n    }\n    // this\
    \ loop would make more sense as a for loop but for some reason Typescript doesnt\
    \ like it\n    while (index<len && index>min) {\n        if (guessed == game[index])\
    \ {\n            result.push(guessed);\n            guessed = guessed>=score?score:guess;\n\
    \            score+=game[index];\n        } else {\n            score -= Math.abs(guessed\
    \ - score);\n            result.push(score>0?score:guess);\n            guessed\
    \ = guessed>=score?score:guess;\n            score+=game[index];\n        }\n\
    \        index--;\n    }\n    // this loop would make more sense as a for loop\
    \ but for some reason Typescript doesnt like it\n    while (index>min) {\n   \
    \     if (guessed == game[index]) {\n            result.push(guessed);\n     \
    \       guessed = guessed>=score?score:guess;\n            score+=game[index];\n\
    \        } else {\n            score -= Math.abs(guessed - score);\n         \
    \   result.push(score>0?score:guess);\n            guessed = guessed>=score?score:guess;\n\
    \            score+=game[index];\n        }\n        index--;\n    }\n    return\
    \ result;\n}\n", "    // Your code goes here\n    let differenceArr = [];\n  \
    \  let result = [];\n    game.forEach((item, index) => {\n        guess[index]\
    \ = Math.abs(item - guess[index]);\n        let diff = item - guess[index];\n\
    \        if (diff > 0 && index < guess.length - 1) {\n            differenceArr.push(diff);\n\
    \            result.push(diff);\n        } else if (index < guess.length - 1)\
    \ {\n            differenceArr.push(diff);\n            result.push(0)\n     \
    \   }\n    })\n    return result;\n}\n", "    const matchCount = game.reduce((prev,\
    \ curr) => prev + (curr === guess[game.length - 1 - curr]? 1 : 0), 0)\n    const\
    \ diffs = game.map((score, index) => Math.abs(score - guess[index]))\n    const\
    \ correct = diffs.reduce((prev, curr) => prev + Math.abs(prev === 0? curr : prev),\
    \ 0)\n    const result = matchCount - correct // +1 for \"correct\" result\n \
    \   const scores = (score) => score\n        .map((score, index) => score\n  \
    \          .map((score, index) => score - guess[index])\n            .map(scores))\n\
    \        .map(scores)\n        .map(scores)\n        .reduce(sum, 0)\n    return\
    \ [result, scores(game)]\n}\n", "  const result = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n\
    \  guess.forEach((value, i) => {\n    result[value] =  result[value] - Math.abs(value\
    \ - game[i]);\n  });\n  return result;\n}\n\nconsole.log(compare([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]));\nconsole.log(compare([0, 5, 0, 0, 0, 4], [4, 1,\
    \ 1, 0, 0, -2]));\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2,\
    \ 0, 1, 2, 3, 4]));\nconsole.log(compare([1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 5,\
    \ 1]));\nconsole.log(compare([1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 2, -2, 0, 1, 2,\
    \ 3, 4, 5]));\nconsole.log(compare([5, 1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 2, -2]));\n\
    console.log(compare([5, 1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 2, -2, 0, 1, 2, 3, 4,\
    \ 5]));\nconsole.log(compare([0, 1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 2, -2]));\n\
    console.log(compare([0, 1, 2, 3, 4, 2, -2], [1, 2, 3, 4, 2, -2, 0, 1, 2, 3, 4,\
    \ 5]));</code>\n<|/ a |>\n<| c |>\nThanks for taking the time to write this. The\
    \ only issue with this solution is that it doesn't return negative numbers, which\
    \ the original function does. I modified it to do that and it works.\n<|/ c |>\n\
    <| a dscore=0 |>\nYou have to remember that computer programs are deterministic.\
    \ \nThe algorithm you describe is not in any way deterministic. It does not return\
    \ different values in a given execution of the program on the same data. \nIn\
    \ order to get deterministic behaviour, your program must be deterministic.\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThanks for the reply. I realize that\
    \ now. I was hoping for some insight into whether there was some algorithm I might\
    \ be missing to accomplish this.\n<|/ c |>\n<| c |>\nThe algorithm you describe\
    \ does not return different results with the same data. It returns different values\
    \ with different data. It's not an algorithm, it's a property of the data.\n<|/\
    \ c |>\n<| a dscore=0 tags=javascript,algorithm |>\nA simple way to get the desired\
    \ result is to find the minimum of the score and the number of guesses required:\n\
    <code>", "  const result = []\n  // Iterate over the arrays and keep track of\
    \ the current index into the game\n  let index = 0;\n\n  // Start off by assigning\
    \ the guesses to the result\n  for (let i = 0; i < guess.length; i++) {\n    result[i]\
    \ = guess[i];\n  }\n\n  // Iterate over the game\n  while (index < game.length)\
    \ {\n    // Iterate over the guesses\n    for (let i = 0; i < guess.length; i++)\
    \ {\n      // Check that the guess is correct if the current guess is correct\n\
    \      if (game[index] === guess[i]) {\n        // Update the current result\n\
    \        result[i] += 1;\n\n        // If the guess is correct, move onto the\
    \ next guess\n        continue;\n      }\n\n      // Otherwise, the guess is wrong\
    \ and we need the difference between the current guess and the result\n      //\
    \ of the game.\n      const diff = game[index] - result[i];\n      result[i] =\
    \ diff;\n      \n      // If all the guesses are wrong, we're done\n      if (result[i]\
    \ === -1) {\n        return result;\n      }\n    }\n\n    // Increment the index\n\
    \    index++;\n  }\n\n  // If we got here, we were not able to correctly guess\
    \ the game because there weren't enough guesses.\n  return result;\n}\n", "  \
    \  var ret = new Array(game.length);\n    ret.fill(0);\n    ret.fill(Math.abs(game[0]-guess[0]),\
    \ 0, game.length);\n    for (var i = 1; i < game.length; ++i) ret[i] = Math.abs(game[i]-guess[i]);\
    \ \n    return ret;\n}\n", "    let result: number[] = new Array(guess.length);\n\
    \    for (let i: number = 0; i < guess.length; ++i) {\n        let guessofGame\
    \ = game[i];\n        let difference = Math.abs(guessofGame - guess[i]);\n   \
    \     result[i] = difference;\n    }\n    return result;\n}\n", "  let result\
    \ = new Array(guess.length);\n  for(let i = 0; i < guess.length; i++){\n    //\
    \ if guess is correct, mark it at 0\n    if(guess[i] === game[i]){\n      result[i]\
    \ = 0;\n    } else {\n      // if score is higher, keep it at current value +\
    \ distance\n      result[i] = Math.abs(guess[i] - game[i]);\n    }\n  }\n  return\
    \ result;\n}\n\nconst game = [1, 2, 3, 4, 5, 1, 2];\nconst guess = [1, 2, 3, 4,\
    \ 2, -2];\nconst result = compare(game, guess);\nconsole.log(result);</code>\n\
    \nI used the Math.abs() function on the score to make sure it's positive. Negative\
    \ scores would be a guess a higher, which is not what we want. So, now you have\
    \ a nice array of scores that show how far away they are. I went through each\
    \ position and calculated the differences between the two scores. If one was greater\
    \ than the other, the difference would be positive, otherwise positive. So, if\
    \ the difference between the scores is positive, that means the guess was too\
    \ high, while if the difference is negative, it means the guess was too low. \n\
    The only part that was not entirely clear to me is the final bit of your question\
    \ where you want to tell the user how far they were wrong. You need to loop through\
    \ the array and compare each element to the guess; if the guess is greater than\
    \ the element, it means the guess was too high. \n\n<code>\nconst game = [1, 2,\
    \ 3, 4, 5, 1, 2];\nconst guess = [1, 2, 3, 4, 2, -2];\nconst result = compare(game,\
    \ guess);\nconsole.log(\"Result: \" + JSON.stringify(result));", "  let gameScore\
    \ = 0;\n  let gameArray = game.map((e) => Math.abs(e - guess));\n  let result\
    \ = [];\n  gameArray.forEach((e) => {\n    if (gameScore + Math.abs(e) > result.length\
    \ * 10) {\n      result = [];\n    }\n    result.push(gameScore + Math.abs(e));\n\
    \    gameScore += Math.abs(e);\n  });\n  return result;\n}\n", "  const results\
    \ = new Array(game.length)\n  for (let i = 0; i < game.length; ++i) {\n    //\
    \ If the game score is zero, the user is correct.\n    if (game[i] === 0) results[i]\
    \ = 0;\n    // Otherwise, the game score is not zero. Compare their guess to game\
    \ score.\n    else {\n      results[i] = Math.abs(game[i] - guess[i]);\n    }\n\
    \  }\n  return results;\n}\n", "    const sortedGame = game.sort();\n    const\
    \ sortedGuess = guess.sort();\n    let result = [];\n    let i = 0;\n    let j\
    \ = 0;\n    while (j < sortedGuess.length && i < sortedGame.length) {\n      \
    \  if (sortedGame[i] > sortedGuess[j]) {\n            result.push(sortedGuess[j]\
    \ - sortedGame[i]);\n            i++;\n            j++;\n        }\n        else\
    \ if (sortedGame[i] < sortedGuess[j]) {\n            result.push(sortedGame[i]\
    \ - sortedGuess[j]);\n            j++;\n        }\n        else if (sortedGame[i]\
    \ === sortedGuess[j]) {\n            i++;\n            j++;\n        }\n     \
    \   else {\n            i--;\n        }\n    }\n    return result.map(v => {\n\
    \        return v > 0 ? 0 : Math.abs(v);\n    });\n}\n", "  const guesses = new\
    \ Map<number, number>();\n  guess.forEach((guess, index) => guesses.set(index,\
    \ guess));\n  const gameLength = game.length;\n  const guessLength = guess.length;\n\
    \  const results = new Array<number>(gameLength);\n  results.fill(-1);\n  for\
    \ (let i = 0; i < gameLength; i++) {\n    let score = -1;\n    if (guesses.has(game[i]))\
    \ {\n      score = guesses.get(game[i]);\n      results[i] = 0;\n    } else {\n\
    \      const difference = guess[i] - game[i];\n      results[i] = Math.abs(difference);\n\
    \    }\n  }\n  return results;\n}\n\n</code>\n<|/ a tags=typescript dscore=0 |>\n\
    <| a tags=typescript |>\nHere is another solution that uses Array.from() and a\
    \ closure to solve this problem.\n<code>\nconst compare = <T>(game: number[],\
    \ guesses: number[]): T[] => {\n    const results = new Array(game.length);\n\
    \    for (let i = 0; i < game.length; i++) {\n        const score = game[i] ===\
    \ guesses[i] ? 0 : (guesses[i] - game[i]);\n        results[i] = score;\n    }\n\
    \    return Array.from(results);\n}\n</code>\nThis implementation will work even\
    \ when one of the arrays is empty (which might happen if two or more people guess\
    \ the same number). The function will still return an empty array if the game\
    \ array is empty.\n<|/ a dscore=0 |>\n<| a |>\nThis is my solution:\n<code>",
  "  const gameLength = Math.max(...game);\n  const guessLength = Math.max(...guess);\n\
    \  const score = new Array(guessLength);\n\n  for (let i = 0; i < guessLength;\
    \ i++) {\n    score[i] = game[i] - guess[i];\n  }\n\n  for (let i = guessLength;\
    \ i < gameLength; i++) {\n    score[i] = Math.abs(game[i] - guess[i]);\n  }\n\n\
    \  return score;\n}\n", "\t\n\t// Write your code here\n\t\n}", "  let maxDifference\
    \ = game.length;\n  let maxGuess = guess.length;\n  let result = [];\n  let score\
    \ = 0;\n  \n  // iterate through each guess and compare it to the corresponding\
    \ score\n  for (let i = 0; i < maxGuess; ++i) {\n    if (game[i] !== guess[i])\
    \ {\n      // guess was wrong, score difference is now maxDifference\n      maxDifference\
    \ = Math.abs(maxDifference - score);\n      result.push(score);\n      score =\
    \ 0;\n    }\n    else {\n      // guess was right, score is now a total score\
    \ + correct guesses\n      score = score + 1;\n    }\n  }\n\n  // last guess was\
    \ wrong, score difference is now maxDifference\n  maxDifference = Math.abs(maxDifference\
    \ - score);\n  result.push(score);\n  return result;\n}\n", "  const length =\
    \ Math.min(game.length, guess.length);\n  const matches = [];\n  for (let i =\
    \ 0; i < length; ++i) {\n    if (game[i] != guess[i]) {\n      matches.push(Math.abs(guess[i]\
    \ - game[i]));\n    } else {\n      matches.push(0);\n    }\n  }\n  return matches;\n\
    }\n", "\tlet match = 0;\n\tlet diff = 0;\n\tlet i = 0;\n\t\n\twhile (i < game.length\
    \ && i < guess.length) {\n\t\tif (game[i] > guess[i]) {\n\t\t\tdiff--;\n\t\t}\
    \ else {\n\t\t\tdiff++;\n\t\t}\n\t\ti++;\n\t}\n\n\twhile (i < game.length) {\n\
    \t\tdiff--;\n\t\ti++;\n\t}\n\twhile (i < guess.length) {\n\t\tdiff++;\n\t\ti++;\n\
    \t}\n\twhile (i < game.length) {\n\t\tif (game[i] > guess[i]) {\n\t\t\tdiff--;\n\
    \t\t}\n\t\ti++;\n\t}\n\n\twhile (i < game.length && i < guess.length) {\n\t\t\
    if (game[i] < guess[i]) {\n\t\t\tdiff--;\n\t\t} else {\n\t\t\tdiff++;\n\t\t}\n\
    \t\ti++;\n\t}\n\twhile (i < guess.length) {\n\t\tdiff++;\n\t\ti++;\n\t}\n\twhile\
    \ (i < game.length) {\n\t\tif (game[i] < guess[i]) {\n\t\t\tdiff--;\n\t\t}\n\t\
    \ti++;\n\t}\n\n\twhile (i < game.length) {\n\t\tif (game[i] == guess[i]) {\n\t\
    \t\tmatch++;\n\t\t}\n\t\ti++;\n\t}\n\twhile (i < guess.length) {\n\t\tif (game[i]\
    \ == guess[i]) {\n\t\t\tmatch++;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn [match, diff];\n\
    }\n", "  let result = Array(guess.length).fill(0);\n  let i = 0\n  for (let j\
    \ = 0; j < game.length; j++) {\n    if (guess[j] === game[j]) result[i++] = 0;\n\
    \    else if (guess[j] > game[j]) result[i++] = guess[j] - game[j];\n    else\
    \ result[i++] = game[j] - guess[j];\n  }\n  return result;\n}\n", "\tlet result:\
    \ number[] = new Array(guess.length);\n\tfor(let i=0; i<guess.length; i++){\n\t\
    \tlet diff = Math.abs(guess[i]-game[i]);\n\t\tif(diff != 0){\n\t\t\tresult[i]\
    \ = diff;\n\t\t}\n\t}\n\treturn result;\n}\n", "    // return [-1, -1, -1, -1];\
    \ // Uncomment to see some possible answers\n    let wrongGuesses = 0;\n    let\
    \ correctGuesses = 0;\n    let guessedCorrectly = false;\n    let result: number[]\
    \ = [];\n\n    for (let i = 0; i < guess.length; ++i) {\n        result[i] = Math.abs(guess[i]\
    \ - game[i]);\n        if (guess[i] === game[i]) {\n            correctGuesses++;\n\
    \        } else {\n            wrongGuesses++;\n            guessedCorrectly =\
    \ false;\n        }\n    }\n\n    result[result.length - 1] = correctGuesses;\n\
    \    result[result.length - 2] = wrongGuesses;\n    result[result.length - 3]\
    \ = guessedCorrectly;\n    return result;\n}\n</code>\n<|/ a dscore=1 tags=algorithm,sorting,arrays,javascript,typescript\
    \ |>\n<| a tags=algorithm,sorting,arrays,javascript,typescript |>\nYou could use\
    \ the indices as references to get an absolute error and the wanted result set.\n\
    The result set is build with a positive value when the position is correct and\
    \ zero when the position is wrong. Later for the wanted result set only the values\
    \ are greater than zero.\n\n<code>", "    var score = 0;\n    var diff = 0;\n\
    \    for (var i = 0; i < guess.length; i++) {\n        diff += Math.abs(guess[i]\
    \ - game[i]);\n    }\n    for (var i = 0; i < game.length; i++) {\n        if\
    \ (game[i] == guess[i]) {\n            score++;\n        } else {\n          \
    \  score += Math.abs(guess[i] - game[i]);\n        }\n    }\n    return [score,\
    \ diff];\n}\n\nvar compare = compare_;\n\n", "    const result = new Array<number>()\n\
    \    let i = 0\n    let j = 0\n    let sum = 0\n    let total = 0\n\n    for (const\
    \ item of game) {\n        if (item > guess) {\n            sum = sum + Math.abs(item\
    \ - guess)\n        } else {\n            sum = sum + Math.abs(item - guess)\n\
    \        }\n    }\n\n    while (i < game.length) {\n        if (game[i] > guess[i])\
    \ {\n            sum = sum + Math.abs(game[i] - guess[i])\n        } else {\n\
    \            sum = sum + Math.abs(game[i] - guess[i])\n        }\n        i++\n\
    \    }\n    if (total !== sum) {\n        for (let k = 0; k < game.length; k++)\
    \ {\n            if (game[k] === 0) {\n                result[k] = 0\n       \
    \     }\n            else {\n                result[k] = Math.abs(game[k] - guess[k])\n\
    \            }\n        }\n    } else {\n        for (let k = 0; k < game.length;\
    \ k++) {\n            if (game[k] === 0) {\n                result[k] = 0\n  \
    \          }\n            else {\n                result[k] = Math.abs(game[k]\
    \ - guess[k])\n            }\n        }\n    }\n    return result\n}\n", "   \
    \ if (game.length != guess.length) throw new Error(\"The game and guess arrays\
    \ must be of equal length.\")\n    const matches: number[] = []\n    for (let\
    \ i = 0; i < guess.length; i++) {\n        let diff: number = guess[i] - game[i]\n\
    \        if (diff < 0 || diff > guess) {\n            diff = guess - game[i]\n\
    \            diff = Math.abs(diff)\n            matches.push(diff)\n        }\n\
    \    }\n    return matches\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you\
    \ for this solution! It's a bit difficult to read, but it does work. I really\
    \ appreciate it. I'm going to try to understand it a little more though, since\
    \ I'm pretty new to coding and it's been a little bit tricky to understand the\
    \ code.\n<|/ c |>\n<| a dscore=0 |>\nI think that your algorithm is too complicated...\
    \ Here is a solution which is more elegant and efficient:\n<code>\nlet game =\
    \ [1, 2, 3, 4, 5, 1];\nlet guess = [1, 2, 3, 4, 2, -2];\nlet correct = 0\nfor\
    \ ( let i = 0; i < guess.length; i++ ) {\n    let diff = Math.abs( guess[i] -\
    \ game[i] );\n    if ( diff === 0 ) {\n        correct += 1\n    }\n    else if\
    \ ( diff > 0 ) {\n        correct += diff\n    } else {\n        correct -= diff\n\
    \    }\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThank you for your response!\
    \ This actually makes more sense to me, but I'm not sure if I understand why that\
    \ works. It looks like it just goes through each array element and compares it\
    \ to it's corresponding element in the other array, and adds up a +1 or -1 depending\
    \ on whether they're equal or not. Could you explain a little more how the code\
    \ actually works? Thanks!\n<|/ c |>\n<| c |>\nSure :) I edited my answer! :)\n\
    <|/ c |>\n<| c |>\nAwesome! That makes a lot more sense. Thanks so much!\n<|/\
    \ c |>\n<| c |>\nActually I guess I just don't understand what your code is doing.\
    \ It looks like it's comparing each value in one array to the corresponding value\
    \ in the other array, and then adding up the number of matches. Then it adds up\
    \ the number of matches for each value in one array and subtracts the number of\
    \ matches for each value in the other array. But that seems kinda backwards and\
    \ confusing. Is there any way you could walk through it? Maybe like in pseudocode?\n\
    <|/ c |>\n<| c |>\nYour algorithm is adding up 2 different numbers: the number\
    \ of correct matches and the absolute value of the difference between each guess\
    \ and the corresponding score. So if the absolute difference is positive, you\
    \ must add +1, if the difference is ", "    if (game.length !== guess.length)\
    \ {\n        return null;\n    }\n\n    const gameScores = game.map((score, i)\
    \ => score - guess[i]).filter(score => score !== 0)\n    const guessesScores =\
    \ guess.map((score, i) => score - game[i]).filter(score => score !== 0)\n\n  \
    \  const errors = gameScores.concat(guessesScores).filter((score, i) => score\
    \ !== 0)\n\n    return errors.map(err => Math.abs(err))\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| c |>\nHa! Nice one. Also thank you for your suggestions, I will try to\
    \ use some of them on my own in the future :)\n<|/ c |>\n<| a |>\n<code>", " \
    \ const guessed: number[] = [];\n  let difference = 0;\n  for (let i = 0; i <\
    \ guess.length; i += 1) {\n    const guessedIndex: number = guessed[guessedIndex]\
    \ || 0;\n    const scoreIndex: number = game[scoreIndex] || 0;\n    guessed[guessedIndex]\
    \ = (score - guess[guessedIndex]) + difference;\n    if (guess[guessedIndex] ===\
    \ score) {\n      difference = 0;\n    }\n    else {\n      difference = Math.abs(guess[guessedIndex]\
    \ - score);\n    }\n  }\n  return guessed;\n}\n", "    if (game.length !== guess.length)\
    \ {\n        throw new Error('The two arrays must be of equal length');\n    }\n\
    \    return game.map((el: number, i: number) => {\n        const guessed: number\
    \ = guess[i];\n        return Math.abs(el - guessed);\n    });\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThank you for your answer and your comments. I did a little bit\
    \ of research and I found this website that helps me a lot. https://leetcode.com/discuss/interview-question/compare-two-arrays-of-integers\
    \ and I guess I understand how it works but I was looking for a different solution.\
    \ I edited my question to include what I was looking for.\n<|/ c |>\n<| c |>\n\
    , you are welcome. My second answer is exactly the same as the one you linked\
    \ to. As you stated, I tried to explain why that is the case.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nThe best way to understand it would be to break down the algorithm\
    \ and figure it out for yourself:\n<code>", "    const score: number[] = game.map((score:\
    \ number) => Math.abs(score - guess[score]));\n    const result: number[] = new\
    \ Array(guess.length);\n    for (let i = 0; i < guess.length; i++) {\n       \
    \ result[i] = Math.abs(guess[i] - score[i]);\n    }\n    return result;\n}\n",
  "  var results = [];\n\n  for (var i = 0; i < guess.length; i++) {\n    var diff\
    \ = abs(guess[i] - game[i]);\n    if (guess[i] > 0) {\n      results.push(diff);\n\
    \    } else {\n      results.push(Math.abs(diff));\n    }\n  }\n  return results;\n\
    }\n", "    let guessesToSkip = guess.length;\n    let currentGuess = 0;\n    let\
    \ gameCount = 0;\n    let scoreCount = game.length;\n    let scores = [];\n\n\
    \    for(let i = 0; i < guess.length; i++){\n        if(guess[i] !== game[currentGuess]){\n\
    \            guessesToSkip--;\n            if(guessesToSkip === 0){\n        \
    \        scores.push(Math.abs(guess[i] - game[currentGuess]));\n             \
    \   currentGuess++;\n                gameCount++;\n            }\n        } else\
    \ {\n            scoreCount--;\n            scores.push(0);\n        }\n    }\n\
    \n    scores.push(Math.abs(guess[guess.length-1] - game[currentGuess]));\n\n \
    \   if(scoreCount === 0){\n        return scores;\n    } else {\n        return\
    \ scores.slice(0, scoreCount);\n    }\n}\n</code>\n<|/ a tags=algorithm,javascript\
    \ dscore=1 |>\n<| a dscore=0 tags=algorithm,javascript |>\nI guess this problem\
    \ is more suitable for a dynamic programming approach than for a brute force approach.\
    \ I came up with the following solution (only in Javascript): \n<code>", "  for\
    \ (var i = 0; i < guess.length; i++) {\n    guess[i] = Math.abs(guess[i] - game[i]);\n\
    \  }\n  return guess;\n}\n", "    var result = [];\n    result.length = guess.length;\n\
    \    for (var i = 0; i < guess.length; i++) {\n        if (game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        }\n        else {\n            result[i]\
    \ = Math.abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n}\n",
  "\tconst result: number[] = [];\n\tlet diff = Math.abs(game[0] - guess[0]);\n\t\
    let i = 0;\n\twhile (game[i] !== guess[i] && i < guess.length) {\n\t\tdiff = Math.min(diff,\
    \ Math.abs(game[i] - guess[i]));\n\t\ti++;\n\t}\n\tif (i >= guess.length) {\n\t\
    \tresult[0] = 0;\n\t}\n\telse {\n\t\tresult[0] = diff;\n\t}\n\ti = 1;\n\twhile\
    \ (game[i] !== guess[i] && i < guess.length) {\n\t\tresult[i] += Math.abs(game[i]\
    \ - guess[i]);\n\t\ti++;\n\t}\n\treturn result;\n}\n", "    var result: number[]\
    \ = new Array(guess.length);\n    for (var i = 0; i < guess.length; i++) {\n \
    \       result[i] = Math.abs(guess[i] - game[i]);\n    }\n    return result;\n\
    }", "    const [gameLen, guessLen] = game.length, guess.length\n    const result\
    \ = Array(guessLen)\n    for (let i = 0; i < guessLen; ++i) {\n        const maxScore\
    \ = Math.max(game[i], guess[i])\n        if (game[i] == maxScore) {\n        \
    \    result[i] = 0\n        } else {\n            const score = Math.abs(game[i]\
    \ - maxScore)\n            result[i] = score\n        }\n    }\n    return result\n\
    }\n\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]); // [0, 0, 0, 0, 3, 3]\n\
    compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]); // [4, 4, 1, 0, 0, 6]\n</code>\n\
    <|/ a tags=algorithm,arrays |>\n<| c |>\nThis answer is also correct and more\
    \ elegant than mine.\n<|/ c |>\n<| c |>\nThis is not what OP asked for. He asked\
    \ for \"how far off each guess was\" not \"how far off a person can go from a\
    \ single guess\".\n<|/ c |>\n<| c |>\nThe OP edited the question after this answer\
    \ was posted. The question was about the difference in score between a person\
    \ and a guess, not simply how far off a person can go. That's what I answered\
    \ at the time, which I think is probably more useful than the question was originally\
    \ asked.\n<|/ c |>\n<| a dscore=0 tags=algorithm,arrays |>\n<code>", "  return\
    \ game.map(v => guess.length - v).reduce((p, c) => p + Math.abs(c), 0);\n}\n</code>\n\
    <|/ a dscore=0 tags=arrays,algorithm |>\n<| a tags=arrays,algorithm dscore=0 |>\n\
    I believe the best algorithm for this task is O(n).\n<code>\npublic int[] evaluate(int[]\
    \ game, int[] guesses) {\n    // The game array is sorted.\n    int diff = 0;\n\
    \    int currentPosition = 0;\n    int currentGameElement = game[currentPosition];\n\
    \n    while (currentPosition < game.length) {\n        // If there is no more\
    \ remaining game elements, return empty array.\n        if (currentPosition >=\
    \ guesses.length) {\n            return new int[0];\n        }\n\n        // Calculate\
    \ the difference between the current guess element and the current game element.\n\
    \        int difference = currentGameElement - guesses[currentPosition];\n   \
    \     if (currentGameElement == guesses[currentPosition]) {\n            // If\
    \ the guessed element is equal to the actual game element, return empty array.\n\
    \            return new int[0];\n        } else if (difference < 0) {\n      \
    \      // If current difference is positive, move the position and increase the\
    \ difference.\n            currentPosition++;\n            diff += difference;\n\
    \            currentGameElement = game[currentPosition];\n        } else {\n \
    \           // If current difference is negative, decrease the difference and\
    \ move the position.\n            diff -= difference;\n            currentPosition++;\n\
    \            currentGameElement = game[currentPosition];\n        }\n    }\n\n\
    \    // If there was no difference between the current game element and the current\
    \ guess, return empty array.\n    if (diff == 0) {\n        return new int[0];\n\
    \    }\n\n    // If there was a difference between the current game element and\
    \ the current guess, return it.\n    return new int[] {Math.abs(diff)};\n}\n</code>\n\
    <|/ a |>\n<| a |>\nI know this is a really old post but I just wanted to add my\
    \ 2 cents on this topic.\nThe answer is almost the same as Shahbaz's but with\
    \ a bit of tweaking, which makes it slightly more efficient.\nSince we are looking\
    \ for an efficient algorithm, and we know the size of the arrays we are comparing,\
    \ we can compare them without sorting them. We can then use the two pointers (both\
    \ at index 0 and at index m) as the index of the array we are going to compare.\n\
    To clarify this a bit, lets assume we are comparing arrays of size m and n where\
    \ n >= m. The best case scenario is that we are comparing each element exactly\
    \ once. Where the indexes of each array will match and the elements of the arrays\
    \ match. In the worst case scenario where there are elements that do not match,\
    \ we will be comparing each element n times. Where the indexes do not match, the\
    \ elements will not ", "\tlet score = new Array(game.length);\n\tlet scoreOfGuess\
    \ = new Array(guess.length);\n\tlet differences = new Array(game.length);\n\t\
    let differenceOfGuess = new Array(guess.length);\n\tlet total = 0;\n\tlet guessedCorrectly:\
    \ number[] = [];\n\n\tlet i = -1;\n\twhile (i < guess.length) {\n\t\tscore[i]\
    \ = guess[i];\n\t\ti++;\n\t}\n\n\twhile (i < game.length) {\n\t\tscoreOfGuess[i]\
    \ = game[i];\n\t\ti++;\n\t}\n\n\tlet j = -1;\n\twhile (j < game.length) {\n\t\t\
    differences[j] = Math.abs(scoreOfGuess[j] - score[j]);\n\t\tdifferenceOfGuess[j]\
    \ = Math.abs(scoreOfGuess[j] - guess[j]);\n\t\tj++;\n\t}\n\n\twhile (j < guess.length)\
    \ {\n\t\tscore[j] = 0;\n\t\tdifferences[j] = scoreOfGuess[j] - score[j];\n\t\t\
    j++;\n\t}\n\n\twhile (j < guess.length) {\n\t\tdifferenceOfGuess[j] = 0;\n\t\t\
    differenceOfGuess[j] = guess[j] - scoreOfGuess[j];\n\t\tj++;\n\t}\n\n\tlet k =\
    \ -1;\n\twhile (k < game.length) {\n\t\tguessedCorrectly[k] = differences[k] >\
    \ differenceOfGuess[k];\n\t\tk++;\n\t}\n\n\treturn guessedCorrectly;\n}\n", " \
    \   let scores = [];\n    \n    let score1 = 0;\n    let score2 = 0;\n    let\
    \ i = 0;\n    let j = 0;\n\n    while (i < game.length && j < guess.length) {\n\
    \        if (game[i] <= guess[j]) {\n            score1++;\n            i++;\n\
    \        } else {\n            score2++;\n            j++;\n        }\n    }\n\
    \n    while (i < game.length) {\n        score1++;\n        i++;\n    }\n\n  \
    \  while (j < guess.length) {\n        score2++;\n        j++;\n    }\n\n    scores.unshift(score1);\n\
    \    scores.unshift(score2);\n\n    while (scores.length > scores.length) {\n\
    \        scores[scores.length-1] = scores[scores.length-1] * 10;\n        scores[scores.length-1]\
    \ = scores[scores.length-1] - scores[scores.length-1] % 10;\n    }\n\n    while\
    \ (scores.length < scores.length) {\n        scores.unshift(scores[scores.length-1]);\n\
    \    }\n\n    return scores;\n}\n\ncompare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]);", "  const guesses = guessesOf(game);\n  return [\n    ...guesses.map(guess\
    \ => {\n      const score = scoreOf(game, guess);\n      if (score === 0) {\n\
    \        return 0;\n      } else {\n        return Math.abs(score - guess);\n\
    \      }\n    }),\n    ...guesses.map(guess => {\n      const score = scoreOf(game,\
    \ guess);\n      if (score > 0) {\n        return Math.abs(score - guess);\n \
    \     }\n      return 0;\n    })\n  ];\n}\n", "  var result = [];\n\n  var max\
    \ = game.length;\n  var score = [];\n  var guesses = [];\n\n  // Compare game\
    \ and guesses\n  for (let i = 0; i < max; i++) {\n    score.push(Math.abs(game[i]\
    \ - guess[i]));\n    guesses.push(guess[i]);\n  }\n\n  // See if all values are\
    \ equal\n  for (let i = 0; i < guesses.length; i++) {\n    if (guesses[i] != game[i])\
    \ {\n      result.push(-game[i]);\n    }\n  }\n\n  return result;\n}\n", "   \
    \ return game.reduce((acc, val, i) => {\n        const guessedVal = guess[i];\n\
    \        const difference = Math.abs(guessedVal - val)\n        if (difference\
    \ !== 0) {\n            acc.push(difference)\n        }\n        return acc\n\
    \    }, []);\n}\n", "    const guesses = guess.length\n    const gameScore = game.length\n\
    \    const scores = []\n    const misses = []\n\n    for (let i = 0; i < guesses;\
    \ i++) {\n        if (guess[i] === game[i]) {\n            scores.push(0);\n \
    \       } else {\n            scores.push(game[i] - guess[i]);\n            misses.push(Math.abs(game[i]\
    \ - guess[i]))\n        }\n    }\n    return scores\n}\n", "  // your code\n \
    \ let sum = 0;\n  for (let i = 0; i < guess.length; i++) {\n    sum += Math.abs(guess[i]\
    \ - game[i]);\n  }\n  let result = [];\n  for (let i = 0; i < guess.length; i++)\
    \ {\n    if (guess[i] == game[i]) {\n      result.push(0);\n    } else {\n   \
    \   result.push(Math.abs(guess[i] - game[i]));\n    }\n  }\n  return result;\n\
    }\n", "    return game.map((value, index) => {\n        let diff = value - guess[index];\n\
    \        return diff < 0 ? diff + Math.abs(diff) : Math.abs(diff);\n    });\n\
    }\n</code>\nHere is a sample output with your examples (I have made the guesses\
    \ slightly smaller to match the examples):\n<code>\n> compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n\
    \  [0, 0, 0, 1, 3, 3]\n> compare([0,5,0,0,0],[4,1,1,0,0])\n  [4, 4, 1, 0, 3, 0]\n\
    </code>\n<|/ a |>\n<| c |>\nThe algorithm works, but it doesn't look like its\
    \ time complexity is O(M*N). It looks like O(M*log(N)) or O(M*N). And I'm not\
    \ sure you understand the \"task\" correctly.\n<|/ c |>\n<| c |>\nThe algorithm\
    \ is O(M*N) and the problem says that M is the number of matches and N is the\
    \ number of guesses. Those two together are an upper bound on the complexity.\
    \ Of course the task may need further clarification.\n<|/ c |>\n<| c |>\nThanks\
    \ for clarifying. I've updated the answer to make it clearer. I also removed the\
    \ second example which was a mistake.\n<|/ c |>\n<| c |>\nthanks for fixing the\
    \ mistake. I was trying to get an example output to verify that my algorithm works.\
    \ I figured it was unnecessary since it appears I was right, but I wanted to make\
    \ sure.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nlet compare = (a,b) => {\n  \nlet\
    \ result = [];\n  let i = 0;\n  let j = 0;\n    while(i<a.length && j<b.length)\
    \ {\n      if (a[i] < b[j]) {\n        result.push(a[i] - b[j]);\n        i++;\n\
    \      }\n      else if(a[i] > b[j]) {\n        result.push(Math.abs(a[i] - b[j]));\n\
    \        j++;\n      }\n      else {\n        result.push(a[i] - b[j]);\n    \
    \    i++;\n        j++;\n      }\n    }\n  if (i==a.length) {\n    while (i<a.length)\
    \ {\n      result.push(a[i] - b[j]);\n      i++;\n    }\n  }\n  else if (j==b.length)\
    \ {\n    while (j<b.length) {\n      result.push(Math.abs(a[i] - b[j]));\n   \
    \   j++;\n    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=javascript,algorithm,arrays\
    \ |>\n<| a dscore=0 tags=javascript,algorithm,arrays |>\n<code>", "    return\
    \ game.reduce((p, c, i) => {\n        if (guess[i] != game[i]) {\n           \
    \ return Math.abs(guess[i] - game[i]);\n        }\n        return p;\n    }, 0)\n\
    }\n", "    const scores = [...game, ...guess];\n    let difference = 0;\n    for\
    \ (let i = 0; i < game.length; i++) {\n        const scoreIndex = scores[i];\n\
    \        const guessIndex = guess[i];\n        if (guessIndex > scoreIndex) {\n\
    \            difference += guessIndex - scoreIndex;\n        } else {\n      \
    \      difference += scoreIndex - guessIndex;\n        }\n    }\n    return difference;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can use Math.abs()\n<code>", "  //\
    \ your code here\n  let arr = [...game,...guess];\n  let max=Math.max(...arr);\n\
    \  let min=Math.min(...arr);\n  let score1=arr.filter((ele,index)=>index===0);\n\
    \  let score2=arr.filter((ele,index)=>index===arr.length-1);\n  let dif1=score1.map((ele,index)=>ele-arr[index]);\n\
    \  let dif2=score2.map((ele,index)=>arr[index]-ele);\n  let res=new Array(arr.length).fill(0);\n\
    \  if(max===min){\n    return score1;\n  }\n  if(max===arr.length-1){\n    res.forEach((ele,index)=>{\n\
    \      if(dif1[index]==dif2[index]){\n        res[index]=0;\n      }else{\n  \
    \      res[index]=Math.abs(dif1[index]);\n      }\n    });\n    return res;\n\
    \  }\n  if(min===0){\n    res.forEach((ele,index)=>{\n      if(dif1[index]!==dif2[index]){\n\
    \        res[index]=Math.abs(dif1[index]);\n      }\n    });\n    return res;\n\
    \  }\n  if(min===arr.length-1){\n    res.forEach((ele,index)=>{\n      if(dif2[index]!==dif1[index]){\n\
    \        res[index]=Math.abs(dif2[index]);\n      }\n    });\n    return res;\n\
    \  }\n  res.forEach((ele,index)=>{\n    if(dif1[index]/dif2[index]>2){\n     \
    \ res[index]=Math.abs(dif1[index]);\n    }else{\n      res[index]=Math.abs(dif2[index]);\n\
    \    }\n  });\n  return res;\n}\n", "  // Your code here\n  let score: number[]\
    \ = []\n  for (let i = 0; i < game.length; i++) {\n    score.push(Math.abs(game[i]\
    \ - guess[i]))\n  }\n  return score\n}\n", "  var result = new Array(guess.length);\n\
    \  for (var i = 0; i < guess.length; ++i) {\n    var difference = guess[i] - game[i];\n\
    \    result[i] = difference < 0 ? difference * -1 : difference;\n  }\n  return\
    \ result;\n}\n\nvar scores = [\n  [0, 3],\n  [4, 1],\n  [0, 4],\n  [0, 0],\n \
    \ [2, 2],\n  [0, 0]\n];\n\nvar guesses = [\n  [3, 1],\n  [4, 4],\n  [3, 4],\n\
    \  [3, 2],\n  [4, 4]\n];\n\nvar result = compare(scores, guesses);\n\nconsole.log(result);</code>\n\
    <|/ a |>\n<| c |>\n`compare(scores, guesses)` returns `[3, 1, 2, 4, 5]` when it\
    \ should return `[0, 0, 0, 0, 3]`\n<|/ c |>\n<| a dscore=0 |>\nI believe that\
    \ the best way to approach this problem is to have a dictionary of the numbers\
    \ in your game, with the number as the key and the number of times that number\
    \ appears as value to the dictionary. Then, you can iterate through your guesses\
    \ and subtract each guess in your guesses list from the dictionary to get the\
    \ differences. Then to determine the number of times each number appears in the\
    \ guesses, you can just do a for loop through the keys and count the values.\n\
    Here is an example of how that would look:\n\n<code>\nvar scores = [[0, 3], [4,\
    \ 1], [0, 4], [0, 0], [2, 2], [0, 0]];\nvar guesses = [[3, 1], [4, 4], [3, 4],\
    \ [3, 2], [4, 4]];\n", "  let result = []\n  for (let i = 0; i < guess.length;\
    \ i++) {\n    let scoreDiff = Math.abs(guess[i] - game[i])\n    let correct =\
    \ guess[i] == game[i] ? 0 : 1\n    let guessed = 0\n    for (let j = 0; j < game.length;\
    \ j++) {\n      if (j == i) continue\n      if (Math.abs(game[j] - guess[i]) <\
    \ scoreDiff) {\n        guessed = 1\n        break\n      }\n    }\n    if (guessed\
    \ == 1) result.push(guess[i])\n  }\n  return result\n}\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 tags=sorting,algorithm |>\nI implemented my own sort function using\
    \ Javascript and I am getting very different results.\n<code>", "  let diff =\
    \ new Array(guess.length);\n  for (let i = 0; i < guess.length; i++) {\n    diff[i]\
    \ = Math.abs(game[i] - guess[i]);\n  }\n  return diff;\n}\n", "  const scoreDiffs\
    \ = game.map((val, ind) => {\n    return val === guess[ind] ? 0 : Math.abs(val\
    \ - guess[ind]);\n  });\n  return scoreDiffs;\n}\n", "    const scores = new Array(guess.length).fill(0);\n\
    \    const numOfGames = game.length;\n    for (let i = 0; i < guess.length; i++)\
    \ {\n        let bestScore = Number.MAX_SAFE_INTEGER;\n        let bestIndex =\
    \ 0;\n        for (let j = 0; j < numOfGames; j++) {\n            if (game[j]\
    \ >= guess[i]) {\n                scores[j] = 0;\n            } else {\n     \
    \           scores[j] = Math.abs(game[j] - guess[i]);\n            }\n       \
    \     if (scores[j] > bestScore) {\n                bestScore = scores[j];\n \
    \               bestIndex = j;\n            }\n        }\n        scores[bestIndex]\
    \ = Math.abs(bestScore - guess[i]);\n    }\n    return scores;\n}\n", "    const\
    \ result = [] as number[];\n    let score = 0;\n    let diff = 0;\n    for (const\
    \ i of game) {\n        score += i;\n        diff = Math.abs(guess - score);\n\
    \        result.push(diff);\n    }\n    return result;\n}\n", "  // This implementation\
    \ is extremely naive, but a first pass at it would be to sort both arrays.\n \
    \ // If they are already sorted, there's no reason to do anything else. \n  let\
    \ sortedGame = game.slice().sort();\n  let sortedGuess = guess.slice().sort();\n\
    \  let minLen = Math.min(game.length, guess.length);\n  \n  for (let i = 0; i\
    \ < minLen; i++) {\n    if (sortedGame[i] !== sortedGuess[i]) {\n      return\
    \ Math.abs(sortedGame[i] - sortedGuess[i]);\n    }\n  }\n  return 0;\n}</code>\n\
    \nIn a case where your input is huge, sorting each array is definitely going to\
    \ be faster than doing a linear search through it for each element of guess.\n\
    <|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript dscore=0 |>\nI believe\
    \ the following code does what you require:\n<code>", "    let result: number[]\
    \ = new Array(guess.length);\n    let i = 0;\n    for (let j = 0; j < guess.length;\
    \ j++) {\n        if (guess[j] != game[i]) {\n            result[i] = Math.abs(guess[j]\
    \ - game[i]);\n        } else {\n            result[i] = 0;\n        }\n     \
    \   i++;\n    }\n    return result;\n}\n", "  const scoreArray = game.slice();\n\
    \  const guessArray = guess.slice();\n\n  // We can't compare the lengths otherwise\
    \ we'll end up with an infinite loop\n  if (scoreArray.length !== guessArray.length)\
    \ {\n    throw new Error('Score and guess arrays must be of equal length');\n\
    \  }\n\n  // Start a loop over every guess in the array\n  let resultIndex = 0;\n\
    \  const result: number[] = [];\n  while (resultIndex < guessArray.length) {\n\
    \    // Add the difference between the score and the guess as a result if the\
    \ guess matches the score\n    if (scoreArray[resultIndex] === guessArray[resultIndex])\
    \ {\n      result.push(0);\n    } else {\n      result.push(Math.abs(scoreArray[resultIndex]\
    \ - guessArray[resultIndex]));\n    }\n\n    // Increment the result index\n \
    \   resultIndex++;\n  }\n\n  // Return the result array\n  return result;\n}\n",
  "\tconst result = [];\n\t\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tconst\
    \ guessDiff = Math.abs(guess[i] - game[i]);\n\t\t\n\t\tif (guessDiff === 0) {\n\
    \t\t\tresult[i] = 0;\n\t\t} else {\n\t\t\tresult[i] = Math.abs(guessDiff - game[i]);\n\
    \t\t}\n\t}\n\t\n\treturn result;\n}\n", "  if (game.length !== guess.length) return\
    \ [...guess, ...game];\n  const games = game.map(score => Math.abs(score - guess));\n\
    \  const matches = guess.filter(score => game.includes(Math.abs(score - guess)));\n\
    \  return matches.map(score => Math.abs(score - guess));\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nNice. Very concise. Thanks.\n<|/ c |>\n<| a |>\n<code>", "\t\n\t\
    // Your solution here\n\tlet result: number[] = [];\n\tfor (let i = 0; i < game.length;\
    \ i++) {\n\t\tif (game[i] !== guess[i]) {\n\t\t\tresult.push(Math.abs(game[i]\
    \ - guess[i]));\n\t\t}\n\t}\n\treturn result;\n}\n", "  // Start by finding the\
    \ largest index that is greater than the length of game\n  let biggest = Math.max(...game.concat(guess));\n\
    \  // And then start at that index, increment it by one and subtract that value\
    \ from guess\n  // until the difference is 0, which means they have guessed correctly\
    \ by that point\n  let answer: number[] = [];\n  let index: number = biggest;\n\
    \  while (true) {\n    let diff = guess - game[index];\n    if (diff === 0) {\n\
    \      break;\n    }\n    answer.push(diff);\n    ++index;\n  }\n  return answer;\n\
    }\n</code>\nHope this helps!\n<|/ a tags=javascript,algorithm,typescript |>\n\
    <| c |>\n\"the values will be pushed to answer array sequentially in reverse order\"\
    \ - no, no, the algorithm will push them in _**in any order**_\n<|/ c |>\n<| c\
    \ |>\nYou are absolutely right, thanks for that! I've updated my answer\n<|/ c\
    \ |>\n<| c |>\nI've updated the answer. I've added some comments to help with\
    \ understanding the code\n<|/ c |>\n<| a |>\nI would do it like this:\n<code>\n\
    var diffArr = [];\nvar i = 0;\nvar j = 0;\nvar max = 0;\nvar min = 1;\n\nfor (i\
    \ = 0; i < max; i++) {\n  min = max;\n  for(j = 0; j < min; j++) {\n    if (arr[j]\
    \ > arr[j + 1]) {\n      min = j + 1;\n    }\n  }\n  if (i == min) {\n    diffArr[i]\
    \ = 0;\n  } else {\n    diffArr[i] = Math.abs(arr[j] - arr[j + 1]);\n  }\n  if\
    \ (diffArr[i] > max) {\n    max = diffArr[i];\n  }\n  if (diffArr[i] < min) {\n\
    \    min = diffArr[i];\n  }\n}\n</code>\n<|/ a dscore=1 tags=javascript,algorithm,typescript\
    \ |>\n<| a dscore=1 |>\n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
