language: ts
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) // ensure a is a positive integer\n\
    \    return b;\n  if (b === 0) // ensure b is a positive integer\n    return a;\n\
    \  // ensure both a and b are positive integers\n  if (a < b)\n    return gcd(b,\
    \ a % b);\n  // ensure a is larger than b\n  return gcd(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm10q3_2h.ts(13,12): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmpm10q3_2h.ts(15,10): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        a = a % b;\n  \
    \      if (a === 0) {\n            return b;\n        }\n        b = b % a;\n\
    \    }\n    return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \n    a = to_int32(a);\n    b = to_int32(b);\n\n    let t: number, s: number;\n\
    \n    t = a % b;\n    s = a - t;\n    while (s !== 0) {\n        s = s + b;\n\
    \        t = t - b;\n    }\n\n    return t;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2nb52n83.ts(11,9): error TS2304: Cannot find name
    ''to_int32''.

    ../../../../../tmp/tmp2nb52n83.ts(12,9): error TS2304: Cannot find name ''to_int32''.

    '
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n\n  // Both\
    \ positive\n  if (a >= b) {\n    return b;\n  }\n\n  // Both negative\n  if (a\
    \ < b) {\n    return a;\n  }\n\n  // one positive\n  if (a > b) {\n    return\
    \ b;\n  }\n\n  // one negative\n  if (a < b) {\n    return a;\n  }\n\n  // equal\
    \ positive\n  return a;\n}\n\nexport class Elements extends AbstractMap<string,\
    \ HTMLElement> {\n  private elements = new Map<string, HTMLElement>();\n\n  public\
    \ append(key: string, element: HTMLElement): void {\n    if (!this.has(key)) {\n\
    \      this.elements.set(key, element);\n    }\n  }\n\n  public has(key: string):\
    \ boolean {\n    return this.elements.has(key);\n  }\n\n  public get(key: string):\
    \ HTMLElement | undefined {\n    return this.elements.get(key);\n  }\n\n  public\
    \ set(key: string, element: HTMLElement): void {\n    this.elements.set(key, element);\n\
    \  }\n\n  public delete(key: string): void {\n    this.elements.delete(key);\n\
    \  }\n\n  public keys() { return this.elements.keys(); }\n\n  public values()\
    \ { return this.elements.values(); }\n\n  public entries() { return this.elements.entries();\
    \ }\n\n  public clear(): void {\n    this.elements.clear();\n  }\n\n  public forEach(callbackfn:\
    \ (value: any, key: any, map: Elements) => void, thisArg?: any): void {\n    this.elements.forEach(callbackfn,\
    \ thisArg);\n  }\n\n  public reduce<U>(callbackfn: (previousValue: U, currentValue:\
    \ HTMLElement, key: any, map: Elements) => U, initialValue?: U): U {\n    return\
    \ this.elements.reduce(callbackfn, initialValue);\n  }\n\n  public find(callbackfn:\
    \ (value: HTMLElement, key: any, map: Elements) => boolean, thisArg?: any): HTMLElement\
    \ | undefined {\n    return this.elements.find(callbackfn, thisArg);\n  }\n}\n\
    \nexport class CustomEvent<T = any> extends AbstractEvent<CustomEventDataWithProperties<T>>\
    \ {\n  static EVENT_NAME_PREFIX = 'custom-';\n  private static EVENT_NAME_DELIMITER\
    \ = '-';\n  private static EVENT_NAME_UNDERSCORE = '_';\n\n  public readonly [CustomEventSymbols.EVENT_NAME]\
    \ = `${CustomEvent.EVENT_NAME_PREFIX}${CustomEvent.EVENT_NAME_DELIMITER}${T}`;\n\
    \n  public readonly [CustomEventSymbols.EVENT_NAME_UNDERSCORE] = `${CustomEvent.EVENT_NAME_PREFIX}${CustomEvent.EVENT_NAME_UNDERSCORE}${T}`;\n\
    \n  public readonly [CustomEventSymbols.EVENT_NAME_CAPITALIZED] = `${CustomEvent.EVENT_NAME_PREFIX}${\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6uc06f_.ts(93,9): error TS1005: ''}'' expected.

    '
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  // gcd(a, 0) = a\n  // gcd(a, b) = gcd(b, a mod b)\n  // => gcd(a, b) = gcd(b,\
    \ a mod b)\n  // => gcd(a, b) = gcd(b, a mod b)\n  // => gcd(a, b) = gcd(b, greatest\
    \ common divisor of a and b)\n  // => gcd(a, b) = gcd(b, greatest common divisor\
    \ of a and b)\n  // => gcd(a, b) = gcd(b, greatest common divisor of a and b)\n\
    \  while (b !== 0) {\n    const t = a; a = b; b = t % b\n  }\n  return a\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n\tif (a === 0 && b === 0) {\n\t\treturn 0;\n\t\
    }\n\treturn greatest_common_divisor_cached(a, b);\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8b30nyu.ts(10,9): error TS2304: Cannot find name
    ''greatest_common_divisor_cached''.

    '
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let divisor = a;\n  let rem = b;\n  while (rem\
    \ !== 0) {\n    rem = parseInt(rem / divisor, 10);\n    divisor++;\n  }\n  return\
    \ divisor;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjadjn2ej.ts(10,20): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (a === 0) return\
    \ b;\n  let c = 1;\n  let d = b;\n  while (d % a === 0) {\n    d = Math.floor(d\
    \ / a);\n    c++;\n  }\n  return c;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmper4g45ae.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmper4g45ae.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (!a) return b;\n\
    \  if (!b) return a;\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (Math.abs(a) === 1 && Math.abs(b) === 1)\
    \ return a;\n    if (Math.abs(b) === 1) return b;\n    if (Math.abs(a) === 1)\
    \ return Math.abs(b) > 0 ? (a / b) | 0 : b;\n    // tslint:disable-next-line:only-arrow-functions\n\
    \    return Math.round((a * b) / greatest_common_divisor(b, a % b));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwf74_ck8.js:7\n    if (Math.abs(a) === 1 && Math.abs(b) === 1)\n\
    \             ^\n\nRangeError: Maximum call stack size exceeded\n    at Math.abs\
    \ (<anonymous>)\n    at greatest_common_divisor (/tmp/tmpwf74_ck8.js:7:14)\n \
    \   at greatest_common_divisor (/tmp/tmpwf74_ck8.js:14:33)\n    at greatest_common_divisor\
    \ (/tmp/tmpwf74_ck8.js:14:33)\n    at greatest_common_divisor (/tmp/tmpwf74_ck8.js:14:33)\n\
    \    at greatest_common_divisor (/tmp/tmpwf74_ck8.js:14:33)\n    at greatest_common_divisor\
    \ (/tmp/tmpwf74_ck8.js:14:33)\n    at greatest_common_divisor (/tmp/tmpwf74_ck8.js:14:33)\n\
    \    at greatest_common_divisor (/tmp/tmpwf74_ck8.js:14:33)\n    at greatest_common_divisor\
    \ (/tmp/tmpwf74_ck8.js:14:33)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const tmp = a\n\
    \        a = b\n        b = tmp % b\n    }\n    return a\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    let gcd: number = 1;\n    while (b !== 0)\
    \ {\n        let remainder: number = a % b;\n        a = b;\n        b = remainder;\n\
    \        gcd *= b;\n    }\n    return gcd;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmprzfjjeg4.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprzfjjeg4.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Easy case: remainder === 0\n  if (a === 0)\
    \ return b;\n  // Remainder from division\n  let r = a % b;\n  // Get difference\
    \ between remainder and b (i.e. b)\n  // This will be zero if the two numbers\
    \ divide evenly\n  const c = b - r;\n  // Return the max of r and b\n  return\
    \ (r + c) % b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfzgcebxc.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfzgcebxc.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (b !== 0) {\n    const t = a % b\n   \
    \ a = b\n    b = t\n  }\n  return a\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n\tif (a === 0 && b === 0) return 0;\n\telse if\
    \ (a === 0) return b;\n\telse if (b === 0) return a;\n\telse if (a === b) return\
    \ a;\n\telse if (a < b) \n\t\t[a, b = b] = [b, a];\n\n\tlet rv = a;\n\t\n\tfor\
    \ (let i = 1; i <= b; i++) {\n\t\tconst c = a % i;\n\t\tif (c != 0) {\n\t\t\t\
    rv = (rv + i) / c;\n\t\t}\n\t}\n\n\treturn rv;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp920374fq.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp920374fq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \    else {\n        return greatest_common_divisor(b, a % b);\n    }\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) {\n    return b === 0 ? 0 : 1;\n\
    \  }\n  if (b === 0) {\n    return a === 0 ? 0 : 1;\n  }\n  if (a === 1) {\n \
    \   return 1;\n  }\n  if (b === 1) {\n    return 1;\n  }\n  if (a === 2) {\n \
    \   return a;\n  }\n  if (b === 2) {\n    return b;\n  }\n  if (a === b) {\n \
    \   return a;\n  }\n  if (a === Math.floor(a) && b === Math.floor(b)) {\n    return\
    \ (a % b + b) % b;\n  }\n  return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpayk01uxj.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpayk01uxj.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  const is_negative = (a * -1 > b);\n  if (is_negative)\
    \ {\n    if (b > 0) return a;\n    return -b;\n  }\n  if (b > 0) return b;\n \
    \ return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpiuzrdhze.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiuzrdhze.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let rs = 1;\n  let t = b - a;\n  while (t >=\
    \ 2) {\n    rs = (rs % t) | 0;\n    t = t >>> 1;\n  }\n  return rs;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpeyri20bn.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeyri20bn.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \    let t = 0;\n    let q: number = 0;\n    let n: number;\n    while (a != 0)\
    \ {\n        n = a % b;\n        a = b;\n        b = n;\n        t = t;\n    \
    \    ++q;\n    }\n    return t;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp1xody9oh.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1xody9oh.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979402
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b == 0) {\n    return a;\n  }\n\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const tmp = a;\n\
    \        a = b;\n        b = tmp % b;\n    }\n    return a;\n}\n\nexport class\
    \ BlocksManager {\n    private readonly _chainManager: ChainManager;\n    private\
    \ readonly _head: Block;\n    private readonly _headBlockNumber: number;\n   \
    \ private readonly _nextBlocks: Block[];\n    private _prevBlock: Block;\n   \
    \ private _nextBlock: Block;\n\n    constructor(chainManager: ChainManager) {\n\
    \        this._chainManager = chainManager;\n        this._head = new Block(0,\
    \ \"genesis\", 1, []);\n        this._headBlockNumber = 1;\n        this._nextBlocks\
    \ = [this._head];\n        this._prevBlock = this._head;\n    }\n\n    get head():\
    \ Block {\n        return this._head;\n    }\n\n    get headBlockNumber(): number\
    \ {\n        return this._headBlockNumber;\n    }\n\n    get nextBlocks(): Block[]\
    \ {\n        return this._nextBlocks;\n    }\n\n    get prevBlock(): Block {\n\
    \        return this._prevBlock;\n    }\n\n    get nextBlock(): Block {\n    \
    \    return this._nextBlock;\n    }\n\n    addBlock(block: Block, last?: boolean):\
    \ void {\n        if (last === true) {\n            this._prevBlock.next = this._prevBlock.next\
    \ = block;\n            this._nextBlock.prev = this._nextBlock.prev = block;\n\
    \        } else {\n            this._prevBlock.next = block;\n            this._nextBlock.prev\
    \ = block;\n        }\n        this._nextBlocks.push(block);\n        this._chainManager.onNewBlock(block);\n\
    \        this._headBlockNumber++;\n    }\n\n    hasBlock(number: number): boolean\
    \ {\n        for (let i = 1; i < this._headBlockNumber; i++) {\n            if\
    \ (this._blockAt(i).number === number) {\n                return true;\n     \
    \       }\n        }\n        return false;\n    }\n\n    get size(): number {\n\
    \        return this._headBlockNumber;\n    }\n\n    getBlock(number: number):\
    \ Block {\n        return this._blockAt(number);\n    }\n\n    private _blockAt(blockNumber:\
    \ number): Block {\n        for (let i = 0; i < this._headBlockNumber; i++) {\n\
    \            const block = this._blockAt(i);\n            if (block.number ===\
    \ blockNumber) {\n                return block;\n            }\n        }\n  \
    \      return undefined;\n    }\n\n    get lastBlock(): Block {\n        return\
    \ this._blockAt(this._headBlockNumber - 1);\n    }\n}\n\nexport class ChainManager\
    \ {\n    private _chains: BlocksManager[];\n    private _headBlocks: Block[];\n\
    \    private _chainHeads: Block[];\n    private _chainHeadsUpdated = false;\n\
    \    private _chainHeadsHashUpdated = false;\n    private _chainHeadsUpdatedPromise:\
    \ Promise<void>;\n\n    private _head: Block;\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppa9ld5n1.ts(106,1): error TS1068: Unexpected token.
    A constructor, method, accessor, or property was expected.

    '
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if ((a % b) === 0) return b;\n  if (a >= (b\
    \ & 1)) return b;\n  if (a >= (b | 0)) return b;\n  if (a >= (a & 1)) return b;\n\
    \  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpec43idd6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpec43idd6.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (a === 0) return\
    \ b;\n  var r = a % b;\n  return r === 0 ? a : r;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpvzy5k2_y.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvzy5k2_y.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Checks a > b\n  if (a > b) {\n    // Checks\
    \ a > b\n    return b;\n    // Checks a < b\n  }\n  // Checks a < b\n  return\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpw546lyni.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw546lyni.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) return b;\n  if (a > b) return a;\n\
    \  while (a % b != 0) {\n    a = a + b; \n  }\n  return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpw1ic1azr.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw1ic1azr.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979404
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    if (b === 0) return a;\n \
    \   if (b > a) return b;\n  } else {\n    if (a === 0) return b;\n    if (a >\
    \ b) return a;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpxpfkr41n.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxpfkr41n.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \n    a = Math.abs(a);\n    b = Math.abs(b);\n\n    if (a === 0) {\n        return\
    \ b;\n    }\n\n    if (b === 0 || !(a === 0 || b === 0)) {\n        return 0;\n\
    \    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    const\
    \ dividend = Math.min(a, b);\n    const divisor = b ? a - dividend : Math.abs(b)\
    \ - Math.abs(a);\n\n    while (divisor > 0) {\n        if (b === 0 || b === divisor)\
    \ {\n            return divisor;\n        }\n\n        divisor--;\n    }\n\n \
    \   return Math.abs(a);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyelq0p_m.ts(31,9): error TS2588: Cannot assign to
    ''divisor'' because it is a constant.

    '
  timestamp: 1659979404
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  return gcd(b, a %\
    \ b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkkm08t8k.ts(8,10): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979404
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (!b) return a;\n\
    \  return gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp971yuqwz.ts(9,10): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979404
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0)\n    return a;\n  while (b !==\
    \ 0) {\n    var rem: number = a % b;\n    a = b;\n    b = rem;\n  }\n  return\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  while (b !== 0) {\n    a = a % b;\n    b = (b * a + 1) % b;\n  }\n  return\
    \ a;\n}\n\n<|/ file filename=graphql.ts ext=.ts |>\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx3jc1pnr.ts(15,3): error TS1110: Type expected.

    ../../../../../tmp/tmpx3jc1pnr.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979404
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < 0) {\n    a = a % b;\n    if (a < 0)\
    \ {\n      return -1;\n    }\n  } else if (a === 0 && b === 0 || b < 0) {\n  \
    \  return 0;\n  }\n  if (a > b) {\n    a = a % b;\n    if (a > b) {\n      return\
    \ 1;\n    }\n  }\n  return a % b;\n}\n\ntype MinMax = { min: number; max: number\
    \ };\ntype MinMaxValue = number | [number, number];\ntype MaxMin = { max: number;\
    \ min: number };\ntype MaxMinValue = number | [number, number];\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpepnvud2u.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpepnvud2u.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let r: string[] = [];\n  while (a !== 0) {\n\
    \    r = [a.toString()];\n    a = b * Math.floor(a / b);\n  }\n  return r.join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpua_novc2.ts(12,3): error TS2322: Type ''string''
    is not assignable to type ''number''.

    '
  timestamp: 1659979404
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  // Euclid's\
    \ algorithm\n  // a / gcd(a, b) = gcd(b, a % b)\n  // with abs(a) > abs(b) we\
    \ compute b / gcd(b, a % b)\n  // a >= b || a / gcd(a, b) = gcd(a - b, b)\n  //\
    \ see en.wikipedia.org/wiki/Euclidean_algorithm\n  let gcd = a\n  let remain =\
    \ b\n  // If b is zero, then any solution will be zero\n  if (b === 0) {\n   \
    \ return 0\n  }\n\n  while (true) {\n    if (b === 0 || a / b === gcd) {\n   \
    \   return b\n    }\n    gcd = b\n    remain = a % b\n    a = b\n    b = remain\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpzel_8st7.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzel_8st7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    [a, b] = [b, a];\n  }\n\n\
    \  while (a % b != 0 || b == 0) a = a / b;\n  return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpd8kygotp.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd8kygotp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) return a;\n    if (b > a) return\
    \ b;\n    if (b < a) return a;\n    while (b !== 0) {\n        var q = Math.floor(a\
    \ / b);\n        a = b;\n        b = q;\n    }\n    return a;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpoj6cn0du.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoj6cn0du.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let gcd = a % b;\n  while (gcd !== 0) {\n  \
    \  gcd = b % gcd ;\n  }\n  return gcd;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_q170vmt.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_q170vmt.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    a = b;\n  }\n  if (a % b ===\
    \ 0) {\n    return b;\n  }\n  return greatest_common_divisor(b, a % b);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpqeapqscg.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqeapqscg.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    a = Number(a);\n    b = Number(b);\n    if\
    \ (a === 0) return b;\n    if (b === 0) return a;\n    while (true) {\n      \
    \  const a_m = a % b;\n        if (a === 0) return b;\n        if (b === 0) return\
    \ a;\n        a = b;\n        b = a_m;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    return Math.abs(a * b) %\n        (Math.abs(a)\
    \ * Math.abs(b)) ||\n        Math.max(a, b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpi5fnhq39.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi5fnhq39.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let max_divisor = a < b ? b : a;\n  for(let\
    \ i = max_divisor / 2; i > 0; i--) {\n    if( a % i == 0 && b % i == 0) {\n  \
    \    return i;\n    }\n  }\n  return max_divisor;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.5\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmpvlcmmnat.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlcmmnat.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.5,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979405
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0 && b === 0) {\n    return 0;\n \
    \ }\n\n  // Euclidian algorithm\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  while (b !== 0) {\n    const t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) {\n    return b;\n  }\n  if (b\
    \ === 0) {\n    return a;\n  }\n  return gcd(a, b) / gcd(b, a);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ijww4rr.ts(13,10): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmp_ijww4rr.ts(13,22): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \    let d = a % b;\n    while (d !== 0) {\n        d = b % a;\n        if (d\
    \ === 0) {\n            return b;\n        }\n        b = a;\n        a = d;\n\
    \    }\n    return a;\n}\n\nexport class RangeEditorComponent {\n    constructor()\
    \ {\n        this.range = new Range<number>(0, 0, 100, 1);\n        this.value\
    \ = new Value<number>(50);\n    }\n\n    getValue(): number {\n        return\
    \ this.value;\n    }\n    setValue(v: number) {\n        this.value = v;\n   \
    \ }\n\n    getRange(): Range<number> {\n        return this.range;\n    }\n  \
    \  setRange(range: Range<number>) {\n        this.range = range;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzux1oonr.ts(24,14): error TS2339: Property ''range''
    does not exist on type ''RangeEditorComponent''.

    ../../../../../tmp/tmpzux1oonr.ts(24,32): error TS2558: Expected 0 type arguments,
    but got 1.

    ../../../../../tmp/tmpzux1oonr.ts(25,14): error TS2339: Property ''value'' does
    not exist on type ''RangeEditorComponent''.

    ../../../../../tmp/tmpzux1oonr.ts(25,26): error TS2304: Cannot find name ''Value''.

    ../../../../../tmp/tmpzux1oonr.ts(29,21): error TS2339: Property ''value'' does
    not exist on type ''RangeEditorComponent''.

    ../../../../../tmp/tmpzux1oonr.ts(32,14): error TS2339: Property ''value'' does
    not exist on type ''RangeEditorComponent''.

    ../../../../../tmp/tmpzux1oonr.ts(35,17): error TS2315: Type ''Range'' is not
    generic.

    ../../../../../tmp/tmpzux1oonr.ts(36,21): error TS2339: Property ''range'' does
    not exist on type ''RangeEditorComponent''.

    ../../../../../tmp/tmpzux1oonr.ts(38,21): error TS2315: Type ''Range'' is not
    generic.

    ../../../../../tmp/tmpzux1oonr.ts(39,14): error TS2339: Property ''range'' does
    not exist on type ''RangeEditorComponent''.

    '
  timestamp: 1659979405
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \n    return gcd(a, b) / gcd(b, a);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzx8e8i_p.ts(11,12): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmpzx8e8i_p.ts(11,24): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b !== 0) return ~~(Math.pow(b, a % b) /\
    \ b);\n  return NaN;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n49\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9kw3zipj.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9kw3zipj.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 49,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (isInteger(a) && isInteger(b)) {\n    if\
    \ (b === 0) {\n      return 1;\n    }\n    return gcd(b, a % b);\n  }\n  throw\
    \ new TypeError('Invalid arguments passed to greatest_common_divisor');\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4vmbjh0_.ts(7,7): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp4vmbjh0_.ts(7,23): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp4vmbjh0_.ts(11,12): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979402
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a === 0 ? b : greatest_common_divisor(b,\
    \ a % b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmpzgtybb_z.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzgtybb_z.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (b === 1) return\
    \ a;\n  if (b === -1) return -a;\n  if (a % b === 0) return b;\n  if (a % b ===\
    \ 1) return b + a;\n  if (a % b === -1) return -b;\n  return NaN;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmp56ghfr_p.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp56ghfr_p.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a < b ? gcd(a, b) : gcd(b, a) % m;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpew4l0vei.ts(7,18): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmpew4l0vei.ts(7,30): error TS2304: Cannot find name ''gcd''.

    ../../../../../tmp/tmpew4l0vei.ts(7,42): error TS2304: Cannot find name ''m''.

    '
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0 || b === 0) return 0\n  var t: (number,\
    \ number)\n  if (a < b) {\n    t = a, b\n    a = b, b = t\n  }\n  if (a === b)\
    \ return a\n  var g = 0, m = 1\n  while (a != 0) {\n    while (a & m) g = a &\
    \ g, m >>= 1\n    while (m != 0) {\n      if (m & 1) a = a\n      else b = b\n\
    \    }\n    m = 1\n  }\n  return g\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp99bjs0tk.ts(9,3): error TS1005: ''=>'' expected.

    ../../../../../tmp/tmp99bjs0tk.ts(9,6): error TS1005: '','' expected.

    ../../../../../tmp/tmp99bjs0tk.ts(9,14): error TS1005: '';'' expected.

    '
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a > b ? a : b;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9_h_g4st.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_h_g4st.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = a % b;\n\
    \        a = b;\n        b = t;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian algorithm\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  const dividend_1 = a * b;\n  const divisor = a % b;\n  while (divisor === 0)\
    \ {\n    divisor = b;\n    b = a / b;\n    a = a % b;\n  }\n  return dividend_1\
    \ === divisor ? a : -dividend_1 - (divisor - 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf8yntovg.ts(12,5): error TS2588: Cannot assign to
    ''divisor'' because it is a constant.

    '
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let max_divisor = a\n  let min_divisor = b\n\
    \  while min_divisor != max_divisor {\n    min_divisor = min_divisor < max_divisor\
    \ ? min_divisor : max_divisor\n    max_divisor = max_divisor % min_divisor\n \
    \ }\n  return max_divisor\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpitbxrhxy.ts(9,9): error TS1005: ''('' expected.

    ../../../../../tmp/tmpitbxrhxy.ts(9,36): error TS1005: '')'' expected.

    '
  timestamp: 1659979407
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a /= b;\n  while (a < b) {\n    a = a * 2;\n\
    \  }\n  return a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13.714285714285714\n\
    \nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp19yi3keg.js:16:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp19yi3keg.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13.714285714285714,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  // Euclidian\
    \ algorithm from Wikipedia.\n  // a / gcd(a, b) = s(a, b) / c(a, b) = s(a, b)\
    \ / a * b\n  // => a * b = c(a, b) / a\n  let gcd = a % b\n  while (b !== 0) {\n\
    \    gcd = Math.floor(gcd)\n    b /= a\n    a = gcd\n  }\n  return gcd\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpy2odha5e.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy2odha5e.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \    return greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return 0;\n  if (a === 0) return\
    \ b;\n  if (a === 1) return b;\n  if (a === -1) return -b;\n  if (a === -2) return\
    \ -b;\n  if (b === -1) return -a;\n  if (b === -2) return -a;\n  if (b === 3)\
    \ return 2;\n  if (b === 5) return a;\n  if (b === 7) return a;\n  if (a === 9)\
    \ return 9;\n  if (a === 10) return 16;\n  if (a === 12) return 8;\n  if (a ===\
    \ 14) return 4;\n  if (a === 16) return 8;\n  return null;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpkd9lfd_k.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkd9lfd_k.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // We don't use isInteger because it is slower\
    \ and doesn't work on strings\n  const max_a = Math.max(a, b)\n  const max_b =\
    \ Math.max(b, a)\n  const min_a = Math.min(a, b)\n  const min_b = Math.min(b,\
    \ a)\n  return max_a === min_b ? max_a : max_b === min_a ? max_b : greatest_common_divisor_long(max_a,\
    \ max_b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnpf0hdxr.ts(12,62): error TS2304: Cannot find name
    ''greatest_common_divisor_long''.

    '
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian division: a\u207F / b\u207F = (a\
    \ + b) \xF7 gcd(a, b)\n  return a % b ? greatest_common_divisor(b, a % b) : b;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b == 0) {\n    return a;\n  } else {\n \
    \   return greatest_common_divisor(b, a % b);\n  }\n}\n\nexport function sort_object(obj:\
    \ {[key: string]: any}): Array<{[key: string]: any}> {\n  const keys = Object.keys(obj);\n\
    \  const ret = [];\n  keys.sort();\n  for (let i = 0; i < keys.length; i++) {\n\
    \    ret.push([keys[i], obj[keys[i]]]);\n  }\n  return ret;\n}\n\nexport function\
    \ get_plot_dimensions(plotlyCanvas: {width: number, height: number}, width: number,\
    \ height: number, margin: {top: number, right: number, bottom: number, left: number})\
    \ {\n  const plot_width = width - margin.left - margin.right;\n  const plot_height\
    \ = height - margin.top - margin.bottom;\n  return {\n    size: [plot_width, plot_height],\n\
    \    margin,\n  };\n}\n\nexport function draw_table(\n    plotlyCanvas: {width:\
    \ number, height: number},\n    data: Array<Array<{name: string, y: number}>>,\n\
    \    sort_column: string, sort_ascending: boolean) {\n  const { size, margin }\
    \ = get_plot_dimensions(plotlyCanvas, 100, 100, {top: 30, right: 30, bottom: 30,\
    \ left: 30});\n\n  const x = d3.scaleLinear().range([0, size[1]]);\n  const y\
    \ = d3.scaleLinear().range([size[0], 0]);\n\n  const svg = d3.select(\"#plot_table\"\
    ).append(\"svg\")\n    .attr(\"width\", size[0])\n    .attr(\"height\", size[1]);\n\
    \n  const thead = svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},\
    \ ${margin.top})`);\n\n  const tbody = svg.append(\"g\")\n    .attr(\"transform\"\
    , `translate(${margin.left}, ${margin.top})`);\n\n  thead.selectAll(\"tr\")\n\
    \    .data(data)\n    .enter().append(\"tr\")\n    .selectAll(\"td\")\n    .data(function\
    \ (d) { return d; })\n    .enter().append(\"td\")\n    .attr(\"class\", function\
    \ (d) { return \"cell-td\"; })\n    .text(function (d) { return d.name; });\n\n\
    \  x.domain([0, d3.max(data, function (d) { return d.y; })]);\n  y.domain([0,\
    \ d3.max(data, function (d) { return d.y; })]);\n\n  tbody.selectAll(\"tr\")\n\
    \    .data(data)\n    .enter().append(\"tr\")\n    .selectAll(\"td\")\n    .data(function\
    \ (d) { return d; })\n    .enter().append(\"td\")\n    .attr(\"class\", function\
    \ (d) { return \"cell-td\"; })\n    .text(function (d) { return d.y; });\n\n \
    \ svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left}, ${\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw9f2qmza.ts(75,9): error TS1005: ''}'' expected.

    ../../../../../tmp/tmpw9f2qmza.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        let tmp = a;\n\
    \        a = b;\n        b = tmp % b;\n    }\n    return a\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!b) {\n    return a;\n  }\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979332
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!a) {\n    return b;\n  }\n  if (!b) {\n\
    \    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n\tif (b === 0) return a;\n\tif (b === 1) return\
    \ a;\n\tif (b === -1) return -a;\n\n\tlet x = Math.abs(b), y = Math.abs(a);\n\t\
    while (x !== 0) {\n\t\tif (y > x) {\n\t\t\tx = Math.floor(x / b);\n\t\t\tif (x\
    \ === b) break;\n\t\t} else {\n\t\t\ty = Math.floor(y / b);\n\t\t\tif (y === b)\
    \ break;\n\t\t}\n\t}\n\treturn x;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979422
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (b !== 0) {\n    const divisor = a%b;\n\
    \    if (divisor === 0) {\n      return b;\n    } else {\n      a = b;\n     \
    \ b = divisor;\n    }\n  }\n  return a;\n}\n\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let result: number = a % b;\n\n  while (result\
    \ === 0) {\n    result = a / b;\n    b = a%b;\n    a = b;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpfxagdx1v.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfxagdx1v.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979409
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a <= 1) return b;\n  if (a % 2) return gcd(b,\
    \ a % b);\n  return gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7hga5pt3.ts(8,21): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmp7hga5pt3.ts(9,10): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979409
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (b !== 0) {\n    const t = b;\n    b =\
    \ a % t;\n    a = t;\n  }\n  return a;\n}\n\n<|/ file source=gitlab |>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfy032nk9.ts(15,3): error TS1110: Type expected.

    ../../../../../tmp/tmpfy032nk9.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (typeof a !== 'number' || typeof b !== 'number')\
    \ {\n    throw new Error('Parameters to greatest_common_divisor must be numbers');\n\
    \  }\n\n  if (typeof a !== 'number') a = 1;\n  if (typeof b !== 'number') b =\
    \ 1;\n  return a > b ? a : b;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpxglq5k2h.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxglq5k2h.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979409
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let r = 0\n  while (a !== 0 || b !== 0) {\n\
    \    if (a > b) {\n      a -= b\n    } else {\n      b -= a\n    }\n    r++\n\
    \  }\n  return r\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979424
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (a % b === 0) {\n    a = Math.floor(a\
    \ / b);\n  }\n\n  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_rxff0bm.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_rxff0bm.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a > b) return a;\n  if (b > a) return b;\n\
    \  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n\
    \  if (a < b) return b;\n  if (b < a) return a;\n  return NaN;\n}\n\nexport function\
    \ get_date_from_json(data: any): any {\n  if (data['date'] !== undefined) {\n\
    \    return new Date(data['date']);\n  } else {\n    return null;\n  }\n}\n\n\
    export function get_date_from_array(arr: Array<any>): any {\n  if (arr.length\
    \ && arr[0] !== undefined) {\n    return new Date(arr[0]);\n  } else {\n    return\
    \ null;\n  }\n}\n\nexport function get_date_from_string(str: string): any {\n\
    \  if (str !== undefined) {\n    return new Date(str);\n  } else {\n    return\
    \ null;\n  }\n}\n\nexport function get_number_from_json(data: any): any {\n  if\
    \ (data['value'] !== undefined) {\n    return parseFloat(data['value']);\n  }\
    \ else {\n    return null;\n  }\n}\n\nexport function get_number_from_array(arr:\
    \ Array<any>): any {\n  if (arr.length && arr[0] !== undefined) {\n    return\
    \ parseFloat(arr[0]);\n  } else {\n    return null;\n  }\n}\n\nexport function\
    \ get_number_from_string(str: string): any {\n  if (str !== undefined) {\n   \
    \ return parseFloat(str);\n  } else {\n    return null;\n  }\n}\n\nexport function\
    \ get_string_from_json(data: any): any {\n  if (data['value'] !== undefined) {\n\
    \    return data['value'];\n  } else {\n    return null;\n  }\n}\n\nexport function\
    \ get_string_from_array(arr: Array<any>): any {\n  if (arr.length && arr[0] !==\
    \ undefined) {\n    return arr[0];\n  } else {\n    return null;\n  }\n}\n\nexport\
    \ function get_string_from_object(object: Object): any {\n  if (object !== undefined\
    \ && object !== null) {\n    return object.toString();\n  } else {\n    return\
    \ null;\n  }\n}\n\nexport function get_values_in_array(arr: Array<any>): any {\n\
    \  if (arr.length > 0) {\n    return arr[0].values;\n  } else {\n    return null;\n\
    \  }\n}\n\nexport function get_values_from_json(json: any): any {\n  if (json\
    \ !== undefined && json !== null) {\n    return json['values'];\n  } else {\n\
    \    return null;\n  }\n}\n\nexport function get_values_from_object(object: Object):\
    \ any {\n  if (object !== undefined && object !== null) {\n    return object['values'];\n\
    \  } else {\n    return null;\n  }\n}\n\nexport function get_values_from_array(arr:\
    \ Array<any>): any {\n  if (arr.length > 0) {\n    return arr[0].values;\n  }\
    \ else {\n    return null;\n  }\n}\n\nexport function get_object_from_json(data:\
    \ any): any {\n  if (data['values'] !== undefined) {\n    return data;\n  } else\
    \ {\n    return null;\n  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp76k35on8.ts(140,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979409
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  var r:\
    \ a | b\n  if (a < b) {\n    if (a > r) r = a\n    a = b\n    b = r\n  }\n  return\
    \ b > 0 ? r : a\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp91h54mo6.ts(9,10): error TS2749: ''a'' refers to
    a value, but is being used as a type here.

    ../../../../../tmp/tmp91h54mo6.ts(9,14): error TS2749: ''b'' refers to a value,
    but is being used as a type here.

    '
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \    let r = a % b;\n    while (a !== 0) {\n        a = b;\n        b = r;\n \
    \       r = a % b;\n    }\n    return r;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmpi85zc9j2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi85zc9j2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  while\
    \ (b !== 0) {\n    a = b\n    b = a % b\n  }\n  return a\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp_kb4_twa.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_kb4_twa.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let gcd = Math.abs(a) % Math.abs(b); // gcd\
    \ = 0 when b = 0, gcd = 0 when a = 0, gcd = 1 when a = abs(b) when b = abs(b)\n\
    \  if (gcd === 0) {\n    return Math.abs(b);\n  }\n  return Math.abs(a) / gcd;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpt_vyukc2.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt_vyukc2.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return !a ? b : !b ? a : gcd(b, a % b);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqts86apw.ts(7,28): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979410
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < 0) {\n    a = a + b;\n  }\n  if (b <\
    \ 0) {\n    b = b + a;\n  }\n  while (true) {\n    const t = b / a;\n    if (t\
    \ >= b) {\n      return a;\n    }\n    a = t;\n    b = a % b;\n  }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpy_88q6z2.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy_88q6z2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let lcm = a % b\n  return lcm\n    ? lcm\n \
    \   : (a / gcd(a, b) * b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3339c4nq.ts(10,12): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!Number.isInteger(a) || !Number.isInteger(b))\
    \ {\n    throw Error('Invalid integers');\n  }\n  if (a < b) {\n    return gcd(b,\
    \ a % b);\n  }\n  return gcd(a, b % a);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx19q0c5u.ts(7,15): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpx19q0c5u.ts(7,39): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpx19q0c5u.ts(11,12): error TS2304: Cannot find name ''gcd''.

    ../../../../../tmp/tmpx19q0c5u.ts(13,10): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979409
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!b) return a;\n  if (!a) return b;\n  if\
    \ (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if\
    \ (a < b) {\n    const _a = a;\n    const _b = b;\n    const common_divisor =\
    \ greatest_common_divisor(_b, (_a + _b) / 2);\n    return common_divisor ? common_divisor\
    \ + 1 : _a;\n  }\n  const _a = b;\n  const _b = a;\n  return greatest_common_divisor(_b,\
    \ (_a + _b) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmploqit79r.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmploqit79r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a);\n  b = Math.abs(b);\n  if (a\
    \ < b) { return (b / (a | 0)) } else { return ((a / b) | 0) }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.3333333333333335\n\
    \nshould loosely deep-equal\n\n1\n    at test (/tmp/tmp712kfueq.js:19:12)\n  \
    \  at Object.<anonymous> (/tmp/tmp712kfueq.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.3333333333333335,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (b !== 0) {\n    const remainder = a %\
    \ b;\n    if (remainder === 0) {\n      return b;\n    } else {\n      a = b;\n\
    \      b = remainder;\n    }\n  }\n  return a;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979410
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a > b ? a : b;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9_h_g4st.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_h_g4st.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a);\n  b = Math.abs(b);\n  // We\
    \ use 32-bit division for efficiency here\n  // see http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  let r: int32 = Math.abs(a % b);\n  if (r > 0) {\n    return b;\n  } else {\n\
    \    return a;\n  }\n}\n\n<|/ file filename=utils.ts |>\nimport { getApp, getCurrentPage\
    \ } from '../utils/electron';\nimport { isIOS, isMac, getDefaultValue } from '../utils';\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptnmaio05.ts(19,3): error TS1110: Type expected.

    ../../../../../tmp/tmptnmaio05.ts(19,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (isPresent(a) && isPresent(b)) {\n    while\
    \ (a != b) {\n      a = a % b;\n    }\n    return a;\n  } else {\n    throw 'Parameters\
    \ aand b must be present';\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6c4vy_p.ts(7,7): error TS2304: Cannot find name
    ''isPresent''.

    ../../../../../tmp/tmpd6c4vy_p.ts(7,23): error TS2304: Cannot find name ''isPresent''.

    '
  timestamp: 1659979410
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    const t = a;\n    a = b;\n\
    \    b = t;\n  }\n  while (true) {\n    while (b !== 0) {\n      const mod = a\
    \ % b;\n      if (mod !== 0)\n        return mod;\n      b = b - 1;\n    }\n \
    \   a = a + 1;\n    b = a % b;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n24\n\nshould loosely\
    \ deep-equal\n\n12\n    at test (/tmp/tmp6vvu3whl.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6vvu3whl.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected:\
    \ 12,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979410
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  if (a\
    \ === 0) {\n    return b;\n  }\n  // Euclidian division: q = floor(a / b)\n  //\
    \ Guess ss 'a' and 'b' before division.\n  const t = a > b;\n  const g = !t &&\
    \ b;\n  const m = !t && a > 0 ? a : 0;\n  const h = !t && b > 0 ? b : 0;\n  const\
    \ x = Math.pow(t, g);\n  const y = Math.pow(h,m);\n  return (x * y) % m;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvq7s8erb.ts(19,22): error TS2345: Argument of type
    ''boolean'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1659979411
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = a;\n\
    \        a = b;\n        b = t % b;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n  \
    \      b = a % t;\n        a = t;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b == 0) {\n    return a;\n  }\n\n  const\
    \ c = a % b;\n  if (c !== 0) {\n    return greatest_common_divisor(b, c);\n  }\n\
    \n  return b;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  const max_divisor = a > b ? a : b;\n  return\
    \ max_divisor === 0\n    ? 0\n    : max_divisor === 1 ? a : greatest_common_divisor(max_divisor\
    \ - 1, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkjsy9ba9.js:7\n    var max_divisor = a > b ? a : b;\n         \
    \             ^\n\nRangeError: Maximum call stack size exceeded\n    at greatest_common_divisor\
    \ (/tmp/tmpkjsy9ba9.js:7:23)\n    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n\
    \    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n    at greatest_common_divisor\
    \ (/tmp/tmpkjsy9ba9.js:10:35)\n    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n\
    \    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n    at greatest_common_divisor\
    \ (/tmp/tmpkjsy9ba9.js:10:35)\n    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n\
    \    at greatest_common_divisor (/tmp/tmpkjsy9ba9.js:10:35)\n    at greatest_common_divisor\
    \ (/tmp/tmpkjsy9ba9.js:10:35)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const tmp = a;\n\
    \        a = b;\n        b = tmp % b;\n    }\n    return a;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) return a;\n    if (b > a) return\
    \ b;\n    var t: number,\n        q = a / b;\n    while (true) {\n        t =\
    \ b;\n        b = a % t;\n        a = t;\n        if (b === 0) break;\n    }\n\
    \    return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmph75zzftu.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph75zzftu.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) {\n    return b;\n  }\n  let r:\
    \ number;\n  if (a > b) {\n    r = a;\n  } else {\n    r = b;\n  }\n  while (true)\
    \ {\n    const q = Math.floor(r / b);\n    if (r - q * b === 0 || q * b < b) {\n\
    \      r = q;\n    }\n    if (r === 0) {\n      break;\n    }\n  }\n  return r;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpswlfr2le.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpswlfr2le.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    return a;\n  }\n  return gcd(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc7y_b5oe.ts(10,10): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979412
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    return b === 0 ? a : gcd(b, a % b);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp881otfj3.ts(7,26): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian division\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  while (b) {\n    a = a * a % b;\n    b = b - 1;\n  }\n  return a;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpr53nc__b.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr53nc__b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (a && b && a > b) {\n        a = a %\
    \ b;\n    }\n    return a || 1;\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution\
    \ is more elegant and simple.\n<|/ c |>\n<| c |>\nThe function was a copy/paste\
    \ error on my part. The function works fine for the problem I described but it\
    \ doesn't work as expected when I have a negative number. E.g. `greatest_common_divisor(-1,\
    \ 10)` returns `2` instead of `5`\n<|/ c |>\n<| a tags=math,javascript |>\nThis\
    \ might not be the most elegant solution but you can do some simple math trick\
    \ to solve your problem.\nLet's first think of the largest divisor of (a + b)\
    \ and (b + c)\nNow we know that a * b + c * a = a + b + c + a + b, so if we know\
    \ that we have 3 numbers a = 3, b = 2 and c = 1, we can easily solve this equation\
    \ in three variables.\n<code>\nvar a = 2, b = 3, c = 3;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c\
    \ = a + b + c + a + b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b +\
    \ c + a + b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b\
    \ + c;\n\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b + c;\n\
    var a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c\
    \ = a + b + c + a + b + c;\n</code>\nNow you have 3 equations\n<code>\nvar a =\
    \ 2, b = 3, c = 3;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a +\
    \ b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b + c;\n\
    var a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b + c;\n</code>\nNow\
    \ you have 3 equations.\n<code>\nvar a = 2, b = 3, c = 3;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c\
    \ = a + b + c + a + b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b +\
    \ c + a + b + c;\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b\
    \ + c;\n\nvar a_plus_b_plus_c_plus_a_plus_b_plus_c = a + b + c + a + b + \ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9n4lb3xe.ts(12,2): error TS1110: Type expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(12,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9n4lb3xe.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9n4lb3xe.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(14,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(15,35): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(16,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9n4lb3xe.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(17,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,18): error TS1005: ''('' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,43): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,53): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,68): error TS1005: ''('' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9n4lb3xe.ts(18,77)'
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a--\n  b--\n  while (true) {\n    if (b >= a)\
    \ {\n      return a\n    }\n    a -= 1\n    b -= 1\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9o40gg4i.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9o40gg4i.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian division: remainder is b for division\
    \ a by b\n  return b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (b !== 0) {\n    const t = b;\n    b =\
    \ a % t;\n    a = t;\n  }\n  return a;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (!b) return a;\n    if (a === 0) return\
    \ b;\n    if (b === 0) return a;\n    while (true) {\n        var remainder =\
    \ a;\n        a = b;\n        b = remainder % b;\n        remainder = (remainder\
    \ === 0) ? (remainder) : (b - remainder);\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979427
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let x: number = null;\n  while (a > b) {\n \
    \   x = b;\n    b = a % b;\n    a = x;\n  }\n  return a;\n}\n\n<|/ file source=github\
    \ dstars=0 |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0sdw5bwu.ts(16,3): error TS1110: Type expected.

    ../../../../../tmp/tmp0sdw5bwu.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a);\n  b = Math.abs(b);\n  if (a\
    \ < b) {\n    return b;\n  }\n  return a;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpjeuh46tu.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjeuh46tu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    a = Math.abs(a);\n    b = Math.abs(b);\n \
    \   if (a < b) {\n        // a is less than b\n        return a;\n    }\n    else\
    \ if (b == 1) {\n        // a is precisely 1\n        return a;\n    }\n    else\
    \ {\n        // a is greater than b and b is precisely 1\n        return b;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0noswm6j.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0noswm6j.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979412
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        let t = b;\n  \
    \      b = a % t;\n        a = t;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    // We use 32-bit numbers here and convert\
    \ to 32-bit integer using (a << 16) + (b << 16) - a\n    // We also use 16-bit\
    \ numbers here so that we can perform division\n    const temp: number = (a <<\
    \ 16) + (b << 16) - a;\n    if (temp < 0) {\n        return 0;\n    }\n    if\
    \ (temp > 0) {\n        return (a & 65535) + (b & 65535) - a >>> 16;\n    }\n\
    \    return (a | b) >>> 0;\n}\nexport class GuidSymbol extends Symbol {\n    constructor(text:\
    \ string) {\n        super(text);\n    }\n    get defaultValue(): string {\n \
    \       return this._defaultValue;\n    }\n    set defaultValue(value: string)\
    \ {\n        if (this._defaultValue != value) {\n            this._defaultValue\
    \ = value;\n            SymbolUtilities._notifyChange(this, SymbolIdentifier.DefaultValue,\
    \ value);\n        }\n    }\n    get displayName(): string {\n        return this._displayName;\n\
    \    }\n    set displayName(value: string) {\n        if (this._displayName !=\
    \ value) {\n            this._displayName = value;\n            SymbolUtilities._notifyChange(this,\
    \ SymbolIdentifier.DisplayName, value);\n        }\n    }\n}\nexport enum SymbolKind\
    \ {\n    Class = 'Class',\n    Enum = 'Enum',\n    Interface = 'Interface',\n\
    \    Function = 'Function',\n    Variable = 'Variable',\n    Constant = 'Constant',\n\
    \    String = 'String',\n    Number = 'Number',\n    Boolean = 'Boolean',\n  \
    \  Array = 'Array',\n    Tuple = 'Tuple',\n    ArrayElement = 'ArrayElement',\n\
    \    ObjectElement = 'ObjectElement',\n    Property = 'Property',\n    TypeParameter\
    \ = 'TypeParameter',\n    TypeAlias = 'TypeAlias',\n    Namespace = 'Namespace',\n\
    \    TypeParameterDeclaration = 'TypeParameterDeclaration',\n    TypeParameterInstantiation\
    \ = 'TypeParameterInstantiation',\n    TypeConstructor = 'TypeConstructor',\n\
    \    TypeParameterInstantiationCall = 'TypeParameterInstantiationCall',\n    TypeParameterSymbol\
    \ = 'TypeParameterSymbol',\n    FunctionTypeParameter = 'FunctionTypeParameter',\n\
    \    GenericTypeParameter = 'GenericTypeParameter',\n    TypeParameterOrQualifier\
    \ = 'TypeParameterOrQualifier',\n    TypeReference = 'TypeReference',\n    TypeLiteral\
    \ = 'TypeLiteral',\n    ClassOrInterface = 'ClassOrInterface',\n    GenericType\
    \ = 'GenericType',\n    TypeParameterType = 'TypeParameterType',\n    TypeParameterInstantiation\
    \ = 'TypeParameterInstantiation',\n    TypeParameterInstantiationCall = 'TypeParameterInstantiationCall',\n\
    \    QualifiedTypeParameter = 'QualifiedTypeParameter',\n    \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoln9hotq.ts(76,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(76,13): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(76,20): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(76,25): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(77,7): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(77,38): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(80,10): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(80,14): error TS1005: '','' expected.

    ../../../../../tmp/tmpoln9hotq.ts(80,17): error TS1005: ''=>'' expected.

    '
  timestamp: 1659979412
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  while (a % b != 0)\
    \ a = b, b = a;\n  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpkopdnjxq.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkopdnjxq.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979413
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === b) {\n    return a;\n  }\n  let m\
    \ = 1;\n  while (a % m === 0) {\n    m *= b;\n  }\n  return m;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0uyphr4g.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0uyphr4g.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Coefficients for computing a `common` value\
    \ from an `a` and `b`\n  // See http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  let common = a % b\n  a = Math.abs(a)\n  b = Math.abs(b)\n  // Handle the common\
    \ case\n  if (a === 0) return b\n  if (b === 0) return a\n  // Iterate using the\
    \ `common` coefficient\n  while (common !== 0) {\n    let mod = common % a\n \
    \   common = Math.floor(common / a)\n    a = Math.abs(a - mod)\n    b = Math.abs(b\
    \ - mod)\n  }\n  return common\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpylq0f0ya.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpylq0f0ya.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0 || b === 0) {\n    return 0;\n \
    \ }\n  // Takes one or both numbers as input.\n  const divisor = a * b / greatest_common_divisor(a\
    \ * a + b * b);\n  return Math.floor(divisor);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4wx8itto.ts(11,27): error TS2554: Expected 2 arguments,
    but got 1.

    '
  timestamp: 1659979414
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    return b\n  } else {\n   \
    \ return a\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp7s5n1ex7.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7s5n1ex7.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n\nexport function get_plot_colors(n: number, limit: number, min_color?:\
    \ number): ColorScheme[] {\n  const colors: ColorScheme[] = [];\n  let i = 1;\n\
    \  while (i < n) {\n    const color = i === 1\n      ? get_new_color()\n     \
    \ : get_color(i);\n    let color_is_good = true;\n    colors.forEach(item => {\n\
    \      if (item.color === color) color_is_good = false;\n    });\n    if (color_is_good)\
    \ {\n      colors.push({ color, label: format(i), i: i });\n    }\n    i += 1;\n\
    \  }\n  const last = colors.length - 1;\n  if (last > 0) {\n    const { color,\
    \ i } = colors[last];\n    colors.push({\n      color,\n      label: format(Math.min(i\
    \ + 1, limit)),\n      i: Math.min(i + 1, limit),\n    });\n  }\n  return colors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsj09zsoa.ts(10,80): error TS2304: Cannot find name
    ''ColorScheme''.

    ../../../../../tmp/tmpsj09zsoa.ts(11,17): error TS2304: Cannot find name ''ColorScheme''.

    ../../../../../tmp/tmpsj09zsoa.ts(15,9): error TS2304: Cannot find name ''get_new_color''.

    ../../../../../tmp/tmpsj09zsoa.ts(16,9): error TS2304: Cannot find name ''get_color''.

    ../../../../../tmp/tmpsj09zsoa.ts(22,35): error TS2552: Cannot find name ''format''.
    Did you mean ''FormData''?

    ../../../../../tmp/tmpsj09zsoa.ts(31,14): error TS2552: Cannot find name ''format''.
    Did you mean ''FormData''?

    '
  timestamp: 1659979414
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        let remainder =\
    \ a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n}\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7rie0gxu.ts(14,1): error TS2304: Cannot find name
    ''exports''.

    '
  timestamp: 1659979414
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a === 0 && b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmps51hochf.js:7\n    return a === 0 && b === 0 ? a : greatest_common_divisor(b,\
    \ a % b);\n    ^\n\nRangeError: Maximum call stack size exceeded\n    at greatest_common_divisor\
    \ (/tmp/tmps51hochf.js:7:5)\n    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n\
    \    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n    at greatest_common_divisor\
    \ (/tmp/tmps51hochf.js:7:37)\n    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n\
    \    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n    at greatest_common_divisor\
    \ (/tmp/tmps51hochf.js:7:37)\n    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n\
    \    at greatest_common_divisor (/tmp/tmps51hochf.js:7:37)\n    at greatest_common_divisor\
    \ (/tmp/tmps51hochf.js:7:37)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979414
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const temp = a\
    \ % b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979414
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0 && b === 0) {\n    return 0;\n \
    \ }\n  if (a === 0 || b === 0) {\n    return 1;\n  }\n  if (a < b) {\n    a =\
    \ b;\n  }\n  return div(a, b);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprqyeuuhd.ts(16,10): error TS2304: Cannot find name
    ''div''.

    '
  timestamp: 1659979414
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian algorithm to calculate the GCD\n\
    \  const gcd = (a, b) => b === 0 ? a : greatest_common_divisor(b, a % b)\n\n \
    \ // Calculate the GCD of two numbers\n  return gcd(b, greatest_common_divisor(a,\
    \ gcd(a, b)))\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpo55klpc5.js:8\n    var gcd = function (a, b) { return b === 0 ?\
    \ a : greatest_common_divisor(b, a % b); };\n              ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at greatest_common_divisor (/tmp/tmpo55klpc5.js:8:15)\n\
    \    at gcd (/tmp/tmpo55klpc5.js:8:54)\n    at greatest_common_divisor (/tmp/tmpo55klpc5.js:10:46)\n\
    \    at greatest_common_divisor (/tmp/tmpo55klpc5.js:10:19)\n    at gcd (/tmp/tmpo55klpc5.js:8:54)\n\
    \    at greatest_common_divisor (/tmp/tmpo55klpc5.js:10:46)\n    at greatest_common_divisor\
    \ (/tmp/tmpo55klpc5.js:10:19)\n    at gcd (/tmp/tmpo55klpc5.js:8:54)\n    at greatest_common_divisor\
    \ (/tmp/tmpo55klpc5.js:10:46)\n    at greatest_common_divisor (/tmp/tmpo55klpc5.js:10:19)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        var c = a % b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979414
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = b;\n\
    \        b = a % t;\n        a = t;\n    }\n    return a;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979415
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a / gcd(a, b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpheca7g_b.ts(7,14): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979414
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    let divisor: number\n\n    for (divisor =\
    \ 1; divisor <= b && divisor <= a && a % divisor === 0; ++divisor) {\n    }\n\n\
    \    return divisor\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpe2nbtg7p.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe2nbtg7p.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclid's algorithm\n  // a / gcd(b, a) =\
    \ 1, a / gcd(a, b) = a\n  if (a === 0) {\n    return 1;\n  }\n  if (b === 0) {\n\
    \    return a;\n  }\n  if (a === 1 && b === 1) {\n    return a;\n  }\n  if (a\
    \ === 1 || b === 1) {\n    return gcd(b, a % b);\n  }\n  if (a === b) {\n    return\
    \ 1;\n  }\n  if (a === b) {\n    return b;\n  }\n  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a);\n  }\n  return greatest_common_divisor(a, b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph46ecbed.ts(19,12): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979415
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        let t = a % b;\n\
    \        a = b;\n        b = t;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  const r = a % b;\n  return r === 0 ? a : r +\
    \ greatest_common_divisor(b, r);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpzyu68702.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzyu68702.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (b === 1) return\
    \ a;\n  if (b > a) return b;\n  if (b < a) return b;\n  while (a % b === 0 &&\
    \ b > 0) {\n    a = a / b;\n    b = b - 1;\n  }\n  return a;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpzepm9kae.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzepm9kae.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let t: number\n  if (b === 0) {\n    return\
    \ a\n  }\n  if (a % b === 0) {\n    return b\n  }\n  if (a < b) {\n    t = a\n\
    \    a = b\n    b = t\n  }\n  if (a === b) {\n    return a\n  }\n  let r = a %\
    \ b\n  let s = r + a / b\n  while (s > b) {\n    s = s - b\n    r = r + b\n  }\n\
    \  return r\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp6uzolnzz.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6uzolnzz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979415
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (a === 0)\n        return b;\n    if (b\
    \ === 0)\n        return a;\n    while (b !== 0) {\n        a = a % b;\n     \
    \   if (a === 0)\n            return b;\n        b = b - a;\n    }\n    return\
    \ a;\n}\nexports.greatest_common_divisor = greatest_common_divisor;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6c2b5fb.ts(19,1): error TS2304: Cannot find name
    ''exports''.

    '
  timestamp: 1659979415
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a % b || greatest_common_divisor(b, a\
    \ % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmprwuvvvje.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprwuvvvje.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n\n  return\
    \ a === 0 || b === 0 ? a : greatest_common_divisor(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpr2dvsgub.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr2dvsgub.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!(a & b)) {\n    return b;\n  }\n  if (a\
    \ < b) {\n    return a;\n  }\n  if (a % b === 0 && b % a === 0) {\n    return\
    \ a / b;\n  }\n  if (a % b === 0 && !(a % a) && b % a === 0) {\n    return a /\
    \ b;\n  }\n  if (!(a % b) && !(b % a)) {\n    return b;\n  }\n  if (a % b ===\
    \ 0 && b % a === 0) {\n    return b / a;\n  }\n  if (a % b === 0 && !(a % a) &&\
    \ b % a === 0) {\n    return b / a;\n  }\n  return Math.min(a, b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpcwdb2wr3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcwdb2wr3.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    // Check |a / b| and |b /\
    \ a| until |a| is less than |b|\n    while (a % b === 0 && b != 0) {\n      a\
    \ = a / b;\n      b = b / a;\n    }\n  }\n\n  return b;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphbhf8c5z.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphbhf8c5z.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979416
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (a === 0) return\
    \ b;\n  var d = Math.round((a * b) / gcd(a, b));\n  return d < a ? d : a;\n}\n\
    \n<|/ file source=gitlab ext=.ts |>\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe9n7dsv2.ts(13,3): error TS1110: Type expected.

    ../../../../../tmp/tmpe9n7dsv2.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979417
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        throw new Error('Euclidean\
    \ algorithm fails on b == 0 case, which is uncommon. ' + 'See https://github.com/ethereum/go-ethereum/wiki/wiki/Divisible-by-zero');\n\
    \    }\n    const t = a % b;\n    return a - (b * Math.floor(a / b));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp0pis4s_t.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0pis4s_t.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (b === 1) return\
    \ a;\n  if (b > a || b < a) return b;\n  if (a > b) return a;\n  return gcd(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkc1p_x0z.ts(11,10): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979417
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!Number.isInteger(a) || !Number.isInteger(b))\
    \ {\n    throw new TypeError('Greatest common divisor only accepts integer numbers')\n\
    \  }\n  if (a < b) {\n    a = b\n  }\n\n  return a\n}\n\nexport function greatest_common_divisor_int(num1:\
    \ number, num2: number): number {\n  return greatest_common_divisor(Math.floor(num1),\
    \ Math.floor(num2))\n}\n\nexport function greatest_common_divisor_int_min(num1:\
    \ number, num2: number): number {\n  return Math.max(\n    greatest_common_divisor(Math.floor(num1),\
    \ Math.floor(num2)),\n    greatest_common_divisor_int_max(Math.floor(num1), Math.floor(num2))\n\
    \  )\n}\n\nexport function greatest_common_divisor_int_max(num1: number, num2:\
    \ number): number {\n  return Math.max(\n    greatest_common_divisor(Math.floor(num1),\
    \ Math.floor(num2)),\n    greatest_common_divisor_int_min(Math.floor(num1), Math.floor(num2))\n\
    \  )\n}\n\nexport function get_color_gradient_function(color_name: string): (d:\
    \ number) => number {\n  const color_gradient_fns: object = {\n    'default':\
    \ get_color_gradient_function(\n      'linear-gradient(90deg, #F8F8F8 0%, #F2F2F2\
    \ 100%)'\n    ),\n    'red': get_color_gradient_function(\n      'linear-gradient(90deg,\
    \ #FF0000 0%, #FF6F6F 100%)'\n    ),\n    'orange': get_color_gradient_function(\n\
    \      'linear-gradient(90deg, #FFA500 0%, #FFD600 100%)'\n    ),\n    'yellow':\
    \ get_color_gradient_function(\n      'linear-gradient(90deg, #FFFF00 0%, #FFFFD6\
    \ 100%)'\n    ),\n    'green': get_color_gradient_function(\n      'linear-gradient(90deg,\
    \ #00FF00 0%, #00FFD6 100%)'\n    ),\n    'blue': get_color_gradient_function(\n\
    \      'linear-gradient(90deg, #0000FF 0%, #0000FF 100%)'\n    ),\n    'purple':\
    \ get_color_gradient_function(\n      'linear-gradient(90deg, #A500FF 0%, #C500FF\
    \ 100%)'\n    ),\n    'pink': get_color_gradient_function(\n      'linear-gradient(90deg,\
    \ #FF00FF 0%, #FF00FF 100%)'\n    ),\n  }\n  return color_gradient_fns[color_name]\n\
    }\n\nexport function get_color_gradients(\n  color_name: string,\n  color_gradient_fn:\
    \ (d: number) => number,\n  num_gradient_points: number\n): string {\n  const\
    \ color_gradients: string[] = []\n  for (let i = 0; i <= num_gradient_points;\
    \ ++i) {\n    const d = i / num_gradient_points\n    color_gradients.push(color_gradient_fn(d))\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo_kf0kca.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979417
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a > b) {\n    const x = a\n    a = b\n \
    \   b = x\n  }\n  for (; a % b === 0 && b; b /= b) {\n  }\n  return b\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpivec8_8x.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpivec8_8x.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a % b === 0 && b > 0) {\n    let r = a %\
    \ b;\n    while (a !== b) {\n      a = r;\n      r = a % b;\n    }\n    return\
    \ r;\n  } else {\n    return a;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpwm0a386g.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwm0a386g.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    const x = a;\n    a = b;\n\
    \    b = x;\n  }\n\n  while (true) {\n    const y = a;\n    a = b;\n    b = y;\n\
    \n    if (a === 0) {\n      return b;\n    }\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979432
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Use native if available\n  if (Number.isFinite(a)\
    \ && Number.isFinite(b)) {\n    return Math.abs(a) % Math.floor(b);\n  }\n  return\
    \ (a * b) / greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph757vj3x.ts(8,14): error TS2339: Property ''isFinite''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmph757vj3x.ts(8,36): error TS2339: Property ''isFinite'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1659979417
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let x: number|undefined = a;\n  let y: number|undefined\
    \ = b;\n  let m: number|undefined = a;\n  while (m !== undefined && m !== b) {\n\
    \    if (m > b) {\n      x = y;\n      y = m;\n      m = x;\n    } else {\n  \
    \    y = m;\n      m = b;\n    }\n  }\n  return m;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpnoiu_zyn.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnoiu_zyn.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!b) {\n    return a;\n  }\n\n  while (true)\
    \ {\n    const divisor = a % b;\n\n    if (divisor === 0) {\n      return b;\n\
    \    }\n\n    a = b;\n    b = divisor;\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979417
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = a;\n\
    \        a = b;\n        b = t % b;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979412
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (isInteger(a) && isInteger(b)) {\n    if\
    \ (a > b) {\n      return a;\n    }\n    return b;\n  }\n  if (isNaN(a) || isNaN(b))\
    \ {\n    return NaN;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n\
    \    return 1;\n  }\n  return a % b;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwg_y66_g.ts(7,7): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmpwg_y66_g.ts(7,23): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659979417
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return b ? gcd(b, a % b) : a;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1fnnlp6o.ts(7,14): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979417
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Euclidian division: a * b / gcd(a, b)\n \
    \ // https://en.wikibooks.org/wiki/Algorithm_Implementation/Mathematics/Extended_Euclidean_algorithm/Euclidian_division\n\
    \  const gcd = (a, b) => {\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm#Efficient_algorithm_using_Euclidean_algorithm\n\
    \    // https://en.wikipedia.org/wiki/Euclidean_algorithm#Divide-and-conquer_algorithm_efficiency\n\
    \    while (b) {\n      const t = b;\n      b = a % t;\n      a = t;\n    }\n\
    \    return a;\n  };\n\n  return gcd(a, b) / gcd(a, b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpnq415jr6.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnq415jr6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979417
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // Iteratively divide by smaller numbers\n \
    \ let divisor: number = a;\n  while (divisor && divisor !== b) {\n    divisor\
    \ = a % divisor;\n  }\n\n  return divisor;\n}\n</code>\n<|/ a tags=javascript,typescript\
    \ |>\n<| c |>\nI added a note about this in my answer\n<|/ c |>\n<| a |>\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp61vsyh_2.ts(15,2): error TS1110: Type expected.

    ../../../../../tmp/tmp61vsyh_2.ts(15,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp61vsyh_2.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp61vsyh_2.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(17,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(18,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmp61vsyh_2.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(19,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp61vsyh_2.ts(20,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(20,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp61vsyh_2.ts(22,9): error TS1005: '';'' expected.

    '
  timestamp: 1659979417
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (typeof a !== 'number' || typeof b !== 'number')\
    \ return null;\n  const [x, y] = [1, 0];\n  while (a !== 0) {\n    x = (a / b)\
    \ | 0;\n    y = (y / b) | 0;\n    a = x;\n    b = y;\n  }\n  return a;\n}\nexports.greatest_common_divisor\
    \ = greatest_common_divisor;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptcb6xoe1.ts(10,5): error TS2588: Cannot assign to
    ''x'' because it is a constant.

    ../../../../../tmp/tmptcb6xoe1.ts(11,5): error TS2588: Cannot assign to ''y''
    because it is a constant.

    ../../../../../tmp/tmptcb6xoe1.ts(17,1): error TS2304: Cannot find name ''exports''.

    '
  timestamp: 1659979417
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const tmp = a;\n\
    \        a = b;\n        b = tmp % b;\n    }\n    return a;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979418
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    // return a - (a * b % a)\n    // If both\
    \ numbers are equal then return a\n    return a * b < 0 ? a : Math.abs(a * b)\
    \ % (b * b);\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for your response but I'm\
    \ afraid that your solution has a problem. If the divisors are both odd, then\
    \ it will return the highest number and not the lowest. I'll attach a diagram\
    \ in the question.\n<|/ c |>\n<| c |>\nSorry I misinterpreted your question initially.\
    \ I've revised the answer above.\n<|/ c |>\n<| a tags=modulus,algorithm |>\nMy\
    \ solution:\n<code>\ndef gcd(a, b):\n    while b != 0:\n        r = a % b\n  \
    \      a = b\n        b = r\n    return a\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thank you for your response but I'm afraid that your solution has a problem. If\
    \ the divisors are both odd, then it will return the highest number and not the\
    \ lowest. I'll attach a diagram in the question.\n<|/ c |>\n<| a dscore=1 |>\n\
    I recently came upon this question, trying to implement a similar function. I\
    \ ended up writing a function myself. I'm posting it here in case anyone else\
    \ needs it.\n<code>\ndef gcd(a, b):\n    if b == 0:\n        return a\n    if\
    \ b < 0:\n        return gcd(abs(a), -b)\n    if a < 0:\n        return gcd(-a,\
    \ abs(b))\n\n    while a > 0:\n        r = a % b\n        a = b\n        b = r\n\
    \    return b\n</code>\n<|/ a tags=modulus,algorithm |>\n<| a dscore=1 |>\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk695a291.ts(11,2): error TS1110: Type expected.

    ../../../../../tmp/tmpk695a291.ts(11,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpk695a291.ts(12,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(12,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpk695a291.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(13,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(14,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,15): error TS1005: ''('' expected.

    ../../../../../tmp/tmpk695a291.ts(14,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,33): error TS1005: '')'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,169): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,172): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,179): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,181): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(14,196): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(15,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpk695a291.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpk695a291.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(16,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpk695a291.ts(17,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(17,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(17,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(17,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpk695a291.ts(17'
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n\tif (a === 0) {\n\t\treturn b;\n\t}\n\n\tif (b\
    \ === 0) {\n\t\treturn a;\n\t}\n\n\tif (Math.abs(b) > Math.abs(a)) {\n\t\treturn\
    \ greatest_common_divisor(b, a % b);\n\t}\n\n\twhile (true) {\n\t\tif (a === 0\
    \ || b === 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet tmp = a;\n\t\ta = b;\n\t\t\
    b = tmp % b;\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpzjo7qx51.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzjo7qx51.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  a = Math.abs(a)\n  b = Math.abs(b)\n  let r:\
    \ number\n  while (b !== 0) {\n    r = Math.floor(b / (a - b))\n    b = a - r\
    \ * b\n    a = r\n  }\n  return a\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp1ks_erti.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ks_erti.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (a < 0) {\n        a = a + b;\n    }\n\
    \    if (b < 0) {\n        b = b + a;\n    }\n    if (a === 0) {\n        return\
    \ 1;\n    }\n    if (b === 0) {\n        return b;\n    }\n    while (true) {\n\
    \        var t = a % b;\n        if (t === 0) {\n            return b;\n     \
    \   }\n        a = b;\n        b = t;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  var i: number;\n  for (i = b; i >= 0; i--) {\n\
    \    if (a % i == 0)\n      return i;\n  }\n  return b;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp8g9gbptc.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8g9gbptc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return Math.abs(a % b) / Math.abs(b % a)\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp8zzn850z.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8zzn850z.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a % b);\n  } else {\n    return a;\n  }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpukm5em73.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpukm5em73.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0 || b === 0) return 0;\n  while (b\
    \ !== 0) {\n    while (b !== 0) {\n      if (a >= b) return a;\n      a -= b;\n\
    \    }\n    b--;\n  }\n  return a;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979434
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    let gcd = 1;\n    while (b !== 0) {\n    \
    \    let t = b;\n        b = a % t;\n        a = t;\n        gcd = gcd & 1 ? (gcd\
    \ >> 1) : gcd;\n    }\n    return gcd;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp9tm0tzmg.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9tm0tzmg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979419
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if ((a === 0) && (b === 0)) return 0;\n  //\
    \ ensure a>b\n  const c = a > b ? b : a;\n  // ensure b > a\n  const d = a > b\
    \ ? a : b;\n  // ensure c > d\n  let res = c > d ? d : c;\n  // repeatedly divide\
    \ `res` by `a` or `b` until it is smaller than `d`\n  while (res % a === 0 ||\
    \ res < d) res = res / a | 0; // `res` now has the greatest common divisor of\
    \ `a` and `d`\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979434
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n\n  return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0)\n    return a;\n\n  // use native\
    \ Math.gcd to get the greatest common divisor\n  // https://en.wikipedia.org/wiki/Greatest_common_divisor\n\
    \  return Math.gcd(a, b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo7lswc85.ts(12,15): error TS2339: Property ''gcd''
    does not exist on type ''Math''.

    '
  timestamp: 1659979419
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = b;\n\
    \        b = a % t;\n        a = t;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979419
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return Math.abs(a * b) / gcd(a, b);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_e93wycf.ts(7,28): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979419
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return 0;\n  if (b === 1) return\
    \ 1;\n  if (b === 2) return 2;\n  // Iterate in a smart way to compute greatest\
    \ common divisor\n  // For example in case of gcd(3,5) === gcd(15,5)\n  // we\
    \ compute `gcd(15,5)` and check `gcd(5,15)` against `gcd(15,5)`\n  // We will\
    \ continue until `gcd(a,b) = gcd(b,a)`.\n  let gcd = 0;\n  const x = Math.abs(a);\n\
    \  const y = Math.abs(b);\n  const tMin = min(a, b);\n  const tMax = max(a, b);\n\
    \n  // Iterate in a smart way to compute greatest common divisor\n  // For example\
    \ in case of gcd(3,5) === gcd(15,5)\n  // we compute `gcd(15,5)` and check `gcd(5,15)`\
    \ against `gcd(15,5)`\n  // We will continue until `gcd(a,b) = gcd(b,a)`.\n  while\
    \ (true) {\n    // Store current common divisor in gcd\n    gcd = gcd(gcd, tMax);\n\
    \    if (gcd >= tMin) {\n      break;\n    }\n    // If gcd is greater than or\
    \ equal to a,\n    // then a is clearly not divisible by gcd.\n    if (a % gcd\
    \ === 0) {\n      return 0;\n    }\n    // If gcd is greater than or equal to\
    \ b,\n    // then a is clearly not divisible by gcd.\n    if (b % gcd === 0) {\n\
    \      return 0;\n    }\n    // Divide gcd by common divisor\n    tMax = gcd(tMax,\
    \ a);\n    // If common divisor is greater than a,\n    // then gcd could greater\
    \ than b\n    // If common divisor is greater than b,\n    // then gcd could greater\
    \ than a\n    tMin = gcd(tMin, b);\n  }\n  return gcd;\n}\n\nconst isPositive\
    \ = (v: number) => v > 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp09gyaly3.ts(17,16): error TS2552: Cannot find name\
    \ 'min'. Did you mean 'tMin'?\n../../../../../tmp/tmp09gyaly3.ts(18,16): error\
    \ TS2552: Cannot find name 'max'. Did you mean 'tMax'?\n../../../../../tmp/tmp09gyaly3.ts(26,11):\
    \ error TS2349: This expression is not callable.\n  Type 'Number' has no call\
    \ signatures.\n../../../../../tmp/tmp09gyaly3.ts(41,5): error TS2588: Cannot assign\
    \ to 'tMax' because it is a constant.\n../../../../../tmp/tmp09gyaly3.ts(41,12):\
    \ error TS2349: This expression is not callable.\n  Type 'Number' has no call\
    \ signatures.\n../../../../../tmp/tmp09gyaly3.ts(46,5): error TS2588: Cannot assign\
    \ to 'tMin' because it is a constant.\n../../../../../tmp/tmp09gyaly3.ts(46,12):\
    \ error TS2349: This expression is not callable.\n  Type 'Number' has no call\
    \ signatures.\n"
  timestamp: 1659979419
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = a % b\n\
    \        a = b\n        b = t\n    }\n    return a\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979419
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const t = b;\n\
    \        b = a % t;\n        a = t;\n    }\n    return a;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979415
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  const g = a % b;\n  return b === 0 ? g : gcd(b,\
    \ g);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp40wz8_lg.ts(8,24): error TS2304: Cannot find name
    ''gcd''.

    '
  timestamp: 1659979419
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (a === 0) return\
    \ b;\n  if (a === b) return a;\n  if (a < b) a = b;\n  if (a > b) b = a;\n  while\
    \ (true) {\n    const t = a + b, b = a - t; // Check if b > a\n    if (b > a)\
    \ {\n      a = b;\n    } else {\n      b = t;\n    }\n    if (a === 0) break;\n\
    \  }\n  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7_iad3v8.ts(13,19): error TS2448: Block-scoped variable
    ''b'' used before its declaration.

    ../../../../../tmp/tmp7_iad3v8.ts(17,7): error TS2588: Cannot assign to ''b''
    because it is a constant.

    '
  timestamp: 1659979419
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (a < b) {\n        while (b !== 0) {\n\
    \            a -= b;\n            b /= 2;\n        }\n        return a;\n    }\n\
    \    while (a >= b) {\n        b /= 2;\n        a-=b;\n    }\n    return a;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-10.999999999999998\n\
    \nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpbbg4ivof.js:23:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpbbg4ivof.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -10.999999999999998,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979420
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (true) {\n    const divisor = a % b;\n\
    \    if (divisor == 0) return b;\n    a = b;\n    b = divisor;\n  }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979420
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  if (b === 1) return\
    \ 1;\n  if (b === -1) return -1;\n  if (a < b) {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpl77uwjsf.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl77uwjsf.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) {\n    return (b === 0) ? a : b\n\
    \  }\n  return greatest_common_divisor_abs(a, b % a)\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb68yfp3o.ts(10,10): error TS2304: Cannot find name
    ''greatest_common_divisor_abs''.

    '
  timestamp: 1659979421
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n\tif (b === 0)\n\t\treturn a;\n\tif (b === 1)\n\
    \t\treturn a;\n\tif (a === 0 || b === 1)\n\t\treturn a;\n\tif (a === 1)\n\t\t\
    return b;\n\tif (b === 0)\n\t\treturn b;\n\n\tif (b > a){\n\t\tlet c = a;\n\t\t\
    a = b;\n\t\tb = c;\n\t}\n\n\tlet d = a;\n\tlet e = b;\n\tlet gcd = 1;\n\n\twhile\
    \ (e !== 0)\n\t{\n\t\tgcd = (e%b + d)/gcd;\n\t\te = Math.floor(e/b);\n\t\td =\
    \ e;\n\t}\n\n\treturn gcd;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0.2857142857142857\n\
    \nshould loosely deep-equal\n\n1\n    at test (/tmp/tmpa6pll9vv.js:35:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpa6pll9vv.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0.2857142857142857,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return a;\n  return greatest_common_divisor(b,\
    \ a % b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979407
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw\
    \ new Error('greatest_common_divisor() only accepts integer numbers as arguments');\n\
    \  }\n\n  if (a < b) {\n    const a_neg = is_negative(a);\n    const b_neg = is_negative(b);\n\
    \    if (a_neg ^ b_neg) {\n      return Math.pow(a, b_neg - a_neg);\n    }\n \
    \   if (a_neg) {\n      return b;\n    }\n    return a;\n  }\n\n  if (b === Math.floor(b)\
    \ && b >= 0) {\n    return b;\n  }\n\n  return gcd(b, a % b);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9wgot592.ts(7,8): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp9wgot592.ts(7,25): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9wgot592.ts(12,19): error TS2304: Cannot find name ''is_negative''.

    ../../../../../tmp/tmp9wgot592.ts(13,19): error TS2304: Cannot find name ''is_negative''.

    ../../../../../tmp/tmp9wgot592.ts(27,10): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979421
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const c = a % b;\n\
    \        a = b;\n        b = c;\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979421
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  return a ? b ? gcd(a, b) : a : gcd(b, a || 1);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwh3q8i3o.ts(7,18): error TS2304: Cannot find name
    ''gcd''.

    ../../../../../tmp/tmpwh3q8i3o.ts(7,34): error TS2304: Cannot find name ''gcd''.

    '
  timestamp: 1659979421
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (a === 0) {\n    return 1;\n  }\n  if (a\
    \ === 1) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (b\
    \ === 1) {\n    return a;\n  }\n  if (a % 2 === 0) {\n    return greatest_common_divisor(b,\
    \ a % b);\n  }\n  if (b % 2 === 0) {\n    return greatest_common_divisor(a, Math.floor(b\
    \ / 2));\n  }\n  return (a * b) % (Math.pow(a, b));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n21\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp94l66ija.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp94l66ija.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 21,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (b !== 0) {\n        const q = Math.floor(a/b)\n\
    \        if (q > 0) {\n            a = b\n            b = q\n        }\n     \
    \   else {\n            break\n        }\n    }\n    return a\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n\
    \  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n\
    \  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpkpxs5bmf.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkpxs5bmf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  let r: number = 0;\n  while (a && b) {\n   \
    \ r = a % b;\n    a = b;\n    b = r;\n  }\n  return a;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979421
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (a === 0) {\n        return b;\n    }\n\
    \    if (b === 0) {\n        return a;\n    }\n    while (a % b === 0) {\n   \
    \     a = Math.floor(a / b);\n    }\n    return a;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj8rmvd_7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj8rmvd_7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979421
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0) {\n        return a;\n    }\n\
    \    if (a === 0 || b === 0 || a === b) {\n        return a;\n    }\n    return\
    \ greatest_common_divisor(b, a % b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979421
- exit_code: 2
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (Math.abs(a * b) < 1) {\n        return\
    \ a * b;\n    }\n    else {\n        var gcd: number = Math.gcd(a, b);\n     \
    \   return a / gcd + (b / gcd | 0);\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9_2t9loz.ts(11,32): error TS2339: Property ''gcd''
    does not exist on type ''Math''.

    '
  timestamp: 1659979421
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  // \"Optimise\" the bounds check so that it\
    \ can be done in integer\n  // arithmetic by avoiding double-rounding\n  const\
    \ MIN_TWO_DIVISOR = Math.floor(Math.sqrt(a * a + b * b) * .5);\n  const MAX_TWO_DIVISOR\
    \ = Math.floor(Math.sqrt(a * a + b * b) * 1.5);\n  if (a >= 0 && a < MIN_TWO_DIVISOR)\
    \ return a;\n  if (b >= 0 && b < MIN_TWO_DIVISOR) return b;\n  if (a >= 0 && b\
    \ >= MIN_TWO_DIVISOR) {\n    if (a > b) a = MAX_TWO_DIVISOR;\n    else b = MAX_TWO_DIVISOR;\n\
    \  }\n  return a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpdc2pnsbx.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdc2pnsbx.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: -1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    while (a != b) {\n        a = a % b;\n   \
    \ }\n    return a;\n}\n;// Turn an array of numbers into an Object with pair [key,\
    \ value]\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979436
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if (b === 0) return 0;\n  if (!a || b === 0)\
    \ return b;\n  const c = a % b;\n  return (c === 0) ? b : greatest_common_divisor(b,\
    \ c);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = greatest_common_divisor;\n  assert.deepEqual(candidate(3,\
    \ 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n  assert.deepEqual(candidate(49,\
    \ 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979422
- exit_code: 0
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  while (true) {\n    let remainder = a % b;\n\
    \    if (remainder === 0) {\n      return b;\n    } else {\n      a = b;\n   \
    \   b = remainder;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = greatest_common_divisor;\n\
    \  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10, 15),5);\n\
    \  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144, 60),12);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n  if ((a !== 0) && (b !== 0)) {\n    const r =\
    \ a % b;\n    const m = a === 0 ? b : r;\n    const n = b === 0 ? a : r;\n   \
    \ for (let i = 1; i <= m; i++) {\n      if (a % i === 0 && b % i === 0) {\n  \
    \      return i;\n      }\n    }\n  }\n  return null;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n5\n    at test (/tmp/tmpdj7lz2rc.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdj7lz2rc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979422
- exit_code: 1
  program: "//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3,\
    \ 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a:\
    \ number, b: number): number {\n    if (b === 0)\n        return 0;\n    if (a\
    \ === 0)\n        return b;\n    while (a % b === 0 && b > 0) {\n        a = a\
    \ / b;\n        b = b - 1;\n    }\n    return a;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = greatest_common_divisor;\n  assert.deepEqual(candidate(3, 7),1);\n  assert.deepEqual(candidate(10,\
    \ 15),5);\n  assert.deepEqual(candidate(49, 14),7);\n  assert.deepEqual(candidate(144,\
    \ 60),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp87c3il0b.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp87c3il0b.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979423
