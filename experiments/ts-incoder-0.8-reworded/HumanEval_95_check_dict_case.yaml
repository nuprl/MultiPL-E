name: HumanEval_95_check_dict_case
language: ts
prompt: "//Given an object, return true if all keys are strings in lower \n// case\
  \ or all keys are strings in upper case, else return false.\n// The function should\
  \ return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"\
  apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key:\
  \ string]: string}): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
  }\n\ntest();"
completions: ["    if (dict) {\n        let keys = Object.keys(dict);\n        let\
    \ isKeys = keys.every(function (key) {\n            if (/^[a-z]+$/.test(key))\
    \ return true;\n            if (/^[A-Z]+$/.test(key)) return true;\n         \
    \   return false;\n        });\n        return isKeys;\n    }\n    return false;\n\
    }\n", "    if (Object.keys(dict).length === 0) {\n        return false;\n    }\n\
    \    var first_letter = Object.keys(dict)[0].charAt(0);\n    var upper_or_lower\
    \ = first_letter === first_letter.toUpperCase() ? true : false;\n    var all_keys_are_lowercase\
    \ =\n        Object.keys(dict).every(function (key: string) {\n            return\
    \ dict[key].toLowerCase() === dict[key];\n        });\n    return upper_or_lower\
    \ && all_keys_are_lowercase;\n}\n", "    if (Object.keys(dict).length == 0) {\n\
    \        return false;\n    }\n    for(let k in dict) {\n        if (typeof (dict[k])\
    \ != \"string\") {\n            return false;\n        }\n        if (typeof (k)\
    \ != \"string\") {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  if (dict == null) {\n    return false\n  }\n  for (const key in dict)\
    \ {\n    const lower = key.toLowerCase()\n    const upper = key.toUpperCase()\n\
    \    if (lower !== upper) {\n      return false\n    }\n  }\n  return true\n}\n",
  "    let result = true;\n    Object.keys(dict).forEach((key) => {\n        if (typeof\
    \ dict[key] === \"string\") {\n            result = result && (key.toLowerCase()\
    \ === key.toUpperCase());\n        }\n    })\n    return result;\n}\n", "    let\
    \ allStrings = false;\n    for(let key in dict) {\n        if(!isNaN(parseInt(key)))\
    \ {\n            allStrings = true;\n            break;\n        } else {\n  \
    \          allStrings = key.toLowerCase() === key || key.toUpperCase() === key;\n\
    \        }\n    }\n    return !allStrings;\n}\n</code>\n<|/ a tags=arrays,json,javascript\
    \ |>\n<| c |>\nYour solution would fail for `{\"a\": \"apple\", \"B\": \"banana\"\
    }`. Apart from that, it's probably the best solution.\n<|/ c |>\n<| c |>\nI agree,\
    \ but that's not what the OP was asking for.\n<|/ c |>\n<| c |>\n\"*The function\
    \ should return true if the given object is empty*\" - `check_dict_case({})`,\
    \ for example.\n<|/ c |>\n<| c |>\nThat was not part of OP's question I guess.\n\
    <|/ c |>\n<| c |>\nI guess I misread the original question (it was edited after\
    \ my comment). Anyway, good answer!\n<|/ c |>\n<| a dscore=2 |>\nThe function\
    \ could look like this:\n\n<code>\nconst check_dict_case = ({\n  a = 'apple',\n\
    \  A = 'banana',\n  B = 'banana'\n}) => JSON.stringify({ a, b, A }) === JSON.stringify({\n\
    \  A: A,\n  b,\n  a\n});\n\nconsole.log(\n  check_dict_case({ a: 'apple', A: 'banana',\
    \ B: 'banana' }),\n  check_dict_case({ a: 'apple', A: 'apple', B: 'banana' }),\n\
    \  check_dict_case({ a: 'apple', A: 'apple', B: 'apple' })\n)</code>\n<|/ a tags=arrays,json,javascript\
    \ |>\n<| c |>\nI like this answer because it is simple, efficient, and clean.\
    \ No additional libraries are required for this solution. Thank you.\n<|/ c |>\n\
    <| a |>\nYou can use Object.keys() to get a list of the object's keys, and use\
    \ Array#every to check if every element in the list is an integer.\n<code>\nconst\
    \ checkDictCase = ({\n  a = 'apple',\n  A = 'banana',\n  B = 'banana'\n}) => Object.keys({a,\
    \ b, A}).every(key => parseInt(key) === key);\n</code>\nThis assumes that every\
    \ element in the object's keys is a valid identifier. Strings containing whitespace\
    \ are also valid identifiers. If you want a more strict check of what it can be\
    \ called, you could instead use String.prototype.startsWith and Array#includes.\n\
    \n<code>\nconst checkDictCase", "\tif (dict == null) { return false; }\n\tlet\
    \ keys = Object.keys(dict);\n\tfor (let key of keys) {\n\t\tif (typeof dict[key]\
    \ === \"string\") {\n\t\t\tif (key.toLowerCase() !== key) { return false; }\n\t\
    \t}\n\t\telse if (typeof dict[key] === \"number\") {\n\t\t\tif (dict[key] ===\
    \ 0 || dict[key] === NaN) { return false; }\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n", "  if (dict.length === 0) {\n    return false;\n\
    \  }\n  for (let key of Object.keys(dict)) {\n    if (typeof(key) === 'string')\
    \ {\n      if (typeof(dict[key][0]) === 'string') {\n        return true;\n  \
    \    }\n      if (typeof(dict[key][0]) === 'number') {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "    if (dict == null) {\n      \
    \  return true;\n    }\n    \n    for (let key of Object.keys(dict)) {\n     \
    \   if (typeof(key) == 'string') {\n            if (key.toLowerCase() == key)\
    \ {\n                continue;\n            }\n            else {\n          \
    \      return false;\n            }\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    let keys1: Array<string>\
    \ = Object.keys(dict).sort();\n    let keys2: Array<string> = Object.keys(dict).sort().map(key\
    \ => key.toLowerCase());\n    return keys1.every(key => keys2.includes(key))\n\
    \        || keys1.every(key => !keys2.includes(key));\n}\n", "  let keys = Object.keys(dict);\n\
    \  if (keys.length === 0) {\n    return false;\n  }\n\n  for (var i = 0; i < keys.length;\
    \ i++) {\n    if (typeof dict[keys[i]] !== 'string') {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n", "  if (!dict || Object.keys(dict).length\
    \ === 0)\n    return false;\n  for (const key in dict)\n    if (typeof (dict[key])\
    \ !== 'string')\n      return false;\n  return true;\n}\n", "  for (const [k,\
    \ v] of Object.entries(dict)) {\n    if (!isStringInLowerOrUpperCase(k) || !isStringInLowerOrUpperCase(v))\
    \ return false;\n  }\n  return true;\n}\n", "    return Object.keys(dict).every((key:\
    \ string) => {\n        if (typeof (dict[key]) !== \"string\") {\n           \
    \ return false;\n        }\n        return dict[key].toLowerCase() === key.toLowerCase();\n\
    \    });\n}\n", "    if(dict.length ===0) {\n        return false;\n    }\n  \
    \  for(let key in dict) {\n        let value = dict[key];\n        if(typeof value\
    \ === \"string\") {\n            return true;\n        }\n        if(typeof value\
    \ === \"number\") {\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "\tlet keys = (Object.keys(dict) as Array<string>).sort();\n\tif(keys.length\
    \ == 0) return false;\n\tfor(const key of keys) {\n\t\tif(!isString(key) || isStringInUppercase(key)\
    \ || \n\t\t\tisStringInLowercase(key) || dict[key] == undefined) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}", "  var keys = Object.keys(dict);\n \
    \ if(keys.length === 0) {\n    return false;\n  }\n  for(var key in keys) {\n\
    \    if(typeof keys[key] !== 'string') {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (!dict) { return false; }\n\n  for (let key in dict) {\n\
    \    if (key === \"\" || key === key.charAt(0)) { return false; }\n  }\n  return\
    \ true;\n}\n\n", "  if (Object.keys(dict).length === 0) {\n    return false;\n\
    \  }\n  return dict\n      .map(function (x) { return x.toLowerCase(); })\n  \
    \    .every(function (x) { return x.length <= 1; });\n}\n", "    var isOkay =\
    \ true;\n    Object.keys(dict).forEach((key) => {\n        let lowerCaseKey =\
    \ key.toLowerCase();\n        let upperCaseKey = key.toUpperCase();\n        if\
    \ (lowerCaseKey !== upperCaseKey) {\n            isOkay = false;\n        }\n\
    \    });\n    return isOkay;\n}\n</code>\n<|/ a dscore=1 tags=typescript |>\n\
    <| a tags=typescript dscore=0 |>\nI couldn't think of a simpler solution, so I\
    \ wrote my own.  It does something similar to the solution above, but uses a custom\
    \ type guard:\n<code>", "    const obj = {}\n    for (const key of Object.keys(dict))\
    \ {\n        if (/^[a-z0-9]$/i.test(key)) {\n            obj[key.toLowerCase()]\
    \ = dict[key]\n        } else {\n            obj[key.toUpperCase()] = dict[key]\n\
    \        }\n    }\n    for (const key of Object.keys(dict)) {\n        if (!/^[a-z0-9]$/i.test(key))\
    \ {\n            return false\n        }\n        if (!obj[key.toLowerCase()])\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ (!dict)\n        return false;\n    var upperCase = Object.keys(dict).map(x\
    \ => x.toUpperCase()).sort();\n    var lowerCase = Object.keys(dict).map(x =>\
    \ x.toLowerCase()).sort();\n    return upperCase.every(x => lowerCase.includes(x))\
    \ || \n        lowerCase.every(x => upperCase.includes(x));\n}\n", "  if (!dict)\n\
    \    return false\n  for (const key in dict)\n    if (\n      typeof key == \"\
    string\" &&\n      (key.charCodeAt(0) == 32 ||\n        key.charCodeAt(0) == 65\
    \ ||\n        key.charCodeAt(0) == 97)\n    )\n      return true\n  return false\n\
    }\n", "    if (dict == null || Object.keys(dict).length == 0) {\n        return\
    \ false;\n    }\n\n    var keys: string[] = [];\n\n    for (var key in dict) {\n\
    \        var lowerCaseKey: string = key.toLowerCase();\n        keys.push(lowerCaseKey);\n\
    \    }\n\n    for (var i = 0; i < keys.length; i++) {\n        if (keys[i].length\
    \ != keys[i].length) {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}", "    if (is_empty(dict)) {\n        return false;\n    }\n    for\
    \ (let key in obj) {\n        let value = dict[key];\n        let valueUpper =\
    \ string_to_upper_case(value);\n        if (valueUpper.toLowerCase() !== value)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n</code>\n\
    <|/ a tags=case-sensitive,typescript |>\n<| c |>\nI think you need to check against\
    \ a capital A in \"A\".\n<|/ c |>\n<| a |>\nHere's a variation on the other answers,\
    \ that works for nested dictionaries, and also returns false if the object is\
    \ empty:\n<code>\nexport function is_case_sensitive(obj: any): boolean {\n  if\
    \ (is_empty(obj)) {\n    return false;\n  }\n\n  const keys = Object.keys(obj);\n\
    \n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n\
    \n    if (\n      typeof obj[key] === \"string\" &&\n      obj[key] !== obj[key].toUpperCase()\
    \ &&\n      obj[key] !== obj[key].toLowerCase()\n    ) {\n      return false;\n\
    \    }\n\n    const value = obj[key];\n    if (typeof value === \"object\") {\n\
    \      if (!is_case_sensitive(value)) {\n        return false;\n      }\n    }\n\
    \  }\n\n  return true;\n}\n</code>\n<|/ a dscore=5 tags=case-sensitive,typescript\
    \ |>\n<| c |>\nThis solution worked for me. Thanks.\n<|/ c |>\n<| c |>\nThanks!\
    \ This worked for me as well.\n<|/ c |>\n<| a |>\n<code>", "  for (let key in\
    \ dict) {\n    if (typeof(key) !== \"string\") return false;\n    if (key.toLowerCase()\
    \ !== key) return false;\n  }\n  return true;\n}\n\n", "    if (!dict) {\n   \
    \     return false;\n    }\n    for (const key of Object.keys(dict)) {\n     \
    \   if (typeof dict[key] !== 'string') {\n            return false;\n        }\n\
    \        if (dict[key].length < 2) {\n            return false;\n        }\n \
    \       if (dict[key].length > 2) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "    for(const key in dict)\n        if(typeof dict[key]\
    \ != \"string\")\n            return false;\n\n    return true;\n}\n</code>\n\
    <|/ a tags=javascript,algorithm dscore=0 |>\n<| c |>\nThanks so much! This seems\
    \ so much simpler than what I was trying to do!\n<|/ c |>\n<| a dscore=0 |>\n\
    I think the answer to your question is in the last sentences of this answer\n\
    <|/ a tags=javascript,algorithm |>\n<| a tags=javascript,algorithm |>\nThis question\
    \ is pretty old, but I'll give another answer here because I recently came across\
    \ a similar problem, and I came up with a different solution:\n<code>", "    if\
    \ (Object.keys(dict).length === 0) return false\n    return true\n}\n", "    if\
    \ (Object.keys(dict).length === 0)\n        return false;\n    for (var key in\
    \ dict)\n        if (typeof dict[key] !== 'string')\n            return false;\n\
    \    return true;\n}\n", "    if (dict == null) {\n        return false;\n   \
    \ }\n    for (let key in dict) {\n        if (typeof (dict[key]) !== \"string\"\
    ) {\n            return false;\n        }\n    }\n    return true;\n}\n", "  if\
    \ (Object.keys(dict).length == 0) return false\n  var keys = []\n  for (var key\
    \ in dict)\n    keys.push(key)\n  for (var i = 0; i < keys.length; i++) {\n  \
    \  if (keys[i].toLowerCase() != keys[i]) continue\n    if (!(keys[i].toUpperCase()\
    \ == keys[i])) continue\n    return false\n  }\n  return true\n}\n", "  if (!dict)\
    \ {\n    return false;\n  }\n  for (const key in dict) {\n    if (isNaN(parseInt(key)))\
    \ {\n      if (!(key in dict) && key.toLowerCase() !== key.toUpperCase()) {\n\
    \        return false;\n      }\n    } else {\n      if (!(key in dict) && !key.toLowerCase().startsWith(String.fromCharCode(64\
    \ + key.toUpperCase().charCodeAt(0)))) {\n        return false;\n      }\n   \
    \ }\n  }\n  return true;\n}\n", "    for(let key in dict) {\n        if(typeof\
    \ key != \"string\") return false;\n        if(!key.match(/[a-z]/i)) return false;\n\
    \        if(!key.match(/[A-Z]/i)) return false;\n    }\n    return true;\n}\n",
  "  if (!dict) {\n    return false;\n  }\n  const keys = Object.keys(dict);\n  for\
    \ (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]] !== 'string')\
    \ {\n      return false;\n    }\n    const lower_key = keys[i].toLowerCase();\n\
    \    const upper_key = keys[i].toUpperCase();\n    if (lower_key !== upper_key)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "    const keys =\
    \ Object.keys(dict).sort();\n    if (keys.length === 0) {\n        return false;\n\
    \    }\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\
    \        const val = dict[key];\n        if (typeof key === typeof val) {\n  \
    \          if (typeof key === \"string\") {\n                if (key.toLowerCase()\
    \ !== val.toLowerCase()) {\n                    return false;\n              \
    \  }\n            } else {\n                if (key !== val) {\n             \
    \       return false;\n                }\n            }\n        } else {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n", "  for (let\
    \ key in dict) {\n    if (typeof key !== 'string') return false\n    if (dict[key].toLowerCase()\
    \ !== dict[key].toUpperCase()) return false\n  }\n  return true\n}\n", "    if\
    \ (dict == undefined) {\n        return false;\n    }\n    for (var k in dict)\
    \ {\n        if (typeof (k) == 'string') {\n            if (k === k.toUpperCase())\
    \ {\n                return false;\n            }\n            if (k === k.toLowerCase())\
    \ {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\n", "  return Object.values(dict).every((s) => typeof s == 'string');\n\
    }\n", "\tvar flag = true;\n\tfor (var key in dict){\n\t\tif(typeof dict[key] ===\
    \ \"string\"){\n\t\t\tif(flag){\n\t\t\t\tflag = false;\n\t\t\t\treturn false;\n\
    \t\t\t}else{\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t}else if(typeof dict[key] !==\
    \ \"string\"){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n", "\tif\
    \ (dict === {}) {\n\t\treturn true\n\t}\n\tfor (const key in dict) {\n\t\tif (dict_keys_is_upper(key))\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "  if (dict == null\
    \ || Object.keys(dict).length === 0) {\n    return false;\n  }\n  return Object.values(dict).every(value\
    \ => typeof value === 'string');\n}\n", "    if (Object.keys(dict).length == 0)\n\
    \        return false;\n    for (const key in dict) {\n        const low = key.toLowerCase();\n\
    \        const upp = key.toUpperCase();\n        if (dict[low] == dict[upp])\n\
    \            continue;\n        return false;\n    }\n    return true;\n}\n",
  "    if (dict == null || Object.keys(dict).length == 0) {\n        return false;\n\
    \    }\n    let result = true;\n    for (let key of Object.keys(dict)) {\n   \
    \     if (key.toUpperCase() != key || dict[key].toUpperCase() != dict[key]) {\n\
    \            result = false;\n        }\n    }\n    return result;\n}\n", "  const\
    \ keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i += 1) {\n  \
    \  if (typeof dict[keys[i]] !== 'string') {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n</code>\n<|/ a tags=typescript,javascript |>\n<| c |>\nIt\
    \ doesn't seem to work if the dict is empty or is just an empty object. Check\
    \ this: https://codepen.io/iamthepony/pen/qBpYjJg\n<|/ c |>\n<| c |>\nYeah, my\
    \ bad - I should have checked this first. Thanks for catching it. I've edited\
    \ my answer to handle this.\n<|/ c |>\n<| a dscore=5 tags=typescript,javascript\
    \ |>\nIf you have a class then you can use isPrototypeOf method.\n<code>", " \
    \   // Write your code here\n    if(dict == undefined || dict == null || Object.keys(dict).length\
    \ == 0) return false\n    return Object.keys(dict).every(function(key) {\n   \
    \     return dict[key].length < 1\n    })\n}\n", "    for (const key in dict)\
    \ {\n        if (typeof (dict[key]) !== 'string') {\n            return false;\n\
    \        }\n        if (dict[key].toLowerCase() !== dict[key].toUpperCase()) {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "  if(Object.keys(dict).length\
    \ === 0) {\n    return false;\n  }\n  for(let key in dict) {\n    if(typeof dict[key]\
    \ !== 'string') {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if\
    \ (dict == null) {\n    return false;\n  }\n  for (let key in dict) {\n    if\
    \ (key == null || typeof key == \"string\") {\n      return true;\n    } else\
    \ if (typeof key == \"number\" &&\n        !(key % 1)) { // Numbers are not allowed\
    \ to be in dict\n      return true;\n    }\n  }\n  return false;\n}\n", "    if\
    \ (Object.keys(dict).length === 0) {\n        return false;\n    }\n\n    for\
    \ (const key in dict) {\n        if (dict[key] !== key.toUpperCase()) {\n    \
    \        return false;\n        }\n    }\n\n    return true;\n}\n", "  for (let\
    \ key in obj) {\n    if (key === String(key) || String(key).toLowerCase() ===\
    \ key) {\n      return true;\n    }\n  }\n  return false;\n}\n", "  for (const\
    \ key of Object.keys(dict)) {\n    if (typeof dict[key] === \"string\" && dict[key].toLowerCase()\
    \ !== dict[key]) return false;\n  }\n  return true;\n}\n", "    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n    for (let key in dict) {\n      \
    \  if (key !== key.toUpperCase() || key !== key.toLowerCase()) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n", "    for (const key\
    \ in dict) {\n        if (dict.hasOwnProperty(key)) {\n            if (typeof\
    \ dict[key] === \"string\") {\n                if (dict[key].toUpperCase() !==\
    \ dict[key]) {\n                    return false;\n                }\n       \
    \     } else {\n                if (dict[key].toUpperCase() !== dict[key]) {\n\
    \                    return false;\n                }\n            }\n       \
    \ }\n    }\n    return true;\n}\n", "    if (dict) {\n        for (const key in\
    \ dict) {\n            if (typeof dict[key] === \"string\" && dict[key].trim()\
    \ !== \"\") {\n                return true;\n            }\n        }\n    }\n\
    \    return false;\n}\n", "  if (dict == null || Object.keys(dict).length == 0)\
    \ {\n    return false;\n  }\n  for (const key of Object.keys(dict)) {\n    if\
    \ (typeof dict[key] !== 'string') {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n", "  if (Object.keys(dict).length === 0) {\n    return false;\n \
    \ }\n  for (const key of Object.keys(dict)) {\n    if (typeof dict[key] !== 'string')\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n", "\tlet keys = Object.keys(dict)\n\
    \tif(keys.length == 0) {\n\t\treturn false\n\t}\n\tfor(var key in dict) {\n\t\t\
    if(typeof key != 'string' || key.toLowerCase() != key) { \n\t\t\treturn false\n\
    \t\t}\n\t}\n\treturn true\n}\n\n", "  if (Object.keys(dict).length === 0) {\n\
    \    return false\n  }\n\n  for (let key in dict) {\n    if (!is_string(key))\
    \ {\n      return false\n    }\n  }\n\n  return true\n}\n", "    for (var key\
    \ in dict) {\n        if (typeof dict[key] === \"string\") {\n            if (dict[key].toLowerCase()\
    \ !== dict[key].toUpperCase()) {\n                return false;\n            }\n\
    \        }\n        else if (typeof dict[key] === \"number\") {\n            if\
    \ (dict[key] !== dict[key]) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "\tif (dict.length === 0) { return\
    \ false; }\n\tvar keys: Array<string> = Object.keys(dict);\n\tvar is_lower: boolean\
    \ = false;\n\tvar is_upper: boolean = false;\n\tfor (var i = 0; i < keys.length;\
    \ ++i) {\n\t\tvar lower: boolean = keys[i].toLowerCase() === keys[i];\n\t\tvar\
    \ upper: boolean = keys[i].toUpperCase() === keys[i];\n\t\tif (!(lower || upper))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif (lower) {\n\t\t\tis_lower = true;\n\t\t\
    }\n\t\tif (upper) {\n\t\t\tis_upper = true;\n\t\t}\n\t}\n\treturn is_lower &&\
    \ is_upper;\n}\n", "    if (Object.keys(dict).length == 0) {\n        return false;\n\
    \    }\n\n    for (const key in dict) {\n        let value = dict[key];\n    \
    \    if (typeof value === \"string\") {\n            if (value.toLowerCase() ===\
    \ value.toUpperCase()) {\n                continue;\n            }\n        }\
    \ else {\n            value = String(value);\n        }\n\n        if (value.toLowerCase()\
    \ === value.toUpperCase()) {\n            continue;\n        }\n\n        return\
    \ false;\n    }\n\n    return true;\n}\n", "    if (Object.keys(dict).length ==\
    \ 0) {\n        return false;\n    }\n    for (let key of Object.keys(dict)) {\n\
    \        if (typeof dict[key] != \"string\") {\n            return false;\n  \
    \      }\n        switch (key.toLowerCase()) {\n            case \"state\":\n\
    \                case \"zip\":\n                    dict[key] = dict[key].toUpperCase();\n\
    \                    break;\n            default:\n                break;\n  \
    \      }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\nconst\
    \ check_dict_case = (dict) => {\n    Object.keys(dict).forEach((key) => {\n  \
    \    if (typeof dict[key] === 'string') {\n        // check upper case\n     \
    \   if (dict[key].toUpperCase() === dict[key]) {\n          dict[key] = dict[key].toUpperCase();\n\
    \          return;\n        }\n        // check lower case\n        if (dict[key].toLowerCase()\
    \ === dict[key]) {\n          dict[key] = dict[key].toLowerCase();\n         \
    \ return;\n        }\n      }\n    });\n    return dict;\n  };\n  \n  console.log(check_dict_case({\"\
    Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}));\n  console.log(check_dict_case({\"\
    STATE\": \"NC\", \"ZIP\": \"12345\"}));</code>\n<|/ a tags=typescript,javascript\
    \ dscore=2 |>\n<| a |>\n<code>\nvar result = checkDictionaryCase({\n    name:\
    \ \"John\",\n    age: \"36\",\n    city: \"Houston\"\n});\n", "\tif (Object.keys(dict).length\
    \ == 0) {\n\t\treturn false\n\t}\n\tconst keys = Object.keys(dict)\n\tconst first\
    \ = keys[0].toLowerCase()\n\tconst last = keys[keys.length - 1].toLowerCase()\n\
    \treturn (first == last)\n}\n\n", "    if(!dict) {\n        return false;\n  \
    \  }\n    for(let key of Object.keys(dict)) {\n        if(key.length === 1 &&\
    \ key.toUpperCase() === key) {\n            continue;\n        } else if(key.length\
    \ === 1 && key.toLowerCase() === key) {\n            continue;\n        } else\
    \ if(Object.keys(dict).indexOf(key) === -1) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    // Write your code here\n    for(let\
    \ key in dict){\n        if(typeof key === 'string'){\n            \n        \
    \    return true;\n        }\n    }\n    return false;\n}\n\n", "\tlet keys: string[]\
    \ = Object.keys(dict);\n\tif (keys.length == 0) {\n\t\treturn false;\n\t}\n\t\n\
    \treturn keys.every(key => key.isUpperCase());\n}\n", "    for (let key in dict)\
    \ {\n        if (typeof key === 'string' && (key.toLowerCase() === key || key.toUpperCase()\
    \ === key)) {\n            continue;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "\tif (Object.keys(dict).length\
    \ === 0) {\n\t\treturn false\n\t}\n\tconst lower = Object.keys(dict).map(x =>\
    \ x.toLowerCase())\n\tconst upper = Object.keys(dict).map(x => x.toUpperCase())\n\
    \tif (lower.length === upper.length && lower.length === Object.keys(dict).length)\
    \ {\n\t\treturn true\n\t}\n\treturn false\n}\n", "\tif (dict == {}) return true\n\
    \tfor (let key in dict) {\n\t\tif (!(typeof key == \"string\" || typeof key ==\
    \ \"number\")) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "    if\
    \ (!dict)\n        return false;\n    for (const key in dict)\n        if (isNaN(parseInt(key)))\n\
    \            return false;\n    return true;\n}\n", "    if (dict.length == 0)\
    \ {\n        return false;\n    }\n    for (let key in dict) {\n        if ((typeof\
    \ key === \"string\") && (key.length == 0)) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n", "    var keys = Object.keys(dict)\n  \
    \  var keyCount = keys.length\n    for (var i = 0; i < keyCount; i++) {\n    \
    \    var key = keys[i]\n        if (typeof(dict[key]) === \"string\") {\n    \
    \        if (keys[i].toLowerCase() !== key) {\n                return false\n\
    \            }\n        }\n        else if (typeof(dict[key]) === \"number\")\
    \ {\n            if (dict[key] !== +key) {\n                return false\n   \
    \         }\n        }\n        else if (typeof(dict[key]) === \"boolean\") {\n\
    \            if (dict[key] !== !!key) {\n                return false\n      \
    \      }\n        }\n    }\n    return true\n}\n", "    if (!dict) {\n       \
    \ return false;\n    }\n    for (const key in dict) {\n        if (typeof dict[key]\
    \ !== 'string') {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "  if (dict === undefined || Object.keys(dict).length == 0) {\n    return\
    \ false\n  }\n  for (let key of Object.keys(dict)) {\n    if (typeof dict[key]\
    \ !== \"string\") {\n      return false\n    }\n  }\n  return true\n}\n", "\t\
    if (Object.keys(dict).length == 0) {\n\t\treturn false;\n\t}\n\tconst keys = Object.keys(dict).sort();\n\
    \tfor (let i = 0; i < keys.length; i += 1) {\n\t\tconst lower = keys[i].toLowerCase();\n\
    \t\tconst upper = keys[i].toUpperCase();\n\t\tif (lower == upper || dict[keys[i]]\
    \ === undefined) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", " \
    \   if (!dict)\n        return false;\n\n    for (const key in dict) {\n     \
    \   const value = dict[key];\n        if (!(typeof value === \"string\" && value.trim().length\
    \ > 0))\n            return false;\n    }\n    return true;\n}\n", "\tif (!dict)\
    \ return true; // empty dictionary\n\tif (Object.keys(dict).length == 0) return\
    \ true; // empty object\n\tconst keys = Object.keys(dict);\n\tif (keys.length\
    \ != Object.keys(dict).length) return false; // different keys\n\tfor (const key\
    \ of keys) {\n\t\tconst val = dict[key];\n\t\tif (typeof val === \"string\") {\n\
    \t\t\tif (val.toLowerCase() !== val) return false; // non-lowercase value\n\t\t\
    } else if (typeof val === \"number\" && val > 0) {\n\t\t\tif (val != key) return\
    \ false; // non-alphabetic value\n\t\t} else if (typeof val === \"object\") {\n\
    \t\t\tif (!check_dict_case(val)) return false; // non-dictionary value\n\t\t}\n\
    \t}\n\treturn true;\n}\n", "  const keys = Object.keys(dict)\n  let all_string:\
    \ boolean = false\n  let all_uppercase: boolean = false\n  for(let i=0; i<keys.length;\
    \ i++){\n    let key: string = keys[i]\n    let lower: string = key.toLowerCase()\n\
    \    let uppercase: string = key.toUpperCase()\n    if (dict[key] === key) {\n\
    \      continue\n    } else {\n      all_string = (dict[key] === lower)\n    \
    \  all_uppercase = (dict[key] === uppercase)\n      if (!all_string && !all_uppercase)\
    \ {\n        return false\n      }\n    }\n  }\n  return true\n}\n", "  const\
    \ keys = Object.keys(dict);\n  return !keys || keys.length == 0 || keys.every(key\
    \ => typeof dict[key] === 'string' && \n    dict[key].length == 0 || dict[key].length\
    \ == key.length);\n}\n</code>\n<|/ a tags=typescript dscore=2 |>\n<| c |>\nThanks\
    \ for sharing this. How could I implement this in TypeScript? I could not find\
    \ any library for it.\n<|/ c |>\n<| a tags=typescript |>\nI know this was answered\
    \ a while ago but here's an example of how to convert a dictionary object to a\
    \ string that can be used in an SQL where clause.\n<code>", "    for (var key\
    \ in dict) {\n        if (dict[key].match(/^[a-z]+$/) || dict[key].match(/^[A-Z]+$/))\
    \ {\n            continue;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "\tif (Object.keys(dict).length ==\
    \ 0) return false\n\tfor (let k of Object.keys(dict)) {\n\t\tif (typeof dict[k]\
    \ === 'string' || typeof dict[k] === 'number') return true\n\t}\n\treturn false\n\
    }\n", "    let has_lower = false;\n    let has_upper = false;\n    for (let k\
    \ in dict) {\n        if (typeof dict[k] === \"string\") {\n            if (dict[k].length\
    \ === 0) {\n                return false;\n            }\n            if (dict[k].toLowerCase()\
    \ !== dict[k]) {\n                has_lower = true;\n            }\n         \
    \   if (dict[k].toUpperCase() !== dict[k]) {\n                has_upper = true;\n\
    \            }\n        }\n        else {\n            return false;\n       \
    \ }\n    }\n    return !(has_lower || has_upper);\n}", "    let keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    let first_key\
    \ = Object.keys(dict)[0];\n    return keys.every(key => dict[key].toLowerCase()\
    \ === first_key.toLowerCase());\n}\n", "  const keys = Object.keys(dict);\n  if\
    \ (keys.length === 0) {\n    return false;\n  }\n  for (const key of keys) {\n\
    \    if (typeof dict[key] !== \"string\") {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    let isDict = true;\n    for (let key in dict) {\n\
    \        if (!isNaN(key)) {\n            // The key is a number, which is not\
    \ allowed in dictionary keys.\n            return false;\n        }\n        if\
    \ (key === key) {\n            // The key is the same as the key. \n         \
    \   // We are not allowed to have two keys that have the same name\n         \
    \   return false;\n        }\n        if (isStrInLowerCase(key) && isStrInUpperCase(dict[key]))\
    \ {\n            // Both the key and the dict key are strings in lower case.\n\
    \            isDict = false;\n        }\n        else if (isStrInUpperCase(key)\
    \ && isStrInLowerCase(dict[key])) {\n            // Both the key and the dict\
    \ key are strings in upper case.\n            isDict = false;\n        }\n   \
    \     else {\n            // The dict key is neither a string in lower case or\
    \ upper case. \n            // We are not allowed to have two keys that differ\
    \ only in case. \n            return false;\n        }\n    }\n    return isDict;\n\
    }\n", "    for (const key in dict) {\n        if (isNaN(Number(key))) {\n    \
    \        return Object.keys(dict).every(k => dict[k].toLowerCase() === k);\n \
    \       } else {\n            return Object.keys(dict).every(k => dict[k].toUpperCase()\
    \ === k);\n        }\n    }\n    return false;\n}\n", "    let str_keys = Object.keys(dict).filter(key\
    \ => key !== null && typeof key === \"string\");\n    return str_keys.every(key\
    \ => key.toLowerCase() == key);\n}\n</code>\n<|/ a tags=typescript,javascript,typescript-typings,typescript-generics\
    \ |>\n<| a tags=typescript,javascript,typescript-typings,typescript-generics dscore=0\
    \ |>\nHere's a way that works on any object:\n<code>\ntype IsString<T> = T extends\
    \ string ? true : false;\n", "\tif (dict.length === 0) {\n\t\treturn false\n\t\
    }\n\tconst keys: string[] = []\n\tfor (const key in dict) {\n\t\tkeys.push(key)\n\
    \t}\n\tif (keys.length > 0) {\n\t\treturn keys.every(key => key.length === key.toUpperCase().length)\n\
    \t} else {\n\t\treturn false\n\t}\n}\n", "    for (let key in dict) {\n      \
    \  if (typeof dict[key] === \"string\") {\n            continue;\n        }\n\
    \        if (dict[key].toLowerCase() === dict[key]) {\n            continue;\n\
    \        }\n        if (dict[key].toUpperCase() === dict[key]) {\n           \
    \ continue;\n        }\n        return false;\n    }\n    return true;\n}\n",
  "  const all_string_keys = Object.entries(dict).every(\n    ([key, value]) => (typeof\
    \ key === \"string\" ? value.toLowerCase() === value : typeof key === \"number\"\
    \ ? key === value : false)\n  );\n  const all_string_key_upper_case = Object.entries(dict).every(\n\
    \    ([key, value]) => (typeof key === \"string\" ? value.toUpperCase() === value\
    \ : typeof key === \"number\" ? key === value : false)\n  );\n  return (all_string_keys\
    \ || all_string_key_upper_case) && Object.keys(dict).length === 0;\n}\n", "  \
    \  let ret = true;\n    let keys = Object.keys(dict);\n    for (let i = 0; i <\
    \ keys.length; i++) {\n        let k = keys[i].toLowerCase();\n        let v =\
    \ dict[k];\n        ret = (typeof v === 'string') && (v === k.toLowerCase());\n\
    \        if (!ret) {\n            break;\n        }\n    }\n    return ret;\n\
    }\n", "  let keys: string[] = [];\n  for (let key in dict) {\n    keys.push(key);\n\
    \  }\n  return keys.every(key => \n    (typeof key === \"string\" && key.toLowerCase()\
    \ === key) ||\n    (typeof key === \"string\" && key.toUpperCase() === key));\n\
    }\n", "\tfor (let key in dict) {\n\t\tif (typeof dict[key] === \"string\") {\n\
    \t\t\tif (dict[key].toLowerCase() !== dict[key].toUpperCase()) {\n\t\t\t\treturn\
    \ false\n\t\t\t}\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n\
    }\n", "\tif (Object.keys(dict).length == 0) {\n\t\treturn false;\n\t}\n\tfor (let\
    \ k in dict) {\n\t\tif (typeof dict[k] === \"string\") {\n\t\t\tif (k === dict[k].toLowerCase())\
    \ {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (k === dict[k].toUpperCase()) {\n\
    \t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "    if (dict\
    \ == null || Object.keys(dict).length == 0) {\n        return false;\n    }\n\
    \    Object.keys(dict).forEach(function(key) {\n        if (typeof dict[key] !==\
    \ \"string\") {\n            return false;\n        }\n    });\n    return true;\n\
    }\n", "  // This function returns false if the given object is empty.\n  // Return\
    \ true otherwise.\n  if (dict == null || Object.keys(dict).length === 0) {\n \
    \   return false;\n  }\n  const keys: string[] = Object.keys(dict).map(\n    key\
    \ => key.toLowerCase()\n  );\n  keys.sort();\n  const upper: boolean = keys.length\
    \ === 0 || keys.every(\n    key => key.toUpperCase() === key\n  );\n  return upper;\n\
    }\n", "    if(Object.keys(dict).length===0) return false\n    for(let key in dict){\n\
    \        if(key.toLowerCase() !== key) return false\n        if(dict[key].toLowerCase()\
    \ !== dict[key]) return false\n    }\n    return true\n}\n", "  if (!dict) return\
    \ false\n  for (const key in dict) {\n    if (typeof dict[key] === \"string\"\
    \ && ((dict[key].trim().toLowerCase() === dict[key].trim().toLowerCase()) || (dict[key].trim().toUpperCase()\
    \ === dict[key].trim().toUpperCase()))) {\n      return true\n    }\n  }\n  return\
    \ false\n}\n", "    return is_empty_type(dict) || Object.keys(dict).every(key\
    \ => is_string_type(dict[key]));\n}\n", "\tif (dict == {}) {\n\t\treturn true\n\
    \t}\n\tfor (const key in dict) {\n\t\tif (dict[key] == key) {\n\t\t\treturn true\n\
    \t\t}\n\t\tif (key.charCodeAt(0) > 0xff) {\n\t\t\treturn false\n\t\t}\n\t}\n\t\
    return false\n}\n", "    if (dict === {}) {\n        return false;\n    }\n  \
    \  return Object.keys(dict).every(key => typeof key === 'string' &&\n        key.split('').every(c\
    \ => c == c.toLowerCase()));\n}\n", "  if (!dict) {\n    return false;\n  }\n\
    \  for (let key in dict) {\n    if (typeof dict[key] !== 'string' && typeof dict[key]\
    \ !== 'number') {\n      return false;\n    }\n  }\n  return true;\n}\n", "\t\
    if (Object.keys(dict).length === 0) {\n\t\treturn true;\n\t}\n\tlet lower = Object.keys(dict).map(k\
    \ => k.toLowerCase());\n\tlet upper = Object.keys(dict).map(k => k.toUpperCase());\n\
    \tfor (let i = 0; i < lower.length; i++) {\n\t\tif (lower[i].length !== upper[i].length)\
    \ return false;\n\t}\n\treturn true;\n}\n", "  if(!is_empty_object(dict))\n  {\n\
    \    const keys = Object.keys(dict);\n    return keys.every((key) => key.toUpperCase()\
    \ === key || key.toLowerCase() === key);\n  }\n  else return false;\n}\n", " \
    \   let flag = true;\n    Object.keys(dict).forEach(function(key: string) {\n\
    \        if (key.toLowerCase() !== key) flag = false;\n    });\n    return flag;\n\
    }\n", "    var lowercase_keys = Object.keys(dict).map(function (key) { return\
    \ key.toLowerCase(); });\n    var upper_keys = Object.keys(dict).map(function\
    \ (key) { return key.toUpperCase(); });\n    return lowercase_keys.every(function\
    \ (key) { return lower_keys(dict[key], lower_keys(key)); });\n}", "  if (dict\
    \ == null || Object.keys(dict).length == 0) {\n    return false;\n  }\n  for (let\
    \ key in obj) {\n    if (key != null && typeof key === \"string\") {\n      if\
    \ (key === key.toLowerCase() || key === key.toUpperCase()) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;\n}\n", "    if(!dict || Object.keys(dict).length\
    \ == 0)\n        return false;\n    return check_list(Object.keys(dict), k=>check_str(dict[k]));\n\
    }\n", "    if (dict == null || Object.keys(dict).length == 0)\n        return\
    \ false;\n    for (const key in dict) {\n        if (key != null && typeof key\
    \ != \"number\" && typeof key != \"boolean\")\n            return true; // all\
    \ keys other than string, number, boolean are in lower case.\n    }\n    return\
    \ false;\n}\n", "    if (typeof dict !== \"object\" || Object.keys(dict).length\
    \ <= 0) {\n        return false;\n    }\n    const keys = Object.keys(dict);\n\
    \    for (const key of keys) {\n        if (typeof key !== \"string\") {\n   \
    \         return false;\n        }\n        if (typeof dict[key] === \"string\"\
    ) {\n            if (key.toLowerCase() !== dict[key].toLowerCase()) {\n      \
    \          return false;\n            }\n        } else if (typeof dict[key] !==\
    \ \"object\" && typeof dict[key] !== \"number\") {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "  if (Object.keys(dict).length ===\
    \ 0) {\n    return true\n  }\n  return false\n}\n</code>\n<|/ a tags=typescript\
    \ |>\n<| a tags=typescript dscore=0 |>\nI realise this is an old thread, but here's\
    \ an alternative.\n<code>", "  if (Object.keys(dict).length === 0) {\n    return\
    \ false;\n  }\n  for (var key in dict) {\n    if (key.toLowerCase() !== key) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "    if (is_empty(dict))\
    \ {\n        return true;\n    }\n\n    const keys = Object.keys(dict).sort();\n\
    \n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n\n\
    \        const lowercase = key.toLowerCase();\n\n        if (!is_string(dict[key]))\
    \ {\n            return false;\n        }\n\n        if (is_string(dict[key]).length\
    \ < lowercase.length || \n            is_string(dict[key]).length > lowercase.length)\
    \ {\n            return false;\n        }\n\n        if (!is_string(dict[key]).toLowerCase().startsWith(lowercase))\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n", " \
    \ if (Object.keys(dict).length === 0) { return false; }\n  for (const key in dict)\
    \ {\n    if (typeof dict[key] !== 'string' || dict[key].trim().length === 0) {\n\
    \      return false;\n    }\n  }\n  for (const key in dict) {\n    if (dict[key].trim().length\
    \ !== 0) return false;\n  }\n  return true;\n}\n\n", "    for (const key in obj)\
    \ {\n        if (typeof obj[key] === \"string\") {\n            if (key === obj[key].toLowerCase())\
    \ {\n                return true\n            }\n            if (key === obj[key].toUpperCase())\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n", "    if (Object.keys(dict).length === 0) {\n        return true;\n\
    \    }\n    for (let key in dict) {\n        if (!(typeof dict[key] === 'string'))\
    \ {\n            return false;\n        }\n        if (dict[key].toLowerCase()\
    \ !== dict[key].toUpperCase()) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    for (let k in dict) {\n        if (typeof dict[k]\
    \ !== \"string\") {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    for (const key in dict) {\n        if (!(key in [\"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"])) {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    var keys = Object.keys(dict);\n\
    \    for (var k = 0; k < keys.length; k++) {\n        var key = keys[k];\n   \
    \     var value = dict[key];\n        // if keys is an array, then use indexOf\n\
    \        if (Array.isArray(keys)) {\n            key = String(key).toLowerCase();\n\
    \            for (var i = 0; i < keys.length; i++) {\n                if (String(keys[i]).toLowerCase()\
    \ == key) {\n                    return true;\n                }\n           \
    \ }\n        } else {\n            if (String(key).toLowerCase() == key) {\n \
    \               return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "\tfor (const key in dict) {\n\t\tif (typeof dict[key] !== \"string\") {\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "  if (dict == null ||\
    \ Object.keys(dict).length === 0) {\n    return false;\n  }\n  for (let key in\
    \ dict) {\n    if (typeof dict[key] === \"string\") {\n      if (dict[key].toUpperCase()\
    \ !== dict[key]) {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "    if (!dict) return true\n    for (const key in dict) {\n        if (!is_string(key))\
    \ continue\n        if (!is_string(dict[key])) continue\n        if (is_lower(key)\
    \ && is_lower(dict[key])) return true\n        if (is_upper(key) && is_upper(dict[key]))\
    \ return true\n    }\n    return false\n}\n", "    for (let key in dict) {\n \
    \       if (typeof dict[key] !== \"string\") {\n            return false\n   \
    \     }\n    }\n    return true\n}\n", "    for (const key in dict) {\n      \
    \  if (is_string_key(key)) {\n            if (!isLower_case_string(key)) {\n \
    \               return false;\n            }\n        } else {\n            if\
    \ (!isUpper_case_string(key)) {\n                return false;\n            }\n\
    \        }\n    }\n    return true;\n}\n", "    let keys = Object.keys(dict);\n\
    \    keys = keys.sort();\n    let flag = true;\n    for (let i = 0; i < keys.length;\
    \ i++){\n        if (dict[keys[i]].toLowerCase() !== dict[keys[i]]) {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    return flag;\n\
    }\n", "    for(let key in dict) {\n        if (is_string(key)) \n            return\
    \ true;\n        else \n            return false;\n    }\n    return false;\n\
    }\n", "  let ret = true;\n  Object.entries(dict).forEach(([key, value]) => {\n\
    \    ret = (typeof value === 'string');\n    if(!ret)\n      return false;\n \
    \   ret = key.toLowerCase() === key;\n    if(!ret)\n      return false;\n    ret\
    \ = key.toUpperCase() === key;\n    if(!ret)\n      return false;\n  });\n  return\
    \ ret;\n}\n", "    const keys: string[] = Object.keys(dict);\n    for (let i =\
    \ 0, len = keys.length; i < len; i++) {\n        if (\n            (typeof keys[i]\
    \ === \"string\" && keys[i].toLowerCase() === keys[i]) ||\n            (typeof\
    \ keys[i] === \"string\" && keys[i].toUpperCase() === keys[i])\n        ) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n", "    let\
    \ found: string[];\n    for (let key of Object.keys(dict)) {\n        found =\
    \ [key].concat(found);\n    }\n    return !found.length\n}\n</code>\n<|/ a tags=typescript\
    \ dscore=2 |>\n<| a dscore=1 |>\n<code>", "    let keys: string[] = [];\n    for\
    \ (let key in dict) {\n        if (typeof dict[key] === \"string\") {\n      \
    \      keys.push(key);\n        }\n    }\n    if (keys.length === 0) {\n     \
    \   return false;\n    }\n    keys = keys.sort();\n    for (let key of keys) {\n\
    \        if (typeof dict[key] === \"string\") {\n            if (dict[key].toUpperCase()\
    \ !== dict[key]) {\n                return false;\n            }\n        } else\
    \ {\n            if (dict[key] !== dict[key]) {\n                return false;\n\
    \            }\n        }\n    }\n    return true;\n}\n", "    if (typeof dict\
    \ !== \"object\") {\n        return false;\n    }\n    const keys = Object.keys(dict);\n\
    \    if (keys.length === 0) {\n        return false;\n    }\n    const all_lowercase_keys\
    \ = keys.every(function (k) {\n        return typeof dict[k] === \"string\" &&\
    \ k.toLowerCase() === k;\n    });\n    const all_uppercase_keys = keys.every(function\
    \ (k) {\n        return typeof dict[k] === \"string\" && k.toUpperCase() === k;\n\
    \    });\n    return all_lowercase_keys === all_uppercase_keys;\n}\n", "    if\
    \ (dict == null || Object.keys(dict).length === 0) return false;\n\n    for (let\
    \ k in dict) {\n        let key_str = String(k).toLowerCase();\n        let val_str\
    \ = String(dict[k]).toLowerCase();\n        \n        if (key_str != val_str)\
    \ {\n            return false\n        }\n    }\n\n    return true;\n}\n", " \
    \   if (!dict) return false;\n    for (var key in dict) {\n        if (dict[key]\
    \ == null || dict[key] === \"\" || dict[key] === undefined) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n", "    for (const key in dict)\
    \ {\n        if (typeof dict[key] !== 'string') {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "  const keys_lower = Object.keys(dict).map(key\
    \ => key.toLowerCase());\n  const keys_upper = Object.keys(dict).map(key => key.toUpperCase());\n\
    \  return (keys_lower === keys_upper) ? true : false;\n}\n", "    let keys = Object.keys(dict)\n\
    \    for(let i=0; i<keys.length; i++) {\n        if(keys[i].toLowerCase() !==\
    \ keys[i]) {\n            return false\n        }\n    }\n    return true\n}\n",
  "    if (dict === undefined || Object.keys(dict).length === 0) {\n        return\
    \ false;\n    }\n    \n    const keys: Array<string> = Object.keys(dict).sort();\n\
    \    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n \
    \       const val = dict[key];\n        if (!(val === null || val === undefined\
    \ || val === \"\" || typeof val === \"string\")) {\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\n", "    if (Object.keys(dict).length\
    \ == 0) return false;\n\n    for (let key in dict) {\n        if (dict[key].length\
    \ != 0) return false;\n    }\n    return true;\n}\n", "    if (Object.keys(dict).length\
    \ == 0) {\n        return false;\n    }\n    for (let key in dict) {\n       \
    \ if (typeof dict[key] !== \"string\" || !(key.toString() in dict)) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\nIf you don't want to use lodash, we can implement it in vanilla\
    \ js without using any libraries.\n<code>\nconst checkCase = (obj) => {\n  const\
    \ keys = Object.keys(obj);\n  return keys.length > 0 &&\n    keys.every(key =>\
    \ typeof obj[key] === 'string' && key.toLowerCase() === key);\n}\n</code>\n<code>\n\
    const testObj = {\n  name: 'John',\n  age: 22,\n  city: 'Houston'\n}\n\nconsole.log(checkCase(testObj))\n\
    </code>\n<code>\ntrue\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript\
    \ |>\n<code>\nconst checkCase = (obj) => {\n    const keys = Object.keys(obj);\n\
    \    return keys.length > 0 &&\n        keys.every(key => typeof obj[key] ===\
    \ 'string' && key.toLowerCase() === key);\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nWhat is the benefit of using .every() vs. .some()?\n<|/ c |>\n<| c |>\n\
    if you just want to check one condition then use some but if you want to check\
    \ multiple condition then use every\n<|/ c |>\n<| a dscore=1 |>\n<code>\nconst\
    \ checkCase = (obj) => {\n    const keys = Object.keys(obj);\n    return keys.length\
    \ > 0 &&\n        keys.every(key => typeof obj[key] === 'string' && key.toLowerCase()\
    \ === key);\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| c |>\nPlease\
    \ add some explanation to your answer such that others can learn from it\n<|/\
    \ c |>\n<| a tags=javascript,typescript dscore=1 |>\nUsing Array#every and String#toLowerCase\n\
    The only thing you need is to get all the keys in the object and then check if\
    \ every element is an object and it has key as string and value as a lower case\
    \ string.\nSo you can simply do that with Array#every and String#toLowerCase.\n\
    \n<code>\nconst checkCase = (obj) => {\n  return Object.keys(obj).every(key =>\
    \ typeof obj[key] === \"object\" && \n    typeof obj[key][Object.keys(obj[key])[0]]\
    \ === \"string\" &&\n    obj[key][Object.keys(obj[key])[0]].toLowerCase() ===\
    \ key);\n}\n\nconst testObj = {\n  name: 'John',\n  age: 22,\n  city: 'Houst",
  "    let keys = Object.keys(dict);\n    for (let i = 0; i < keys.length; i++) {\n\
    \        let key = keys[i];\n        if (typeof dict[key] === \"string\" && dict[key].toLowerCase()\
    \ === dict[key]) {\n            continue;\n        } else if (typeof dict[key]\
    \ === \"string\" && dict[key].toUpperCase() === dict[key]) {\n            continue;\n\
    \        } else {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if (dict == {}) {\n        return true;\n    }\n    for (let key in\
    \ dict) {\n        let val = dict[key];\n        if (val == key) {\n         \
    \   continue;\n        }\n        if (val.toLowerCase() === val.toUpperCase())\
    \ {\n            continue;\n        }\n        return false;\n    }\n    return\
    \ true;\n}\n\n", "    if (Object.keys(dict).length === 0) {\n        return false;\n\
    \    }\n    let keys = Object.keys(dict);\n    for (let i = 0; i < keys.length;\
    \ i++) {\n        if (typeof dict[keys[i]] !== \"string\") {\n            return\
    \ false;\n        }\n        if (keys[i].toLowerCase() !== keys[i]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    let isAllStringsUppercase:\
    \ boolean = true;\n    let isAllStringsLowercase: boolean = true;\n    for (let\
    \ key in dict) {\n        let value = dict[key];\n        if (key === value) {\n\
    \            return false\n        }\n        if (key === value.toLocaleLowerCase())\
    \ {\n            isAllStringsLowercase = false;\n        }\n        if (key ===\
    \ value.toLocaleUpperCase()) {\n            isAllStringsUppercase = false;\n \
    \       }\n    }\n    return isAllStringsUppercase && isAllStringsLowercase;\n\
    }\n</code></pre>\n                                </div>\n                   \
    \             \n                                \n                           \
    \     \n                            \n                                \n     \
    \                           \n                                \n             \
    \                   \n                            \n                         \
    \   \n                                \n                                \n   \
    \                             \n                                \n           \
    \                     \n                            \n                       \
    \     \n                            \n                            \n         \
    \                   \n                            \n                         \
    \       \n                                \n                                \n\
    \                                    \n                                      \
    \  \n                                            \n                          \
    \                      \n                                                    \n\
    \                                                    \n                      \
    \                              \n                                            \
    \        \n                                                    \n            \
    \                                        \n                                  \
    \                  \n                                                        <pre><code\
    \ class=\"language-python\">def check_dict_values(dict: dict, key: string, value:\
    \ any): bool {\n    // Given an object and a key, find out if the value is in\
    \ dictionary\n    // or if the value is in a list.\n    for (let dict_key in dict)\
    \ {\n        if (key === dict_key) {\n            return false;\n        }\n \
    \   }\n    for (let list_key in dict) {\n        if (key === list_key) {\n   \
    \         return false;\n        }\n    }\n    for (let list_item in dict[key])\
    \ {\n        if (key === list_item) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n</code></pre>\n                                 \
    \               \n                                            \n             \
    \                           \n                                    \n         \
    \                       \n                            \n                     \
    \           \n                                    \n                         \
    \               \n                                            \n             \
    \                                   \n                                       \
    \             \n                                                    \n       \
    \                                             \n                             \
    \                       \n                                                   \
    \ \n                                                    \n                   \
    \                                 \n                                         \
    \               <pre><code class=\"language-python\">def check_dict_contains(dict:\
    \ dict, key: string, value: any): boolean {\n    // Given an object and a key,\
    \ find out if the value is in dictionary\n    // or if the value is in a list.\n\
    \    for (let dict_key in dict) {\n        if (key === dict_key) {\n         \
    \   return true;\n        }\n    }\n    for (let list_key in dict) {\n       \
    \ if (key === list_key) {\n            return true;\n        }\n    }\n    for\
    \ (let list_item in dict[key]) {\n        if (key === list_item) {\n         \
    \   return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n    \
    \                                            \n                              \
    \              \n                                        \n                  \
    \                  \n                                \n                      \
    \      \n                                \n                                  \
    \  \n                                        \n                              \
    \              \n                                                \n          \
    \                                          \n                                \
    \                    \n                                                    \n\
    \                                                    \n                      \
    \                              \n                                            \
    \        \n                                                    \n            \
    \                                            <pre><code class=\"language-python\"\
    >def check_dict_values(dict: dict, key: string, value: any): bool {\n    // Given\
    \ an object and a key, find out if the value is in dictionary\n    // or if the\
    \ value is in a list.\n    for (let dict_key in ", "    const keys = new Set(Object.keys(dict));\n\
    \    if (keys.size) {\n        for(let key of keys) {\n            if (typeof\
    \ (dict[key]) !== 'string') {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    return false;\n}", "  for (const\
    \ k in dict) {\n    if (typeof dict[k] !== 'string') {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    if (dict === {}) {\n        return false;\n\
    \    }\n    const keys = Object.keys(dict);\n    for (let i = 0, len = keys.length;\
    \ i < len; i++) {\n        if (keys[i].toUpperCase() !== keys[i]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis is only true if you have exactly 1 property which has a string value.\
    \  If you have 2+ properties which both have a string value, you'll get a false\
    \ negative.  It's not perfect but it's good enough.\n<|/ c |>\n<| c |>\nThis will\
    \ not work for `{'KEY1': 'VAL1', 'KEY2': 'VAL2', 'KEY3': 'VAL3'}`, where `KEY3`\
    \ is neither a string nor a number, but `VAL3` is.\n<|/ c |>\n<| c |>\nWhy is\
    \ the check not performed by `typeof`?\n<|/ c |>\n<| c |>\nBecause it returns\
    \ true even for empty objects and strings, and that's not what we want.\n<|/ c\
    \ |>\n<| a dscore=5 |>\n<code>\nconst isStringOrNumber = value => typeof value\
    \ === 'string' || typeof value === 'number';\n\nconst checkDict = (dict: Object):\
    \ boolean =>\n  Object.keys(dict)\n    .every(key => isStringOrNumber(dict[key]))\n\
    </code>\n<|/ a tags=typescript,javascript,dictionary |>\n<| c |>\nThis will not\
    \ work for `{'KEY1': 'VAL1', 'KEY2': 'VAL2', 'KEY3': 'VAL3'}`, where `KEY3` is\
    \ neither a string nor a number, but `VAL3` is.\n<|/ c |>\n<| c |>\nGood point,\
    \ this will need to be enhanced with a type guard to check if `value` is a number\
    \ or string, either way this is something that should be covered by unit tests\
    \ so it is easier to maintain and understand.\n<|/ c |>\n<| a tags=typescript,javascript,dictionary\
    \ dscore=4 |>\nYou could use Object.keys and Array#every to check whether all\
    \ keys are strings or all keys are numbers.\n\n<code>\nconst isObject = o => typeof\
    \ o === 'object';\n\nconst checkDict = dict =>\n  Object.keys(dict).every(key\
    \ => isString(dict[key]) || isNumber(dict[key]));\n\nconst isString = (s => v\
    \ => typeof v === 'string')(s); \nconst isNumber = (n => v => typeof v === 'number')(n);\
    \ \n\nconsole.log(checkDict({\n  a: 'apple',\n  b: 'banana'\n}));\nconsole.log(checkDict({\n\
    \  a: 'apple',\n  A: 'banana',\n  B: 'banana", "    \n    for (const key in dict)\
    \ {\n        if (!isNaN(Number(key))) {\n            return false\n        } else\
    \ if (key.toLowerCase() != key) {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    for (var k in dict) {\n        if (typeof dict[k]\
    \ === 'string' && dict[k].length === 0) {\n            return false;\n       \
    \ }\n        if (dict[k].length > 0 && (!k.match(/^[A-Z]/) || !k.match(/^[a-z]/)))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  // If we have no keys, then we can't really know\n    if (Object.keys(dict).length\
    \ === 0) {\n        return false;\n    }\n\n    // If we have an invalid key,\
    \ then we can't really know\n    for (const key of Object.keys(dict)) {\n    \
    \    if (typeof dict[key] !== 'string') {\n            return false;\n       \
    \ }\n    }\n\n    return true;\n}\n", "  let result: boolean = false;\n  Object.keys(dict).forEach((key:\
    \ string) => {\n    if (key === key.toUpperCase()) {\n      result = true;\n \
    \   }\n  });\n  return result;\n}\n", "  for (let key in dict) {\n    if (dict[key]\
    \ == dict[key.toLowerCase()] || dict[key] == dict[key.toUpperCase()]) {\n    \
    \  return true\n    }\n  }\n  return false\n}\n", "  if (dict) {\n    let keys\
    \ = Object.keys(dict);\n    keys.sort();\n    return keys.every(key => typeof\
    \ dict[key] === 'string');\n  }\n  return false;\n}\n", "  const keys = Object.keys(dict);\n\
    \  const len = keys.length;\n  if (len === 0) { return false; }\n  for (let i\
    \ = 0; i < len; i++) {\n    const key = keys[i];\n    if (typeof dict[key] ===\
    \ 'string' &&\n        (dict[key].toLowerCase() !== dict[key])) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "\tfor (const key in dict) {\n\t\t\
    if (typeof dict[key] !== 'string') return false;\n\t\tconst lower = key.toLowerCase();\n\
    \t\tif (lower === key) return true;\n\t\tconst upper = key.toUpperCase();\n\t\t\
    if (upper === key) return true;\n\t}\n\treturn false;\n}\n", "\tfor (let key in\
    \ dict) {\n\t\tif (typeof dict[key] === \"string\") {\n\t\t\tif (key.toLowerCase()\
    \ === key) {\n\t\t\t\treturn true;\n\t\t\t} else if (key.toUpperCase() === key)\
    \ {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    } else {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n", "\tif (Object.keys(dict).length\
    \ === 0) {\n\t\treturn false;\n\t}\n\tfor (let key in dict) {\n\t\tif (typeof\
    \ dict[key] === \"string\") {\n\t\t\tif (isUpperCase(dict[key])) {\n\t\t\t\tcontinue;\n\
    \t\t\t}\n\t\t\tif (!isUpperCase(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    for\
    \ (let key in dict) {\n        if (key == key.toLowerCase() || key == key.toUpperCase())\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n", "  \
    \  if (Object.keys(dict).length === 0)\n        return true\n    return !Object.keys(dict).some((key)\
    \ => {\n        return typeof dict[key] !== \"string\" ||\n            dict[key].toLowerCase()\
    \ !== dict[key].toUpperCase()\n    })\n}\n", "  for (let key in dict) {\n    if\
    \ (!(typeof(key) == \"string\")) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis is really great! Thank you so much!\
    \ I made this as an extension of the main answer, but this is a great solution\
    \ as well. Thank you so much!!\n<|/ c |>\n<| a tags=javascript,typescript,arrays\
    \ dscore=1 |>\nI guess you wanted to check if all the keys are in upper case.\
    \ Here is my implementation:\n<code>", "    const keys = Object.keys(dict)\n \
    \   if (keys.length == 0) {\n        return true\n    }\n    const keys_lower\
    \ = keys.map(k => k.toLowerCase())\n    const keys_upper = keys.map(k => k.toUpperCase())\n\
    \    const keys = keys_lower.concat(keys_upper)\n    if (keys.every(k => dict[k]\
    \ == dict[k])) return true\n    return false\n}\n", "  if (!dict || !Object.keys(dict).length)\
    \ return false;\n  const keys = Object.keys(dict);\n  for (let i = 0; i < keys.length;\
    \ i++) {\n    const key = keys[i];\n    let val = dict[key];\n    if (val.constructor\
    \ === String) {\n      if (val === key.toLowerCase()) continue;\n      if (val\
    \ === key.toUpperCase()) continue;\n    }\n    return false;\n  }\n  return true;\n\
    }\n</code>\n<|/ a tags=javascript,typescript |>\n<| a tags=javascript,typescript\
    \ dscore=1 |>\nHere's a version that will let you pass an array of strings to\
    \ any function that is called as a predicate:\n<code>\nexport const checkStrings\
    \ = <T>(items: T[]) =>\n  items && !items.every(item => typeof item === 'string');\n\
    </code>\nAnd here's a test that demonstrates how it works:\n<code>\nit('test',\
    \ () => expect(checkStrings(['foo', 'bar'])).toBe(true));\n</code>\n<|/ a |>\n\
    <| a tags=javascript,typescript |>\n<code>\nlet arr = ['hello', 'world'];\nlet\
    \ arr2 = arr.map(v => v.toLowerCase());\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Welcome to Stack Overflow! While this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| c |>\nThis won't work - it converts the entire\
    \ array to lowercase. How would you convert a specific string to lowercase?\n\
    <|/ c |>\n<| a tags=javascript,typescript dscore=0 |>\n<code>\nconst arr = ['hello',\
    \ 'world'];\narr.map(s => s.toLowerCase());\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ won't work - it converts the entire array to lowercase. How would you convert\
    \ a specific string to lowercase?\n<|/ c |>\n<| a |>\n<code>\nconst arr = ['hello',\
    \ 'world'];\n", "    // check lower case first\n    for (const key in dict) {\n\
    \        if (dict.hasOwnProperty(key)) {\n            if (typeof dict[key] !==\
    \ \"string\") {\n                return false\n            }\n        }\n    }\n\
    \    for (const key in dict) {\n        if (dict.hasOwnProperty(key)) {\n    \
    \        if (typeof dict[key] === \"string\" && dict[key].toLowerCase() !== dict[key])\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    let cases = {\n        'a': 'A', // keys are in lower case\n\
    \        'A': 'a', // keys are in upper case\n        'b': 'B', // keys are in\
    \ lower case\n        'B': 'b', // keys are in upper case\n        'c': 'C', //\
    \ keys are in lower case\n        'C': 'c', // keys are in upper case\n      \
    \  'd': 'D', // keys are in lower case\n        'D': 'd', // keys are in upper\
    \ case\n        'e': 'E', // keys are in lower case\n        'E': 'e', // keys\
    \ are in upper case\n        'f': 'F', // keys are in lower case\n        'F':\
    \ 'f', // keys are in upper case\n        'g': 'G', // keys are in lower case\n\
    \        'G': 'g', // keys are in upper case\n        'h': 'H', // keys are in\
    \ lower case\n        'H': 'h', // keys are in upper case\n        'i': 'I', //\
    \ keys are in lower case\n        'I': 'i', // keys are in upper case\n      \
    \  'j': 'J', // keys are in lower case\n        'J': 'j', // keys are in upper\
    \ case\n        'k': 'K', // keys are in lower case\n        'K': 'k', // keys\
    \ are in upper case\n        'l': 'L', // keys are in lower case\n        'L':\
    \ 'l', // keys are in upper case\n        'm': 'M', // keys are in lower case\n\
    \        'M': 'm', // keys are in upper case\n        'n': 'N', // keys are in\
    \ lower case\n        'N': 'n', // keys are in upper case\n        'o': 'O', //\
    \ keys are in lower case\n        'O': 'o', // keys are in upper case\n      \
    \  'p': 'P', // keys are in lower case\n        'P': 'p', // keys are in upper\
    \ case\n        'q': 'Q', // keys are in lower case\n        'Q': 'q', // keys\
    \ are in upper case\n        'r': 'R', // keys are in lower case\n        'R':\
    \ 'r', // keys are in upper case\n        's': 'S', // keys are in lower case\n\
    \        'S': 's', // keys are in upper case\n        't': 'T', // keys are in\
    \ lower case\n        'T': 't', // keys are in upper case\n        'u': 'U', //\
    \ keys are in lower case\n        'U': 'u', // keys are in upper case\n      \
    \  'v': 'V', // keys are in lower case\n        '", "    if (!dict)\n        return\
    \ false;\n    for (var i in dict)\n        if (!(i in dict) || typeof dict[i]\
    \ !== 'string')\n            return false;\n    return true;\n}\n", "  var keys\
    \ = Object.keys(dict)\n  if (keys.length == 0) return false\n  \n  for (var i\
    \ = 0; i < keys.length; i++) {\n    if (typeof (keys[i]) != 'string') return false\n\
    \  }\n  return true\n}\n", "\tif (!Object.keys(dict).length) return false;\n\t\
    for (let key in dict) {\n\t\tif (typeof dict[key] === \"string\") return true;\n\
    \t\tif (typeof dict[key] === \"number\") return true;\n\t}\n\treturn false;\n\
    }\n\n", "    const keys = Object.keys(dict).sort();\n    let is_all_upper_case\
    \ = true;\n    let is_all_lower_case = true;\n    keys.forEach(key => {\n    \
    \    if (is_all_upper_case && is_all_lower_case) {\n            is_all_upper_case\
    \ = is_all_upper_case && key.toUpperCase() === key;\n            is_all_lower_case\
    \ = is_all_lower_case && key.toLowerCase() === key;\n        } else {\n      \
    \      is_all_upper_case = is_all_upper_case && key.toUpperCase() === key;\n \
    \           is_all_lower_case = is_all_lower_case && key.toLowerCase() === key;\n\
    \        }\n    });\n    return is_all_upper_case && is_all_lower_case;\n}\n",
  "    if (dict === null || dict === undefined || dict.length == 0)\n        return\
    \ false;\n    for (let key in dict)\n        if (dict[key].toLowerCase() != key)\n\
    \            return false;\n    return true;\n}\n", "  if (!dict) return true\n\
    \  const keys = Object.keys(dict)\n  return !keys.length || !keys.every(key =>\
    \ typeof dict[key] === 'string' && dict[key].length === 0)\n}\n", "    let lowercase\
    \ = Object.keys(dict).map(key => key.toLowerCase());\n    let uppercase = Object.keys(dict).map(key\
    \ => key.toUpperCase());\n    return lower.length === uppercase.length && lower.every(s\
    \ => uppercase.includes(s));\n}\n</code>\n<|/ a tags=javascript,typescript |>\n\
    <| a tags=javascript,typescript |>\nIf you are looking to get keys present in\
    \ object in lower case and not in upper case then you can use below code,\n<code>\n\
    let lowerCaseKeys = Object.keys(object).map(key => key.toLowerCase());\nlet upperCaseKeys\
    \ = Object.keys(object).map(key => key.toUpperCase());\n", "    let is_all_strings\
    \ = true;\n    Object.keys(dict).forEach((key) => {\n        if (typeof dict[key]\
    \ === \"string\") {\n            is_all_strings = false;\n        }\n    });\n\
    \    return is_all_strings;\n}\n</code>\n<|/ a |>\n<| a |>\nJust in case the object\
    \ you are working with is more complex than a dictionary and you just want to\
    \ check for a certain type of object, then you can also use lodash isType. For\
    \ example, if you want to check for a string, you can do something like this.\n\
    <code>\nimport isType from 'lodash/isType'\n\nif (isType(myObject, 'string'))\
    \ {\n  console.log('myObject is of type String')\n}\n</code>\n<|/ a tags=types,javascript,typescript\
    \ dscore=0 |>\n<| a tags=types,javascript,typescript dscore=0 |>\nAnother solution\
    \ is to use lodash isType method\n\n<code>\nconst isObject = (obj) => !!obj &&\
    \ typeof obj === \"object\"\n\nconst stringify = JSON.stringify;\n\nconsole.log(isType('string',\
    \ stringify('hello')))\nconsole.log(isType('object', stringify('hello')))\nconsole.log(isType('boolean',\
    \ stringify('hello')))\nconsole.log(isType('number', stringify('hello')))\nconsole.log(isType('function',\
    \ stringify('hello')))</code>\n<script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js\"\
    ></script>\n<|/ a |>\n<| a |>\nThe answer from is good, but for my case, I wanted\
    \ to be able to check types of the arguments in the function, without necessarily\
    \ having to remember all the keys of the object. \n<code>", "\t\n\t// If object\
    \ is empty, then return true.\n\tif (Object.keys(dict).length === 0) {\n\t\treturn\
    \ true;\n\t}\n\t\n\t// Check every key in dictionary for whether it is an upper\
    \ case string or\n\t// lower case string.\n\tlet keys = Object.keys(dict);\n\t\
    let key: string = keys[0];\n\tfor (let i = 1; i < keys.length; i++) {\n\t\tlet\
    \ key = keys[i];\n\t\tlet value = dict[key];\n\t\tif (key.charCodeAt(0) >= 97\
    \ && key.charCodeAt(0) <= 122 ||\n\t\t\tkey.charCodeAt(0) >= 65 && key.charCodeAt(0)\
    \ <= 90 || \n\t\t\tkey.charCodeAt(0) === 32) {\n\t\t\tkey = key.toLowerCase();\n\
    \t\t} else {\n\t\t\tkey = key.toUpperCase();\n\t\t}\n\t\t\n\t\tif (value !== dict[key])\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\treturn true;\n}\n", "  let is_all_strings_in_lower_case\
    \ = Object.keys(dict)\n    .map(k => k.toLowerCase())\n    .every(k => k in dict);\n\
    \n  let is_all_strings_in_upper_case = Object.keys(dict)\n    .map(k => k.toUpperCase())\n\
    \    .every(k => k in dict);\n\n  return is_all_strings_in_lower_case || is_all_strings_in_upper_case;\n\
    }\n", "    if (Object.keys(dict).length == 0) return false\n\n    for (const key\
    \ in dict) {\n        if (!(typeof dict[key] === \"string\" || typeof dict[key]\
    \ === \"number\")) {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n", "    let isInLower = true;\n    let isInUpper = true;\n\n    Object.keys(dict).forEach(key\
    \ => {\n        let curr = dict[key];\n        if (isInLower) {\n            if\
    \ (!(curr === curr.toLowerCase())) {\n                isInLower = false;\n   \
    \         }\n        } else {\n            if (!(curr === curr.toUpperCase()))\
    \ {\n                isInUpper = false;\n            }\n        }\n    });\n\n\
    \    return isInLower && isInUpper;\n}\n", "    \n    let keys = Object.keys(dict);\n\
    \    for (let key of keys) {\n        if (typeof key != typeof \"string\")\n \
    \           return false;\n        if (key.toLowerCase() !== key)\n          \
    \  return false;\n    }\n    return true;\n}\n", "    return Object.keys(dict).every(key\
    \ => typeof dict[key] === \"string\");\n}\n", "    if (typeof dict == \"object\"\
    ) {\n        if (Object.keys(dict).length == 0) {\n            return false;\n\
    \        }\n        if (Object.keys(dict).length == 1) {\n            return typeof\
    \ dict[key] == \"string\";\n        }\n        if (Object.keys(dict).length ==\
    \ 2) {\n            return typeof dict[key][0] == \"string\" && typeof dict[key][1]\
    \ == \"string\";\n        }\n    }\n    return false;\n}\n", "    if (dict ==\
    \ null) return false\n    let keys: {[key: string]: boolean} = {}\n    Object.entries(dict).forEach(([key,\
    \ value]) => {\n        keys[key.toLowerCase()] = true\n        keys[key.toUpperCase()]\
    \ = true\n    })\n    Object.values(keys).forEach(key => {\n        if (key) return\
    \ false\n    })\n    return true\n}\n", "    var stringified_dict = JSON.stringify(dict);\n\
    \    var keys = Object.keys(dict).map(k => k.substr(0, 1).toUpperCase() + k.substr(1)).sort();\n\
    \    \n    if (stringified_dict === JSON.stringify(dict)) {\n        return true;\n\
    \    }\n    if (keys.length === 0) {\n        return false;\n    }\n    \n   \
    \ var uppercase_keys = keys.map(k => k.toUpperCase());\n    if (uppercase_keys.length\
    \ === 0) {\n        return false;\n    }\n    \n    return keys.length === uppercase_keys.length;\n\
    }\n", "    for (const key in dict)\n        if (typeof dict[key] === \"string\"\
    )\n            return true\n    return false\n}\n", "    for (let key in dict)\
    \ {\n        if (typeof dict[key] === \"string\") {\n            if (dict[key].toUpperCase()\
    \ === dict[key].toLowerCase()) {\n                continue;\n            } else\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThank you. This works well for most dictionaries I have tested\
    \ it on. Unfortunately it seems the dictionaries I had come across were a bit\
    \ different in how they were constructed, I added an example to the original post\n\
    <|/ c |>\n<| c |>\n, I've updated the answer with more explanation.\n<|/ c |>\n\
    <| c |>\nThanks again. I had tried a similar method before but it didn't work\
    \ so I thought there was an issue with the data structure. But I guess that's\
    \ just the way the data was constructed.\n<|/ c |>\n<| c |>\nIf it helped, please\
    \ accept the answer. Cheers.\n<|/ c |>\n<| c |>\nApologies for the late reply.\
    \ Your answer works very well for most of my test cases. However, I realised that\
    \ some of my test cases were missing keys in upper and lower case and so they\
    \ were failing with this method. So I added a function to check key length, and\
    \ now it seems to be working correctly! Thanks again\n<|/ c |>\n<| a tags=dictionary,typescript,javascript\
    \ dscore=0 |>\nyou can check key case using this:\n<code>", "  if (typeof dict\
    \ !== \"object\") {\n    return false;\n  }\n  const keys = Object.keys(dict);\n\
    \  for (const key of keys) {\n    if (typeof key !== \"string\") {\n      return\
    \ false;\n    }\n    if (key.length > 0) {\n      if (isUpperCase(key) || key.toUpperCase()\
    \ !== key) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n",
  "  if (!dict || Object.keys(dict).length < 1) {\n    return false;\n  }\n  else\
    \ {\n    return Object.values(dict).every(\n      value => typeof value == 'string'\
    \ || typeof value == 'number'\n    );\n  }\n}\n", "    if (dict == undefined ||\
    \ Object.keys(dict).length == 0) return false;\n    return Object.keys(dict).every(\n\
    \        key => /^[a-z]+$/i.test(key) || /^[A-Z]+$/i.test(key)\n    );\n}\n",
  "    let cased_dict = dict;\n    for (let key in cased_dict) {\n        if (typeof\
    \ cased_dict[key] === \"string\") {\n            if (cased_dict[key].toLowerCase()\
    \ === cased_dict[key].toLowerCase()) {\n                continue;\n          \
    \  } else {\n                return false;\n            }\n        }\n       \
    \ if (cased_dict[key] !== cased_dict[key].toLowerCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nYour code works like a charm and I understood it perfectly. Although\
    \ I do not understand why you used `!==` instead of `!=` for the `if` statement.\n\
    <|/ c |>\n<| c |>\nThe `!==` is used for `typeof` because both `typeof` and `==`\
    \ return `true` on `\"object\"` and `\"function\"`, whereas only `!=` returns\
    \ `true` on `\"string\"`.  So the `!==` tests if `typeof` is `\"object\"` but\
    \ also tests if `typeof` is `\"function\"`.  Since `typeof` tests if something\
    \ is `\"string\"` and that only works for `==`, we need to use `!=`.  Does that\
    \ make sense?\n<|/ c |>\n<| c |>\nIt does, thank you so much for the explanation.\
    \ It makes total sense now.\n<|/ c |>\n<| a |>\n<code>", "    for(let key in dict)\
    \ {\n        if(typeof key === 'string' && key.toLowerCase() !== key) return false\n\
    \        if(typeof key === 'string' && key.toUpperCase() !== key) return false\n\
    \        if(typeof key !== 'string') return false\n    }\n    return true\n}\n",
  "    const keys = Object.keys(dict);\n    for (const key of keys) {\n        if\
    \ (typeof dict[key] === \"string\") {\n            continue;\n        }\n    \
    \    if (dict[key].toLowerCase() !== dict[key].toUpperCase()) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  if (dict == null || Object.keys(dict).length\
    \ == 0) {\n    return true\n  }\n  for (let key in dict) {\n    if (!(key in lower_camel_case))\
    \ {\n      return false\n    }\n    if (!(key in upper_camel_case)) {\n      return\
    \ false\n    }\n  }\n  return true\n}\n", "    if (dict == null) {\n        return\
    \ false;\n    }\n    let keys: string[] = Object.keys(dict);\n    for (let i =\
    \ 0; i < keys.length; i++) {\n        if (typeof dict[keys[i]] !== \"string\"\
    ) {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  if (dict == null || Object.keys(dict).length == 0) {\n        return false;\n\
    \    }\n    const keys = Object.keys(dict);\n    for (let i = 0; i < keys.length;\
    \ i++) {\n        let k = keys[i];\n        if (k.toLowerCase() != k) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    for (let\
    \ key in dict) {\n        if (is_string(key)) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\n", "    let keys = Object.keys(dict);\n\
    \    return keys.length == Object.keys(dict).length && keys.every(\n        (key)\
    \ => typeof dict[key] === \"string\" && isLowerCase(dict[key]) || isUpperCase(dict[key])\n\
    \    );\n}\n", "    if (dict == null || Object.keys(dict).length == 0) {\n   \
    \     return false;\n    }\n\n    for (let key in dict) {\n        if (typeof\
    \ (dict[key]) !== 'string') {\n            return false;\n        }\n        \n\
    \        if (key === dict[key].toLowerCase()) {\n            continue;\n     \
    \   }\n\n        if (key === dict[key].toUpperCase()) {\n            continue;\n\
    \        }\n\n        return false;\n    }\n\n    return true;\n}\n", "    if\
    \ (dict.length === 0) return false;\n    for (let key of Object.keys(dict)) {\n\
    \        if (typeof dict[key] !== \"string\") return false;\n        if (dict[key].length\
    \ < 1) return false;\n    }\n    return true;\n}\n", "\tfor (let key in dict)\
    \ {\n\t\tif (typeof dict[key] === \"string\") {\n\t\t\tcontinue;\n\t\t}\n\t\t\
    else if (typeof dict[key] === \"number\") {\n\t\t\tcontinue;\n\t\t}\n\t\telse\
    \ if (dict[key] !== undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\telse {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\n", "  if (Object.keys(dict).length\
    \ === 0) {\n    return false;\n  }\n  for (let k in dict) {\n    let lower = k.toLowerCase();\n\
    \    let upper = k.toUpperCase();\n    if (lower !== upper && lower !== k && upper\
    \ !== k) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  return Object.keys(dict).every(key\
    \ => typeof dict[key] === \"string\" || typeof key === \"string\");\n}\n", " \
    \   if (Object.keys(dict).length == 0) {\n        return false;\n    }\n\n   \
    \ for (let key of Object.keys(dict)) {\n        if (typeof(dict[key]) == 'string')\
    \ {\n            if (dict[key].toUpperCase() == dict[key]) {\n               \
    \ continue;\n            } else {\n                return false;\n           \
    \ }\n        } else {\n            return false;\n        }\n    }\n\n    return\
    \ true;\n}\n</code>\n<|/ a |>\n<| c |>\nThis answer does not consider all combinations.\
    \ For example, if you have a dictionary where the keys are strings and values\
    \ are numbers, this does not work. See the answer from-zamani-saudeha for a fully\
    \ working solution.\n<|/ c |>\n<| c |>\nI did not say it wouldn't! I said it wouldn't.\
    \ It will fail if the dictionary contains both numbers and strings. I've added\
    \ an example in my answer.\n<|/ c |>\n<| a dscore=1 tags=object,typescript,key-value,javascript\
    \ |>\nYou can use Object.keys() function and check values that are not empty strings\
    \ :\n\n<code>\nconst check = (obj) => {\n  const keys = Object.keys(obj);\n  const\
    \ res = keys.every(key => obj[key] && obj[key].trim() !== '');\n  console.log(res);\n\
    };\n\ncheck({ \n  abc: 123,\n  def: 'asdf'\n});</code>\n<|/ a |>\n<| c |>\nThe\
    \ question asked about a general case to check all possible combinations\n<|/\
    \ c |>\n<| c |>\nThis is nice. Good answer for anyone else who needs it, but doesn't\
    \ actually answer the question.\n<|/ c |>\n<| c |>\nI posted this only to explain\
    \ why your answer is incorrect because it's incomplete.\n<|/ c |>\n<| c |>\nI\
    \ see. But your answer is wrong. If I post my answer, your answer is wrong. Your\
    \ answer will fail if your object has a number as key and a string as value. Your\
    \ answer will fail if your object has a number as key and a boolean as value.\
    \ Your answer will fail if your object has a number as key and a number as value.\
    \ Your answer will fail if your object has a boolean as key and a number as value.\
    \ Your answer will fail if your object has a boolean as key and a string as value.\
    \ Your answer will fail if your object has a boolean as key and a boolean as value.\
    \ Your answer will fail if your object has a number as key and a boolean as value.\
    \ Your answer will fail if your object has a number as key and a string as value.\
    \ Your answer will fail if your object has a boolean as key and a boolean as value.\
    \ Your answer will fail if your object has an array as key and a string as value.\
    \ Your answer will "]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
