language: ts
name: HumanEval_116_sort_array
results:
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!arr.length\
    \ || arr.length === 1) {\n    return arr;\n  }\n\n  const counts: Array<number>\
    \ = new Array(arr.length);\n  for (let i = 0; i < arr.length; i++) {\n    counts[arr[i]]++;\n\
    \  }\n\n  const indexCounts: Array<number> = new Array(arr.length);\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    indexCounts[counts[arr[i]]++] = i;\n  }\n\
    \n  // Now the result array is sorted. We can sort indexCounts array as well.\n\
    \  let j = 0;\n  for (let i = 0; i < indexCounts.length; i++) {\n    const count\
    \ = indexCounts[i];\n    while (count > 0) {\n      indexCounts[j] = count;\n\
    \      j++;\n      count--;\n    }\n  }\n\n  const newArr = new Array(indexCounts.length);\n\
    \  j = 0;\n  for (let i = 0; i < indexCounts.length; i++) {\n    newArr[i] = arr[indexCounts[j]];\n\
    \    j++;\n  }\n  return newArr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ixw6lch.ts(33,7): error TS2588: Cannot assign to
    ''count'' because it is a constant.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) return arr;\n\n  for (let i = 0; i < len; i++)\
    \ {\n    const ones = arr[i] & 0xF;\n    let tmp = arr[i];\n    let tmp1 = arr[i\
    \ + 1];\n\n    arr[i] = tmp1;\n    arr[i + 1] = tmp;\n\n    arr[i] = tmp + ones;\n\
    \    arr[i + 1] = tmp1 - ones;\n  }\n\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  8,\n\
    \  12,\n  -6,\n  14,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  4,\n  3,\n  5\n]\n    at test (/tmp/tmpo3hd6m2b.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo3hd6m2b.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 8, 12,\
    \ -6, 14, NaN ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tlet sortedArr:\
    \ number[] = [];\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet count = 0;\n\
    \t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (arr[j] & arr[i]) {\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t}\n\t\tif (count > 0) {\n\t\t\tsortedArr.push(arr[i]);\n\t\t}\n\t\
    }\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet count = 0;\n\t\tfor (let\
    \ j = 0; j < i; j++) {\n\t\t\tif (arr[j] == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\
    \t}\n\t\tif (count == 0) {\n\t\t\tsortedArr.push(arr[i]);\n\t\t}\n\t}\n\treturn\
    \ sortedArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  3,\n\
    \  4,\n  1,\n  5,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n\
    \  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpm3y9qceo.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm3y9qceo.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    5,\
    \ 3, 4, 1,\n    5, 2, 3, 4\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  if (len === 1) {\n\
    \    if (arr[0] > 0) {\n      return arr;\n    } else {\n      return [arr[0],\
    \ arr[0]];\n    }\n  }\n\n  const mid = Math.floor(len / 2);\n  const left = arr.slice(0,\
    \ mid);\n  const right = arr.slice(mid);\n  const midArr = [];\n\n  const helper\
    \ = (leftArr: number[], rightArr: number[], result: number[], isLeft: boolean)\
    \ => {\n    leftArr.forEach((el) => {\n      isLeft ? result.push(el) : result.unshift(el);\n\
    \    });\n    rightArr.forEach((el) => {\n      isLeft ? result.push(el) : result.unshift(el);\n\
    \    });\n  };\n\n  helper(left, right, midArr, true, false);\n  helper(left,\
    \ right, midArr, false, true);\n\n  return midArr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp46lu6e1r.ts(38,37): error TS2554: Expected 4 arguments,
    but got 5.

    ../../../../../tmp/tmp46lu6e1r.ts(39,38): error TS2554: Expected 4 arguments,
    but got 5.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tfor (let\
    \ i = 0; i < arr.length; ++i) {\n\t\tfor (let j = i + 1; j < arr.length; ++j)\
    \ {\n\t\t\tlet ones = arr[i] & 1;\n\t\t\tlet twos = arr[j] & 1;\n\t\t\tif (ones\
    \ !== twos) {\n\t\t\t\tlet nums = arr[i] ^ arr[j];\n\t\t\t\tlet tmp = nums & -nums;\n\
    \t\t\t\tif (tmp) {\n\t\t\t\t\ttmp = tmp + nums & nums;\n\t\t\t\t}\n\t\t\t\tarr[i]\
    \ = tmp ^ nums;\n\t\t\t\tarr[j] = tmp ^ nums;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  7,\n  5,\n\
    \  3,\n  3,\n  7\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpshmfatmg.js:32:12)\n    at Object.<anonymous> (/tmp/tmpshmfatmg.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 7, 5, 3,\
    \ 3, 7 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr\n        .map((n: number) => parseInt(n, 2))\n        .sort((a, b) => a\
    \ - b)\n        .map((n: number) => parseInt(n, 10));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcvkr5zm4.ts(13,38): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpcvkr5zm4.ts(15,38): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => count_ones(a) - count_ones(b));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1zpq4mxh.ts(11,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    ../../../../../tmp/tmp1zpq4mxh.ts(12,24): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp1zpq4mxh.ts(12,40): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => {\n    if (a === 0 && b === 0) {\n      return 0;\n  \
    \  }\n    if (a === 0) {\n      return 1;\n    }\n    if (b === 0) {\n      return\
    \ -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n   \
    \   return -1;\n    }\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpjl5arez0.js:33:12)\n    at Object.<anonymous> (/tmp/tmpjl5arez0.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr.length; j++) {\n\
    \      arr[j].sort(function (a, b): number {\n        if (a > b) {\n         \
    \ return 1;\n        } else if (b > a) {\n          return -1;\n        } else\
    \ {\n          return 0;\n        }\n      });\n    }\n  }\n  return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz4ws9jot.ts(14,14): error TS2339: Property ''sort''
    does not exist on type ''number''.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort(\
    \ (a, b) => { return -a - b; } );\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp34q09pdy.js:18:12)\n    at Object.<anonymous> (/tmp/tmp34q09pdy.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        return b - a;\n    });\n\n    return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmphpbnqven.js:20:12)\n    at Object.<anonymous> (/tmp/tmphpbnqven.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!arr)\
    \ {\n    return arr\n  }\n  const resultArr = []\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    resultArr[arr[i]] = i\n  }\n  arr.sort(\n    (num1: number, num2:\
    \ number) => num1 > num2 ? 1 : num1 < num2 ? -1 : 0,\n  )\n  return resultArr\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  0,\n  2,\n  3,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n \
    \ 1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpdz0kqyhx.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdz0kqyhx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 0, 2, 3, 4, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let len\
    \ = arr.length,\n        swapped = 0,\n        sorted: number[] = [];\n    for\
    \ (let i = 0; i < len; i++) {\n        swapped = swapped * 10 + arr[i];\n    \
    \    if (swapped > 10000000) {\n            swapped = swapped % 10000000;\n  \
    \          sorted.push(swapped / 1000000);\n            swapped = swapped % 1000000;\n\
    \            sorted.push(swapped / 10000);\n            swapped = swapped % 10000;\n\
    \            sorted.push(swapped / 100);\n            swapped = swapped % 100;\n\
    \            sorted.push(swapped / 10);\n            swapped = swapped % 10;\n\
    \            sorted.push(swapped);\n        }\n    }\n    return sorted;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpv1uyf_91.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv1uyf_91.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tlet len\
    \ = arr.length;\n\tlet flag = new Array(len);\n\tlet lastIndex = len - 1;\n\t\
    let temp;\n\tlet swapped;\n\tfor (let i = 0; i < len; ++i) {\n\t\tflag[i] = 0;\n\
    \t}\n\tfor (let j = 0; j < len; ++j) {\n\t\tif (arr[j] !== 0) {\n\t\t\tflag[j]\
    \ = 0;\n\t\t} else {\n\t\t\tflag[j] = 1\n\t\t}\n\t\tfor (let i = 0; i < len; ++i)\
    \ {\n\t\t\tif (flag[i] !== flag[i + 1]) {\n\t\t\t\tif (flag[i]) {\n\t\t\t\t\t\
    if (flag[j]) {\n\t\t\t\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\t\t\t\ttemp = arr[i];\n\
    \t\t\t\t\t\t\tarr[i] = arr[j];\n\t\t\t\t\t\t\tarr[j] = temp;\n\t\t\t\t\t\t} else\
    \ {\n\t\t\t\t\t\t\ttemp = arr[j];\n\t\t\t\t\t\t\tarr[j] = arr[i];\n\t\t\t\t\t\t\
    \tarr[i] = temp;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tflag[j] = 0;\n\t\t\t\t\t\tlastIndex\
    \ = i - 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag[j] = 1;\n\t\t\t\t\t\tlastIndex\
    \ = j;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlastIndex = j;\n\t\t\t\t\tflag[j]\
    \ = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpa_b8vqto.js:61:12)\n    at Object.<anonymous> (/tmp/tmpa_b8vqto.js:70:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => {\n    const ones_a = parseInt(a / 2 ** 32 / 2, 10);\n\
    \    const ones_b = parseInt(b / 2 ** 32 / 2, 10);\n    return ones_a - ones_b;\n\
    \  });\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq1kij61e.ts(13,29): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpq1kij61e.ts(14,29): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  for (let i = 0; i < len - 1; ++i) {\n    for (let j = i + 1;\
    \ j < len; ++j) {\n      const ones = count_ones(arr[j]);\n      if (ones < count_ones(arr[i]))\
    \ {\n        swap(arr, j, i);\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq_i4ubt0.ts(15,20): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpq_i4ubt0.ts(16,18): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpq_i4ubt0.ts(17,9): error TS2304: Cannot find name ''swap''.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tlet zeros\
    \ = arr.filter((e) => e === 0);\n\tif (zeros.length > 0) {\n\t\tzeros.sort((a,\
    \ b) => a - b);\n\t\treturn zeros.reverse();\n\t}\n\tlet ones = arr.filter((e)\
    \ => e === 1);\n\tif (ones.length > 0) {\n\t\tones = ones.sort((a, b) => a - b);\n\
    \t\treturn ones;\n\t}\n\tlet decimals = arr.filter((e) => e % 1 === 0);\n\tif\
    \ (decimals.length > 0) {\n\t\tdecimals = decimals.sort((a, b) => a - b);\n\t\t\
    return decimals;\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmphfngpc6g.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmphfngpc6g.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let map\
    \ = new Map<number, number[]>();\n  for (let i = 0; i < arr.length; i++) {\n \
    \   if (map.has(arr[i])) {\n      map.get(arr[i])!.push(i);\n    } else {\n  \
    \    map.set(arr[i], [i]);\n    }\n  }\n\n  let result = [];\n  for (let [key,\
    \ value] of map) {\n    value.sort((a, b) => a - b);\n    result = result.concat(value);\n\
    \  }\n\n  for (let i = result.length - 1; i >= 0; i--) {\n    result.splice(i,\
    \ 1);\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp62xs9rrh.ts(12,17): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) {\n    return arr;\n  }\n\n  const map = {};\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const item = arr[i];\n    if (map[item]) {\n      map[item]++;\n\
    \    } else {\n      map[item] = 1;\n    }\n  }\n\n  const keys = Object.keys(map);\n\
    \n  if (keys.length === 1) {\n    return arr;\n  }\n\n  const sorted = keys.reduce((arr,\
    \ key) => {\n    arr.push(key);\n    return arr;\n  }, []);\n  const result =\
    \ [];\n  sorted.forEach(key => {\n    if (map[key]) {\n      result.push(key);\n\
    \      map[key]--;\n    }\n  });\n  return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '1',\n  '2',\n\
    \  '3',\n  '4',\n  '5'\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp176q5t0t.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp176q5t0t.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '1', '2',\
    \ '3', '4', '5' ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => a > b ? 1 : -1);\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp1pscbt7k.js:18:12)\n    at Object.<anonymous> (/tmp/tmp1pscbt7k.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return _.sortBy(arr,\
    \ (_, index) => parseInt(_.bitLength(arr[index])));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftj22h4_.ts(12,10): error TS2304: Cannot find name
    ''_''.

    '
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let n =\
    \ arr.length;\n  if (n < 2) {\n    return arr;\n  }\n\n  // Sort the array in\
    \ ascending order\n  let aux = [];\n  let cur = 0;\n  let curIndex = 0;\n  for\
    \ (let i = 0; i < n; i++) {\n    cur = arr[i];\n    while (curIndex < n) {\n \
    \     if (curIndex === n) {\n        aux[curIndex] = cur;\n        curIndex++;\n\
    \      } else {\n        if (cur & 1) {\n          aux[curIndex + 1] = cur;\n\
    \          curIndex++;\n        } else {\n          curIndex++;\n        }\n \
    \     }\n      cur = arr[curIndex];\n    }\n  }\n\n  // Sort the array in descending\
    \ order\n  cur = arr[0];\n  for (let i = 0; i < n; i++) {\n    while (curIndex\
    \ >= 0) {\n      if (curIndex === -1) {\n        aux[curIndex] = cur;\n      \
    \  curIndex--;\n      } else {\n        curIndex--;\n      }\n      cur = arr[curIndex];\n\
    \    }\n  }\n  return aux;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <1 empty\
    \ item>,\n  1,\n  5,\n  <1 empty item>,\n  3\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp81d9k51r.js:58:12)\n\
    \    at Object.<anonymous> (/tmp/tmp81d9k51r.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <1 empty\
    \ item>, 1, 5, <1 empty item>, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  debugger;\n\
    \  // Sorting array based on number of ones in their binary representation in\
    \ ascending order.\n  // It must be implemented like this:\n  // >>> sort_array([1,\
    \ 5, 2, 3, 4])\n  // [1, 2, 3, 4, 5]\n  // >>> sort_array([-2, -3, -4, -5, -6])\n\
    \  // [-6, -5, -4, -3, -2]\n  // >>> sort_array([1, 0, 2, 3, 4])\n  // [0, 1,\
    \ 2, 3, 4]\n  return arr.sort((a: number, b: number) => {\n    // Sorting array\
    \ based on decimal value.\n    if (a > b) {\n      return 1;\n    } else if (a\
    \ < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp29iux7zw.js:37:12)\n    at Object.<anonymous> (/tmp/tmp29iux7zw.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979661
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!arr\
    \ || arr.length === 0) {\n    return arr;\n  }\n  arr.sort((a: number, b: number)\
    \ => {\n    if (a === b) {\n      return 0;\n    }\n    const ones = (a & 0b11110000)\
    \ >> 0;\n    const tens = (a & 0b00001111) >> 4;\n    const hundreds = (a & 0b00000011)\
    \ >> 8;\n    const tens_ones = (a & 0b00000001) >> 10;\n    const hundreds_ones\
    \ = (a & 0b00000001) >> 11;\n    const tens_tens = (a & 0b00001111) >> 6;\n  \
    \  const tens_hundreds = (a & 0b00000110) >> 1;\n    const hundreds_tens = (a\
    \ & 0b01000110) >> 2;\n    const hundreds_hundreds = (a & 0b01000110) >> 3;\n\
    \    const ones_tens = (a & 0b11000111) >> 7;\n    const ones_hundreds = (a &\
    \ 0b11001000) >> 5;\n    const ones_tens_hundreds = (a & 0b11001011) >> 3;\n \
    \   const ones_hundreds_tens = (a & 0b11001100) >> 1;\n    const ones_hundreds_hundreds\
    \ = (a & 0b11011100) >> 0;\n    const tens_hundreds_tens = (a & 0b11111000) >>\
    \ 4;\n    const hundreds_hundreds_tens = (a & 0b11101111) >> 6;\n    const tens_hundreds_hundreds\
    \ = (a & 0b11111110) >> 8;\n    const ones_hundreds_hundreds_tens = (a & 0b11111101)\
    \ >> 9;\n    const ones_hundreds_hundreds_hundreds = (a & 0b11111011) >> 3;\n\
    \    const ones_hundreds_hundreds_hundreds_tens = (a & 0b11110100) >> 6;\n   \
    \ const ones_hundreds_hundreds_hundreds_hundreds = (a & 0b11110111) >> 4;\n  \
    \  const ones_hundreds_hundreds_hundreds_hundreds_tens = (a & 0b11101100) >> 8;\n\
    \    const ones_hundreds_hundreds_hundreds_hundreds_hundreds = (a & 0b11110111)\
    \ >> 5;\n    const ones_hundreds_hundreds_hundreds_hundreds_hundreds_tens = (a\
    \ & 0b11101111) >> 9;\n    const tens_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds\
    \ = (a & 0b11111110) >> 11;\n    const ones_hundreds_hundreds_hundreds_hundreds_hundreds_hundreds_tens\
    \ = (a \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo974v00u.ts(45,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpo974v00u.ts(61,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // Write\
    \ your code here.\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcxz5jp8z.ts(11,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659979663
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!(arr\
    \ instanceof Array)) return arr;\n  const len = arr.length;\n  for (let i = 0;\
    \ i < len; i++)\n    if (arr[i] < 0) arr[i] += Math.pow(2, len) * Math.pow(2,\
    \ -arr[i]);\n  for (let i = 0; i < len; i++)\n    arr[i] = arr[i] < 0 ? Math.pow(2,\
    \ len) * Math.pow(2, Math.abs(arr[i])) - 1 : arr[i];\n  return arr.sort((a, b)\
    \ => a > b ? 1 : -1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpsccnmmwc.js:25:12)\n    at Object.<anonymous> (/tmp/tmpsccnmmwc.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    arr[i] = getCount(arr[i])\n  }\n  return\
    \ sortNumber(arr)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxlvj7tlv.ts(13,14): error TS2304: Cannot find name
    ''getCount''.

    ../../../../../tmp/tmpxlvj7tlv.ts(15,10): error TS2304: Cannot find name ''sortNumber''.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const numOfOnes\
    \ = sort_arr(arr.map(bin => bin.match(/1/g)[0].length));\n  const numOfDigits\
    \ = sort_arr(arr.map(bin => bin.match(/1/g).length));\n  let res = arr.map((n,\
    \ i) => numOfOnes[i] == numOfDigits[i] ? n : numOfDigits[i] > numOfOnes[i] ? n\
    \ : numOfOnes[i] == numOfDigits[i] ? numOfOnes[i] : numOfDigits[i]);\n  if (res.some(n\
    \ => n != n)) res = res.sort();\n  return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj09544d5.ts(12,21): error TS2552: Cannot find name
    ''sort_arr''. Did you mean ''sort_array''?

    ../../../../../tmp/tmpj09544d5.ts(12,49): error TS2339: Property ''match'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpj09544d5.ts(13,23): error TS2552: Cannot find name ''sort_arr''.
    Did you mean ''sort_array''?

    ../../../../../tmp/tmpj09544d5.ts(13,51): error TS2339: Property ''match'' does
    not exist on type ''number''.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) {\n    return arr;\n  }\n  const len = arr.length;\n  if (arr.length\
    \ === 1) {\n    return arr;\n  }\n  let count = 0;\n  for (let i = 0; i < len;\
    \ i++) {\n    const item = arr[i];\n    const num = item;\n    while (num > 0)\
    \ {\n      const remainder = num % 10;\n      num = num / 10;\n      if (remainder\
    \ > 0) {\n        count++;\n        arr.splice(i, 0, remainder);\n      }\n  \
    \  }\n  }\n  arr.splice(len, 0, count);\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprnywhf24.ts(25,7): error TS2588: Cannot assign to
    ''num'' because it is a constant.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const copy\
    \ = arr.slice();\n  copy.sort((a, b) => {\n    const aVal = binToDec(binToBin(a));\n\
    \    const bVal = binToDec(binToBin(b));\n    return (aVal - bVal);\n  });\n \
    \ return copy;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpss93645v.ts(14,18): error TS2304: Cannot find name
    ''binToDec''.

    ../../../../../tmp/tmpss93645v.ts(14,27): error TS2304: Cannot find name ''binToBin''.

    ../../../../../tmp/tmpss93645v.ts(15,18): error TS2304: Cannot find name ''binToDec''.

    ../../../../../tmp/tmpss93645v.ts(15,27): error TS2304: Cannot find name ''binToBin''.

    '
  timestamp: 1659979663
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a, b) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpmsmr7ekm.js:17:12)\n    at Object.<anonymous> (/tmp/tmpmsmr7ekm.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const n\
    \ = arr.length;\n  arr.sort((a, b) => {\n    const aOnes = count_ones(a);\n  \
    \  const bOnes = count_ones(b);\n    if (aOnes === bOnes) {\n      return a -\
    \ b;\n    } else {\n      return aOnes - bOnes;\n    }\n  });\n  return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk8tgvxuv.ts(14,19): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpk8tgvxuv.ts(15,19): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979663
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => {\n    const ones = Math.floor(a).toString(2).split('')\n\
    \    const zeros = Math.floor(b).toString(2).split('')\n    return ones.length\
    \ - zeros.length || a > b ? -1 : 1\n  })\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp46oronm8.js:21:12)\n    at Object.<anonymous> (/tmp/tmp46oronm8.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    const a_bit = a >> 31;\n    const b_mask = b >>\
    \ 31;\n    const b_bit = b & b_mask;\n    if (a_bit === b_bit) {\n      return\
    \ a < b ? -1 : 1;\n    } else if (a_bit) {\n      return -1;\n    } else if (b_bit)\
    \ {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpeaeskmxu.js:34:12)\n    at Object.<anonymous> (/tmp/tmpeaeskmxu.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  var result:\
    \ number[] = [];\n  var ones = 0;\n  var i = 0;\n  while (i < arr.length) {\n\
    \    ones = binary_search(arr[i]) - binary_search(arr[i] - 1);\n    if (ones ===\
    \ 0) result.push(arr[i]);\n    else if (ones === 1) {\n      result.push(arr[i]\
    \ + 1);\n      result.push(arr[i] - 1);\n    }\n    else result.push(arr[i] -\
    \ ones);\n    i++;\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr6dr120_.ts(16,12): error TS2304: Cannot find name
    ''binary_search''.

    ../../../../../tmp/tmpr6dr120_.ts(16,36): error TS2304: Cannot find name ''binary_search''.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ === 0) return arr;\n    if (arr.length === 1) return arr[0];\n\n    let ones:\
    \ number[] = [];\n    let binary: number[] = [];\n    let dec: number[] = [];\n\
    \n    for (let val of arr) {\n        binary[binary.length] = val.toString(2);\n\
    \        dec.push(val / Math.pow(2, binary.length));\n        ones.push(0);\n\
    \    }\n\n    for (let i = 0; i < ones.length; i++) {\n        for (let j = 0;\
    \ j < ones.length; j++) {\n            if (ones[j] > ones[i]) {\n            \
    \    let tmp = binary[j];\n                binary[j] = binary[i];\n          \
    \      binary[i] = tmp;\n                tmp = dec[j];\n                dec[j]\
    \ = dec[i];\n                dec[i] = tmp;\n                tmp = ones[j];\n \
    \               ones[j] = ones[i];\n                ones[i] = tmp;\n         \
    \   }\n        }\n    }\n    \n    let result = binary;\n    for (let i = 0; i\
    \ < ones.length; i++) {\n        result += ones[i] * dec[i];\n    }\n    \n  \
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp80334t6g.ts(13,27): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    ../../../../../tmp/tmp80334t6g.ts(20,9): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp80334t6g.ts(43,9): error TS2365: Operator ''+='' cannot
    be applied to types ''number[]'' and ''number''.

    '
  timestamp: 1659979663
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const n\
    \ = arr.length\n  const sortArr = new Array(n)\n\n  // Fill sortArr arr into its\
    \ binary representation arr_binary\n  for (let i = 0; i < n; i++) {\n    const\
    \ arr_binary = arrayToBin(arr[i])\n    for (let j = 0; j < arr_binary.length;\
    \ j++) {\n      if (arr_binary[j] === '1') {\n        sortArr[i] = j\n       \
    \ break\n      }\n    }\n  }\n  sortArr.sort((a, b) => a - b)\n\n  // Fill sortArr\
    \ arr into its decimal representation arr_decimal\n  for (let i = 0; i < n; i++)\
    \ {\n    const arr_decimal = binaryToDecimal(sortArr[i])\n    sortArr[i] = arr_decimal\n\
    \  }\n\n  return sortArr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk70si6ab.ts(17,24): error TS2304: Cannot find name
    ''arrayToBin''.

    ../../../../../tmp/tmpk70si6ab.ts(29,25): error TS2304: Cannot find name ''binaryToDecimal''.

    '
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ <= 1) {\n        return arr\n    }\n    let result = []\n    let index = 0\n\
    \    let maxIndex = 0\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] >= 0) {\n            result[index++] = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    let tmpArr = []\n    while (index > 0) {\n      \
    \  let min = Math.min(...result)\n        result[index--] = maxIndex\n       \
    \ tmpArr[maxIndex] = min\n    }\n    return tmpArr\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <4 empty\
    \ items>,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpypim3o8w.js:35:12)\n    at Object.<anonymous> (/tmp/tmpypim3o8w.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <4 empty\
    \ items>, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    // write\
    \ your code here\n    arr.sort((a: number, b: number) => {\n        const c =\
    \ a % 2;\n        const d = b % 2;\n        if (c === d) {\n            return\
    \ a - b;\n        } else if (c === 0) {\n            return a - b;\n        }\
    \ else if (d === 0) {\n            return b - a;\n        } else {\n         \
    \   return b - a;\n        }\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  2,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpxsm0l9c9.js:34:12)\n    at Object.<anonymous> (/tmp/tmpxsm0l9c9.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 2,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  let count = new Array(len).fill(0);\n\
    \  for (let i = 0; i < len; i++) {\n    count[arr[i]]++;\n  }\n\n  const countArr\
    \ = count.map((num) => -num);\n  let result = [];\n  for (let i = 0; i < len;\
    \ i++) {\n    for (let j = 0; j < countArr[i]; j++) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr__r43hh.ts(16,30): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let counts:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    let x = arr[i];\n\
    \    counts[x] ? counts[x]++ : (counts[x] = 1);\n  }\n\n  counts = counts.sort((a:\
    \ number, b: number) => {\n    return a - b;\n  });\n  counts = counts.map(c =>\
    \ c.toString().split('').reverse().join(''));\n\n  let newArr: number[] = [];\n\
    \  for (let i = 0; i < arr.length; i++) {\n    let x = arr[i];\n    let index\
    \ = counts[x] ? counts[x] - 1 : 0;\n    let value = counts[index];\n    newArr[i]\
    \ = value + x;\n  }\n  return newArr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp7dkpl1gz.ts(21,3): error TS2322: Type 'string[]'\
    \ is not assignable to type 'number[]'.\n  Type 'string' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const counts:\
    \ number[] = [];\n  for (const num of arr) {\n    counts.push(count_ones(num));\n\
    \  }\n  counts = counts.sort();\n  const nums = arr.filter((_, i) => counts[i]\
    \ >= counts[counts.length - 1]);\n  return nums;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_aocc821.ts(14,17): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp_aocc821.ts(16,3): error TS2588: Cannot assign to ''counts''
    because it is a constant.

    '
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  var result:\
    \ number[] = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    var count =\
    \ 1;\n    var num = 0;\n\n    while ((num = (arr[i] & count) != 0)) {\n      result.push(num);\n\
    \      count++;\n    }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgl1a5vw6.ts(18,13): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    '
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) return arr;\n  arr.sort((a: number, b: number) => a - b);\n  if (arr[0]\
    \ < 0) arr.push(0);\n  if (arr[0] > 0) arr.unshift(0);\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp245_80tq.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp245_80tq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let n =\
    \ arr.length;\n  if (n < 2) {\n    return arr;\n  }\n\n  const map = new Map();\n\
    \  for (var i = 0; i < arr.length; i++) {\n    const str = bin(arr[i]);\n    if\
    \ (!map.has(str)) {\n      map.set(str, 0);\n    }\n    map.set(str, map.get(str)\
    \ + 1);\n  }\n\n  map.forEach((v, k) => map.set(k, map.get(k) * -1));\n\n  arr.sort((a,\
    \ b) => {\n    a = bin(a);\n    b = bin(b);\n    if (map.has(a) && map.has(b))\
    \ {\n      return map.get(b) - map.get(a);\n    }\n    if (map.has(a)) {\n   \
    \   return -1;\n    }\n    if (map.has(b)) {\n      return 1;\n    }\n    return\
    \ 0;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpscrxcmov.ts(17,19): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    ../../../../../tmp/tmpscrxcmov.ts(19,17): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmpscrxcmov.ts(29,9): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmpscrxcmov.ts(30,9): error TS2304: Cannot find name ''bin''.

    '
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => a - b)\n    return arr\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpe6e50tp1.js:18:12)\n    at Object.<anonymous> (/tmp/tmpe6e50tp1.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979664
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length\n  const sorted = new Array(len)\n  for (let i = 0; i < len; ++i)\
    \ {\n    sorted[i] = arr.slice(0).sort((a, b) => a - b)\n  }\n  return sorted\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    1,\n\
    \    2,\n    3,\n    4,\n    5\n  ],\n  [\n    1,\n    2,\n    3,\n    4,\n  \
    \  5\n  ],\n  [\n    1,\n    2,\n    3,\n    4,\n    5\n  ],\n  [\n    1,\n  \
    \  2,\n    3,\n    4,\n    5\n  ],\n  [\n    1,\n    2,\n    3,\n    4,\n    5\n\
    \  ]\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n  \
    \  at test (/tmp/tmppcftmwy3.js:22:12)\n    at Object.<anonymous> (/tmp/tmppcftmwy3.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    [ 1,\
    \ 2, 3, 4, 5 ],\n    [ 1, 2, 3, 4, 5 ],\n    [ 1, 2, 3, 4, 5 ],\n    [ 1, 2, 3,\
    \ 4, 5 ],\n    [ 1, 2, 3, 4, 5 ]\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let _arr:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    _arr.push((arr[i]\
    \ & 0b1) == 0 ? arr[i] : -arr[i]);\n  }\n  return _arr.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -5,\n  -3,\n\
    \  -1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpdjgg8kh9.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdjgg8kh9.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -5, -3,\
    \ -1, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => {\n    const a_ones = parseInt(binStr(a, 2), 10)\n    const b_ones = parseInt(binStr(b,\
    \ 2), 10)\n    if (a_ones < b_ones) {\n      return -1\n    } else if (a_ones\
    \ > b_ones) {\n      return 1\n    } else {\n      return parseInt(binStr(a, 10),\
    \ 10) - parseInt(binStr(b, 10), 10)\n    }\n  })\n  return arr\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq6uaabr2.ts(13,29): error TS2304: Cannot find name
    ''binStr''.

    ../../../../../tmp/tmpq6uaabr2.ts(14,29): error TS2304: Cannot find name ''binStr''.

    ../../../../../tmp/tmpq6uaabr2.ts(20,23): error TS2304: Cannot find name ''binStr''.

    ../../../../../tmp/tmpq6uaabr2.ts(20,53): error TS2304: Cannot find name ''binStr''.

    '
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ zeroCount: number = count_zeros(arr);\n    console.assert(zeroCount > 0);\n\
    \    const count = arr.length;\n    const minValueIndex = zeroCount;\n    const\
    \ maxValueIndex = count - zeroCount;\n    const minValue = arr[minValueIndex];\n\
    \    const maxValue = arr[maxValueIndex];\n    const values = [];\n    let minValueIndex\
    \ = minValueIndex;\n    let maxValueIndex = maxValueIndex;\n    let minValue =\
    \ arr[minValueIndex];\n    let maxValue = arr[maxValueIndex];\n    let index;\n\
    \    for (let index = 0; index < count; ++index) {\n        const value = arr[index];\n\
    \        if (value === minValue) {\n            minValueIndex = index;\n     \
    \       minValue = value;\n        } else if (value === maxValue) {\n        \
    \    maxValueIndex = index;\n            maxValue = value;\n        } else {\n\
    \            values.push(value);\n        }\n    }\n    values.sort(\n       \
    \ (a, b) => a - b || count_ones(bin(Math.abs(a), minValueIndex)) - count_ones(bin(Math.abs(b),\
    \ maxValueIndex)),\n    );\n    return values;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp34d2q2ez.ts(12,31): error TS2304: Cannot find name
    ''count_zeros''.

    ../../../../../tmp/tmp34d2q2ez.ts(15,11): error TS2451: Cannot redeclare block-scoped
    variable ''minValueIndex''.

    ../../../../../tmp/tmp34d2q2ez.ts(16,11): error TS2451: Cannot redeclare block-scoped
    variable ''maxValueIndex''.

    ../../../../../tmp/tmp34d2q2ez.ts(17,11): error TS2451: Cannot redeclare block-scoped
    variable ''minValue''.

    ../../../../../tmp/tmp34d2q2ez.ts(18,11): error TS2451: Cannot redeclare block-scoped
    variable ''maxValue''.

    ../../../../../tmp/tmp34d2q2ez.ts(20,9): error TS2451: Cannot redeclare block-scoped
    variable ''minValueIndex''.

    ../../../../../tmp/tmp34d2q2ez.ts(21,9): error TS2451: Cannot redeclare block-scoped
    variable ''maxValueIndex''.

    ../../../../../tmp/tmp34d2q2ez.ts(22,9): error TS2451: Cannot redeclare block-scoped
    variable ''minValue''.

    ../../../../../tmp/tmp34d2q2ez.ts(23,9): error TS2451: Cannot redeclare block-scoped
    variable ''maxValue''.

    ../../../../../tmp/tmp34d2q2ez.ts(28,13): error TS2588: Cannot assign to ''minValueIndex''
    because it is a constant.

    ../../../../../tmp/tmp34d2q2ez.ts(29,13): error TS2588: Cannot assign to ''minValue''
    because it is a constant.

    ../../../../../tmp/tmp34d2q2ez.ts(31,13): error TS2588: Cannot assign to ''maxValueIndex''
    because it is a constant.

    ../../../../../tmp/tmp34d2q2ez.ts(32,13): error TS2588: Cannot assign to ''maxValue''
    because it is a constant.

    ../../../../../tmp/tmp34d2q2ez.ts(38,28): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp34d2q2ez.ts(38,39): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmp34d2q2ez.ts(38,74): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp34d2q2ez.ts(38,85): error TS2304: Cannot find name ''bin''.

    '
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return\
    \ -1;\n    } else {\n      return 0;\n    }\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpqxoka7jm.js:27:12)\n    at Object.<anonymous> (/tmp/tmpqxoka7jm.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = i; j < arr.length; j++) {\n\
    \      if (arr[i] > arr[j]) {\n        let temp = arr[i];\n        arr[i] = arr[j];\n\
    \        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp62bhkkr0.js:26:12)\n    at Object.<anonymous> (/tmp/tmp62bhkkr0.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr = [...arr];\n\
    \  arr.sort((a, b) => {\n    let a1 = count_ones(a).toString(), b1 = count_ones(b).toString();\n\
    \    return a1 > b1 ? 1 : a1 < b1 ? -1 : 0;\n  });\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8deh19y1.ts(14,14): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp8deh19y1.ts(14,45): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if(arr.length\
    \ === 0) return arr\n  let len = arr.length\n  let result = new Array(len)\n \
    \ let cur = 0\n  let index = 0\n  result[index] = arr[cur]\n  cur++\n  while(cur\
    \ < len) {\n    while(arr[cur] === 0) {\n      cur++\n    }\n    while(arr[cur]\
    \ === 1) {\n      cur++\n    }\n    result[index] = arr[cur]\n    cur++\n    index++\n\
    \  }\n  return result\n}\n</code>\nI do not have the time to test this myself\
    \ right now, but I hope I helped. Do post any questions, if needed.\n<|/ a dscore=0\
    \ |>\n<| c |>\nThank you for your answer, but I am not allowed to use any built\
    \ in functions. The problem is more mathematical/algorithmic than code-specific.\n\
    <|/ c |>\n<| c |>\nHow is this different from my answer?\n<|/ c |>\n<| c |>\n\
    I'm sorry but I must agree with you, this is different from your answer as I stated\
    \ in my question. I apologize for this.\n<|/ c |>\n<| c |>\nAh, I see. Well, it\
    \ is hard to know if this is possible without doing some sort of brute-force calculation.\
    \ Maybe someone else will come up with a solution using iteration and modulo,\
    \ though.\n<|/ c |>\n<| c |>\nWell I'm just too lazy to think up some code right\
    \ now, but I'll try and post something when I can.\n<|/ c |>\n<| a tags=algorithm,sorting\
    \ |>\nI have been looking for something similar but I found a solution that works\
    \ really good.\nThe idea is to divide each number by two, and if the number is\
    \ odd, multiply it by two. And so on.\n<code>\nprivate int sortNumber(int n) {\n\
    \    int result = 0;\n    int currentNumber = 1;\n\n    while (n/2 > 0) {\n  \
    \      n /= 2;\n        currentNumber *= 2;\n    }\n    while (n > 1) {\n    \
    \    n /= 2;\n        result = currentNumber + result;\n        currentNumber\
    \ *= 2;\n    }\n\n    return result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I wouldn't call this \"sorting numbers\". You're just treating them as binary\
    \ digits, while you didn't have to. You could just treat each number as decimal\
    \ digits and sort them as they are.\n<|/ c |>\n<| a tags=algorithm,sorting dscore=0\
    \ |>\n<code>\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2a0v12cy.ts(32,2): error TS1110: Type expected.

    ../../../../../tmp/tmp2a0v12cy.ts(32,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp2a0v12cy.ts(33,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,15): error TS1005: '')'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,59): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,61): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,88): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,99): error TS1109: Expression expected.

    ../../../../../tmp/tmp2a0v12cy.ts(33,102): error TS1005: ''('' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(34,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp2a0v12cy.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp2a0v12cy.ts(34,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp2a0v12cy.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp2a0v12cy.ts(35,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp2a0v12cy.ts(36,7): error TS1005: '')'' expected.

    ../../../../../tmp/tmp2a0v12cy.ts(36,11): error TS1005: '';'' expected.

    ../../'
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // write\
    \ your code here\n}\n</code>\n<|/ q dscore=0 |>\n<| c |>\nWhat do you mean by\
    \ \"sort them in ascending order\"? You want them to have no leading zeros? Do\
    \ they have to be consecutive?\n<|/ c |>\n<| c |>\n, yes, I mean no leading 0s.\n\
    <|/ c |>\n<| c |>\nDo they have to be consecutive as in the question you've linked?\n\
    <|/ c |>\n<| c |>\n, yes, they have to be consecutive\n<|/ c |>\n<| c |>\nThen\
    \ the answer is simple, just convert them to binary strings using the `format`\
    \ function, then convert the resulting strings to integers (which are already\
    \ sorted), and finally convert them to hexadecimals.\n<|/ c |>\n<| a dscore=0\
    \ |>\nThe algorithm you linked has two steps: sorting the numbers and converting\
    \ them to hexadecimal representations. To sort the numbers, you can just use their\
    \ ASCII codes, because they already are sorted. Assuming you want to sort the\
    \ array in place, just use the Array.prototype.sort() method with the default\
    \ comparison.\nTo convert them to hexadecimals, use the String.prototype.toString()\
    \ method.\nHere is a small example, with some comments in the code to illustrate\
    \ what it does:\n\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg8_g2hg1.ts(14,2): error TS1110: Type expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(14,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg8_g2hg1.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg8_g2hg1.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(16,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,18): error TS1005: '')'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,57): error TS1005: '':'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,62): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,86): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,96): error TS1005: '':'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,101): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,109): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(17,112): error TS1005: '';'' expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(18,3): error TS1110: Type expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpg8_g2hg1.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(19,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(20,1): error TS1109: Expression expected.

    ../../../../../tmp/tmpg8_g2hg1.ts(20,10):'
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ === 0) {\n        return arr;\n    }\n    const result: number[] = [];\n   \
    \ let next = 0;\n    for (let i = 0; i < arr.length; ++i) {\n        while (next\
    \ < arr.length && arr[next] < arr[i]) {\n            next++;\n        }\n    \
    \    result.push(arr[i]);\n        if (next === arr.length) {\n            result\
    \ .push(-arr[i]);\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpp6ne8gfg.js:31:12)\n    at Object.<anonymous> (/tmp/tmpp6ne8gfg.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) {\n    return arr\n  }\n\n  const maxOneCounts = arr.reduce((maxOneCounts,\
    \ cur) => {\n    if (maxOneCounts[cur] > maxOneCounts[cur + 1]) {\n      return\
    \ maxOneCounts\n    } else {\n      maxOneCounts[cur + 1] += 1\n      return maxOneCounts\n\
    \    }\n  }, [0])\n\n  const maxOneCount = Math.max(...maxOneCounts)\n\n  if (maxOneCount\
    \ === 0) {\n    return arr\n  }\n\n  let decimal = maxOneCount\n  const decimalIndex\
    \ = 0\n  const decimalIndexArr = new Array(maxOneCount).fill(-1)\n  while (decimal\
    \ !== 0) {\n    const decimalCount = Math.floor(decimal / 2)\n    decimalIndexArr.splice(decimalIndex,\
    \ 0, decimalIndex)\n    decimal -= decimalCount * 2\n    decimal %= 2\n  }\n\n\
    \  const arrWithDecimalIndex = arr.map((cur) => {\n    if (decimalIndexArr.indexOf(cur)\
    \ > -1) {\n      return cur\n    }\n\n    const decimalValue = maxOneCount - 1\
    \ - decimalIndexArr.indexOf(cur)\n    return decimalValue * cur\n  })\n\n  return\
    \ arrWithDecimalIndex\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpolu6igix.ts(33,50): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ result = [...arr];\n    for (let i = 0; i < arr.length; i++) {\n        result[i]\
    \ = result[i] > 0 ? result[i] - 1 : 0;\n    }\n    const resultReverse = result.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        result[i] = resultReverse < 0 ? resultReverse[i] : resultReverse;\n\
    \    }\n    return result.sort(function (a, b) {\n        return a - b;\n    });\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpzl9b0oim.ts(20,9): error TS2322: Type 'number | number[]'\
    \ is not assignable to type 'number'.\n  Type 'number[]' is not assignable to\
    \ type 'number'.\n../../../../../tmp/tmpzl9b0oim.ts(20,21): error TS2365: Operator\
    \ '<' cannot be applied to types 'number[]' and 'number'.\n"
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!Array.isArray(arr))\
    \ {\n    throw new Error('Parameter \"arr\" should be an array of numbers');\n\
    \  }\n\n  arr.sort((a, b) => {\n    const diff = count_ones(a) - count_ones(b);\n\
    \    if (diff === 0) return count_ones(a) - count_ones(b);\n    return diff;\n\
    \  });\n\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppe7onhxy.ts(17,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppe7onhxy.ts(17,34): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmppe7onhxy.ts(18,28): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmppe7onhxy.ts(18,44): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let ret\
    \ = [];\n  let map = {};\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ num = arr[i];\n    if (map[num] === undefined) {\n      map[num] = 1;\n    \
    \  ret.push(num);\n    } else {\n      map[num]++;\n    }\n  }\n  for (let key\
    \ in map) {\n    ret.push(key);\n  }\n  return ret;\n}\n\n<|/ file filename=lib.es2017.full.d.ts\
    \ ext=.ts |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzj_1pfqr.ts(29,3): error TS1110: Type expected.

    ../../../../../tmp/tmpzj_1pfqr.ts(29,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let counter:\
    \ number = 0;\n    for (let num of arr) {\n        if (num >= 0) {\n         \
    \   counter++;\n        }\n    }\n    counter = counter * 2 + 1;\n    for (let\
    \ i = counter; i < arr.length; i++) {\n        arr.sort(function (a: number, b:\
    \ number) {\n            return a - b;\n        });\n    }\n    return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpsyxochfg.js:30:12)\n    at Object.<anonymous> (/tmp/tmpsyxochfg.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ === 0) {\n        return arr;\n    }\n    const len = arr.length;\n    let count\
    \ = new Array(len);\n    count[0] = 0;\n    for (let i = 1; i < len; i++) {\n\
    \        count[i] = count[i - 1] + arr[i - 1];\n    }\n    let ones_cnt = 0;\n\
    \    const max_cnt_of_ones = count[0];\n    let min_cnt_of_ones = count[0];\n\
    \    for (let i = len - 1; i > 0; i--) {\n        const one_cnt = arr[i - 1];\n\
    \        if (one_cnt > max_cnt_of_ones) {\n            max_cnt_of_ones = one_cnt;\n\
    \        }\n        if (one_cnt < min_cnt_of_ones) {\n            min_cnt_of_ones\
    \ = one_cnt;\n        }\n        count[i] = count[i - 1] + one_cnt;\n        const\
    \ max_one_cnt = count[i];\n        if (max_one_cnt === max_cnt_of_ones) {\n  \
    \          ones_cnt += 1;\n        }\n        else if (max_one_cnt === min_cnt_of_ones)\
    \ {\n            ones_cnt -= 1;\n        }\n    }\n    return arr.sort((a, b)\
    \ => {\n        const a_one_cnt = a[ones_cnt];\n        const b_one_cnt = b[ones_cnt];\n\
    \        return a_one_cnt - b_one_cnt;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihhj58hj.ts(27,13): error TS2588: Cannot assign to
    ''max_cnt_of_ones'' because it is a constant.

    '
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        arr[i] = ~~(arr[i] / 2);\n    }\n   \
    \ return arr.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  1,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp8gsgiatq.js:20:12)\n    at Object.<anonymous> (/tmp/tmp8gsgiatq.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 1,\
    \ 2, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tlet counter\
    \ = 0;\n\tconst len = arr.length;\n\tconst result = new Array(len);\n\n\tfor (let\
    \ i = 0; i < len; i++) {\n\t\tlet n = arr[i];\n\t\tconst p = counter & 1;\n\t\t\
    let c = counter;\n\t\tcounter = counter >> 1;\n\n\t\tif (p === 1) {\n\t\t\tc =\
    \ ((c % 10) + 1) * 10;\n\t\t}\n\n\t\tresult[i] = c * n;\n\t}\n\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp3lt58us4.js:30:12)\n    at Object.<anonymous> (/tmp/tmp3lt58us4.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    arr[i] = sort_arr(arr[i]);\n  }\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_uk23w_r.ts(13,14): error TS2552: Cannot find name
    ''sort_arr''. Did you mean ''sort_array''?

    '
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const ones\
    \ = arr.reduce((acc, val) => {\n    if (val) {\n      return acc + 1;\n    }\n\
    \    return acc;\n  }, 0);\n  const decimals = arr.reduce((acc, val) => {\n  \
    \  if (val == 1) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n\
    \  const result = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n \
    \   }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  if (ones\
    \ != arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0)) {\n    throw\
    \ new Error('Incorrect number of ones in binary representation of arr');\n  }\n\
    \  if (decimals != arr.reduce((acc, val) => {\n    return acc + val;\n  }, 0))\
    \ {\n    throw new Error('Incorrect number of decimal values in arr');\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpq0l4u8t0.js:36\n        throw new Error('Incorrect number of ones\
    \ in binary representation of arr');\n        ^\n\nError: Incorrect number of\
    \ ones in binary representation of arr\n    at sort_array (/tmp/tmpq0l4u8t0.js:36:15)\n\
    \    at test (/tmp/tmpq0l4u8t0.js:48:22)\n    at Object.<anonymous> (/tmp/tmpq0l4u8t0.js:57:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979666
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j]\
    \ % 2 === 0) {\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j]\
    \ = tmp;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  3,\n  4,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_g908o52.js:26:12)\n    at Object.<anonymous> (/tmp/tmp_g908o52.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 3,\
    \ 4, 2 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let n =\
    \ 0;\n  const len = arr.length;\n  let temp;\n  let count = 0;\n  let num;\n \
    \ for (let i = 1; i < len; i++) {\n    num = arr[i];\n    temp = n;\n    while\
    \ (num) {\n      if (num & 1) {\n        if (temp === count) {\n          arr[n++]\
    \ = temp + 1;\n          count++;\n        } else {\n          arr[n++] = temp;\n\
    \          count++;\n          temp = n++;\n        }\n      } else {\n      \
    \  temp = n++;\n      }\n      num >>= 1;\n    }\n  }\n  arr[n] = temp;\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  3,\n  <1 empty item>,\n  6,\n  <1 empty item>,\n  7,\n  <1 empty\
    \ item>,\n  10,\n  <1 empty item>,\n  11,\n  <1 empty item>,\n  13\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp4e1xxkfq.js:44:12)\n\
    \    at Object.<anonymous> (/tmp/tmp4e1xxkfq.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \  5,\n    2,  3,\n    3,  <1 empty item>,\n    6,  <1 empty item>,\n    7,  <1\
    \ empty item>,\n    10, <1 empty item>,\n    11, <1 empty item>,\n    13\n  ],\n\
    \  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979667
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a === 0 && b === 0) {\n      return 0;\n    }\n    if (a ===\
    \ 0) {\n      return -1;\n    }\n    if (b === 0) {\n      return 1;\n    }\n\
    \    const ones = Math.pow(2, Math.ceil(Math.log2(b)));\n    if (a === b) {\n\
    \      return 0;\n    }\n    return Math.round(a * ones) / (ones - Math.round(b\
    \ * ones));\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbpv7mii6.ts(22,45): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979667
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    return binary_search(a, 1) === -1 ? binary_search(b, 1) : binary_search(b,\
    \ 1) === -1 ? a - b : binary_search(a, 1) === -1 ? b - a : binary_search(b, 1)\
    \ === -1 ? binary_search(a, 1) - binary_search(b, 1) : binary_search(a, 1) ===\
    \ -1 ? binary_search(b, 1) : binary_search(b, 1) - binary_search(a, 1);\n  });\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8z10kgvw.ts(13,12): error TS2304: Cannot find name
    ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,41): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,63): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,100): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,137): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,166): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,188): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,210): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,239): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,261): error TS2304: Cannot find name ''binary_search''.

    ../../../../../tmp/tmp8z10kgvw.ts(13,283): error TS2304: Cannot find name ''binary_search''.

    '
  timestamp: 1659979668
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const newArr:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    const ones = count_ones(arr[i]);\n\
    \    if (ones === 0) {\n      newArr.push(arr[i]);\n    } else if (ones === 1)\
    \ {\n      newArr.push(sort_number(arr[i]));\n    } else {\n      newArr.push(sort_number(arr[i]\
    \ * (1 << ones)));\n    }\n  }\n  return newArr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ehmfcry.ts(14,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp2ehmfcry.ts(18,19): error TS2304: Cannot find name ''sort_number''.

    ../../../../../tmp/tmp2ehmfcry.ts(20,19): error TS2304: Cannot find name ''sort_number''.

    '
  timestamp: 1659979668
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => {\n    const oneCount: number = bin(Math.abs(a)).length - 1; // -1 because\
    \ of the sign bit\n    const signCount: number = bin(Math.abs(b)).length - 1;\
    \ // -1 because of the sign bit\n    return signCount * oneCount - bin(a).length\
    \ - bin(b).length;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4zm0pjt_.ts(13,30): error TS2304: Cannot find name
    ''bin''.

    ../../../../../tmp/tmp4zm0pjt_.ts(14,31): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmp4zm0pjt_.ts(15,35): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmp4zm0pjt_.ts(15,51): error TS2304: Cannot find name ''bin''.

    '
  timestamp: 1659979668
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        if (a === b) {\n            return\
    \ 0;\n        }\n\n        const ones = count_ones(a);\n        const bOnes =\
    \ count_ones(b);\n\n        if (ones === bOnes) {\n            return a < b ?\
    \ -1 : 1;\n        } else {\n            return bOnes - ones;\n        }\n   \
    \ });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp94v1msal.ts(17,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp94v1msal.ts(18,23): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979668
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        if (a === b) {\n            return\
    \ 0;\n        } else if (a < b) {\n            return -1;\n        } else {\n\
    \            return 1;\n        }\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp_4lo7cqj.js:27:12)\n    at Object.<anonymous> (/tmp/tmp_4lo7cqj.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    const cnt = (num\
    \ === 1) ? 1 : Math.log2(num);\n    if (cnt === 0) continue;\n    const high =\
    \ cnt * -1;\n    let low = cnt;\n    while (low > high) {\n      const mid = parseInt((high\
    \ + low) / 2);\n      if (arr[mid] > num) {\n        low = mid;\n      } else\
    \ if (arr[mid] < num) {\n        high = mid;\n      } else {\n        arr[mid]\
    \ = arr[low];\n        arr[low] = num;\n        arr[high] = arr[high];\n     \
    \   arr[high + 1] = arr[high + 1];\n        low = mid + 1;\n        high = cnt;\n\
    \      }\n    }\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpayp6sdu4.ts(14,40): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpayp6sdu4.ts(19,28): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpayp6sdu4.ts(23,9): error TS2588: Cannot assign to ''high''
    because it is a constant.

    ../../../../../tmp/tmpayp6sdu4.ts(30,9): error TS2588: Cannot assign to ''high''
    because it is a constant.

    '
  timestamp: 1659979668
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const ones\
    \ = arr.filter(num => num !== 0);\n  let decimal: number | null = null;\n  let\
    \ decimalIndex = 0;\n  do {\n    decimal = ones[decimalIndex];\n    decimalIndex\
    \ += 1;\n  } while (decimal > 0);\n  let index: number = 0;\n  for (let i = 0;\
    \ i < ones.length; i += 1) {\n    const numOnes = ones[i];\n    if (numOnes !==\
    \ 0) {\n      ones[numOnes] = numOnes;\n      ones[i] = 0;\n    }\n    const isDecimal\
    \ = ones[i] !== 0;\n    if (isDecimal) {\n      ones[decimalIndex] = ones[decimalIndex]\
    \ + 1;\n      ones[i] = 0;\n      decimalIndex += 1;\n    }\n    if (isDecimal\
    \ && index < arr.length - 1) {\n      const swapIndex = index + 1;\n      ones[swapIndex]\
    \ = ones[decimalIndex];\n      ones[decimalIndex] = swapIndex;\n    }\n    index\
    \ += 1;\n  }\n  return ones;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpyqldg9vk.js:44:12)\n    at Object.<anonymous> (/tmp/tmpyqldg9vk.js:53:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort(function\
    \ (a, b) {\n        if (a.toString(2) > b.toString(2)) {\n            return -1;\n\
    \        } else if (a.toString(2) == b.toString(2)) {\n            return 0;\n\
    \        }\n        return 1;\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  4,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpyheezydv.js:26:12)\n    at Object.<anonymous> (/tmp/tmpyheezydv.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 4,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ ones = arr.filter(v => v !== 0);\n    return ones\n        .map(v => v / 2)\n\
    \        .sort((a, b) => a - b)\n        .map(v => v * 2)\n        .map(v => v\
    \ + 1)\n        .concat(\n            ones\n                .map(v => v * 2)\n\
    \                .sort((a, b) => a - b)\n                .map(v => v - 1)\n  \
    \      );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  5,\n  6,\n  1,\n  3,\n  5,\n  7,\n  9\n]\n\nshould loosely deep-equal\n\
    \n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpzx_sv8kr.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzx_sv8kr.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 3, 4, 5, 6,\n    1, 3, 5, 7, 9\n  ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a:\
    \ number, b: number) => {\n        if (a.binary() === b.binary()) {\n        \
    \    return a.decimal() - b.decimal();\n        } else {\n            return a.binary()\
    \ - b.binary();\n        }\n    });\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_69w76tn.ts(13,15): error TS2339: Property ''binary''
    does not exist on type ''number''.

    ../../../../../tmp/tmp_69w76tn.ts(13,30): error TS2339: Property ''binary'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp_69w76tn.ts(14,22): error TS2339: Property ''decimal'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp_69w76tn.ts(14,36): error TS2339: Property ''decimal'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp_69w76tn.ts(16,22): error TS2339: Property ''binary'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp_69w76tn.ts(16,35): error TS2339: Property ''binary'' does
    not exist on type ''number''.

    '
  timestamp: 1659979668
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // sort\
    \ by descending number of ones\n  arr.sort((a, b) => b - a);\n  // sort by ascending\
    \ decimal value\n  arr.sort((a, b) => a - b);\n  return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpdi7y6os2.js:21:12)\n    at Object.<anonymous> (/tmp/tmpdi7y6os2.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979668
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        if (a === b) return 0;\n\n   \
    \     const a_ones = binToInt(a).toString(2).split('');\n        const b_ones\
    \ = binToInt(b).toString(2).split('');\n\n        // We use decimal value here.\n\
    \        // Because the number of ones in binary representation\n        // of\
    \ the number is same.\n        // We compare decimal value of twos compliment\
    \ of each\n        // binary number.\n        return +a_ones[a_ones.length - 1]\
    \ - +b_ones[b_ones.length - 1];\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp41z54iro.ts(15,24): error TS2304: Cannot find name
    ''binToInt''.

    ../../../../../tmp/tmp41z54iro.ts(16,24): error TS2304: Cannot find name ''binToInt''.

    '
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // Only\
    \ change code below this line\n  console.log('sort_array start');\n  const sorted\
    \ = [...arr];\n  sorted.sort((a, b) => {\n    const diff = a.toString(2).length\
    \ - b.toString(2).length;\n    if (diff !== 0) {\n      return diff;\n    }\n\
    \    return a > b ? 1 : a < b ? -1 : 0;\n  });\n  console.log('sort_array end');\n\
    \  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp69ykzxgg.js:35:12)\n    at Object.<anonymous> (/tmp/tmp69ykzxgg.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: 'sort_array start

    sort_array end

    '
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a, b) => a > b ? 1 : -1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpml9sw2nw.js:17:12)\n    at Object.<anonymous> (/tmp/tmpml9sw2nw.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ map = {};\n    arr.forEach(v => {\n        const key = bin(v);\n        if (!map[key])\
    \ {\n            map[key] = [];\n        }\n        map[key].push(v);\n    });\n\
    \    const sorted = [];\n    for (const key in map) {\n        map[key].sort((a,\
    \ b) => bin(a).localeCompare(bin(b)));\n        sorted.push(...map[key]);\n  \
    \  }\n    return sorted;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfic8v2mi.ts(14,21): error TS2304: Cannot find name
    ''bin''.

    ../../../../../tmp/tmpfic8v2mi.ts(22,33): error TS2304: Cannot find name ''bin''.

    ../../../../../tmp/tmpfic8v2mi.ts(22,54): error TS2304: Cannot find name ''bin''.

    '
  timestamp: 1659979668
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    return +(a.toString() === b.toString()) ? a - b\
    \ : a.toString().localeCompare(b.toString());\n  });\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpu15e82b9.js:20:12)\n    at Object.<anonymous> (/tmp/tmpu15e82b9.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tconst len\
    \ = arr.length;\n\tconst swap = function (a1: number, a2: number) {\n\t\tconst\
    \ temp = a1;\n\t\ta1 = a2;\n\t\ta2 = temp;\n\t};\n\tfor (let i = 1; i < len; ++i)\
    \ {\n\t\tconst a1 = arr[i];\n\t\tconst a2 = arr[i - 1];\n\t\tif (a2 < a1) swap(a1,\
    \ a2);\n\t}\n\treturn arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpog7l1qx7.js:29:12)\n    at Object.<anonymous> (/tmp/tmpog7l1qx7.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        if (a === b) {\n            return\
    \ 0;\n        } else if (a > b) {\n            return -1;\n        } else {\n\
    \            return 1;\n        }\n    });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpcmaf_xds.js:27:12)\n    at Object.<anonymous> (/tmp/tmpcmaf_xds.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => a > b ? 1 : a < b ? -1 : 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp0oz82wan.js:17:12)\n    at Object.<anonymous> (/tmp/tmp0oz82wan.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => {\n    return count_ones(a) - count_ones(b);\n  });\n  return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpun2b5sd9.ts(13,12): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpun2b5sd9.ts(13,28): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    return count_ones_in_binary_array(a) - count_ones_in_binary_array(b);\n\
    \  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk2n63bba.ts(13,12): error TS2304: Cannot find name
    ''count_ones_in_binary_array''.

    ../../../../../tmp/tmpk2n63bba.ts(13,44): error TS2304: Cannot find name ''count_ones_in_binary_array''.

    '
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const result\
    \ = [...arr];\n  result.sort((a: number, b: number) => {\n    const strA = convertToString(a\
    \ >>> 0).toLowerCase();\n    const strB = convertToString(b >>> 0).toLowerCase();\n\
    \    const arrA = convertToBinString(strA);\n    const arrB = convertToBinString(strB);\n\
    \    return arrA.length - arrB.length;\n  });\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8rz2w8oo.ts(14,18): error TS2304: Cannot find name
    ''convertToString''.

    ../../../../../tmp/tmp8rz2w8oo.ts(15,18): error TS2304: Cannot find name ''convertToString''.

    ../../../../../tmp/tmp8rz2w8oo.ts(16,18): error TS2304: Cannot find name ''convertToBinString''.

    ../../../../../tmp/tmp8rz2w8oo.ts(17,18): error TS2304: Cannot find name ''convertToBinString''.

    '
  timestamp: 1659979669
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpkwebwjs6.js:18:12)\n    at Object.<anonymous> (/tmp/tmpkwebwjs6.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979669
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => count_ones(b) - count_ones(a) || a - b)\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprmthe1iw.ts(12,29): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmprmthe1iw.ts(12,45): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979670
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n\
    \  });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp6gwu_ubd.js:24:12)\n    at Object.<anonymous> (/tmp/tmp6gwu_ubd.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort(function(a,\
    \ b) {\n    return arr.indexOf(a) - arr.indexOf(b);\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp5cecknuj.js:19:12)\n    at Object.<anonymous> (/tmp/tmp5cecknuj.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => a > b ? 1 : a < b ? -1 : 0);\n    return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpvxtu80to.js:18:12)\n    at Object.<anonymous> (/tmp/tmpvxtu80to.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const result\
    \ = []\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j <\
    \ arr.length; j++) {\n      if (arr[i] == 1) {\n        result.push(j)\n     \
    \   break\n      }\n    }\n  }\n  result.sort(function (a: number, b: number)\
    \ {\n    return a - b\n  })\n  return result\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpczm6dfat.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpczm6dfat.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // Sort\
    \ the array based on the given order\n  const sortFunc: (a: number, b: number)\
    \ => number = (a, b) => {\n    if (a === 0) return 1\n    if (b === 0) return\
    \ -1\n    if (a === b) return 0\n    if (a < b) return -1\n    if (a > b) return\
    \ 1\n  }\n  return arr.sort(sortFunc)\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpm044hr1f.js:30:12)\n    at Object.<anonymous> (/tmp/tmpm044hr1f.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  const max = Math.max(...arr);\n  const ones: number[] = [];\n\
    \n  for (let i = 1; i < len; i++) {\n    const val = arr[i];\n    ones.push((val\
    \ - max) * Math.pow(2, i));\n  }\n\n  ones.push(0);\n\n  return arr.sort((a, b)\
    \ => b - a).map((val) => val + ones[val]);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  4,\n\
    \  -13,\n  -14,\n  -11\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmp2odmljjz.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2odmljjz.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, 4,\
    \ -13, -14, -11 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let zeroCount\
    \ = 0;\n  let oneCount = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] === 0) {\n      zeroCount++;\n    } else {\n      oneCount++;\n    }\n\
    \  }\n  const base = Math.pow(2, Math.ceil(Math.log(oneCount) / Math.log(2)));\n\
    \  const sorted = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ === 0) {\n      continue;\n    }\n    let temp = parseInt(Math.pow(base, i).toString(2),\
    \ 2);\n    while (oneCount !== 0) {\n      oneCount--;\n      temp = parseInt(temp.toString(2),\
    \ 2);\n    }\n    temp = parseInt(temp.toString(2), 2);\n    sorted.push(temp);\n\
    \  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  8,\n\
    \  64,\n  512,\n  4096\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmpaedms3gv.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpaedms3gv.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 8, 64,\
    \ 512, 4096 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const counts:\
    \ number[] = [];\n  const nums = arr.map(n => count_1(n));\n  for (const [k, v]\
    \ of Object.entries(nums)) {\n    counts.push(v);\n  }\n  return arr.sort((a,\
    \ b) => counts[a] - counts[b]);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv9xas6tr.ts(13,29): error TS2304: Cannot find name
    ''count_1''.

    ../../../../../tmp/tmpv9xas6tr.ts(14,31): error TS2339: Property ''entries'' does
    not exist on type ''ObjectConstructor''.

    '
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let result\
    \ = [];\n    arr.forEach((n: number) => {\n        result[result.length] = (n\
    \ + 1) % 2 === 1 ? n : -n;\n    });\n    return result.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -5,\n  -3,\n\
    \  -1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpi56tb84y.js:21:12)\n    at Object.<anonymous> (/tmp/tmpi56tb84y.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -5, -3,\
    \ -1, 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => count_ones(a) - count_ones(b));\n    arr.sort((a, b) => a - b);\n    return\
    \ arr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpalwxs7o8.ts(12,24): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpalwxs7o8.ts(12,40): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (j > i && isOnes(n)) {\n        arr[j] = -arr[j];\n\
    \      }\n    }\n  }\n  arr.sort((a: number, b: number) => a - b);\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    arr[i] = arr[i] % 10;\n  }\n  return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3pkwjjlq.ts(15,20): error TS2304: Cannot find name
    ''isOnes''.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tconst a\
    \ = new Array();\n\tlet cnt = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\
    \tlet d = count_ones(arr[i]);\n\t\ta.push(arr[i]);\n\t\tcnt += d;\n\t\tif (cnt\
    \ === arr.length) break;\n\t}\n\tlet b = new Array();\n\tfor (let i = 0; i < a.length;\
    \ i++) {\n\t\tlet d = count_ones(a[i]);\n\t\tb.push(a[i]);\n\t\twhile (d > 0)\
    \ {\n\t\t\tlet d = d >> 1;\n\t\t\tb.push(a[i]);\n\t\t}\n\t}\n\treturn b;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd0pzv76u.ts(15,11): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpd0pzv76u.ts(22,11): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpd0pzv76u.ts(25,12): error TS2448: Block-scoped variable
    ''d'' used before its declaration.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    const binA = bin(a)\n    const binB = bin(b)\n\n    let onesA =\
    \ 0\n    let onesB = 0\n\n    for (let i = 0; i < binA.length; i++) {\n      if\
    \ (binA[i] === '1') {\n        onesA++\n      }\n    }\n\n    for (let i = 0;\
    \ i < binB.length; i++) {\n      if (binB[i] === '1') {\n        onesB++\n   \
    \   }\n    }\n\n    if (onesA === onesB) {\n      const decA = dec(a)\n      const\
    \ decB = dec(b)\n\n      return decA - decB\n    }\n\n    return onesA - onesB\n\
    \  })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkvmu4096.ts(13,18): error TS2552: Cannot find name
    ''bin''. Did you mean ''binA''?

    ../../../../../tmp/tmpkvmu4096.ts(14,18): error TS2552: Cannot find name ''bin''.
    Did you mean ''binA''?

    ../../../../../tmp/tmpkvmu4096.ts(32,20): error TS2552: Cannot find name ''dec''.
    Did you mean ''decA''?

    ../../../../../tmp/tmpkvmu4096.ts(33,20): error TS2552: Cannot find name ''dec''.
    Did you mean ''decA''?

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // Sort\
    \ based on the number of ones\n  arr.sort((a, b) => count_ones(a) - count_ones(b));\n\
    \n  // If there are equal number of ones, sort based on decimal value\n  arr.sort((a,\
    \ b) => (count_ones(a) - count_ones(b)) || (a - b));\n\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm7oqb7t4.ts(13,22): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmpm7oqb7t4.ts(13,38): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpm7oqb7t4.ts(16,23): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmpm7oqb7t4.ts(16,39): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        arr[i] = arr[i].toString();\n    }\n\
    \    arr.sort();\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] =\
    \ parseInt(arr[i], 2);\n    }\n    return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqx34jwol.ts(13,9): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpqx34jwol.ts(17,27): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const map\
    \ = new Map();\n  const sorted = [...arr];\n  for (let i = sorted.length - 1;\
    \ i >= 0; i--) {\n    let key = sorted[i].toString(2);\n    const val = map.get(key);\n\
    \    if (!val || val[0] < sorted[i - 1]) {\n      map.set(key, sorted[i]);\n \
    \   }\n  }\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n\
    \    const key = sorted[i].toString(2);\n    const val = map.get(key);\n    if\
    \ (val) {\n      result.push(val[1]);\n    }\n  }\n  return result;\n}\n\nconst\
    \ arr1 = sort_array([-20, 1, -3, 5, 2, -4, 1]);\nconst arr2 = sort_array([1, 2,\
    \ 3, 4, 5]);\nconst arr3 = sort_array([2, 2, 4, 8, 5]);\nconst arr4 = sort_array([-2,\
    \ 0, -4, 4, -2, 1]);\nconst arr5 = sort_array([1, 2, 3, 4, 5]);\nconst arr6 =\
    \ sort_array([1, 2, 3, 4, 5]);\nconst arr7 = sort_array([-20, 1, -3, 5, 2, -4,\
    \ 1]);\nconst arr8 = sort_array([1, 2, 3, 4, 5]);\n\nconst arr9 = sort_array([1,\
    \ 2, 3, 4, 5]);\nconst arr10 = sort_array([1, -2, 3, 4, 5, -1]);\nconst arr11\
    \ = sort_array([-20, 1, -3, 5, 2, -4, 1]);\nconst arr12 = sort_array([1, -2, 3,\
    \ 4, 5, -1]);\nconst arr13 = sort_array([1, 2, 3, 4, 5]);\nconst arr14 = sort_array([1,\
    \ 2, 3, 4, 5]);\nconst arr15 = sort_array([1, -2, 3, 4, 5, -1]);\nconst arr16\
    \ = sort_array([1, 2, 3, 4, 5]);\nconst arr17 = sort_array([-20, 1, -3, 5, 2,\
    \ -4, 1]);\nconst arr18 = sort_array([1, -2, 3, 4, 5, -1]);\nconst arr19 = sort_array([-20,\
    \ 1, -3, 5, 2, -4, 1]);\nconst arr20 = sort_array([1, -2, 3, 4, 5, -1]);\nconst\
    \ arr21 = sort_array([-20, 1, -3, 5, 2, -4, 1]);\nconst arr22 = sort_array([1,\
    \ -2, 3, 4, 5, -1]);\nconst arr23 = sort_array([1, 2, 3, 4, 5]);\nconst arr24\
    \ = sort_array([1, 2, 3, 4, 5]);\nconst arr25 = sort_array([1, 2, 3, 4, 5]);\n\
    const arr26 = sort_array([1, -2, 3, 4, 5, -1]);\nconst arr27 = sort_array([1,\
    \ 2, 3, 4, 5]);\nconst arr28 = sort_array([1, 2, 3, 4, 5]);\nconst arr29 = sort_array([1,\
    \ 2, 3, 4, 5]);\nconst arr30 = sort_array([-20, 1, -3, 5, 2, -4, 1]);\nconst arr31\
    \ = sort_array([1, -2, 3, 4, 5, -1]);\nconst arr32 = sort_array([1, 2, 3, 4, 5]);\n\
    const arr33 = sort_array([1, 2, 3, 4, 5]);\nconst arr34\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp974mc14g.ts(12,19): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    ../../../../../tmp/tmp974mc14g.ts(66,7): error TS1155: ''const'' declarations
    must be initialized.

    '
  timestamp: 1659979671
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ len = arr.length;\n    const max = -1;\n    let count: number;\n    for (let\
    \ i = 0; i < len; i++) {\n        count = count_ones(arr[i]);\n        if (count\
    \ > 0) {\n            if (max < count) {\n                max = count;\n     \
    \       }\n        } else {\n            max = -1;\n        }\n    }\n    if (max\
    \ >= 0) {\n        return arr.sort((a, b) => count_ones(b) - count_ones(a) ||\
    \ a - b);\n    }\n    return arr.sort((a, b) => a - b);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppi0ib0j0.ts(16,17): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmppi0ib0j0.ts(19,17): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmppi0ib0j0.ts(22,13): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmppi0ib0j0.ts(26,35): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmppi0ib0j0.ts(26,51): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979671
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n \
    \ })\n  return arr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp1vg4g5ne.js:24:12)\n    at Object.<anonymous> (/tmp/tmp1vg4g5ne.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979672
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++)\
    \ {\n      if (arr[i] == 1) break;\n      if (arr[j] == 1) break;\n      if (arr[j]\
    \ > arr[i]) break;\n    }\n    if (j == arr.length) arr.push(arr[i]);\n  }\n \
    \ return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6y7wk637.ts(18,9): error TS2304: Cannot find name
    ''j''.

    '
  timestamp: 1659979672
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ <= 1) return arr;\n  const ones: number[] = [];\n  let idx = 0;\n  let cnt =\
    \ 0;\n  while (idx < arr.length) {\n    if (arr[cnt] === 1) ones.push(arr[cnt]);\n\
    \    idx += cnt;\n    cnt += arr[++cnt] ? 1 : -1;\n  }\n  return ones\n    .sort((a,\
    \ b) => a > b ? 1 : -1)\n    .concat(arr.slice(idx));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp0dhq0_qb.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0dhq0_qb.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979672
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const res:\
    \ number[] = Array(arr.length).fill(0).map((_: number, i: number) => i);\n  res.sort((a,\
    \ b) => {\n    let [x, y] = [a, '', b];\n    while (y !== 0) {\n      x = (x ^\
    \ y) * 256;\n      y = (y / 256) - x;\n    }\n    return x;\n  });\n  return res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2z_ix2bn.ts(12,43): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    ../../../../../tmp/tmp2z_ix2bn.ts(15,12): error TS2367: This condition will always
    return ''true'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmp2z_ix2bn.ts(16,16): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp2z_ix2bn.ts(17,7): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmp2z_ix2bn.ts(17,12): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659979672
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    const left = arr.slice(0, i);\n    const\
    \ right = arr.slice(i + 1, arr.length);\n    const leftCount = 0;\n    const rightCount\
    \ = 0;\n    for (let j = 0; j < left.length; j++) {\n      if (left[j] === 1)\
    \ leftCount++;\n    }\n    for (let j = 0; j < right.length; j++) {\n      if\
    \ (right[j] === 1) rightCount++;\n    }\n    if (leftCount > rightCount) {\n \
    \     for (let j = 0; j < left.length; j++) {\n        arr[j] += left[j];\n  \
    \    }\n    } else if (rightCount > leftCount) {\n      for (let j = 0; j < right.length;\
    \ j++) {\n        arr[j] += right[j];\n      }\n    }\n  }\n  return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7tc12o7a.ts(18,26): error TS2588: Cannot assign to
    ''leftCount'' because it is a constant.

    ../../../../../tmp/tmp7tc12o7a.ts(21,27): error TS2588: Cannot assign to ''rightCount''
    because it is a constant.

    '
  timestamp: 1659979672
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    for(let\
    \ i = 0; i < arr.length; i++) {\n        if(arr[i] === 0) {\n            continue;\n\
    \        }\n\n        for(let j = arr.length - 1; j >= i; j--) {\n           \
    \ if(arr[j] > 0) {\n                break;\n            }\n\n            if(arr[j]\
    \ === 0) {\n                let temp = arr[j + 1];\n                arr[j + 1]\
    \ = arr[j];\n                arr[j] = temp;\n                j--;\n          \
    \  }\n        }\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpo4dpx192.js:33:12)\n    at Object.<anonymous> (/tmp/tmpo4dpx192.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979672
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (!Array.isArray(arr))\
    \ return arr;\n\n  return arr.sort((a: number, b: number) => {\n    const zeroToThree\
    \ =\n      Math.floor((a - 1) / 3) *\n      3 +\n      Math.floor((b - 1) / 3)\
    \ *\n      3 +\n      1 -\n      a -\n      b;\n    const oneToSixThree = a %\
    \ 3;\n    const twoToSeven = b % 3;\n    const oneToSixThreeBit = oneToSixThree\
    \ >> 3;\n    if (oneToSixThreeBit === 0) {\n      return zeroToThree - twoToSeven;\n\
    \    }\n    if (oneToSixThreeBit === 1) {\n      return zeroToThree - oneToSixThree;\n\
    \    }\n    return zeroToThree - oneToSixThree - twoToSeven;\n  });\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpwk7fvaux.js:37:12)\n    at Object.<anonymous> (/tmp/tmpwk7fvaux.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort(function\
    \ (a, b) {\n    // Sort based on binary value\n    if (a === 0) return -b;\n \
    \   if (b === 0) return a;\n    return a > b ? 1 : -1;\n  });\n  return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmph_fe8nvo.js:25:12)\n    at Object.<anonymous> (/tmp/tmph_fe8nvo.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const numOfOnes\
    \ = arr.reduce((a, b) => a + b, 0);\n  const sortedArr = arr.sort((a: number,\
    \ b: number) => a - b);\n  const decimalValue = numOfOnes / (sortedArr.length\
    \ * 2);\n  return sortedArr.map((_, i) => decimalValue * i);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1.5,\n\
    \  3,\n  4.5,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpymxnr39d.js:20:12)\n    at Object.<anonymous> (/tmp/tmpymxnr39d.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1.5,\
    \ 3, 4.5, 6 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tfor (let\
    \ i = arr.length - 1; i > 0; i--) {\n\t\tconst num = arr[i];\n\t\tlet j;\n\t\t\
    for (j = i - 1; j >= 0; j--) {\n\t\t\tif (num & 1) {\n\t\t\t\tconst temp: number\
    \ = arr[j + 1];\n\t\t\t\tarr[j + 1] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  5,\n\
    \  1,\n  2,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp2r3_6x1j.js:28:12)\n    at Object.<anonymous> (/tmp/tmp2r3_6x1j.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 5, 1,\
    \ 2, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const sortedArr\
    \ = arr.sort((a, b) => {\n    const oneCountA = countOnes(a);\n    const oneCountB\
    \ = countOnes(b);\n    if (oneCountA === oneCountB) {\n      // sort on decimal\
    \ value\n      return a - b;\n    }\n    return oneCountA - oneCountB;\n  });\n\
    \  return sortedArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9aiq7r2b.ts(13,23): error TS2304: Cannot find name
    ''countOnes''.

    ../../../../../tmp/tmp9aiq7r2b.ts(14,23): error TS2304: Cannot find name ''countOnes''.

    '
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len < 2) {\n    return arr;\n  }\n  let first = 1;\n  let\
    \ last = len;\n  while (first < last) {\n    const mid = Math.floor((first + last)\
    \ / 2);\n    if (arr[mid] > arr[mid+1]) {\n      last = mid - 1;\n    } else {\n\
    \      first = mid + 1;\n    }\n  }\n  return arr.slice(first, last);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpcod6thrr.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcod6thrr.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979673
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ === 0) {\n        return arr;\n    }\n\n    // Sort the array first\n    arr.sort(\n\
    \        (a, b) =>\n            a === b ? 0 :\n                a < b ? -1 :\n\
    \                    1\n    );\n\n    // Go through the array again and sort based\
    \ on the decimal value of 1\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    const ones = arr[i].toString(2).length - 1;\n        if (ones === 1) {\n\
    \            arr[i] = parseInt(arr[i], 10);\n        } else {\n            let\
    \ decimal = Math.pow(8, ones);\n            if (decimal > arr[i]) {\n        \
    \        arr[i] = decimal - arr[i];\n            }\n        }\n    }\n\n    return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpre9n9vyc.ts(28,31): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    if (a > b) {\n      return 1;\n    } else if (a\
    \ < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpdz093846.js:28:12)\n    at Object.<anonymous> (/tmp/tmpdz093846.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tconst result:\
    \ number[] = [];\n\tlet maxOnes = 0;\n\tlet minOnes = 0;\n\tfor (let i = 0; i\
    \ < arr.length; i++) {\n\t\tconst bin = binary_to_decimal(arr[i]);\n\t\tconst\
    \ binCount = (bin.match(/10/g) || []).length;\n\t\tif (binCount > maxOnes) {\n\
    \t\t\tmaxOnes = binCount;\n\t\t}\n\t\tif (binCount < minOnes) {\n\t\t\tminOnes\
    \ = binCount;\n\t\t}\n\t}\n\tif (maxOnes < minOnes) {\n\t\tmaxOnes = minOnes;\n\
    \t\tresult.sort((a, b) => b - a);\n\t} else {\n\t\tresult.sort((a, b) => {\n\t\
    \t\tif (a < b) return -1;\n\t\t\tif (a > b) return 1;\n\t\t\treturn 0;\n\t\t});\n\
    \t}\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tresult[i] = binary_to_decimal(arr[i]);\n\
    \t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppxdv0ljc.ts(16,15): error TS2304: Cannot find name
    ''binary_to_decimal''.

    ../../../../../tmp/tmppxdv0ljc.ts(36,15): error TS2304: Cannot find name ''binary_to_decimal''.

    '
  timestamp: 1659979674
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr\n\
    \    .sort((a: number, b: number) => {\n      if (a === 0) return -1;\n      if\
    \ (b === 0) return 1;\n      return a > b ? 1 : -1;\n    });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp16c50mc_.js:24:12)\n    at Object.<anonymous> (/tmp/tmp16c50mc_.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const zeroBits:\
    \ number = Math.log2(Math.abs(arr[0]));\n  const positiveBits: number = (zeroBits\
    \ - Math.floor(zeroBits));\n  const positiveBitsLength: number = positiveBits\
    \ === 0 ? 1 : positiveBits;\n  const negativeBits: number = Math.log2(Math.abs(arr[arr.length\
    \ - 1]));\n  const negativeBitsLength: number = negativeBits === 0 ? 1 : negativeBits;\n\
    \  const positiveBitsLengthNumber: number = Math.floor(positiveBitsLength);\n\
    \  const negativeBitsLengthNumber: number = Math.floor(negativeBitsLength);\n\
    \  const length: number = arr.length;\n\n  let positiveBitsLengthNumberLastIndex:\
    \ number;\n  let negativeBitsLengthNumberLastIndex: number;\n\n  if (positiveBitsLengthNumber\
    \ === 0) positiveBitsLengthNumberLastIndex = 1;\n  else if (positiveBitsLengthNumber\
    \ === 1) positiveBitsLengthNumberLastIndex = 0;\n  else positiveBitsLengthNumberLastIndex\
    \ = arr.length - positiveBitsLengthNumber - 1;\n  if (negativeBitsLengthNumber\
    \ === 0) negativeBitsLengthNumberLastIndex = 1;\n  else if (negativeBitsLengthNumber\
    \ === 1) negativeBitsLengthNumberLastIndex = 0;\n  else negativeBitsLengthNumberLastIndex\
    \ = arr.length - negativeBitsLengthNumber - 1;\n\n  const arrSorted: number[]\
    \ = [];\n  for (let index: number = 0; index < length; index++) {\n    if (index\
    \ < positiveBitsLengthNumberLastIndex) {\n      arrSorted.push(arr[index]);\n\
    \    } else if (index < negativeBitsLengthNumberLastIndex) {\n      arrSorted.push(arr[arr.length\
    \ - 1 - index]);\n    } else {\n      arrSorted.push(Math.abs(arr[index]));\n\
    \    }\n  }\n  return arrSorted;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj940qciq.ts(12,33): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpj940qciq.ts(15,37): error TS2551: Property ''log2'' does
    not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // sort\
    \ descending based on binary value of each number\n  return arr.sort((a: number,\
    \ b: number) => { return (a < b) ? -1 : (a > b) ? 1 : 0; });\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmps94ctx3f.js:18:12)\n    at Object.<anonymous> (/tmp/tmps94ctx3f.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n \
    \ })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp1zrui6h0.js:23:12)\n    at Object.<anonymous> (/tmp/tmp1zrui6h0.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    // Write\
    \ your code here.\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm5wmxs0d.ts(11,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659979673
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort(function\
    \ (a, b) { return a - b; });\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpwjr9r1mo.js:18:12)\n    at Object.<anonymous> (/tmp/tmpwjr9r1mo.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const n\
    \ = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j <\
    \ n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        const tmp = arr[j];\n\
    \        arr[j] = arr[j + 1];\n        arr[j + 1] = tmp;\n      }\n    }\n  }\n\
    \  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpgm6m4d64.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgm6m4d64.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  for (let i = 0; i < len; i++) {\n    const val = getBits(arr,\
    \ i);\n    const idx = i === 0 ? getBits(arr, len - 1) : getBits(arr, i - 1);\n\
    \    if (val === 1) {\n      swap(arr, i, idx);\n    }\n  }\n  return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph3tq4lxg.ts(14,17): error TS2304: Cannot find name
    ''getBits''.

    ../../../../../tmp/tmph3tq4lxg.ts(15,27): error TS2304: Cannot find name ''getBits''.

    ../../../../../tmp/tmph3tq4lxg.ts(15,51): error TS2304: Cannot find name ''getBits''.

    ../../../../../tmp/tmph3tq4lxg.ts(17,7): error TS2304: Cannot find name ''swap''.

    '
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    \n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnlpdifsk.ts(11,37): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const newArray:\
    \ number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    newArray.push([...arr[i]].sort((a,\
    \ b) => b - a));\n  }\n  return newArray;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4tcxfbu1.ts(14,19): error TS2345: Argument of type
    ''any[]'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4tcxfbu1.ts(14,23): error TS2461: Type ''number'' is not
    an array type.

    '
  timestamp: 1659979674
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const l\
    \ = arr.length;\n  if (l === 0) {\n    return arr;\n  }\n  const a0 = arr[0];\n\
    \  const a1 = arr[l-1];\n  const a2 = arr[2];\n  const a3 = arr[3];\n  const a4\
    \ = arr[4];\n  if (a0 === a1) {\n    if (a2 === a3) {\n      return [\n      \
    \  a0, a2, a4, a3, a1,\n      ];\n    } else {\n      return [\n        a0, a1,\
    \ a3, a4, a2,\n      ];\n    }\n  } else {\n    if (a0 === a2) {\n      return\
    \ [\n        a0, a1, a3, a4, a2,\n      ];\n    } else {\n      return [\n   \
    \     a0, a1, a2, a3, a4,\n      ];\n    }\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpmzafriy9.js:49:12)\n    at Object.<anonymous> (/tmp/tmpmzafriy9.js:58:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) return arr;\n\n  let maxBits = 0;\n  let minBits\
    \ = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < len; i++) {\n    const bits\
    \ = count_bits(arr[i]);\n    minBits = Math.min(minBits, bits);\n    maxBits =\
    \ Math.max(maxBits, bits);\n  }\n\n  const maxExp = Math.floor(Math.log(maxBits)\
    \ / Math.LN2);\n  const minExp = Math.floor(Math.log(minBits) / Math.LN2);\n \
    \ if (maxExp - minExp < 1) {\n    return arr;\n  }\n\n  // create an array with\
    \ more bits than maxBits\n  const maxPower2 = maxBits + 1;\n  const maxPower2Len\
    \ = len - maxPower2;\n  const newLen = Math.ceil(Math.pow(2, maxPower2Len) * Math.LN2);\n\
    \  const newArr = new Uint32Array(newLen);\n\n  // initialize newArr\n  for (let\
    \ i = 0; i < newLen; i++) {\n    newArr[i] = 0;\n  }\n\n  let curLen = 0;\n  let\
    \ cur = 0;\n  // step 1: generate 2^maxPower2Len number sequence\n  while (curLen\
    \ < maxPower2Len) {\n    const newVal = cur + curLen;\n    for (let j = 0; j <\
    \ len; j++) {\n      const bits = count_bits(arr[j]);\n      if (bits >= maxBits)\
    \ {\n        throw new Error(\n            `Cannot sort array by length. The number\
    \ of bits is too big. ` +\n            `Maximum length is ${maxBits}. Got ${bits}.`);\n\
    \      }\n      if (bits === maxBits) {\n        // if the number of ones in arr[j]\
    \ equals the number of ones in\n        // newVal, push it to the result array\n\
    \        if (newVal >= newLen) {\n          throw new Error(\n              `Cannot\
    \ sort array by length. Length ${newLen} is not big enough to hold all the numbers\
    \ in ${arr}`);\n        }\n        newArr[newVal] += 1;\n        break;\n    \
    \  }\n      newArr[newVal] += 1;\n      newVal += bits;\n    }\n    cur += curLen;\n\
    \    curLen++;\n  }\n\n  // step 2: find maxBits-1 number sequence\n  let j =\
    \ 0;\n  for (let i = 0; i < newLen; i++) {\n    const bits = count_bits(newArr[i]);\n\
    \    if (bits === maxBits) {\n      newArr[j++] = i;\n    } else {\n      break;\n\
    \    }\n  }\n  // step 3: add 0 to the number sequences that are longer\n  while\
    \ (j < newLen) {\n    newArr[++j] = 0;\n  }\n\n  return newArr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdtvhtwgk.ts(16,24): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpdtvhtwgk.ts(18,18): error TS2304: Cannot find name ''count_bits''.

    ../../../../../tmp/tmpdtvhtwgk.ts(46,20): error TS2304: Cannot find name ''count_bits''.

    ../../../../../tmp/tmpdtvhtwgk.ts(63,7): error TS2588: Cannot assign to ''newVal''
    because it is a constant.

    ../../../../../tmp/tmpdtvhtwgk.ts(72,18): error TS2304: Cannot find name ''count_bits''.

    ../../../../../tmp/tmpdtvhtwgk.ts(84,3): error TS2740: Type ''Uint32Array'' is
    missing the following properties from type ''number[]'': pop, push, concat, shift,
    and 2 more.

    '
  timestamp: 1659979674
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ <= 1) {\n    return arr;\n  }\n\n  const ones: number[] = arr.filter((x) =>\
    \ x === 1);\n  ones.sort((a, b) => a - b);\n\n  for (let i = ones.length - 1;\
    \ i > 0; i--) {\n    const j = i;\n    for (let k = j - 1; k >= 0; k--) {\n  \
    \    if (ones[k] > ones[j]) {\n        swap(arr, j, k);\n      }\n    }\n  }\n\
    \n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk9v89jwt.ts(23,9): error TS2304: Cannot find name
    ''swap''.

    '
  timestamp: 1659979675
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ copyArr = arr.slice(0);\n    copyArr.sort((a: number, b: number) => a - b);\n\
    \    return copyArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp3wplmji7.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3wplmji7.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979675
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ maxLen = arr.length\n    let max: number = 0\n    for (let i = maxLen - 1; i\
    \ >= 0; i--) {\n        const cur = arr[i]\n        if (cur > max) {\n       \
    \     max = cur\n        }\n    }\n    for (let i = maxLen - 1; i >= 0; i--) {\n\
    \        const cur = arr[i]\n        if (cur > max) {\n            max = cur\n\
    \        }\n    }\n    const maxIdx = (max - 1).toString(2).length - 1\n    const\
    \ numArr = []\n    for (let i = 0; i < maxLen; i++) {\n        numArr.push(arr[i].toString(2).padStart(maxIdx,\
    \ '0'))\n    }\n    return numArr.sort((a, b) => b - a)\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwmt0kqa5.ts(29,40): error TS2339: Property ''padStart''
    does not exist on type ''string''.

    '
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ result = [...arr];\n    let numOnes = 0;\n    let startIndex = 0;\n    for (let\
    \ i = 0; i < result.length; i++) {\n        while (result[i] === 1) {\n      \
    \      numOnes++;\n            startIndex = i;\n            result[i] = result[i]\
    \ - 1;\n        }\n    }\n    const sortedResult = result;\n    sortedResult.sort(function\
    \ (a: number, b: number) {\n        const numA = a;\n        const numB = b;\n\
    \        let comparison = 0;\n        if (numA < numB) {\n            comparison\
    \ = 1;\n        } else if (numA > numB) {\n            comparison = -1;\n    \
    \    } else {\n            const decimalA = numA.toString().split('')\n      \
    \          .reverse()\n                .reduce((acc, val) => acc + +val, 0);\n\
    \            const decimalB = numB.toString().split('')\n                .reverse()\n\
    \                .reduce((acc, val) => acc + +val, 0);\n            comparison\
    \ = decimalA - decimalB;\n        }\n        return comparison;\n    });\n   \
    \ for (let i = startIndex; i < result.length; i++) {\n        result[i] = sortedResult[i];\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=sorting,javascript |>\n<| a\
    \ tags=sorting,javascript dscore=0 |>\nAnother alternative in javascript that\
    \ does not require you to count the number of ones in the array is\n<code>\nconst\
    \ sorted = myArray.sort((a,b) => myArray.indexOf(a) - myArray.indexOf(b));\n</code>\n\
    <|/ a |>\n<| c |>\nThis has quadratic runtime (as you mentioned) and only works\
    \ if all elements are unique. If there are duplicate elements, you get a wrong\
    \ result. You need to sort the array first and get the `indexOf` values after\
    \ that.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nvar array = [1, 2, 3, 1]\nvar sorted\
    \ = array.sort(function(a, b) {\n  return array.indexOf(a) - array.indexOf(b);\n\
    })\nconsole.log(sorted)</code>\n\nSort the array first and get the index values\
    \ after that.\n<|/ a tags=sorting,javascript |>\n<| c |>\nThis has quadratic runtime\
    \ (as you mentioned) and only works if all elements are unique. If there are duplicate\
    \ elements, you get a wrong result. You need to sort the array first and get the\
    \ `indexOf` values after that.\n<|/ c |>\n<| c |>\n: This is actually the best\
    \ answer to this question. It doesn't require you to count the number of ones\
    \ in the array. `indexOf` can return `-1` if the value is `NaN`. So you can return\
    \ `0` if the value is `NaN`.\n<|/ c |>\n<| c |>\n`indexOf` can return `-1` if\
    \ the value is `NaN`. That's what I \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc0270dkj.ts(47,2): error TS1110: Type expected.

    ../../../../../tmp/tmpc0270dkj.ts(47,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0270dkj.ts(48,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0270dkj.ts(48,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0270dkj.ts(49,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0270dkj.ts(49,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(49,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(49,40): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,35): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,49): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,61): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,74): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(50,102): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0270dkj.ts(52,1): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0270dkj.ts(53,2): error TS1110: Type expected.

    ../../../../../tmp/tmpc0270dkj.ts(53,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0270dkj.ts(54,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0270dkj.ts(54,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0'
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++)\
    \ {\n      if (arr[j] - arr[i] === 0) {\n        let temp = arr[i];\n        arr[i]\
    \ = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnnzzst_w.js:26:12)\n    at Object.<anonymous> (/tmp/tmpnnzzst_w.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a, b) => {\n        if (a.length != b.length) {\n            return\
    \ a.length - b.length;\n        }\n        for (let i = 0; i < a.length; i++)\
    \ {\n            if (a[i] != b[i]) {\n                return a[i] - b[i];\n  \
    \          }\n        }\n        return 0;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps4na1qpk.ts(13,15): error TS2339: Property ''length''
    does not exist on type ''number''.

    ../../../../../tmp/tmps4na1qpk.ts(13,27): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmps4na1qpk.ts(14,22): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmps4na1qpk.ts(14,33): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmps4na1qpk.ts(16,31): error TS2339: Property ''length'' does
    not exist on type ''number''.

    '
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const arr2:\
    \ string[] = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    const bin =\
    \ binary(arr[i]).split('').reverse().join('');\n    let count = 1;\n    for (let\
    \ j = 0; j < bin.length; j++) {\n      if (bin[j] === '1') {\n        count +=\
    \ 1;\n      } else {\n        count -= 1;\n      }\n      if (count < 0) {\n \
    \       break;\n      }\n    }\n\n    arr2.push(count);\n  }\n\n  return arr2.sort((a,\
    \ b) => {\n    return b - a;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpo55wcvu4.ts(15,17): error TS2304: Cannot find name\
    \ 'binary'.\n../../../../../tmp/tmpo55wcvu4.ts(28,15): error TS2345: Argument\
    \ of type 'number' is not assignable to parameter of type 'string'.\n../../../../../tmp/tmpo55wcvu4.ts(31,3):\
    \ error TS2322: Type 'string[]' is not assignable to type 'number[]'.\n  Type\
    \ 'string' is not assignable to type 'number'.\n../../../../../tmp/tmpo55wcvu4.ts(32,12):\
    \ error TS2362: The left-hand side of an arithmetic operation must be of type\
    \ 'any', 'number', 'bigint' or an enum type.\n../../../../../tmp/tmpo55wcvu4.ts(32,16):\
    \ error TS2363: The right-hand side of an arithmetic operation must be of type\
    \ 'any', 'number', 'bigint' or an enum type.\n"
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let len\
    \ = arr.length;\n    if (len < 2) {\n        return arr;\n    }\n\n    for (let\
    \ i = 0; i < len - 1; i++) {\n        let j;\n        let min = i;\n        for\
    \ (j = i + 1; j < len; j++) {\n            if (arr[j] < arr[min]) {\n        \
    \        min = j;\n            }\n        }\n        if (min === i) {\n      \
    \      continue;\n        }\n\n        let temp = arr[min];\n        arr[min]\
    \ = arr[i];\n        arr[i] = temp;\n    }\n\n    return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpwztorei0.js:36:12)\n    at Object.<anonymous> (/tmp/tmpwztorei0.js:45:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a,\
    \ b) => a < b ? -1 : a == b ? 0 : 1);\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpvq60px7c.js:18:12)\n    at Object.<anonymous> (/tmp/tmpvq60px7c.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let newArr\
    \ = new Array(arr.length).fill(null);\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    let index = arr.indexOf(i + 1);\n    if (index !== -1) {\n      newArr[index]\
    \ = arr[i];\n    }\n  }\n  newArr.sort((a, b) => a.indexOf(b) - b.indexOf(a));\n\
    \  return newArr;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3kq9uy9h.ts(12,38): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        const as = a.toString(2);\n  \
    \      const bs = b.toString(2);\n        if (as === bs) return 0;\n        if\
    \ (as.length > bs.length) return 1;\n        if (as.length < bs.length) return\
    \ -1;\n        return as < bs ? -1 : 1;\n    });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpn1me293c.js:27:12)\n    at Object.<anonymous> (/tmp/tmpn1me293c.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a:\
    \ number, b: number) => {\n        return a > b ? 1 : a < b ? -1 : 0;\n    });\n\
    \    return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpplsmk6nc.js:20:12)\n    at Object.<anonymous> (/tmp/tmpplsmk6nc.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 1; i < arr.length; i++) {\n    for (let j = i; j > 0; j--) {\n      if (arr[j]\
    \ < arr[j - 1]) {\n        const temp = arr[j];\n        arr[j] = arr[j - 1];\n\
    \        arr[j - 1] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp3_b74c8t.js:26:12)\n    at Object.<anonymous> (/tmp/tmp3_b74c8t.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const bin:\
    \ Array<string> = arr.reduce((bin: Array<string>, num: number, idx: number) =>\
    \ {\n    const binString: string = num.toString(2);\n    return bin.concat(binString.padStart(6,\
    \ \"0\"));\n  }, []);\n  return bin.sort((a, b) => a.length - b.length).map((num:\
    \ number) => parseInt(num, 2));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpja11n95n.ts(14,33): error TS2339: Property 'padStart'\
    \ does not exist on type 'string'.\n../../../../../tmp/tmpja11n95n.ts(16,54):\
    \ error TS2345: Argument of type '(num: number) => any' is not assignable to parameter\
    \ of type '(value: string, index: number, array: string[]) => any'.\n  Types of\
    \ parameters 'num' and 'value' are incompatible.\n    Type 'string' is not assignable\
    \ to type 'number'.\n../../../../../tmp/tmpja11n95n.ts(16,80): error TS2345: Argument\
    \ of type 'number' is not assignable to parameter of type 'string'.\n"
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        const a = arr[i];\n        let b = i;\n\
    \        for (let j = i + 1; j < arr.length; j++) {\n            if (arr[j] >\
    \ a) {\n                b = j;\n            }\n        }\n        const temp =\
    \ a;\n        a = b;\n        a = temp - a * 2;\n    }\n    return arr;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuokxdfvl.ts(21,9): error TS2588: Cannot assign to
    ''a'' because it is a constant.

    ../../../../../tmp/tmpuokxdfvl.ts(22,9): error TS2588: Cannot assign to ''a''
    because it is a constant.

    '
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => {\n    let aa = a.toString(2);\n    let bb = b.toString(2);\n    if (aa\
    \ < bb) {\n      return -1;\n    } else if (aa > bb) {\n      return 1;\n    }\
    \ else {\n      return 0;\n    }\n  });\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  4,\n  5,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp563k09bw.js:29:12)\n    at Object.<anonymous> (/tmp/tmp563k09bw.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 4,\
    \ 5, 3 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const newArr\
    \ = arr.sort((a: number, b: number) => {\n    const ones = count_ones(a);\n  \
    \  if (ones === 0) {\n      return count_ones(b);\n    }\n    return count_ones(b)\
    \ - count_ones(a);\n  });\n  return newArr;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9y4ur254.ts(13,18): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp9y4ur254.ts(15,14): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp9y4ur254.ts(17,12): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmp9y4ur254.ts(17,28): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    const\
    \ n = arr.length;\n    let sorted: number[] = [];\n    let counter: number = 0;\n\
    \    const ones: number[] = [];\n    for (let i = 0; i < n; ++i) {\n        const\
    \ v = arr[i];\n        if (v !== 0) {\n            counter++;\n        }\n   \
    \     else {\n            ones.push(counter);\n            counter = 0;\n    \
    \    }\n        sorted.push(v);\n    }\n    if (ones.length > 1) {\n        ones\
    \ = ones\n            .map(x => +(\"\" + x).replace(/^1/g, m => String.fromCharCode(m\
    \ > 9 ? m : m-9)))\n            .sort((a, b) => a - b);\n        sorted = sorted\n\
    \            .map(v => ones.findIndex(y => v >= y))\n            .map(x => x +\
    \ counter);\n    }\n    return sorted.map(x => arr[x]);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nHere is a solution without using an auxiliary array:\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf1v7e9th.ts(37,2): error TS1110: Type expected.

    ../../../../../tmp/tmpf1v7e9th.ts(37,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpf1v7e9th.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1v7e9th.ts(38,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpf1v7e9th.ts(39,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1v7e9th.ts(39,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(39,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(40,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpf1v7e9th.ts(42,9): error TS1005: '';'' expected.

    '
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  var len\
    \ = arr.length;\n  var cnt = 0;\n  var maxCnt = Math.floor(len / 4) - 1;\n\n \
    \ // O(n) time, O(1) space\n  for (var i = maxCnt; i >= 0; i--) {\n    // cntOnes[i]\
    \ counts number of 1s in arr[i]\n    for (var j = i - cnt; j <= i + cnt; j++)\
    \ {\n      if (arr[j] < arr[i - cnt]) {\n        // swap\n        var tmp = arr[j];\n\
    \        arr[j] = arr[i - cnt];\n        arr[i - cnt] = tmp;\n      }\n    }\n\
    \    cnt += maxCnt - i;\n  }\n\n  return arr;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpet4j3sx8.js:33:12)\n    at Object.<anonymous> (/tmp/tmpet4j3sx8.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a, b) => {\n        const rev = a < 0;\n        if (rev) return 1;\n\
    \        return b ? -1 : 1;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  5,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpqtdd9wxk.js:22:12)\n    at Object.<anonymous> (/tmp/tmpqtdd9wxk.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 5, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    let count = 0;\n    while (arr[i] > 0) {\n\
    \      count += 1;\n      arr[i] -= 1;\n    }\n    arr[arr.length - i] = count;\n\
    \  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  5,\n\
    \  2,\n  3,\n  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n\
    \  3,\n  5\n]\n    at test (/tmp/tmpmth_354v.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmth_354v.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 5, 2,\
    \ 3, 0, 0 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979676
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a, b) => getCount(a) - getCount(b))\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmporn57q67.ts(12,31): error TS2304: Cannot find name
    ''getCount''.

    ../../../../../tmp/tmporn57q67.ts(12,45): error TS2304: Cannot find name ''getCount''.

    '
  timestamp: 1659979676
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let n =\
    \ arr.length;\n  if (n < 2) {\n    return arr;\n  }\n  else {\n    const left\
    \ = [];\n    const right = [];\n    let middle = 0;\n    while (middle < n - 1)\
    \ {\n      const a = arr[middle];\n      const b = arr[middle + 1];\n      if\
    \ (a > b) {\n        right.push(a);\n        middle++;\n      }\n      else {\n\
    \        left.push(b);\n        middle++;\n      }\n    }\n    const middle2 =\
    \ middle + 1;\n    const mergedArr = [];\n    while (middle < middle2) {\n   \
    \   const a = arr[middle];\n      const b = arr[middle + 1];\n      if (a > b)\
    \ {\n        mergedArr.push(a);\n        middle++;\n      }\n      else {\n  \
    \      mergedArr.push(b);\n        middle++;\n      }\n    }\n    mergedArr.push(arr[middle2]);\n\
    \    while (middle < n) {\n      mergedArr.push(arr[middle]);\n      middle++;\n\
    \    }\n    return mergedArr;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n\
    ]\n    at test (/tmp/tmppi0znoa8.js:57:12)\n    at Object.<anonymous> (/tmp/tmppi0znoa8.js:66:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979677
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    arr[i] = count_ones(arr[i]);\n  }\n  arr.sort((a,\
    \ b) => a - b);\n  let ret: number[] = new Array(arr.length);\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    ret[i] = arr[i];\n  }\n  return ret;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph7_q0bze.ts(13,14): error TS2304: Cannot find name
    ''count_ones''.

    '
  timestamp: 1659979677
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    let diff = count_ones(a) - count_ones(b);\n   \
    \ if (diff === 0) {\n      return a > b ? 1 : -1;\n    }\n    return diff;\n \
    \ });\n  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp39pc0xdo.ts(13,16): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmp39pc0xdo.ts(13,32): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979677
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  const firstBit =\
    \ new Array(len * 8).fill(0);\n  arr.forEach((x, i) => {\n    const bit = (x &\
    \ 1) === 1;\n    firstBit[i * 8 + bit] = 1;\n  });\n\n  const arr = new Array(len);\n\
    \  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    const a = firstBit[i++];\n\
    \    const b = firstBit[j++];\n    if (a > b) {\n      arr[j] = a;\n    } else\
    \ {\n      arr[j] = b;\n    }\n  }\n  while (i < len) {\n    const a = firstBit[i++];\n\
    \    arr[j] = a;\n    j++;\n  }\n  while (j < len) {\n    const b = firstBit[j++];\n\
    \    arr[j] = b;\n  }\n  return arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0d78sibs.ts(11,21): error TS2300: Duplicate identifier
    ''arr''.

    ../../../../../tmp/tmp0d78sibs.ts(16,39): error TS2339: Property ''fill'' does
    not exist on type ''any[]''.

    ../../../../../tmp/tmp0d78sibs.ts(19,14): error TS2365: Operator ''+'' cannot
    be applied to types ''number'' and ''boolean''.

    ../../../../../tmp/tmp0d78sibs.ts(22,9): error TS2300: Duplicate identifier ''arr''.

    '
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length\n  for (let i = 1; i < len; i++) {\n    const temp = arr[i - 1]\n\
    \    for (let j = i; j <= len; j++) {\n      if (arr[j - 1] > arr[j]) {\n    \
    \    arr[i - 1] = arr[j]\n        arr[j] = temp\n      }\n    }\n  }\n  return\
    \ arr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4,\n\
    \  5,\n  5,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpzaxwcfdx.js:27:12)\n    at Object.<anonymous> (/tmp/tmpzaxwcfdx.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 5,\
    \ 5, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979678
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const oneCounts\
    \ = arr.map(numToBinary).map(count => Math.ceil(count / 2))\n  return oneCounts.sort((a,\
    \ b) => a - b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwrk71p_p.ts(12,29): error TS2304: Cannot find name
    ''numToBinary''.

    ../../../../../tmp/tmpwrk71p_p.ts(12,65): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) {\n    return arr;\n  }\n  const len = arr.length;\n  for (let i = 1;\
    \ i < len; i++) {\n    for (let j = i; j > 0; j--) {\n      if (arr[j] < arr[i\
    \ - 1]) {\n        const tmp = arr[j];\n        arr[j] = arr[j - 1];\n       \
    \ arr[j - 1] = tmp;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  1,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp9wlj2fct.js:30:12)\n    at Object.<anonymous> (/tmp/tmp9wlj2fct.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // sort\
    \ by number of ones in binary representation\n  arr.sort((a, b) => b - a);\n\n\
    \  // sort by decimal representation\n  arr.sort((a, b) => {\n    if (a === 0)\
    \ return 1;\n    if (b === 0) return -1;\n    const c = Math.pow(10, b - 1);\n\
    \    return Math.floor(a * c) / c + a - Math.floor(a * c) / c;\n  });\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp9k8j7cb4.js:28:12)\n    at Object.<anonymous> (/tmp/tmp9k8j7cb4.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let temp:\
    \ number[] = [],\n      count: number = arr.length,\n      result: number[] =\
    \ [];\n  while (count > 0) {\n    temp[count--] = arr[count];\n  }\n  for (let\
    \ i = 0; i < temp.length; i++) {\n    result[count--] = temp[i];\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  '-1': 1,\n  '-2': 5,\n  '-3': 2,\n  '-4': 3,\n  '-5': 4\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmp65083cwj.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp65083cwj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ '-1': 1, '-2': 5, '-3': 2, '-4': 3, '-5': 4 ],\n  expected: [ 1, 2, 4, 3, 5\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  if (arr.length\
    \ === 0) {\n    return arr\n  }\n\n  if (arr.length === 1) {\n    return arr\n\
    \  }\n\n  // sort based on number of ones in binary representation\n  const arr2\
    \ = arr.map(n => bin2int(n).toString(2).split('').reverse().map(v => +v).reduce((sum,\
    \ num) => sum + num))\n\n  // sort based on decimal value\n  const arr3 = arr.map(n\
    \ => Math.sign(n) * Math.floor(Math.abs(n) * Math.pow(10, 0)))\n\n  return arr3.concat(arr2).sort((a,\
    \ b) => a - b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgv3_wdsz.ts(21,29): error TS2304: Cannot find name
    ''bin2int''.

    ../../../../../tmp/tmpgv3_wdsz.ts(24,34): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1659979678
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => parseInt(a) === parseInt(b) ? a - b : parseInt(a) - parseInt(b));\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpearme5j3.ts(12,38): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpearme5j3.ts(12,54): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpearme5j3.ts(12,76): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpearme5j3.ts(12,90): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659979678
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr[0] =\
    \ arr.sort((a, b) => { return a - b; })[0];\n  arr.forEach((num, i) => {\n   \
    \ const pos = i + 1;\n    while (pos < arr.length && num === arr[i]) {\n     \
    \ arr[pos] = arr[pos+1];\n      pos++;\n    }\n    arr[pos] = num;\n  });\n  return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmproe9pmsu.ts(17,7): error TS2588: Cannot assign to
    ''pos'' because it is a constant.

    '
  timestamp: 1659979678
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort(\
    \ (a, b) => b.localeCompare(a) );\n  return arr;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprrswpuux.ts(12,25): error TS2339: Property ''localeCompare''
    does not exist on type ''number''.

    '
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => {\n    return b - a;\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpf80usxha.js:19:12)\n    at Object.<anonymous> (/tmp/tmpf80usxha.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let n\
    \ = 0;\n    let sorted: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        const value = arr[i];\n        if (value) {\n            n++;\n \
    \           if (n % 2) {\n                sorted.push(value);\n            } else\
    \ {\n                sorted.sort((a, b) => a - b);\n                sorted.unshift(value);\n\
    \            }\n        }\n    }\n    return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  1,\n\
    \  2,\n  5,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnxf2vr91.js:32:12)\n    at Object.<anonymous> (/tmp/tmpnxf2vr91.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 1, 2,\
    \ 5, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ === 0) {\n        return arr;\n    }\n\n    const onesCount = arr\n        .map((elem)\
    \ => binary_search1(elem))\n        .reduce((acc, val) => acc += val);\n\n   \
    \ return binary_search(arr.map((elem) => elem % 2), onesCount, arr);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcfyxiwm2.ts(17,24): error TS2304: Cannot find name
    ''binary_search1''.

    ../../../../../tmp/tmpcfyxiwm2.ts(20,12): error TS2304: Cannot find name ''binary_search''.

    '
  timestamp: 1659979678
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr.sort((a:\
    \ number, b: number) => {\n    const aInt = parseInt(a.toString(2), 10);\n   \
    \ const bInt = parseInt(b.toString(2), 10);\n    if (aInt === bInt) {\n      return\
    \ aInt - bInt;\n    }\n    return aInt - bInt === 0 ? a.toString().localeCompare(b.toString())\
    \ : aInt - bInt;\n  });\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpnvofe6eo.js:25:12)\n    at Object.<anonymous> (/tmp/tmpnvofe6eo.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a:\
    \ number, b: number) => {\n        if (a === 0 && b === 0) {\n            return\
    \ 0;\n        }\n        if (a > b) {\n            return -1;\n        }\n   \
    \     return 1;\n    });\n    return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  4,\n\
    \  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpzvay4vz3.js:26:12)\n    at Object.<anonymous> (/tmp/tmpzvay4vz3.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len === 0) {\n    return arr;\n  }\n  // Sort first based\
    \ on number of ones\n  const oneCounts = arr.map(n => count_ones(n));\n  const\
    \ sortedArr = [];\n  for (let i = 0; i < len; i++) {\n    const counts = oneCounts[i];\n\
    \    let min = Infinity;\n    let minIndex = 0;\n    for (let j = 0; j < counts;\
    \ j++) {\n      min = Math.min(min, arr[i]);\n      minIndex = i;\n    }\n   \
    \ sortedArr.push(min);\n    arr.splice(minIndex, 1);\n  }\n  sortedArr.sort((a:\
    \ number, b: number) => {\n    const aDecimal = count_ones(a);\n    const bDecimal\
    \ = count_ones(b);\n    return aDecimal - bDecimal;\n  });\n  return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphl7g1k3_.ts(17,34): error TS2304: Cannot find name
    ''count_ones''.

    ../../../../../tmp/tmphl7g1k3_.ts(31,22): error TS2304: Cannot find name ''count_ones''.

    ../../../../../tmp/tmphl7g1k3_.ts(32,22): error TS2304: Cannot find name ''count_ones''.

    '
  timestamp: 1659979679
- exit_code: -1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++)\
    \ {\n            if (arr[i] == arr[j]) {\n                arr.splice(j + 1, 0,\
    \ arr[i]);\n                break;\n            }\n        }\n    }\n    arr.sort((a,\
    \ b) => a - b);\n    return arr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979694
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr\n        .map(i => i.toString(2).length)\n        .sort((a, b) => a - b)\n\
    \        .reverse();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  2,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpst804797.js:20:12)\n    at Object.<anonymous> (/tmp/tmpst804797.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 2,\
    \ 2, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    const onesInARow = arr[i];\n    const binaryRepresentation\
    \ = onesInARow.toString(2);\n    const binaryNumberArray = binaryRepresentation.split('').map(Number);\n\
    \    const sortedArray = binaryNumberArray.sort((a: number, b: number) => {\n\
    \      return a - b;\n    });\n\n    for (let j = 0; j < sortedArray.length; j++)\
    \ {\n      if (j > 0) {\n        if (sortedArray[j - 1] === sortedArray[j]) {\n\
    \          sortedArray[j - 1]++;\n        } else {\n          sortedArray[j]++;\n\
    \        }\n      } else {\n        sortedArray[j] = 1;\n      }\n    }\n  }\n\
    \  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpe01pjwjx.js:38:12)\n    at Object.<anonymous> (/tmp/tmpe01pjwjx.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tfor (let\
    \ i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (arr[i]\
    \ === arr[j]) {\n\t\t\t\tarr.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\tarr.sort((a, b) => {\n\t\tif (a > b) {\n\t\t\treturn 1;\n\t\
    \t} else if (a === b) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn -1;\n\t\t\
    }\n\t});\n\treturn arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmppvqsj79r.js:37:12)\n    at Object.<anonymous> (/tmp/tmppvqsj79r.js:46:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979679
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const len\
    \ = arr.length;\n  if (len < 1) {\n    return arr;\n  }\n  const high = len -\
    \ 1;\n  let low = 0;\n  while (high - low > 1) {\n    const mid = parseInt((high\
    \ + low) / 2);\n    if (arr[mid] > 0) {\n      high = mid;\n    } else {\n   \
    \   low = mid;\n    }\n  }\n  return merge(sort_array(arr.slice(0, low)), sort_array(arr.slice(low,\
    \ high)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk1fev1v5.ts(19,26): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpk1fev1v5.ts(21,7): error TS2588: Cannot assign to ''high''
    because it is a constant.

    ../../../../../tmp/tmpk1fev1v5.ts(26,10): error TS2304: Cannot find name ''merge''.

    '
  timestamp: 1659979679
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => a - b);\n    for (let i = 0; i < arr.length - 1; i++) {\n        if (arr[i]\
    \ > arr[i + 1]) {\n            const temp = arr[i];\n            arr[i] = arr[i\
    \ + 1];\n            arr[i + 1] = temp;\n        }\n    }\n    return arr;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp6032t97r.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6032t97r.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979680
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    return\
    \ arr.sort((a: number, b: number) => {\n        if (a.length === 0) return 1\n\
    \        if (b.length === 0) return -1\n        const ones = binToArr(a.toString(),\
    \ 1)\n        const zeros = binToArr(b.toString(), 1)\n        const biggest =\
    \ ones.length > zeros.length ? ones : zeros\n        const lesser = ones.length\
    \ < zeros.length ? ones : zeros\n        return biggest.length - lesser.length\n\
    \    })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpew6viath.ts(13,15): error TS2339: Property ''length''
    does not exist on type ''number''.

    ../../../../../tmp/tmpew6viath.ts(14,15): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpew6viath.ts(15,22): error TS2304: Cannot find name ''binToArr''.

    ../../../../../tmp/tmpew6viath.ts(16,23): error TS2304: Cannot find name ''binToArr''.

    '
  timestamp: 1659979680
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    arr.sort((a,\
    \ b) => {\n        const zeros = 0;\n        while (a !== 0 && b === 0) {\n  \
    \          a--;\n            b++;\n            zeros++;\n        }\n        while\
    \ (b !== 0 && a === 0) {\n            b--;\n            a++;\n            zeros++;\n\
    \        }\n        if (a === 0 && b === 0) {\n            return 0;\n       \
    \ }\n        switch (zeros) {\n            case 0:\n                return a >\
    \ b ? 1 : -1;\n            case 1:\n                return a > b ? -1 : 1;\n \
    \           case 2:\n                return Number(a) - Number(b);\n         \
    \   case 3:\n                return Number(a) - Number(b);\n            case 4:\n\
    \                return Number(a) - Number(b);\n            case 5:\n        \
    \        return Number(a) - Number(b);\n            case 6:\n                return\
    \ Number(a) - Number(b);\n        }\n    });\n    return arr;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1,\
    \ 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6,\
    \ -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp498ucujy.ts(17,13): error TS2588: Cannot assign to
    ''zeros'' because it is a constant.

    ../../../../../tmp/tmp498ucujy.ts(22,13): error TS2588: Cannot assign to ''zeros''
    because it is a constant.

    ../../../../../tmp/tmp498ucujy.ts(30,18): error TS2678: Type ''1'' is not comparable
    to type ''0''.

    ../../../../../tmp/tmp498ucujy.ts(32,18): error TS2678: Type ''2'' is not comparable
    to type ''0''.

    ../../../../../tmp/tmp498ucujy.ts(34,18): error TS2678: Type ''3'' is not comparable
    to type ''0''.

    ../../../../../tmp/tmp498ucujy.ts(36,18): error TS2678: Type ''4'' is not comparable
    to type ''0''.

    ../../../../../tmp/tmp498ucujy.ts(38,18): error TS2678: Type ''5'' is not comparable
    to type ''0''.

    ../../../../../tmp/tmp498ucujy.ts(40,18): error TS2678: Type ''6'' is not comparable
    to type ''0''.

    '
  timestamp: 1659979680
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let len\
    \ = arr.length\n  let swapIndex = 0\n  for (let i = 1; i < len; i++) {\n    while\
    \ (arr[swapIndex] < arr[i]) {\n      let temp = arr[swapIndex]\n      arr[swapIndex]\
    \ = arr[i]\n      arr[i] = temp\n      swapIndex++\n    }\n  }\n  return arr\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  5,\n  2,\n\
    \  3,\n  4,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpgwn6toj2.js:27:12)\n    at Object.<anonymous> (/tmp/tmpgwn6toj2.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 2, 3,\
    \ 4, 1 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    let binary\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        binary.push(arr[i]\
    \ + parseInt(arr[i].toString(2)));\n    }\n    binary.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < binary.length; i++) {\n        binary[i] = binary[i].toString(2);\n\
    \    }\n    binary.sort();\n    for (let i = 0; i < arr.length; i++) {\n     \
    \   arr[i] = parseInt(binary[i]);\n    }\n    return arr;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  10,\n  1100,\n\
    \  1101000,\n  1101010,\n  1110\n]\n\nshould loosely deep-equal\n\n[\n  1,\n \
    \ 2,\n  4,\n  3,\n  5\n]\n    at test (/tmp/tmpxpcj4r0z.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxpcj4r0z.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 10, 1100,\
    \ 1101000, 1101010, 1110 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    // sort\
    \ by binary value\n    arr.sort((a, b) => {\n        const aBinStr = '' + a;\n\
    \        const bBinStr = '' + b;\n        const aBinStrLen = aBinStr.length;\n\
    \        const bBinStrLen = bBinStr.length;\n        const aOnes = aBinStr.substr(0,\
    \ aBinStrLen - 1);\n        const bOnes = bBinStr.substr(0, bBinStrLen - 1);\n\
    \        // sort by descending order if number of ones is same\n        if (aOnes\
    \ === bOnes) {\n            return bBinStr.substr(bBinStrLen - 1) - aBinStr.substr(aBinStrLen\
    \ - 1);\n        }\n        // sort by ascending order otherwise\n        else\
    \ {\n            return bBinStrLen - aBinStrLen;\n        }\n    });\n    return\
    \ arr;\n}\n</code>\n<|/ a |>\n<| c |>\nIf one is not allowed to use binary strings\
    \ then one would need to convert them to binary, so `parseInt(a, 2)` and `parseInt(b,\
    \ 2)` would be needed.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ovqb7ax.ts(31,2): error TS1110: Type expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(31,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp2ovqb7ax.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(32,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp2ovqb7ax.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(33,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,112): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,133): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,139): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(34,142): error TS1005: '';'' expected.

    ../../../../../tmp/tmp2ovqb7ax.ts(35,1): error TS1003: Identifier expected.

    ../../../.'
  timestamp: 1659979680
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let res\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    let\
    \ current = 0;\n    for (let j = i; j < arr.length; j++) {\n      current = ~~arr[j];\n\
    \      if (current === 1) {\n        count++;\n      }\n    }\n    count === 0\
    \ ? (res.push(arr[i]), i++) : count > 1 ? (res.push(current), i++) : res.push(current);\n\
    \  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  5,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n  5\n]\n  \
    \  at test (/tmp/tmp4b6xrxwj.js:29:12)\n    at Object.<anonymous> (/tmp/tmp4b6xrxwj.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 5, 3\
    \ ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659979680
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr = _.sortBy(arr,\
    \ n => String.fromCharCode(n.toString(2).padStart(8, '0')));\n  arr = _.sortBy(arr,\
    \ n => parseInt(n, 2));\n  return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxtnbfdxn.ts(12,9): error TS2304: Cannot find name
    ''_''.

    ../../../../../tmp/tmpxtnbfdxn.ts(13,9): error TS2304: Cannot find name ''_''.

    '
  timestamp: 1659979680
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a,\
    \ b) => a > b ? 1 : 0);\n}\n\ntype PointType = { x: number, y: number };\ntype\
    \ CircleType = { x: number, y: number, radius: number };\ntype RectangleType =\
    \ { x: number, y: number, width: number, height: number };\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n\
    \  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n \
    \ assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3, 6, 44, 12, 32, 5]),[32,\
    \ 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8,\
    \ 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  5,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp6wv9y49l.js:17:12)\n    at Object.<anonymous> (/tmp/tmp6wv9y49l.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 5, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length\
    \ <= 1) return arr;\n\n    const map = new Map<number, number[]>();\n\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        const key = arr[i];\n\n        const\
    \ arr = map.get(key);\n\n        if (arr) {\n            arr.push(i);\n      \
    \  } else {\n            map.set(key, [i]);\n        }\n    }\n\n    const arr\
    \ = Array.from(map.values()).sort((a: number[], a: number[]) => a[0] - a[1]).flat();\n\
    \n    return arr.slice(0, arr.length - 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpprl6mf5p.ts(11,21): error TS2300: Duplicate identifier
    ''arr''.

    ../../../../../tmp/tmpprl6mf5p.ts(14,21): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    ../../../../../tmp/tmpprl6mf5p.ts(17,21): error TS2448: Block-scoped variable
    ''arr'' used before its declaration.

    ../../../../../tmp/tmpprl6mf5p.ts(28,11): error TS2300: Duplicate identifier ''arr''.

    ../../../../../tmp/tmpprl6mf5p.ts(28,23): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpprl6mf5p.ts(28,48): error TS2300: Duplicate identifier ''a''.

    ../../../../../tmp/tmpprl6mf5p.ts(28,61): error TS2300: Duplicate identifier ''a''.

    '
  timestamp: 1659979681
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  arr = arr.slice();\n\
    \  arr.sort((a, b) => {\n    const a_ones: number = (a >>> 0).toString(2);\n \
    \   const b_ones: number = (b >>> 0).toString(2);\n    return a_ones.length -\
    \ b_ones.length || (a_ones.split('1').length - b_ones.split('1').length);\n  });\n\
    \  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvb3x4hl0.ts(14,11): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpvb3x4hl0.ts(15,11): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpvb3x4hl0.ts(16,19): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpvb3x4hl0.ts(16,35): error TS2339: Property ''length'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpvb3x4hl0.ts(16,53): error TS2339: Property ''split'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpvb3x4hl0.ts(16,80): error TS2339: Property ''split'' does
    not exist on type ''number''.

    '
  timestamp: 1659979681
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.sort((a:\
    \ number, b: number) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([1, 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2,\
    \ -3, -4, -5, -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0,\
    \ 2, 3, 4]),[0, 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp7nx3914f.js:17:12)\n    at Object.<anonymous> (/tmp/tmp7nx3914f.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n\tlet len\
    \ = arr.length;\n\tlet ones: number[] = [];\n\tlet max = 0;\n\tlet cnt = 0;\n\t\
    for (let i = 0; i < len; i++) {\n\t\tones.push(0);\n\t}\n\tfor (let i = 0; i <\
    \ len; i++) {\n\t\tones[arr[i]-1] = 1;\n\t\tcnt++;\n\t\tif (cnt > max) {\n\t\t\
    \tmax = cnt;\n\t\t}\n\t}\n\tlet arr2 = [];\n\tfor (let i = 0; i < len; i++) {\n\
    \t\tif (ones[i] === 1) {\n\t\t\tarr2[arr[i]] = i;\n\t\t}\n\t}\n\tlet len = arr2.length;\n\
    \tlet temp: number[] = [];\n\tfor (let i = max-1; i >= 0; i--) {\n\t\ttemp.push(arr2[len-i]);\n\
    \t}\n\twhile (temp.length > 0) {\n\t\tarr.push(temp.pop());\n\t}\n\treturn arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp78m279o_.ts(12,6): error TS2451: Cannot redeclare
    block-scoped variable ''len''.

    ../../../../../tmp/tmp78m279o_.ts(32,6): error TS2451: Cannot redeclare block-scoped
    variable ''len''.

    '
  timestamp: 1659979680
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // Sort\
    \ the array according to number of ones in its binary representation in ascending\
    \ order.\n  let binaryArr = binary(arr);\n  let sortArr = binaryArr.map((item)\
    \ => item === '1' ? 1 : -1 * item).sort();\n  // Ascending sort based on decimal\
    \ value.\n  sortArr.sort((a: number, b: number) => a - b);\n  return sortArr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5,\
    \ 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf67olfeg.ts(13,19): error TS2304: Cannot find name
    ''binary''.

    '
  timestamp: 1659979681
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[j]\
    \ > arr[j + 1]) {\n        const temp = arr[j];\n        arr[j] = arr[j + 1];\n\
    \        arr[j + 1] = temp;\n      }\n    }\n  }\n  return arr;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2, 3,\
    \ 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
    \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
    \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmpmidk3asg.js:26:12)\n    at Object.<anonymous> (/tmp/tmpmidk3asg.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
- exit_code: 2
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  return arr.map((x,\
    \ idx) =>\n    arr.slice().sort((a, b) => b - a).findIndex((y) =>\n      x !==\
    \ y && x & y * y\n    )\n  )\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo8t5fmfy.ts(13,39): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    '
  timestamp: 1659979681
- exit_code: 1
  program: "//In this Kata, you have to sort an array of non-negative integers according\
    \ to\n// number of ones in their binary representation in ascending order.\n//\
    \ For similar number of ones, sort based on decimal value.\n// It must be implemented\
    \ like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
    \ -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n\
    // [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  // TODO:\
    \ Use helper function here to sort arr directly.\n  arr.sort((a, b) => {\n   \
    \ if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n  return\
    \ arr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1,\
    \ 5, 2, 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5,\
    \ -6]),[-4, -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0,\
    \ 1, 2, 4, 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
    \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2,\
    \ 4, 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16,\
    \ 32]),[2, 4, 8, 16, 32]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  4,\n  3,\n\
    \  5\n]\n    at test (/tmp/tmp6dfdcs70.js:25:12)\n    at Object.<anonymous> (/tmp/tmp6dfdcs70.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4, 5 ],\n  expected: [ 1, 2, 4, 3, 5 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659979681
