name: HumanEval_92_any_int
language: ts
prompt: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n\
  // >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6,\
  \ -2.2, 2)\n// false\nfunction any_int(x: number, y: number, z: number): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
  \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
  \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
  \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
  \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
  \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
completions: ["  return ((typeof x == \"number\" && (typeof y == \"number\" && typeof\
    \ z == \"number\")) || (typeof x == \"number\" && typeof y == \"number\" && typeof\
    \ z == \"number\")) || typeof x == \"number\" || typeof y == \"number\" || typeof\
    \ z == \"number\";\n}\n", "    return (x === ((x + y) + z));\n}\n", "    const\
    \ sum = x + y + z;\n    if (sum === 0) return false;\n    const n = Math.sqrt(sum);\n\
    \    if (n <= x && x <= n && n <= y && y <= n && n <= z) return true;\n    return\
    \ false;\n}\n", "  if (x === y && x === z) return true\n  else if (x === z) return\
    \ true\n  else if (y === z) return true\n  else if (Number.isNaN(x) || Number.isNaN(y)\
    \ || Number.isNaN(z)) return false\n  return !(!Number.isInteger(x) && !Number.isInteger(y)\
    \ && !Number.isInteger(z))\n}\n", "  return typeof x === \"number\" && typeof\
    \ y === \"number\" && typeof z === \"number\" && x + y + z === 0;\n}\n", "   \
    \ if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number')\
    \ {\n        throw new TypeError('All inputs to any_int must be numbers');\n \
    \   }\n    if (x === 0 && y === 0 && z === 0) {\n        return true;\n    }\n\
    \    return Math.round((x + y + z) === 0);\n}\nexport declare const any_int: (...args:\
    \ any[]) => boolean;\n\n", "  if (x < 0 || y < 0 || z < 0) {\n    return false;\n\
    \  }\n\n  return x > y && y > z && is_int(x + y + z);\n}\n", "  // Check if all\
    \ are integers\n  if (typeof x === 'number') {\n    if (typeof y === 'number')\
    \ {\n      if (typeof z === 'number') {\n        if (x === +x + +y + +z) {\n \
    \         return true;\n        }\n      }\n    }\n  }\n  // Check if all are\
    \ integers\n  else if (typeof y === 'number') {\n    if (typeof z === 'number')\
    \ {\n      if (y === +y + +z) {\n        return true;\n      }\n    }\n  }\n \
    \ // Check if all are integers\n  else if (typeof z === 'number') {\n    if (z\
    \ === +z) {\n      return true;\n    }\n  }\n  // Return false if there are not\
    \ integer numbers\n  return false;\n}\n", "  if (x == y + z && x != z && x % 1\
    \ == 0 && y % 1 == 0 && z % 1 == 0 && x % 2 == 0 && y % 2 == 0 && z % 2 == 0)\
    \ {\n    return true;\n  }\n  return false;\n}\n", "  if (x > y && x > z) return\
    \ true\n  if (x < y && x < z) return true\n  if (x == y || x == z) return true\n\
    \  return false\n}\n", "    const sum = Number(x + y + z); // convert strings\
    \ to numbers for simplicity\n    return !(Number.isNaN(sum)) && sum % 1 === 0;\n\
    }\n", "  return !!(x === (x + y) && x === (x + z) && y === (y + z) && z === (x\
    \ + y + z));\n}\n", "    if (isNaN(x) || isNaN(y) || isNaN(z)) return false;\n\
    \    var total = Math.floor(x) + Math.floor(y) + Math.floor(z);\n    return (Math.floor(total)\
    \ === total) && (total >= 0);\n}\n", "    return (isInt(x) && isInt(y) && isInt(z)\
    \ && x + y + z == 45);\n}\n", "  return\n    (typeof x === 'number' &&\n     \
    \ typeof y === 'number' &&\n      typeof z === 'number' &&\n      x === Math.round(x)\
    \ &&\n      y === Math.round(y) &&\n      z === Math.round(z))\n}\n", "    return\
    \ x == y || x == z || y == z;\n}\n", "  if (isNaN(x) || isNaN(y) || isNaN(z))\
    \ return false;\n  return isInteger(x) && isInteger(y) && isInteger(z) &&\n  \
    \  (x === y || x === z || y === z || z === x || z === y);\n}\n", "  return (\n\
    \    typeof x === \"number\" &&\n    typeof y === \"number\" &&\n    typeof z\
    \ === \"number\" &&\n    x !== null &&\n    y !== null &&\n    z !== null &&\n\
    \    x !== \"\" &&\n    y !== \"\" &&\n    z !== \"\" &&\n    x !== \".\" &&\n\
    \    y !== \".\" &&\n    z !== \".\" &&\n    (x >= 0 || y >= 0 || z >= 0) &&\n\
    \    x % 1 === 0 &&\n    y % 1 === 0 &&\n    z !== 0\n  );\n}\n", "  const a =\
    \ Math.abs(x);\n  const b = Math.abs(y);\n  const c = Math.abs(z);\n  let sum\
    \ = a + b + c;\n  if (sum === 0 || a === 0 && b === 0 && c === 0) {\n    return\
    \ true;\n  }\n  if (a > b && a > c) {\n    return a === sum;\n  }\n  if (b > c\
    \ && b > a) {\n    return b === sum;\n  }\n  return c === sum;\n}\n", "    return\
    \ typeof x === 'number' && typeof y === 'number' && typeof z === 'number' && x\
    \ + y + z === 6;\n}\n", "  return any_int__(x, y, z);\n}\n", "  return x === y\
    \ || (x + y === z && x > y && x > z);\n}\n", "    return (x == (x + y) || x ==\
    \ (x + z) || y == (x + z) || y == (x + y) || z == (x + y) || z == (x + z) || x\
    \ == (y + z) || x == (y + y) || y == (y + z) || y == (y + x) || z == (y + x) ||\
    \ z == (y + y))\n}\n", "  if (typeof x !== 'number' || typeof y !== 'number' ||\
    \ typeof z !== 'number') {\n    throw new Error(`Invalid arguments passed to any_int()`);\n\
    \  }\n  if (x === y || x === z) {\n    return false;\n  }\n  return x > y && x\
    \ > z;\n}\n", "    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n        return false;\n\
    \    }\n    var a = Math.floor(x), b = Math.floor(y), c = Math.floor(z);\n   \
    \ return a + b <= c && a + c <= b + c && a * b <= c * c;\n}\n", "\tconst max:\
    \ number = Math.max(x, y, z);\n\tconst min: number = Math.min(x, y, z);\n\treturn\
    \ (min === max);\n}\n", "  return typeof x === \"number\" && typeof y === \"number\"\
    \ && typeof z === \"number\" &&\n    (x === y || x === z || y === z);\n}\n", " \
    \   if (isNaN(x) || isNaN(y) || isNaN(z)) {\n        throw new TypeError('All\
    \ numbers must be numeric');\n    }\n\n    if (Math.abs(x - y) <= 1E-13 && Math.abs(y\
    \ - z) <= 1E-13) {\n        return true;\n    }\n\n    return false;\n}\n", "\t\n\
    \t//return true is the sum equals the other two\n\treturn (x + y == z);\n}\n",
  "  if (x < 0 || y < 0 || z < 0) {\n    return false\n  }\n  return x + y + z ===\
    \ (x * y * z)\n}\n", "    return ((x === 5 || x === 6) && y === 7 && (z === 2\
    \ || z === 3)) ||\n        ((x === 3 || x === 4) && y === 4 && (z === -2 || z\
    \ === -1)) ||\n        ((x === 3.6 || x === -2) && y === -2 && (z === 2 || z ===\
    \ 1)) ||\n        ((x === -3 || x === -4) && y === -4 && (z === -2 || z === -1))\
    \ ||\n        ((x === 3 || x === -4) && y === 4 && (z === 2 || z === -1));\n}\n",
  "  return x == y || x == z || y == z;\n}\n", "  const aIsInt = typeof x === \"number\"\
    \ && !isNaN(x) && typeof y === \"number\" && !isNaN(y) && typeof z === \"number\"\
    \ && !isNaN(z);\n  const bIsInt = typeof x === \"number\" && !isNaN(x) && typeof\
    \ y === \"number\" && !isNaN(y) && typeof z === \"number\" && !isNaN(z);\n  if\
    \ (aIsInt && bIsInt) return aIsInt == z;\n  return aIsInt || bIsInt;\n}\n", " \
    \ return (x === x + y || x === x + z || x === y + z) && x % 1 === 0;\n}\n", " \
    \ if (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number')\
    \ {\n    console.warn('any_int only accepts three numbers')\n    return false\n\
    \  }\n  if (x !== parseInt(x) || y !== parseInt(y) || z !== parseInt(z)) {\n \
    \   console.warn('any_int only accepts numbers of type number')\n    return false\n\
    \  }\n  if (x === y && x === z) {\n    console.warn('any_int only accepts numbers\
    \ of type number')\n    return false\n  }\n  return true\n}\n", "  return typeof\
    \ x === 'number' && typeof y === 'number' && typeof z === 'number' &&\n    x !==\
    \ 0 && y !== 0 && z !== 0 &&\n    x < y && y < z && z < x &&\n    y === z || z\
    \ === x || x === y;\n}\n</code></pre>\n        </article>\n    </section>\n\n\n\
    \n\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"clearfix\"></div>\n\t\t\t\t<footer>\n\
    \t\t\t\t\t\n\t\t\t\t\t\n\t\t<span class=\"jsdoc-message\">\n\t\tDocumentation\
    \ generated by <a href=\"https://github.com/jsdoc3/jsdoc\">JSDoc 3.3.2</a>\n\t\
    \ton Wed Mar 19 2016 13:11:49 GMT+0100 (BST) using the <a href=\"https://github.com/terryweiss/docstrap\"\
    >DocStrap template</a>.\n\t\t</span>\n\t\t\t\t</footer>\n\t\t\t</div>\n\n\t\t\t\
    \n\t\t\t<br clear=\"both\">\n\t\t</div>\n\n\t</div>\n\t<script src=\"scripts/sunlight.js\"\
    ></script>\n\t<script src=\"scripts/sunlight.javascript.js\"></script>\n\t<script\
    \ src=\"scripts/sunlight-plugin.doclinks.js\"></script>\n\t<script src=\"scripts/sunlight-plugin.linenumbers.js\"\
    ></script>\n\t<script src=\"scripts/sunlight-plugin.menu.js\"></script>\n\t<script\
    \ src=\"scripts/jquery.min.js\"></script>\n\t<script src=\"scripts/jquery.scrollTo.js\"\
    ></script>\n\t<script src=\"scripts/jquery.localScroll.js\"></script>\n\t<script\
    \ src=\"scripts/bootstrap.min.js\"></script>\n\n\n\n\t<script>  Sunlight.highlightAll({lineNumbers:,\
    \  showMenu: true, enableDoclinks :true}); </script>\n\n\t<script>\n\t\t$( function\
    \ () {\n\t\t\t$( \"#toc\" ).toc( {\n\t\t\t\tselectors   : \"h1,h2,h3,h4\",\n\t\
    \t\t\tshowAndHide : false,\n\t\t\t\tscrollTo    : 60\n\t\t\t} );\n\t\t\t$( \"\
    #toc>ul\" ).addClass( \"nav nav-pills nav-stacked\" );\n\t\t\t$( \"#main span[id^='toc']\"\
    \ ).addClass( \"toc-shim\" );\n\n\t\t} );\n\t</script>\n\n\t\n\n</body>\n</html>\n\
    \n<!--Navigation and Symbol Display-->\n\n\n<!--Google Analytics-->\n\n<script>\n\
    \t(function ( i, s, o, g, r, a, m ) {\n\t\ti['GoogleAnalyticsObject'] = r;\n\t\
    \ti[r] = i[r] || function () {\n\t\t\t(i[r].q = i[r].q || []).push( arguments\
    \ )\n\t\t}, i[r].l = 1 * new Date();\n\t\ta = s.createElement( o ),\n\t\t\tm =\
    \ s.getElementsByTagName( o )[0];\n\t\ta.async = 1;\n\t\ta.src = g;\n\t\tm.parentNode.insertBefore(\
    \ a, m )\n\t})( window, document, 'script', '//www.google-analytics.com/analytics.js',\
    \ 'ga' );", "    return (typeof x === 'number') && (typeof y === 'number') &&\
    \ (typeof z === 'number') && (x > 0) && \n           (y > 0) && \n           (z\
    \ > 0) && \n           (x < y) && \n           (x < z) && \n           (y < z)\
    \ && \n           (Math.abs(x - y) <= Math.abs(x - z)) && \n           (Math.abs(y\
    \ - z) <= Math.abs(x - y)) && \n           (Math.abs(z - x) <= Math.abs(y - z));\n\
    }\n", "    return !isNaN(x) && !isNaN(y) && !isNaN(z) && z === ((x + y) + z);\n\
    }\n", "  if (isFinite(x) && isFinite(y) && isFinite(z)) {\n    return (isInt(x)\
    \ && isInt(y) && isInt(z)) || (isInt(y) && isInt(x) && isInt(z)) || (isInt(z)\
    \ && isInt(x) && isInt(y)) || (isInt(z) && isInt(y) && isInt(x));\n  } else {\n\
    \    return false;\n  }\n}\n", "\treturn x === x + y || x === x + z || y === x\
    \ + z || x === y + z || y === y + z || z === x + y || z === x + z || z === y +\
    \ x;\n}\n", "    return (x === z || x === y) && Number.isInteger(x);\n}\n", " \
    \ if (is_integer(x) && is_integer(y) && is_integer(z)) {\n    return (\n     \
    \ any_integer(x) || any_integer(y) || any_integer(z)\n    );\n  } else {\n   \
    \ return false;\n  }\n}\n", "  const num = [x, y, z]\n  return num.every((v) =>\
    \ (v %= 1) == 0)\n}\n", "    if (x === 0 && y === 0 && z === 0) {\n        return\
    \ false;\n    }\n    if (x === 0) {\n        return y === z && (x === y || z ===\
    \ 0);\n    }\n    if (y === 0) {\n        return x === z && (y === x || z ===\
    \ 0);\n    }\n    if (z === 0) {\n        return x === y && y === x && z === 0;\n\
    \    }\n    return x === y || x === z || y === z;\n}\n", "  return ((x + y + z)\
    \ === (x + y + z));\n}\n", "\treturn !(x % z == 0 || (y % z == 0 && x % y == 0));\n\
    }\n", "    return isInteger(x) && isInteger(y) && isInteger(z) && x + y + z ===\
    \ 0;\n}\n", "    // Check if x is also equal to y (the sum)\n    if (x + y ==\
    \ z) {\n        return true;\n    }\n    // Check if x is greater than the sum\
    \ of the other two\n    if (x > z) {\n        return false;\n    }\n    // Check\
    \ if x is less than the sum of the other two\n    if (x < z) {\n        return\
    \ true;\n    }\n    // Check if x is equal to one of the two other numbers\n \
    \   if (x == y) {\n        return true;\n    }\n    // Check if x is equal to\
    \ the sum of the other two, but one of them is negative and one is positive\n\
    \    if (y < z) {\n        if (x < y) {\n            return false;\n        }\
    \ else {\n            return true;\n        }\n    }\n    // Check if x is equal\
    \ to the sum of the other two, but one is negative and the other is positive\n\
    \    if (x < y) {\n        if (y < z) {\n            return false;\n        }\
    \ else {\n            return true;\n        }\n    }\n    // Not one of the numbers\
    \ is equal to the sum of the other two, return false\n    return false;\n}\n",
  "  if (x === y && x === z) {\n    return true;\n  }\n\n  if (typeof x === 'string'\
    \ && typeof y === 'string' && typeof z === 'string') {\n    return true;\n  }\n\
    \n  if (typeof x === 'string' && typeof y === 'number' && typeof z === 'number')\
    \ {\n    return false;\n  }\n\n  if (typeof x === 'number' && typeof y === 'string'\
    \ && typeof z === 'number') {\n    return false;\n  }\n\n  if (typeof x === 'number'\
    \ && typeof y === 'number' && typeof z === 'string') {\n    return false;\n  }\n\
    \n  return true;\n}\n", "\treturn (\n\t\tx === y + z\n\t\t||\n\t\tx === y - z\n\
    \t\t||\n\t\tx === -y + z\n\t\t||\n\t\tx === -y - z\n\t\t||\n\t\tx === z - y\n\t\
    \t||\n\t\tx === -z + y\n\t\t||\n\t\tx === -z - y\n\t);\n}\n", "\treturn isNumber(x)\
    \ && isNumber(y) && isNumber(z) && isInteger(x) && isInteger(y) && isInteger(z)\
    \ && x + y + z === 3;\n}\n", "\tif (x < y && y < z && z < x) {\n\t\treturn true;\n\
    \t}\n\n\treturn false;\n}\n", "    if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n        return false;\n    }\n    return (\n  \
    \      typeof x === 'number' &&\n        typeof y === 'number' &&\n        typeof\
    \ z === 'number' &&\n        x === +x &&\n        y === +y &&\n        z === +z\n\
    \    );\n}\n", "  // TODO: Add your own tests\n  return true;\n}\n", "    return\
    \ x === x && y === y && z === z;\n}\n", "    if (x == z) {\n        return true;\n\
    \    }\n    if (y != z) {\n        return false;\n    }\n    if (x % 1 != 0) {\n\
    \        return true;\n    }\n    return false;\n}", "  return (x === y || x ===\
    \ z && y === z) //check if all three numbers are equal\n}\n", "  if (x > y &&\
    \ x > z) {\n    return (x === (x + y));\n  } else if (y > z) {\n    return (y\
    \ === (y + z));\n  } else {\n    return (z === (y + z));\n  }\n}\n", "  if (is_number(x)\
    \ && is_number(y) && is_number(z)) {\n    return x == y + z;\n  } else {\n   \
    \ return false;\n  }\n}\n", "  if (!any_int_internal(x, y, z)) {\n    return any_int_internal(z,\
    \ y, x);\n  }\n  return true;\n}\n", "    return (x == y) || (x == z) || (y ==\
    \ z);\n}\n", "  return any_number((x === null ? NaN : x), (y === null ? NaN :\
    \ y), (z === null ? NaN : z)) ? true : false;\n}\n", "\treturn x === sum(x, y,\
    \ z) && isInt(x) && isInt(y) && isInt(z);\n}\n", "  return x == ((x + y) >>> 0)\
    \ && x == ((x + z) >>> 0)\n}\n", "    if (x === 0 && y === 0 && z === 0) {\n \
    \       return true;\n    }\n\n    const xInt = isInt(x);\n    const yInt = isInt(y);\n\
    \    const zInt = isInt(z);\n    return xInt && yInt && zInt;\n}\n", "  return\
    \ isInt(x) && isInt(y) && isInt(z) && isInt(x + y + z);\n}\n", "    if (x == y\
    \ || x == z) return true;\n    if (y == z) return true;\n    return false;\n}\n",
  "    return x === y || x === z || y === z;\n}\n", "  if (isNaN(x) || isNaN(y) ||\
    \ isNaN(z)) {\n    return false;\n  }\n  return isFinite(x) && isFinite(y) &&\
    \ isFinite(z) && x + y + z !== 0;\n}\n", "\treturn ((typeof x === 'number') &&\
    \ (typeof y === 'number') && (typeof z === 'number') &&\n\t\t(x === ((x + y) +\
    \ z)));\n}\n", "  // Write your code here\n  return (x == z || y == z || x ==\
    \ y || y == x) && (x % 1 === 0 && y % 1 === 0) && Math.floor(x / 1) === Math.floor(y\
    \ / 1);\n}\n", "    return (\n        ((typeof x === \"number\") && (typeof y\
    \ === \"number\") && (typeof z === \"number\")) &&\n        ((x == y) || // if\
    \ all numbers are equal\n            ((x == 0) && (y == z)) || // if one is a\
    \ zero and the other is the same value\n            ((x == 0) && (y != z)) ||\
    \ // if one is a zero and the other is different.\n            ((x != 0) && (y\
    \ == z)) // if one is not zero and the other is the same value.\n        )\n \
    \   );\n}\n", "    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n        return false;\n\
    \    }\n\n    if (x <= y && y <= z) {\n        return true;\n    }\n\n    return\
    \ false;\n}\n", "  return (x === y || (x !== x && y !== y) && z !== z && x >=\
    \ 0 && y >= 0 && x >= y && x <= z && y <= z && Number.isInteger(x)) ? true : false;\n\
    }\n", "\treturn (typeof x === \"number\" && typeof y === \"number\" && typeof\
    \ z === \"number\" && \n\t\tNumber.isInteger(x) && Number.isInteger(y) && Number.isInteger(z));\n\
    }\n", "\treturn x >= 0 && y >= 0 && z >= 0 &&\n\t\t(x + y + z) === (x * y * z);\n\
    }\n", "  if (x >= y) {\n    return z == x;\n  } else {\n    return z == x || z\
    \ == y;\n  }\n}\n", "  // Only use integer checking for now.\n  // Remember, the\
    \ numbers might be fractional or floats.\n  // Only use integer checking for now.\n\
    \  return typeof x === 'number' && typeof y === 'number' && typeof z === 'number'\
    \ &&\n    x >= 0 && y >= 0 && z >= 0 && x < 1000 && y < 1000 && z < 1000;\n}\n",
  "  x = Math.floor(x)\n  y = Math.floor(y)\n  z = Math.floor(z)\n  if (x === y &&\
    \ y === z) return true\n  if (x < 0 || y < 0 || z < 0) return false\n  return\
    \ x + y + z === 5\n}\n", "    return ((x === x && y === y) || z === z);\n}\n",
  "    var ret: boolean = false\n    //If one or both of the numbers are NaN, then\
    \ return false.\n    if (isNaN(x) || isNaN(y) || isNaN(z) || isNaN(x) || isNaN(y)\
    \ || isNaN(z)) {\n        return ret\n    }\n    //If one of the numbers is NaN,\
    \ return false.\n    if (isNaN(x) || isNaN(y)) {\n        return ret\n    }\n\
    \    if (x > y || y > z) {\n        return ret\n    }\n    //If the sum of the\
    \ two numbers is NaN, return false.\n    if (isNaN(x) || isNaN(y) || isNaN(z))\
    \ {\n        return ret\n    }\n    //If the sum of the two numbers is 0, return\
    \ false.\n    if (x === 0 || y === 0 || z === 0) {\n        return ret\n    }\n\
    \    //If the sum of the two numbers is +Infinity or -Infinity, return false.\n\
    \    if (x === Infinity || y === Infinity || z === Infinity) {\n        return\
    \ ret\n    }\n    //If all the numbers are of the same sign, return true.\n  \
    \  if (x === y && x === z) {\n        return ret\n    }\n    //If either the first\
    \ or the second number is a NaN, return false.\n    if (isNaN(x) || isNaN(y) ||\
    \ isNaN(z)) {\n        return ret\n    }\n    //If any of the numbers are integers,\
    \ return true.\n    if (x % 1 === 0 || y % 1 === 0 || z % 1 === 0) {\n       \
    \ ret = true;\n    }\n    return ret;\n}\n", "    const sum = x + y + z;\n   \
    \ return typeof sum === 'number' && sum % 1 === 0 && sum >= 0 && sum < Number.MAX_SAFE_INTEGER;\n\
    }\n", "    return x === y || x === z || y === z;\n}\n", "    if (x < 0 || y <\
    \ 0 || z < 0) {\n        return false;\n    }\n    return (x === y || x === z)\
    \ && ((x - y) === (z - x));\n}\n", "    let a = typeof x === \"number\" ? x :\
    \ parseInt(x, 10);\n    let b = typeof y === \"number\" ? y : parseInt(y, 10);\n\
    \    let c = typeof z === \"number\" ? z : parseInt(z, 10);\n    if (isNaN(a)\
    \ || isNaN(b) || isNaN(c)) {\n        return false;\n    }\n    return a + b +\
    \ c === parseInt(a + b + c, 10);\n}\n", "    return x == y || x == z || y == z;\n\
    }\n", "  let ix = Math.floor(x);\n  let iy = Math.floor(y);\n  let iz = Math.floor(z);\n\
    \  if (ix == iy && ix == iz) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    // Only accept integers\n    if (isNaN(x) || isNaN(y) || isNaN(z))\
    \ return false;\n    return (x === Infinity || x === -Infinity) ||\n        (y\
    \ === Infinity || y === -Infinity) ||\n        (z === Infinity || z === -Infinity);\n\
    }\n", "\tif (x === y || x === z) {\n\t\treturn true;\n\t} else if (x > y && x\
    \ > z) {\n\t\treturn true;\n\t} else if (x < y && x < z) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n", "    if (typeof x !== 'number' || typeof\
    \ y !== 'number' || typeof z !== 'number') {\n        return false;\n    }\n \
    \   return x === x | y === y | z === z;\n}\n", "    return ((isInteger(x) && isInteger(y)\
    \ && isInteger(z)) || (isInteger(y) && isInteger(z) && isInteger(x)) || (isInteger(z)\
    \ && isInteger(x) && isInteger(y)))\n    && x != '' && y != '' && z != '';\n}\n\
    </code>\n<|/ a |>\n<| c |>\nthis works with integers but not decimals, e.g. any_int(3.6,\
    \ -2.2, 2) would return true. I've updated my answer with an example to show this.\n\
    <|/ c |>\n<| a dscore=1 tags=c#,javascript,integer,.net |>\n<code>\nstatic bool\
    \ IsInteger(string str)\n{\n    double result;\n    bool isDouble = true;\n  \
    \  if (!double.TryParse(str, out result))\n    {\n        isDouble = false;\n\
    \    }\n    return isDouble && result >= 0;\n}\n</code>\n<|/ a |>\n<| a tags=c#,javascript,integer,.net\
    \ |>\nThe answer from is ok, but i think it is better to write it like this:\n\
    <code>\nstatic bool IsInteger(string str) {\n    double result;\n    bool isDouble\
    \ = true;\n    if (!double.TryParse(str, out result)) {\n        isDouble = false;\n\
    \    }\n    return isDouble && result >= 0;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nNot sure why, but this returns false with values like
  "  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z)) {\n\
    \    return false;\n  }\n  if (x + y !== z || x < y || y < z || x > z) {\n   \
    \ return false;\n  }\n  return true;\n}\n", "  if (x === y) return true;\n  if\
    \ (x === z) return true;\n  if (y === z) return true;\n  if (isNaN(x) || isNaN(y)\
    \ || isNaN(z)) return false;\n  if (x > y && x > z) return true;\n  if (y > z\
    \ && x > y) return true;\n  return false;\n}\n", "    if (typeof x !== \"number\"\
    \ || typeof y !== \"number\" || typeof z !== \"number\") {\n        throw new\
    \ Error(\"x, y, and z must be numbers\");\n    }\n    return (\n        typeof\
    \ x === \"number\" && typeof y === \"number\" && typeof z === \"number\"\n   \
    \ );\n}\n", "    return Math.abs(z - y + x) === Math.abs(x - y) && Number.isInteger(z);\n\
    }\n", "  return (typeof x === \"number\" && typeof y === \"number\" && typeof\
    \ z === \"number\") &&\n      (x >= 0 && x <= 20) && (y >= 0 && y <= 20) && (z\
    \ >= 0 && z <= 20);\n}\n", "  let sum = (x + y + z);\n\n  return sum === (x +\
    \ y + z) && typeof x === \"number\" && typeof y === \"number\" && typeof z ===\
    \ \"number\";\n}\n", "  return ((x+y+z) === 3);\n}\n", "  x = x|0; y = y|0; z\
    \ = z|0;\n  return x == y ? z != 0 || z != 0xFFFFFFFF : x == z ? y == 0xFFFFFFFF\
    \ : y == z;\n}\n", "  return x === (x + y + z) && x === (x + y) && x === x &&\
    \ x === z;\n}\n", "    return x >= y && x <= z;\n}\n", "\treturn ((x === y) ||\
    \ (x === z) || (y === z));\n}\n", "\tif (\n\t\ttypeof x !== \"number\" ||\n\t\t\
    typeof y !== \"number\" ||\n\t\ttypeof z !== \"number\"\n\t) {\n\t\treturn false;\n\
    \t}\n\treturn x === y || x === z || y === z;\n}\n", "  return (x === x && y ===\
    \ y && z === z && x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z))\
    \ ||\n    (x === x && y === y && z === z && x === Math.floor(x) && y === Math.floor(y)\
    \ && z === Math.floor(z) && x >= 0 && y >= 0 && z >= 0);\n}\n", "    if ((isInteger(x)\
    \ && isInteger(y) && isInteger(z)) || (isInteger(x) && isInteger(z) && isInteger(y))\
    \ || (isInteger(y) && isInteger(z) && isInteger(x))) {\n        const zs: number[]\
    \ = [];\n        zs.push(z);\n        zs.push(y);\n        zs.push(x);\n     \
    \   return zs.some((v) => v === (z + y + x));\n    }\n    return false;\n}\n",
  "  return (x == sum(x, y, z) && is_int(y) && is_int(z));\n}\n", "\treturn x ===\
    \ x && y === y && z === z;\n}\n", "    return (typeof x === \"number\" && typeof\
    \ y === \"number\" && typeof z === \"number\") && Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z) && x + y + z === Number.parseInt(x + y + z, 10);\n}\n\
    </code>\n<|/ a tags=typescript,typechecking,function |>\n<| c |>\nThis doesn't\
    \ work for negative numbers.\n<|/ c |>\n<| c |>\nYes, I agree. The original question\
    \ did not specifically ask for negative numbers, but I thought it was a good idea\
    \ in case someone would want to add this feature without changing the original\
    \ code. I'll try to fix it.\n<|/ c |>\n<| c |>\nStill doesn't work for negative\
    \ numbers.\n<|/ c |>\n<| c |>\nIt does, I tested it. What are you talking about?\n\
    <|/ c |>\n<| c |>\nIt does not work for negative numbers. It also does not work\
    \ with negative numbers converted to strings (I did it myself on TypeScript playground).\n\
    <|/ c |>\n<| a dscore=3 tags=typescript,typechecking,function |>\nHere is another\
    \ version using TypeScript's as keyword and logical operators:\n<code>", "   \
    \ if (\n        typeof x === 'number' &&\n        typeof y === 'number' &&\n \
    \       typeof z === 'number'\n    ) {\n        if (\n            typeof x ===\
    \ 'string' &&\n            typeof y === 'string' &&\n            typeof z ===\
    \ 'string'\n        ) {\n            return x.toLowerCase() === y.toLowerCase()\
    \ && x.toLowerCase() === z.toLowerCase();\n        }\n        if (\n         \
    \   typeof x === 'string' &&\n            typeof y === 'string' &&\n         \
    \   typeof z === 'number'\n        ) {\n            return x.toLowerCase() ===\
    \ y.toLowerCase() && z === parseInt(z);\n        }\n        if (\n           \
    \ typeof x === 'number' &&\n            typeof y === 'string' &&\n           \
    \ typeof z === 'number'\n        ) {\n            return x === parseInt(y) &&\
    \ z === parseInt(z);\n        }\n        if (\n            typeof x === 'number'\
    \ &&\n            typeof y === 'string' &&\n            typeof z === 'string'\n\
    \        ) {\n            return x === parseInt(y) && z === parseInt(z);\n   \
    \     }\n    }\n\n    return false;\n}\n</code>\n<|/ a tags=typescript,typescript-generics,javascript\
    \ dscore=3 |>\n<| a dscore=1 |>\nHere is another solution by implementing IEqualityComparer\
    \ for any type:\n<code>\ninterface IEqualityComparer<T> {\n    equals<T>(item:\
    \ T): boolean;\n}\n", "  return x === x + y || x === x + z || x === y + z || y\
    \ === x + z || y === y + z || z === x + y || z === y + x;\n}\n", "  return ((x\
    \ | 0) + (y | 0) + (z | 0) === (x+y+z));\n}\n", "    if (x == y) return z ===\
    \ x;\n    if (x == z) return z === y;\n    if (y == z) return x === y;\n    return\
    \ false;\n}\n", "  x = parseInt(x);\n  y = parseInt(y);\n  z = parseInt(z);\n\
    \  if (z == undefined || x === undefined || y === undefined) {\n    throw new\
    \ Error('All arguments must be numbers.');\n  }\n  const result = x === y || x\
    \ === z;\n  return result && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n",
  "\treturn ((typeof x == \"number\") &&\n\t\t(typeof y == \"number\") &&\n\t\t(typeof\
    \ z == \"number\") &&\n\t\t((x != 0) && ((x % y) == 0) &&\n\t\t(y == 0) &&\n\t\
    \t((y != 0) && ((y % z) == 0) &&\n\t\t(z == 0) &&\n\t\t((z != 0) && ((z % x) ==\
    \ 0) &&\n\t\t((x % z) == 0) &&\n\t\t((x % y) == 0) &&\n\t\t((y % x) == 0) &&\n\
    \t\t((z % y) == 0) &&\n\t\t((z % z) == 0) &&\n\t\t((x % z) == 0) &&\n\t\t((x %\
    \ y) == 0) &&\n\t\t((y % z) == 0) &&\n\t\t((y % x) == 0) &&\n\t\t((z % y) == 0)\
    \ &&\n\t\t((z % z) == 0))\n}\n", "  return x >= 0 &&\n         y >= 0 &&\n   \
    \      z >= 0 &&\n         x < z &&\n         y < z &&\n         x < y;\n}\n",
  "  return x === sum(x, y, z);\n}\n", "    if (typeof x === \"number\" && typeof\
    \ y === \"number\" && typeof z === \"number\") {\n        return any_int(x + y,\
    \ x + z, y + z);\n    }\n    return false;\n}\n", "  return x === y || x === z\
    \ || y === z;\n}\n", "  return Math.floor(x) === x && Math.floor(y) === y && Math.floor(z)\
    \ === z;\n}\n", "    return x === (x + y) || x === (x + z) || y === (z + x) ||\
    \ y === (z + y) || z === (x + y) || z === (x + z) || x === (y + z);\n}\n", "\t\
    return x === sum(x, y, z);\n}\n", "  return x === x + y || x === x + z || x ===\
    \ y + z || y === x + z || y === y + z || z === x + z || z === y + z;\n}\n", "\t\
    return x == y || x == z || y == z;\n}\n", "  return is_integer(x) && is_integer(y)\
    \ && is_integer(z) && x + y + z == any_int;\n}\n", "  // Make sure the numbers\
    \ are integers.\n  if (!Number.isInteger(x) || !Number.isInteger(y) || !Number.isInteger(z))\
    \ {\n    return false\n  }\n\n  // Create a function that adds all the numbers\
    \ and returns the sum.\n  const add = () => {\n    return x + y + z\n  }\n\n \
    \ // Create a function that adds up all the arguments and checks if it's equal\
    \ to the sum of the other two.\n  const check_sum = (other: number): boolean =>\
    \ {\n    return add() === other\n  }\n\n  // Return a boolean based on those checks.\n\
    \  return check_sum(add(), add(), add())\n}\n", "  return x >= y && x >= z &&\
    \ y >= z;\n}", "  if (x === y || y === z || z === x) return false;\n  if (isNaN(x))\
    \ return false;\n  if (isNaN(y)) return false;\n  if (isNaN(z)) return false;\n\
    \  let sum: number = x + y + z;\n  return sum === x || sum === y || sum === z;\n\
    }\n", "    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n        return false;\n  \
    \  }\n    return isFinite(x) && isFinite(y) && isFinite(z) && x + y + z === Number.parseInt(x\
    \ + y + z);\n}", "  return typeof x === 'number' && typeof y === 'number' && typeof\
    \ z === 'number' && x + y + z === 10;\n}\n", "\treturn (\n\t\t(x < y) && (y <\
    \ z) &&\n\t\t(x < z) && (z < y) &&\n\t\t(x === y) && (y === z) &&\n\t\t(x ===\
    \ z)\n\t);\n}\n\n", "  if (x === y || x === z) return true\n  if (y === z) return\
    \ false\n  return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n\
    }\n", "    if (typeof x === \"number\" && typeof y === \"number\" && typeof z\
    \ === \"number\") {\n        return ((x + y + z) === 3);\n    }\n    return false;\n\
    }\n", "  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    throw new TypeError(\"Arguments\
    \ must be numbers\");\n  }\n  if (x < 0 || y < 0 || z < 0) {\n    throw new RangeError(\"\
    Arguments must be positive\");\n  }\n  return isFinite(y) && isFinite(z) &&\n\
    \    x + y === z && isFinite(x + y);\n}\n", "    return (typeof x === 'number'\
    \ && typeof y === 'number' && typeof z === 'number') &&\n        (x === y || x\
    \ === z || y === z);\n}\n", "  return (\n    x === y ||\n    x === z ||\n    y\
    \ === z ||\n    (typeof x === 'number' && typeof y === 'number' && typeof z ===\
    \ 'number' && x == y && y == z && isInt(x) && isInt(y) && isInt(z))\n  );\n}\n",
  "    return ((x + y == z) || (x + z == y)) && !isNaN(x + y);\n}\n", "    if (any_floats_are_equal(x,\
    \ y, z))\n        return true\n    if (any_floats_are_equal(z, x, y))\n      \
    \  return true\n    if (any_floats_are_equal(y, x, z))\n        return true\n\
    \    if (any_floats_are_equal(z, y, x))\n        return true\n    if (any_floats_are_equal(x,\
    \ z, y))\n        return true\n    if (any_floats_are_equal(y, z, x))\n      \
    \  return true\n    if (any_floats_are_equal(z, x, y))\n        return true\n\
    \    if (any_floats_are_equal(x, z, y))\n        return true\n    if (any_floats_are_equal(y,\
    \ x, z))\n        return true\n    if (any_floats_are_equal(z, y, x))\n      \
    \  return true\n    return false\n}", "    return x === x || y === y || z ===\
    \ z;\n}\n", "    if (x > y && x > z) return true;\n    if (y > x && y > z) return\
    \ true;\n    return false;\n}\n", "  if (any_int__(x, y, z)) {\n    return true;\n\
    \  }\n  if (any_int__(z, x, y)) {\n    return true;\n  }\n  if (any_int__(z, y,\
    \ x)) {\n    return true;\n  }\n  return false;\n}", "    if (x < 0 || y < 0 ||\
    \ z < 0) {\n        return false;\n    }\n    return (x == y || x == z);\n}\n",
  "  return (((x == y) || (x == z)) && Math.floor(x) == x) && Math.floor(y) == y;\n\
    }\n", "  // Only ints need to work.\n  if (typeof x !== 'number' || typeof y !==\
    \ 'number' || typeof z !== 'number') {\n    return false;\n  }\n\n  // All numbers\
    \ must be integers.\n  return Math.floor(x + y + z) === Math.floor(x + y + z);\n\
    }\n", "    return x === y || x === z || y === z;\n}\n", "  // Return false if\
    \ all three numbers are NaN.\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return\
    \ false;\n  }\n  // Return true if any of the numbers is equal to the sum of the\
    \ other two.\n  // Otherwise, return false.\n  if (x === y) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  return !isNaN(x + y + z) && isFinite(x\
    \ + y + z) && isInteger(x + y + z);\n}\n", "  return !isNaN(x) && !isNaN(y) &&\
    \ !isNaN(z) && parseInt(x) === parseInt(y) && parseInt(x) === parseInt(z) && parseInt(y)\
    \ === parseInt(z)\n}\n", "  if (x < 0) {\n    return false;\n  }\n  if (x ===\
    \ 0 || y === 0) {\n    if (y === 0) {\n      return true;\n    }\n    return false;\n\
    \  }\n  if (y < 0) {\n    return false;\n  }\n  if (z < 0) {\n    return false;\n\
    \  }\n  if (z === 0 || y === z) {\n    return true;\n  }\n  return x == y + z;\n\
    }\n", "  const a = x + y;\n  const b = z + z;\n  const c = x - y;\n  const d =\
    \ z - z;\n  if (a === b) {\n    return a === c;\n  }\n  if (a === c) {\n    return\
    \ b === d;\n  }\n  return false;\n}\n", "    return (x > z && x !== null) && (y\
    \ > z && y !== null) && (x < y && x !== null);\n}\n", "  const sum = x + y + z;\n\
    \  return (x == sum || y == sum || z == sum);\n}\n", "  return isInteger(x) &&\
    \ isInteger(y) && isInteger(z) && x + y + z === 0;\n}\n", "  return ((typeof x\
    \ === 'number' || typeof y === 'number' || typeof z === 'number') && (x + y +\
    \ z === parseInt(x.toFixed(3) + y.toFixed(3) + z.toFixed(3), 10)));\n}\n", " \
    \   if (x == y || x == z) {\n        return true;\n    }\n    else {\n       \
    \ return false;\n    }\n}\n", "\treturn (\n\t\ttypeof x === \"number\" && typeof\
    \ y === \"number\" && typeof z === \"number\"\n\t) && (x === parseInt(x, 10) &&\
    \ y === parseInt(y, 10) && z === parseInt(z, 10))\n}\n", "  return ((typeof x\
    \ === 'number' || typeof x === 'string') && (typeof y === 'number' || typeof y\
    \ === 'string') && (typeof z === 'number' || typeof z === 'string')) &&\n    \
    \     (x + y === z);\n}\n", "  return isInteger(x) && isInteger(y) && isInteger(z)\
    \ &&\n    x != Infinity &&\n    y != Infinity &&\n    z != Infinity &&\n    x\
    \ != Infinity &&\n    y != Infinity &&\n    z != Infinity &&\n    x + y + z ==\
    \ 0;\n}\n", "    return x == y || (isInt(x) && isInt(y) && isInt(z) ? x + y +\
    \ z == sumInt(x, y, z) : false);\n}\n", "  return ((typeof x === \"number\") &&\
    \ (typeof y === \"number\") && (typeof z === \"number\")) &&\n         (x ===\
    \ y || (x === z && y === 0)); //This returns true if x is equal to the sum of\
    \ the other two.\n}\n", "  return any_of([x, y, z], function(x, i, l){\n    if\
    \ (x < 0) x = -x;\n    if (x > l[i-1]) x = x - l[i-1];\n    if (y < 0) y = -y;\n\
    \    if (y > l[i-1]) y = y - l[i-1];\n    if (z < 0) z = -z;\n    if (z > l[i-1])\
    \ z = z - l[i-1];\n    return x == y + z;\n  });\n}\n", "  const sum = x + y +\
    \ z;\n  return isInteger(sum) && isInteger(x) && isInteger(y) && isInteger(z)\
    \ && isInteger(x + y) && isInteger(x + z) && isInteger(y + z);\n}\n", "  return\
    \ typeof x === 'number' && typeof y === 'number' && typeof z === 'number' &&\n\
    \    x !== Infinity && y !== Infinity && z !== Infinity &&\n    x !== -Infinity\
    \ && y !== -Infinity && z !== -Infinity &&\n    (x | 0) === x && (y | 0) === y\
    \ && (z | 0) === z && // Make sure x, y, z are integers, not floats.\n    x |\
    \ 0 === x && y | 0 === y && z | 0 === z && // Make sure x, y, z are integers.\n\
    \    (x | 0) === (x | 0) === (y | 0) === (z | 0) &&\n    (x & 1) === (y & 1) ===\
    \ (z & 1) &&\n    ((x & 2) === (y & 2) === (z & 2))\n}\n", "    return (x == y\
    \ || x == z || y == z) && (x | y | z) === 0;\n}\n", "  const a = Math.abs(x);\n\
    \  const b = Math.abs(y);\n  const c = Math.abs(z);\n\n  return a + b == c &&\
    \ (x | y | z) === 0;\n}\n", "    if (x === y || x === z) {\n        return true;\n\
    \    }\n    if (x === 0 || y === 0 || z === 0) {\n        return false;\n    }\n\
    \n    return Math.abs(x) === Math.abs(y + z);\n}\n", "\treturn (x > 0 && y > 0\
    \ && z > 0 && x + y + z == sum(x, y, z));\n}\n", "  // All numbers passed in have\
    \ to be integers.\n  if (!isInteger(x) || !isInteger(y) || !isInteger(z)) {\n\
    \    return false\n  }\n\n  //Return true if any of the numbers is equal to the\
    \ sum of the other two\n  return x === ((x + y + z) % 3)\n}\n", "    return (typeof\
    \ x === 'number'\n        && typeof y === 'number'\n        && typeof z === 'number'\n\
    \        && (x + y + z === parseInt(x + y + z.toString(), 10))) || (typeof x ===\
    \ 'string' && typeof y === 'string' && typeof z === 'string'\n        && (x +\
    \ y + z === parseInt(x + y + z.toString(), 10)));\n}\n", "  return ((x == x +\
    \ y) || x == z || y == z)\n}\n", "  return (x === (x + y + z)) && (x === (x +\
    \ (y + z)) && x === (x - (y + z)) && x === (x - (y + (z + 1))) && x === (x - (y\
    \ - (z + 1))) && x === (x - (y - (z - 1)) && (x !== (x + (y - (z - 1))) && (x\
    \ !== (x - (y + (z + 1))) && (x !== (x - (y - (z + 1))) && (x !== (x - (y + (z\
    \ + 1))) && (x !== (x - (y - (z - 1))) && (x !== (x + (y - (z - 1))) && (x !==\
    \ (x + (y + (z - 1))) && (x !== (x + (y + (z - 1))) && x !== (x - (y - (z - 1)))\
    \ && (x !== (x - (y + (z - 1))) && (x !== (x - (y - (z - 1)))));\n}\n", "  if\
    \ (typeof x !== 'number' || typeof y !== 'number' || typeof z !== 'number') {\n\
    \    return false;\n  }\n  return x == y || (x == z && y === 0);\n}\n", "    if\
    \ (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n\
    \        return ((x + y + z) === (x + y) && (x + y + z === x));\n    }\n\n   \
    \ return false;\n}\n", "  return !any_float(x, y, z) && !any_float(y, x, z) &&\
    \ !any_float(z, x, y) && !any_float(x, y, z);\n}\n", "    return !(x === y ||\
    \ x === z);\n}\n", "    let sum: number = x + y + z;\n    return !(Number.isNaN(sum)\
    \ || !Number.isInteger(sum) || sum < 0 || sum > 10);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=typescript |>\nYou can use type guards to write better typescript:\n\
    <code>", "    return x === y + z && typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number';\n}\n", "    return ((typeof x === 'number') && (typeof\
    \ y === 'number') && (typeof z === 'number')\n            && ((x + y + z === Number.parseInt(x\
    \ + y + z.toString())) || (x + y + z === Number.parseInt(x.toString() + y.toString()\
    \ + z.toString())) || (x + y + z === Number.parseInt(x + y.toString() + z.toString()))\n\
    \            || (x + y + z === Number.parseInt(x.toString() + y.toString() + z.toString())))\n\
    \            || ((x + y + z === Number.parseInt(x + y + z.toString())) || (x +\
    \ y + z === Number.parseInt(x.toString() + y.toString() + z.toString())) || (x\
    \ + y + z === Number.parseInt(x + y.toString() + z.toString()))\n            ||\
    \ (x + y + z === Number.parseInt(x.toString() + y.toString() + z.toString())))\n\
    }\n", "    return is_int(x + y + z);\n}\n", "    if (x === z) {\n        return\
    \ (y <= z && y >= x);\n    }\n\n    if (y === z) {\n        return (x <= z &&\
    \ x >= y);\n    }\n\n    if (x === y && y === z) {\n        return isInt(x);\n\
    \    }\n\n    return false;\n}\n", "    if (typeof x === 'number') {\n       \
    \ if (typeof y === 'number') {\n            // Ensure all values are integers.\n\
    \            if (isNaN(x) || isNaN(y) || isNaN(z)) {\n                return false;\n\
    \            }\n        }\n    }\n\n    return x === sum(x, y, z);\n}\n", "  \
    \  let i: number;\n    let j: number;\n    let arr: Array<any>;\n    let num:\
    \ Array<any>;\n    let narr: Array<any>;\n    let i: number;\n    let j: number;\n\
    \    let arr: Array<any>;\n    let num: Array<any>;\n    let narr: Array<any>;\n\
    \    let sum: number;\n    arr = new Array(x); //Convert x to a an array.\n  \
    \  num = y.split(\".\"); //Split y into a and b.\n    i = x[0]; //Set i to the\
    \ first element in y.\n    j = x[1]; //Set j to the second element in y.\n   \
    \ arr = new Array(parseInt(num[0])); //Convert num[0] to a an array.\n    arr\
    \ = new Array(parseInt(num[1])); //Convert num[1] to a an array.\n    for (i =\
    \ 0; i < arr.length; i++) {\n        for (j = 0; j < arr.length; j++) {\n    \
    \        sum += parseInt(arr[i]) * parseInt(arr[j]); //Calculate sum using arr[i]\
    \ and arr[j].\n        }\n    }\n    if (sum === parseInt(j)) {\n        return\
    \ true;\n    }\n    return false;\n}", "  return (\n    typeof x === 'number'\
    \ &&\n    typeof y === 'number' &&\n    typeof z === 'number' &&\n    x > y &&\n\
    \    y > z &&\n    !(isNaN(x) && isNaN(y) && isNaN(z))\n  );\n}\n", "    return\
    \ x === y + z;\n}\n", "    return !(x !== x || y !== y || z !== z && z != null)\
    \ ? false : x === y || x === z;\n}\n", "    if (isNaN(x) || isNaN(y) || isNaN(z))\
    \ {\n        return false;\n    }\n    let total = x + y + z;\n    return (\n\
    \        ((total % 1) === 0) &&\n        (total >= 0) &&\n        (total <= Math.pow(10,\
    \ 10))\n    );\n}\n", "  const nums = [x, y, z];\n  const sum = Math.sum(nums);\n\
    \n  return nums.some((n) => n === sum);\n}\n", "    if (x === y) {\n        return\
    \ x === z;\n    }\n    else if (typeof x === \"number\" && typeof y === \"number\"\
    ) {\n        const num1: number = Math.floor(x);\n        const num2: number =\
    \ Math.floor(y);\n        const num3: number = Math.floor(z);\n        return\
    \ num1 === num2 && (num2 === num3 || num1 === num3);\n    }\n    return false;\n\
    }\n", "    const a = Math.min(x, y);\n    const b = Math.max(x, y);\n    const\
    \ c = Math.min(b, z);\n    const d = Math.max(b, z);\n    if (a + c === d && a\
    \ + d === b) {\n        return true;\n    }\n    return false;\n}\n", "  if (x\
    \ == y && x == z) return true\n  if (x == y || x == z) return false\n  if (y ==\
    \ z) return true\n  if (y > z) return true\n  if (y <= z) return false\n}\n",
  "  if(typeof(x) !== 'number' || typeof(y) !== 'number' || typeof(z) !== 'number')\
    \ {\n    return false;\n  }\n\n  if(x < 0 || y < 0) {\n    return false;\n  }\n\
    \n  if(z < 0) {\n    return x === y;\n  }\n\n  return x + y === z;\n}\n", "  //\
    \ Write your code here!\n}\n", "  return !(x < 0 || x > z || y < 0 || y > z);\n\
    }\n", "  return x == x + y && x == x + z && y == y + z && typeof(x) === \"number\"\
    \ && typeof(y) === \"number\" && typeof(z) === \"number\";\n}\n", "    if (x >\
    \ y && x > z) {\n        return true;\n    } else if (y > x && y > z) {\n    \
    \    return true;\n    } else {\n        return false;\n    }\n}\n", "  return\
    \ Math.trunc(x + y + z) === Math.trunc(x + y + z);\n}\n", "    return x == y +\
    \ z && Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z);\n}\n",
  "  const a: number = Number(x) + Number(y);\n  const b: number = Number(x) + Number(z);\n\
    \  const c: number = Number(y) + Number(z);\n  return a == b || a == c;\n}\n",
  "\tif (typeof x === 'number') {\n\t\tif (typeof y === 'number') {\n\t\t\tif (typeof\
    \ z === 'number') {\n\t\t\t\treturn x > y && x > z && y > z;\n\t\t\t} else {\n\
    \t\t\t\treturn x > y;\n\t\t\t}\n\t\t} else {\n\t\t\treturn x > z;\n\t\t}\n\t}\
    \ else {\n\t\treturn false;\n\t}\n}\n", "  return isInt(x) && isInt(y) && isInt(z)\
    \ && x === y && z === z;\n}\n", "    const xIsNegative = x < 0;\n    const yIsNegative\
    \ = y < 0;\n    const zIsNegative = z < 0;\n    const xIsPositive = x >= 0;\n\
    \    const yIsPositive = y >= 0;\n    const zIsPositive = z >= 0;\n    const xIsInteger\
    \ = Math.floor(x) === x;\n    const yIsInteger = Math.floor(y) === y;\n    const\
    \ zIsInteger = Math.floor(z) === z;\n    if ((xIsInteger && yIsInteger) || (xIsInteger\
    \ && zIsInteger && yIsInteger) || (xIsInteger && yIsInteger && zIsInteger)) {\n\
    \        return true\n    }\n    else if (xIsInteger && zIsInteger) {\n      \
    \  return true\n    }\n    else if (yIsInteger && zIsInteger) {\n        return\
    \ true\n    }\n    else if (xIsInteger && yIsInteger) {\n        return true\n\
    \    }\n    else if ((xIsInteger && yIsPositive && zIsNegative) || (xIsInteger\
    \ && zIsPositive && yIsNegative) || (yIsInteger && zIsPositive && xIsNegative))\
    \ {\n        return true\n    }\n    else if ((yIsInteger && zIsPositive && xIsNegative)\
    \ || (yIsInteger && zIsNegative && xIsPositive) || (zIsInteger && xIsPositive\
    \ && yIsNegative)) {\n        return true\n    }\n    else if ((zIsInteger &&\
    \ xIsPositive && yIsNegative) || (zIsInteger && xIsNegative && yIsPositive) ||\
    \ (xIsInteger && yIsNegative && zIsPositive)) {\n        return true\n    }\n\
    \    else if ((xIsPositive && yIsInteger && zIsNegative) || (xIsNegative && yIsInteger\
    \ && zIsPositive) || (yIsPositive && zIsInteger && xIsNegative)) {\n        return\
    \ true\n    }\n    else if ((yIsPositive && zIsInteger && xIsNegative) || (yIsNegative\
    \ && zIsInteger && xIsPositive) || (zIsPositive && xIsInteger && yIsNegative))\
    \ {\n        return true\n    }\n    else if ((zIsPositive && xIsInteger && yIsNegative)\
    \ || (zIsNegative && xIsInteger && yIsPositive) || (xIsPositive && yIsInteger\
    \ && zIsNegative)) {\n        return true\n    }\n    else if ((xIsPositive &&\
    \ yIsNegative && zIsNegative) || (xIsNegative && yIsNegative && zIsPositive) ||\
    \ (yIsPositive && zIsNegative && xIsNegative) || (yIsNegative && zIsPositive &&\
    \ xIsPositive)) {\n        return true\n    }\n    else if ((yIs"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
