name: HumanEval_124_valid_date
language: ts
prompt: "//You have to write a function which validates a given date string and\n\
  // returns true if the date is valid otherwise false.\n// The date is valid if all\
  \ of the following rules are satisfied:\n// 1. The date string is not empty.\n//\
  \ 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  // 3. The months should not be less than 1 or higher than 12.\n// 4. The date should\
  \ be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>>\
  \ valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n\
  // >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n\
  // false\nfunction valid_date(date: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
  ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
  04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
  01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"\
  06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
  04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
  20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
  2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
  test();"
completions: ["  // If the date string is empty, return true.\n  if (date === \"\"\
    ) {\n    return true;\n  }\n  let dateArray = date.split(\"-\");\n  if (dateArray.length\
    \ != 3) {\n    return false;\n  }\n  // 1. The date string is not empty.\n  if\
    \ (dateArray[0] !== \"\") {\n    return false;\n  }\n  // 2. The number of days\
    \ is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the\
    \ number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
    \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
    \  if (dateArray[1] < 1 || dateArray[1] > 31 ||\n    dateArray[2] < 1 || dateArray[2]\
    \ > 30) {\n    return false;\n  }\n  // 3. The months should not be less than\
    \ 1 or higher than 12.\n  if (dateArray[1] < 1 || dateArray[1] > 12) {\n    return\
    \ false;\n  }\n  // 4. The date should be in the format: mm-dd-yyyy\n  if (dateArray[0]\
    \ > 12 || dateArray[0] < 1) {\n    return false;\n  }\n  return true;\n}\n", " \
    \ // Get the date from the date string\n  let date = new Date(date);\n\n  // If\
    \ the date is not valid, return false\n  if (!date || isNaN(date.getTime())) {\n\
    \    return false;\n  }\n\n  // Get the number of days between the current date\
    \ and the passed date\n  let days = current_date - date;\n\n  // Get the months\
    \ between the current date and the passed date\n  let months = monthDiff(current_date,\
    \ date);\n\n  // Get the years between the current date and the passed date\n\
    \  let years = yearDiff(current_date, date);\n\n  // If any of the criteria is\
    \ not satisfied, return false\n  if (days < 1 || days > 31 || months < 1 || months\
    \ > 12 || years < 1 || years > 99) {\n    return false;\n  }\n\n  // Return true\n\
    \  return true;\n}\n", "  // Your code here\n}\n```\n#### @date: The date string\
    \ to validate.\n#### @returns: True or false according to the above rules.\n*/\n\
    declare function valid_date(date: string): boolean;", "    if (date.length ===\
    \ 0) return false;\n    let month = date.split('-')[0];\n    let day = date.split('-')[1];\n\
    \    let year = date.split('-')[2];\n    let maxDay = 31;\n    let maxMonth =\
    \ 12;\n    if (month.length !== 2) return false;\n    if (day.length === 1) return\
    \ false;\n    if (day.length > maxDay) return false;\n    if (year.length > 4)\
    \ return false;\n    if (month < 1 || month > 12) return false;\n    if (day <\
    \ 1 || day > maxDay) return false;\n    if (month == 1) {\n        if (day > 31)\
    \ return false;\n        if (year % 400 == 0) return false;\n        if (year\
    \ % 100 == 0 && year % 4 == 0) return false;\n        if (year % 4 == 0) return\
    \ true;\n    } else if (month == 2) {\n        if (day > 29) return false;\n \
    \       if (year % 100 == 0) return false;\n        if (year % 4 == 0) return\
    \ true;\n    }\n    return true;\n}\n", "    if (\n        date.length === 0 ||\n\
    \        !isDateString(date) ||\n        date.length <= 2 ||\n        !isDateValid(date)\
    \ ||\n        date.length < 4 ||\n        !isDateFormatted(date) ||\n        !isDateValid(date,\
    \ \"MM-dd-yyyy\")\n    ) {\n        return false;\n    }\n\n    return true;\n\
    }\n", "    return !date.length || !date.match(/\\d/g) || new Date(date).getDate()\
    \ < 1 || new Date(date).getDate() > 31 || new Date(date).getMonth() < 1 || new\
    \ Date(date).getMonth() > 12 || new Date(date).getFullYear() < 1000 || new Date(date).getFullYear()\
    \ > 2020 || new Date(date).getFullYear() > new Date(date).getFullYear() || new\
    \ Date(date).getDate() < new Date(date).getDate() || new Date(date).getDate()\
    \ > new Date(date).getDate();\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ work when months are in order like January to December and days number are greater\
    \ then 31 as in February.\n<|/ c |>\n<| c |>\nit works, check the fiddle: https://jsfiddle.net/x9qy4wfc/1/\
    \ , also the updated answer with some more examples\n<|/ c |>\n<| a |>\nIf you\
    \ just want to validate a date string and nothing more, it is better to use regex\
    \ patterns. Here is an example:\n<code>\nconst datePattern = /^(\\d{1,2})\\/(\\\
    d{1,2})\\/(\\d{4})$/;\n", "    if (date.length <= 0) {\n        return false;\n\
    \    }\n\n    let d = new Date(date);\n    let valid: boolean;\n\n    if ((d.getMonth()\
    \ + 1) > 12 || d.getMonth() < 1 ||\n        (d.getDate() >= 1 && d.getDate() <=\
    \ 31) &&\n        (d.getDate() >= 1 && d.getDate() <= 30) &&\n        (d.getDate()\
    \ >= 1 && d.getDate() <= 29) &&\n        (d.getMonth() + 1) > 1) {\n        return\
    \ false;\n    }\n\n    if ((d.getDate() >= 1 && d.getDate() <= 31) && (d.getMonth()\
    \ + 1) > 12) {\n        return false;\n    }\n\n    if ((d.getDate() >= 1 && d.getDate()\
    \ <= 30) && (d.getMonth() + 1) > 11) {\n        return false;\n    }\n\n    if\
    \ ((d.getDate() >= 1 && d.getDate() <= 29) && (d.getMonth() + 1) > 10) {\n   \
    \     return false;\n    }\n\n    return true;\n}\n", "  if (date == null || date.length\
    \ < 2) {\n    return false;\n  }\n\n  let splitted = date.split('-');\n\n  if\
    \ (splitted.length < 3) {\n    return false;\n  }\n\n  if (splitted.length !==\
    \ 3) {\n    return false;\n  }\n\n  let year = parseInt(splitted[0]);\n  let month\
    \ = parseInt(splitted[1]) - 1;\n  let day = parseInt(splitted[2]);\n\n  if (month\
    \ < 1 || month > 12 || day < 1 || (day > daysInMonth(year, month)) || year < 1)\
    \ {\n    return false;\n  }\n\n  return true;\n}\n", "    if (!date) return false;\n\
    \    if (date.trim() == \"\") return false;\n\n    let dateArray = date.split(\"\
    -\");\n\n    let isValidDay = true;\n    let isValidMonth = true;\n    let isValidYear\
    \ = true;\n\n    if (dateArray.length > 3) return false;\n\n    let monthCheck\
    \ = Number(dateArray[1]) - 1;\n    if (monthCheck < 1 || monthCheck > 12) return\
    \ false;\n\n    let dayCheck = Number(dateArray[2]);\n    if (dayCheck < 1 ||\
    \ dayCheck > 31) return false;\n\n    let yearCheck = Number(dateArray[0]) - 1900;\n\
    \    if (yearCheck < 1 || yearCheck > 9999) return false;\n\n    if (monthCheck\
    \ == 2 && dayCheck < 1 || dayCheck > 30) return false;\n    if (monthCheck !=\
    \ 2 && dayCheck < 1 || dayCheck > 31) return false;\n\n    return true;\n}\n",
  "  date = date.split(\"-\");\n  if(date.length !== 3) {\n    return false;\n  }\n\
    \  if(date[0].length !== 2) {\n    return false;\n  }\n  if(date[1].length !==\
    \ 2) {\n    return false;\n  }\n  if(date[2] < 1 ||\n    date[2] > 30 ||\n   \
    \ (date[2] > 29 && date[1].length != 2)) {\n    return false;\n  }\n  if(date[2]\
    \ > 31) {\n    return false;\n  }\n  if(date[2] > 29) {\n    return false;\n \
    \ }\n  if(date[2] > 28) {\n    return false;\n  }\n  return true;\n}\n</code></pre>\n\
    \        </section>\n        <section>\n          <h2 style=\"text-align: center\"\
    >How to use this?</h2>\n          <p class=\"fragment\">Just create a new folder\
    \ and name it \"valid-date-js\"</p>\n          <p class=\"fragment\">Inside the\
    \ folder create a file \"valid-date.js\"</p>\n          <pre><code class=\"javascript\"\
    \ data-trim contenteditable>", "    if (date.length === 0) {\n        return false;\n\
    \    }\n    const parts = date.split(\"-\");\n    if (parts[0].length === 0 ||\
    \ parts[2].length === 0 || parts[1].length < 1 || parts[1].length > 31 || parts[2].length\
    \ < 1 || parts[2].length > 31)\n        return false;\n    const month = parseInt(parts[0]);\n\
    \    const day = parseInt(parts[2]);\n    if (month < 1 || month > 12)\n     \
    \   return false;\n    if (day < 1 || day > 32)\n        return false;\n    return\
    \ true;\n}\n", "  const valid = /^\\d{0,2}-\\d{1,2}-\\d{4}$/.test(date)\n  const\
    \ daysInMonth = new Date(2020, 1, 29).getDate()\n  const dateArray = date.split('/')\n\
    \n  // If number of days is less than 1 or greater than 31 days in Feb, return\
    \ the date\n  // If number of days is less than 1 or greater than 30 days in March,\
    \ return the date\n  // If number of days is less than 1 or greater than 29 in\
    \ April, return the date\n  // If number of days is less than 1 or greater than\
    \ 28 in May, return the date\n  if (dateArray[0] > 1 || dateArray[0] < 2 || dateArray[0]\
    \ < 5 || dateArray[0] > 12 || dateArray[0] < 7 || dateArray[0] > daysInMonth)\
    \ {\n    return false\n  }\n\n  // If number of months is less than 1 or greater\
    \ than 12 in Feb, return the date\n  // If number of months is less than 1 or\
    \ greater than 11 in March, return the date\n  // If number of months is less\
    \ than 1 or greater than 10 in April, return the date\n  // If number of months\
    \ is less than 1 or greater than 9 in May, return the date\n  if (dateArray[1]\
    \ > 1 || dateArray[1] < 2 || dateArray[1] < 4 || dateArray[1] > 11 || dateArray[1]\
    \ < 6 || dateArray[1] > 10) {\n    return false\n  }\n\n  return true\n}\n", " \
    \   let isvalid_date = false;\n    if (\n        date.length === 0 ||\n      \
    \  (date.length === 10 &&\n            (isNaN(parseInt(date[0])) ||\n        \
    \        (!isValidDate(date[0]))))\n    ) {\n        isvalid_date = false;\n \
    \   } else if (date.length === 10 &&\n        !isValidDate(date[0]) &&\n     \
    \   (!isValidDate(date[1]) ||\n            (!isValidDate(date[2]) ||\n       \
    \         (!isValidDate(date[3]) ||\n                    (!isValidDate(date[4])\
    \ ||\n                        (!isValidDate(date[5]) ||\n                    \
    \        (!isValidDate(date[6]) ||\n                                (!isValidDate(date[7])\
    \ ||\n                                    (!isValidDate(date[8]) ||\n        \
    \                                (!isValidDate(date[9]) ||\n                 \
    \                           (!isValidDate(date[10])) ||\n                    \
    \                            (date[1] > 12) ||\n                             \
    \                       (date[2] > 31) ||\n                                  \
    \                      (date[3] > 30) ||\n                                   \
    \                         (date[4] > 29) ||\n                                \
    \                                (date[5] > 12))))))))\n    ) {\n        isvalid_date\
    \ = false;\n    } else {\n        let d = date.split(\"-\");\n        if (d.length\
    \ == 3) {\n            if (d[2].length < 1 ||\n                (d[2].length >\
    \ 3 &&\n                    !isValidDay(d[1])) &&\n                    !isValidDay(d[0])\
    \ &&\n                    !isValidDay(d[2]) &&\n                    !isValidDay(d[3]))\n\
    \            ) {\n                isvalid_date = false;\n            } else {\n\
    \                isvalid_date = true;\n            }\n        } else if (d.length\
    \ == 6) {\n            if (\n                (d[2].length < 1 ||\n           \
    \         (d[2].length > 3 &&\n                        !isValidDay(d[1])) &&\n\
    \                        !isValidDay(d[0]) &&\n                        !isValidDay(d[2])\
    \ &&\n                        !isValidDay(d[3]) &&\n                        !isValidDay(d[4])\
    \ &&\n                        !isValidDay(d[5]))\n                ) {\n      \
    \          isvalid_date = false;\n            } else {\n                isvalid_date\
    \ = true;\n            }\n        } else {\n            isvalid_date = false;\n\
    \        }\n    }\n    return isvalid_date;\n}\n", "  if (date == \"\") {\n  \
    \  return false;\n  }\n  const date_array = date.split(\"-\");\n  const year =\
    \ date_array[2];\n  const month = date_array[1] - 1;\n  const day = date_array[0];\n\
    \  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month < 1 || month\
    \ > 12) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return\
    \ false;\n  }\n  if (month == 4 && day > 29) {\n    return false;\n  }\n  return\
    \ true;\n}\n\nconst week_numbers = [\n  \"1st\",\n  \"2nd\",\n  \"3rd\",\n  \"\
    4th\",\n  \"5th\",\n  \"6th\",\n  \"7th\",\n  \"8th\",\n  \"9th\",\n  \"10th\"\
    ,\n  \"11th\",\n  \"12th\",\n  \"13th\",\n  \"14th\",\n  \"15th\",\n  \"16th\"\
    ,\n  \"17th\",\n  \"18th\",\n  \"19th\",\n  \"20th\",\n  \"21st\",\n  \"22nd\"\
    ,\n  \"23rd\",\n  \"24th\",\n  \"25th\",\n  \"26th\",\n  \"27th\",\n  \"28th\"\
    ,\n  \"29th\",\n  \"30th\",\n  \"31st\",\n];\n", "    return !date || date ==\
    \ \"\" || validateDate(date, \"MM-DD-YYYY\");\n}\n", "    date = date.split(\"\
    -\")\n    if (date.length !== 3) {\n        return false\n    }\n    if (date[0].length\
    \ < 1 || date[2].length < 1 || date[1].length < 1 ||\n        date[0].length >\
    \ 2 || date[2].length > 2 || date[1].length > 2) {\n        return false\n   \
    \ }\n    if (date[0] > 12 || date[2] > 12 || date[1] > 12) {\n        return false\n\
    \    }\n    if (date[1] > 31 || date[1] < 1 ||\n        date[3] > 31 || date[3]\
    \ < 1 ||\n        date[5] > 31 || date[5] < 1 ||\n        date[7] > 31 || date[7]\
    \ < 1 ||\n        date[8] > 31 || date[8] < 1 ||\n        date[10] > 31 || date[10]\
    \ < 1 ||\n        date[12] > 31 || date[12] < 1) {\n        return false\n   \
    \ }\n    return true\n}\n", "  if (date.length == 0) {\n    return false;\n  }\n\
    \n  const dateArr = date.split(\"-\");\n  if (dateArr.length != 3) {\n    return\
    \ false;\n  }\n\n  const year = parseInt(dateArr[0], 10);\n  if (isNaN(year))\
    \ {\n    return false;\n  }\n\n  const month = parseInt(dateArr[1], 10);\n  if\
    \ (isNaN(month)) {\n    return false;\n  }\n\n  const day = parseInt(dateArr[2],\
    \ 10);\n  if (isNaN(day)) {\n    return false;\n  }\n\n  return year > 0 && month\
    \ > 0 && day > 0 && day < 32 && month < 13 && month > 0 && month < 12;\n}\n",
  "  // 1. Checks if the given date string is not empty.\n  if (date == \"\") {\n\
    \    return false;\n  }\n\n  // 2. Number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n  let dateParts = date.split(\"\
    -\");\n  if (dateParts.length !== 3) {\n    return false;\n  }\n\n  // 3. Months\
    \ should not be less than 1 or higher than 12.\n  let dayMonthYear = dateParts[0].split(\"\
    -\");\n  if (dayMonthYear.length !== 2) {\n    return false;\n  }\n\n  // 4. Date\
    \ should be in the format: mm-dd-yyyy\n  let month = dayMonthYear[0][0];\n  let\
    \ day = dayMonthYear[0][1];\n  let year = dayMonthYear[0][2];\n  let dateObj =\
    \ new Date(year, month, day);\n  dateParts = dateObj.split(\"-\");\n\n  if (dateParts.length\
    \ !== 3) {\n    return false;\n  }\n\n  // Returns true if the date string is\
    \ valid otherwise returns false.\n  return true;\n}\n", "    if (!date) return\
    \ false\n    if (!date.trim().length) return false\n    let pattern = /^(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\\
    d\\d)$/\n    let match: RegExpExecArray = pattern.exec(date)\n    if (!match)\
    \ return false\n    let d: number = match[1]\n    let m: number = match[2]\n \
    \   let y: number = match[3]\n    let month: number = new Date(m).getMonth() +\
    \ 1\n    // Check the month length because it might not be the same as the months\
    \ listed\n    if (month < 1 || month > 12) {\n        return false\n    }\n  \
    \  if (d < 1 || d > 31) {\n        return false\n    }\n    if (y < 1 || y > 29)\
    \ {\n        return false\n    }\n    return true\n}\n</code>\n<|/ a tags=date,typescript\
    \ dscore=1 |>\n<| a |>\nThe best way to do this is probably using MomentJS.\n\
    https://momentjs.com/\n<|/ a tags=date,typescript dscore=0 |>\n<| c |>\nI did\
    \ read about that, but I thought there was some native solution to do it without\
    \ using external libraries.\n<|/ c |>\n<| c |>\nSure there is - check my answer\n\
    <|/ c |>\n<| a |>\nI suggest you read this article, it gives an example of how\
    \ you can validate dates including leap years.\n<|/ a tags=date,typescript dscore=0\
    \ |>\n<| a tags=date,typescript |>\nI ended up using the following function based\
    \ on the accepted answer which works perfectly for me.\n<code>", "  if(isEmpty(date))\
    \ {\n    return false;\n  }\n\n  const splitDate: string[] = date.split(\"-\"\
    );\n\n  if(splitDate.length != 3) {\n    return false;\n  }\n\n  let date: Date\
    \ = new Date(splitDate[2], splitDate[1] - 1, splitDate[0]);\n  if(date.getFullYear()\
    \ != splitDate[2] ||\n     date.getMonth() != splitDate[1] - 1 ||\n     date.getDate()\
    \ != splitDate[0]) {\n    return false;\n  }\n\n  return true;\n}\n</code>\n<|/\
    \ a |>\n<| a dscore=1 |>\nHere is the regex you can use,\n<code>\n^(?:(?!^(?:0?[1-9]|1[012])[-\
    \ /.])(0?[1-9]|[12][0-9]|3[01])[- /.])[0-9]{2}-[0-9]{2}$\n</code>\nExplanation:\n\
    \n^ - asserts the start of the string\n(?:(?!^(?:0?[1-9]|1[012])[- /.])(0?[1-9]|[12][0-9]|3[01])[-\
    \ /.])[0-9]{2}-[0-9]{2}$ matches a date in the format mm-dd-yyyy and has all conditions\
    \ fulfilled\n<|/ a tags=javascript,typescript,regex |>\n<| c |>\nThis doesn't\
    \ match `04-0-2040` which is a valid date.\n<|/ c |>\n<| c |>\nGood catch, updated\
    \ the answer.\n<|/ c |>\n<| a tags=javascript,typescript,regex dscore=1 |>\nIf\
    \ you just want a regex to validate the date then you can use the following regex:\n\
    <code>\n^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}$\n</code>\nThe regex\
    \ above will validate all 4 digit dates such as 01,02,03,...,12,01,02,03,...,20.\
    \ The regex will also validate dates with the first 2 digits as single digits\
    \ (ex. 01, 12 etc) but it won't allow single digit months or days. If you need\
    \ to also allow single digit dates then you can use this regex:\n<code>\n^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$\n</code>\nThe regex above will validate all 4 digit dates such as 01,02,03,...,12,01,02,03,...,20.\
    \ The regex will also validate dates with the first 2 digits as single digits\
    \ (ex. 01, 12 etc) but it won't allow single digit months or days.\nThe regex\
    \ above will match 01, 12 , 20 and will also match 01,02,03,...12,01,02,03,...20\n\
    <|/ a |>\n", "    console.log(\"Enter function valid_date()\");\n    let days:\
    \ number = 0;\n    let months: number = 0;\n    let years: number = 0;\n\n   \
    \ date = new Date(date);\n\n    // Check if date string is empty\n    if (date\
    \ === \"\") {\n        return false;\n    }\n\n    // Check validity of the number\
    \ of days\n    const d = date.split(\"-\");\n    days = d[2].split(\"-\");\n \
    \   if (days.length != 3) {\n        return false;\n    }\n\n    days = d[2].split(\"\
    -\");\n    const today = new Date();\n    today = new Date(today.setDate(today.getDate()\
    \ - today.getDay()));\n\n    // Check validity of month\n    months = days[0].split(\"\
    -\");\n    if (months.length != 3) {\n        return false;\n    }\n\n    months\
    \ = days[0].split(\"-\");\n    if (parseInt(months[0]) > 12 || parseInt(months[0])\
    \ < 1) {\n        return false;\n    }\n\n    if (parseInt(months[1]) > 31 ||\
    \ parseInt(months[1]) < 1) {\n        return false;\n    }\n\n    months = days[0].split(\"\
    -\");\n    if (parseInt(months[2]) > 30 || parseInt(months[2]) < 1) {\n      \
    \  return false;\n    }\n\n    days = d[2].split(\"-\");\n\n    // Check validity\
    \ of year\n    years = days[0].split(\"-\");\n    if (years.length != 3) {\n \
    \       return false;\n    }\n\n    years = days[0].split(\"-\");\n    if (parseInt(years[2])\
    \ > 29 || parseInt(years[2]) < 1) {\n        return false;\n    }\n\n    years\
    \ = days[0].split(\"-\");\n    if (parseInt(years[1]) > 12 || parseInt(years[1])\
    \ < 1) {\n        return false;\n    }\n\n    // Check if date is in the correct\
    \ format\n    if (d[1] === \"01\" && parseInt(months[0]) == 1) {\n        return\
    \ true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0]) == 2) {\n     \
    \   return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0]) == 3)\
    \ {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 4) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 5) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 6) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 7) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 8) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 9) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 10) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 11) {\n        return true;\n    }\n    if (d[1] === \"01\" && parseInt(months[0])\
    \ == 12) {\n        return true;\n    }\n    if (d[1] === \"02\" && parseInt(months[0])\
    \ == ", "  const parts = date.split('-');\n  if (parts.length !== 3) throw 'Date\
    \ must be in the format: mm-dd-yyyy';\n\n  const daysInMonths = [31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInMonth = daysInMonths[parts[1]\
    \ - 1];\n\n  // Invalid dates\n  if (parts[0].length === 0 || parts[1].length\
    \ < 2 || parts[1].length > 2 ||\n    parts[2].length < 1 || parts[2].length >\
    \ 2 || parts[2].indexOf('00') !== -1) {\n    return false;\n  }\n\n  // Invalid\
    \ months\n  if (parts[1] < 1 || parts[1] > 12 ||\n    parts[0] > daysInMonth +\
    \ 1) return false;\n\n  // Invalid date\n  if (parts[0] !== parts[2]) return true;\n\
    \n  // Invalid date\n  if (parts[0] !== '01' && parts[0] !== '1') return true;\n\
    \n  return false;\n}\n", "    const daysInFebruary = isLeapYear(new Date(date.getFullYear(),\
    \ date.getMonth() + 1, 0));\n\n    const parts = date.split(\"-\");\n\n    const\
    \ day = parseInt(parts[2], 10);\n    const month = parseInt(parts[1], 10) - 1;\n\
    \    const year = parseInt(parts[0], 10);\n\n    if (year === null || month ===\
    \ null || day === null) {\n        return false;\n    }\n\n    // Check for valid\
    \ month\n    if (month < 1 || month > 12 || month > daysInFebruary || !(month\
    \ !== 11 && month !== 0)) {\n        return false;\n    }\n\n    // Check for\
    \ valid day\n    const daysInMonth = getDaysInMonth(year, month);\n    if (day\
    \ < 1 || day > daysInMonth) {\n        return false;\n    }\n\n    // Check for\
    \ valid year\n    if (year < 1000 || year > 9999 || year < 1583 || year >= 1582)\
    \ {\n        return false;\n    }\n\n    // Check for valid date\n    if (month\
    \ < 1 || month > 12 || day < 1 || day > daysInMonth) {\n        return false;\n\
    \    }\n\n    // Check for valid day\n    if (day > daysInFebruary && isLeapYear(new\
    \ Date(year, month, day))) {\n        return false;\n    }\n\n    return true;\n\
    }\n", "\tlet pattern = /^(0[1-9]|[12]\\d|3[01])\\-(0[1-9]|1[0-2])\\-(20\\d\\d|19\\\
    d\\d)$/;\n\tlet match = pattern.exec(date);\n\tif (!match) return false;\n\tlet\
    \ days_1 = match[2].split(\"-\");\n\tlet days_2 = match[3].split(\"-\");\n\tlet\
    \ days_1_index = 0;\n\tlet days_2_index = 0;\n\tlet days_1 = days_1.map(function\
    \ (day: string) {\n\t\tdays_1_index += parseInt(day);\n\t\treturn days_1_index;\n\
    \t});\n\tlet days_2 = days_2.map(function (day: string) {\n\t\tdays_2_index +=\
    \ parseInt(day);\n\t\treturn days_2_index;\n\t});\n\tif (days_1_index > 31 ||\
    \ days_1_index < 1 || days_2_index > 31 || days_2_index < 1 || days_1[days_1_index\
    \ - 1] > 12 || days_2[days_2_index - 1] > 12 || days_1[days_1_index - 1] != days_2[days_2_index\
    \ - 1]) return false;\n\treturn true;\n}\n", "    if (date == \"\") {\n      \
    \  return false;\n    }\n\n    const checkMonth = date.substring(6, 10) - 1;\n\
    \    const checkDate = date.substring(3, 5) - 1;\n    const checkYear = date.substring(0,\
    \ 4);\n    const checkDay = date.substring(2, 5);\n\n    if (checkMonth == 0 ||\
    \ checkMonth > 12) {\n        return false;\n    }\n    if (checkDate == 0 ||\
    \ checkDate > 31 || (checkDate < 1 && checkMonth < 12)) {\n        return false;\n\
    \    }\n    if (checkDay == 0 || checkDay > 29) {\n        return false;\n   \
    \ }\n    if (checkYear == 0 || checkYear > 2040) {\n        return false;\n  \
    \  }\n\n    return true;\n}\n", "  if (date === '') {\n    return false;\n  }\n\
    \  if (date.substring(0, 2) === '02') {\n    return true;\n  }\n  else if (date.substring(0,\
    \ 2) === '01') {\n    return false;\n  }\n  else if (date.substring(4, 6) ===\
    \ '01') {\n    return true;\n  }\n  else if (date.substring(4, 6) === '03') {\n\
    \    return false;\n  }\n  else if (date.substring(4, 6) === '05') {\n    return\
    \ false;\n  }\n  else if (date.substring(4, 6) === '07') {\n    return true;\n\
    \  }\n  else if (date.substring(4, 6) === '08') {\n    return false;\n  }\n  else\
    \ if (date.substring(4, 6) === '10') {\n    return false;\n  }\n  else if (date.substring(4,\
    \ 6) === '12') {\n    return false;\n  }\n  else if (date.substring(5, 9) ===\
    \ '01') {\n    return true;\n  }\n  else if (date.substring(5, 9) === '02') {\n\
    \    return false;\n  }\n  else if (date.substring(5, 9) === '03') {\n    return\
    \ false;\n  }\n  else if (date.substring(5, 9) === '05') {\n    return false;\n\
    \  }\n  else if (date.substring(5, 9) === '07') {\n    return true;\n  }\n  else\
    \ if (date.substring(5, 9) === '08') {\n    return false;\n  }\n  else if (date.substring(5,\
    \ 9) === '10') {\n    return false;\n  }\n  else if (date.substring(5, 9) ===\
    \ '12') {\n    return false;\n  }\n  else if (date.substring(5, 9) === '13') {\n\
    \    return false;\n  }\n  else if (date.substring(6, 11) === '01') {\n    return\
    \ true;\n  }\n  else if (date.substring(6, 11) === '02') {\n    return false;\n\
    \  }\n  else if (date.substring(6, 11) === '03') {\n    return false;\n  }\n \
    \ else if (date.substring(6, 11) === '05') {\n    return false;\n  }\n  else if\
    \ (date.substring(6, 11) === '07') {\n    return true;\n  }\n  else if (date.substring(6,\
    \ 11) === '08') {\n    return false;\n  }\n  else if (date.substring(6, 11) ===\
    \ '10') {\n    return false;\n  }\n  else if (date.substring(6, 11) === '12')\
    \ {\n    return false;\n  }\n  else if (date.substring(6, 11) === '13') {\n  \
    \  return false;\n  }\n  else if (date.substring(6, 11) === '14') {\n    return\
    \ false;\n  }\n  else if (date.substring(6, 11) === '15') {\n    return false;\n\
    \  }\n  else if (date.substring(6, 11) === '16') {\n    return false;\n  }\n \
    \ else if (date.substring(6, 11) === '17') {\n    return false;\n  }\n  else if\
    \ (date.substring(6, 11) === '18') {\n    return false;\n  }\n  else if (date.substring(6,\
    \ 11) === '19') {\n    return false;\n  }\n  else if (date.substring(6, 11) ===\
    \ '20') {\n    return false;\n  }\n  else if (date.substring(6, 11) === '21')\
    \ {\n    return false;\n  }\n  else if (date.substring(6, 11) === '22') {\n  \
    \  return false;\n  }\n  ", "  if(date.trim().length===0) return false;\n  const\
    \ [month,day,year] = date.split('-').map(a=> parseInt(a, 10));\n  if(month<1 ||\
    \ month>12) return false;\n  if(day<1 || day>31) return false;\n  if(month==2\
    \ && day>31) return false;\n  if(month==3 && day>30) return false;\n  if(month==4\
    \ && day>29) return false;\n  if(month==6 && day>29) return false;\n  if(month==9\
    \ && day>28) return false;\n  if(month==11 && day>31) return false;\n  if(month==12\
    \ && day>30) return false;\n  if(year<1900 ||  year>2099) return false;\n  if(day>=31)\
    \ return false; // The last day of a month can't be greater than 31.\n  return\
    \ true;\n}\n", "  let date_regex = /^(?:(?:(?:0?[13578]|1[02])(\\/|-|\\.)31)\\\
    1|(?:(?:0?[1,3-9]|1[0-2])(\\/|-|\\.)(?:29|30)\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:0?2(\\\
    /|-|\\.)29\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\\\
    /|-|\\.)(?:0?[1-9]|1\\d|2[0-8])\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/;\n  let valid_date\
    \ = date_regex.test(date);\n  let valid_days = valid_date && days_are_valid(date);\n\
    \  let valid_months = valid_date && months_are_valid(date);\n  let valid_year\
    \ = valid_date && year_are_valid(date);\n\n  return valid_days && valid_months\
    \ && valid_year;\n}\n", "  date = date.trim();\n  if (date == \"\") {\n    return\
    \ false;\n  }\n  const dateArr = date.split(\"-\");\n  if (dateArr.length != 3)\
    \ {\n    return false;\n  }\n  const day = dateArr[0];\n  const month = dateArr[1];\n\
    \  const year = dateArr[2];\n  const dateObject = new Date(year, month, day);\n\
    \  if (dateObject.getTime() < 1) {\n    return false;\n  }\n  else if ((month\
    \ < 1) || (month > 12)) {\n    return false;\n  }\n  else if ((day < 1) || (day\
    \ > 31)) {\n    return false;\n  }\n  else if ((month == 1) || (month == 3) ||\n\
    \    (month == 5) || (month == 7) || (month == 8) ||\n    (month == 10) || (month\
    \ == 12)) {\n    if ((day > 30) || (day < 1)) {\n      return false;\n    }\n\
    \  }\n  else {\n    if ((day > 29) || (day < 1)) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n", "    if (!date) {\n        return false;\n    }\n\n\
    \    const parts = date.split(\"-\");\n    if (parts.length !== 3) {\n       \
    \ return false;\n    }\n\n    const date = parts[0];\n    const month = parseInt(parts[1],\
    \ 10);\n    const day = parseInt(parts[2], 10);\n\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n\n    if (day < 1 || day > 31 || (day\
    \ > 30 && (day !== 29 && (day !== 30 || month > 12)))) {\n        return false;\n\
    \    }\n\n    return true;\n}\n", "  const split_date = date.split(\"-\");\n \
    \ const day = split_date[2];\n  const month = split_date[1];\n  const year = split_date[0];\n\
    \  if (\n    !split_date[0] ||\n    !split_date[1] ||\n    !split_date[2] ||\n\
    \    !day ||\n    !month ||\n    !year\n  ) {\n    return false;\n  }\n  let daysInMonth\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (year < 1 || month\
    \ < 1 || day < 1) {\n    return false;\n  }\n  let days_sum = 0;\n  let days_mod\
    \ = 0;\n  days_mod = year % 4 == 0 ? 29 : 28;\n  for (let i = 1; i <= days_mod;\
    \ i++) {\n    days_sum += daysInMonth[i];\n  }\n  days_mod = year % 100 == 0 ?\
    \ 28 : 29;\n  for (let i = 1; i <= days_mod; i++) {\n    days_sum += daysInMonth[i];\n\
    \  }\n  days_mod = year % 400 == 0 ? 28 : 29;\n  for (let i = 1; i <= days_mod;\
    \ i++) {\n    days_sum += daysInMonth[i];\n  }\n  return (day <= days_sum) &&\
    \ (month > 0) && (day > 0);\n}\n", "    if (date.length < 2 || !/\\d/.test(date))\
    \ {\n        return false;\n    }\n    const day = date.substring(0, 2);\n   \
    \ const month = date.substring(3, 5);\n    const year = date.substring(6, 10);\n\
    \    const monthNumber = parseInt(month, 10);\n    let dayNumber = 1;\n    if\
    \ (monthNumber > 12) {\n        return false;\n    }\n    if (monthNumber > 1\
    \ && monthNumber < 12) {\n        dayNumber = new Date(year, parseInt(monthNumber\
    \ + 1 , 10) - 1, 0).getDate();\n    }\n    if (monthNumber === 2) {\n        if\
    \ (dayNumber < 1 || dayNumber > 29) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    return (!isEmpty(date) && !isNaN(new Date(date).getTime()))\
    \ && checkDate(date);\n}\n", "    if (!date) {\n        return false;\n    }\n\
    \n    if (date.length < 1) {\n        return false;\n    }\n\n    const dateParts\
    \ = date.split(\"-\");\n    if (dateParts.length < 3) {\n        return false;\n\
    \    }\n\n    // Validating the month part\n    const month = parseInt(dateParts[0],\
    \ 10);\n    if (month === 0 || month === 11 || month === 12) {\n        return\
    \ false;\n    }\n\n    if (month === 1 && !(dateParts[1].length === 1)) {\n  \
    \      return false;\n    }\n\n    const day = parseInt(dateParts[1], 10);\n \
    \   if (day < 1 || day > 31) {\n        return false;\n    }\n\n    if (dateParts[2].length\
    \ < 2 || dateParts[2].length > 2) {\n        return false;\n    }\n\n    // Validating\
    \ the day part\n    const year = dateParts[2];\n    if (year.length < 4 || year.length\
    \ > 4) {\n        return false;\n    }\n\n    // Validating the year\n    if (parseInt(year,\
    \ 10) < 70 || parseInt(year, 10) > 99) {\n        return false;\n    }\n\n   \
    \ return true;\n}\n", "  if (!date) return false\n  if (!/^\\s*$/.test(date))\
    \ return false\n  if (!/^\\d{1,2}-\\d{1,2}-\\d{4,}$/.test(date)) return false\n\
    \  const parts = date.split('-')\n  const day = parseInt(parts[0], 10)\n  const\
    \ month = parseInt(parts[1], 10)\n  const year = parseInt(parts[2], 10)\n  return\
    \ day >= 1 && day <= 31 && (month >= 1 && month <= 12 && year >= 0 && year <=\
    \ 0)\n}\n", "    const pattern = /^\\d{2}-\\d{2}-\\d{4}$/;\n    return pattern.test(date);\n\
    }\n", "  let d = date.split(\"-\")\n  if (!date) return false\n  if (d.length\
    \ != 3) return false\n  if (d[0] < 1 || d[0] > 12) return false\n  if (d[1] <\
    \ 1 || d[1] > 31) return false\n  if (d[2] < 1 || d[2] > 30) return false\n  return\
    \ true\n}\n", "  return (date != \"\"\n      && date.length > 0\n      && (date.length\
    \ <= 3\n          || (date.length == 31 && date[31] < 12 && date[30] >= 12 &&\
    \ date[30] <= 31))\n      && (date.length <= 3\n          || (date.length == 31\
    \ && date[31] < 1 || date[30] >= 1 && date[30] <= 12))\n      && (date.length\
    \ <= 3\n          || (date.length == 31 && date[31] < 4 || date[30] >= 4 && date[30]\
    \ <= 6))\n      && (date.length <= 3\n          || (date.length == 31 && date[31]\
    \ < 2\n              || (date[30] >= 2 && date[30] <= 29 && date[31] >= 1))));\n\
    }\n", "    if (date === null || date === undefined) return false\n    return !is_empty(date)\
    \ && !is_empty(date.trim()) && \n           is_less_than_or_equal_to_1(date.split('-')[2])\
    \ && \n           is_less_than_or_equal_to_31(date.split('-')[1]) && \n      \
    \     is_less_than_or_equal_to_29(date.split('-')[1]) && \n           is_less_than_or_equal_to_12(date.split('-')[1])\n\
    }\n", "  // TODO: Implement your code here.\n  return true;\n}\n", "    date =\
    \ date.split(\"-\");\n    let isValid = false;\n    if (date.length > 3) {\n \
    \       isValid = true;\n    }\n    if (!isValid || !date[0]) {\n        isValid\
    \ = false;\n    }\n    if ((date[0] > 12 || date[0] < 1) || (date[0] === 2 &&\
    \ date[2] > 29)) {\n        isValid = false;\n    }\n    if (date[0] === 2) {\n\
    \        if (date[2] < 1 || date[2] > 28) {\n            isValid = false;\n  \
    \      }\n    }\n    if (date[2] < 1 || date[2] > 28) {\n        isValid = false;\n\
    \    }\n    return isValid;\n}\nvar valid_date1 = valid_date;\n", "  if (date.length\
    \ > 0) {\n    var dateParts = date.split('-');\n    return dateParts.length ==\
    \ 2 && dateParts[0].length > 0 && dateParts[1].length > 0 && dateParts[0] <= 31\
    \ * 32 && dateParts[1] <= 30 * 31 && (dateParts[0] == 0 || dateParts[0] == 31)\
    \ && dateParts[1] == 1 && dateParts[0] < 1 || dateParts[0] == 1 && dateParts[1]\
    \ < 1 || dateParts[1] == 31 && dateParts[0] < 1 || dateParts[0] == 31 && dateParts[1]\
    \ < 31 || dateParts[1] == 59 && dateParts[0] < 1 || dateParts[0] == 59 && dateParts[1]\
    \ < 31;\n  }\n  return false;\n}\n", "  let pattern = /^([0-9]+-[0-9]+-[0-9]+)$/;\n\
    \  if (pattern.test(date)) {\n    // If day is less than 1 or greater than 31,\
    \ month is invalid\n    if ((new Date(date).getDate() < 1) || (new Date(date).getDate()\
    \ > 31)) {\n      return false;\n    }\n    // If month is less than 1 or greater\
    \ than 12, year is invalid\n    if ((new Date(date).getMonth() < 1) || (new Date(date).getMonth()\
    \ > 12)) {\n      return false;\n    }\n    // If day is less than 1 or greater\
    \ than 28, year is invalid\n    if ((new Date(date).getDate() < 1) || (new Date(date).getDate()\
    \ > 28)) {\n      return false;\n    }\n    // If month is less than 1 or greater\
    \ than 12, year is invalid\n    if ((new Date(date).getMonth() < 1) || (new Date(date).getMonth()\
    \ > 12)) {\n      return false;\n    }\n  } else {\n    return false;\n  }\n \
    \ return true;\n}\n", "  if (date.length == 0) {\n    return false;\n  }\n  const\
    \ dateSplits = date.split('-');\n  if (dateSplits.length != 3) {\n    return false;\n\
    \  }\n  const year = Number(dateSplits[1]);\n  const month = Number(dateSplits[0]);\n\
    \  if (month > 12 || month < 1) {\n    return false;\n  }\n  if (month == 2 &&\
    \ year % 4 != 0) {\n    return false;\n  }\n  if (month == 2 && year % 4 == 0)\
    \ {\n    if (month == 2) {\n      const leapYear = new Date(year, 3, 29).getDate();\n\
    \      if (leapYear < 29) {\n        return true;\n      }\n    }\n  }\n  const\
    \ day = Number(dateSplits[2]);\n  if (day > 31 || day < 1) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  let isMonthValid = false;\n  let isYearValid =\
    \ false;\n  let isDayValid = false;\n\n  if (date && date.length > 0) {\n    const\
    \ dateParts = date.split(\"-\");\n    if (dateParts.length > 0 && dateParts.length\
    \ !== 3 && dateParts.length !== 6) {\n      return false;\n    } else {\n    \
    \  isMonthValid = dateParts[1].length === 2 && dateParts[1][1] === \"-\";\n  \
    \    isYearValid = dateParts[0].length === 4 && dateParts[0][0] === \"-\";\n \
    \     isDayValid = dateParts[2].length === 2 && dateParts[2][1] === \"-\";\n \
    \   }\n  } else {\n    return false;\n  }\n\n  const dateMonth = parseInt(dateParts[1],\
    \ 10);\n  const dateYear = parseInt(dateParts[0], 10);\n  const dateDay = parseInt(dateParts[2],\
    \ 10);\n\n  if (\n    dateMonth >= 1 &&\n    dateMonth <= 12 &&\n    dateYear\
    \ >= 0 &&\n    dateYear <= 9999 &&\n    dateDay >= 1 &&\n    dateDay <= 31\n \
    \ ) {\n    return true;\n  }\n\n  if (dateMonth === 2 && dateYear === 0 && dateDay\
    \ === 29) {\n    return true;\n  }\n\n  if (dateMonth === 2 && dateYear === 1\
    \ && dateDay === 0) {\n    return true;\n  }\n\n  if (\n    dateMonth === 3 &&\n\
    \    dateYear === 0 &&\n    dateDay >= 1 &&\n    dateDay <= 30 &&\n    dateDay\
    \ !== 29\n  ) {\n    return true;\n  }\n\n  if (\n    dateMonth === 4 &&\n   \
    \ dateYear === 0 &&\n    dateDay >= 1 &&\n    dateDay <= 29 &&\n    dateDay !==\
    \ 29 &&\n    dateDay !== 30\n  ) {\n    return true;\n  }\n\n  if (\n    dateMonth\
    \ === 5 &&\n    dateYear === 0 &&\n    dateDay >= 1 &&\n    dateDay <= 29 &&\n\
    \    dateDay !== 29 &&\n    dateDay !== 30 &&\n    dateDay !== 31\n  ) {\n   \
    \ return true;\n  }\n\n  if (\n    dateMonth === 6 &&\n    dateYear === 0 &&\n\
    \    dateDay >= 1 &&\n    dateDay <= 29 &&\n    dateDay !== 29 &&\n    dateDay\
    \ !== 30 &&\n    dateDay !== 31 &&\n    dateDay !== 30\n  ) {\n    return true;\n\
    \  }\n\n  if (\n    dateMonth === 7 &&\n    dateYear === 0 &&\n    dateDay >=\
    \ 1 &&\n    dateDay <= 29 &&\n    dateDay !== 29 &&\n    dateDay !== 30 &&\n \
    \   dateDay !== 31 &&\n    dateDay !== 30 &&\n    dateDay !== 31\n  ) {\n    return\
    \ true;\n  }\n\n  if (\n    dateMonth === 8 &&\n    dateYear === 0 &&\n    dateDay\
    \ >= 1 &&\n    dateDay <= 29 &&\n    dateDay !== 29 ", "  return !date.length\
    \ ? false : (/^(0[1-9]|[12]\\d|3[01])\\-(0[1-9]|1[012])\\-(19\\d\\d)$/.test(date));\n\
    }\n", "  const split = date.split('-');\n  const day = Number(split[0]);\n  const\
    \ month = Number(split[1]);\n  const year = Number(split[2]);\n  if (split.length\
    \ === 0 || day < 1 || day > 31 ||\n      (month === 1 && day < 31) ||\n      (month\
    \ === 2 && day > 30) ||\n      (month > 12) || day > 29) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  return date.length === 0 ||\n    (\n      /^[1][3,5,7,8,10,12]/.test(date)\
    \ &&\n      (\n        /^[4-6][9-11]$/.test(date) ||\n        /^[2][2]$/.test(date)\
    \ ||\n        /^[2][1-9]$/.test(date) ||\n        /^[1|2][1-9]$/.test(date) ||\n\
    \        /^[12]$/.test(date)\n      )\n    ) ||\n    (\n      /^[1][4,6,9,11]/.test(date)\
    \ &&\n      (\n        /^[4-6][0|9]$/.test(date) ||\n        /^[2][0|9]$/.test(date)\
    \ ||\n        /^[12]$/.test(date)\n      )\n    ) ||\n    (\n      /^[1][2][0|9]$/.test(date)\
    \ &&\n      (\n        /^[0|9]$/.test(date) ||\n        /^[12]$/.test(date)\n\
    \      )\n    ) ||\n    (\n      /^[1|2][3,5,7,8,10,12]/.test(date) &&\n     \
    \ (\n        /^[3][0|9]$/.test(date) ||\n        /^[3][0|9]$/.test(date) ||\n\
    \        /^[3][0|9]$/.test(date) ||\n        /^[3][0|9]$/.test(date) ||\n    \
    \    /^[3][0|9]$/.test(date) ||\n        /^[3][0|9]$/.test(date) ||\n        /^[3][0|9]$/.test(date)\
    \ ||\n        /^[3][0|9]$/.test(date) ||\n        /^[3][0|9]$/.test(date) ||\n\
    \        /^[3][0|9]$/.test(date)\n      )\n    ) ||\n    (\n      /^[1|2][4,6,9,11]/.test(date)\
    \ &&\n      (\n        /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date)\
    \ ||\n        /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date) ||\n\
    \        /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date) ||\n    \
    \    /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date)\
    \ ||\n        /^[4][0|9]$/.test(date) ||\n        /^[4][0|9]$/.test(date) ||\n\
    \        /^[4][0|9]$/.test(date)\n      )\n    ) ||\n    (\n      /^[12]$/.test(date)\
    \ &&\n      (\n        /^[1][2][0|9]$/.test(", "    let date_obj: any = new Date(date);\n\
    \    let days: number = 0;\n    let months: number = 0;\n    let years: number\
    \ = 0;\n    let months_count: number = 0;\n    let days_count: number = 0;\n \
    \   let years_count: number = 0;\n    let current_year: number = date_obj.getFullYear();\n\
    \n    if (date == \"\") {\n        return false;\n    }\n\n    months_count =\
    \ date_obj.getMonth() + 1;\n    days_count = date_obj.getDate();\n    years_count\
    \ = date_obj.getFullYear();\n\n    for (let i = 0; i < date_obj.getMonth(); i++)\
    \ {\n        months += 1;\n    }\n\n    if (months == months_count) {\n      \
    \  years_count--;\n        months = 1;\n    }\n\n    for (let i = 0; i < date_obj.getDate();\
    \ i++) {\n        days += 1;\n    }\n\n    if (days == days_count) {\n       \
    \ years_count--;\n        days = 1;\n    }\n\n    if (years == years_count) {\n\
    \        return true;\n    }\n\n    return false;\n}\n", "    // Check whether\
    \ the date string is empty\n    if (date == null || date.trim() == \"\") {\n \
    \       return false;\n    }\n    // Check whether the number of days is not less\
    \ than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the\
    \ number of days is not less than 1 or higher than 29 for the month 2.\n    const\
    \ parts = date.split(\"-\");\n    if (parts.length != 3) {\n        return false;\n\
    \    }\n    let mm = parseInt(parts[0], 10);\n    let dd = parseInt(parts[1],\
    \ 10);\n    let yyyy = parseInt(parts[2], 10);\n    if (mm < 1 || mm > 12 || dd\
    \ < 1 || dd > 31 || yyyy < 1 ||\n        yyyy > 9999 || yyyy > 99999) {\n    \
    \    return false;\n    }\n    // Check whether the months should not be less\
    \ than 1 or higher than 12.\n    if (mm > 12) {\n        return false;\n    }\n\
    \    // Check whether the date should be in the format: mm-dd-yyyy\n    const\
    \ date_pattern = /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\
    d\\d$/;\n    if (!date_pattern.test(date)) {\n        return false;\n    }\n \
    \   return true;\n}\n", "  let daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31];\n  let dayCount: number = parseDate(date).getDate();\n  return\
    \ !(\n    !date\n      ? true\n      : dayCount < 1 || dayCount > daysInMonth[parseDate(date).getMonth()]\n\
    \  );\n}\n", "  return date && date.trim().length > 0 && dayCount(date) <= 31\
    \ &&\n    monthCount(date) <= 12 &&\n    isDateInTheCorrectFormat(date);\n}\n",
  "    return date != '' && !isNaN(new Date(date).getTime()) && new Date(date).getMonth()\
    \ >= 1 && new Date(date).getMonth() <= 12 && new Date(date).getDate() >= 1 &&\
    \ new Date(date).getDate() <= 31 && new Date(date).getFullYear() == 2040;\n}\n",
  "  if (!date) {\n    return false;\n  }\n  const splitted = date.split('-');\n \
    \ const date_components = splitted.map(date => parseInt(date, 10));\n\n  if (date_components[0].length\
    \ < 1 || date_components[0] > 31) {\n    return false;\n  }\n  if (date_components[1].length\
    \ < 1 || date_components[1] > 30) {\n    return false;\n  }\n  if (date_components[2].length\
    \ < 1 || date_components[2] > 29) {\n    return false;\n  }\n  if (date_components[3]\
    \ < 1 || date_components[3] > 12) {\n    return false;\n  }\n  return true;\n\
    }\n", "    if (date == null || date == \"\") {\n        return false;\n    }\n\
    \n    // 1. The date string is not empty.\n    if (date == \"\") {\n        return\
    \ false;\n    }\n\n    // 2. The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than\
    \ 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not\
    \ less than 1 or higher than 29 for the month 2.\n    if (\n        date.length\
    \ < 4 ||\n        date.length >= 6 ||\n        date.length % 2 != 0 ||\n     \
    \   date.split(\"-\").length <= 2 ||\n        (date.getMonth() != 0 && date.getDate()\
    \ != 0)\n    ) {\n        return false;\n    }\n\n    // 3. The months should\
    \ not be less than 1 or higher than 12.\n    let months = date.split(\"-\");\n\
    \    for (let i = 1; i < months.length; i = i + 1) {\n        if (months[i].length\
    \ < 1 || months[i].length > 12) {\n            return false;\n        }\n    }\n\
    \n    // 4. The date should be in the format: mm-dd-yyyy\n    let years = date.split(\"\
    -\");\n    if (years.length < 3 || years.length > 4) {\n        return false;\n\
    \    }\n\n    let valid = true;\n\n    // Validate the months.\n    for (let i\
    \ = 1; i < months.length; i = i + 1) {\n        if (months[i].substring(0, 2)\
    \ < \"01\" || months[i].substring(0, 2) > \"12\") {\n            return false;\n\
    \        }\n    }\n\n    // Validate the years.\n    if (years[1] < \"01\" ||\
    \ years[1] > \"12\") {\n        return false;\n    }\n\n    // Validate the days.\n\
    \    if (months[1] == \"01\" && years[1] == \"01\") {\n        if (years[0] <\
    \ \"01\" || years[0] > \"31\" || years[0] == \"00\") {\n            return false;\n\
    \        }\n    }\n    else if (months[1] == \"01\" && years[1] == \"02\") {\n\
    \        if (years[0] < \"01\" || years[0] > \"29\" || years[0] == \"00\") {\n\
    \            return false;\n        }\n    }\n    else if (months[1] == \"02\"\
    \ && years[1] == \"01\") {\n        if (years[0] < \"01\" || years[0] > \"28\"\
    \ || years[0] == \"00\") {\n            return false;\n        }\n    }\n    else\
    \ if (months[1] == \"02\" && years[1] == \"02\") {\n        if (years[0] < \"\
    01\" || years[0] > \"31\" || years[0] == \"00\") {\n            return false;\n\
    \        }\n    }\n    else if (months[1] == \"03\" && years[1] == \"01\") {\n\
    \        if (years[0] < \"01\" || years[0] > \"30\" || years[0] == \"00\") {\n\
    \            return false;\n        }\n    }\n    else if (months[1] == \"03\"\
    \ && years[1] == \"02\") {\n        if (years[0] < \"01\" || years[0] > ", " \
    \ return !isEmpty(date) && !(\n    isNaN(new Date(date)) == false &&\n    new\
    \ Date(date).getDate() >= 1 && new Date(date).getDate() <= 31 &&\n    new Date(date).getMonth()\
    \ >= 1 && new Date(date).getMonth() <= 12 &&\n    new Date(date).getFullYear()\
    \ == Number(date.split(\"/\").reverse()[0]) - 1\n  );\n}\n", "  if (!date) {\n\
    \    return false;\n  }\n  date = date.trim();\n  var splits = date.split('-');\n\
    \  // console.log(splits)\n  // console.log(splits.length)\n  // console.log(splits[0].length)\n\
    \  // console.log(splits[1].length)\n  if (splits.length === 2) {\n    if (splits[0].length\
    \ === 2 && splits[1].length === 2) {\n      // if (splits[0].length === 2 && splits[1].length\
    \ === 2) {\n      splits = splits[0].split('/');\n      if (splits.length ===\
    \ 2) {\n        // if (splits[0].length === 2 && splits[1].length === 2) {\n \
    \       splits = splits[1].split(' ');\n        var day = splits[0];\n       \
    \ var month = splits[1];\n        if (day.length === 2 && month.length === 2)\
    \ {\n          month = new Date().getMonth() + 1 + '-' + month;\n          if\
    \ (day > month.substring(0, day)) {\n            return false;\n          }\n\
    \        }\n      }\n    }\n  }\n  return true;\n}\n", "  const regexp = /^((0[1-9]|[12]\\\
    d|3[01])[\\-\\/\\. ])?((0[1-9]|1[012])[\\-\\/\\. ])?(19|20)\\d{2}$/;\n  const\
    \ match: string[] = date.match(regexp);\n  if (!match) {\n    return false;\n\
    \  }\n  const months: number[] = match[0].split(\"-\");\n  const days: number[]\
    \ = match[1].split(\"-\");\n  const year = match[3];\n  const month = parseInt(months[0]);\n\
    \  const day = parseInt(days[0]);\n  return month < 1 || month > 12 || day < 1\
    \ || day > 31 || year.length === 0;\n}", "  date = date.replace(\"-\", \"\");\n\
    \  let daysInMonth = {\n    1: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n\
    \    3: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    5: [31, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31],\n    7: [31, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31],\n    8: [31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    10: [31,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    12: [31, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31]\n  };\n\n  let daysInMonthCount = daysInMonth[date.getMonth()][date.getFullYear()];\n\
    \  let daysInYear = date.length == 8 ? getDaysInMonth(date) : getDaysInMonth(date,\
    \ true);\n  let daysInYearCount = daysInMonthCount[date.getMonth()];\n  let maxDays\
    \ = daysInYearCount < 30\n    ? 29\n    : daysInYearCount < 29\n    ? 28\n   \
    \ : daysInMonthCount[date.getMonth()];\n  let minDays = date.getDate() > 1 ? (date.getDate()\
    \ - 1) / 7 : date.getDate() / 7;\n  if (date.getFullYear() < 1 || date.getFullYear()\
    \ > 9999) {\n    return false;\n  }\n  if (date.getMonth() < 1 || date.getMonth()\
    \ > 12) {\n    return false;\n  }\n  if (date.getDate() < 1 || (date.getDate()\
    \ > maxDays)) {\n    return false;\n  }\n  if (date.getDate() < minDays) {\n \
    \   return false;\n  }\n  return true;\n}\n", "  // Your code goes here\n  return\
    \ true;\n}\n</code>\n<|/ a tags=typescript,javascript dscore=0 |>\n<| c |>\nThank\
    \ you for the effort. The date should be in the format `mm-dd-yyyy`.\n<|/ c |>\n\
    <| a dscore=0 |>\nyou can try this\n<code>", "    const mmdd = date.split(\"-\"\
    );\n    const daysInMonth = [0, 31, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\
    \    const monthMax = monthDays(mmdd[0], mmdd[1]);\n    return date.length &&\
    \ mmdd[1] > 0 && mmdd[1] < daysInMonth[mmdd[1]] &&\n        mmdd[2] > 0 && mmdd[2]\
    \ <= monthMax &&\n        mmdd[0] >= 1 && mmdd[0] < 12;\n}\n", "  return !(date.length\
    \ === 0 ||\n    date.match(/[^0-9]/) ||\n    (date.split('-').length <= 2 &&\n\
    \    date.split('-').length <= 4 &&\n    date.split('-').length <= 6 &&\n    date.split('-').length\
    \ <= 8 &&\n    date.split('-').length <= 10 &&\n    date.split('-').length <=\
    \ 12 &&\n    !date.split('-')[0].length ||\n    !date.split('-')[1].length ||\n\
    \    !date.split('-')[2].length ||\n    !date.split('-')[3].length ||\n    date.split('-')[1].length\
    \ <= 1 &&\n    date.split('-')[1].length <= 3 &&\n    date.split('-')[1].length\
    \ <= 5 &&\n    date.split('-')[1].length <= 7 &&\n    date.split('-')[1].length\
    \ <= 9 &&\n    date.split('-')[1].length <= 11 &&\n    date.split('-')[1].length\
    \ <= 13 &&\n    date.split('-')[1].length <= 15 &&\n    date.split('-')[1].length\
    \ <= 17 &&\n    date.split('-')[1].length <= 19 &&\n    date.split('-')[1].length\
    \ <= 21 &&\n    date.split('-')[1].length <= 23 &&\n    date.split('-')[1].length\
    \ <= 25 &&\n    date.split('-')[1].length <= 27 &&\n    date.split('-')[1].length\
    \ <= 29 &&\n    date.split('-')[1].length <= 31 &&\n    date.split('-')[2].length\
    \ <= 1 &&\n    date.split('-')[2].length <= 3 &&\n    date.split('-')[2].length\
    \ <= 5 &&\n    date.split('-')[2].length <= 7 &&\n    date.split('-')[2].length\
    \ <= 9 &&\n    date.split('-')[2].length <= 11 &&\n    date.split('-')[2].length\
    \ <= 13 &&\n    date.split('-')[2].length <= 15 &&\n    date.split('-')[2].length\
    \ <= 17 &&\n    date.split('-')[2].length <= 19 &&\n    date.split('-')[2].length\
    \ <= 21 &&\n    date.split('-')[2].length <= 23 &&\n    date.split('-')[2].length\
    \ <= 25 &&\n    date.split('-')[2].length <= 27 &&\n    date.split('-')[2].length\
    \ <= 29 &&\n    date.split('-')[2].length <= 31 &&\n    date.split('-')[3].length\
    \ <= 1 &&\n    date.split('-')[3].length <= 3 &&\n    date.split('-')[3].length\
    \ <= 5 &&\n    date.split('-')[3].length <= 7 &&\n    date.split('-')[3].length\
    \ <= 9 &&\n    date.split('-')[3].length <= 11 &&\n    date.split('-')[3].length\
    \ <= 13 &&\n    ", "  if (!date || typeof date !== \"string\" || !date.trim())\
    \ {\n    return false;\n  }\n\n  let _date = new Date(date);\n\n  if (_date.getFullYear()\
    \ >= 2018) {\n    return false; // Date is greater than the year 2018.\n  }\n\n\
    \  if (_date.getMonth() + 1 > 12) {\n    return false;\n  }\n\n  if (_date.getDate()\
    \ > 28) {\n    return false;\n  }\n\n  if (_date.getMonth() < 1 || _date.getMonth()\
    \ > 12) {\n    return false;\n  }\n\n  if (_date.getDate() < 1 || _date.getDate()\
    \ > 31) {\n    return false;\n  }\n\n  return true;\n}\n", "  if (date === \"\"\
    \ || date === null || date === undefined) return false;\n  const parts = date.split(\"\
    -\");\n  if (parts.length === 2 && !(parts[0] > 1 && parts[0] < 12 && parts[1]\
    \ > 0 && parts[1] < 4)) return false;\n  if (!(parts[0] > 1 && parts[0] < 12 &&\
    \ parts[1] > 0 && parts[1] < 4)) return false;\n  if (!(parts[1] > 0 && parts[1]\
    \ < 13)) return false;\n  if (!(parts[2] > 0 && parts[2] < 50 && parts[3] > 0\
    \ && parts[3] < 13 && parts[4] > 0 && parts[4] < 32)) return false;\n  return\
    \ true;\n}\n", "    const daysInMonth: number[] = [31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31];\n    const months: number[] = [1, 3, 5, 4, 6, 7, 8, 9,\
    \ 10, 11];\n\n    // Check if date is not empty\n    if (date === '') return false;\n\
    \n    // Check if the date has valid days and months\n    if (!date.match(/^\\\
    d{2}-\\d{2}-\\d{4}$/)) return false;\n\n    // Split date into day, month, year\n\
    \    const split_date = date.split('-');\n\n    // Check the number of days\n\
    \    if (split_date[1].length < 1 || split_date[1].length > daysInMonth[0]) return\
    \ false;\n\n    // Check the number of months\n    if (split_date[1].length <\
    \ 1 || split_date[1].length > months.length) return false;\n\n    // Check the\
    \ number of years\n    if (split_date[2].length < 1 || split_date[2].length >\
    \ 4) return false;\n\n    // Convert the date\n    const day: number = parseInt(split_date[1]);\n\
    \    const month: number = parseInt(split_date[1].substr(0, 2));\n    const year:\
    \ number = parseInt(split_date[2].substr(0, 4));\n\n    // Check if the day is\
    \ not less than 1 or higher than 31\n    if (day < 1 || day > daysInMonth[month\
    \ - 1]) return false;\n\n    // Check if the month is not less than 1 or higher\
    \ than 12\n    if (month < 1 || month > months.length) return false;\n\n    //\
    \ Check if the year is not less than 1 or higher than 9999\n    if (year < 1 ||\
    \ year > 9999) return false;\n\n    // Check if the date is in the correct format\n\
    \    if (!date.match(/^\\d{2}-\\d{2}-\\d{4}$/)) return false;\n\n    return true;\n\
    }\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThis is nice, but can you explain\
    \ a bit what `daysInMonth` and `months` are?\n<|/ c |>\n<| c |>\ndaysInMonth is\
    \ a static array with all the possible days in February, and months is an array\
    \ with the number of days of each month. I will add the code in the answer, thanks.\n\
    <|/ c |>\n<| c |>\nThanks I understand the code now but I'm getting a syntax error\
    \ \"unexpected end of input\" on `if (split_date[1].length < 1 || split_date[1].length\
    \ > daysInMonth[0]) return false;`\n<|/ c |>\n<| c |>\nI think you have an extra\
    \ `}` at the end of the code, and I edited the answer. Can you try again?\n<|/\
    \ c |>\n<| c |>\nStill getting the same error even though I didn't have that extra\
    \ } anywhere in my code. I'll post my entire code in a moment.\n<|/ c |>\n<| a\
    \ tags=javascript dscore=0 |>\n<code>\nvar checkDate= /^(0?[1-9]|[12][0-9]|3[01])[\\\
    -\\/](0?[1-9]|1[012])[\\-\\/]\\d{4}$/;\n\nif (checkDate.test(dateString)){", " \
    \ if(date === \"\") return true;\n  const dateParts = date.split(\"-\");\n  const\
    \ monthNumbers = dateParts[0].split(\"-\").map(Number);\n  let dayNumbers = dateParts[1].split(\"\
    -\").map(Number);\n  if(monthNumbers.length === 1 && dayNumbers.length === 1 &&\
    \ dayNumbers[0] === 0) return true;\n  if(monthNumbers.length !== 4 && dayNumbers.length\
    \ !== 4 || monthNumbers[0] > 12 || monthNumbers[1] > 12 || dayNumbers[0] > 31\
    \ || dayNumbers[1] > 31 || dayNumbers[0] < 1 || dayNumbers[1] < 1 || dayNumbers[0]\
    \ < 1 || dayNumbers[1] < 1) return false;\n  return true;\n}\n", "    var parts\
    \ = date.split('-');\n    var month = parseInt(parts[1], 10);\n    var day = parseInt(parts[2],\
    \ 10);\n    var year = parseInt(parts[0], 10);\n\n    var date_regex = /^[0-9]{1,2}\\\
    /[0-9]{1,2}\\/[0-9]{4}$/;\n\n    if (parts.length != 3 || !(date_regex.test(date)))\
    \ {\n        return false;\n    }\n\n    if (month < 1 || month > 12 || day <\
    \ 1 || day > 31) {\n        return false;\n    }\n\n    if (month == 2 && day\
    \ > 29) {\n        return false;\n    }\n\n    if (month == 4 && day > 30) {\n\
    \        return false;\n    }\n\n    if (month == 6 && day > 31) {\n        return\
    \ false;\n    }\n\n    if (month == 9 && day > 30) {\n        return false;\n\
    \    }\n\n    if (month == 11 && day > 31) {\n        return false;\n    }\n\n\
    \    if (month == 1 && day > 31) {\n        return false;\n    }\n\n    if (month\
    \ == 3 && day > 31) {\n        return false;\n    }\n\n    if (month == 5 && day\
    \ > 31) {\n        return false;\n    }\n\n    if (month == 7 && day > 31) {\n\
    \        return false;\n    }\n\n    if (month == 8 && day > 31) {\n        return\
    \ false;\n    }\n\n    if (month == 10 && day > 31) {\n        return false;\n\
    \    }\n\n    if (month == 12 && day > 31) {\n        return false;\n    }\n\n\
    \    if (month == 1 && day > 30) {\n        return false;\n    }\n\n    if (month\
    \ == 4 && day > 30) {\n        return false;\n    }\n\n    if (month == 6 && day\
    \ > 30) {\n        return false;\n    }\n\n    if (month == 9 && day > 30) {\n\
    \        return false;\n    }\n\n    if (month == 11 && day > 30) {\n        return\
    \ false;\n    }\n\n    return true;\n}\n", "    if (date.length == 0) {\n    \
    \    return false;\n    }\n    if (date.length !== 10 || isNaN(Date.parse(date)))\
    \ {\n        return false;\n    }\n    const dateArray = date.split(\"-\");\n\
    \    const day = dateArray[2];\n    if (days.length == 0 || days.length > 31 ||\
    \ day < 1 || day > 31) {\n        return false;\n    }\n    const month = dateArray[1]\
    \ - 1;\n    if (month.length == 0 || month.length > 12) {\n        return false;\n\
    \    }\n    const year = dateArray[3];\n    if (year.length == 0 || year.length\
    \ < 1 || year > 99) {\n        return false;\n    }\n    return true;\n}", " \
    \ const date1 = date.split(\"-\");\n  if (date1.length === 2) {\n    const date2\
    \ = date1[0].split(\"/\");\n    if (date2.length === 3) {\n      const date3 =\
    \ date2[2].split(\"-\");\n      if (date3.length === 3) {\n        // Year is\
    \ 4 digit\n        if (date3[2] >= 0 && date3[2] <= 99) {\n          // Month\
    \ is between 1-12\n          if (date3[1] >= 1 && date3[1] <= 12) {\n        \
    \    // Date is between 1-31\n            if (date3[0] >= 1 && date3[0] <= 31)\
    \ {\n              // Date is between 1-30\n              if (date3[0] >= 0 &&\
    \ date3[0] <= 30) {\n                // Date is between 1-29\n               \
    \ if (date3[0] >= 0 && date3[0] <= 29) {\n                  if (date3[1] >= 1\
    \ && date3[1] <= 12) {\n                    return true;\n                  }\n\
    \                }\n              }\n            }\n          }\n        }\n \
    \     }\n    }\n  }\n  return false;\n}\n", "  const splitDate = date.split('-');\n\
    \  if (splitDate.length != 3) {\n    return false;\n  }\n  if (splitDate[1].length\
    \ < 1 || splitDate[1].length > 12) {\n    return false;\n  }\n  if (splitDate[2].length\
    \ != 2 || splitDate[2].length > 2) {\n    return false;\n  }\n  if (splitDate[0].length\
    \ < 1 || splitDate[0].length > 2) {\n    return false;\n  }\n  return true;\n\
    }\n", "  if (!date || !date.length) return false; // date.length returns number\
    \ of characters entered by user\n  let mm = date.split(\"-\")[0];\n  let dd =\
    \ date.split(\"-\")[1];\n  let yyyy = date.split(\"-\")[2];\n  let mmCheck = validateMonth(mm);\n\
    \  let ddCheck = validateDay(dd);\n  let yyyyCheck = validateYear(yyyy);\n  if\
    \ (mmCheck === false || ddCheck === false || yyyyCheck === false) {\n    return\
    \ false;\n  }\n  if (mmCheck && mmCheck > 0 && mmCheck <= 12) {\n    if (ddCheck\
    \ && ddCheck < 1 || ddCheck > 31) return false;\n    if (yyyyCheck && yyyyCheck\
    \ < 1 || yyyyCheck > 31) return false;\n  }\n  if (mmCheck && mmCheck === 12 &&\
    \ ddCheck && ddCheck < 1) return false;\n  if (mmCheck && mmCheck === 12 && ddCheck\
    \ && ddCheck > 30) return false;\n  if (mmCheck && mmCheck === 12 && yyyyCheck\
    \ && yyyyCheck < 1) return false;\n  if (mmCheck && mmCheck === 12 && yyyyCheck\
    \ && yyyyCheck > 12) return false;\n  return true;\n}", "  const d = new Date(date);\n\
    \  if (!date.length || d.getDate() < 1 || d.getDate() > 31) {\n    return false;\n\
    \  }\n  const months = [\n    \"01\",\n    \"03\",\n    \"05\",\n    \"07\",\n\
    \    \"08\",\n    \"10\",\n    \"12\",\n    \"04\",\n    \"06\",\n    \"09\",\n\
    \    \"11\",\n    \"02\",\n    \"03\",\n  ];\n  if (months.indexOf(d.getMonth())\
    \ < 1 || months.indexOf(d.getMonth() + 1) > 12) {\n    return false;\n  }\n  const\
    \ dateString = `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\n  return\
    \ dateString === date;\n}\n", "\tif (!date.length || date.split('-').length <\
    \ 3 || date.split('-').length > 4) {\n\t\treturn false;\n\t}\n\tconst year = date.split('-')[2];\n\
    \tconst month = date.split('-')[1];\n\tconst day = date.split('-')[0];\n\tif (month\
    \ < 1 || month > 12 || day < 1 || day > 31 || month < 1 || month > 12 || day <\
    \ 1 || day > 31 || (month == 2 && day > 29)) {\n\t\treturn false;\n\t}\n\treturn\
    \ true;\n}", "  date = date.replace(/\\s/g, \"\");\n  date = date.split(\"-\"\
    );\n  let mm = date[0];\n  let dd = date[1];\n  let yyyyy = date[2];\n\n  if (!date[1]\
    \ || !date[2] || !date[0]) return false;\n\n  if (mm == \"\" || dd == \"\") return\
    \ false;\n\n  if (mm.length < 1 || mm.length > 3 || !(/^[0-9]{1,2}$/g).test(mm))\
    \ return false;\n  if (dd.length < 1 || dd.length > 2 || !(/^[0-9]{1,2}$/g).test(dd))\
    \ return false;\n  if (yyyyy.length < 1 || yyyyy.length > 4 || !(/^[0-9]{4,4}$/g).test(yyyyy))\
    \ return false;\n\n  let year = new Date(yyyyy, (mm[1] - 1).toString().length\
    \ == 1 ? 0 : parseInt(mm[1]) - 1, (dd[1] - 1).toString().length == 1 ? 0 : parseInt(dd[1])\
    \ - 1, 1);\n\n  if (year.toString().length != 4) year = new Date(yyyyy, mm[1]\
    \ - 1, dd[1] - 1, 1);\n\n  let daysInMonth = new Date(year, mm[1].toString().length\
    \ == 1 ? 0 : parseInt(mm[1]), dd[1].toString().length == 1 ? 0 : parseInt(dd[1]),\
    \ 1).getDate();\n  let daysInYear = new Date(year, 1, 1).getDate();\n\n  if (daysInMonth\
    \ != 31 || daysInYear != 31) return false;\n\n  let month = new Date(year, mm[1].toString().length\
    \ == 1 ? 0 : parseInt(mm[1]), dd[1].toString().length == 1 ? 0 : parseInt(dd[1]),\
    \ 1).getMonth();\n\n  if (month < 1 || month > 12) return false;\n\n  if (mm ==\
    \ \"\" || dd == \"\") return false;\n\n  if (mm.length != 2 || mm.length != 4\
    \ || dd.length != 2 || dd.length != 4 || yyyyy.length != 4) return false;\n\n\
    \  if (mm == dd == yyyyy) return false;\n\n  return true;\n}\n\nconst isValidDate\
    \ = valid_date;\n\nlet months = [\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"];\n\nlet days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"\
    , \"Thursday\", \"Friday\", \"Saturday\"];\n\nlet weekDays = [\"Sunday\", \"Monday\"\
    , \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\nlet\
    \ dateFormat = \"MM/dd/yyyy\";\n\nlet weekdayFormat = \"dd\";\n\nlet monthFormat\
    \ = \"MMM\";\n\nlet monthLongFormat = \"MMMM yyyy\";\n\nlet monthShortFormat =\
    \ \"MM\";\n\nlet timeFormat = \"HH:mm:ss\";\n\nlet dateTimeFormat = \"YYYY-MM-DD\
    \ HH:mm:ss\";\n\nlet dayLongFormat = \"dddd, MMM dd, yyyy\";\n\nlet dayShortFormat\
    \ = \"dddd\";\n\nlet dayShortFormat2 = \"dd\";\n\nlet dayShortFormat3 = \"d\"\
    ;\n\nlet monthLongFormat2 = \"MMMM yyyy", "  const dateParts = date.split(\"-\"\
    );\n  if (dateParts.length != 3) return false;\n  for (let i = 0; i < dateParts.length;\
    \ i++) {\n    const datePart = dateParts[i].split(\"/\");\n    if (datePart.length\
    \ != 2) return false;\n    if (datePart[0] > 12 || datePart[1] > 31 || datePart[1]\
    \ < 1) return false;\n  }\n  return true;\n}\n", "  return !!(date && date.trim().length\
    \ != 0 && date.split('-').length >= 3 && date.split('-').length == (date.split('-').length\
    \ - 1) && date.split('-')[0].length == 2 && (date.split('-')[0] < 13 && date.split('-')[1]\
    \ < 31 || (date.split('-')[0] > 12 && date.split('-')[1] > 29)) && date.split('-').every((day)\
    \ => day.length == 2 && (parseInt(day) > 0 && parseInt(day) < 32));\n}\n", " \
    \ var isValid = true;\n  var dateArr = date.split('-');\n  var monthVal = dateArr[1];\n\
    \  var dayVal = dateArr[2];\n  if (\n    !dateArr[0] ||\n    dateArr[0].length\
    \ === 0 ||\n    !monthVal ||\n    monthVal.length === 0 ||\n    !dayVal ||\n \
    \   dayVal.length === 0\n  ) {\n    isValid = false;\n  } else if (monthVal.length\
    \ !== 2) {\n    isValid = false;\n  } else if (dayVal.length < 1 || dayVal.length\
    \ > 31) {\n    isValid = false;\n  } else if (monthVal.length > 12) {\n    isValid\
    \ = false;\n  } else if (monthVal.length < 1 || monthVal.length > 12) {\n    isValid\
    \ = false;\n  } else {\n    var dateObj = new Date(monthVal, dayVal);\n    if\
    \ (monthVal === dateObj.getMonth() + 1) {\n      if (dateObj.getDate() < 1 ||\
    \ dateObj.getDate() > 31) {\n        isValid = false;\n      } else if (dateObj.getDate()\
    \ < 1 || dateObj.getDate() > 29) {\n        isValid = false;\n      } else if\
    \ (dateObj.getFullYear() < 1 || dateObj.getFullYear() > 2040) {\n        isValid\
    \ = false;\n      }\n    }\n  }\n  return isValid;\n}\n", "    return (\n    \
    \    date.length > 0 &&\n        /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/.test(date) &&\n\
    \        days_in_months.indexOf(date.split(\"/\")[0]) < 1 &&\n        days_in_months.indexOf(date.split(\"\
    /\")[1]) < 1 &&\n        months.indexOf(date.split(\"/\")[0]) < 1 &&\n       \
    \ months.indexOf(date.split(\"/\")[1]) < 1 &&\n        date.split(\"-\")[2] <=\
    \ \"30\"\n    );\n}\n", "\tlet isValid = false;\n\tlet dateArr = date.split(\"\
    -\");\n\tif (dateArr.length > 3) {\n\t\tisValid = false;\n\t} else {\n\t\tlet\
    \ monthArr = dateArr[0].split(\"/\");\n\t\tmonthArr.splice(3, 1);\n\t\tmonthArr.splice(0,\
    \ 1);\n\t\tlet yearArr = dateArr.splice(1, 1);\n\t\tlet daysArr = dateArr.splice(0,\
    \ 1);\n\t\tlet daysInMonth = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \t\tlet monthValid = monthArr[0] >= 1 && monthArr[0] < 13;\n\t\tlet yearValid\
    \ = yearArr[0] >= 0 && yearArr[0] < 1000;\n\t\tlet dateValid = daysArr[0] >= 1\
    \ && daysArr[0] < daysInMonth[monthArr[0] - 1];\n\t\tisValid = monthValid && yearValid\
    \ && dateValid;\n\t}\n\treturn isValid;\n}\n", "  var splitted_date = date.split(\"\
    -\");\n  if (splitted_date.length !== 3) {\n    return false;\n  }\n  return true;\n\
    }\n", "  const parts = date.split('-');\n  if (!parts || parts.length !== 3) {\n\
    \    return false;\n  }\n\n  const daysInMonth = daysInMonth(parts[0]);\n  const\
    \ dayInYear = dayInYear(parts[0]);\n  const validDaysInMonth = daysInMonth(parts[1])\
    \ > 0;\n  const validDayInYear = dayInYear(parts[1]) > 0;\n\n  const monthInt\
    \ = parseInt(parts[1], 10);\n\n  return monthInt >= 1 && monthInt <= 12 &&\n \
    \   validDayInYear && validDaysInMonth &&\n    !isDate(parts[2], parts[0]);\n\
    }\n", "  let invalidDate = false;\n  if (!date) {\n    invalidDate = true;\n \
    \ } else {\n    const dateArray = date.split('-');\n    if (dateArray.length !==\
    \ 3) {\n      invalidDate = true;\n    }\n    if (isNaN(Number(dateArray[0])))\
    \ {\n      invalidDate = true;\n    }\n    if (\n      (Number(dateArray[0]) >\
    \ 12) ||\n      (Number(dateArray[0]) < 1) ||\n      (Number(dateArray[1]) > 31)\
    \ ||\n      (Number(dateArray[1]) < 1) ||\n      (Number(dateArray[2]) > 31) ||\n\
    \      (Number(dateArray[2]) < 1)\n    ) {\n      invalidDate = true;\n    }\n\
    \  }\n  return invalidDate;\n}\n", "  date = date.split(\"-\")\n  if (date.length\
    \ === 3) date = date.reverse()\n  if (date.length !== 3) return false;\n  if (date[0].length\
    \ < 2 || date[0].length > 2) return false\n  if (date[1].length < 1 || date[1].length\
    \ > 1) return false\n  if (date[1] < 1 || date[1] > 12) return false\n  if (date[2]\
    \ < 1 || date[2] > 31) return false\n  return true\n}\n", "  // Write your code\
    \ here\n  const splittedDate = date.split(\"-\")\n  const [day, month, year] =\
    \ splittedDate\n\n  const validMonth = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\
    \  const validYear = [1, 3, 5, 7, 8, 10, 12, 14, 16, 18, 20]\n\n  if (!splittedDate.length\
    \ || splittedDate.length === 1) {\n    return false\n  }\n\n  if (!day || day.length\
    \ === 0) {\n    return false\n  }\n\n  if (!month) {\n    return false\n  }\n\n\
    \  if (!validMonth.includes(month)) {\n    return false\n  }\n\n  if (!year ||\
    \ !year.length) {\n    return false\n  }\n\n  if (!validYear.includes(year)) {\n\
    \    return false\n  }\n\n  return true\n}\n", "  // We are going to validate\
    \ the date by comparing it to a list of\n  // valid dates. Each item in the list\
    \ will be a date string.\n  const validDates = [\"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    ,\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n   \
    \   \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"\
    01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    ,\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n   \
    \   \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"\
    01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\"\
    ,\n      \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n   \
    \   \"01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"\
    01-01-1970\", \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970\", \"01-01-1970\",\n      \"01-01-1970\", \"01-01-1970\"\
    , \"01-01-1970\", \"01-01-1970", "  if (date.length === 0)\n    return false;\n\
    \  const yearMonthDay = date.split(\"-\");\n  if (yearMonthDay.length !== 3)\n\
    \    return false;\n  const year = Number(yearMonthDay[0]);\n  const month = Number(yearMonthDay[1]);\n\
    \  const day = Number(yearMonthDay[2]);\n  const maxDate = new Date(year, month\
    \ + 1, 0);\n  if (day > maxDate.getDate())\n    return false;\n  return true;\n\
    }\n", "    if (!date.length)\n        return false;\n    const date_parts = date.split(\"\
    -\");\n    let days_valid = true;\n    let months_valid = true;\n    let years_valid\
    \ = true;\n    const months = date_parts[2].split(\"-\").map(Number);\n    const\
    \ days = date_parts[1].split(\"-\").map(Number);\n    const months_correct = months[0]\
    \ <= 12 && months[1] <= 3;\n    months_valid &= days[0] <= 31 && (months_correct\
    \ || days[1] <= 30);\n    months_valid &= days[1] <= 30 && (months_correct ||\
    \ days[0] <= 29);\n    months_valid &= months[0] <= 12 && months[1] <= 31;\n \
    \   const days_correct = days[0] <= 31 && (months_correct || days[1] <= 30);\n\
    \    days_valid &= days[1] <= 30 && (days_correct || days[0] <= 29);\n    days_valid\
    \ &= days[0] <= 31 && (days_correct || months[1] <= 12);\n    const years = date_parts[0].split(\"\
    -\").map(Number);\n    years_valid &= days[0] <= 365 && months[0] <= 12;\n   \
    \ years_valid &= days[1] <= 365 && months[1] <= 11;\n    years_valid &= days[0]\
    \ <= 365 && months[0] <= 12 && months[1] <= 11;\n    years_valid &= days[1] <=\
    \ 365 && months[1] <= 31;\n    years_valid &= days[0] <= 365 && months[0] <= 12\
    \ && months[1] <= 31;\n    return days_valid && months_valid && years_valid;\n\
    }\n", "  if(date === \"\") {\n    return false;\n  }\n  const month_day = date.split(\"\
    -\");\n  if(month_day.length != 3) {\n    return false;\n  }\n  const months =\
    \ month_day[0].split(\"\");\n  const days = month_day[1].split(\"\");\n  const\
    \ years = month_day[2].split(\"\");\n  if(months.length <= 1 || months.length\
    \ > 12) {\n    return false;\n  }\n  if(days.length <= 1 || days.length > 31 ||\
    \ (days.length == 2 && days.includes(\"29\")) || days.length > 31) {\n    return\
    \ false;\n  }\n  if(months.includes(\"1\") || months.includes(\"3\") || months.includes(\"\
    5\") || months.includes(\"7\") || months.includes(\"8\") || months.includes(\"\
    10\") || months.includes(\"12\") || months.includes(\"4\") || months.includes(\"\
    6\") || months.includes(\"9\") || months.includes(\"11\")) {\n    if(years.length\
    \ <= 1 || years.length > 12) {\n      return false;\n    }\n  }\n  if(months.includes(\"\
    2\") || months.includes(\"4\") || months.includes(\"6\") || months.includes(\"\
    9\") || months.includes(\"11\")) {\n    if(years.length <= 1 || years.length >\
    \ 12) {\n      return false;\n    }\n  }\n  if(months.includes(\"0\") && days.includes(\"\
    0\")) {\n    if(years.length <= 1 || years.length > 12) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n", "    const day = new Date(date).getDate();\n\
    \    const month = new Date(date).getMonth() + 1;\n    const year = new Date(date).getFullYear();\n\
    \    return (day < 1 || day > 31) &&\n        (month < 1 || month > 12) &&\n \
    \       (year > 1900 && year < 2100);\n}\n</code>\n<|/ a dscore=0 tags=jquery,datetimepicker\
    \ |>\n<| c |>\nThanks Jimmy for the answer. Your code works well but I want to\
    \ allow only a particular date range. I have added the date range in my question.\n\
    <|/ c |>\n<| c |>\nI have updated my answer, please check it.\n<|/ c |>\n<| a\
    \ dscore=0 |>\nYou don't need any library for this. You can do simple validation\
    \ on Date object.\nYour date string can be converted to Date object using Date.parse\n\
    <code>\nvar date = new Date('03-11-2000');\n</code>\nIf valid date then you can\
    \ compare it with your range for validation.\n<code>", "    const date_parts =\
    \ date.split('-');\n    return date_parts.length == 3 && date_parts.length ==\
    \ 4 && date_parts.length >= 1 && date_parts.length <= 3 && isNaN(parseInt(date_parts[0]))\
    \ && isNaN(parseInt(date_parts[1])) && isNaN(parseInt(date_parts[2]));\n}\n",
  "  const regex = /^((0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\\d{4}|04-\\d{2}-\\\
    d{4})$/;\n  return regex.test(date);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Please don't post only code as answer, but also provide an explanation what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a |>\n<code>\nvar reg = /^(0[1-9]|[12]\\d|3[01])[-](0[1-9]|1[012])[-]\\\
    d{4}$/;", "  var months: number[] = [\n    \"January\",\n    \"February\",\n \
    \   \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n \
    \   \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n   \
    \ \"December\",\n  ];\n\n  var days: number[] = [\n    \"Sunday\",\n    \"Monday\"\
    ,\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n\
    \    \"Saturday\",\n  ];\n\n  var year: number[] = [\n    \"1900\",\n    \"1901\"\
    ,\n    \"1902\",\n    \"1903\",\n    \"1904\",\n    \"1905\",\n    \"1906\",\n\
    \    \"1907\",\n    \"1908\",\n    \"1909\",\n    \"1910\",\n    \"1911\",\n \
    \   \"1912\",\n    \"1913\",\n    \"1914\",\n    \"1915\",\n    \"1916\",\n  \
    \  \"1917\",\n    \"1918\",\n    \"1919\",\n    \"1920\",\n    \"1921\",\n   \
    \ \"1922\",\n    \"1923\",\n    \"1924\",\n    \"1925\",\n    \"1926\",\n    \"\
    1927\",\n    \"1928\",\n    \"1929\",\n    \"1930\",\n    \"1931\",\n    \"1932\"\
    ,\n    \"1933\",\n    \"1934\",\n    \"1935\",\n    \"1936\",\n    \"1937\",\n\
    \    \"1938\",\n    \"1939\",\n    \"1940\",\n    \"1941\",\n    \"1942\",\n \
    \   \"1943\",\n    \"1944\",\n    \"1945\",\n    \"1946\",\n    \"1947\",\n  \
    \  \"1948\",\n    \"1949\",\n    \"1950\",\n    \"1951\",\n    \"1952\",\n   \
    \ \"1953\",\n    \"1954\",\n    \"1955\",\n    \"1956\",\n    \"1957\",\n    \"\
    1958\",\n    \"1959\",\n    \"1960\",\n    \"1961\",\n    \"1962\",\n    \"1963\"\
    ,\n    \"1964\",\n    \"1965\",\n    \"1966\",\n    \"1967\",\n    \"1968\",\n\
    \    \"1969\",\n    \"1970\",\n    \"1971\",\n    \"1972\",\n    \"1973\",\n \
    \   \"1974\",\n    \"1975\",\n    \"1976\",\n    \"1977\",\n    \"1978\",\n  \
    \  \"1979\",\n    \"1980\",\n    \"1981\",\n    \"1982\",\n    \"19", "  if(date\
    \ == \"\") {\n    return false;\n  }\n  let dateParts = date.split(\"-\");\n \
    \ let daysInMonth = new Date(dateParts[2]+'-'+dateParts[0]+'-'+dateParts[1]).getDate();\n\
    \  if(daysInMonth < 1 || daysInMonth > 31) {\n    return false;\n  }\n  if(dateParts[0]\
    \ < 1 || dateParts[0] > 12) {\n    return false;\n  }\n  if(dateParts[1] < 1 ||\
    \ dateParts[1] > 12) {\n    return false;\n  }\n  return true;\n}", "    console.log(`Entering\
    \ validDate.`);\n    console.log(`The date string is: ${date}`);\n    console.log(`Checking\
    \ for empty date string.`);\n    if (date == \"\") {\n        console.log(`The\
    \ date string is empty.`);\n        return false;\n    }\n    console.log(`Checking\
    \ for number of days for month 1,3,5,7,8,10,12,` +\n        `not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And, ` +\n        `number of\
    \ days is not less than 1 or higher than 30 days for months 4,6,9,11. And, ` +\n\
    \        `number of days is not less than 1 or higher than 29 for month 2.`);\n\
    \    let date_arr = date.split(\"-\");\n    if (date_arr[0] < 1 || date_arr[0]\
    \ > 12) {\n        console.log(`The date should be in the format: mm-dd-yyyy`);\n\
    \        return false;\n    }\n    let months_arr = [1, 3, 5, 7, 8, 10, 12];\n\
    \    let num_days = new Date(date_arr[2], date_arr[0]-1, date_arr[1]).getDate();\n\
    \    if (num_days < 1 || num_days > 31) {\n        console.log(`The number of\
    \ days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And,\
    \ ` +\n        `number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, ` +\n        `number of days is not less than 1 or higher than\
    \ 29 for month 2.`);\n        return false;\n    }\n    let is_valid_month = false;\n\
    \    for (let i = 0; i < months_arr.length; i++) {\n        if (months_arr[i]\
    \ == date_arr[0]) {\n            is_valid_month = true;\n        }\n    }\n  \
    \  if (!is_valid_month) {\n        console.log(`The months should not be less\
    \ than 1 or higher than 12.`);\n        return false;\n    }\n    console.log(`All\
    \ checks passed.`);\n    return true;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ very much for the answer!\n<|/ c |>\n<| a tags=date-formatting,javascript,date\
    \ dscore=0 |>\nUsing moment.js\n<code>\nvar validDate = function(date) {\n  console.log(moment(date,\
    \ 'MM-DD-YYYY').isValid());\n}\n\nvalidDate('03-11-2000');\n</code>\n<|/ a |>\n\
    <| a tags=date-formatting,javascript,date |>\nYou could take a function which\
    \ splits the string and checks the month/day length.\nThis approach only checks\
    \ the day part of the string.\n\n<code>", "    return (!!date && date.length >=\
    \ 8 && date.length <= 10 && !isNaN(new Date(date).getDate()) && is_valid_month(date)\
    \ && is_valid_day(date) && is_valid_year(date) && is_valid_month_day(date));\n\
    }\n", "  if (date === \"\") {\n    return false;\n  }\n  const parts = date.split(\"\
    -\");\n  const dateNow = Date.now();\n  const daysInMonth = [0, 31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n  const dateParts: number[] = [\n    parseInt(parts[0],\
    \ 10),\n    parseInt(parts[1], 10),\n    parseInt(parts[2], 10),\n  ];\n  const\
    \ dateToCheck = dateParts[0];\n  if (dateToCheck < 1 || dateToCheck > 12) {\n\
    \    return false;\n  }\n  if (dateParts[2] < 1 || dateParts[2] > daysInMonth[dateParts[1]])\
    \ {\n    return false;\n  }\n  const monthParts: number[] = [1, 3, 5, 7, 8, 10,\
    \ 12];\n  const monthToCheck = dateParts[1];\n  if (monthToCheck < 1 || monthToCheck\
    \ > 12) {\n    return false;\n  }\n  if (dateParts[0] > daysInMonth[monthToCheck])\
    \ {\n    return false;\n  }\n  return true;\n}\n", "    var pattern = /^(?:(?:0?[1-9]|1[0-2])-(?:0?[1-9]|1\\\
    d|2\\d|3[0-1]))|(?:(?:0?[13-9]|1[0-2])-(?:30|31))|(?:(?:0?[13578]|1[02])-31))$/;\n\
    \n    if (!pattern.test(date) || date == \"01\" || date == \"31\" || date == \"\
    30\" || date == \"31\") {\n        return false;\n    }\n\n    var date_string\
    \ = date.replace(/-/g, \"/\");\n    var dateParts = date_string.split(\"/\");\n\
    \    var dateValue = new Date(dateParts[2])\n\n    if (dateParts.length != 3 ||\
    \ dateValue.getFullYear() != dateParts[0]) {\n        return false;\n    }\n\n\
    \    if (dateParts.length == 3) {\n        if (dateParts[1] != dateParts[0]) {\n\
    \            return false;\n        }\n    }\n\n    if (dateParts.length == 4)\
    \ {\n        if (dateParts[1] == dateParts[0] && dateParts[2] != dateParts[1])\
    \ {\n            return false;\n        }\n    }\n\n    if (dateParts.length ==\
    \ 5) {\n        if (dateParts[1] == dateParts[0] && dateParts[2] == dateParts[1]\
    \ && dateParts[3] != dateParts[2]) {\n            return false;\n        }\n \
    \   }\n\n    if (dateParts.length == 6) {\n        if (dateParts[1] == dateParts[0]\
    \ && dateParts[2] == dateParts[1] && dateParts[3] == dateParts[2] && dateParts[4]\
    \ != dateParts[3]) {\n            return false;\n        }\n    }\n\n    if (dateParts.length\
    \ == 7) {\n        if (dateParts[1] == dateParts[0] && dateParts[2] == dateParts[1]\
    \ && dateParts[3] == dateParts[2] && dateParts[4] == dateParts[3] && dateParts[5]\
    \ != dateParts[4]) {\n            return false;\n        }\n    }\n\n    if (dateParts.length\
    \ == 8) {\n        if (dateParts[1] == dateParts[0] && dateParts[2] == dateParts[1]\
    \ && dateParts[3] == dateParts[2] && dateParts[4] == dateParts[3] && dateParts[5]\
    \ == dateParts[4] && dateParts[6] != dateParts[5]) {\n            return false;\n\
    \        }\n    }\n\n    if (dateParts.length == 9) {\n        if (dateParts[1]\
    \ == dateParts[0] && dateParts[2] == dateParts[1] && dateParts[3] == dateParts[2]\
    \ && dateParts[4] == dateParts[3] && dateParts[5] == dateParts[4] && dateParts[6]\
    \ == dateParts[5] && dateParts[7] != dateParts[6]) {\n            return false;\n\
    \        }\n    }\n\n    if (dateParts.length == 10) {\n        if (dateParts[1]\
    \ == dateParts[0]", "    if(!date || !date.trim()) {\n        return false;\n\
    \    }\n    var dateArray = date.split('-');\n    if(dateArray.length !== 3) {\n\
    \        return false;\n    }\n    var dateObj = new Date(dateArray[1], dateArray[0]-1,\
    \ dateArray[2]);\n    return dateObj > 0 && dateObj <= new Date().getTime() &&\
    \ dateArray[1].length===2 &&\n           dateArray[0].length>=2 && dateArray[2].length>=3;\n\
    }\n", "\tif (date === \"\" || date.length < 1) {\n\t\treturn false\n\t}\n\tlet\
    \ splitDate = date.split(\"-\")\n\tlet daysInMonths = [0, 31, 59, 90, 120, 151,\
    \ 181, 212, 243, 273, 304, 334]\n\tif (splitDate.length === 3) {\n\t\tif (splitDate[0]\
    \ > 12 || splitDate[2] > 31) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn\
    \ true\n\t\t}\n\t} else if (splitDate.length === 2) {\n\t\tif (splitDate[0] >\
    \ 12 || splitDate[1] > 31) {\n\t\t\treturn false\n\t\t} else {\n\t\t\treturn true\n\
    \t\t}\n\t} else if (splitDate.length === 1) {\n\t\tif (splitDate[0] > 12) {\n\t\
    \t\treturn false\n\t\t} else {\n\t\t\treturn true\n\t\t}\n\t}\n}\n", "    var\
    \ date_array = date.split('-');\n    var day = date_array[2];\n    var month =\
    \ date_array[1];\n    var year = date_array[0];\n    var valid_date = true;\n\
    \    if (date.length <= 0) {\n        valid_date = false;\n    }\n    if (day.length\
    \ < 1 || day.length > 31) {\n        valid_date = false;\n    }\n    if (month.length\
    \ < 1 || month.length > 12) {\n        valid_date = false;\n    }\n    var month_array\
    \ = [0, 31, 28, 31, 30, 31, 30, 31, 30, 31];\n    if (month_array[month - 1] <\
    \ 1) {\n        valid_date = false;\n    }\n    if (day < 1 || day > month_array[month\
    \ - 1]) {\n        valid_date = false;\n    }\n    if (month < 1 || month > 12)\
    \ {\n        valid_date = false;\n    }\n    var day_array = [0, 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n    if (year % 4 == 0) {\n        if (day\
    \ < 1 || day > day_array[month]) {\n            valid_date = false;\n        }\n\
    \    }\n    if (year % 100 == 0 && year % 400 != 0) {\n        if (day < 1 ||\
    \ day > day_array[month]) {\n            valid_date = false;\n        }\n    }\n\
    \    return valid_date;\n}\n", "  // You have to write a function which validates\
    \ a given date string and\n  // returns true if the date is valid otherwise false.\n\
    \  // The date is valid if all of the following rules are satisfied:\n  // 1.\
    \ The date string is not empty.\n  // 2. The number of days is not less than 1\
    \ or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is\
    \ not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n  // 3. The months\
    \ should not be less than 1 or higher than 12.\n  // 4. The date should be in\
    \ the format: mm-dd-yyyy\n  // >>> valid_date(\"03-11-2000\")\n  // true\n  //\
    \ >>> valid_date(\"15-01-2012\")\n  // false\n  // >>> valid_date(\"04-0-2040\"\
    )\n  // false\n  // >>> valid_date(\"06-04-2020\")\n  // true\n  // >>> valid_date(\"\
    06/04/2020\")\n  // false\n\n  // Write your implementation here...\n\n  return\
    \ false;\n}\n", "    let date_regex = /^(0[1-9]|[12][0-9]|3[01])[\\/\\-](0[1-9]|1[012])[\\\
    /\\-]\\d{4}$/;\n    if (!date_regex.test(date)) {\n        return false;\n   \
    \ }\n    let parts = date.split(\"-\");\n    if (parts.length != 3) {\n      \
    \  return false;\n    }\n    let months = parts[0];\n    let days = parts[1];\n\
    \    let year = parts[2];\n    let months = months.split(\"-\");\n    let days\
    \ = days.split(\"-\");\n    let year = year.split(\"-\");\n    if (months.length\
    \ != 12 || days.length != 31 || months[0] < 1 || months[0] > 12 || months[1] <\
    \ 1 || months[1] > 12 || days[0] < 1 || days[0] > 31 || days[1] < 1 || days[1]\
    \ > 30 || months[2] < 1 || months[2] > 12 || year[0] < 1 || year[0] > 12 || year[1]\
    \ < 1 || year[1] > 12) {\n        return false;\n    }\n    let valid_day = 1;\n\
    \    for (let i = 31; i > 0; i--) {\n        if (valid_day == 1) {\n         \
    \   if (i == days[0] && i == days[1] && i == days[2]) {\n                valid_day++;\n\
    \            }\n        } else if (i == days[0] && i == days[1] && i == days[2])\
    \ {\n            return false;\n        } else {\n            valid_day = 1;\n\
    \        }\n    }\n    return true;\n}", "  if(date === \"\") return false;\n\
    \  if(date.length < 7 || date.length > 10) return false;\n\n  const [mm, dd] =\
    \ [date.substring(0, 2), date.substring(2, 4)].map(Number);\n  const [yyyy, yyyymmdd]\
    \ = [date.substring(4, 10), date.substring(6, 10)].map(Number);\n\n  if(mm < 1\
    \ || mm > 12) return false;\n  if(dd < 1 || dd > 31) return false;\n  if(yyyy\
    \ > 2020 || yyyy < 1000) return false;\n\n  if(yyyymmdd.length > 2 || (yyyymmdd.length\
    \ === 2 && !isNaN(yyyymmdd[0]))) return false;\n\n  const daysInMonth = [31, 29,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const monthNames = [\"January\"\
    , \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"];\n\n  if(mm === 2 &&\
    \ dd<daysInMonth[m-1])\n    return false;\n\n  if(mm === 2 && dd>daysInMonth[m-1])\n\
    \    return false;\n\n  for(let i = 0; i < monthNames.length; i+=1)\n    if(monthNames[i]\
    \ > monthNames[i+1])\n      return false;\n\n  return true;\n}\n", "  // Your\
    \ code here\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", "  if (!(date.length > 0\
    \ && date.length < 13 && isFinite(date))) {\n    return false;\n  }\n  let months:\
    \ number[] = [];\n  let days = 0;\n  let monthNumber = 0;\n  let year = date.slice(0,\
    \ 4);\n  let monthDays = date.slice(4, 6);\n  months = monthDays.split('-');\n\
    \  if (months.length > 0 && months[0] > 12) {\n    return false;\n  }\n  if (months.length\
    \ > 0 && months[0] < 1) {\n    return false;\n  }\n  if (months.length > 1 &&\
    \ months[1] > 12) {\n    return false;\n  }\n  days = (monthDays.slice(6, 10)\
    \ || '').split('-');\n  if (days.length > 1 && days[1] > 31) {\n    return false;\n\
    \  }\n  if (days.length > 1 && days[1] < 1) {\n    return false;\n  }\n  if (days.length\
    \ > 2 && days[1] > 30) {\n    return false;\n  }\n  if (days.length > 2 && days[1]\
    \ < 1) {\n    return false;\n  }\n  if (days.length > 3 && days[2] > 29) {\n \
    \   return false;\n  }\n  if (days.length > 3 && days[2] < 1) {\n    return false;\n\
    \  }\n  for (let i = 0; i < months.length; i++) {\n    if (months[i] > 12) {\n\
    \      return false;\n    }\n  }\n  for (let i = 0; i < months.length; i++) {\n\
    \    if (months[i] < 1) {\n      return false;\n    }\n  }\n  let mm = months[0];\n\
    \  mm = mm.toString();\n  if (mm.length === 1) {\n    mm = '0' + mm;\n  }\n  let\
    \ dd = days[0];\n  if (dd.length === 1) {\n    dd = '0' + dd;\n  }\n  let yyyy\
    \ = date.slice(0, 4);\n  return yyyy + mm + '-' + dd;\n}\n", "  if (date == \"\
    \") return false;\n\n  const parts = date.split(\"-\");\n  const days: number\
    \ = parseInt(parts[2], 10);\n  let month: number = parseInt(parts[0], 10);\n\n\
    \  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (days > 31)\
    \ {\n    return false;\n  }\n\n  if (days > 30) {\n    return false;\n  }\n\n\
    \  if (days > 29) {\n    return false;\n  }\n\n  if (parts.length !== 3) {\n \
    \   return false;\n  }\n\n  if (parts[1] > 12) {\n    return false;\n  }\n\n \
    \ if (month > 12 && days > 31) {\n    return false;\n  }\n\n  return true;\n}\n",
  "  // 1. The date string is not empty.\n  if (date.length <= 0) {\n    return false;\n\
    \  }\n  // 2. The number of days is not less than 1 or higher than 31 days for\
    \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
    \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1\
    \ or higher than 29 for the month 2.\n  if (date.length < 3 || date.length > 30)\
    \ {\n    return false;\n  }\n  let year = 0;\n  let month = 0;\n  let day = 0;\n\
    \  let pattern = /^\\d{2}\\-\\d{2}\\-\\d{4}/;\n  if (pattern.test(date) === true)\
    \ {\n    let dateArray = date.split('-');\n    if (dateArray[0].length <= 0 ||\
    \ dateArray[1].length <= 0 || dateArray[2].length <= 0) {\n      return false;\n\
    \    }\n    month = parseInt(dateArray[0], 10);\n    day = parseInt(dateArray[1],\
    \ 10);\n    year = parseInt(dateArray[2], 10);\n  } else {\n    return false;\n\
    \  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1\
    \ || day > 31) {\n    return false;\n  }\n  if (month < 2 || month > 12) {\n \
    \   return false;\n  }\n  if (year % 400 === 0) {\n    if ((month < 7 && month\
    \ > 6) || (month > 8 && month < 11)) {\n      return false;\n    }\n  } else if\
    \ (year % 100 === 0) {\n    if ((month < 7 && month > 6) || (month > 8 && month\
    \ < 11)) {\n      return false;\n    }\n  } else if (year % 4 === 0) {\n    if\
    \ ((month < 7 && month > 6) || (month > 8 && month < 11)) {\n      return false;\n\
    \    }\n  } else {\n    if ((month < 7 && month > 6) || (month > 8 && month <\
    \ 11)) {\n      return false;\n    }\n  }\n  return true;\n}\n", "  if (date ===\
    \ null || date === undefined) {\n    return false;\n  }\n\n  var dayCount: number\
    \ = parseInt(date.substr(0, 2), 10);\n  var monthCount: number = parseInt(date.substr(2,\
    \ 2), 10);\n  var year: number = parseInt(date.substr(4, 4), 10);\n\n  if (dayCount\
    \ < 1 || dayCount > 31) {\n    return false;\n  }\n  if (monthCount < 1 || monthCount\
    \ > 12) {\n    return false;\n  }\n  if (year < 1 || year > 9999) {\n    return\
    \ false;\n  }\n\n  var dateFormat: string = \"mm-dd-yyyy\";\n  var dateArray:\
    \ Array<string> = date.split(\"-\");\n  var mm: string = dateArray[0];\n  var\
    \ dd: string = dateArray[1];\n  var yyyy: string = dateArray[2];\n\n  var isValid:\
    \ boolean;\n\n  // Test if date is valid month\n  if (monthCount === 1 || (monthCount\
    \ === 3 && mm === \"01\")) {\n    isValid = true;\n  } else if (monthCount ===\
    \ 4 || (monthCount === 6 && mm === \"04\")) {\n    isValid = true;\n  } else if\
    \ (monthCount === 7 || (monthCount === 9 && mm === \"06\")) {\n    isValid = true;\n\
    \  } else if (monthCount === 10 || (monthCount === 12 && mm === \"10\")) {\n \
    \   isValid = true;\n  } else {\n    return false;\n  }\n\n  // Test if date is\
    \ valid day\n  if (dayCount === 1 || (dayCount === 2 && dd === \"01\")) {\n  \
    \  isValid = true;\n  } else if (dayCount === 2 || (dayCount === 3 && dd === \"\
    02\")) {\n    isValid = true;\n  } else if (dayCount === 3 || (dayCount === 4\
    \ && dd === \"03\")) {\n    isValid = true;\n  } else if (dayCount === 4 || (dayCount\
    \ === 5 && dd === \"04\")) {\n    isValid = true;\n  } else if (dayCount === 5\
    \ || (dayCount === 6 && dd === \"05\")) {\n    isValid = true;\n  } else if (dayCount\
    \ === 6 || (dayCount === 7 && dd === \"06\")) {\n    isValid = true;\n  } else\
    \ if (dayCount === 7 || (dayCount === 8 && dd === \"07\")) {\n    isValid = true;\n\
    \  } else if (dayCount === 8 || (dayCount === 9 && dd === \"08\")) {\n    isValid\
    \ = true;\n  } else if (dayCount === 9 || (dayCount === 10 && dd === \"09\"))\
    \ {\n    isValid = true;\n  } else if (dayCount === 10 || (dayCount === 11 &&\
    \ dd === \"10\")) {\n    isValid = true;\n  } else if (dayCount === 11 || (dayCount\
    \ === 12 && dd === \"11\")) {\n    isValid = true;\n  } else if (dayCount ===\
    \ 12 || (dayCount === 13 && dd === \"12\")) {\n    isValid = true;\n  } else {\n\
    \    return false;\n  }\n\n  // Test if date is valid year\n  if (monthCount ===\
    \ 1 || (monthCount === 3 && mm === \"01\") || (monthCount ", "  const parts =\
    \ date.split('-');\n  // console.log(parts);\n  if (parts[0] === '0') return false;\n\
    \  if (parts.length !== 3 && parts.length !== 6) return false;\n  if (parts[1].length\
    \ === 1 && parts[1][0] === '0') return false;\n  if (parts[2].length === 1 &&\
    \ parts[2][0] === '0') return false;\n  if (parts[2].length < 2 || parts[2].length\
    \ > 2) return false;\n  if (parts[1].length < 2 || parts[1].length > 2) return\
    \ false;\n  return true;\n}\n", "\tlet invalid = false;\n\tlet checkMonth = date.split(\"\
    -\")[1];\n\tlet checkDay = date.split(\"-\")[2];\n\n\tif (\n\t\tcheckMonth > 12\
    \ ||\n\t\tcheckMonth < 1 ||\n\t\tcheckDay > 29 ||\n\t\tcheckDay < 1 ||\n\t\tcheckDay.charAt(0)\
    \ > 6 ||\n\t\tcheckDay.charAt(0) == 0 ||\n\t\tcheckDay.charAt(0) == 4 ||\n\t\t\
    checkDay.charAt(1) == 0 ||\n\t\tcheckDay.charAt(1) == 4 ||\n\t\tcheckDay.charAt(2)\
    \ > 4 ||\n\t\tcheckDay.charAt(2) == 0 ||\n\t\tcheckDay.charAt(2) == 6\n\t) {\n\
    \t\tinvalid = true;\n\t}\n\n\treturn !invalid;\n}\n", "\tlet dayMonthYear = date.split(\"\
    -\");\n\tlet day = dayMonthYear[0];\n\tlet month = dayMonthYear[1];\n\tlet year\
    \ = dayMonthYear[2];\n\n\tif (day.length === 0 || month.length === 0 || year.length\
    \ === 0) {\n\t\treturn false;\n\t}\n\n\tif (day.length === 1 || (day.length ===\
    \ 3 && month.length === 1 && year.length === 4)) {\n\t\treturn true;\n\t}\n\n\t\
    if (day.length === 2 || (day.length === 3 && month.length === 2 && year.length\
    \ === 4)) {\n\t\treturn true;\n\t}\n\n\tif (day.length === 3 || (day.length ===\
    \ 4 && month.length === 2 && year.length === 4)) {\n\t\treturn true;\n\t}\n\n\t\
    if (day.length === 4 || (day.length === 5 && month.length === 2 && year.length\
    \ === 4)) {\n\t\treturn true;\n\t}\n\n\tif (day.length === 6 || (day.length ===\
    \ 7 && month.length === 2 && year.length === 4)) {\n\t\treturn true;\n\t}\n\n\t\
    if (day.length === 7 || (day.length === 8 && month.length === 2 && year.length\
    \ === 4)) {\n\t\treturn true;\n\t}\n\n\tif (day.length === 8 || (day.length ===\
    \ 9 && month.length === 2 && year.length === 4)) {\n\t\treturn true;\n\t}\n\n\t\
    if (day.length === 10 || (day.length === 11 && month.length === 2 && year.length\
    \ === 4)) {\n\t\treturn true;\n\t}\n\n\tif (day.length === 11 || (day.length ===\
    \ 12 && month.length === 2 && year.length === 4)) {\n\t\treturn true;\n\t}\n\n\
    \tif (day.length === 12 || month.length === 2 && year.length === 4) {\n\t\treturn\
    \ true;\n\t}\n\n\tif (month.length === 1 && year.length === 4) {\n\t\treturn true;\n\
    \t}\n\n\tif (month.length === 2 || year.length === 4) {\n\t\treturn true;\n\t\
    }\n\n\tif (month.length === 3 || year.length === 4) {\n\t\treturn true;\n\t}\n\
    \n\tif (month.length === 4 || year.length === 4) {\n\t\treturn true;\n\t}\n\n\t\
    if (month.length === 5 || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif\
    \ (month.length === 6 || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length\
    \ === 7 || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length ===\
    \ 8 || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 9\
    \ || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 10\
    \ || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 11\
    \ || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 12\
    \ || year.length === 4) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 1 ||\
    \ year.length === 5) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 2 || year.length\
    \ === 5) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 3 || year.length ===\
    \ 5) {\n\t\treturn true;\n\t}\n\n\tif (month.length === 4 || year.length === 5)\
    \ {\n\t\treturn true;\n\t}\n\n\tif (month.length === 5 || year.length === 5) {\n\
    \t\treturn true;\n\t}\n\n\tif (month.length === 6 || year", "\tif (!date || typeof\
    \ date !== 'string') return false;\n\tlet dateParts = date.split('-');\n\tif (dateParts[0].length\
    \ > 1 || dateParts[1].length > 0 || dateParts[2].length > 0) {\n\t\treturn false;\n\
    \t}\n\tif (dateParts[0].length <= 2 || dateParts[1].length <= 2 || dateParts[2].length\
    \ <= 2) {\n\t\treturn false;\n\t}\n\tlet months = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11];\n\tlet days = getDays(dateParts[0], months);\n\tlet month = getMonth(dateParts[1],\
    \ months);\n\tlet year = dateParts[2];\n\tlet isYearValid = year.length > 0 &&\
    \ !Number.isNaN(parseInt(year, 10));\n\tlet isMonthValid = month > 0 && month\
    \ < 12 && !Number.isNaN(parseInt(month, 10));\n\tlet isDayValid = days >= 1 &&\
    \ days <= 31 && days < month && month < 12;\n\treturn isDayValid && isMonthValid\
    \ && isYearValid;\n}\n", "    if (date == null || date.trim().length === 0) {\n\
    \        return false;\n    }\n    const date_arr = date.split(\"-\");\n    if\
    \ (date_arr.length != 3) {\n        return false;\n    }\n    const dates = date_arr.map(item\
    \ => parseInt(item));\n    const days_diff = dates[1] - dates[0];\n    const months_diff\
    \ = dates[2] - dates[1];\n    const max_days = 31;\n    const max_months = 12;\n\
    \    const min_days = 1;\n    const min_months = 4;\n    const max_year = 2020;\n\
    \    let is_valid = true;\n    if (days_diff > max_days && months_diff > max_months)\
    \ {\n        is_valid = false;\n    }\n    if (days_diff < min_days && months_diff\
    \ < min_months) {\n        is_valid = false;\n    }\n    if (days_diff < 1 ||\
    \ months_diff < 1 || months_diff > max_months) {\n        is_valid = false;\n\
    \    }\n    if (dates[0] < 1 || dates[1] < 1 || dates[2] > max_year) {\n     \
    \   is_valid = false;\n    }\n    return is_valid;\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=jquery,javascript dscore=0 |>\n<code>\n<!DOCTYPE html>\n<html>\n<link rel=\"\
    stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\"\
    >\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\"\
    >\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"\
    ></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"\
    ></script>\n<body>\n\n<div class=\"col-md-4\" id=\"div1\">\n  <div style=\"margin-bottom:\
    \ 2%;\">\n    <input class=\"form-control date-range-picker\" type='text' name=\"\
    from\" id=\"from\" placeholder=\"From\" required/>\n  </div>\n</div>\n<div class=\"\
    col-md-4\" id=\"div2\">\n  <div style=\"margin-bottom: 2%;\">\n    <input class=\"\
    form-control date-range-picker\" type='text' name=\"to\" id=\"to\" placeholder=\"\
    To\" required/>\n  </div>\n</div>\n\n<script>\n$(document).ready(function() {\n\
    \  $(\"#from\").change(function() {\n    var from = $(\"#from\").val();\n    if(!from)\n\
    \    {\n      to = $(\"#to\").val();\n    }\n  });\n  $(\"#to\").change(function()\
    \ {\n    var to = $(\"#to\").val();\n    if(!to)\n    {\n      from = $(\"#from\"\
    ).val();\n    }\n  });\n});\n</script>\n</body>\n</html>\n</code>\n<|/ a |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c ", "    if (!date || date.length == 0) {\n        return false;\n\
    \    }\n    if (date.length < 6) {\n        return false;\n    }\n    if (date.length\
    \ < 8) {\n        return false;\n    }\n    var date = date.split(\"-\");\n  \
    \  var month: string = date[0];\n    var day: string = date[1];\n    var year:\
    \ string = date[2];\n    if (month.length < 1 || month.length > 12) {\n      \
    \  return false;\n    }\n    if (day.length < 1 || day.length > 31) {\n      \
    \  return false;\n    }\n    if (day.length < 1 || day.length > 30) {\n      \
    \  return false;\n    }\n    if (month.length < 1 || month.length > 12) {\n  \
    \      return false;\n    }\n    if (year.length < 4 || year.length > 9) {\n \
    \       return false;\n    }\n    if (year < \"2011\" || year > \"2100\") {\n\
    \        return false;\n    }\n    return true;\n}", "  var dayRegex = \"(?:1[0-2]|[1-9])\"\
    ;\n  var yearRegex = \"(?:19|20)\\\\d\";\n  var monthRegex = \"(?:1[012]|0?[1-9])\"\
    ;\n  var daysInMonthRegex = \"[1-9]\\\\d\";\n  var monthDayRegex = \"(?:0?[1-9]|1[0-2])\"\
    ;\n  var yearMonthRegex = \"(?:\" + yearRegex + \"-\" + monthRegex + \"-\" + dayRegex\
    \ + \")\";\n  var dateRegex = \"(?:\" + yearMonthRegex + \"|\" + daysInMonthRegex\
    \ + \")\";\n\n  if (!date) {\n    return false;\n  }\n\n  // 1. Make sure the\
    \ date string is not empty.\n  if (!date.length) {\n    return false;\n  }\n\n\
    \  // 2. Make sure the number of days is between 1 and 31.\n  if (/^([1-9]|[1-9]0)$/.test(date))\
    \ {\n    return daysInMonth >= 1 && daysInMonth <= 31;\n  }\n\n  // 3. If the\
    \ months aren't between 1 and 12, check if the number of days\n  // is between\
    \ 1 and 30. If it is, return false.\n  if (!(/^(1[0-2]|[1-9])$/.test(date))) {\n\
    \    return daysInMonth >= 1 && daysInMonth <= 30;\n  }\n\n  // 4. Check if the\
    \ month is between 1 and 12.\n  if (!(/^([1-9]|[1-9]0)$/.test(date))) {\n    return\
    \ monthsInMonth >= 1 && monthsInMonth <= 12;\n  }\n\n  // 5. Make sure the date\
    \ is in the right format.\n  var date = date.replace(/-/g, \"/\");\n  var year\
    \ = date.substr(0, 4);\n  var month = date.substr(4, 2);\n  var day = date.substr(6,\
    \ 2);\n  if (!year || !month || !day) {\n    return false;\n  }\n\n  // 6. Make\
    \ sure the year is between 1900 and 2099.\n  if (!(/^(19|20)\\d\\d$/.test(year)))\
    \ {\n    return false;\n  }\n\n  // 7. Make sure the month is between 1 and 12.\n\
    \  if (!(/^(1[0-2]|[1-9])$/.test(month))) {\n    return false;\n  }\n\n  // 8.\
    \ Make sure the day is between 1 and 29.\n  if (!(/^([1-9]|[1-9]0)$/.test(day)))\
    \ {\n    return false;\n  }\n\n  // 9. Check the date using the regex above to\
    \ ensure that the date is valid.\n  var dateRegex = new RegExp(date);\n  if (!dateRegex.test(date))\
    \ {\n    return false;\n  }\n\n  // 10. Make sure the date is greater than the\
    \ minimum date.\n  var minDate = new Date(1900, 0, 1);\n  var maxDate = new Date(2099,\
    \ 11, 31);\n  var minRegex = new RegExp(minDate.toString());\n  var maxRegex =\
    \ new RegExp(maxDate.toString());\n  if (!dateRegex.test(date)) {\n    return\
    \ false;\n  }\n\n  if (minRegex.test(date) || maxRegex.test(date)) {", "  // Write\
    \ your code here\n  return true\n}\n", "    if (date == null) {\n        return\
    \ false;\n    }\n    let splitted = date.split('-');\n    if (splitted.length\
    \ != 3) {\n        return false;\n    }\n    let dateString = splitted[0] + '-'\
    \ + splitted[1] + '-' + splitted[2];\n    let months = ['01', '03', '05', '07',\
    \ '08', '10', '12'];\n    for (let i = 0; i < months.length; i++) {\n        if\
    \ (dateString.indexOf(months[i]) != -1) {\n            return true;\n        }\n\
    \    }\n    if (dateString.indexOf('-') != -1) {\n        return false;\n    }\n\
    \    if (dateString.indexOf('/') != -1) {\n        return false;\n    }\n    let\
    \ year = splitted[2];\n    if (months.indexOf(months[0]) == 0) {\n        if (year\
    \ < 1 || year > 31) {\n            return false;\n        }\n    }\n    if (months.indexOf(months[1])\
    \ == 0) {\n        if (year < 1 || year > 30) {\n            return false;\n \
    \       }\n    }\n    if (months.indexOf(months[2]) == 0) {\n        if (year\
    \ < 1 || year > 29) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    if (!date.length || date.indexOf('-') < 1 || date.indexOf('/')\
    \ < 1 || date.indexOf(' ') < 1) return false;\n\n    var parts = date.split('-');\n\
    \n    if (parts.length != 3 || parts.length > 4 || parts.length != 2) return false;\n\
    \n    var day: string = parts[0];\n    var month: string = parts[1];\n    var\
    \ year: string = parts[2];\n\n    if (day.length < 1 || day.length > 31 || month.length\
    \ < 1 || month.length > 12 || month.length != 2 || day.length != 2) return false;\n\
    \n    if (year.length < 4 || year.length > 20 || year.length != 4 || month.length\
    \ < 1 || month.length > 12 || month.length != 2 || year.length != 4) return false;\n\
    \n    var monthVal: number = parseInt(month);\n\n    if (monthVal > 11 || monthVal\
    \ < 1 || monthVal > 12) return false;\n\n    var dayVal: number = parseInt(day);\n\
    \n    if (dayVal < 1 || dayVal > 31) return false;\n\n    var dateVal: number\
    \ = parseInt(year);\n\n    if (dateVal < 1000 || year.length > 4) year = '19'\
    \ + year;\n\n    if (dateVal > 9999) return false;\n\n    if (dateVal >= 1000\
    \ && dateVal <= 1999) return false;\n\n    return true;\n}\n\nvar date = new Date(\"\
    December 5, 1995 03:24:00\");\nconsole.log(date);\n\nvar date2 = new Date(\"1995\
    \ 11 12 04 25\");\nconsole.log(date2);\n\nvar date3 = new Date(\"1995-1-11-12\
    \ 04:25\");\nconsole.log(date3);\n\nvar date4 = new Date(\"1995-1-11-12 04:25:34\"\
    );\nconsole.log(date4);</code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=javascript,date\
    \ |>\n<code>\nDate.prototype.isDateValid = function (dateString) {\n    console.log(dateString)\n\
    \    if (dateString.length !== 10) return false;\n    const months = [\"January\"\
    , \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"];\n    const days = [\"\
    Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n    const monthNumber\
    \ = dateString.slice(0, 2);\n    const monthName = months[monthNumber - 1];\n\
    \    const dayNumber = dateString.slice(3, 5);\n    const dayName = days[dayNumber\
    \ - 1];\n    const year = dateString.slice(6, 10);\n    \n    if (monthNumber.length\
    \ !== 2 || dayNumber.length !== 2) return false;\n    if (monthNumber.length !==\
    \ 2 || monthNumber.length !== 2 || dayNumber.length !== 2 || year.length !== 4)\
    \ return false;\n\n    const date = new Date(`${monthName} ${dayNumber} ${year}`);\n\
    \    return date.getFullYear() === year && date.getMonth() === month", "    if(date\
    \ === null || date === \"\" || date === undefined) {\n        return false;\n\
    \    }\n    // Get the days and months.\n    const months = date.split(\"-\");\n\
    \    // Validate the dates.\n    const days = Number(months[2])-Number(months[0]);\n\
    \    const days_1 = Number(months[3])-Number(months[0]);\n    const days_2 = Number(months[4])-Number(months[0]);\n\
    \    const months_1 = Number(months[1])-Number(months[0]);\n    const months_2\
    \ = Number(months[2])-Number(months[0]);\n    // If invalid date string return\
    \ false.\n    if (days === 0 || days < 1 || days > 31 || months_1 < 0 || months_1\
    \ > 12 || months_2 < 0 || months_2 > 12) {\n        return false;\n    }\n   \
    \ // If invalid date string return false.\n    if (days === 0 && days_1 < 1 ||\
    \ days_1 > 31 || months_1 < 0 || months_1 > 12 || months_2 < 0 || months_2 > 12)\
    \ {\n        return false;\n    }\n    if (days_2 === 0 && days_1 < 1 || days_1\
    \ > 31 || months_1 < 0 || months_1 > 12 || months_2 < 0 || months_2 > 12) {\n\
    \        return false;\n    }\n    // If invalid date string return false.\n \
    \   if (days_2 === 0 && days_1 < 1 || days_1 > 31 || months_1 < 0 || months_1\
    \ > 12 || months_2 < 0 || months_2 > 12) {\n        return false;\n    }\n   \
    \ return true;\n}\n", "  if (date.length == 0) {\n    return false;\n  }\n  const\
    \ split = date.split('-');\n  if (split[1].length != 2) {\n    return false;\n\
    \  }\n  let num_days = 0;\n  let month = 0;\n  split.forEach(s => {\n    if (s.length\
    \ != 2) {\n      return false;\n    }\n    num_days += Number(s);\n  });\n  if\
    \ (num_days > 31 || num_days < 1) {\n    return false;\n  }\n  month += Number(split[0]);\n\
    \  if (month > 12) {\n    return false;\n  }\n  let year = Number(split[1]);\n\
    \  if (year < 1000 || year > 9999) {\n    return false;\n  }\n  return true;\n\
    }\n", "    return (!date || date == \"\" || isNaN(Date.parse(date))) ? false :\
    \ true;\n}\n\n", "    if (\n        !date ||\n        (date.match(/\\b/g) || []).length\
    \ !== 2 ||\n        (date.match(/-/g) || []).length !== 2 ||\n        (date.match(/T/g)\
    \ || []).length !== 6 ||\n        (date.match(/-/g) || []).length !== 6 ||\n \
    \       (date.match(/Z/g) || []).length !== 1 ||\n        (date.match(/[PM]?[AM]?/g)\
    \ || []).length !== 2 ||\n        (date.match(/\\d\\d/g) || []).length !== 2 ||\n\
    \        (date.match(/\\d\\d/g) || []).length !== 2\n    )\n        return false;\n\
    \n    let [d, m, y] = date.split(\"-\");\n    if (y.length === 0)\n        return\
    \ false;\n\n    const dLen = d.length;\n    let mLen = m.length;\n    let yLen\
    \ = y.length;\n    if (mLen !== 2 && mLen !== 6)\n        return false;\n    if\
    \ (dLen !== 2 && dLen !== 4)\n        return false;\n    if (dLen !== 0 && mLen\
    \ !== 0 && yLen !== 0)\n        return false;\n    if (mLen === 2 && dLen ===\
    \ 2)\n        return checkMonth(d[0]) && checkMonth(d[1]);\n    if (mLen === 6\
    \ && dLen === 4)\n        return checkMonth(d[0]) && checkMonth(d[1]) && checkMonth(d[2])\
    \ && checkMonth(d[3]);\n    if (mLen === 4 && dLen === 2)\n        return checkMonth(d[0])\
    \ && checkMonth(d[1]);\n    if (mLen === 2 && dLen === 4)\n        return checkMonth(d[0])\
    \ && checkMonth(d[1]) && checkMonth(d[2]) && checkMonth(d[3]);\n    if (mLen ===\
    \ 1 && dLen === 2)\n        return checkMonth(d[0]);\n    if (mLen === 1 && dLen\
    \ === 4)\n        return checkMonth(d[0]) && checkMonth(d[1]);\n\n    return false;\n\
    }\n", "  const m = date.match(/^(0[1-9]|[12]\\d|3[01])\\-(0[1-9]|1[012])\\-\\\
    d{4}$/);\n  if (!m) return false;\n  const dayNumber = new Date(m[3], m[2]-1,\
    \ m[1]).getDate();\n  const monthCount = new Date(m[3], m[2]-1, m[1]).getMonth();\n\
    \  const yearCount = new Date(m[3], m[2]-1, m[1]).getFullYear();\n  if (dayNumber\
    \ < 1 || dayNumber > 31) return false;\n  if (monthCount < 1 || monthCount > 12)\
    \ return false;\n  if (yearCount < 1 || (yearCount > 29 && monthCount > 3)) return\
    \ false;\n  return true;\n}\n", "  return !date_isEmpty(date) && days_not_less_than_1_or_higher_than_31(date)\
    \ && months_not_less_than_1_or_higher_than_12(date) && date_matches_my_format(date);\n\
    }\n", "    return !isEmpty(date) && !isNaN(new Date(date).getTime()) &&\n    \
    \    !(isNaN(new Date(date).getTime())) &&\n        (new Date(date).getTime()\
    \ <= (new Date().getTime()) + ONE_MONTH) &&\n        (new Date(date).getTime()\
    \ >= (new Date().getTime() - (ONE_DAY))) &&\n        (new Date(date).getMonth()\
    \ >= 1) &&\n        (new Date(date).getMonth() <= 12);\n}\n", "  if (!date ||\
    \ typeof date !== \"string\") {\n    return false;\n  }\n\n  const dateParts1\
    \ = date.split(\"-\");\n\n  if (dateParts1.length === 3) {\n    const [month,\
    \ day, year] = dateParts1;\n    if (\n      month.length < 1 || month.length >\
    \ 12 ||\n      day.length < 1 || day.length > 31 ||\n      parseInt(month) < 1\
    \ || parseInt(month) > 12 ||\n      parseInt(day) < 1 || parseInt(day) > 31 ||\n\
    \      year.length < 1 || year.length > 10\n    ) {\n      return false;\n   \
    \ }\n  }\n\n  const dateParts2 = date.split(\"/\");\n  if (dateParts2.length ===\
    \ 2) {\n    const [month, day] = dateParts2;\n    if (\n      month.length < 1\
    \ || month.length > 12 ||\n      day.length < 1 || day.length > 30 ||\n      parseInt(month)\
    \ < 1 || parseInt(month) > 12 ||\n      parseInt(day) < 1 || parseInt(day) > 29\n\
    \    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "    let today\
    \ = new Date().toISOString().substr(0, 10);\n    let d = new Date(date).toISOString().substr(0,\
    \ 10);\n    return (d === today);\n}\n", "    // Write the validation code here\n\
    \    date = date.trim();\n    const dateArray = date.split('-');\n    console.log(dateArray);\n\
    \    if (!dateArray[0].length || !dateArray[1].length || !dateArray[2].length\
    \ || dateArray[0].length < 1 || dateArray[1].length < 1 || dateArray[2].length\
    \ < 1 || dateArray[0] > 12 || dateArray[1] > 31 || dateArray[2] > 30 || dateArray[0]\
    \ > 30 || dateArray[1] > 29 || dateArray[2] > 29 || dateArray[0] < 1 || dateArray[1]\
    \ < 1 || dateArray[2] < 1) {\n        return false;\n    }\n    if (dateArray[2]\
    \ != 4 && dateArray[2] != 6 && dateArray[2] != 9 && dateArray[2] != 11 && dateArray[2]\
    \ != 12) {\n        return false;\n    }\n    if (dateArray[1] != 1 && dateArray[1]\
    \ != 3 && dateArray[1] != 5 && dateArray[1] != 7 && dateArray[1] != 8 && dateArray[1]\
    \ != 10 && dateArray[1] != 12) {\n        return false;\n    }\n    if (dateArray[0]\
    \ != 4 && dateArray[0] != 6 && dateArray[0] != 9 && dateArray[0] != 11 && dateArray[0]\
    \ != 12) {\n        return false;\n    }\n    if (dateArray[2] != 2 && dateArray[2]\
    \ != 3 && dateArray[2] != 5 && dateArray[2] != 7 && dateArray[2] != 8 && dateArray[2]\
    \ != 10 && dateArray[2] != 12) {\n        return false;\n    }\n    console.log(dateArray);\n\
    \    console.log(dateArray[0]);\n    console.log(dateArray[1]);\n    console.log(dateArray[2]);\n\
    \    const d = new Date(dateArray[0], dateArray[1] - 1, dateArray[2]);\n    console.log(d.getTime());\n\
    \    return true;\n}\n", "  if (date == \"\" || !(date.length > 2)) {\n    return\
    \ false;\n  }\n  let dateArray = date.split(\"-\");\n  let monthLength = dateArray[1].length;\n\
    \  let dayLength = dateArray[2].length;\n  let numberOfDays = dayLength + monthLength\
    \ - 1;\n  if (dateArray[0].length < 1 || dateArray[1].length < 1 || monthLength\
    \ < 1 || numberOfDays < 1 || numberOfDays > 31) {\n    return false;\n  }\n  if\
    \ (monthLength > 12) {\n    return false;\n  }\n  if (dateArray[0].length > 2\
    \ || dateArray[1].length > 2 || numberOfDays > 29) {\n    return false;\n  }\n\
    \  return true;\n}", "\tif (!date || !is_string(date)) return false;\n\tif (date.length\
    \ == 0) return false;\n\tif (date.length < 1 || date.indexOf(\"-\") < 1 || date.indexOf(\"\
    ,\") < 1 || date.indexOf(\"/\") < 1 || date.indexOf(\"\\\\\") < 1 || date.indexOf(\"\
    :\") < 1 || date.indexOf(\"@\") < 1 || date.indexOf(\"UTC\") < 1) return false;\n\
    \tif (date.length > 10 || date.indexOf(\"0\") != -1 || date.indexOf(\"/\") !=\
    \ -1 || date.indexOf(\"\\\\\") != -1 || date.indexOf(\":\") != -1 || date.indexOf(\"\
    @\") != -1 || date.indexOf(\"UTC\") != -1 || date.indexOf(\"-\") != -1 || date.indexOf(\"\
    ,\") != -1 || date.indexOf(\"0\") != -1) return false;\n\n\tconst dates = date.split(\"\
    -\");\n\tconst days = +dates[0];\n\tconst month = +dates[1];\n\tconst year = dates[2];\n\
    \n\tif (month < 1 || month > 12) return false;\n\tif (days > 31 || days < 1 ||\
    \ days > 30) return false;\n\tif (days > 29 && month != 2) return false;\n\tif\
    \ (month == 12 && days > 31 || month > 12) return false; // February has 29 days\n\
    \treturn true;\n}\n", "    if (date === \"\") return false;\n    let date1 = date.split(\"\
    -\");\n    let date2 = new Date(date1[2], date1[1] - 1, date1[0]);\n    return\
    \ (\n        date1.length === 3 &&\n        date2.getMonth() === 0 &&\n      \
    \  date2.getDate() > 1 &&\n        date2.getDate() < 31 &&\n        date2.getMonth()\
    \ > 0 &&\n        date2.getMonth() < 12 &&\n        date2.getFullYear() === date1[2]\
    \ &&\n        date2.getDate() > 0 &&\n        date2.getDate() < 29\n    );\n}\n",
  "    if (date.length == 0) {\n        return false;\n    }\n    var mm = date.substr(0,\
    \ 2);\n    var dd = date.substr(2, 2);\n    var yy = date.substr(4, 2);\n    if\
    \ (mm != '01' && mm != '03' && mm != '05' && mm != '07' && mm != '08' && mm !=\
    \ '10' && mm != '12') {\n        return false;\n    }\n    if (yy == '00' || yy\
    \ == '30') {\n        return false;\n    }\n    if (dd == '00' || dd == '30' ||\
    \ dd == '31') {\n        return false;\n    }\n    if (mm == '01' || mm == '03'\
    \ || mm == '05' || mm == '07' || mm == '08' || mm == '10' || mm == '12') {\n \
    \       if (yy == '00' || yy == '30') {\n            if (dd != '01' && dd != '30')\
    \ {\n                return false;\n            }\n        }\n        if (yy ==\
    \ '00') {\n            if (dd != '01' && dd != '31') {\n                return\
    \ false;\n            }\n        }\n        if (yy == '31') {\n            if\
    \ (dd == '00') {\n                return false;\n            }\n        }\n  \
    \  }\n    if (mm == '04' || mm == '06' || mm == '09' || mm == '11') {\n      \
    \  if (yy == '00') {\n            if (dd != '04' && dd != '06' && dd != '09' &&\
    \ dd != '11') {\n                return false;\n            }\n        }\n   \
    \     if (yy == '31') {\n            if (dd == '00') {\n                return\
    \ false;\n            }\n        }\n    }\n    if (mm == '04') {\n        if (yy\
    \ == '00') {\n            if (dd != '04') {\n                return false;\n \
    \           }\n        }\n        if (yy == '31') {\n            if (dd == '00')\
    \ {\n                return false;\n            }\n        }\n    }\n    if (mm\
    \ == '06') {\n        if (yy == '00') {\n            if (dd != '06') {\n     \
    \           return false;\n            }\n        }\n        if (yy == '31') {\n\
    \            if (dd == '00') {\n                return false;\n            }\n\
    \        }\n    }\n    if (mm == '09') {\n        if (yy == '00') {\n        \
    \    if (dd != '09') {\n                return false;\n            }\n       \
    \ }\n        if (yy == '31') {\n            if (dd == '00') {\n              \
    \  return false;\n            }\n        }\n    }\n    if (mm == '11') {\n   \
    \     if (yy == '00') {\n            if (dd != '11') {\n                return\
    \ false;\n            }\n        }\n        if (yy == '31') {\n            if\
    \ (dd == '00') {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\n", "    const mm = date.substr(6, 2);\n    const dd\
    \ = date.substr(3, 2);\n    const yyyy = date.substr(0, 4);\n\n    const month\
    \ = parseInt(mm, 10) - 1;\n    const day = parseInt(dd, 10);\n\n    if (month\
    \ < 1 || month > 12 || day < 1 || day > 31) {\n        return false;\n    }\n\n\
    \    const year = new Date().getFullYear();\n    if (month < 1 || month > 12 ||\
    \ day < 1 || day > 31 || (month == 2 && day > 29)) {\n        return false;\n\
    \    }\n    if (month == 2 && day > 29) {\n        return false;\n    }\n    if\
    \ (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12 && day > 30) {\n        return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        return true;\n \
    \   }\n    if (month == 2 && day > 28) {\n        return false;\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        return true;\n\
    \    }\n    if (month == 3 && day > 30) {\n        return false;\n    }\n    if\
    \ (month == 9 || month == 11) {\n        return true;\n    }\n    if (month ==\
    \ 9 || month == 11) {\n        return true;\n    }\n    if (month == 10 && day\
    \ > 30) {\n        return false;\n    }\n    if (month == 12 && day > 30) {\n\
    \        return false;\n    }\n    if (day > 29) {\n        return false;\n  \
    \  }\n    if (month == 2) {\n        return true;\n    }\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n        return true;\n    }\n  \
    \  if (month == 2) {\n        return true;\n    }\n    if (month == 3) {\n   \
    \     return true;\n    }\n    if (month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        return true;\n    }\n    if (month == 7) {\n\
    \        return true;\n    }\n    if (month == 8 || month == 10 || month == 12)\
    \ {\n        return true;\n    }\n    if (month == 1) {\n        return true;\n\
    \    }\n    if (month == 3 || month == 5 || month == 7 || month == 8 || month\
    \ == 10 || month == 12) {\n        return true;\n    }\n    if (month == 12) {\n\
    \        return true;\n    }\n    if (month == 1) {\n        return true;\n  \
    \  }\n    if (month == 3 || month == 5 || month == 7 || month == 8 || month ==\
    \ 10 || month == 12) {\n        return true;\n    }\n    if (month == 12) {\n\
    \        return true;\n    }\n    if (month == 9 || month == 11) {\n        return\
    \ true;\n    }\n    if (month == 9 || month == 11) {\n        return true;\n \
    \   }\n    if (month == 11) {\n        return true;\n    }\n    if (month == 12)\
    \ {\n        return true;\n    }\n    if (month == 1) {\n        return true;\n\
    \    }\n    return false;\n}\n", "\tlet result = false;\n\tconst date_splitted\
    \ = date.split('-');\n\tconst days_splitted = date_splitted[2].split(' ');\n\t\
    const months_splitted = date_splitted[0].split(' ');\n\n\t// If the number of\
    \ days is less than 1 or greater than 31 then return false else return true in\
    \ the next line\n\tlet num_days_splitted = days_splitted.length;\n\tnum_days_splitted\
    \ = num_days_splitted > 31 ? num_days_splitted : 1;\n\t\n\tlet num_months_splitted\
    \ = months_splitted.length;\n\tnum_months_splitted = num_months_splitted > 12\
    \ ? num_months_splitted : 1;\n\t\n\t// If months are less than 1 or greater than\
    \ 12 then return false else return true in the next line\n\tlet num_months = months_splitted.length;\n\
    \tnum_months = num_months > 12 ? num_months : 1;\n\t\n\t// if date is not null\
    \ and date string is not empty and the number of days is not less than 1 or greater\
    \ than 31 days and if the number of days is less than 1 or greater than 30 days\
    \ then return false else return true in the next line\n\tif (date != null && date_splitted\
    \ != null && date_splitted[0] != null && date_splitted[1] != null && days_splitted\
    \ != null && days_splitted.length != null && days_splitted.length != 0 && months_splitted\
    \ != null && months_splitted.length != 0 && num_months_splitted != null && num_months_splitted\
    \ != 0 && days_splitted.length > 1 && num_days_splitted > 31 && num_days_splitted\
    \ < 30 && months_splitted.length > 1 && num_months_splitted > 12 && num_months\
    \ < 12) {\n\t\tresult = true;\n\t}\n\treturn result;\n}\n", "    var parts = date.split(\"\
    -\");\n    var m = parts[0];\n    var d = parts[1];\n    var y = parts[2];\n \
    \   if (m.length != 2 || m.length > 3 || d.length != 2 || d.length > 2 || y.length\
    \ != 4 || y.length > 4) {\n        return false;\n    }\n    if (m <= 0) {\n \
    \       return false;\n    }\n    if (y >= 0 && y < 100) {\n        return true;\n\
    \    }\n    if (m > 12) {\n        return false;\n    }\n    if (m == 2 && d >\
    \ 29) {\n        return false;\n    }\n    if (m == 2 && d == 29 && y >= 0) {\n\
    \        return true;\n    }\n    if (m == 2 && d > 29 || m == 4 && d == 29 ||\
    \ m == 6 && d == 29) {\n        return false;\n    }\n    if (m == 2 && d > 31\
    \ || m == 4 && d == 31 || m == 6 && d == 31 || m == 9 && d == 31) {\n        return\
    \ false;\n    }\n    if (m == 3 && d > 30 || m == 6 && d == 30 || m == 9 && d\
    \ == 30) {\n        return false;\n    }\n    if (m == 3 && d > 28 || m == 6 &&\
    \ d == 28 || m == 9 && d == 28) {\n        return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI am sorry but I do not understand how to use this\
    \ piece of code. Could you please explain to me what is happening?\n<|/ c |>\n\
    <| c |>\nHey I added an example for you.\n<|/ c |>\n<| c |>\nThanks for your help.\
    \ This should help a lot\n<|/ c |>\n<| a tags=javascript dscore=1 |>\nThis function\
    \ will return the number of valid days for a given month.\n<code>", "  if (date\
    \ === \"\") {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n\
    \  const daysInMonth = getDaysInMonth(dateArray);\n  const isLeapYear = isLeapYear(dateArray);\n\
    \n  if (dateArray.length !== 3) {\n    return false;\n  }\n\n  const [month, day,\
    \ year] = dateArray;\n\n  if (month < 1 || month > 12 || day < 1 || day > daysInMonth)\
    \ {\n    return false;\n  }\n\n  if (month < 3 || month > 11) {\n    return false;\n\
    \  }\n\n  if (isLeapYear) {\n    if (day === 29) {\n      return true;\n    }\n\
    \    if (day === 29) {\n      return true;\n    }\n    if (day === 29) {\n   \
    \   return true;\n    }\n  }\n\n  if (day > 30) {\n    return false;\n  }\n\n\
    \  return true;\n}\n", "\tconst valid_date_regex = /^(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/;\n\treturn valid_date_regex.test(date);\n}", "  return !/^\\s*$/.test(date)\
    \ && \n    !!(/^(0[1-9]|[12]\\d|3[01])/.test(date) && // All month numbers in\
    \ the range 1 to 12\n      (/^(?:31|30|29)/.test(date) && date.length === 2 ||\
    \ // All month numbers in the range 1 to 31 but month number 2 does not exist\n\
    \        /^(?:1|3|5|7|8|10|12)$/.test(date) && date.length === 2)); // All date\
    \ values in the range 1 to 31\n}\n", "  const re = /^([0-9]{2}\\-){2}[0-9]{4}$/;\n\
    \  const matches = re.exec(date);\n  return matches && matches.length === date.length;\n\
    }\n", "    if (!date) return false\n    let valid = true\n    const parts = date.split(\"\
    -\")\n    if (parts[0] === \"\") valid = false\n    const months = parts[2].split(\"\
    -\")\n    if (months[0] === \"\") valid = false\n    const days = parts[1].split(\"\
    -\")\n    if (days[0] === \"\") valid = false\n    if (parts.length != 3) valid\
    \ = false\n    if (months.length != 3) valid = false\n    if (days.length != 3)\
    \ valid = false\n    if (months[0] > 12 || months[1] > 31 || (months[1] == 2 &&\
    \ months[1] != 30) || months[2] > 12) valid = false\n    return valid\n}\n", " \
    \   return !isEmpty(date) && getNumberOfDays(date) > 1 && getNumberOfDays(date)\
    \ < 31 && getMonthInNumber(date) > 1 && getMonthInNumber(date) < 12 && isDateInFormat(\"\
    MM-dd-yyyy\", date);\n}\n", "\treturn (\n\t\t!isEmpty(date)\n\t\t&&\n\t\tcheckMonthRange(date,\
    \ 1, 31, false)\n\t\t&&\n\t\tcheckMonthRange(date, 4, 29, false)\n\t\t&&\n\t\t\
    checkMonthRange(date, 2, 12, false)\n\t\t&&\n\t\tcheckDayRange(date, 2, 29, false)\n\
    \t\t&&\n\t\tcheckMonthRange(date, 1, 12, true)\n\t\t&&\n\t\tcheckMonthRange(date,\
    \ 1, 12, true)\n\t);\n}\n", "    let valid_date = true\n    if (date === \"\"\
    ) {\n        valid_date = false\n    } else if (\n        (date.length < 1) ||\n\
    \        (date.length > 31) ||\n        (date.indexOf(\"-\") > 0) ||\n       \
    \ (date.indexOf(\"/\") > 0) ||\n        (date.indexOf(\"+\") > 0)\n    ) {\n \
    \       valid_date = false\n    } else if (date.indexOf(\"-\") > -1) {\n     \
    \   if (date.length < 2) {\n            valid_date = false\n        } else if\
    \ (date.length < 3) {\n            valid_date = false\n        } else if (date.length\
    \ < 4) {\n            valid_date = false\n        } else if (date.length < 5)\
    \ {\n            valid_date = false\n        } else if (date.length < 6) {\n \
    \           valid_date = false\n        } else if (date.length < 7) {\n      \
    \      valid_date = false\n        } else if (date.length < 8) {\n           \
    \ valid_date = false\n        } else if (date.length < 10) {\n            valid_date\
    \ = false\n        } else if (date.length < 12) {\n            valid_date = false\n\
    \        } else {\n            valid_date = false\n        }\n    } else if (date.indexOf(\"\
    /\") > -1) {\n        if (date.length < 2) {\n            valid_date = false\n\
    \        } else if (date.length < 3) {\n            valid_date = false\n     \
    \   } else if (date.length < 4) {\n            valid_date = false\n        } else\
    \ if (date.length < 5) {\n            valid_date = false\n        } else if (date.length\
    \ < 6) {\n            valid_date = false\n        } else if (date.length < 7)\
    \ {\n            valid_date = false\n        } else if (date.length < 8) {\n \
    \           valid_date = false\n        } else if (date.length < 10) {\n     \
    \       valid_date = false\n        } else if (date.length < 12) {\n         \
    \   valid_date = false\n        } else {\n            valid_date = false\n   \
    \     }\n    } else if (date.indexOf(\"+\") < 0) {\n        if (date.length <\
    \ 2) {\n            valid_date = false\n        } else if (date.length < 3) {\n\
    \            valid_date = false\n        } else if (date.length < 4) {\n     \
    \       valid_date = false\n        } else if (date.length < 5) {\n          \
    \  valid_date = false\n        } else if (date.length < 6) {\n            valid_date\
    \ = false\n        } else if (date.length < 7) {\n            valid_date = false\n\
    \        } else if (date.length < 8) {\n            valid_date = false\n     \
    \   } else if (date.length < 10) {\n            valid_date = false\n        }\
    \ else if (date.length < 12) {\n            valid_date = false\n        } else\
    \ {\n            valid_date = false\n        }\n    } else {\n        let arr\
    \ = date.split(\"-\")\n        let d = arr[0]\n        let m = arr[1]\n      \
    \  let y = arr[2]\n        let month_days = getMonthDays(m, y)\n        if (month_days\
    \ >= 1 && month_days <= 31) {\n            valid_date = true\n        } else {\n\
    \            valid_date = false\n        }\n    }\n    return valid_date\n}\n",
  "    if (!date) {\n        return false;\n    }\n    // 1. The date string is not\
    \ empty.\n    if (!date.length) {\n        return false;\n    }\n    // 2. The\
    \ number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days is not less than 1 or higher than 30 days for months\
    \ 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the\
    \ month 2.\n    if (\n        date.getMonth() < 1 ||\n        date.getMonth()\
    \ > 12 ||\n        date.getDate() < 1 ||\n        date.getDate() > 31 ||\n   \
    \     date.getDate() !== date.getDate()\n    ) {\n        return false;\n    }\n\
    \    // 3. The months should not be less than 1 or higher than 12.\n    if (\n\
    \        date.getMonth() < 1 ||\n        date.getMonth() > 12 ||\n        date.getMonth()\
    \ !== date.getMonth()\n    ) {\n        return false;\n    }\n    // 4. The date\
    \ should be in the format: mm-dd-yyyy\n    const re = /^\\d{1,2}-\\d{1,2}-\\d{4}/;\n\
    \    if (re.test(date)) {\n        return true;\n    }\n    return false;\n}\n",
  "  return !isEmpty(date) &&\n    (!isNull(date) && !isNaN(date)) &&\n    (date.length\
    \ >= 6) &&\n    (checkDate(date)) &&\n    (checkMonth(date)) &&\n    (checkYear(date));\n\
    }\n", "  var months = ['January', 'February', 'March', 'April', 'May', 'June',\
    \ 'July', 'August', 'September', 'October', 'November', 'December'];\n  var d\
    \ = Date.parse(date);\n  return d !== null && !isNaN(d)\n    && d.getFullYear()\
    \ === parseInt(date.slice(0, 4)) && d.getMonth() === Number(months.indexOf(date.slice(4,\
    \ 6)));\n}\n", "  let dateArray = date.split(\"-\");\n  let dayArray = [1, 3,\
    \ 5, 7, 8, 10, 12];\n  let monthArray = [4, 6, 9, 11];\n  let daysInMonth = [31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let yearArray = [2000, 2004,\
    \ 2080, 2099, 2112, 2143, 2165, 2187, 2200, 2214, 2228, 2230];\n\n  for (let i\
    \ = 0; i < dateArray.length; i++) {\n    let val = parseInt(dateArray[i]);\n \
    \   if (val <= 0 || isNaN(val)) {\n      return false;\n    }\n  }\n\n  for (let\
    \ i = 0; i < dayArray.length; i++) {\n    if (dateArray[i] < 1 || dateArray[i]\
    \ > 31) {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < monthArray.length;\
    \ i++) {\n    if (dateArray[i] < 1 || dateArray[i] > 12) {\n      return false;\n\
    \    }\n  }\n\n  for (let i = 0; i < daysInMonth.length; i++) {\n    if (dateArray[i]\
    \ < 1 || dateArray[i] > daysInMonth[i]) {\n      return false;\n    }\n  }\n\n\
    \  for (let i = 0; i < yearArray.length; i++) {\n    if (dateArray[i] < 1 || dateArray[i]\
    \ > 21) {\n      return false;\n    }\n  }\n\n  return true;\n}\n", "    if(date\
    \ === \"\" || date === null){\n        return false;\n    }\n    let dateArray\
    \ = date.split('-');\n    let date = new Date(dateArray[2], parseInt(dateArray[0])\
    \ - 1, dateArray[1]);\n    if(dateArray.length == 2){\n        date = new Date(dateArray[0],\
    \ dateArray[1] - 1, dateArray[2]);\n    }else if(dateArray.length == 3){\n   \
    \     date = new Date(dateArray[2], dateArray[0] - 1, dateArray[1]);\n    }\n\
    \    let year: number = date.getFullYear();\n    let month: number = date.getMonth();\n\
    \    let date: number = date.getDate();\n    let maxDaysInMonth: number = [31,\
    \ 30][month];\n    return !(year < 1 || year > 9999 || month < 1 || month > 12\
    \ || date < 1 || date > maxDaysInMonth);\n}\n\n", "    if (!date) {\n        return\
    \ false;\n    }\n    const date_array = date.split(\"-\");\n    if (date_array.length\
    \ === 3) {\n        const day = parseInt(date_array[0]);\n        const month\
    \ = parseInt(date_array[1]);\n        const year = parseInt(date_array[2]);\n\
    \        if (day > 0 && day <= 31 && (month === 1 || month === 3 || month ===\
    \ 5 || month === 7 || month === 8 || month === 10 || month === 12) &&\n      \
    \      (year >= year && year <= year + 29)) {\n            return true;\n    \
    \    } else {\n            return false;\n        }\n    } else {\n        return\
    \ false;\n    }\n}", "\tlet year;\n\tlet month;\n\tlet day;\n\t\n\tconst regex\
    \ = /[0-9]{4}-[0-9]{2}-[0-9]{2}/;\n\tconst match = regex.exec(date);\n\tif (match)\
    \ {\n\t\tyear = match[0];\n\t\tmonth = match[1];\n\t\tday = match[2];\n\t} else\
    \ {\n\t\treturn false;\n\t}\n\n\tif (!year || !month || !day){\n\t\treturn false;\n\
    \t}\n\t\n\tconst months = [\n\t\t\"01\",\n\t\t\"02\",\n\t\t\"03\",\n\t\t\"04\"\
    ,\n\t\t\"05\",\n\t\t\"06\",\n\t\t\"07\",\n\t\t\"08\",\n\t\t\"09\",\n\t\t\"10\"\
    ,\n\t\t\"11\",\n\t\t\"12\",\n\t];\n\t\n\tconst daysMonths = [\n\t\t\"31\",\n\t\
    \t\"30\",\n\t\t\"29\",\n\t\t\"28\",\n\t\t\"27\",\n\t\t\"26\",\n\t\t\"25\",\n\t\
    \t\"24\",\n\t\t\"23\",\n\t\t\"22\",\n\t\t\"21\",\n\t\t\"20\",\n\t\t\"19\",\n\t\
    \t\"18\",\n\t\t\"17\",\n\t\t\"16\",\n\t\t\"15\",\n\t\t\"14\",\n\t\t\"13\",\n\t\
    \t\"12\",\n\t\t\"11\",\n\t\t\"10\",\n\t\t\"09\",\n\t\t\"08\",\n\t\t\"07\",\n\t\
    \t\"06\",\n\t\t\"05\",\n\t\t\"04\",\n\t\t\"03\",\n\t\t\"02\",\n\t\t\"01\",\n\t\
    ];\n\t\n\tconst daysYears = [\n\t\t\"365\",\n\t\t\"364\",\n\t\t\"363\",\n\t\t\"\
    362\",\n\t\t\"360\",\n\t\t\"358\",\n\t\t\"357\",\n\t\t\"356\",\n\t\t\"355\",\n\
    \t\t\"354\",\n\t\t\"353\",\n\t\t\"352\",\n\t\t\"351\",\n\t\t\"350\",\n\t\t\"349\"\
    ,\n\t\t\"348\",\n\t\t\"347\",\n\t\t\"346\",\n\t\t\"345\",\n\t\t\"344\",\n\t\t\"\
    343\",\n\t\t\"342\",\n\t\t\"341\",\n\t\t\"340\",\n\t\t\"339\",\n\t\t\"338\",\n\
    \t\t\"337\",\n\t\t\"336\",\n\t\t\"335\",\n\t\t\"334\",\n\t\t\"333\",\n\t\t\"332\"\
    ,\n\t\t\"331\",\n\t\t\"330\",\n\t\t\"329\",\n\t\t\"328\",\n\t\t\"327\",\n\t\t\"\
    326\",\n\t\t\"325\",\n\t\t\"324\",\n\t\t\"323\",\n\t\t\"322\",\n\t\t\"321\",\n\
    \t\t\"320\",\n\t\t\"319\",\n\t\t\"318\",\n\t\t\"317\",\n\t\t\"316\",\n\t\t\"315\"\
    ,\n\t\t\"314\",\n\t\t\"313\",\n\t\t\"312\",\n\t\t\"311\",\n\t\t\"310\",\n\t\t\"\
    309\",\n\t\t\"308\",\n\t\t\"307\",", "  return !(date.length === 0 ||\n    date.length\
    \ !== 10 ||\n    !is_valid_date_format() ||\n    !is_valid_date_format(date) ||\n\
    \    !is_valid_date_format(date, true));\n}\n", "  if (!date || date === \"\"\
    ) {\n    return false;\n  }\n  const dateArray = date.split(\"-\");\n  const dateArrayLength\
    \ = dateArray.length;\n  const monthsArray = [1, 3, 5, 7, 8, 10, 12];\n  const\
    \ daysArray = [1, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const minArray\
    \ = [1, 0, 0, 1];\n  const maxArray = [12, 31, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31];\n  if (dateArrayLength < 1 || dateArrayLength > 4) {\n    return false;\n\
    \  }\n  if (monthsArray.indexOf(dateArray[1]) < 1 || monthsArray.indexOf(dateArray[1])\
    \ > 12) {\n    return false;\n  }\n  if (daysArray.indexOf(dateArray[2]) < 1 ||\
    \ daysArray.indexOf(dateArray[2]) > maxArray[1]) {\n    return false;\n  }\n \
    \ if (dateArray[0].length < 1 || dateArray[0].length > 2) {\n    return false;\n\
    \  }\n  if (dateArray[0] === \"0\" || dateArray[0] === \"1\") {\n    return false;\n\
    \  }\n  return true;\n}\n", "    date = date.split(\"\");\n    if (date.length\
    \ < 3) {\n        return false;\n    }\n    let months: number[] = [0, 31, 59,\
    \ 90, 120, 151, 181, 212, 243, 273, 304, 334, 365, 1, 4, 6, 9, 11];\n    if (months.indexOf(+date[0])\
    \ < 0 || months.indexOf(+date[1]) < 0 || months.indexOf(+date[2]) < 0) {\n   \
    \     return false;\n    }\n    let days: number[] = [0, 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31];\n    if (days.indexOf(+date[0]) < 0 || days.indexOf(+date[1])\
    \ < 0 || days.indexOf(+date[2]) < 0) {\n        return false;\n    }\n    let\
    \ years: number[] = [1970, 1971, 1, 1972, 1970, 1971, 1, 1972, 1970, 1971, 1,\
    \ 1972, 1970, 1971, 1, 1972, 1970, 1971, 1, 1972, 1970, 1971, 1, 1972, 1970, 1971,\
    \ 1, 1972, 1970, 1971, 1, 1972, 1970, 1971];\n    if (years.indexOf(+date[3])\
    \ < 0 || years.indexOf(+date[4]) < 0 || years.indexOf(+date[5]) < 0) {\n     \
    \   return false;\n    }\n    if (+date.length !== 10) {\n        return false;\n\
    \    }\n    return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=date,javascript,validation\
    \ dscore=1 |>\nThe accepted answer does not fully address the OP's requirements,\
    \ and has a bug in it.\nThe code should really be this:\n<code>", "    let valid\
    \ = false;\n    const dateSplitted = date.split('-');\n    if (!dateSplitted.length\
    \ < 2) {\n        return valid;\n    }\n    const dateParts = dateSplitted.map(d\
    \ => {\n        const parts = d.split('');\n        if (parts.length != 2) {\n\
    \            return valid;\n        }\n        return parseInt(parts[0], 10) -\
    \ 1;\n    });\n    if (!dateParts[0]) {\n        return valid;\n    }\n    if\
    \ (!dateParts[1]) {\n        return valid;\n    }\n    const months = ['01', '03',\
    \ '05', '07', '08', '10', '12'];\n    if (months.indexOf(dateParts[1]) < 0 ||\
    \ months.indexOf(dateParts[2]) < 0) {\n        return valid;\n    }\n    if (dateParts[0]\
    \ > 12 || dateParts[0] < 1) {\n        return valid;\n    }\n    if (dateParts[1]\
    \ > 12 || dateParts[1] < 1) {\n        return valid;\n    }\n    if (dateParts[0]\
    \ > 30 && dateParts[0] < 31) {\n        return valid;\n    }\n    if (dateParts[1]\
    \ > 30 && dateParts[1] < 31) {\n        return valid;\n    }\n    if (dateParts[0]\
    \ > 29 && dateParts[0] < 31) {\n        return valid;\n    }\n    if (dateParts[1]\
    \ > 29 && dateParts[1] < 31) {\n        return valid;\n    }\n    if (dateParts[0]\
    \ > 0 && dateParts[0] < 31) {\n        return valid;\n    }\n    if (dateParts[1]\
    \ > 0 && dateParts[1] < 31) {\n        return valid;\n    }\n    return valid;\n\
    }", "  if (!date) {\n    return false;\n  }\n  var splitted = date.split('-');\n\
    \  splitted.shift();\n  var dateString = splitted.join('-');\n  var splitted =\
    \ dateString.split(' ');\n  splitted.shift();\n  var monthString = splitted.join('-');\n\
    \  var monthNumber = monthToNumber(monthString);\n  var numberOfDays = getDaysOfMonth(monthNumber);\n\
    \  var yearString = splitted.join('-');\n  var dateParts = yearString.split('-');\n\
    \  dateParts.pop();\n  var year = parseInt(dateParts.pop(), 10);\n  if (isNaN(year)\
    \ || year === 0) {\n    return false;\n  }\n  if (dateParts.length !== 3) {\n\
    \    return false;\n  }\n  var month = parseInt(dateParts[0], 10);\n  if (isNaN(month)\
    \ || month < 1 || month > 12) {\n    return false;\n  }\n  var day = parseInt(dateParts[1],\
    \ 10);\n  if (isNaN(day) || day < 1 || day > numberOfDays) {\n    return false;\n\
    \  }\n  return true;\n}\n", "  return date !== undefined && date !== null && valid_day(date)\
    \ && valid_month(date) && valid_year(date);\n}\n", "  var date = date.split('-');\n\
    \  if (date.length != 3) {\n    return false;\n  }\n  var checkDate = new Date(date[2],\
    \ date[1] - 1, date[0]);\n  if (isNaN(checkDate.getTime())) {\n    return false;\n\
    \  }\n  return true;\n}\n", "\tif (date === \"\") {\n\t\treturn false;\n\t}\n\t\
    let pattern = /^(0?[1-9]|[12][0-9]|3[01])[- /.](0?[1-9]|1[012])[- /.](19|20)\\\
    d\\d$/;\n\tlet match = date.match(pattern);\n\treturn (match !== null && match.length\
    \ === 7);\n}\n", "  const date = date.split(\"-\");\n  if (date.length === 1)\
    \ {\n    return false;\n  }\n  const num_days = +date[2];\n  const months = date[1].length;\n\
    \  if (isNaN(months)) {\n    return false;\n  }\n  // Months should not be less\
    \ than 1 or higher than 12.\n  if (months < 1 || months > 12) {\n    return false;\n\
    \  }\n  // Days should not be less than 1 or higher than 30.\n  if (num_days <\
    \ 1 || num_days > 30) {\n    return false;\n  }\n  // Check whether the date's\
    \ month is greater than or equal to 0 and less than or equal to 12.\n  if (months\
    \ >= 0 && months <= 12) {\n    // Check whether the date's number of days is greater\
    \ than or equal to 1 and less than or equal to 31.\n    if (num_days >= 1 && num_days\
    \ <= 31) {\n      // Check whether the date's number of days is greater than or\
    \ equal to 1 and less than or equal to 30.\n      if (num_days >= 1 && num_days\
    \ <= 30) {\n        // Check whether the date's number of days is greater than\
    \ or equal to 1 and less than or equal to 29.\n        if (num_days >= 1 && num_days\
    \ <= 29) {\n          // Check whether the date's month is greater than or equal\
    \ to 0 and less than or equal to 12.\n          if (months >= 0 && months <= 12)\
    \ {\n            return true;\n          }\n        }\n      }\n    }\n  }\n \
    \ return false;\n}\nconst dateFormatToRegExp = (dateFormat: string) => new RegExp(\n\
    \  `^${dateFormat.replace(/([yYmMdD])([jJ])([yY])/g, \"$1[$2$3$4]\")}$`\n);\n\
    const dateFormatToRegExpString = (dateFormat: string) =>\n  dateFormatToRegExp(dateFormat).toString();\n\
    export const createDateFormat = <InputFormat, OutputFormat>(\n  dateFormat: InputFormat\n\
    ): OutputFormat => {\n  // Check whether the input format matches the expected\
    \ format.\n  // If it does not match the format provided, the format of the date\
    \ will be returned as default.\n  if (dateFormatToRegExp(dateFormat).test(dateFormat))\
    \ {\n    return dateFormat;\n  }\n  return defaultDateFormat;\n};\nexport const\
    \ createDateFormatString = <InputFormat, OutputFormat>(\n  dateFormat: InputFormat\n\
    ): OutputFormat => {\n  // Check whether the input format matches the expected\
    \ format.\n  // If it does not match the format provided, the format of the date\
    \ will be returned as default.\n  if (dateFormatToRegExp(dateFormat).test(dateFormat))\
    \ {\n    return dateFormat;\n  }\n  return defaultDateFormat;\n};\nexport const\
    \ isValidDateFormat = (dateFormat: string) =>\n  dateFormatToRegExp(dateFormat).test(dateFormat);\n\
    export const isValidDateFormatString = (dateFormat: string) =>\n  dateFormatToRegExp(dateFormat",
  "  if (date === \"\") {\n    return false;\n  }\n  var dateArray = date.split('-');\n\
    \  if (dateArray.length < 3 || dateArray.length > 4) {\n    return false;\n  }\n\
    \  var months = dateArray[0].split('');\n  var days = dateArray[1].split('');\n\
    \  var years = dateArray[2].split('');\n\n  if (months.length < 1 || months.length\
    \ > 12 ||\n    days.length < 1 || days.length > 31 ||\n    years.length < 1 ||\
    \ years.length > 4) {\n    return false;\n  }\n  // if month is less than 1 ||\
    \ greater than 12\n  if (months[0] < 1 || months[0] > 12) {\n    return false;\n\
    \  }\n  // if day is less than 1 || greater than 31 days\n  if (days[0] < 1 ||\
    \ days[0] > 31) {\n    return false;\n  }\n  // if year is less than 1 || greater\
    \ than 4 years\n  if (years[0] < 1 || years[0] > 4) {\n    return false;\n  }\n\
    \  if (months[0] === 2 && days[0] >= 31) {\n    return false;\n  }\n  if (months[0]\
    \ === 3 && days[0] >= 31) {\n    return false;\n  }\n  if (months[0] === 4 &&\
    \ days[0] >= 30) {\n    return false;\n  }\n  if (months[0] === 5 && days[0] >=\
    \ 29) {\n    return false;\n  }\n  if (months[0] === 6 && days[0] >= 28) {\n \
    \   return false;\n  }\n  if (months[0] === 7 && days[0] >= 28) {\n    return\
    \ false;\n  }\n  if (months[0] === 8 && days[0] >= 28) {\n    return false;\n\
    \  }\n  if (months[0] === 9 && days[0] >= 28) {\n    return false;\n  }\n  if\
    \ (months[0] === 10 && days[0] >= 28) {\n    return false;\n  }\n  if (months[0]\
    \ === 11 && days[0] >= 28) {\n    return false;\n  }\n  if (months[0] === 12 &&\
    \ days[0] >= 28) {\n    return false;\n  }\n  return true;\n}\n", "    let d =\
    \ new Date(date);\n    if (d.getFullYear() < 1) {\n        return false;\n   \
    \ }\n    if (d.getFullYear() > 9999) {\n        return false;\n    }\n    if (d.getMonth()\
    \ + 1 < 1 || d.getMonth() + 1 > 12) {\n        return false;\n    }\n    if (d.getDate()\
    \ < 1 || d.getDate() > 31) {\n        return false;\n    }\n    return true;\n\
    }\n</code>\n<|/ a tags=date,regex,typescript dscore=0 |>\n<| c |>\nThank you so\
    \ much! But as I mentioned I am looking for regex solution only. Thanks anyways!\n\
    <|/ c |>\n<| a dscore=0 tags=date,regex,typescript |>\nTry this:\n<code>", " \
    \ if (date === \"\") {\n    return false;\n  }\n\n  if (date.length === 2) {\n\
    \    let [monthStr, dayStr] = date.split(\"-\");\n    if (monthStr.length !==\
    \ 2 || dayStr.length !== 2) {\n      return false;\n    }\n    let month = monthStr.charAt(0)\
    \ - 1;\n    let day = dayStr.charAt(0) - 1;\n    if (month < 1 || month > 12 ||\
    \ day < 1 || day > 31 || day > 30) {\n      return false;\n    }\n  }\n\n  if\
    \ (date.length === 4) {\n    let [monthStr, dayStr, yearStr] = date.split(\"-\"\
    );\n    if (monthStr.length !== 2 || dayStr.length !== 2 || yearStr.length !==\
    \ 4) {\n      return false;\n    }\n    let month = monthStr.charAt(0) - 1;\n\
    \    let day = dayStr.charAt(0) - 1;\n    let year = yearStr.charAt(0) - 1900;\n\
    \    if (month < 1 || month > 12 || day < 1 || day > 31 || day > 30 || year <\
    \ 1950 || year > 2040) {\n      return false;\n    }\n  }\n\n  return true;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nThe date validator from ng-bootstrap\
    \ might help you, it also comes with different date validations including required,\
    \ min, max, and pattern.\n<code>\n<div class=\"form-group\">\n  <label for=\"\
    exampleInputEmail1\">Email address</label>\n  <input type=\"email\" class=\"form-control\"\
    \ id=\"exampleInputEmail1\" placeholder=\"Email\" \n  required minlength=\"5\"\
    \ maxlength=\"50\">\n</div>\n</code>\n<|/ a tags=date,validation,angular,forms\
    \ |>\n<| a tags=date,validation,angular,forms |>\nI would suggest you to go through\
    \ this angular validation library and choose the best one for you\n<|/ a dscore=1\
    \ |>\n<| a tags=date,validation,angular,forms |>\n<code>", "  const date_regex\
    \ = /^(\\d+)-(\\d+)-(\\d+)$/\n  const [_, year, month1, month2, day] = date_regex.exec(date)\n\
    \n  if (year == null || month1 == null || month2 == null || day == null) {\n \
    \   return false\n  }\n\n  const { month, day } = _getDate(year, month1, month2)\n\
    \n  if (month == null || day == null) {\n    return false\n  }\n\n  return true\n\
    }\n", "  // Write your code here!\n}\n</cell>\n<cell>", "    // 1. Date should\
    \ not be empty.\n    if (!date) {\n        return false;\n    }\n\n    // 2. Number\
    \ days should not be less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
    \ And the number of days should not be less than 1 or higher than 30 days for\
    \ months 4,6,9,11. And, the number of days should not be less than 1 or higher\
    \ than 29 for the month 2.\n    const split = date.split('-');\n    const [day,\
    \ month, year] = split;\n    let isLeapYear = false;\n    let dateMonth = 0;\n\
    \    if (parseInt(month) === 0) {\n        dateMonth = 1;\n    } else if (parseInt(month)\
    \ === 1) {\n        dateMonth = 3;\n    } else if (parseInt(month) === 2) {\n\
    \        dateMonth = 5;\n    } else if (parseInt(month) === 3) {\n        dateMonth\
    \ = 7;\n    } else if (parseInt(month) === 4) {\n        dateMonth = 8;\n    }\
    \ else if (parseInt(month) === 5) {\n        dateMonth = 10;\n    } else if (parseInt(month)\
    \ === 6) {\n        dateMonth = 12;\n    } else if (parseInt(month) === 7) {\n\
    \        dateMonth = 1;\n        isLeapYear = true;\n    } else if (parseInt(month)\
    \ === 8) {\n        dateMonth = 4;\n        isLeapYear = true;\n    } else if\
    \ (parseInt(month) === 9) {\n        dateMonth = 6;\n        isLeapYear = true;\n\
    \    } else if (parseInt(month) === 10) {\n        dateMonth = 9;\n    } else\
    \ if (parseInt(month) === 11) {\n        dateMonth = 11;\n    } else {\n     \
    \   dateMonth = 0;\n    }\n    // console.log(dateMonth);\n    const dateYear\
    \ = parseInt(year);\n    const maxDaysInMonth = new Date(dateYear, dateMonth +\
    \ 1, 0).getDate();\n    if (day === '01' || day === '03' || day === '05' || day\
    \ === '07' || day === '08' || day === '10' || day === '12' || day === '02' ||\
    \ day === '04' || day === '06' || day === '09' || day === '11' || day === '01'\
    \ || day === '03' || day === '05' || day === '07' || day === '08' || day === '10'\
    \ || day === '12') {\n        return true;\n    } else if (day === '29') {\n \
    \       if (dateMonth === 2) {\n            return true;\n        }\n        if\
    \ (dateMonth === 4) {\n            return true;\n        }\n        if (dateMonth\
    \ === 6) {\n            return true;\n        }\n        if (dateMonth === 9)\
    \ {\n            return true;\n        }\n        if (dateMonth === 11) {\n  \
    \          return true;\n        }\n    }\n\n    if (month === '01' || month ===\
    \ '03' || month === '05' || month === '07' || month === '08' || month === '10'\
    \ || month === '12' || month === '02' || month === '04' || month === '06' || month\
    \ === '09' || month === '11' || month === '01' || month === '03' || month ===\
    \ '05' || month === '07' || month === '08' || month === '10' || month === '12')\
    \ {\n        return true;\n    } else if (month === '", "  const pattern = /^(0[1-9]|[12][0-9]|3[01])(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])(0[1-9]|[12][0-9]|30)$/;\n\
    \  const parts = date.match(pattern);\n  if(parts == null || parts.length < 7\
    \ || parts.length > 10) {\n    return false;\n  }\n  if(parts[4] > parts[5]) {\n\
    \    return false;\n  }\n  if(parts[2] > parts[3]) {\n    return false;\n  }\n\
    \  if(parts[1] > parts[2]) {\n    return false;\n  }\n  if(parts[1] > 12) {\n\
    \    return false;\n  }\n  return true;\n}\n", "  var parts = date.split(\"-\"\
    );\n  if(parts.length === 3 && parts.length !== 11){\n    return false;\n  }\n\
    \  var months = parts[2];\n  var months_array = months.split(\"-\");\n  if(months_array.length\
    \ === 12){\n    months_array.forEach(month => {\n      if(month > 12 || month\
    \ < 1){\n        return false;\n      }\n    });\n  }\n  return true;\n}\n", " \
    \ // Your code here\n}\n", "  if (\n    date === \"\" ||\n    date.trim() ===\
    \ \"\" ||\n    parseInt(date.split(\"-\")[2], 10) < 1 ||\n    parseInt(date.split(\"\
    -\")[2], 10) > 12 ||\n    parseInt(date.split(\"-\")[1], 10) < 1 ||\n    parseInt(date.split(\"\
    -\")[1], 10) > 31 ||\n    parseInt(date.split(\"-\")[0]) < 1 ||\n    parseInt(date.split(\"\
    -\")[0]) > 12\n  ) {\n    return false;\n  }\n  if (parseInt(date.split(\"-\"\
    )[0]) > parseInt(date.split(\"-\")[1])) {\n    return false;\n  }\n  if (parseInt(date.split(\"\
    -\")[0]) == parseInt(date.split(\"-\")[1])) {\n    if (\n      parseInt(date.split(\"\
    -\")[2]) < 1 ||\n      parseInt(date.split(\"-\")[2]) > 29\n    ) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n", "  if(date === \"\"){\n    return\
    \ false;\n  }\n  const day = getMonthAndYear(date);\n  const month = getMonth(date);\n\
    \  if(day === false || month === false){\n    return false;\n  }\n  if(month <\
    \ 1 || month > 12){\n    return false;\n  }\n  if(day < 1 || day > 31){\n    return\
    \ false;\n  }\n  if(month == 2){\n    if(day == 29){\n      return true;\n   \
    \ }\n  }\n  else if(month == 4) {\n    if(day == 30){\n      return true;\n  \
    \  }\n  }\n  else if(month == 6) {\n    if(day == 30){\n      return true;\n \
    \   }\n  }\n  else if(month == 9) {\n    if(day == 30){\n      return true;\n\
    \    }\n  }\n  else if(month == 11) {\n    if(day == 30){\n      return true;\n\
    \    }\n  }\n  return true;\n}\n", "  return date.length > 0 &&\n    (date.length\
    \ <= DATE_LENGTH_MIN + 1 || date.length <= DATE_LENGTH_MAX + 1 ) &&\n    validate_month(date)\
    \ &&\n    validate_date(date);\n}\n", "  if (date.length === 0) return false;\n\
    \  const dateParts = date.split(\"-\");\n  const daysInMonth = [0, 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (dateParts.length !== 3) return false;\n\
    \  const years = dateParts[0];\n  const months = dateParts[1];\n  const dates\
    \ = dateParts[2];\n  if (years.length === 0 || months.length === 0 || dates.length\
    \ === 0) return false;\n  if (years < 1 || years > 12) return false;\n  if (months\
    \ < 1 || months > 12) return false;\n  if (months === 2 || dates === \"01\") return\
    \ false;\n  if (months === 3 || dates === \"02/31\") return false;\n  if (months\
    \ === 4 || dates === \"03/31\") return false;\n  if (months === 5 || dates ===\
    \ \"04/30\") return false;\n  if (months === 7 || dates === \"05/31\") return\
    \ false;\n  if (months === 8 || dates === \"07/31\") return false;\n  if (months\
    \ === 8 || dates === \"08/31\") return false;\n  if (months === 8 || dates ===\
    \ \"09/30\") return false;\n  if (months === 8 || dates === \"10/31\") return\
    \ false;\n  if (months === 8 || dates === \"11/30\") return false;\n  if (months\
    \ === 8 || dates === \"12/31\") return false;\n  if (months === 9 || dates ===\
    \ \"01/01\") return false;\n  if (months === 10 || dates === \"01/02\") return\
    \ false;\n  if (months === 10 || dates === \"01/03\") return false;\n  if (months\
    \ === 11 || dates === \"01/04\") return false;\n  if (months === 11 || dates ===\
    \ \"01/05\") return false;\n  if (months === 11 || dates === \"01/06\") return\
    \ false;\n  if (months === 11 || dates === \"01/07\") return false;\n  if (months\
    \ === 11 || dates === \"01/08\") return false;\n  if (months === 11 || dates ===\
    \ \"01/09\") return false;\n  if (months === 11 || dates === \"01/10\") return\
    \ false;\n  if (months === 11 || dates === \"01/11\") return false;\n  if (months\
    \ === 11 || dates === \"01/12\") return false;\n  if (months === 12 || dates ===\
    \ \"02/01\") return false;\n  if (months === 12 || dates === \"02/02\") return\
    \ false;\n  if (months === 12 || dates === \"02/03\") return false;\n  if (months\
    \ === 12 || dates === \"02/04\") return false;\n  if (months === 12 || dates ===\
    \ \"02/05\") return false;\n  if (months === 12 || dates === \"02/06\") return\
    \ false;\n", "  let _date = new Date(date)\n  let _checkDate = function(_date:\
    \ string) {\n    let d = new Date(_date)\n    if (\n      _date.getFullYear()\
    \ <= 0 || _date.getFullYear() >= 9999 ||\n      _date.getMonth() < 1 || _date.getMonth()\
    \ > 12 ||\n      _date.getDate() < 1 || _date.getDate() > 31 ||\n      _date.getMonth()\
    \ === 2 && d.getDate() <= 29\n    ) {\n      return false\n    }\n    return true\n\
    \  }\n  if (!_date) return false\n  if (_date.getFullYear() <= 0 || _date.getFullYear()\
    \ >= 9999) {\n    return false\n  }\n  if (!_date.getMonth()) {\n    return false\n\
    \  }\n  if (_date.getMonth() < 1 || _date.getMonth() > 12) {\n    return false\n\
    \  }\n  if (_date.getDate() < 1 || _date.getDate() > 31) {\n    return false\n\
    \  }\n  if (_date.getMonth() === 2 && _date.getDate() <= 29) {\n    return false\n\
    \  }\n  return _checkDate(date)\n}\n", "    if (date.length == 0) {\n        return\
    \ false;\n    }\n    const splitted = date.split('-');\n    if (splitted.length\
    \ != 3) {\n        return false;\n    }\n    for (let i = 0; i < 12; i++) {\n\
    \        if (splitted[0] < 1 || splitted[0] > 31) {\n            return false;\n\
    \        }\n        if (splitted[1] < 1 || splitted[1] > 31) {\n            return\
    \ false;\n        }\n        if (splitted[2] < 1 || splitted[2] > 12) {\n    \
    \        return false;\n        }\n    }\n    let daysInMonth: any = [];\n   \
    \ for (let i = 0; i < splitted[1]; i++) {\n        daysInMonth[i] = splitted[0]\
    \ + 1;\n    }\n    if (daysInMonth[12] > splitted[2]) {\n        return false;\n\
    \    }\n    return true;\n}\n", "  let day = date.substr(0, 2);\n  let month =\
    \ date.substr(2, 2);\n  let year = date.substr(4, 4);\n\n  let num_days_month\
    \ = 0;\n  let days_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\
    \  let num_days_months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n\
    \  // validate the date\n  if (day.length == 0) {\n    alert(\"The date cannot\
    \ be empty\");\n    return false;\n  }\n\n  if (parseInt(day) < 1) {\n    alert(\"\
    The date must contain 1 day or more\");\n    return false;\n  }\n\n  if (parseInt(day)\
    \ > 31) {\n    alert(\"The date must contain 31 days\");\n    return false;\n\
    \  }\n\n  if (parseInt(month) < 1 || parseInt(month) > 12) {\n    alert(\"The\
    \ date must contain 1 month or more\");\n    return false;\n  }\n\n  if (parseInt(month)\
    \ > 12) {\n    alert(\"The date must contain 12 months\");\n    return false;\n\
    \  }\n\n  // validates the month\n  if (month < 1 || month > 12) {\n    alert(\"\
    The date must contain a valid month\");\n    return false;\n  }\n\n  // validates\
    \ the year\n  if (month == 2) {\n    if (parseInt(year) < 2000 || parseInt(year)\
    \ > 2099) {\n      alert(\"The date must be in the format mm-dd-yyyy\");\n   \
    \   return false;\n    }\n  } else if (month == 3) {\n    if (parseInt(year) <\
    \ 2000 || parseInt(year) > 2099) {\n      alert(\"The date must be in the format\
    \ mm-dd-yyyy\");\n      return false;\n    }\n  } else {\n    if (parseInt(year)\
    \ < 2000 || parseInt(year) > 2099) {\n      alert(\"The date must be in the format\
    \ mm-dd-yyyy\");\n      return false;\n    }\n  }\n\n  // validates the day in\
    \ the month\n  if (month < 3 || month > 3 && parseInt(day) > days_month[month\
    \ - 1]) {\n    alert(\"The date must contain \" + day + \" days\");\n    return\
    \ false;\n  }\n\n  if (month == 3 && day == 29) {\n    if (parseInt(year) < 2000\
    \ || parseInt(year) > 2099) {\n      alert(\"The date must be in the format mm-dd-yyyy\"\
    );\n      return false;\n    }\n  }\n\n  // validates the day in the year\n  if\
    \ (month < 3 || month > 3 && parseInt(day) > days_month[month - 1]) {\n    alert(\"\
    The date must contain \" + day + \" days\");\n    return false;\n  }\n\n  // validates\
    \ the day in the year\n  if (month == 3 && day == 29) {\n    if (parseInt(year)\
    \ < 2000 || parseInt(year) > 2099) {\n      alert(\"The date must be in the format\
    \ mm-dd-yyyy\");\n      return false;\n    }\n  }\n\n  // validates the day in\
    \ the year\n  if (month == 3 && day ", "  if(!date || date === \"\" || date.length\
    \ === 0 || valid_month(date) || valid_day(date) || valid_year(date) || valid_hour(date)\
    \ || valid_minutes(date) || valid_second(date)) {\n    return false;\n  }\n  return\
    \ true;\n}\n", "  if (date == null) return false;\n  return date.length === 10\
    \ &&\n    (date[0] === '0' || (date[30] === '0' && date[40] === '0'))\n    ? true\n\
    \    : false;\n}\n</code>\n<|/ a tags=javascript,datetime |>\n<| c |>\nThank you\
    \ so much for your help! Your code works like a charm for months that are higher\
    \ than 12, but when using the function for the months that don't exceed the 12\
    \ range the date is still considered valid. Any ideas why that might be?\n<|/\
    \ c |>\n<| c |>\nI updated the answer, I added `<` and `>` operators in `if-statement`\
    \ and it worked, please check.\n<|/ c |>\n<| c |>\nI updated my question, I have\
    \ added the function I used to validate a month. Would you mind taking a look\
    \ and seeing if you see anything that might cause the month to not be considered\
    \ valid? I have tested it for months with different ranges and it still returns\
    \ true for them no matter what.\n<|/ c |>\n<| c |>\nI added the validation function\
    \ to my question for clarification.\n<|/ c |>\n<| c |>\nI added my `valid_date`\
    \ function in my answer, check it.\n<|/ c |>\n<| a |>\nHere is a function which\
    \ checks whether a string represents a valid date. It does not take into account\
    \ the month and year to be correct. It simply checks if the string represents\
    \ a valid date. If not, it returns null.\n\n<code>", "    if (!date || !isString(date))\
    \ {\n        return false;\n    }\n\n    var daysInMonth = [0, 31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n    var dayMinMax = new Date(date.getFullYear(),\
    \ date.getMonth() + 1, 0).getDate();\n    var day = (date.getMonth() + 1).toString();\n\
    \n    if (day.length < 2) {\n        day = \"0\" + day;\n    }\n    if (dayMinMax\
    \ === 28 && daysInMonth[date.getMonth()] === date) {\n        return false;\n\
    \    }\n\n    if (dayMinMax >= daysInMonth[date.getMonth()]) {\n        return\
    \ false;\n    }\n\n    if (date.getDate() < 1 || date.getDate() >= dayMinMax)\
    \ {\n        return false;\n    }\n\n    if (!isString(date)) {\n        return\
    \ false;\n    }\n\n    var dateFormatted = date.split(\"-\");\n    var year: number\
    \ = parseInt(dateFormatted[0]);\n    var month: number = parseInt(dateFormatted[1]);\n\
    \    var day: number = parseInt(dateFormatted[2]);\n\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n\n    if (!(year >= 0 && year < 1000))\
    \ {\n        return false;\n    }\n\n    if (!(day >= 1 && day <= dayMinMax))\
    \ {\n        return false;\n    }\n\n    return true;\n}\n", "\tif (date.length\
    \ <= 0 || date.substr(0, 2) !== \"01\" ||\n\t\tdate.substr(2, 2) !== \"11\" ||\
    \ date.substr(4, 2) !== \"20\") {\n\t\treturn false;\n\t}\n\tlet d = date.split(\"\
    -\")\n\tif (d.length === 3) {\n\t\tif (d[1].length === 1 || d[1].length > 2 ||\
    \ d[2].length === 1 || d[2].length > 2 || d[0].length === 0 || d[0].length > 4)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tlet months = MONTHS.map(month => d[0].substr(0,\
    \ month.length))\n\t\tif (months.indexOf(d[1]) < 1 || months.indexOf(d[2]) < 1\
    \ || months.indexOf(d[0]) < 1) {\n\t\t\treturn false;\n\t\t}\n\t\tlet days = d[2].length\
    \ - 1\n\t\tif (d[2].charAt(d[2].length - 1) === \"0\") { days = d[2].length -\
    \ 2 }\n\t\tif (days < 1 || days > 31) { return false }\n\t\tlet months = MONTHS.map(month\
    \ => d[1].substr(0, month.length))\n\t\tif (months.indexOf(d[0]) < 1 || months.indexOf(d[1])\
    \ < 1 || months.indexOf(d[2]) < 1) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n", "    return !date.length || is_day_lesser_than_or_equal_to_31(date)\
    \ || is_day_greater_than_or_equal_to_30(date) || is_month_greater_than_or_equal_to_12(date)\
    \ || date_format(date, \"mm-dd-yyyy\");\n}\n", "  return !isEmpty(date) && !isNaN(Date.parse(date))\
    \ && date.getMonth() != 0 && date.getDate() == 1 && date.getFullYear() >= 1 &&\
    \ date.getFullYear() <= 12 && date.getMonth() >= 1 && date.getMonth() <= 12 &&\
    \ date.getDate() >= 1 && date.getDate() <= 31 && date.getDay() == 1 && date.getHours()\
    \ >= 0 && date.getHours() <= 23;\n}\n", "    const match = /(\\d{2})-(\\d{2})-(\\\
    d{4})/g.exec(date);\n    if (match === null)\n        return false;\n    const\
    \ [_, years, months, days] = match;\n    return years > 0 || months > 0 || days\
    \ > 0 || (months === 1 && days > 29);\n}\n", "    // Your code goes here!\n}\n",
  "  var parts = date.split('-');\n  var d = parts[0];\n  var m = parts[1];\n  var\
    \ y = parts[2];\n  if (d === '' || m < 1 || m > 12 || y < '1' && y > '31' || y\
    \ < '0' && y > '30' || y > '29' || y === '0' && y === '01' || y === '02' || y\
    \ === '03' || y === '04' || y === '05' || y === '06' || y === '07' || y === '08'\
    \ || y === '09' || y === '10' || y === '11' || y === '12' || y === '13' || y ===\
    \ '14' || y === '15' || y === '16' || y === '17' || y === '18' || y === '19' ||\
    \ y === '20' || y === '21' || y === '22' || y === '23' || y === '24' || y ===\
    \ '25' || y === '26' || y === '27' || y === '28' || y === '29' || y === '30' ||\
    \ y === '31') {\n    return false;\n  }\n  return true;\n}\n", "  if (date.length\
    \ == 0) {\n    return false;\n  }\n  if (date.indexOf('-') < 0) {\n    return\
    \ false;\n  }\n  var dateArr = date.split('-');\n  var day = dateArr[2];\n  var\
    \ month = dateArr[1] - 1;\n  if (month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if (day < 1 || day > 30) {\n    return false;\n  }\n  if (dateArr[1] <=\
    \ 2) {\n    if (day > 29) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n", "  const daysInMonth = daysInMonth(month(date), year(date));\n  const numberOfDays\
    \ = day(date);\n  const firstDayOfMonth = day(month(date));\n  const valid = !(\n\
    \    !isNull(date) && date.length > 0 && numberOfDays > 1 && numberOfDays <= 31\
    \ &&\n    firstDayOfMonth <= daysInMonth\n  );\n  return valid;\n}\n", "  date\
    \ = date.split(\"-\")\n  // If length is 1 then return false.\n  if (date.length\
    \ === 1 || date.length === 2 || date.length === 3 || date.length === 4) {\n  \
    \  return false\n  }\n\n  let mm = +date[0]\n  let dd = +date[1]\n\n  let mmDays\
    \ = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  let ddDays = [0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n  if (mm > 12 || mm < 1 || (dd\
    \ > mmDays[mm] || dd < ddDays[mm])) {\n    return false\n  }\n\n  if (dd > 31\
    \ || dd < 1 || mm > 12 || mm < 1 || mm > 12 || mm < 1) {\n    return false\n \
    \ }\n\n  return true\n}\n", "\tif (!date) {\n\t\treturn false;\n\t}\n\n\tconst\
    \ parts = date.split(\"-\");\n\tconst date = parts[0];\n\tconst month = Number(parts[1])\
    \ - 1;\n\n\tif (\n\t\t!date ||\n\t\t!Number.isInteger(month) ||\n\t\t(month <\
    \ 1 || month > 12) ||\n\t\t!/^\\d{2}$/.test(date)\n\t) {\n\t\treturn false;\n\t\
    }\n\n\tconst monthDays = {\n\t\t1: 31,\n\t\t3: 31,\n\t\t5: 31,\n\t\t7: 31,\n\t\
    \t8: 31,\n\t\t10: 31,\n\t\t12: 31,\n\t\t4: 30,\n\t\t6: 30,\n\t\t9: 30,\n\t\t11:\
    \ 30,\n\t\t2: 29,\n\t\t0: 29\n\t};\n\n\tconst currentMonthDays = monthDays[month];\n\
    \treturn (\n\t\tcurrentMonthDays >= 1 &&\n\t\tcurrentMonthDays <= 31 &&\n\t\t\
    (monthDays[month] !== 0 || monthDays[month - 1] !== 0)\n\t);\n}\n", "    if (!date\
    \ || !date.trim() || !date.match(/^\\d{1,2}-\\d{1,2}-\\d{4}/)) return false;\n\
    \    const splittedDate = date.split('-');\n    const dateArray = [splittedDate[0],\
    \ splittedDate[1], splittedDate[2]];\n    if (dateArray.length !== 3) return false;\n\
    \    if (!((dateArray[0] < 1) || (dateArray[0] > 12)) || (dateArray[2] < 1)) ||\
    \ (dateArray[2] > 29)) return false;\n    if (!((dateArray[1] < 1) || (dateArray[1]\
    \ > 12))) {\n        if (dateArray[1] < 1) return false;\n        if (dateArray[1]\
    \ > 12) return false;\n    }\n    return true;\n}\n</code>\n<|/ a dscore=2 tags=typescript,angular,angular6,javascript\
    \ |>\n<| a tags=typescript,angular,angular6,javascript |>\nTo validate dates in\
    \ angular:\n<code>\nimport { Component, VERSION } from '@angular/core';\nimport\
    \ { FormControl } from '@angular/forms';\nimport { FORM_DIRECTIVES } from '@angular/forms';({\n\
    \  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: [\
    \ './app.component.css' ]\n})\nexport class AppComponent  {\n  form: FormControl;\n\
    \n  constructor() {\n    this.form = new FormControl('', ['', [\n      Validators.required,\n\
    \      Validators.pattern('(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\\
    d\\d')\n    ]]);\n  }\n}\n</code>\nAnd in your html:\n<code>\n<form [formGroup]=\"\
    form\">\n  <input type=\"text\" formControlName=\"date\">\n</form>\n</code>\n\
    DEMO\n<|/ a dscore=1 |>\n<| a tags=typescript,angular,angular6,javascript |>\n\
    You can use ng-pattern=\"\" for validating date format in Angular.\nPlease take\
    \ a look on below example.\nhttps://codesandbox.io/s/angular-forked-1wjpj?file=/src/app/app.component.ts\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nYou can validate the date using two ways:\n\
    \nusing HTML5 attribute pattern with a regex pattern\nusing FormGroup control\
    \ to validate date using Validators.\n\nBelow are the code snippets:\nHTML:\n\
    <code>\n<div class=\"form-group\">\n      <label for=\"date\">Date</label>\n \
    \     <input type=\"date\" class=\"form-control\" id=\"date\" formControlName=\"\
    date\" [ngClass]=\"{'is-invalid' : dateForm.hasError('dateFormat')}\">\n     \
    \ <div *ngIf=\"dateForm.hasError('dateFormat')", "    if (!date) return false\n\
    \    const check = /^\\d+$/g\n    const isValid = /^\\d{1,2}-\\d{1,2}-\\d{4}$/g\n\
    \    return !check.test(date) && !isValid.test(date)\n}\n", "    const date_format\
    \ = \"mm-dd-yyyy\";\n    if (!date) {\n        return false;\n    }\n    let date\
    \ = date.split(\"-\");\n    if (date.length < 2 || !date[1] || !date[2]) {\n \
    \       return false;\n    }\n    let year = +date[2];\n    let months = date.length\
    \ > 3 ? date[3].split(\"-\") : [];\n    let days = date.length > 4 ? date[4].split(\"\
    -\") : [];\n    if (date[1] > 12 || date[1] < 1 || date[2] > 31 || date[2] < 1\
    \ || date[3] > 12 || date[3] < 1 || months.length != 3 || days.length != 3 ||\
    \ months[0] > 12 || months[0] < 1 || months[1] > 12 || months[1] < 1 || days[0]\
    \ > 31 || days[0] < 1 || days[1] > 30 || days[1] < 1) {\n        return false;\n\
    \    }\n    if (months[0] == months[1] && months[1] == months[2]) {\n        if\
    \ (days[0] == days[1] && days[1] == days[2]) {\n            months[0] = months[0]\
    \ + 1;\n        }\n    }\n    if (months[0] > 12 || months[0] < 1 || months[1]\
    \ > 12 || months[1] < 1) {\n        return false;\n    }\n    if (days[0] > 31\
    \ || days[0] < 1 || days[1] > 30 || days[1] < 1) {\n        return false;\n  \
    \  }\n    if (months[0] > 12) {\n        months[0] = months[0] - 12;\n    }\n\
    \    for (let i = 1; i < months.length - 1; i++) {\n        if (months[i] > 12\
    \ || months[i] < 1) {\n            return false;\n        }\n    }\n    for (let\
    \ i = 1; i < days.length; i++) {\n        if (days[i] > 31 || days[i] < 1) {\n\
    \            return false;\n        }\n    }\n    return true;\n}", "  if (date.length\
    \ == 0) {\n    return false;\n  }\n  const [m, d, y] = date.split('-');\n  const\
    \ daysInMonth = valid_days_in_month(y);\n  if (m > 12 || m <= 0 || m >= 13) {\n\
    \    return false;\n  }\n  if (m == 2 && d > daysInMonth) {\n    return false;\n\
    \  }\n  if (m == 3 && d > 29) {\n    return false;\n  }\n  if (m == 4 && d > 30)\
    \ {\n    return false;\n  }\n  return true;\n}\n", "  let isValid: boolean;\n\
    \  const dateString: string = date != null ? date : '';\n  const dateArray: string[]\
    \ = dateString.split(\"-\");\n  const numDays1: number = dateArray.length == 2\
    \ ? parseInt(dateArray[0]) : -1;\n  const numDays2: number = dateArray.length\
    \ == 2 ? parseInt(dateArray[1]) : -1;\n  const months1: number = dateArray.length\
    \ == 1 ? parseInt(dateArray[0]) : -1;\n  const months2: number = dateArray.length\
    \ == 2 ? parseInt(dateArray[1]) : -1;\n\n  if (dateString.length === 0) {\n  \
    \  isValid = false;\n  } else {\n    isValid = true;\n  }\n\n  if (isValid &&\
    \ numDays1 >= 1 && numDays1 <= 31 && (months1 >= 1 || months1 <= 12)) {\n    isValid\
    \ = true;\n  } else {\n    isValid = false;\n  }\n\n  if (isValid && numDays2\
    \ >= 1 && numDays2 <= 31 && (months2 >= 4 || months2 <= 12)) {\n    isValid =\
    \ true;\n  } else {\n    isValid = false;\n  }\n\n  if (isValid && (months2 ==\
    \ 4 && months2 == 0)) {\n    isValid = false;\n  }\n\n  return isValid;\n}\n",
  "    // 1. The date string is not empty.\n    if (date.length == 0) return false;\n\
    \n    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n    const months = date.split('-');\n    if (months.length\
    \ == 2 && months[0] != \"\" && months[1] != \"\") {\n        const date1 = new\
    \ Date(months[0]);\n        const date2 = new Date(months[1]);\n        if (date1.getTime()\
    \ > 31 * 86400000) {\n            return false;\n        }\n        if (date1.getTime()\
    \ < 86400000 || date2.getTime() > 30 * 86400000) {\n            return false;\n\
    \        }\n        if (date1.getTime() < date2.getTime()) {\n            return\
    \ false;\n        }\n    }\n\n    // 3. The months should not be less than 1 or\
    \ higher than 12.\n    if (months.length == 3 && months[0] != \"\" && months[1]\
    \ != \"\" && months[2] != \"\") {\n        const date1 = new Date(months[0]);\n\
    \        const date2 = new Date(months[1]);\n        const date3 = new Date(months[2]);\n\
    \        if (date1.getTime() > 12 * 86400000) {\n            return false;\n \
    \       }\n        if (date2.getTime() > 12 * 86400000) {\n            return\
    \ false;\n        }\n        if (date3.getTime() > 12 * 86400000) {\n        \
    \    return false;\n        }\n        if (date1.getTime() < date2.getTime() &&\
    \ date1.getTime() < date3.getTime()) {\n            return false;\n        }\n\
    \    }\n\n    // 4. The date should be in the format: mm-dd-yyyy\n    const regExp\
    \ = /\\b(1[012]|0?[1-9])-(0?[1-9]|[12][0-9]|3[01])-\\d{4}\\b/;\n    if (regExp.test(date))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThis works perfectly for the validation of mm-dd-yyyy, but\
    \ fails on mm-dd-yyy which gives true even when month is invalid.\n<|/ c |>\n\
    <| a tags=javascript,date |>\n<code>", "  if (date == \"\") {\n    return false;\n\
    \  }\n  let mm = date.substring(date.indexOf('-') + 1);\n  let dd = date.substring(0,\
    \ date.indexOf('-'));\n  if (mm == \"\") {\n    return false;\n  }\n  let y =\
    \ date.substring(date.indexOf('-') + 1, date.length - 1);\n  let daysInMonth =\
    \ [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  let days_count = daysInMonth[mm.substring(0,\
    \ mm.indexOf(','))];\n  if (mm.substring(0, mm.indexOf(',')) == 0) {\n    mm +=\
    \ \" 1\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 1) {\n    mm += \" 2\"\
    ;\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 2) {\n    mm += \" 3\";\n  }\n\
    \  if (mm.substring(0, mm.indexOf(',')) == 3) {\n    mm += \" 4\";\n  }\n  if\
    \ (mm.substring(0, mm.indexOf(',')) == 4) {\n    mm += \" 5\";\n  }\n  if (mm.substring(0,\
    \ mm.indexOf(',')) == 5) {\n    mm += \" 6\";\n  }\n  if (mm.substring(0, mm.indexOf(','))\
    \ == 6) {\n    mm += \" 7\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 7)\
    \ {\n    mm += \" 8\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 8) {\n\
    \    mm += \" 9\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 9) {\n    mm\
    \ += \" 10\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 10) {\n    mm +=\
    \ \" 11\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 11) {\n    mm += \"\
    \ 12\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 12) {\n    mm += \" 1\"\
    ;\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 13) {\n    mm += \" 2\";\n \
    \ }\n  if (mm.substring(0, mm.indexOf(',')) == 14) {\n    mm += \" 3\";\n  }\n\
    \  if (mm.substring(0, mm.indexOf(',')) == 15) {\n    mm += \" 4\";\n  }\n  if\
    \ (mm.substring(0, mm.indexOf(',')) == 16) {\n    mm += \" 5\";\n  }\n  if (mm.substring(0,\
    \ mm.indexOf(',')) == 17) {\n    mm += \" 6\";\n  }\n  if (mm.substring(0, mm.indexOf(','))\
    \ == 18) {\n    mm += \" 7\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) ==\
    \ 19) {\n    mm += \" 8\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 20)\
    \ {\n    mm += \" 9\";\n  }\n  if (mm.substring(0, mm.indexOf(',')) == 21) {\n\
    \    mm ", "    date = date.replace(/\\-/, \"/\");\n    // If all conditions above\
    \ are met, then\n    // date is a valid date string\n    if (date.length === 10\
    \ && !isNaN(new Date(date).getTime())) {\n        let months = [\"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\"];\n        let daysInMonth = [31, 29,\
    \ 31, 30, 31, 31, 30, 31, 30, 31];\n        let daysString = date.split(\"-\"\
    )[2];\n        let dayNum = daysString ? Number(daysString) : 1;\n        return\
    \ months.includes(date.split(\"-\")[1]) &&\n            dayNum > 1 && dayNum <=\
    \ daysInMonth[months.indexOf(date.split(\"-\")[1])] &&\n            dayNum > 1\
    \ && dayNum <= 30 &&\n            date.split(\"-\")[1] < 12\n    }\n    return\
    \ false;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you for the suggestion. But I want\
    \ to have just one function that can do the validation for me. \nAnd your solution\
    \ will always return false and I can't make it work if you enter a date that is\
    \ earlier than the current year.\n<|/ c |>\n<| c |>\nJust add the current year\
    \ to the date string and use my function to validate.\n<|/ c |>\n<| c |>\n`if\
    \ (valid_date(\"04-31-2020\") === true) {\n    console.log(\"Valid\");\n} else\
    \ {\n    console.log(\"Invalid\");\n}`\n<|/ c |>\n<| c |>\nBut how do i make the\
    \ current year to the date string? You see the code i have written is just to\
    \ check whether it is a valid date or not. I don't know how to get the current\
    \ year to make it a valid date string.\n<|/ c |>\n<| c |>\nPlease see the updated\
    \ answer. I added a function which returns the current year from the current date\
    \ object.\n<|/ c |>\n<| a tags=javascript |>\nUsing moment.js:\n<code>", "\treturn\
    \ !!date && !!date.length && valid_days(date) && valid_months(date) && valid_year(date);\n\
    }\n", "    if (!date || !date.length) return false;\n    let date_array = date.split(\"\
    -\");\n    if (date_array[0].length < 1 || date_array[1].length < 1 || date_array[2].length\
    \ < 1 || (date_array[0].length < 3 && date_array[1].length < 3 && date_array[2].length\
    \ < 3 && date_array[0].length > 0 && date_array[1].length > 0 && date_array[2].length\
    \ > 0 && date_array[0] > 12 && date_array[0] < 31) || (date_array[0].length <\
    \ 3 && date_array[1].length < 3 && date_array[2].length < 3 && date_array[0].length\
    \ > 0 && date_array[1].length > 0 && date_array[2].length > 0 && date_array[0]\
    \ > 12 && date_array[0] < 30 && date_array[1] > 12 && date_array[1] < 30 && date_array[2]\
    \ > 12 && date_array[2] < 30) || (date_array[0].length < 3 && date_array[1].length\
    \ < 3 && date_array[2].length < 3 && date_array[0].length > 0 && date_array[1].length\
    \ > 0 && date_array[2].length > 0 && date_array[0] > 12 && date_array[0] < 30\
    \ && date_array[1] > 12 && date_array[1] < 30 && date_array[2] > 12 && date_array[2]\
    \ < 30 && date_array[0] % 4 != 0 && date_array[1] % 4 != 0 && date_array[2] %\
    \ 4 != 0 && date_array[0] % 100 != 0 && date_array[1] % 100 != 0 && date_array[2]\
    \ % 100 != 0 && date_array[0] % 400 != 0 && date_array[1] % 400 != 0 && date_array[2]\
    \ % 400 != 0)) {\n        return false;\n    } else {\n        return true;\n\
    \    }\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not work for the cases\
    \ I described in the question. For example, for the date `04-03-2014` it returns\
    \ `true` when it should return `false`.\n<|/ c |>\n<| c |>\nThanks for the heads\
    \ up. I've updated the code based on your suggestions.\n<|/ c |>\n<| a dscore=1\
    \ |>\nHere is another solution that is based on the accepted answer's regular\
    \ expression and more generic.\n\n<code>", "  const months = [\"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\"];\n  const days = [\"01\", \"02\", \"\
    03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\"];\n\
    \  const isMonth = months.includes(date.slice(0, 2));\n  const isDay = days.includes(date.slice(3,\
    \ 5));\n\n  if (isMonth && isDay && date.length === 9) {\n    const d = new Date(date);\n\
    \    return d !== null;\n  }\n\n  return false;\n}", "  if (date === '') {\n \
    \   return false;\n  }\n  const dateArray = date.split('-');\n  dateArray[0] =\
    \ parseInt(dateArray[0], 10);\n  dateArray[1] = parseInt(dateArray[1], 10);\n\
    \  const monthsDiff = dateArray[0] - 1;\n  const dateArrayLength = (dateArray[1]\
    \ - 1) * 31 + 1;\n  const daysDiff = dateArray[1] - 30;\n  const dateArrayLengthMinusOne\
    \ = (dateArrayLength - 1) * 30 + 1;\n  const daysMinus30 = dateArrayLengthMinusOne\
    \ - 30;\n  const dateMinusOneMonth = dateArray[1] - 1;\n\n  let isValid = false;\n\
    \  if (monthsDiff > 0 || monthsDiff === 0 && dateArrayLength > 0 &&\n    dateArray[0]\
    \ > 0 && dateArray[1] > 0) {\n    if (monthsDiff > 0 && monthsDiff < 12 && dateArrayLength\
    \ > 0 &&\n      dateArray[0] > 0 && dateArray[1] > 0) {\n      if (daysDiff >\
    \ 0 && daysDiff < 31 &&\n        dateArrayLengthMinusOne > 0 && dateArrayLengthMinusOne\
    \ < 30) {\n        if (dateMinusOneMonth > 0 && dateMinusOneMonth <= 12) {\n \
    \         isValid = true;\n        }\n      }\n    }\n  }\n\n  return isValid;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
