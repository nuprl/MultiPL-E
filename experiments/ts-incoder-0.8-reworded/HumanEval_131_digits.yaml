name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["  var sum = 0;\n  while (n) {\n    sum += n % 2 === 0 ? n / 2 : n %\
    \ 2;\n    n = Math.floor(n / 2);\n  }\n  return sum;\n}\n", "    let result =\
    \ 1;\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 1) {\n        \
    \    result *= 10;\n        }\n        result *= n % 10;\n    }\n    return result;\n\
    }\n", "  let product = 1;\n  for (let i = 0; i < n; i += 1) {\n    const digit\
    \ = n % 10;\n    if (digit % 2 === 0) {\n      product *= digit;\n    }\n  }\n\
    \  return product;\n}\n", "  n = n.toString();\n  const nums = n.split('');\n\
    \  let product = 1;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]\
    \ === '1') {\n      product *= 2;\n    } else {\n      product *= 1;\n    }\n\
    \  }\n  return product;\n}\n", "  let prod = 0\n  while (n) {\n    if (n % 2 ===\
    \ 1) return 0\n    prod = prod * 10\n    n = Math.floor(n / 10)\n  }\n  return\
    \ prod\n}\n", "  var result = 1\n  while (n) {\n    result *= n % 2\n    n--\n\
    \  }\n  return result\n}\n", "  if (n < 0) return 0;\n  let n1 = n % 10;\n  if\
    \ (n1 == 0) return 0;\n  let n2 = n % 100;\n  if (n2 == 0) return 0;\n  return\
    \ (n1 * 10 + n2) % 10 * 10;\n}\n", "  const str: string = n.toString();\n  const\
    \ digits: string[] = [];\n  for (let i = 0; i < str.length; i++) {\n    const\
    \ [digit, ...rest] = str.substr(i, 1);\n    digits.push(digit);\n  }\n  return\
    \ digits\n    .filter((digit: string, index: number) => index % 2 === 1)\n   \
    \ .reduce((prev: string, curr: string) => prev + curr, 1);\n}\n", "  if (n < 0)\
    \ return 0\n  if (n < 9) return 1\n  if (n < 15) return 9\n  if (n < 23) return\
    \ 15\n  if (n < 30) return 21\n  if (n < 35) return 28\n  if (n < 45) return 36\n\
    \  if (n < 55) return 45\n  if (n < 60) return 55\n  if (n < 70) return 61\n \
    \ if (n < 85) return 70\n  if (n < 90) return 75\n  if (n < 95) return 80\n  if\
    \ (n < 100) return 90\n  return (n == 0) ? 0 : -1\n}\n", "  let result = 1;\n\
    \  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      result = result\
    \ * i;\n    }\n  }\n  return result;\n}\n", "\tlet r = 0;\n\tfor (let i = 1; i\
    \ <= n; i++) {\n\t\tr = (r * i) % 10;\n\t}\n\treturn r;\n}\n", "    let digits\
    \ = 1\n    while (n > 9) {\n        if (n % 2 === 1) {\n            digits = 0\n\
    \        } else {\n            digits = digits * 10\n        }\n        n = Math.floor(n\
    \ / 10)\n    }\n    return digits\n}\n", "  let i = 0;\n  let result = 0;\n  while\
    \ (i < n) {\n    if (n % 2 === 0) {\n      result += 1;\n    }\n    n /= 2;\n\
    \    i++;\n  }\n  return result;\n}\n", "  if (n <= 0) return 0;\n\n  // We use\
    \ an explicit test to see if the number is a positive integer,\n  // since a number\
    \ can contain non-integer digits.\n  if (Math.floor(n) !== n) return 0;\n\n  //\
    \ If the number is even, there can be no odd digits (since the number\n  // is\
    \ positive).\n  if (n % 2 === 0) return 0;\n\n  // Get the number of digits of\
    \ n.\n  const digits = Math.floor(Math.log(n) / Math.LN2);\n\n  // Get the first\
    \ digit of n.\n  const digit = Math.floor(n);\n\n  // Get the number of digits\
    \ of the number minus one.\n  const digitMinusOne = digits - 1;\n\n  // Get the\
    \ last digit of n.\n  const digitLast = n - ((n - digit) * (digitMinusOne + 1));\n\
    \n  let ans = 0;\n  // Calculate the next multiple of 5.\n  for (let i = digit;\
    \ i > 0; i -= 5) {\n    ans += Math.floor(digitLast / i) * i;\n  }\n\n  // Add\
    \ the remaining digits if the number is odd.\n  if (digits > 1) {\n    for (let\
    \ i = digitMinusOne; i >= 0; i -= 5) {\n      ans += Math.floor(digitLast / i)\
    \ * i;\n    }\n  }\n\n  return ans;\n}\n", "  let ans: number = 0;\n  for (let\
    \ i = 2; i <= n; i+=2) {\n    ans += n;\n  }\n  return ans;\n}\n", "    let result\
    \ = 0;\n    while (n) {\n        if (n % 2 === 1) {\n            result += 1;\n\
    \        }\n        n = Math.floor(n / 2);\n    }\n    return result;\n}\n", " \
    \   if (n === 0) return 0;\n    let res = 0;\n    for (let i = 0; i < Math.ceil(Math.log2(n)\
    \ + 1); i++) {\n        res  += n % 10 + (i === Math.ceil(Math.log2(n))) ? 1 :\
    \ 0;\n        n /= 10;\n    }\n    return res;\n}\n", "  let total = 1;\n  while\
    \ (n > 0) {\n    total *= n % 10;\n    n /= 10;\n  }\n  return total;\n}\n", " \
    \ // return Math.pow(10, Math.floor(Math.log(n) / Math.LN10 + 0.00000000001));\n\
    \  let ret = 0;\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 0) {\n   \
    \   ret *= 2;\n    } else {\n      ret *= 3;\n    }\n  }\n  return ret;\n}\n",
  "  if (n < 10) return 1;\n  if (n < 100) return n * 2;\n  if (n < 1000) return n\
    \ * n * 3;\n  if (n < 10000) return n * n * 3 * 5;\n}\n", "\tif (n < 0) return\
    \ 0;\n\tlet result = 0;\n\twhile (n) {\n\t\tresult = result * 10 + n % 10;\n\t\
    \tn = Math.floor(n / 10);\n\t}\n\treturn result;\n}\n", "  let r = 0;\n  const\
    \ m = Math.floor(n / 10) - 1;\n  for (let i = m; i >= 0; i--) {\n    r = r * 10\
    \ + n % 10;\n    n /= 10;\n  }\n  return r * m;\n}\n", "  if (n <= 1) return 0\n\
    \  return n * digits(Math.floor(n / 2)) * digits(n / 2)\n}\n", "  let digits:\
    \ number = 0;\n  while (n > 0 && digits.length <= MAX_DIGITS) {\n    digits *=\
    \ 2;\n    if (n % 2) {\n      digits++;\n    }\n    n /= 2;\n  }\n  return digits;\n\
    }\n", "  return Array(n + 1).fill().reduce(\n    (prev, cur) => (prev % 2 ? prev\
    \ * cur % 2 : 0) + cur,\n    0\n  );\n}\n", "  if (n < 0) return 0\n  if (n >\
    \ 100) return 0\n  if (n === 0) return 0\n  if (n < 9) return 9\n  if (n < 26)\
    \ return 26\n  if (n < 70) return 70\n  return n\n}\n", "  if (n < 0) return 0;\n\
    \n  let digits = 0;\n  const factor = 1;\n  while (n > 0 && digits < MAX_DIGITS)\
    \ {\n    n /= factor;\n    digits++;\n    factor *= 10;\n  }\n  if (n != 1 &&\
    \ n % 10 == 0) digits++;\n  return digits <= MAX_DIGITS ? digits : 0;\n}\n", " \
    \ if (n < 10) return 1;\n  if (n < 100) return 2;\n  if (n < 1000) return 3;\n\
    \  if (n < 10000) return 4;\n  if (n < 100000) return 5;\n  if (n < 1000000) return\
    \ 6;\n  if (n < 10000000) return 7;\n  if (n < 100000000) return 8;\n  if (n <\
    \ 1000000000) return 9;\n  if (n < 10000000000) return 10;\n  if (n < 100000000000)\
    \ return 11;\n  if (n < 1000000000000) return 12;\n  if (n < 10000000000000) return\
    \ 13;\n  if (n < 100000000000000) return 14;\n  if (n < 1000000000000000) return\
    \ 15;\n  return 16;\n}\n", "  let product = 1;\n  while (n > 0) {\n    product\
    \ *= n % 10;\n    n /= 10;\n  }\n  return product;\n}\n", "  let result = 0\n\
    \  while (n) {\n    result += n % 10\n    n = Math.floor(n / 10)\n  }\n  return\
    \ result\n}\n", "    return Number(n) * ODD;\n}\n", "  let nStr = n.toString();\n\
    \  let digits = nStr.split('');\n  let oddDigits = digits.filter(d => d.charCodeAt(0)\
    \ % 2 === 1);\n  return oddDigits.length === 0 ? 0 : parseInt(oddDigits.join(''));\n\
    }\n", "  let result = 0;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      result\
    \ += 1;\n    }\n    n /= 2;\n  }\n  return result;\n}\n", "  let sum = 0;\n  let\
    \ temp = 0;\n  while (n) {\n    temp = n % 10;\n    sum += temp * temp;\n    n\
    \ /= 10;\n  }\n  return sum;\n}\n</code>\n<|/ a tags=javascript dscore=2 |>\n\
    <| c |>\nI like this better than the other answers, because it keeps the digits\
    \ in a single variable. That's an important thing to keep in mind when working\
    \ with digits and multiplication.\n<|/ c |>\n<| c |>\nThank you. This solution\
    \ is more elegant than mine :)\n<|/ c |>\n<| a tags=javascript |>\nA simple solution\
    \ would be to use a recursive function, something like:\n\n<code>", "  let res\
    \ = 0\n  for (let i = n, i2 = n; i > 0; i--, i2 = n / 2) {\n    res = res * 10\
    \ + (i2 % 2 ? i : 0)\n  }\n  return res\n}\n", "  if (n < 10) return 1;\n  if\
    \ (n < 100) return 2;\n  if (n < 1000) return 3;\n  if (n < 10000) return 4;\n\
    \  if (n < 100000) return 5;\n  if (n < 1000000) return 6;\n  if (n < 10000000)\
    \ return 7;\n  if (n < 100000000) return 8;\n  if (n < 1000000000) return 9;\n\
    \  return 0;\n}\n", "  let res = 1;\n  while (n) {\n    if (n % 2 == 1) {\n  \
    \    res = 0; // odd so res is even\n    }\n    n = n / 2; // divide by 2\n  }\n\
    \  return res;\n}\n", "  let odd = n % 2;\n  n /= 2;\n  return n - (n % 2) * odd;\n\
    }\n", "  let m = n % 10;\n  if (m < 1 || m > 3) {\n    return 0;\n  }\n  if (n\
    \ === 1) {\n    return 1;\n  }\n  if (n === 3) {\n    return 9;\n  }\n  if (n\
    \ === 5 || n === 7) {\n    return 1;\n  }\n  if (n === 9) {\n    return 5;\n \
    \ }\n  return digits(n / 10) * digits(n % 10);\n}\n", "\tn = +n;\n\tif (n ===\
    \ 0 || n !== n) return 0;\n\tlet sum = 1;\n\twhile (n > 0) {\n\t\tsum += n % 2\
    \ ? 9 : 1;\n\t\tn /= 2;\n\t}\n\treturn sum;\n}\n", "  if (n < 10) return 1;\n\
    \  if (n < 100) return 4;\n  if (n < 1000) return 3;\n  if (n < 10000) return\
    \ 7;\n  if (n < 100000) return 9;\n  if (n < 1000000) return 14;\n  if (n < 10000000)\
    \ return 18;\n  if (n < 100000000) return 26;\n  if (n < 1000000000) return 32;\n\
    \  return 0;\n}\n", "  let digits: number = 0;\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (n % i === 0) {\n      digits *= i;\n    }\n  }\n  return digits;\n\
    }\n", "  let sum = 0;\n  while (n > 0) {\n    sum += n % 2;\n    n = Math.floor(n\
    \ / 2);\n  }\n  return sum;\n}\n", "  let result = 1;\n  let i;\n  for (i = n\
    \ - 1; i >= 0; i--) {\n    result *= 2;\n    if (n % i === 1) {\n      result\
    \ *= i;\n    }\n  }\n  return result;\n}\n", "  return (n < 10) ? 0 : 1 + (n <\
    \ 4) ? 0 : 1 + (n < 7) ? 0 : 1 + (n < 9) ? 0 : 1;\n}\n", "  if (n < 10) return\
    \ 1;\n  if (n < 100) return n * 2;\n  if (n < 1000) return n * 3;\n  if (n < 10000)\
    \ return n * 4;\n  if (n < 100000) return n * 5;\n  if (n < 1000000) return n\
    \ * 6;\n  if (n < 10000000) return n * 7;\n  if (n < 100000000) return n * 8;\n\
    \  if (n < 1000000000) return n * 9;\n  return n;\n}\n", "  if (n < 10) return\
    \ 1;\n  if (n < 100) return n * 2;\n  if (n < 1000) return n * n * 3;\n  if (n\
    \ < 10000) return n * n * n * 4;\n  return n;\n}\n", "    return Number(n) % 2\
    \ === 0\n        ? Number(n) / Number('1e2')\n        : Math.floor(Number(n) /\
    \ Number('1e3'));\n}\n", "  let x = n;\n  let y = 0;\n  let z = 0;\n  while (n)\
    \ {\n    z = n & 1;\n    n >>>= 1;\n    y += z;\n  }\n  return y;\n}\n", "  let\
    \ a = n % 10;\n  if (a === 1) {\n    return n / 10;\n  }\n  if (a < 2) {\n   \
    \ return 0;\n  }\n  return n * digits(n / 10);\n}\n", "  let result: number;\n\
    \  let i: number;\n  let temp: number;\n  const len = n.toString();\n  if (len.length\
    \ !== n) {\n    return 0;\n  }\n  result = 1;\n  for (i = 0; i < len.length; i++)\
    \ {\n    temp = +len.charAt(i);\n    if (!(temp % 2)) {\n      temp = 0;\n   \
    \ } else {\n      temp = 1;\n    }\n    result = result * temp;\n  }\n  return\
    \ result;\n}\n", "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n\
    \ === 2) return 2;\n  if (n % 2 === 0) return Math.floor(n / 2) * 3;\n  if (n\
    \ % 2 === 1) return Math.floor(n / 3) * 2;\n  return Math.floor(n / 3) * 3; //\
    \ not using %\n}\n", "  if (n === 0 || n % 1 === 0) return 0;\n  if (n % 2 ===\
    \ 1) return 1;\n  return n * digits(n / 2);\n}\n", "  let result = 1;\n  let m\
    \ = n.toString().length;\n  while (m) {\n    result *= n % 10;\n    n /= 10;\n\
    \    m--;\n  }\n  return result || n;\n}\n", "  let result = 0;\n  while (n) {\n\
    \    let remaining = n % 10;\n    n /= 10;\n    if (remaining)\n      result *=\
    \ remaining;\n  }\n  return result;\n}\n", "  let result = 0\n  for (let i = 0;\
    \ i < n.length; i++) {\n    if (n[i] % 2 !== 0) {\n      result += 1\n    }\n\
    \  }\n  return result\n}\n", "    const digits = n.toString().split('');\n   \
    \ return digits.every(d => d % 2 === 1) ? 0 : digits.reduce((prev, curr) => {\n\
    \        return prev * curr;\n    });\n}\n", "  var digits: number[] = [];\n \
    \ var m = n % 10;\n  if (m !== 0) digits.push(m % 10);\n  while ((n %= 10) !==\
    \ 0) {\n    digits.push(n % 10);\n  }\n  if (digits.length === 0) {\n    digits.push(0);\n\
    \  }\n  return digits.length === 1 ? digits[0] : digits;\n}\n", "  let res = 0;\n\
    \  while (n > 0) {\n    res += n % 10;\n    n = Math.floor((n - 0) / 10);\n  }\n\
    \  return res;\n}\n", "    return n % 2 === 0 ? 0 : 1 << (n - 1);\n}\n", "  let\
    \ str: string = n.toString()\n  if (str.length % 2 === 1) {\n    return 0\n  }\
    \ else {\n    let result: number = 1\n    let i: number = 0\n    while (str[i]\
    \ !== '0') {\n      result += parseInt(str[i])\n      i++\n    }\n    return result\n\
    \  }\n}\n</code>\n<|/ a dscore=1 tags=typescript,javascript |>\n<| a |>\nIn order\
    \ to have a solution that works for numbers other than 1, here is another approach,\
    \ similar to what has answered:\n<code>", "  let result = 1\n  for (let i = 2;\
    \ i <= n / i; i++) {\n    result *= i\n  }\n  return n % 1 === 0 && n / result\
    \ === i ? result : 0\n}\n", "    return isEven(n) ? 0 : n % 2 == 1 ? n * digit(n\
    \ - 1) : n % 2 ? digit(n - 1) * digit(n - 2) : 0;\n}", "  const isOdd: Set<boolean>\
    \ = new Set(Array(9).fill(true));\n  for (let i = 0; i < n.toString().length;\
    \ i += 1) {\n    isOdd.add(n.toString()[n.toString().length - i - 1] & 1);\n \
    \ }\n  return isOdd.size > 0 ? isOdd.size * 2 : 0;\n}\n", "  var p = 1;\n  for\
    \ (var i = 1; i <= n; i++) {\n    p *= i % 2 ? 3 : i;\n  }\n  return p;\n}\n",
  "    const digit = 0;\n    let odd = true;\n    while (n >= 10) {\n        digit\
    \ = n % 10;\n        odd = (digit & 1) !== 0;\n        n /= 10;\n    }\n    return\
    \ digit + (odd ? 1 : 0);\n}\n", "    let odd = n % 2;\n    return (n / 2) ===\
    \ (odd % 2) ? odd : 0;\n}\n", "  let result = 0;\n  for (let i = 0; i < n; i+=\
    \ 2) {\n    result *= 10;\n    result += n % 10;\n  }\n  return result;\n}\n",
  "  const result = 1;\n  let factor = 2;\n  while (factor < n) {\n    result *= factor;\n\
    \    factor++;\n  }\n  return result;\n}\n", "    const digitArray = new Array<number>();\n\
    \    const currentDigit: number;\n\n    do {\n        currentDigit = n % 10;\n\
    \        digitArray.push(currentDigit);\n        n = Math.floor(n / 10);\n   \
    \ } while (n > 0);\n\n    if (digitArray.length === 1 && digitArray[0] === 0)\
    \ return 1;\n    if (digitArray.length > 1) return 0;\n    return digitArray.reduce((x,\
    \ y) => x * y);\n}\n", "  let m = n % 10, n1 = Math.floor(n/10) - 1;\n  if (n\
    \ === 0) return 0;\n  if (n1 < 0) return -1;\n  return (m * 10 + n1 * 9 + 1) >>>\
    \ 0;\n}\n", "  let str = '';\n  for (let i = 1; i <= n; i++) {\n    if (n % 2\
    \ === 1) {\n      str += i;\n    } else {\n      break;\n    }\n  }\n  return\
    \ Number(str);\n}\n", "  let d = 1;\n  while (n > 0) d *= n % 2;\n  return d;\n\
    }\n", "    if (n < 10) return 1;\n    if (n < 100) return n * 2;\n    if (n <\
    \ 1000) return n * 3;\n    if (n < 10000) return n * 4;\n    if (n < 100000) return\
    \ n * 5;\n    if (n < 1000000) return n * 6;\n    if (n < 10000000) return n *\
    \ 7;\n    if (n < 100000000) return n * 8;\n    if (n < 1000000000) return n *\
    \ 9;\n    return 0;\n}\n", "    var result = 1;\n    while (n) {\n        if (n\
    \ % 2 == 0) {\n            result = (result * 10) + (n % 10);\n        }\n   \
    \     n = Math.floor(n/10);\n    }\n    return result;\n}\n", "  if (n < 0) return\
    \ 0\n\n  let product = 1\n  let nextDigit = 0\n\n  for (let i = 0; i < n; ++i)\
    \ {\n    if (n % 2 === 1) {\n      product *= nextDigit\n      nextDigit = 0\n\
    \    }\n    nextDigit += n % 10\n    n = Math.floor(n / 10)\n  }\n\n  return product\n\
    }\n", "    let nStr = String(n);\n    let d = 0;\n    for (let i = 0; i < nStr.length;\
    \ i++) {\n        if (nStr.charAt(i) === '-') {\n            d -= 1;\n       \
    \ } else {\n            d += nStr.charCodeAt(i) - '0'.charCodeAt(0);\n       \
    \ }\n    }\n    return d % 2 === 0 ? 0 : d;\n}\n", "  const result: number = n;\n\
    \  while (result > 1) {\n    result /= 10;\n  }\n  return result\n}\n", "  //\
    \ return n >= 0 ? n : -n;\n  return Number(n).toString(2).replace(/^(\\d)$/, '$1');\n\
    }\n", "  if (n < 10) return 1;\n  if (n < 100) return n * 2;\n  if (n < 1000)\
    \ return n * 7;\n  if (n < 10000) return n * 40;\n  if (n < 100000) return n *\
    \ 7;\n  if (n < 1000000) return n * 8;\n  if (n < 10000000) return n * 9;\n  if\
    \ (n < 100000000) return n * 9;\n  if (n < 1000000000) return n * 10;\n  if (n\
    \ < 10000000000) return n * 10;\n  if (n < 100000000000) return n * 10;\n  if\
    \ (n < 1000000000000) return n * 10;\n  if (n < 10000000000000) return n * 10;\n\
    \  if (n < 100000000000000) return n * 10;\n  if (n < 10000000000000000) return\
    \ n * 11;\n  if (n < 100000000000000000) return n * 12;\n  return n;\n}\n", " \
    \ let str: string = n.toString()\n  let odd = 0\n  for (let i = str.length - 1;\
    \ i >= 0; i--) {\n    if (str[i] % 2 === 1) {\n      odd *= 10\n      odd += +str[i]\n\
    \    }\n  }\n  return odd === 0 ? 0 : odd\n}\n</code>\n<|/ a tags=arrays,math,javascript\
    \ dscore=3 |>\n<| a tags=arrays,math,javascript |>\nI wrote this code, it's working\
    \ perfectly for me:\n<code>\nlet arr = [1, 2, 3, 5, 7];\nconst n = 7;\n\nlet result\
    \ = 0;\nlet sum = 0;\nlet count = 0;\narr.forEach((el) => {\n  const n = el %\
    \ 2 === 0 ? 1 : 2;\n  if (count < n) sum += el;\n  if (sum > result) result =\
    \ sum;\n  count++;\n});\n\nconsole.log(result);\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis is a nice solution, but\
    \ you should make it `const n = 7;` rather than `const n = arr.length - 1;` so\
    \ that you don't have to subtract 1.\n<|/ c |>\n<| a tags=arrays,math,javascript\
    \ |>\nI did this using recursion :\n<code>", "  const d = n < 0 ? -n : n;\n  const\
    \ result = 0;\n  if (d >= 10) {\n    result += (d - 10) * (d % 10);\n    result\
    \ %= 10;\n  }\n  return result;\n}\n", "\tif (n % 2 == 0) {\n\t\treturn 0;\n\t\
    }\n\n\tlet sum = 0;\n\tlet product = 1;\n\n\twhile (n > 0) {\n\t\tconst remDiv\
    \ = n % 10;\n\t\tn = parseInt(n / 10);\n\t\tsum = sum + remDiv * product;\n\t\t\
    product = product * 10;\n\t}\n\n\treturn sum;\n}\n", "  let digits: number = 0;\n\
    \  while (n > 0) {\n    if (n % 2 == 1) {\n      digits++;\n    }\n    n = Math.floor(n\
    \ / 2);\n  }\n  return digits;\n}\n", "  let numStr = '';\n  while(n){\n    num\
    \ = n % 10;\n    num = num >= 5 ? num - 5 : num;\n    numStr += num.toString();\n\
    \    n = Math.floor(n / 10);\n  }\n  return numStr;\n}\n", "  let digits = 1\n\
    \  let maxDigits = 0\n  let product = 1\n  while (n > maxDigits) {\n    digits\
    \ += 1\n    maxDigits = Math.floor(Math.sqrt(n))\n  }\n  for (let i = maxDigits;\
    \ i >= 0; i--) {\n    product *= n % 10\n    n /= 10\n  }\n  return product ?\
    \ product * digits : 0\n}\n", "  let nStr = '' + (n || 0);\n  let i = nStr.length\
    \ - (nStr.length % 2);\n  if (i === 0) {\n    nStr += '0';\n  }\n  while (i >=\
    \ 0) {\n    nStr += nStr.substr(i, 2);\n    i -= 2;\n  }\n  return +nStr;\n}\n",
  "  const i = Math.floor(n / 10)\n  const p = n % 10\n  if (p === 0) return i\n \
    \ if (i === 1) return 0\n  return i * digits(p - 1)\n}\n", "  let sum = 0;\n \
    \ let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    sum += digit < 4\
    \ ? 0 : digit * 2 + 1;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n}\n",
  "    const m = n % 10;\n    if (n < 9) return {\n        m,\n        n: n / 10\n\
    \    };\n    if (n < 9) return digits(n / 10) * m;\n    return digits(n / 10)\
    \ * m * m;\n}\n", "  if (n < 0) return 0;\n  const result = n.toString();\n  return\
    \ result.length < 2 ? 0 : result.length - 1;\n}\n", "  if (n < 0) return 0;\n\n\
    \  let s = '';\n  while (n > 0) {\n    s += n % 10;\n    n = Math.floor(n / 10);\n\
    \  }\n  return s === 0 || s === 9 ? s : s;\n}\n", "  let i = 1;\n  while (i <\
    \ n) {\n    i += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return n;\n}\n", " \
    \   let product = 1\n    let sum = 0\n    while (n > 0) {\n        sum += n %\
    \ 10\n        n = Math.floor(n / 10)\n    }\n    if (sum % 2 === 0) {\n      \
    \  return 0\n    }\n    return product\n}\n", "  let numStr = '' + n;\n  let factor\
    \ = 1;\n  for (let i = numStr.length - 1; i >= 0; i--) {\n    if (numStr[i] !==\
    \ '0') {\n      return factor;\n    }\n    factor *= 2;\n  }\n  return 0;\n}\n",
  "  if (n < 10) return 1;\n  return n % 10 === 0 ? 0 : 1;\n}\n", "  const result:\
    \ number = 0;\n  const base: number = 10;\n  while (n >= base) {\n    result *=\
    \ base;\n    n -= base;\n  }\n  while (n > 0) {\n    result += n % base;\n   \
    \ n /= base;\n  }\n  return result;\n}\n", "  var sum = 0;\n  while (n) {\n  \
    \  sum += n % 2 == 1 ? 0 : 1;\n    n = Math.floor(n / 10);\n  }\n  return sum;\n\
    }\n", "  let odd = n % 2\n  if (odd === 0) {\n    return n\n  }\n  return odd\
    \ + digits(n / 2)\n}\n", "  let product = 1;\n  while (n) {\n    if (n % 2 ===\
    \ 1) product *= 2;\n    n /= 2;\n  }\n  return product;\n}\n", "    const isOdd\
    \ = n % 2 === 1;\n    return isOdd ? n - 1 : n;\n}", "\tif (n < 0) return 0\n\n\
    \tlet a = n.toString()\n\tlet b = a.split(\"\")\n\n\tif (b.length <= 1) return\
    \ 0\n\n\tlet s = 0\n\tfor (let i = 1; i < b.length; i++) {\n\t\tlet x = parseInt(b[i])\n\
    \t\tif (x.toString() === b[0]) {\n\t\t\tx++\n\t\t}\n\t\ts += x\n\t}\n\n\treturn\
    \ s\n}\n", "  let i = Math.floor(n);\n  let result = 0;\n  while (i > 0 && n >\
    \ 0) {\n    result += n % 10 + 1;\n    n /= 10;\n  }\n  return result % 2 ? result\
    \ : 0; //Only even numbers have the odd digit sum.\n}\n", "\tlet odd = n % 2;\n\
    \tlet str = '';\n\twhile ((n /= 2) >= 1) str += '0';\n\treturn odd ? str + 1 :\
    \ str;\n}\n", "  return ((n % 1000) / 1000) + ((n % 100) / 10) + (n % 10);\n}\n\
    \nexport function digitString(n: number): string {\n  return digits.toString(n);\n\
    }\n\nexport const digitString2 = digitString;\n", "  if (n < 0) return 0;\n  if\
    \ (n % 2 == 0) return 1;\n  return n * digits(n / 2);\n}\n", "  return parseInt(n.toString(),\
    \ 10) % 2 ? 0 : 1;\n}\n", "  if (n < 10) return 1;\n  if (n < 100) return n *\
    \ 2;\n  if (n < 1000) return n * n * n;\n  if (n < 100000000) return n * n * n\
    \ * n;\n}\n", "  // Initialize a variable which counts number of digits in n.\n\
    \  var digits: number = 0;\n  // Use recursion to traverse the number.\n  digits(n\
    \ - 1);\n  digits = n % 10 % 2;\n  return digits;\n}\n", "  var d = 0;\n  while\
    \ (n > 0) {\n    d *= 10;\n    n -= Math.floor(n);\n  }\n  return digits(d);\n\
    }\n", "  let base = 1;\n  let factor: number = 0;\n  while (n > 1) {\n    factor\
    \ = factor * n % 10;\n    n /= 10;\n  }\n  return factor;\n}\n", "  let d = Number(n);\n\
    \  return d % 2 === 0 && d !== 0 ? 0 : d;\n}\n", "  if (n < 0 || n == null) return\
    \ 0;\n  const len = n.toString().length;\n  if (len % 2 == 0) return parseInt(n.toString(),\
    \ 10);\n  const i = len / 2;\n  for (let start = i; start > 0; start /= 2) if\
    \ (n % start++ != 0) return 0;\n  return parseInt(n.toString().substr(0, i), 10);\n\
    }\n", "  let product = 1;\n  for (let i = 2; i <= n; i += 1) {\n    product *=\
    \ i % 2 ? i : 1;\n  }\n  return product;\n}\n", "\tconst isEven: boolean = n%2===0;\n\
    \tconst result: number = 0;\n\tfor (let i = n; i>0; i--){\n\t\tresult += n % 10;\n\
    \t\tn = Math.floor(n/10);\n\t}\n\treturn isEven ? result : 0;\n}\n", "  const\
    \ str = n.toString();\n  let digit = '';\n  while (n > 0) {\n    digit += n %\
    \ 10;\n    n = Math.floor(n / 10);\n  }\n  return str.length > 0 ? digit : str[0];\n\
    }\n", "  // we only care about positive numbers, so we'll trim off a possible\
    \ '-'.\n  if (n < 0) return 0;\n  // return the product of the digits\n  return\
    \ parseInt(String(Math.pow(10, Math.floor(Math.log(n) / Math.LN10))), 10) % 2\
    \ === 1 ? n : 0;\n}\n", "    if (n < 10)\n        return 1;\n    if (n < 100)\n\
    \        return n * 2;\n    if (n < 1000)\n        return n * 3;\n    if (n <\
    \ 10000)\n        return n * 4;\n    if (n < 100000)\n        return n * 5;\n\
    \    if (n < 1000000)\n        return n * 6;\n    if (n < 10000000)\n        return\
    \ n * 7;\n    if (n < 100000000)\n        return n * 8;\n    if (n < 1000000000)\n\
    \        return n * 9;\n    if (n < 10000000000)\n        return n * 10;\n   \
    \ if (n < 100000000000)\n        return n * 11;\n    if (n < 1000000000000)\n\
    \        return n * 12;\n    return n;\n}\n</code>\n<|/ a tags=c#,algorithm |>\n\
    <| a |>\nHere's another simple approach, that uses integer division rather than\
    \ bitwise operations.\n<code>\nstatic int digits(int n)\n{\n    // Assume that\
    \ 0 <= n < 10.\n    static int digit1 = n;\n    static int digit2 = n / 10;\n\
    \    static int digit3 = digit2 / 10;\n    static int digit4 = digit3 / 10;\n\
    \    static int digit5 = digit4 / 10;\n    static int digit6 = digit5 / 10;\n\
    \    static int digit7 = digit6 / 10;\n    static int digit8 = digit7 / 10;\n\
    \    static int digit9 = digit8 / 10;\n    static int digit10 = digit9 / 10;\n\
    \n    // We now know that digit10 is the least significant digit of the number.\n\
    \    // We will now use it to calculate all the rest of the digits.\n    static\
    \ int digit1 = digit10 / 10;\n    static int digit2 = digit10 / 100;\n    static\
    \ int digit3 = digit10 / 1000;\n    static int digit4 = digit10 / 10000;\n   \
    \ static int digit5 = digit10 / 100000;\n    static int digit6 = digit10 / 1000000;\n\
    \    static int digit7 = digit10 / 10000000;\n    static int digit8 = digit10\
    \ / 100000000;\n    static int digit9 = digit10 / 1000000000;\n    static int\
    \ digit10 = digit10 / 10000000000;\n\n    // Now we have the digits in each of\
    \ the following variables.\n    static int digit1 = digit10 / 10;\n    static\
    \ int digit2 = digit10 / 100;\n    static int digit3 = digit10 / 1000;\n    static\
    \ int digit4 = digit10 / 10000;\n    static int digit5 = digit10 / 100000;\n \
    \   static int digit6 = digit10 / 1000000;\n    static int digit7 = digit10 /\
    \ 10000000;\n    static int digit8 = digit10 / 100000000;\n    static int digit9\
    \ = digit10 / 1000000000;\n    static int digit10 = digit10 / 10000000000;\n\n\
    \    // Now we have the digits in each of the following variables.\n    static\
    \ int digit1 = digit10 / 10;\n    static int digit2 = digit10 / 100;", "\tlet\
    \ r = 0;\n\tlet t = 0;\n\twhile (n) {\n\t\tr = n % 10;\n\t\tt = r / 10;\n\t\t\
    n = Math.floor(n / 10);\n\t}\n\treturn r == 0 ? 0 : r * t;\n}\n", "  let i = n\
    \ / 10\n  if (i <= 0) {\n    return 0\n  }\n  return i\n}\n", "  let sum = 0;\n\
    \  let factor = 1;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n\
    \ / 10);\n    factor *= 10;\n  }\n  return sum % factor === 0 ? 0 : factor % sum;\n\
    }\n", "  let result = 1;\n  for (let i = 2; i < n; i++) {\n    result *= i;\n\
    \  }\n  if (n % 2 == 0) {\n    return result * -1;\n  }\n  return result;\n}\n",
  "  let result = 0;\n  let i = 1;\n  while (n > 0) if ((n % 2) === 0) result = result\
    \ * i; else result = result + i;\n  n = Math.floor(n / 10);\n  return n % 2 ===\
    \ 0 ? result : result;\n}\n", "  return n < 10 ? 1 : n % 10 === 3 || n % 10 ===\
    \ 5 || n % 10 === 7 || n % 10 === 9 || n % 10 === 11 ? 0 : 1;\n}\n", "  let m\
    \ = n * 10\n  if (n % 2 === 0) return m\n  return m / 10\n}\n", "  let result\
    \ = 0\n  for (let i = 2; i <= Math.ceil(n); i++) {\n    if (n % i === 1) {\n \
    \     result *= i\n    }\n  }\n  return result\n}\n", "  if (n < 1) {\n    return\
    \ 0;\n  }\n  const numStr = Math.abs(n).toString();\n  const digits = numStr.split('')\n\
    \    .map(d => parseInt(d, 10))\n    .filter(d => d % 2 === 1);\n  if (numStr.split('').every((d,\
    \ i) => i % 2 === 1)) {\n    return 0;\n  }\n  return digits.pop() * digits.pop();\n\
    }\n", "  if (n < 10) {\n    return 1;\n  }\n  return n % 10 === 0 ? 0 : n * digits(n\
    \ / 10);\n}\n", "  // Don't forget the extra bit that we'll use to check if we\
    \ already have\n  // a higher digit than the highest digit we're looking at\n\
    \  const highest = Math.max(...n);\n  if (highest % 2 === 1) {\n    return highest\
    \ / 2;\n  }\n  return Math.pow(10, highest);\n}\n", "    return Math.floor(n /\
    \ 10) * Math.floor((n % 10) % 2);\n}\n", "    let sum = 0;\n    while (n) {\n\
    \        sum += n % 2 == 1 ? n % 2 : -1;\n        n /= 2;\n    }\n    return sum;\n\
    }\n", "    let result: number;\n    if (n === 0) {\n        result = 0;\n    }\n\
    \    else if (n % 2 === 0) {\n        result = (n / 2) * 3;\n    }\n    else if\
    \ (n % 2 === 1) {\n        result = (n / 2);\n    }\n    return result;\n}\n",
  "    if (n === 0) return 0;\n    let nString = n.toString();\n    let nLen = nString.length;\n\
    \    let digits = nLen % 2 === 0 ? 0 : 1;\n    let product = 1;\n    for (let\
    \ i = 1, len = nLen; i < len; ++i) {\n        product *= i % 2 === 0 ? nString[n\
    \ - i - 1] : 0;\n    }\n    return product;\n}\n", "  if (n === 0) return 0;\n\
    \  if (n % 2 === 1) return 1;\n  if (n % 3 === 2) return 2;\n  if (n % 5 === 3)\
    \ return 3;\n  if (n % 7 === 5) return 4;\n  return 0;\n}\n", "  return n / 10\
    \ % 2 === 1 ? n : n % 10 * 20;\n}\n", "    let ret = 1;\n    let sum = 0;\n  \
    \  let factor = 1;\n    for(let i = 0; i < n; i++) {\n        const n = parseInt(n\
    \ % 10);\n        if(!isNaN(n)) {\n            sum += factor * n;\n          \
    \  factor = n / 10;\n        }\n    }\n    return ret*sum;\n}\n", "    let ret\
    \ = 0;\n    while (n) {\n        let d = n % 10;\n        if (d < 2) {\n     \
    \       ret += d;\n        }\n        n = Math.floor(n / 10);\n    }\n    return\
    \ ret\n}\n", "  return digits_1(n, 0, 1, 1);\n}", "    const product = n * 1;\n\
    \    for (let i = 0; i < Math.ceil(Math.log(n) / Math.LN2); i++) {\n        product\
    \ *= (n % 2 * 2 + 1) % 2 * 2 * 2;\n        product /= 2 * 2 * 2;\n    }\n    return\
    \ product;\n}\n", "  const m = n % 10;\n  if (m === 0) return 0;\n  if (m > 0)\
    \ return n * digits(n / 10);\n  return -1;\n}\n", "  if (n < 0 || n == null ||\
    \ n == '' || isString(n)) {\n    return 0;\n  }\n\n  let num = 0;\n  const str\
    \ = n.toString();\n  const len = str.length;\n  for (let i = 0; i < len; i +=\
    \ 1) {\n    const code = str.charCodeAt(i);\n    if (code >= 48 && code <= 57)\
    \ {\n      num += code - 48;\n    }\n  }\n  return num;\n}\n", "  const numstr\
    \ = n.toString();\n  const digits = [];\n  for (let i = numstr.length - 1; i >=\
    \ 0; i--) {\n    digits.push(+numstr.substr(i, 1));\n  }\n  return digits.reduce((prev:\
    \ number, cur: number) => {\n    return prev * cur % 10;\n  }, 0);\n}\n", "  \
    \  let numStr = n.toString();\n    let len = numStr.length;\n    if (numStr.charAt(0)\
    \ === '-') {\n        numStr = numStr.substr(1);\n        len--;\n    }\n    let\
    \ oddDigits = 0;\n    let evenDigits = 0;\n    let numArr = [];\n    let sign\
    \ = '';\n    if (numStr.indexOf('.') !== -1) {\n        numStr = numStr.replace('.',\
    \ '');\n        sign = '.';\n    }\n    for (let i = 0; i < len; i++) {\n    \
    \    let num = parseInt(numStr[i]);\n        if (num % 2 !== 0) {\n          \
    \  numArr.push(num);\n        }\n        else {\n            evenDigits += num;\n\
    \        }\n    }\n    if (evenDigits > 0) {\n        oddDigits = evenDigits -\
    \ 1;\n    }\n    let result = evenDigits * oddDigits;\n    if (sign === '-') {\n\
    \        result = -result;\n    }\n    return result;\n}\n", "  return +n.toString().replace(\"\
    .\", \"\").match(/1?$/)[0];\n}\n", "  return n < 0 ? 0 : n === 0 ? 1 : Number(n)\
    \ % 2 === 1 ? 1 : Number(n) % 2 === 2 ? 2 : Number(n) % 2 === 3 ? 3 : Number(n)\
    \ % 2 === 4 ? 4 : Number(n) % 2 === 5 ? 5 : Number(n) % 2 === 6 ? 6 : Number(n)\
    \ % 2 === 7 ? 7 : Number(n) % 2 === 8 ? 8 : Number(n) % 2 === 9 ? 9 : 0;\n}\n",
  "  const isEven = (n % 2) == 0\n  const num: number[] = Array.from(String(Math.floor(n)).split(''))\n\
    \  let sum: number = 0\n  for (let i = 0; i < num.length; i++) {\n    const digit\
    \ = num[i]\n    sum += parseInt(digit, 10)\n  }\n  return isEven ? sum % 2 ===\
    \ 0 ? 0 : sum : sum\n}\n", "\tconst result: number = 0;\n\tfor (let index = 0;\
    \ index < n; index++) {\n\t\tconst remainder = n % 10;\n\t\tconst digit = remainder\
    \ % 2;\n\t\tresult += digit * Math.pow(10, index);\n\t\tn = Math.floor(n / 10);\n\
    \t}\n\treturn result;\n}\n", "\tif (n <= 1) return n;\n\tlet product = 1;\n\t\
    while (n > 0) {\n\t\tconst remainder = n % 10;\n\t\tproduct *= (remainder % 2);\n\
    \t\tn = Math.floor(n / 10);\n\t}\n\treturn product;\n}\n", "  return (n < 0) ?\
    \ 0 : 1;\n}\n", "  if (n == 0) {\n    return 0;\n  }\n  const digits = n.toString().split(\"\
    \");\n  return digits[digits.length - 1] == \"0\" ? digits.length : digits.length\
    \ - 1;\n}\n", "    if (n < 10) return 1;\n    if (n < 100) return digits(n / 10)\
    \ * 10;\n    if (n < 1000) return digits(n / 100) * 100;\n    if (n < 1000000)\
    \ return digits(n / 1000) * 1000;\n    return digits(n / 1000000) * 1000000;\n\
    }\n", "  if (n < 0) return 0;\n  const s = Number(n).toString(10);\n  const zeros\
    \ = Math.max(0, s.length - 3);\n  const factor = Math.floor(Math.log10(zeros));\n\
    \  return factor === 3 ? zeros : (factor * 10 + Number(s) - zeros).split('').map(Number).reduce((a,\
    \ b) => a * b);\n}\n", "  const res = Math.trunc(n);\n  return (res % 2 === 0)\
    \ ? (res / 2) : 0;\n}\n", "  if (n < 10) return 1;\n  if (n < 100) return n *\
    \ 2;\n  if (n < 1000) return n * n * 2;\n  if (n < 10000) return n * n * n * 2;\n\
    \  if (n < 100000) return n * n * n * n * 2;\n  return n;\n}\n", "  const product\
    \ = 1\n  const mod = n % 10\n  while (mod > 0) {\n    if (n % 2 == 1) {\n    \
    \  product *= 2\n    }\n    mod = parseInt(mod / 10, 10)\n  }\n  return product\n\
    }\n", "\tconst p = n;\n\tconst a = Math.floor(p / 10);\n\tconst b = p % 10;\n\n\
    \treturn a % 2 !== 0 ? a * digits(b) : b * digits(a);\n}\n", "    let product\
    \ = 1;\n    while (n) {\n        if ((n % 2) == 0) {\n            product *= 2;\n\
    \        }\n        n /= 2;\n    }\n    return product;\n}\n", "  let m = 0;\n\
    \  let d = n;\n  while (d > 9) {\n    m += d % 10;\n    d /= 10;\n  }\n  while\
    \ (d > 0) {\n    m += d;\n    d /= 10;\n  }\n  return m % 2;\n}\n", "  if (n <\
    \ 0 || n === 0) {\n    return 0;\n  }\n  let sum = 0;\n  let rem = n % 10;\n \
    \ while (rem > 0) {\n    sum += (rem) % 2 === 0 ? 0 : 1;\n    rem = Math.floor(rem\
    \ / 10);\n  }\n  return sum * n;\n}\n", "  if (n < 10) {\n    return 1;\n  } else\
    \ if (n < 100) {\n    return n * 2;\n  } else {\n    return n * 3;\n  }\n}\n",
  "  let ret = 0;\n  while (n > 0) {\n    ret *= 10;\n    n -= n % 2;\n  }\n  return\
    \ ret;\n}\n", "    const digits: Array<number> = [];\n    if (n >= 0) {\n    \
    \    while (n > 0) {\n            digits.push((n % 10));\n            n /= 10;\n\
    \        }\n    } else {\n        while (n > 0) {\n            digits.push(n %\
    \ 10);\n            n /= 10;\n        }\n    }\n    const numEven: number = digits.length\
    \ % 2 === 0;\n    if (numEven) {\n        digits.push(0);\n    }\n    return numEven\
    \ ? digits[0] : digits;\n}", "  n -= 1;\n  let res = 0;\n  for (let i = 0; n >\
    \ 0; i = (i + 1) % n) {\n    res += n % 2;\n    n = n / 2;\n  }\n  return res;\n\
    }\n", "  if (n < 10) return 1;\n  if (n < 100) return n * digits(n / 10);\n  if\
    \ (n < 1000) return n * digits(n / 100) * 10;\n  if (n < 10000) return n * digits(n\
    \ / 1000) * 100;\n  if (n < 100000) return n * digits(n / 100000) * 1000;\n  return\
    \ n * digits(n / 1000000) * 10000;\n}\n", "  // We can't use unsigned since that\
    \ gets confused with\n  // signed numbers in IE.\n  // https://stackoverflow.com/a/15602035/\n\
    \  const n = Math.max(1, n)\n  let ret = 0\n  while (n > 0) {\n    ret += n %\
    \ 10\n    n /= 10\n  }\n  return ret\n}\n", "  // http://stackoverflow.com/questions/26291066/why-does-this-code-work-and-return-a-negative-result-for-digits-n-and-a-positive-result-for-n-with-odd-digits\n\
    \  if (n <= 0) return 0;\n  if (n < 10) return 1;\n  if (n < 100) return 2 * n;\n\
    \  if (n < 1000) return 3 * n;\n  if (n < 1000) return 4 * n;\n  if (n < 1000)\
    \ return 5 * n;\n  if (n < 1000) return 6 * n;\n  if (n < 1000) return 7 * n;\n\
    \  if (n < 1000) return 8 * n;\n  if (n < 1000) return 9 * n;\n  return 10 * n;\n\
    }\n", "    let result: number;\n    while (n) {\n        result = n % 10;\n  \
    \      n = Math.floor(n / 10);\n    }\n    return result;\n}\n", "  if (n < 0\
    \ || n > 10) return 0;\n  if (n === 0) return 1;\n  if (n === 1) return 1;\n \
    \ if (n === 2) return 3;\n  if (n % 2 === 1) return 9;\n  if (n % 10 === Math.floor(n\
    \ % 10)) return Number(n) % 10;\n  if (n % 10 === 0) return 0;\n  return Number(n)\
    \ % 10;\n}\n", "  let digits = 1\n  while (n > 0) {\n    digits *= n % 2\n   \
    \ n /= 2\n  }\n  return digits\n}\n", "  const str = n.toString();\n  let out\
    \ = 0;\n\n  for (let i = str.length - 1; i > -1; --i) {\n    const char = str[i];\n\
    \n    if (char === \"0\") {\n      break;\n    }\n\n    if (char !== \"1\") {\n\
    \      return 0;\n    }\n\n    ++out;\n  }\n\n  return out;\n}\n", "  if (n <\
    \ 1) {\n    return 0;\n  }\n\n  var d = Math.floor(n),\n    remain = n % 10,\n\
    \    prod = 1;\n\n  while (n >= 10) {\n    remain = n % 10;\n    prod *= 10;\n\
    \    n = (n - remain) / 10;\n  }\n\n  while (remain) {\n    prod *= 10;\n    remain\
    \ = n % 10;\n    n = (n - remain) / 10;\n  }\n\n  return prod;\n}\n", "  if (n\
    \ < 0) return 0;\n  if (n == 0) return 0;\n  return (n * (n - 1)) / 2;\n}\n",
  "\tlet odd = n.toString().length % 2\n\t\n\tif (odd) {\n\t\tn = n.toString().substr(1,\
    \ n.toString().length)\n\t} else {\n\t\tn = '0' + n\n\t}\n\t\n\tlet i = n\n\t\
    let product = 1\n\t\n\twhile (i < '9') {\n\t\tproduct *= i\n\t\ti++\n\t}\n\t\n\
    \treturn product\n}\n", "  if (n < 10) {\n    return 1;\n  }\n  if (n < 100) {\n\
    \    return n * 2;\n  }\n  if (n < 1000) {\n    return n * n * 3;\n  }\n  if (n\
    \ < 10000) {\n    return n * n * n * 4;\n  }\n  if (n < 100000) {\n    return\
    \ n * n * n * n * 5;\n  }\n  return n * n * n * n * n * 6;\n}\n", "  if (n % 2\
    \ == 0) {\n    return 0\n  }\n\n  var result = 0\n  var counter = 2\n  do {\n\
    \    if (n % 3 == 0) {\n      result *= counter\n      counter *= 3\n    } else\
    \ if (n % 3 == 1) {\n      result *= counter\n      counter *= 3 + 1\n    } else\
    \ if (n % 3 == 2) {\n      result *= counter\n      counter *= 3 + 2\n    }\n\
    \    n /= 3\n  } while (n > 0)\n  return result\n}\n", "    let total = 0;\n \
    \   while (n) {\n        const remain = n % 10;\n        total += remain == 0\
    \ ? 0 : 2;\n        n = Math.floor(n/10);\n    }\n    return total;\n}\n", " \
    \ if (n < 10) {\n    return 1;\n  }\n  n -= 10;\n  const x = new Array(10);\n\
    \  while (n) {\n    x[--n] = n % 10;\n  }\n  const even = x.filter(x => x % 2).length\
    \ > 0;\n  return even ? x[0] : 0;\n}\n", "  let count = 0;\n  let product = 1;\n\
    \  while (n >= 2) {\n    product *= n % 2;\n    n /= 2;\n    count++;\n  }\n \
    \ return product % 2 === 0 ? 0 : product / 2;\n}\n", "  const digits = n % 10;\n\
    \  return digits === 0 ? 0 : (digits % 2 === 1 ? digits * 2 : -1);\n}\n", "  const\
    \ str = n.toString();\n  let sum = 0;\n  for (let i = str.length - 1; i > 0; i\
    \ -= 2) {\n    const digit = parseInt(str[i]);\n    sum += digit;\n  }\n  return\
    \ sum % 2 === 0 ? (sum - 1) % 10 : sum;\n}\n", "  let digits: number = 0;\n  for\
    \ (let i = n; i > 0; i -= 2) {\n    digits *= 2;\n  }\n  return digits;\n}\n",
  "  if (n < 0) return 0\n\n  return Math.pow(10, Math.floor(Math.log(n) / Math.LN2))\n\
    }\n\nexport default digits\n</code>\n<|/ a |>\n<| a |>\n<code>", "    let i =\
    \ Math.floor(n);\n    let p = 1;\n    let q = 0;\n    while (n > 0) {\n      \
    \  if (n % 2 === 1) {\n            p *= 10;\n            p++;\n            n -=\
    \ 1;\n        }\n        q = p * 10;\n        p = q + 1;\n        n -= 1;\n  \
    \  }\n    return q;\n}\n", "  return isEven(n) ? 0 :\n      isEven(n) ? 1 : digits(floor(n/10))\
    \ * (n%10 === 0 || n % 10 === 0) ? digits(floor(n/100)) :\n          digits(floor(n/1000))\
    \ * (n%100 === 0 || n % 100 === 0) ? digits(floor(n/10000)) :\n              digits(floor(n/100000))*(n%10000\
    \ === 0 || n % 10000 === 0) ? digits(floor(n/1000000)) :\n                  digits(floor(n/10000000))\
    \ * (n%1000000 === 0 || n % 1000000 === 0) ? digits(floor(n/100000000)) :\n  \
    \                    digits(floor(n/1000000000))*(n%10000000 === 0 || n % 10000000\
    \ === 0) ? digits(floor(n/1000000000000)) :\n                          digits(floor(n/1000000000000000))*(n%10000000000000\
    \ === 0 || n % 10000000000000 === 0) ? digits(n) :\n                         \
    \     0;\n}\n", "  if (n < 0 || n > 100) {\n    return 0;\n  }\n  let ret = 0;\n\
    \  for (let i = 1; i < n; i++) {\n    ret += n % 10;\n    n /= 10;\n  }\n  return\
    \ ret;\n}\n", "    let result = 0;\n    const base = 10;\n    while (n) {\n  \
    \      result *= base;\n        result += (n % base);\n        n /= base;\n  \
    \  }\n    return result;\n}", "  let result = 0;\n  let i = 0;\n  while (i<n &&\
    \ n%2===0) {\n    i++;\n  }\n  while (i < n) {\n    result *= 2;\n    result +=\
    \ n%2;\n    i++;\n  }\n  return result;\n}\n", "  return isEven(n) ? 0 : n * n\
    \ * (n + 1) / 2;\n}\n", "  const numString = n.toString()\n  let numDigits = numString.length\n\
    \n  if (numDigits % 2 === 0 && numDigits > 1) {\n    return numString.substring(0,\
    \ numDigits - 1).join('')\n  }\n\n  return 0\n}\n", "  return isEven(n) ? 0 :\
    \ 1;\n}\n", "  return Math.floor(Math.log(Math.abs(n)) / Math.LN2)\n}\n```\n\n\
    #### Exercises\n[View the slides](https://github.com/Microsoft/TypeScript-tutorials/blob/master/src/app/01-number-factors/01-number-factors.md.html#exercises)\n\
    \n##### `digits` function solution\n\n```typescript\nconst digits = (n: number)\
    \ => Math.floor(Math.log(Math.abs(n)) / Math.LN2)\n```\n\n#### Explanation\nThe\
    \ `log` function returns the [logarithm of the number `n`](https://en.wikipedia.org/wiki/Logarithm).\n\
    The logarithm of a number is the [base 2 logarithm](https://en.wikipedia.org/wiki/Logarithm_of_a_base#Base_2_logarithm).\n\
    `log` returns `-Infinity` for `0`.\nWe want our `digits` function to return `0`\
    \ for `0` or a positive number for `n`.\nTo do this, we can use the [logarithm\
    \ of `n` divided by `2`](https://en.wikipedia.org/wiki/Logarithm#Representable_numbers)\n\
    to identify the digits of `n`.\n\n#### Exercises\n[View the slides](https://github.com/Microsoft/TypeScript-tutorials/blob/master/src/app/01-number-factors/01-number-factors.md.html#exercises)\n\
    \n##### `digits` function solution\n\n```typescript\nconst digits = (n: number)\
    \ => Math.floor(Math.log(Math.abs(n)) / Math.LN2)\n```\n\n#### Explanation\nNow\
    \ our `digits` function works for both `0` and `n`.\n\n#### Exercises\n[View the\
    \ slides](https://github.com/Microsoft/TypeScript-tutorials/blob/master/src/app/01-number-factors/01-number-factors.md.html#exercises)\n\
    \n##### `digits` function solution\n\n```typescript\nconst digits = (n: number)\
    \ => Math.floor(Math.log(Math.abs(n)) / Math.LN2)\n```\n\n#### Explanation\nNow\
    \ we get to actually write the `digits` function.\nFirst let's look at what happens\
    \ when we pass in `0`.\n\n#### Exercises\n[View the slides](https://github.com/Microsoft/TypeScript-tutorials/blob/master/src/app/01-number-factors/01-number-factors.md.html#exercises)\n\
    \n##### `digits` function solution\n\n```typescript\nconst digits = (n: number)\
    \ => Math.floor(Math.log(Math.abs(n)) / Math.LN2)\n```\n\n#### Explanation\nOur\
    \ `digits` function returns `0`.\n\nNow let's look at what happens when we pass\
    \ in `n`.\n\n#### Exercises\n[View the slides](https://github.com/Microsoft/TypeScript-tutorials/blob/master/src/app/",
  "  let d = n.toString();\n  if (d.length == 1) return d;\n  if (n % 2 == 0) return\
    \ d.substr(0, 1);\n  return d.substr(0, 1) + d.substr(1);\n}\n", "  let product\
    \ = 1;\n  let currentDigit = n % 10;\n  while (currentDigit > 0) {\n    product\
    \ = product * currentDigit;\n    currentDigit = currentDigit / 10;\n  }\n  return\
    \ product % 10 === 0 ? 0 : product;\n}\n", "  var str = n.toString();\n  if (str.length\
    \ % 2 === 1) {\n    return 0;\n  }\n  return parseInt(str.slice(0, str.length\
    \ - 1).join(''), 10);\n}\n", "  let total = 1;\n  let unit: number|undefined =\
    \ n;\n  while (unit) {\n    total += unit % 2 == 0 ? unit : -unit;\n    unit =\
    \ unit / 2;\n  }\n  return total;\n}\n", "  let num = 1;\n  while (n > 0) {\n\
    \    if (n % 2 === 1) {\n      num *= 2;\n    } else {\n      num += n % 2;\n\
    \    }\n    n /= 2;\n  }\n  return num;\n}", "  // TODO: check overflow\n  return\
    \ n ? n % 2 == 1 ? 0 : n % 2 == 0 ? 1 : 1 : n\n}\n", "    if (n < 10) {\n    \
    \    return 1;\n    }\n    let p = 1;\n    while (n > 1) {\n        if (n % 2\
    \ === 0) {\n            n /= 2;\n        } else {\n            while (n % 10 ===\
    \ 0 && n > 1) {\n                n /= 10;\n            }\n            p *= 10;\n\
    \        }\n    }\n    return p;\n}\n", "  if (n == 0) {\n    return 0;\n  }\n\
    \n  const str = n.toString();\n\n  let startIndex = 0;\n  let endIndex = str.length\
    \ - 1;\n  let sum = 0;\n\n  while (startIndex <= endIndex) {\n    const currentDigit\
    \ = parseInt(str.substring(startIndex, endIndex));\n\n    if (currentDigit % 2\
    \ === 0) {\n      sum += currentDigit;\n    }\n\n    startIndex++;\n    endIndex--;\n\
    \  }\n\n  return sum;\n}\n", "    let digits: number = 0;\n    while (n) {\n \
    \       digits *= 10;\n        n -= n % 2;\n    }\n    return digits;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
