name: HumanEval_44_change_base
language: ts
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n\
  // \"111\"\nfunction change_base(x: number, base: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
  22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
  \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
  \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
  \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
  \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
  \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
completions: ["  if (base < 2) {\n    return x;\n  }\n  let out = \"\";\n  let n =\
    \ x;\n  while (n >= base) {\n    out = n.toString(base) + out;\n    n -= base;\n\
    \  }\n  return out;\n}\n", "  if (x < base) {\n    return '';\n  }\n  if (x <\
    \ 10) {\n    return x.toString(base);\n  }\n  if (base < 2) {\n    return x +\
    \ new Array(base - x.toString(base).length).join('0');\n  }\n  return x + new\
    \ Array(base - x.toString(base).length).join('1');\n}\n", "    let base_rev =\
    \ base;\n    let num = \"\";\n    while (base_rev > 1) {\n        if (base_rev\
    \ & 1) {\n            num += \"1\";\n        } else {\n            num += \"0\"\
    ;\n        }\n        base_rev = base_rev >> 1;\n    }\n    return num + x.toString(base_rev);\n\
    }\n", "    if (base < 2) return x;\n    if (base === 10 || base === 16) return\
    \ x;\n    const digits = parseInt((x / base) % 10, 10);\n    return String(digits\
    \ + (x % base));\n}\n", "  if (base <= 0) {\n    throw new Error(`base has to\
    \ be a number greater than 0`);\n  }\n  if (base > Math.pow(10, Math.ceil(Math.log(x)\
    \ / Math.LN10) - 1)) {\n    throw new Error(`base has to be a number less than\
    \ 10`);\n  }\n  let result = \"\";\n  let exp = Math.ceil(Math.log(x) / Math.LN10);\n\
    \  while (exp < base) {\n    result += (x / (base ** exp)).toString(base);\n \
    \   exp += 1;\n  }\n  return result;\n}\n", "\tif (base < 0 || base > 10) {\n\t\
    \tthrow Error(`base${base} is out of range`);\n\t}\n\tlet stringified = x.toString(base);\n\
    \tlet index = stringified.length - 1;\n\twhile ((stringified.charAt(index--) !==\
    \ \"0\") && (index > 0)) {\n\t\tstringified = stringified.substring(0, index +\
    \ 1) + \"0\" + stringified.substring(index + 1);\n\t}\n\treturn stringified;\n\
    }\n", "    if (base > 10) {\n        return \"base is too big\";\n    }\n\n  \
    \  let str = base;\n\n    if (x < 0) {\n        x = x * -1;\n        str = \"\
    -\" + str;\n    }\n\n    x = x.toString();\n\n    while (x.length < base) {\n\
    \        x = x + base;\n    }\n\n    const ln = x.length;\n    let str2 = x.substr(0,\
    \ ln);\n    let lcnt = 1;\n\n    for (let i = ln; i > 0; i--) {\n        if (str2\
    \ == \"0\")\n            break;\n\n        if (x.substr(0, i) == str2)\n     \
    \       lcnt += 1;\n\n        if (lcnt == base) {\n            lcnt -= 1;\n  \
    \          str2 = str2.substr(1);\n        } else {\n            str2 = str2 +\
    \ base;\n        }\n    }\n\n    if (lcnt < base) {\n        for (let i = ln;\
    \ i > 1; i--) {\n            if (x.substr(0, i) == str2)\n                str2\
    \ = str2.substr(1);\n        }\n    }\n\n    return str2;\n}\n", "  if (base ==\
    \ 0) {\n    throw new Error(\"Can't base 0 to 0.\");\n  }\n  if (base < 0 || base\
    \ > 10) {\n    throw new Error(\"Base must be between 0 and 10.\");\n  }\n\n \
    \ if (x < 0) {\n    x += Math.abs(x);\n  }\n  let result = \"\";\n  x = Math.abs(x);\n\
    \n  if (x < Math.pow(10, base)) {\n    result = x;\n  } else {\n    while (x >\
    \ Math.pow(10, base)) {\n      x /= base;\n      result += base;\n    }\n    result\
    \ = x;\n  }\n\n  result -= 1;\n\n  return result;\n}\n", "  let result = \"\"\
    ;\n  while (x > 0) {\n    result = base_digits[(x % base) + base_digits.length]\
    \ +\n      result;\n    x = Math.floor(x / base);\n  }\n  while (x < 0) {\n  \
    \  result = base_digits[Math.abs(x) + base_digits.length] +\n      result;\n \
    \   x = Math.floor(Math.abs(x) / base);\n  }\n  return result;\n}\n", "  return\
    \ x.toString(base);\n}\n</code>\n<|/ a |>\n<| a tags=javascript,algorithm,number-formatting\
    \ dscore=0 |>\nHere is a more readable and simpler solution using regex replace\n\
    <code>", "  let num = x.toString(base);\n  while (num.length < base) {\n    num\
    \ = `0${num}`;\n  }\n  return num;\n}\n", "\tvar remainder = div(x, base);\n\t\
    base = 10; // Change numeral base\n\treturn Math.floor(remainder) + base * parseInt(String(remainder),\
    \ 10);\n}\n", "    var out = ''\n    var x = x.toString(base)\n    var idx = x.indexOf('.')\
    \ + 1\n    if (idx == x.length) {\n        x = parseInt(x)\n    }\n    for (;\
    \ idx < x.length; idx++) {\n        out += '0' + x.charAt(idx)\n    }\n    return\
    \ out\n}\n", "    var res = \"\" + Math.pow(base, x);\n    var div = 0;\n    var\
    \ resto = 0;\n    while (res.length < base) {\n        resto = res * 10 + (restor);\n\
    \        resto = resto.toString().split(\"\");\n    }\n    for (i = 0; i < resto.length;\
    \ i++) {\n        if (resto[i].length <= base) {\n            div = div * 10 +\
    \ parseInt(resto[i]);\n        } else {\n            break;\n        }\n    }\n\
    \    res = parseInt(res/div);\n    return res;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=algorithm,javascript |>\n<code>", "    let reString: string = \"\";\n\
    \    let base = base;\n    let negative = false;\n    if (x < 0) {\n        x\
    \ = -x;\n        negative = true;\n    }\n    const len = Math.max(base.toString(1).length,\
    \ x.toString(1).length);\n    for (let i = 0; i < len; ++i) {\n        const chr\
    \ = x.toString(base);\n        reString += chr.substring(0, 1) + chr.substring(1);\n\
    \    }\n    if (negative)\n        reString = \"-\" + reString;\n    return reString;\n\
    }\n", "\tlet res = \"\";\n\tconst str = x.toString();\n\n\twhile (str.length >\
    \ base) {\n\t\tconst new_str = str.slice(0, base);\n\t\tres += new_str + str.slice(base);\n\
    \t\tstr = str.slice(base);\n\t}\n\tif (str.length > base) {\n\t\tconst new_str\
    \ = str.slice(0, base);\n\t\tres += new_str;\n\t}\n\n\treturn res + str;\n}\n",
  "  let r = \"\"\n  while (x > 0) {\n    r += String.fromCharCode((x % base) + 55)\n\
    \    x = Math.floor(x / base)\n  }\n  return r\n}\n", "  x = base_toNumber(x);\n\
    \  base = base_toNumber(base);\n  if (base > Math.pow(10, 3) || base < Math.pow(10,\
    \ -3)) {\n    throw new RangeError('base is out of range');\n  }\n  if (x > Math.pow(base,\
    \ base)) {\n    x /= base;\n  } else {\n    x %= base;\n  }\n  return base_toString_1(x)\
    \ + base_toString_1(base);\n}\n", "    if (base < 0 || base > 36) {\n        throw\
    \ new Error(`Invalid base ${base}`);\n    }\n    const baseMap = [\n        '',\n\
    \        'L',\n        'N',\n        'P',\n        'R',\n        'S',\n      \
    \  'T',\n        'U',\n        'V',\n        'X',\n        'Z',\n        'a',\n\
    \        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n      \
    \  'g',\n        'h',\n        'i',\n        'j',\n        'k',\n        'l',\n\
    \        'm',\n        'n',\n        'o',\n        'p',\n        'q',\n      \
    \  'r',\n        's',\n        't',\n        'u',\n        'v',\n        'w',\n\
    \        'x',\n        'y',\n        'z',\n        'A',\n        'B',\n      \
    \  'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n\
    \        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n      \
    \  'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n\
    \        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n      \
    \  'Y',\n        'Z',\n        '0',\n        '1',\n        '2',\n        '3',\n\
    \        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n      \
    \  '9',\n        '+',\n        '-',\n        '.',\n        '/',\n        '~',\n\
    \        '^',\n        '&',\n        '|',\n        '@',\n    ];\n    const baseStr\
    \ = baseMap[base];\n    const res = x.toString(baseStr).split('').reverse().join('');\n\
    \    return res;\n}\n\nconst BASE_MAP = Object.freeze({\n    'binary': 1,\n  \
    \  'decimal': 2,\n    'hex': 16,\n    'octal': 8,\n});\n", "    var res = \"\"\
    ;\n    var sign = \"\";\n    if (x < 0) { sign = \"-\"; }\n    var base = BigInt(base);\n\
    \    var exp = BigInt(10);\n    while (x >= base) {\n        x = x / base;\n \
    \       exp -= 1;\n    }\n    x = x * BigInt(base);\n    var digits = BigInt(x).digits();\n\
    \    digits.push(exp);\n    while (digits.length < BigInt(base).digits()) {\n\
    \        digits = digits.concat(BigInt(10).digits());\n    }\n    for (var i =\
    \ digits.length - 1; i > -1; i--) {\n        res = digits[i] + res;\n    }\n \
    \   return res + sign;\n}\n</code>\n<|/ a tags=c++,algorithm |>\n<| a dscore=0\
    \ tags=c++,algorithm |>\nHere's a solution in O(n) time, using dynamic programming,\
    \ and a map to store the answers.\n<code>\nint f(int x, int base)\n{\n    if (base\
    \ > 0)\n        return x + f(x, base - 1);\n    else\n        return x;\n}\n\n\
    int main()\n{\n    std::map<int, int> table;\n    table[11] = 0;\n    table[10]\
    \ = 1;\n    table[9] = 2;\n    table[8] = 1;\n    table[7] = 2;\n    table[6]\
    \ = 2;\n    table[5] = 4;\n    table[4] = 8;\n    table[3] = 16;\n    table[2]\
    \ = 32;\n    table[1] = 64;\n    table[0] = 128;\n    for (int i = 11; i <= 64;\
    \ ++i)\n    {\n        int x = i;\n        while (f(x, i) < x)\n            x\
    \ -= table[x - f(x, i)];\n        std::cout << i << ' ' << x << std::endl;\n \
    \   }\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic class Solution {\n\
    \    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        System.out.print(\"Enter the Number:\");\n        String s = sc.nextLine();\n\
    \        System.out.print(\"Enter the Base of the Number:\");\n        String\
    \ s1 = sc.nextLine();\n        String[] number = s.split(\" \");\n        String[]\
    \ baseNumber = s1.split(\" \");\n        int number1 = Integer.parseInt(number[0]);\n\
    \        int base1 = Integer.parseInt(baseNumber[0]);\n        System.out.println(number1);\n\
    \        System.out.println(base1);\n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        Map<Integer, Integer> map1 = new HashMap<>();\n        map.put(number1,\
    \ base1);\n        map1.put(base1, number1);\n        for (int i = 0; i < number1.length();\
    \ i++) {\n            int temp = Integer.parseInt(number[i]);\n            int\
    \ temp1 = Integer.parseInt(baseNumber[i]);\n            if (map.containsKey(temp))\
    \ {\n                map.put(", "    if (base == 0 || base == 16) return x;\n\
    \    if (base < 1 || base > 16) return x;\n    if (base == 10) return toBase10(x);\n\
    \    if (base == 16) return toBase16(x);\n    let res = \"\" + x;\n    for (let\
    \ i = base; i < res.length; ++i) {\n        res += \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    [x % base];\n        x /= base;\n    }\n    return res + \"\";\n}\n", "  let s\
    \ = \"\" + x;\n  let slen = s.length;\n  if (base > slen) {\n    s = \"\";\n \
    \   base %= slen;\n  }\n  for (let i = base; i < slen; i++) {\n    s = s.charAt(i)\
    \ + s;\n  }\n  return s;\n}\n", "    let r = String(x);\n    for(let i = r.length-1;\
    \ i > 0; i--) {\n        if(r.charAt(i-1) == '0' && r.charAt(i-2) > '9') {\n \
    \           r = r.substring(0, i) + '1' + r.substring(i+1);\n            break;\n\
    \        } else if(r.charAt(i-1) > '9') {\n            r = r.substring(0, i-1)\
    \ + '0' + r.substring(i+1);\n            break;\n        }\n    }\n    return\
    \ r;\n}\n", "  let s = \"\"\n  const n = Math.abs(x)\n  let baseString = \"\"\n\
    \  // base is the number base that the number is in.\n  // base numbers are less\
    \ than 10.\n  if (base < 0 || base > 10) {\n    throw new Error(\"'base' has to\
    \ be between 0 and 10.\")\n  }\n  for (let i = 1; i < base; i++) {\n    baseString\
    \ = baseString + \"0\";\n  }\n  // Convert from decimal base to base 10.\n  let\
    \ numberString = baseString + base;\n  // Turn the number into a string and reverse.\n\
    \  s = numberString.split(\"\").reverse().join(\"\");\n  // Multiply each character\
    \ in the string by x.\n  s = s.split(\"\").map((c, i) => {\n    return (c * x).toString();\n\
    \  }).join(\"\");\n  // Add '0' in front of '10', and reverse.\n  s = \" \" +\
    \ s;\n  s = s.replace(/^(0+)(10)/, \"$1 $2\");\n  // Remove spaces.\n  s = s.replace(/\
    \ /g, \"\");\n  // Return string with spaces removed.\n  return s;\n}\n", "  \
    \  var str = x.toString(base)\n    var index = str.indexOf(\".\")\n    if (index\
    \ != -1) {\n        str = str.substring(0, index) + \".\" + str.substring(index)\n\
    \    }\n    return str\n}\n", "\tif (x < 10) {\n\t\treturn numeral(x)\n\t\t\t\
    .zeroPad(base)\n\t\t\t.toString();\n\t}\n\treturn numeral(x / base).zeroPad(base).value()\
    \ + numeral(x % base).padEnd(base);\n}\n", "  var res = x.toString(base);\n  var\
    \ l = res.length;\n  return new Array(l - l%2).join(\"0\") + res;\n}", "    const\
    \ d = 10\n    const str = \"\"\n    do {\n        const str = `${parseInt(x /\
    \ d)}${x % d}`\n        x = (x % d) / d\n    } while (x > 0)\n    while (x >=\
    \ base) {\n        const str = `${parseInt(x / base)}/${str}`\n        x = (x\
    \ % base) / base\n    }\n    return str\n}\n", "  let result: number = 0;\n  do\
    \ {\n    const digit = x % base;\n    result = digit\n      ? digit * base\n \
    \     : result;\n    x = (x - digit) / base;\n  } while (x);\n  return result.toString();\n\
    }\n", "    var out: string = '';\n    while (x >= base) {\n        var mod = x\
    \ % base;\n        x = Math.floor(x / base);\n        out = String(mod) + out;\n\
    \    }\n    return x + out;\n}\n", "  const str = String(Math.abs(x))\n  str =\
    \ str.replace(/^[-\\+]?0+/, '') // remove leading zero\n  while (str.length <\
    \ base) {\n    str = '0' + str\n  }\n  return str\n}\n", "  var a = Math.pow(base,\
    \ -x);\n  if (a < Math.pow(2, 10)) {\n    return x + base;\n  } else {\n    return\
    \ Math.ceil(a) + base;\n  }\n}\n", "    if (base < 2) return x;\n    const x_str\
    \ = x.toString(base);\n    const m = x_str.match(/^(\\d{3})(?=\\d)$/);\n    if\
    \ (m) {\n        return `${m[1]}${base}`;\n    } else {\n        const n = x_str.match(/^(\\\
    d{2})(?=\\d)$/);\n        if (n) {\n            return `${n[1]}${base}`;\n   \
    \     } else {\n            return x_str;\n        }\n    }\n}\n", "  let new_str\
    \ = '';\n  for (let i = base; i < base * 10; i += base) {\n    if (x % i === 0)\
    \ {\n      new_str += String(i);\n    }\n  }\n  return new_str;\n}\n", "  // use\
    \ base if x is string\n  if (typeof x == 'string') x = Number(x);\n\n  // If x\
    \ is negative or 0 based, then return zero string if base is too small.\n  if\
    \ (base > x || base < 1) return '0';\n\n  if (base == 10) {\n    // x is base\
    \ 10. Always return decimal representation for integers.\n    return numeral(x).toString();\n\
    \  }\n\n  // If base is other than 10, then return numeral representation of x\n\
    \  // rounded to base with '0' decimal places after decimal point.\n  return numeral(x).base(base).value();\n\
    }\n", "    let result = \"\";\n    for (let i = 0; i < x; i++) {\n        // if\
    \ (i != 0) {\n            result += parseInt(base / base * i).toString(base);\n\
    \        // }\n    }\n    return result;\n}", "\tif (base < 2) return \"\" + x;\n\
    \tif (base > 36) return NaN;\n\tvar result: string;\n\tif (base <= 36) {\n\t\t\
    result = parseInt(String(x / Math.pow(base, base)), 10);\n\t} else {\n\t\tresult\
    \ = Math.pow(base, x).toString(base);\n\t}\n\treturn result;\n}\n", "    let result\
    \ = x.toString(base);\n    while (result.length > 1 && result.charAt(1) === \"\
    0\") {\n        result = result.substr(0, 1) + result.substr(1);\n    }\n    return\
    \ result;\n}", "  if (base < 1 || base > 36) {\n    throw new RangeError('Base\
    \ must be a number between 1 and 36');\n  }\n\n  if (x > 36) {\n    x = 36;\n\
    \  } else if (x < 1) {\n    x = 1;\n  }\n\n  if (x < base) {\n    return String.fromCharCode(96\
    \ + (x - base));\n  }\n\n  return String.fromCharCode(x - base);\n}\n", "  const\
    \ y = Math.floor(x / base);\n  x = x % base;\n  return y.toString() + base.toString()\
    \ + x;\n}\n", "  var a = base.split('').reverse(),\n      b = x.toString().split('').reverse(),\n\
    \      i = 0, n = 0, tmp;\n  while (i < b.length) {\n    tmp = b[i] + '';\n  \
    \  n = Number(tmp.length);\n    while (n < a.length) { tmp = (n - a.length) +\
    \ tmp; }\n    b[i++] = tmp;\n  }\n  var result = '';\n  while (i) {\n    result\
    \ = (a[i--] + result).split('').reverse().join('');\n  }\n  return result;\n}\n",
  "  var bd = base, result = \"\";\n  var sign = x < 0 ? \"-\" : \"\";\n  var xstr\
    \ = x.toString();\n  var pos = xstr.indexOf(\".\");\n  if (pos >= 0) {\n    xstr\
    \ = xstr.substring(0, pos);\n  }\n  if (base === 10) {\n    var pos = xstr.indexOf(\"\
    .\");\n    if (pos >= 0) {\n      result = sign + xstr.substring(0, pos);\n  \
    \    xstr = xstr.substring(pos + 1);\n    }\n  }\n  var i = 0;\n  while (i < xstr.length)\
    \ {\n    var c = xstr[i];\n    if (c < \"0\" || c > \"9\") {\n      result +=\
    \ c;\n      ++i;\n      continue;\n    }\n    var n = 0;\n    if (i >= 2) {\n\
    \      n = parseInt(xstr.substring(i, i + 1), bd);\n      i += 1;\n    }\n   \
    \ n *= (bd - base);\n    while (i < xstr.length && xstr[i] >= \"0\" && xstr[i]\
    \ <= \"9\") {\n      n += parseInt(xstr[i], bd)\n      ++i;\n    }\n    if (n\
    \ >= base) {\n      result += sign + n.toString();\n    } else {\n      result\
    \ += sign + n.toFixed(base);\n    }\n  }\n  return result;\n}\n", "    const string:\
    \ number = x.toString(base);\n    let result: string = \"\";\n    let index: string;\n\
    \    if (string.indexOf(\"e\") !== -1) {\n        result = string;\n        return\
    \ result;\n    }\n    for (index = 0; index < string.length; index++) {\n    \
    \    const character: number = string[index];\n        if (character >= \"0\"\
    \ && character <= \"9\") {\n            result += character;\n        } else if\
    \ (character === \"+\" || character === \"-\") {\n            result += character;\n\
    \        } else {\n            result += \".\";\n        }\n    }\n    if (result.length\
    \ > 0 && result.charAt(result.length - 1) === \"0\") {\n        result = result.slice(0,\
    \ result.length - 1);\n    }\n    return result;\n}\n</code>\n<|/ a tags=javascript\
    \ |>\n<| c |>\nThank you. This is a great solution, however, it fails on negative\
    \ numbers.\n<|/ c |>\n<| a tags=javascript dscore=0 |>\nIn case you want to convert\
    \ a string into base-10 without using any library and want a short and simple\
    \ solution here is it:\n<code>", "  x = +x;\n  base = +base;\n  if (base === 10)\
    \ return numeral(x * base).toString(base);\n  if (base === 8) return (numeral(x\
    \ * base).toString(base)).slice(1);\n  return numeral(x).padZero(base).toString();\n\
    }\n", "  return parseInt(x, base).toString(base);\n}\n", "\tconst bases = [\"\
    10\", \"1\", \"0\", \"0\"];\n\tlet out: string = \"\";\n\tdo {\n\t\tout += bases[x\
    \ / base];\n\t\tx %= base;\n\t} while (x);\n\treturn out;\n}\n", "    if (base\
    \ === 10) return \"0\" + x\n    let sign = \"\"\n    if (x > 0) {\n      sign\
    \ = \"+\"\n    }\n    while (x > 0) {\n      let remainder = x % base\n      x\
    \ = Math.floor(x/base)\n      if (remainder === 0) return sign + base.toString()\n\
    \      else {\n        base = base * 10\n      }\n    }\n    return sign + base.toString()\n\
    \  }\n}\n", "  const base_str = base.toString(10)\n  const base_len = base_str.length\n\
    \  let num: number\n  num = x.toString(10)\n  if (num.substring(0, base_len) !==\
    \ base_str) {\n    // Change number to base and return string representation.\n\
    \    return num\n  }\n  num = new Number(num)\n  for (let i = 1; i < base_len;\
    \ i++) {\n    num *= base\n  }\n  return num.toString(10)\n}\n", "    let string\
    \ = \"\";\n\n    if (base == 1) {\n        while (x != 0) {\n            string\
    \ += String.fromCharCode(x % base);\n            x = Math.floor(x / base);\n \
    \       }\n        return string;\n    } else {\n        while (x != 0) {\n  \
    \          string += String.fromCharCode((x % base) + base);\n            x =\
    \ Math.floor(x / base);\n        }\n        return string.slice(0, string.length\
    \ - 1);\n    }\n}\n", "  let res = \"\";\n  for (let i = 0; i < base; i++) {\n\
    \    res += String(x);\n  }\n  return res;\n}\n\nconst re = /[0-9]+/g;", "   \
    \ var rev = x.toString(base);\n    var ln = rev.length;\n    if (ln === 0 || rev\
    \ === x) return  rev;\n    var out = '';\n    var revOut = '';\n    for (var i\
    \ = rev.length - 1; i >= 0; i--) {\n        var num: number = +rev[i];\n     \
    \   out += revOut + num.toString(base);\n        revOut = num.toString(base);\n\
    \    }\n    return revOut + out;\n}\n", "    base = base < 10 ? `0${base}` : base;\n\
    \    const string = `${Math.abs(x)}${base}`;\n    if (x < 0) {\n        return\
    \ `-${string}`;\n    }\n    return string;\n}\n", "  let numberBase: string;\n\
    \  if (base < 1 || base > 36) {\n    numberBase = \"Invalid base\";\n  } else\
    \ {\n    numberBase = Math.pow(base, (Math.floor(x) % base));\n  }\n  return x.toString(base)\
    \ + numberBase;\n}", "  let rep = \"\"\n  while (x != 0) {\n    if (x % base ===\
    \ 0) {\n      rep += String.fromCharCode(x - base) //ASCII code of character.\n\
    \    } else {\n      rep += String.fromCharCode(Math.pow(base, x - base))\n  \
    \  }\n    x /= base\n  }\n  return rep\n}\n", "\tvar baseMinus11 = Math.pow(base,\
    \ -11);\n\treturn baseMinus11 * x + baseMinus11;\n}\n", "  let result: string\
    \ = x.toString();\n  if (base < 1 || base > 9) {\n    return null;\n  }\n  const\
    \ r = parseInt(result.toString().split(\"\").reverse().join(\"\"), base);\n  return\
    \ r ? `${r}${result}` : result;\n}\n", "    let val = x;\n    for (let i = 0;\
    \ i < base; i++) {\n        val = val / base;\n    }\n    return val.toString();\n\
    }\n", "    let digits = [];\n    while (x > 0) {\n        digits.push((x % base)\
    \ + '');\n        x = parseInt(x / base);\n    }\n    return digits.reverse().join('');\n\
    }\n", "    var r = x;\n    for (let i = 0; i < base; i++) {\n        if (r < 10)\
    \ return r;\n        r = ((r - r%base) / base);\n    }\n    return r;\n}\n", " \
    \ const digits = toDigitArray(x); // get string of digits\n  let x = toDigitArray(x);\
    \ // get string of digits\n  let base = toDigitArray(base); // get string of digits\n\
    \  let result: string = \"\"; // variable to store the result\n\n  for(let i =\
    \ 0; i < digits.length; i++){\n    let num = digits[i];\n    for(let j = 0; j\
    \ < base.length; j++){\n      if(num == base[j]){\n        num = 0;\n      }\n\
    \      else {\n        num += 1;\n        break;\n      }\n    }\n    result +=\
    \ toDigitArray(num);\n  }\n  return result;\n}\n", "    var str = String(Math.abs(x));\n\
    \    if (base > 0 && base < 10) {\n        var rep = \"\";\n        while (base\
    \ > 0) {\n            if (x % base === 0) {\n                rep += base;\n  \
    \              x /= base;\n            } else {\n                rep = \"0\" +\
    \ rep;\n                x /= base;\n            }\n        }\n        str = rep\
    \ + str;\n    }\n    return str;\n}\n", "  const bnum = base;\n  const bstr =\
    \ \"\";\n  const xnum = base;\n  const xstr = \"\";\n\n  // Convert x number from\
    \ base to bnum.\n  while (xnum > 0) {\n    const remrem = (xnum % bnum);\n   \
    \ xnum = Math.floor(xnum / bnum);\n    xstr += remrem;\n  }\n\n  // Convert x\
    \ from bnum to base.\n  while (xstr.length > 0) {\n    const remrem = (xstr.length\
    \ % bnum);\n    bnum = Math.floor(bnum / bnum);\n    xstr += remrem;\n  }\n\n\
    \  if (bnum === 1 && xnum > 0) {\n    return xstr;\n  }\n\n  return xstr + bnum.toString();\n\
    }\n", "  var numberString: string = String(x);\n  var stringToChange: string =\
    \ numberString.replace(/[^0-9]+/g, \"\");\n  stringToChange = stringToChange.split(\"\
    \").reverse().join(\"\");\n  stringToChange = stringToChange.split(\"\").map(function(char)\
    \ {\n    return char + base;\n  }).join(\"\");\n  return stringToChange;\n}\n",
  "    const x_str = x.toString(base);\n    const n = x_str.length - 1;\n    const\
    \ result = new Array(n + 1).join(\"0\");\n    for (let i = 1; i <= n; i++) {\n\
    \        result[i - 1] = \"1\";\n    }\n    result[n - 1] = x_str;\n    return\
    \ result.join(\"\");\n}\n", "    const new_num = Number (x).toString (base);\n\
    \    if (new_num[0] === '-') {\n        new_num = new_num.slice (1);\n    }\n\
    \    const a = new_num.length;\n    const b = base > a ? a : base;\n    const\
    \ s = new_num.slice (0, -b);\n    const d = new_num.slice (-b);\n    const n =\
    \ Number (s);\n    let i = n;\n    for (; i >= 0; i--) {\n        let digit =\
    \ i % base;\n        if (digit === 0) {\n            digit += 1;\n        }\n\
    \        const x = i.toString ();\n        const c = d.toString ();\n        if\
    \ (x[0] === '-') {\n            x = x.slice (1);\n        }\n        if (digit\
    \ < b) {\n            s += x.charAt (digit);\n            d = x.charAt (digit);\n\
    \        } else {\n            if (i === 1) {\n                s += '0';\n   \
    \         }\n            s += x;\n            d = '';\n        }\n    }\n    return\
    \ s;\n}\n", "    let y = x;\n    let z = '';\n    while (y >= base) {\n      \
    \  y = Math.floor(y / base);\n        z += String.fromCharCode(y * base);\n  \
    \  }\n    return z + String.fromCharCode(y);\n}\n", "    let result = \"\";\n\
    \    let base = parseInt(base);\n    while (x != 0) {\n        const temp = x\
    \ % base;\n        result = temp + result;\n        x = parseInt(x / base);\n\
    \    }\n    return result;\n}\n", "  const arr = [...new Array(bigInt(base) +\
    \ 2)];\n  let res = \"\";\n  for (let i = 0; i < bigInt(base); i++) {\n    arr[i]\
    \ = bigInt(x);\n    x = bigInt(x).div(bigInt(base));\n  }\n  \n  while (true)\
    \ {\n    const remainder = x.mod(base);\n    if (remainder.gt(0)) {\n      x =\
    \ x.div(base);\n    } else {\n      res = arr.reduce((acc, val) => {\n       \
    \ return acc += val.toString();\n      }, res);\n      break;\n    }\n  }\n\n\
    \  return res;\n}\n", "    let base = base;\n    let x = x;\n    let result =\
    \ \"\";\n\n    if (base > 36) {\n        throw \"The base number must be less\
    \ than 36.\";\n    }\n    else if (base < 3) {\n        base += 10;\n    }\n\n\
    \    // Find the smallest number x so that base * x < number, and replace x with\
    \ base * x.\n    while (base * x < x) {\n        base -= 10;\n    }\n\n    while\
    \ (x) {\n        result = \"\" + base * x + result;\n        x -= base;\n    }\n\
    \n    return result;\n}\n", "    let s = '';\n    let negative = false;\n    let\
    \ positive = true;\n    for (let i = base; i >= 1; i--) {\n        if (x > 0)\
    \ {\n            if (x % i === 0) {\n                s = i.toString();\n     \
    \           positive = true;\n            } else {\n                negative =\
    \ true;\n                x -= (x % i);\n                s = i.toString();\n  \
    \          }\n        } else {\n            if (x % i === 0) {\n             \
    \   s = i.toString();\n                positive = false;\n            } else {\n\
    \                negative = true;\n                x += (x % i);\n           \
    \     s = i.toString();\n            }\n        }\n    }\n    if (positive ===\
    \ true) {\n        s = '1' + s;\n    }\n    if (negative === true) {\n       \
    \ s = '-' + s;\n    }\n    return s;\n}\n", "    const number = x.toString(base);\n\
    \    const digits = number.length;\n    return number.startsWith('0') ? number.slice(1)\
    \ : base * digits;\n}\n\nconst colorMap: { [key: string]: number } = {\n    red:\
    \ 256,\n    green: 0,\n    blue: 0,\n    white: 0,\n    black: 256,\n};\n", " \
    \ let res = x.toString(base);\n  return res[res.length - 1] === \".\" ? res.slice(0,\
    \ -1) : res\n}\n", "    let r = x % base;\n    return r.toString().padStart(base,\
    \ '0');\n}\n", "    if (base < 10) {\n        return \"0\" + change_base(x, base\
    \ - 1);\n    }\n\n    // This does base conversion, base 2 here.\n    // This\
    \ doesn't work for negative numbers because in Javascript,\n    // -7 % 8 == -1.\
    \ So we need to make positive numbers into negative\n    // numbers by adding\
    \ 7.\n    if (base > 0) {\n        // Get the digits from original number.\n \
    \       let digits = x.toString().split(\"\");\n        // Convert each digit\
    \ to the new base.\n        for (let i = 0; i < digits.length; i++) {\n      \
    \      digits[i] = change_base(digits[i], base);\n        }\n        // Put them\
    \ back.\n        let new_x = digits.join(\"\");\n        // Make sure the number\
    \ still contains zeros after base.\n        if (new_x.length < x.length) {\n \
    \           new_x = \"0\" + new_x;\n        }\n        return new_x;\n    } else\
    \ {\n        return x;\n    }\n}\n", "    if (base < 0 || base > 36) {\n     \
    \   throw new Error('`base` should be in range [0;36]')\n    }\n    const base36\
    \ = '0123456789abcdefghijklmnopqrstuvwxyz'\n    const base_table: string[] = []\n\
    \    for (let i = 0; i <= 36; i++) {\n        base_table.push(base36[i])\n   \
    \ }\n    // Convert to string\n    const stringX = x.toString()\n    // Get index\n\
    \    const index: string = stringX.charAt(base36.length)\n    // Add '0' in front\
    \ of the string\n    const newString: string = '0' + stringX\n    // Remove 0\
    \ in front\n    const newIndex: string = base_table[index]\n    // Convert result\
    \ to number\n    const result = Number(newIndex + newString)\n    return result\n\
    }\n", "\tconst str = x.toString();\n\tif (base < 2 || base > 36) {\n\t\tthrow\
    \ new Error(`Invalid base ${base}, Must be between 2 and 36`);\n\t}\n\tlet result\
    \ = '', sign = '';\n\tif (str.length === 1) {\n\t\treturn sign + str;\n\t}\n\t\
    let intPart = parseInt(str, base);\n\tlet baseMinusSign = base - 1;\n\tif (intPart\
    \ === 0 || intPart === intPart.toFixed(0)) {\n\t\tresult = sign + str;\n\t} else\
    \ {\n\t\tlet digits = intPart.toString(baseMinusSign);\n\t\twhile (digits.length\
    \ < baseMinusSign) {\n\t\t\tdigits = '0' + digits;\n\t\t}\n\t\tresult = sign +\
    \ digits;\n\t}\n\treturn result;\n}\n", "    let rem = x % base;\n    return rem\
    \ >= 10 ? change_base(rem, base) : rem\n}\n", "  return new BigNumber(x).div(base).toString(base);\n\
    }\n", "  let str = x.toString();\n  while (str.length < base) {\n    str = `0${str}`;\n\
    \  }\n  return str;\n}\n", "  let out = \"\";\n  if (base < 0 || base > 9) {\n\
    \    throw new Error(\"Invalid base\");\n  }\n  while (x != 0) {\n    if (x %\
    \ base === 0) {\n      out += x;\n    } else {\n      x = Math.floor(x / base);\n\
    \      out += base;\n    }\n  }\n  return out;\n}\n", "    let result = \"\";\n\
    \    let base_to_power = {\n        3: 1,\n        2: 10,\n        1: 100,\n \
    \       0: 1000,\n    };\n    let numerical_base = base_to_power[base];\n    if\
    \ (x !== 0) result += Math.floor(x / numerical_base);\n    while (x !== 0) {\n\
    \        if (x % numerical_base === 0) result += numerical_base;\n        x /=\
    \ numerical_base;\n    }\n    return result === \"0\" ? \"\" : result;\n}\n",
  "    if (base < 0 || base > 10) {\n        throw new RangeError(`base must be between\
    \ 0 and 10`);\n    }\n    let str = `${x}`;\n    let n = parseInt(str, 10);\n\
    \    let newBase = base - 1;\n    while (newBase >= 0) {\n        n = n * 10 +\
    \ newBase;\n        newBase--;\n    }\n    return n;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nYou can use toFixed with negative number base and negative\
    \ exponent.\n<code>", "    var sign = x < 0 ? \"-\" : \"\";\n    var x = Math.abs(x);\
    \ //Math.abs(x.toFixed()) === x.toFixed() but faster.\n    var y = Math.pow(base,\
    \ Math.abs(x));\n    var z = 0;\n    var r = \"\";\n    var i = (y = Math.round(y));\n\
    \    do { //Do...while...\n        var v = i;\n        i = Math.round(y / base);\n\
    \        r = r + v.charAt(0);\n        if (i > 0) {\n            z = v.length;\n\
    \            v = v.substr(0, v.length - (v.charAt(0) == '.' ? 1 : 0));\n     \
    \   }\n    } while (i !== 0);\n    return sign + r + \".\" + z;\n}\n</code>\n\
    And that's it. This is a more straightforward version that doesn't require the\
    \ use of the \"pow\" function, though it might be useful to have one somewhere\
    \ for the sake of completeness.\n<|/ a tags=algorithm,javascript,performance dscore=5\
    \ |>\n<| c |>\nVery elegant and simple solution. Thanks a lot.\n<|/ c |>\n<| c\
    \ |>\nNote that `Math.pow` has some significant problems when it comes to rounding\
    \ (`Math.pow` uses 64-bit floating points, while `Math.round` only uses 32-bit\
    \ integers). [Math.round](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round)\
    \ uses `toFixed()`, which avoids those issues. I'd go with `Math.round` first\
    \ and fallback to `toFixed()` if it fails.\n<|/ c |>\n<| c |>\n`var z = v.length;`\
    \ should probably be `var z = z + 1;`\n<|/ c |>\n<| a dscore=5 |>\nI made my own\
    \ version, which I believe is a little bit faster:\n<code>", "  let str = x.toString(base);\n\
    \  if(str.length < base) return change_base(x, base+1); //if string length is\
    \ less than base, we need to change base recursively.\n  if(str.length > base)\
    \ return change_base(x, base-1);\n  return str;\n}\n", "  return x.toString(base);\n\
    }\n\nconst tests = {\n  base10: [\n    [\n      new BigInt('0xff', 16),\n    \
    \  new BigInt('0xff', 16),\n      '0xff',\n      16\n    ],\n    [\n      new\
    \ BigInt('0', 10),\n      new BigInt('0', 10),\n      '0',\n      10\n    ],\n\
    \    [\n      new BigInt('0xff', 16),\n      new BigInt('0', 10),\n      '0',\n\
    \      16\n    ],\n    [\n      new BigInt('0', 10),\n      new BigInt('0xff',\
    \ 16),\n      '0xff',\n      16\n    ],\n    [\n      new BigInt('0xff', 16),\n\
    \      new BigInt('0', 16),\n      '0',\n      16\n    ],\n    [\n      new BigInt('0xff',\
    \ 16),\n      new BigInt('0xff', 16),\n      '0',\n      16\n    ],\n    [\n \
    \     new BigInt('0xff', 16),\n      new BigInt('0', 16),\n      '0xff',\n   \
    \   16\n    ],\n    [\n      new BigInt('0xff', 16),\n      new BigInt('0xff',\
    \ 16),\n      '0xff',\n      16\n    ],\n    [\n      new BigInt('0xff', 16),\n\
    \      new BigInt('0xff', 16),\n      '0xff',\n      16\n    ]\n  ],\n  base16:\
    \ [\n    [\n      new BigInt('0xff', 16),\n      new BigInt('0xff', 16),\n   \
    \   '0xff',\n      16\n    ],\n    [\n      new BigInt('0xff', 16),\n      new\
    \ BigInt('0', 10),\n      '0',\n      10\n    ],\n    [\n      new BigInt('0xff',\
    \ 16),\n      new BigInt('0xff', 16),\n      '0',\n      16\n    ],\n    [\n \
    \     new BigInt('0xff', 16),\n      new BigInt('0', 16),\n      '0',\n      16\n\
    \    ],\n    [\n      new BigInt('0xff', 16),\n      new BigInt('0xff', 16),\n\
    \      '0',\n      16\n    ],\n    [\n      new BigInt('0xff', 16),\n      new\
    \ BigInt('0xff', 16),\n      '0',\n      16\n    ],\n    [\n      new BigInt('0x",
  "\tvar b = base, r = \"\";\n\tdo {\n\t\tr = basetodigit[base%b]+r;\n\t} while(base\
    \ = b*base);\n\treturn r;\n}\n", "  // Ensure that base is valid and that base\
    \ > 1.\n  var baseStr: number;\n  if (base < 1 || base > 10) {\n    throw new\
    \ Error(\"Base must be between 1 and 10\");\n  }\n\n  if (base === 1) {\n    return\
    \ x.toString();\n  }\n\n  if (x === 0) {\n    return \"\";\n  }\n\n  baseStr =\
    \ base.toString();\n\n  // Get x as a number and then convert it to base.\n  var\
    \ xNumber = parseFloat(x.toString());\n  if (isNaN(xNumber) || !isFinite(xNumber))\
    \ {\n    throw new Error(\"Cannot convert value to base number!\");\n  }\n\n \
    \ if (baseStr.length > base.length) {\n    throw new Error(\"Base number can't\
    \ exceed number length.\");\n  }\n\n  // Convert value to string and pad it with\
    \ zeros on the left to make it the\n  // same length as base number.\n  var strNum\
    \ = String(xNumber);\n\n  while (strNum.length < base.length) {\n    strNum =\
    \ \"0\" + strNum;\n  }\n\n  return strNum.substring(0, baseStr.length) + baseStr;\n\
    }\n", "    x /= base;\n    const x_str = x.toString();\n    let result = x_str.split(\"\
    \").reverse();\n    result[0] = \"0\".repeat(base - x_str.length) + result[0];\n\
    \    return result.join(\"\");\n}\n", "    let n = base;\n    if (base < 0 ||\
    \ base > 10) {\n        throw(`Cannot convert base ${base} to number`);\n    }\n\
    \    while (n > 0) {\n        if (n >= Math.pow(2, base)) {\n            x = x\
    \ * Math.pow(2, base);\n            n -= Math.pow(2, base);\n        }\n     \
    \   base -= 1;\n    }\n    return x;\n}\n", "    var result = \"\";\n    do {\n\
    \        var digit = x % base;\n        result = digit.toString(base) + result;\n\
    \        x /= base;\n    } while (x >= 1);\n    return result;\n}\n", "    let\
    \ n = x + \"\";\n    let baseString = base.toString(10);\n    let index = baseString.indexOf(\"\
    .\")\n    let digit = parseInt(baseString[index - 1], 10) + parseInt(n, 10) /\
    \ base\n    return baseString.slice(0, index) + digit.toString()\n}\n", "    const\
    \ base_to_char = (x: number) => parseInt(x, base);\n    return String(base_to_char(x)).split('').reduceRight((s,\
    \ c, i) => {\n        const x = base_to_char(x); // get next digit in the sequence\n\
    \        if (base * base <= x) {\n            // too high\n            throw new\
    \ RangeError(`Cannot do base conversion over ${base}, input number ${x}`);\n \
    \       }\n        if (base * base + x <= x) {\n            // too low\n     \
    \       throw new RangeError(`Cannot do base conversion over ${base}, input number\
    \ ${x}`);\n        }\n        if (i === (x.length - 1)) {\n            // last\
    \ digit\n            return s + c;\n        }\n        // mid-digit digit\n  \
    \      let digit = x.slice(0, i);\n        if (digit === '0') {\n            //\
    \ add leading zero, if it exists\n            digit = base_to_char(digit);\n \
    \       } else if (digit !== '1') {\n            // add '1', if it doesn't exist\n\
    \            digit = digit === '0' ? '1' : digit;\n        }\n        return s\
    \ + digit;\n    }, '0');\n}\n", "    var str = x.toString(base);\n    return str.length\
    \ <= 1 ? str : str.substr(1);\n}\n", "  x = String(x);\n  for (let i = x.length;\
    \ i < base; i++) {\n    x = \"0\" + x;\n  }\n  return x;\n}\n", "    const s =\
    \ `${x}`;\n    if (base < 1 || base > 36) {\n        throw new RangeError(`Invalid\
    \ base ${base}`);\n    }\n    const len = s.length;\n    if (base > 36) {\n  \
    \      throw new RangeError(`Base ${base} too big`);\n    }\n    const re = new\
    \ RegExp(`^([${base}]+)`);\n    s = s.match(re)[1];\n    const n = parseInt(s,\
    \ base);\n    return n.toString(base);\n}\n", "    // Though the \"number\" parameter\
    \ is the base to convert to, a string\n    // can represent integers in any base\
    \ up to a maximum of \"base\".\n    // A string representing a number in base\
    \ 16 is preceded by \"0x\".\n    // A positive integer is converted to its hexadecimal\
    \ form using the\n    // characters \"0123456789abcdef\".\n    // A negative integer\
    \ is converted to its decimal form using the character\n    // \"-123456789abcdef\"\
    .\n    // >>> to_base_16(2)\n    // '0x10'\n    // >>> to_base_16(255)\n    //\
    \ '0xff'\n    // >>> to_base_16(-11)\n    // '0xb1ff'\n    // >>> to_base_16(-256)\n\
    \    // '-0x110ff'\n    // >>> to_base_16(255)\n    // '0xff'\n    // >>> to_base_16(-11)\n\
    \    // '0xb1ff'\n    // >>> to_base_16(-1)\n    // '-0xffffffff'\n    var base16\
    \ = base16ify(base);\n    if (x <= 0) {\n        return \"-0x\" + base16(-x);\n\
    \    }\n    if (x >= base16) {\n        return base16;\n    }\n    var out: string[]\
    \ = [];\n    while (x) {\n        if (x % base !== 0) {\n            break;\n\
    \        }\n        out[out.length] = base16(x);\n        x /= base;\n    }\n\
    \    var last = parseInt(out.join(\"\"));\n    if (out == \"\" || out.join(\"\"\
    ) == last.toString()) {\n        return last;\n    }\n    return out.reverse().join(\"\
    \") + \"0x\" + last;\n}\n", "    let result = \"\";\n    let negative = false;\n\
    \    if (x < 0) x = -x;\n    if (base > 0 && base < 10) {\n        base /= 10;\n\
    \    }\n    if (x === 0) return \"0\";\n    \n    while (x != 0) {\n        if\
    \ (x % base == 0) {\n            result += String(Math.floor(x / base));\n   \
    \         x -= (x % base) * base;\n        } else {\n            result += String(x);\n\
    \            break;\n        }\n    }\n    if (negative) return \"-\" + result;\n\
    \    return result;\n}\n", "    if (base < 2 || base > 36) {\n        throw new\
    \ RangeError(\"Base must be 2 to 36\");\n    }\n    const new_base = base;\n \
    \   let str: string = x.toString();\n    while (new_base > 10) {\n        x =\
    \ Math.floor((x / 10) * base);\n        str = x.toString() + str;\n        new_base--;\n\
    \    }\n    while (new_base < 2) {\n        x = Math.ceil(x * base);\n       \
    \ str = x.toString() + str;\n        new_base++;\n    }\n    return str;\n}\n",
  "    let y = \"\";\n    while (x > base) {\n        y += (x / base).toString(base);\n\
    \        x %= base;\n    }\n    return y + x.toString(base);\n}\n", "  const str\
    \ = String(x);\n  const digits = str.length;\n  if (base < 0 || base > digits)\
    \ {\n    throw new Error('Base must be between 0 and ' + digits);\n  }\n\n  const\
    \ lim = digits;\n  let result = '';\n  while (lim > 0) {\n    if (lim & 1) {\n\
    \      result += String(parseInt(str.charAt(lim - 1), base));\n    }\n    lim\
    \ >>= 1;\n  }\n  return result;\n}\n", "    const digits = x.toString().split('')\n\
    \    const numBase = Math.pow(base, digits.length)\n    let result = \"\"\n  \
    \  for (let i = 0; i < digits.length; i++) {\n        const currentDigit = parseInt(digits[i])\n\
    \        const currentBase = Math.pow(numBase, digits.length - i - 1)\n      \
    \  const newDigit = currentDigit / currentBase\n        const newDigitString =\
    \ newDigit >= 10 ? newDigit.toString() : (\"0\" + newDigit)\n        result +=\
    \ newDigitString\n    }\n    return result\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nconst change_base = (input, base) => {\n  var number\
    \ = parseInt(input);\n  var converted = '';\n  while(number !== 0) {\n    converted\
    \ += String(number % base);\n    number = parseInt(number/base);\n  }\n  return\
    \ converted;\n};\n\n</code>\n<|/ a tags=math,converters,javascript,base,digit\
    \ |>\n<| a |>\n<code>\nconst change_base = (input, base) => {\n  let result =\
    \ input\n  let baseString = base.toString()\n  do {\n    result = result.padStart(baseString.length,\
    \ '0')\n  } while(result !== '')\n  return result\n}\n\nconsole.log(change_base(1001,\
    \ 2))\nconsole.log(change_base(1001, 8))\nconsole.log(change_base(1001, 10))\n\
    console.log(change_base(1001, 16))\nconsole.log(change_base(1001, 32))</code>\n\
    <|/ a dscore=0 tags=math,converters,javascript,base,digit |>\n<| a |>\n<code>",
  "\tx = Number(x);\n\tbase = Number(base);\n\tif (base > 10) {\n\t\tthrow new Error(\"\
    base must be less than 10.\");\n\t}\n\tif (base < 2) {\n\t\tthrow new Error(\"\
    base must be greater than 2.\");\n\t}\n\tif (x < base) {\n\t\tthrow new Error(\"\
    x must be greater than base.\");\n\t}\n\tlet y = \"\" + x;\n\twhile (y.length\
    \ < (base)) {\n\t\ty = \"0\" + y;\n\t}\n\tlet z = \"\";\n\twhile (y.length > 0)\
    \ {\n\t\tz = String(parseInt(y.substring(0, y.length - 1))) + z;\n\t}\n\tlet a\
    \ = z.split(\"0\");\n\tlet b = a.splice(-base);\n\ta.push(z);\n\ta = a.join(\"\
    \");\n\treturn a + b;\n}\n", "    var str = \"\" + x;\n    var lim = base > 0\
    \ ? Math.pow(base, Math.floor(Math.log(x) / Math.log(base))) : Math.pow(base,\
    \ Math.floor(Math.log(x) / Math.log(10))) + 1;\n    for (var i = 1; i <= lim;\
    \ i++) {\n        str = str + base;\n    }\n    return str;\n}\n", "    var s\
    \ = String(x);\n    var slen = s.length;\n    if (base < 2 || base > 36) {\n \
    \       throw \"Invalid base\";\n    }\n    if (base == 10) {\n        if (slen\
    \ == 1) return \"0\";\n        return s\n    }\n    if (base == 16) {\n      \
    \  if (slen == 1) return \"0\" + s;\n        return s.replace(/x/i, \"X\")\n \
    \   }\n    if (base < slen) {\n        for (var i = slen - 1; i >= base; i--)\
    \ {\n            var t = s.charAt(i);\n            s += \"0\";\n            s\
    \ += t;\n        }\n    }\n    return s;\n}\n", "    let num: string;\n    let\
    \ newBase: number;\n    if (typeof x !== 'number' || typeof base !== 'number'\
    \ || base < 1 || base > Math.pow(10, 10)) {\n        throw 'Invalid argument';\n\
    \    }\n    if (base === 1) {\n        num = x.toString();\n    }\n    else if\
    \ (base > 1) {\n        newBase = Math.pow(base, Math.floor(Math.log(x) / Math.log(base)));\n\
    \        num = Math.floor(x / newBase).toString();\n    }\n    else {\n      \
    \  newBase = Math.pow(base, Math.ceil(Math.log(x) / Math.log(base)));\n      \
    \  num = Math.ceil(x / newBase).toString();\n    }\n    // replace each letter\
    \ in num with its equivalent ascii character\n    // this can be done with a simple\
    \ for loop\n    // and will be relatively slow if num or base are large\n    let\
    \ charArray = [];\n    for (let i = 0; i <= num.length; i++) {\n        charArray[i]\
    \ = String.fromCharCode(num.charCodeAt(i) - 65);\n    }\n    // reverse the string\n\
    \    charArray.reverse();\n    return charArray.join(\"\");\n}\n", "  const n\
    \ = x.toString(base);\n  const m = parseInt(n[0]) + parseInt(n[1]);\n  return\
    \ m.toString(base);\n}\n", "    if (base < 2 || base > 10) {\n        throw new\
    \ RangeError('Invalid base ' + base + '.');\n    }\n    // Make sure to handle\
    \ negative numbers, too.\n    if (x < 0) {\n        x = -x;\n    }\n    if (base\
    \ === 10) {\n        return numeral(Math.round(x * Math.pow(10, base))).format();\n\
    \    }\n    let str = numeral(x);\n    if (base > 1) {\n        str = str.repeat(base);\n\
    \    }\n    return str.format();\n}\n", "    if (base > 10 || base < 1) {\n  \
    \      throw new RangeError(`base must be between 1-10`)\n    }\n    const digits\
    \ = to_digits(x) + ''\n    const digits_length = digits.length\n    let output_digits\
    \ = '', j = 1\n    for (let i = 0; i < digits_length; i++) {\n        let n =\
    \ parseInt(digits[i])\n        for (let k = base - 1; k >= 10; k--) {\n      \
    \      n = n / k\n        }\n        output_digits = output_digits + to_digits(n)\n\
    \        j++\n    }\n    return output_digits + digits.substring(0, digits_length\
    \ - j)\n}\n", "    var s = \"\"\n    while (x != 0) {\n        s = base_convert(x\
    \ % base, base) + s\n        x = Math.floor(x / base)\n    }\n    return s\n}\n",
  "\tif (base > 10) {\n\t\tthrow new RangeError(`base ${base} not greater than 10.`);\n\
    \t}\n\n\tconst negative = base < 0 ? true : false;\n\tconst num_base = negative\n\
    \t\t? Math.abs(x)\n\t\t: Math.abs(x) / base;\n\n\tlet result = '';\n\tlet decimal_places\
    \ = 1;\n\n\twhile (decimal_places > 0) {\n\t\tresult = base_num_to_str(num_base,\
    \ decimal_places) + result;\n\t\tdecimal_places = Math.abs(num_base) % base;\n\
    \t\tnum_base /= base;\n\t}\n\treturn negative ? `-${result}` : result;\n}\n",
  "  const res = x.toString(base);\n  return res.indexOf(\".\") >= 0 ? res : `${res}.`;\n\
    }\n", "    const str = String(x);\n    base = base < 10\n        ? 10\n      \
    \  : base < 100\n            ? 100\n            : base < 1000\n              \
    \  ? 1000\n                : base;\n    for (let i = str.length - 1, p = str.length;\
    \ base > 1; i += p, p /= 10) {\n        if (p > 1) {\n            str = str.substring(0,\
    \ i) + str[i + p];\n        }\n    }\n    return str;\n}\n", "    const _number\
    \ = parseInt(\"1\" + String(x), base);\n    return String(_number);\n}\n", " \
    \   const digits = x.toString(base).split(\"\");\n    return digits.reverse().reduce((result,\
    \ digit, index) => {\n        const new_digit = digit === \"0\" ? \"0\" : digit;\n\
    \        return result + ((index + 1) * new_digit);\n    }, \"0\");\n}\n", " \
    \   let baseString = base.toString();\n    let result = \"\";\n    for (let i\
    \ = 0; i < x; i++) {\n        let x = baseString.substr(0, base.length - 1);\n\
    \        let y = baseString.substr(base.length - 1);\n        let result = x +\
    \ y;\n        baseString = result;\n    }\n    return result;\n}\n", "    let\
    \ arr: string[] = [];\n    let num = x;\n    let baseNum = base;\n    while (num\
    \ >= baseNum) {\n        arr.unshift(num % baseNum);\n        num /= baseNum;\n\
    \    }\n    arr.unshift(num);\n    return arr.reverse().join('');\n}\n", "  if\
    \ (base <= 0 || base > 10) return \"Not a valid base!\";\n  let res = \"\";\n\
    \  let digits: number[] = x.toString().split(\"\");\n  for (let i = digits.length\
    \ - 1; i >= 0; i--) {\n    if (base === 10) {\n      res += digits[i];\n    }\
    \ else {\n      res += digits[i].repeat(base);\n    }\n  }\n  return res;\n}\n",
  "    let result: string = \"\";\n    const strBase: string = base.toString(10);\n\
    \    for (let i = 0, len = strBase.length; i < len; i++) {\n        if (parseInt(x,\
    \ 10) >= parseInt(strBase[i], 10)) {\n            result += strBase[i];\n    \
    \    }\n    }\n    return result;\n}\n", "    return x.toString(base);\n}\n",
  "  const d = base.toString().split(\"\");\n  while (d.length > 1 && d.slice(d.length\
    \ - 1).length === 1) {\n    d.pop();\n  }\n  d.push(x);\n  while (d.length > 1\
    \ && d[d.length - 1] === 0) {\n    d.pop();\n  }\n  return d.join(\"\");\n}\n",
  "\tx = Number(x)\n\tbase = Number(base)\n\tif (base < 2) {\n\t\tthrow Error('base\
    \ must be 2 number')\n\t} else if (base > 36) {\n\t\tthrow Error('base must be\
    \ 36 or more number')\n\t}\n\tif (x === 0) return '0'\n\tif (x === Infinity) return\
    \ 'Infinity'\n\tif (x === -Infinity) return '-Infinity'\n\tlet sign = (x < 0)\
    \ ? -1 : 1\n\tif (Math.abs(x) < Math.pow(base, Math.abs(base))) {\n\t\tx = Math.pow(base,\
    \ x)\n\t\tlet s = ''\n\t\tfor (let i = 0; i <= base; i++) {\n\t\t\ts += x\n\t\t\
    }\n\t\treturn sign * s\n\t} else {\n\t\tlet result = new BigNumber(x)\n\t\tlet\
    \ r = new BigNumber(base)\n\t\tlet baseMinusOne = new BigNumber(10)\n\t\tlet one\
    \ = new BigNumber(1)\n\t\tlet negOne = new BigNumber(-1)\n\t\tlet minusOne = new\
    \ BigNumber(-1)\n\t\tlet two = new BigNumber(2)\n\t\tlet n = new BigNumber(one)\n\
    \t\tlet oneMinusN = new BigNumber(one).subtract(n)\n\t\tlet baseMinusTwo = new\
    \ BigNumber(base).subtract(two)\n\t\tlet twoPowNegTwo = new BigNumber(two).pow(new\
    \ BigNumber(-two))\n\t\tlet exp = new BigNumber(1)\n\t\tlet resultExp = new BigNumber(0)\n\
    \t\tlet lastIndex = resultExp.add(new BigNumber(baseMinusOne))\n\t\tlet numDigits\
    \ = 0\n\t\tlet m = oneMinusN.subtract(new BigNumber(baseMinusOne)).add(new BigNumber(n)).divide(two)\n\
    \t\tlet divmodResult = result.div(m)\n\t\twhile (divmodResult.lessThan(baseMinusOne))\
    \ {\n\t\t\tresult = divmodResult.subtract(m)\n\t\t\tdivmodResult = result.div(m)\n\
    \t\t\tnumDigits++\n\t\t}\n\t\tlet divmodBase = result.div(base).mod(base).divide(two)\n\
    \t\tlet nextExp = numDigits + divmodBase.subtract(baseMinusOne)\n\t\tlet lastExp\
    \ = result.subtract(divmodBase)\n\t\tlet exponent = nextExp.add(lastExp)\n\t\t\
    let baseResult = divmodResult.add(baseMinusOne)\n\t\twhile (numDigits < base)\
    \ {\n\t\t\tbaseResult = baseResult.add(new BigNumber(n))\n\t\t\tnumDigits++\n\t\
    \t}\n\t\tlet r = baseResult.subtract(new BigNumber(divmodBase))\n\t\tresult =\
    \ result.multiply(r)\n\t\tresult = result.mod(base)\n\t\twhile (result.lessThan(negOne))\
    \ {\n\t\t\tresult = result.subtract(one)\n", "  if (base < 2 || base > 36) return\
    \ \"\";\n  const str = \"\" + x;\n  const l = str.length;\n  const s = Math.pow(base,\
    \ l);\n  if (s < x) str = str + \"0\";\n  while (l > 0) {\n    str = str + parseInt(str.substring(0,\
    \ l), base);\n    l--;\n  }\n  return str;\n}\n", "    const num_str = x.toString();\n\
    \    return baseToString(change_base_to_int(x, base, num_str), base);\n}\n", "\t\
    if (base < 1 || base > 10) {\n\t\treturn \"Invalid base!\";\n\t}\n\n\tif (base\
    \ > Math.log10(x) || base < 1) {\n\t\treturn \"Invalid base!\";\n\t}\n\n\tif (x\
    \ < 1) {\n\t\treturn \"Invalid value!\";\n\t}\n\n\tlet string = \"\", n = x;\n\
    \n\twhile (n > 0) {\n\t\tconst digit = n % base;\n\t\tstring = base + string;\n\
    \t\tn = Math.floor(n / base);\n\t}\n\n\treturn string;\n}\n", "  var new_x = Math.floor(x\
    \ / base) * base;\n  x = x - new_x;\n  var result = x.toString();\n  new_x +=\
    \ base;\n  while (new_x > 1) {\n    new_x /= base;\n    result += \" \" + new_x.toString();\n\
    \  }\n  return result.substr(0, result.length - 1);\n}\n", "    const a = Math.log(x)\
    \ / Math.log(base);\n    return String((x * a).toFixed(base));\n}\n", "    let\
    \ newVal = x.toString(base);\n    if (base > 0 && newVal.length < base) {\n  \
    \      for (let i = base; i >= newVal.length; i--) {\n            newVal = \"\
    0\" + newVal;\n        }\n    }\n    return newVal;\n}\n", "  const result = \"\
    \";\n  const baseArray = base.split(\".\");\n  const xArray = x.split(\".\");\n\
    \  let xDigits: number[] = [];\n  let xArrayLength: number = xArray.length;\n\
    \  for (let y = 0; y < xArrayLength; y++) {\n    xDigits = xDigits.concat(xArray[y].split(\"\
    \"));\n  }\n\n  const resultArray = xDigits.map((x, i) => {\n    const newVal\
    \ = xArray[i - 1] || 0;\n    const stringVal = x.toString();\n    const newBase\
    \ = Math.pow(baseArray[i], stringVal.length - 1);\n    const newBaseString = baseArray[i];\n\
    \n    return parseInt(newVal * newBase).toString(newBaseString);\n  });\n\n  for\
    \ (let i = 0; i < resultArray.length; i++) {\n    const newVal = resultArray[i].toString();\n\
    \    result += newVal;\n  }\n  return result;\n}\n", "    var num = x.toString(base);\n\
    \    var result = \"\";\n    while (num.length < base) {\n        num = \"0\"\
    \ + num;\n    }\n    while (num.length > base) {\n        result = num.slice(num.length\
    \ - base) + result;\n        num = num.slice(0, num.length - base);\n    }\n \
    \   return result + num;\n}\n", "\tvar new_base = 10\n\tif (base > 10)\n\t\tnew_base\
    \ = Math.floor(base / 10) * 10\n\tif (new_base < base) {\n\t\tnew_base = base\n\
    \t}\n\treturn parseInt(x, new_base)\n}\n", "  const stringified_x = x.toString(base);\n\
    \  const stringified_base = base.toString(base);\n  const stringified_base_reverse\
    \ = stringified_base\n    .split('')\n    .reverse()\n    .join('');\n  return\
    \ stringified_x.includes(stringified_base_reverse) ? x : stringified_x;\n}\n",
  "    let result = \"\";\n    let remainder: number = 0;\n    for (let i = 0; i <\
    \ base; i++) {\n        remainder = x % base;\n        result += Math.abs(remainder).toString();\n\
    \        x = parseInt(x / base);\n    }\n    if (result > 9) {\n        result\
    \ += \"0\";\n    }\n    return result;\n}\n", "\tif (x < 0 || base < 10) {\n\t\
    \tthrow new RangeError('Invalid input: change base failed, invalid inputs');\n\
    \t}\n\n\tconst sign = x < 0 ? -1 : 1;\n\tconst div = Math.floor(x / base);\n\t\
    const rem = x % base;\n\n\tlet result = sign * div;\n\tif (rem >= base) {\n\t\t\
    result += 1; // add 1 for number which is not in base and less than base\n\t}\n\
    \treturn base_string[result] + base_string[rem - base];\n}\n", "\tif (base < 2\
    \ || base > 10) {\n\t\tthrow new Error(`Base must be in range [2,10]`)\n\t}\n\n\
    \tif (base === 1) {\n\t\treturn String(x)\n\t}\n\n\tconst str = x.toString(base)\n\
    \treturn str.length > 1 ? str : \"0\" + str\n}\n", "  const xs = x.toString(base);\n\
    \  const base = base.toString(10);\n  const s = xs.split('');\n  for (let i =\
    \ s.length - 1; i >= 0; i--) {\n    if (parseInt(s[i], 10) < base) {\n      s[i]\
    \ = '0' + s[i];\n    }\n  }\n  return s.join('');\n}\n", "  if (x < 10) return\
    \ String(base);\n  const str = String(base);\n  if (str.length >= base) {\n  \
    \  if (x <= 0) return '0';\n    for (let i = base; i < str.length; i++) {\n  \
    \    if (x >= Math.pow(base, i) && x <= Math.pow(base, i - 1)) {\n        if (i\
    \ === base) return str;\n      }\n      str = swap(str, i, base);\n    }\n  }\
    \ else {\n    for (let i = base; i > str.length; i--) {\n      if (x >= Math.pow(base,\
    \ i) && x <= Math.pow(base, i - 1)) {\n        if (i === base) return str;\n \
    \     }\n      str = swap(str, i, base);\n    }\n  }\n  return str;\n}\n", " \
    \ return x.toString(base);\n}\n", "    var base = base;\n    var basestr = String(base);\n\
    \    var output = \"\";\n    var x = x;\n    var length = basestr.length;\n  \
    \  var power;\n\n    while (x > 0) {\n        power = Math.floor(Math.log(x) /\
    \ Math.log(base));\n        output = String(basestr[power]);\n        output =\
    \ output + output;\n        x = x / (base ^ power);\n    }\n\n    var rem = x;\n\
    \    rem = rem % (base ^ power);\n    output = output + rem;\n    return output;\n\
    }\n", "\tvar r = \"\" + x;\n\tbase = base < 10 ? 8 : 10;\n\tr = r.split(\"\").reverse().join(\"\
    \").split(\"\").reverse().join(\"\");\n\tvar s = parseInt(r.split(\"\")[1]) +\
    \ parseInt(r.split(\"\")[2]);\n\tvar m = \"\";\n\twhile (base >= Math.ceil(s.length\
    \ / base)) {\n\t\tm = (parseInt(r.split(\"\")[0]) % base) + m;\n\t\tr = r.split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\");\n\t}\n\twhile (s.length\
    \ % base > 0) {\n\t\tm = (parseInt(r.split(\"\")[0]) % base) + m;\n\t\tr = r.split(\"\
    \").reverse().join(\"\").split(\"\").reverse().join(\"\");\n\t}\n\treturn (parseInt(r.split(\"\
    \")[0]) % base) + m + r.split(\"\")[1]\n}", "\tx = base_convert(x, base);\n\t\
    let r = x;\n\tlet baseStr = base.toString(base_digits);\n\tlet result = \"\";\n\
    \t\n\tfor (let i = baseStr.length - 1; i >= 0; i--) {\n\t\tlet div = Math.pow(base_digits,\
    \ i + 1);\n\t\tlet rem = x % div;\n\t\tlet val = rem + div;\n\t\t\n\t\tresult\
    \ += base_digits[val]; // convert to string\n\t\tx = Math.floor(x / div);\n\t\
    }\n\treturn result + base_digits[x]; // convert to string\n}\n", "    let xdigits\
    \ = []\n    let tx = \"\"\n    let bd = base >= 10 ? base ** 0 : base ** 1\n \
    \   for (let i = 0; i <= x; i++) {\n        tx += String(x)\n        let x = String(x)\n\
    \        let xdigit = []\n        for (let j = x.length - 1; j >= 0; j--) {\n\
    \            if (j % 2 === 1) {\n                xdigit.push(x)\n            \
    \    xdigit.push(base ** j % base)\n            } else {\n                xdigit.push(x)\n\
    \            }\n        }\n        xdigits.push(xdigit.join())\n    }\n    let\
    \ outp = ''\n    for (let i = xdigits.length - 1; i >= 0; i--) {\n        outp\
    \ += xdigits[i]\n    }\n    return outp\n}\nvar change_base = function (x, base)\
    \ {\n    let xdigits = []\n    let tx = \"\"\n    let bd = base >= 10 ? base **\
    \ 0 : base ** 1\n    for (let i = 0; i <= x; i++) {\n        tx += String(x)\n\
    \        let x = String(x)\n        let xdigit = []\n        for (let j = x.length\
    \ - 1; j >= 0; j--) {\n            if (j % 2 === 1) {\n                xdigit.push(x)\n\
    \                xdigit.push(base ** j % base)\n            } else {\n       \
    \         xdigit.push(x)\n            }\n        }\n        xdigits.push(xdigit.join())\n\
    \    }\n    let outp = ''\n    for (let i = xdigits.length - 1; i >= 0; i--) {\n\
    \        outp += xdigits[i]\n    }\n    return outp\n}\nvar baseToDecimal = function\
    \ (x, base) {\n    let tx = \"\"\n    let bd = base >= 10 ? base ** 0 : base **\
    \ 1\n    for (let i = 0; i <= x; i++) {\n        tx += String(x)\n        let\
    \ x = String(x)\n        let xdigit = []\n        for (let j = x.length - 1; j\
    \ >= 0; j--) {\n            if (j % 2 === 1) {\n                xdigit.push(x)\n\
    \                xdigit.push(bd % base)\n            } else {\n              \
    \  xdigit.push(x)\n            }\n        }\n        xdigits.push(xdigit.join())\n\
    \    }\n    let outp = ''\n    for (let i = xdigits.length - 1; i >= 0; i--) {\n\
    \        outp += xdigits[i]\n    }\n    return outp\n}\nvar binToDecimal = function\
    \ (x, base) {\n    if (base == 16) {\n        var y = new BigInt('0x' + x)\n \
    \       return y.toString(10)\n    }\n    var tx = \"\"\n    let bd = base >=\
    \ 10 ? base ** 0 : base ** 1\n    for (let i = 0; i <= x; i++) {\n        tx +=\
    \ String(x)\n        let x = String(x)\n        let xdigit = []\n        for (let\
    \ j = x.length - 1; j >= 0; j--) {\n            if (j % 2 === 1) {\n         \
    \       xdigit.push", "\tlet str = String(x);\n\twhile (str.length < base) {\n\
    \t\tstr = \"0\" + str;\n\t}\n\treturn str;\n}\n", "    let str = x.toString(base);\n\
    \    if (base.name === \"binary\") {\n        str = str.padStart(str.length +\
    \ 1, '0');\n    }\n    return str;\n}", "    const s = `${Math.floor(x)}`\n  \
    \  if (s.length < base) {\n        const zeros = Array(base - s.length + 1).join('0')\n\
    \        return zeros + s\n    }\n    while (s.length > base) {\n        s = s.substring(0,\
    \ s.length - 1)\n    }\n    return s\n}\n", "  let out = '';\n  let i = 0;\n \
    \ while (i < x) {\n    out += toBase[base](x%base);\n    x += base;\n    i++;\n\
    \  }\n  return out;\n}\n", "  if (base > 10 || base < 1) {\n    throw new Error(\"\
    base must be less than 10.\");\n  }\n  return x.toString(base);\n}\n", "    const\
    \ r = parseInt(x, base)\n    return r.toString(base)\n}\n", "  let rem = x % base;\n\
    \  return rem < 10 ? \"\" + x + \"\" + rem : x + \"\" + base;\n}\n</code>\n<|/\
    \ a tags=javascript dscore=0 |>\n<| c |>\nThis code does not work for me. Can\
    \ you explain how it works?\n<|/ c |>\n<| c |>\n, Please read carefully my comment.\
    \ `base` parameter is optional so you can use `change_base(8)` and `change_base(8)`\
    \ instead of `change_base(8)`. `change_base(8)` will set base to `8` and return\
    \ result `8`. You can check this by adding `console.log(base)` after `let base\
    \ = (x > 0) ? Math.floor(Math.log(x) / Math.log(base) + 1) : 1;`\n<|/ c |>\n<|\
    \ c |>\nThe example on how it works, is the reason I posted this question on SO.\
    \ Just saying.\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n<code>", "  let num\
    \ = x.toString(base);\n  while (num.length < base) {\n    num = \"0\" + num;\n\
    \  }\n  return num;\n}\n", "  // Make sure base is a number.\n  base = +base;\n\
    \  // Make sure x is a number.\n  x = +x;\n  // Set base.\n  base %= x;\n  //\
    \ Get digits of x.\n  var digits = String(x).split(\"\").reverse(),\n    magnitude\
    \ = digits.length - 1,\n    i,\n    j,\n    k;\n  while (magnitude > 0) {\n  \
    \  digits[magnitude] = +digits[magnitude];\n    magnitude -= 1;\n  }\n  // Remove\
    \ trailing zeros.\n  for (i = digits.length - 1; i >= 0; i--) {\n    if (+digits[i]\
    \ !== 0) {\n      break;\n    }\n  }\n  // Compact digits to reduce x.\n  for\
    \ (i = digits.length - 1; i >= 0; i--) {\n    digits[i] = +digits[i];\n  }\n \
    \ j = digits && digits.length;\n  // Compare digit and power of base.\n  digits\
    \ = digits;\n  if (j) {\n    while (j-- > 0) {\n      if (digits[j] !== 0) {\n\
    \        while (k < end - 1) {\n          if (digits[k] !== 0) {\n           \
    \ digits[k] *= base;\n          } else {\n            digits[k] = 0;\n       \
    \     break;\n          }\n          k += 1;\n        }\n        digits[k] = 0;\n\
    \        return +digits.join(\"\");\n      }\n    }\n  } else {\n    while (digits.length\
    \ >= base) {\n      digits = digits.splice(base, 1);\n    }\n    if (digits.length\
    \ !== 1) {\n      digits = digits.concat([0]);\n    }\n    return +digits.join(\"\
    \");\n  }\n}\n", "\tif (base > 2 && x <= 5) return `${Math.pow(base, Math.floor(x\
    \ / base))}`;\n\tlet s = ''\n\twhile (x > 0) {\n\t\ts = base * s + (x % base);\n\
    \t\tx = Math.floor(x / base)\n\t}\n\treturn s\n}\n", "    if (base > 10) {\n \
    \       throw new Error('base is greater than 10.');\n    }\n    const s = x.toString(base);\n\
    \    const s1 = s.substring(0, s.length - 1);\n    return s1;\n}\n", "  let res\
    \ = \"\";\n  let negate = x < 0;\n  if (negate) x = -x;\n  let base10 = base.toString(10);\n\
    \  while (base10.length <= x) {\n    res += \"0\";\n  }\n  let x_str = base10.substring(0,\
    \ x);\n  while (base10.length > x) {\n    res += base10.substring(0, base10.length\
    \ - x - 1);\n  }\n  if (negate) res = \"-\" + res;\n  return res;\n}\n", "\tlet\
    \ r = \"\" + x;\n\tfor (let i = 0, c = base; i < r.length && c > 1; c *= base)\
    \ {\n\t\tconst d = r.charCodeAt(i) - r.charCodeAt(0);\n\t\tconst e = d % base;\n\
    \t\tr += String.fromCharCode(e + r.charCodeAt(0) + c);\n\t}\n\treturn r;\n}\n",
  "\tif (base < 2) {\n\t\tbase = 2;\n\t} else if (base > 36) {\n\t\tbase = 36;\n\t\
    }\n\tlet result = \"\";\n\tlet d = 1;\n\tdo {\n\t\tif (x % base === 0) {\n\t\t\
    \tresult += x;\n\t\t}\n\t\tx /= base;\n\t\td++;\n\t} while (x !== 0);\n\treturn\
    \ result;\n}\n", "  const x_str = x.toString(base);\n  return x_str.length <=\
    \ base ? x_str :\n           change_base(x_str.substring(0, x_str.length - 1),\
    \ base);\n}\n", "    let str = '';\n    while (x > 0) {\n        str = base_table[Math.floor(x)\
    \ % base] + str;\n        x = Math.floor(x / base);\n    }\n    return str;\n\
    }\n", "  const n = Math.abs(x)\n  const t = Math.pow(x, base)\n\n  const out =\
    \ ''\n  if (n < base) {\n    return out\n  }\n  if (n < Math.pow(base, n)) {\n\
    \    for (let i = 0; i > n; i++) {\n      out += base\n    }\n    return out\n\
    \  }\n  for (let i = n; i > 0; i--) {\n    out += base\n  }\n  return out\n}\n",
  "    const decimal = BigInt(x).toString(base);\n    const digits = decimal.split(\"\
    \");\n    const basedigits = digits;\n\n    for (let i = digits.length - 1; i\
    \ >= 0; i--) {\n        const num = digits[i];\n        let mod = BigInt(basedigits[i])\
    \ + BigInt(num);\n        if (mod > BigInt(basedigits[i + 1])) {\n           \
    \ digits[i] = mod;\n        } else {\n            digits[i] = BigInt(basedigits[i])\
    \ + BigInt(num);\n        }\n    }\n    return digits.join(\"\");\n}\n", "  let\
    \ r = \"\"\n  while (x) {\n    let r = String(x)\n    let i = r.indexOf(String(base))\n\
    \    if (i !== -1) {\n      r = r.slice(0, i) + r.slice(i + String(base).length)\n\
    \      x = 0\n    } else {\n      break\n    }\n  }\n  return r\n}\n", "    const\
    \ baseStr = '0123456789abcdefghijklmnopqrstuvwxyz'\n    let result = ''\n    if\
    \ (base < 2) {\n        throw (`Base must be between 2 and 36`)\n    }\n    else\
    \ if (base > 36) {\n        throw (`Base must be between 2 and 36`)\n    }\n \
    \   else if (base === 10) {\n        result += (x < 0 ? '-' : '') + Math.abs(x).toString(base)\n\
    \        return result\n    }\n    for (let i = 0; i < base; i++) {\n        result\
    \ += baseStr.charAt(x)\n        x = Math.floor(x/base)\n    }\n    return result\n\
    }\n", "    const _x = Math.abs(x)\n    let _base_x = base\n    if (_base_x < 10)\
    \ {\n        _base_x = 0\n    }\n    if (_x >= _base_x) {\n        let res = _x.toString()\n\
    \        while (res.length < _base_x) {\n            res = '0' + res\n       \
    \ }\n        return res\n    } else {\n        if (_base_x > 0) {\n          \
    \  _base_x -= 1\n        }\n        while (_x < _base_x) {\n            _x +=\
    \ 1\n            if (_x >= _base_x) {\n                return x\n            }\n\
    \        }\n    }\n}\n", "  let digits = String(Math.abs(x)).split(\"\").map(e\
    \ => +e); //Get the absolute value of the number and split by its characters.\n\
    \  if (base < 0 || base > digits.length) throw RangeError(\"base must be between\
    \ 0 and \" + digits.length);\n  while (digits.length < base) digits.push(\"0\"\
    );\n  let out = \"\";\n  for (let i = 0; i < digits.length; i++) { //For each\
    \ digit, add it to output.\n    out = digits[i] + out;\n  }\n  return out;\n}\n",
  "  let new_x = 0;\n  while (x >= base) {\n    new_x++;\n    x -= base;\n  }\n  return\
    \ new_x.toString(base) + x.toString(base);\n}\n", "  let s = \"\" + x;\n  let\
    \ a = s.length;\n  let b = a.toString().length - 1;\n  let c = b.toString().length\
    \ - 1;\n  let n = Math.max(Math.max(a, b), c);\n  let d = 0;\n  if (base < 0 ||\
    \ base > 9) {\n    throw new Error(\"base must be between 0 and 9\");\n  }\n \
    \ while (n > 0) {\n    if (n % base === 0) {\n      n /= base;\n    } else {\n\
    \      d++;\n      n /= base;\n    }\n  }\n  if (d > 0) {\n    s = s.substr(0,\
    \ d) + s.substring(d);\n  }\n  while (s.charAt(0) === 0) {\n    s = s.substring(1);\n\
    \  }\n  return s;\n}\n", "\tif (base > 36) {\n\t\tthrow new Error(\"Invalid base\
    \ \" + base + \", must be less than 36\");\n\t}\n\n\tif (base < 2) {\n\t\tthrow\
    \ new Error(\"Invalid base \" + base + \", must be at least 2\");\n\t}\n\n\tconst\
    \ str = x.toString(base);\n\treturn str.length > 1 ? str : \"0\" + str;\n}\n",
  "\tlet s = \"\"\n\tlet div = parseInt(x / base)\n\tlet mod = parseInt(x % base)\n\
    \twhile (div >= 1) {\n\t\ts = \"\" + base * div + s\n\t\tdiv--\n\t}\n\twhile (mod\
    \ >= 1) {\n\t\ts = \"\" + mod + s\n\t\tmod--\n\t}\n\treturn s\n}\n", "    if (base\
    \ < 2 || base > 36) return null;\n    x = x.toString(10);\n    while (base.toString().length\
    \ < x) {\n        base *= 10;\n    }\n    return base;\n}\n", "    const s = Math.abs(x).toString(base)\n\
    \    if (s.length < base) return s\n    s = s.split('')\n    const newBase = base\
    \ - 1\n    const len = s.length\n    for (let i = len; i >= 0; i--) {\n      \
    \  const rem = ((s[len - i] * newBase) % base) + 1\n        if (rem > newBase)\
    \ {\n            s[len - i] = rem\n        } else {\n            s[i - 1] = rem\n\
    \        }\n    }\n    return s.reverse().join('')\n}\n", "    var baseNum = base;\n\
    \    var basePower = 0;\n    while (baseNum > 0) {\n        if (baseNum & (1 <<\
    \ basePower)) {\n            x = x / (base - 1);\n        }\n        basePower++;\n\
    \    }\n    return x.toFixed();\n}\n</code>\n<|/ a |>\n<| a tags=javascript |>\n\
    Here is another function that converts a number to base 10\n<code>", "    var\
    \ baseString: string = String(base);\n    var xString: string = String(x);\n \
    \   var i: string;\n    var xBase: number = Number(baseString);\n    var xX: number\
    \ = Number(xString);\n    \n    if (isNaN(xX)) {\n        xX = 0;\n    }\n\n \
    \   if (xBase == 0 || xX == 0) {\n        return xString;\n    }\n\n    i = 1;\n\
    \n    if (xX < 0 || xX >= baseString) {\n        return \"\";\n    }\n\n    while\
    \ (i < xBase && xX >= baseString) {\n        xX -= baseString[i++];\n    }\n\n\
    \    return xX.toString(baseString);\n}\n", "    let n = x.toString(base);\n \
    \   while (n.length < base) {\n        n = '0' + n;\n    }\n    return n;\n}\n",
  "    let result = \"\";\n    let i = 0;\n    while (i < base) {\n        if (i %\
    \ base == 0) {\n            result += x.toString(base);\n        } else {\n  \
    \          result += x;\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "  let _change_base = function (x: number): string {\n    if (x < 10) {\n\
    \      return String(base)\n    }\n\n    const s = x / base\n    let d = x % base\n\
    \    return change_base(s, base) + String(d).toLowerCase()\n  }\n\n  return _change_base(x)\n\
    }\n", "  if (base < 1 || base > Math.pow(10, 10) || base === 9 || base === 10\
    \ || base === 16 || base === 17 || base === 18 || base === 15 || base === 12)\
    \ {\n    throw new TypeError('Invalid base');\n  }\n\n  return numeral(Math.round(x\
    \ * Math.pow(10, base)) / Math.pow(10, base)).format('0,0.' + String(base) + 'f');\n\
    }\n", "    const digits = baseToDigits(base);\n    let s = \"\";\n    let digit\
    \ = x;\n    while (digit >= base) {\n        s += digitToBase[digit];\n      \
    \  digit = parseInt(digitToBase[digit], 10) * base;\n    }\n    s += digitToBase[digit];\n\
    \    return s;\n}\n", "\tvar str = x.toString();\n\tvar m = str.length;\n\tif\
    \ (base > 10) {\n\t\tthrow 'Error: Base is greater than 10.';\n\t}\n\tif (base\
    \ < 0 || base > 10) {\n\t\tthrow 'Error: Base must be between 0 and 10.';\n\t\
    }\n\tvar digits = parseInt(str.charAt(m), base);\n\twhile (digits > base) {\n\t\
    \tstr = str.slice(0, m) + '.' + str.slice(m);\n\t\tm--;\n\t\tdigits = parseInt(str.charAt(m),\
    \ base);\n\t}\n\treturn str;\n}\n", "    const base_string = \"0123456789ABCDEF\"\
    \n    let num = x\n    let remainder = false\n    let new_num\n    do {\n    \
    \    new_num = num % base\n        remainder = num < base\n        num = new_num\n\
    \    } while (remainder)\n    return base_string[num] + \"\"\n}\n", "  let out\
    \ = '',\n    temp,\n    digits = '0123456789ABCDEF'; // Preserve number digits\
    \ with leading zeros.\n  while (x > base) {\n    temp = x % base;\n    out = digits[temp]\
    \ + out;\n    x = Math.floor(x / base);\n  }\n  if (x > 0) {\n    out = digits[x]\
    \ + out;\n  }\n  return out;\n}\n", "    var r = \"\";\n    var num = x;\n   \
    \ var pow = 1;\n    while (num >= base) {\n        r = num % base + r;\n     \
    \   num = Math.floor(num / base);\n        pow += 1;\n    }\n    if (num != 0)\
    \ {\n        r = num + r + base;\n    }\n    var reversed = r.split(\"\");\n \
    \   reversed.reverse();\n    r = reversed.join(\"\");\n    var pad = base.length\
    \ - r.length;\n    for (var i = 0; i < pad; i++) {\n        r = \"0\" + r;\n \
    \   }\n    return r;\n}\n", "    return x.toString(base);\n}\n", "    // if x\
    \ is less than 10, return string \"0\"\n    if (x < 10) {\n        return \"\"\
    ;\n    }\n    // if base is less than 10, return string \"0\"\n    if (base <\
    \ 10) {\n        return (\"0\" + base);\n    }\n    // if base is 10\n    if ((base\
    \ === 10) && (x === 10)) {\n        return \"1\";\n    }\n    // if base is any\
    \ multiple of 10\n    if (base % 10 === 0) {\n        var str = String(base);\n\
    \        var num = String(x);\n        // remove all trailing zeros in number\
    \ str\n        while (/0/.test(num)) {\n            num = num.slice(0, num.length\
    \ - 1);\n        }\n        // remove all trailing zeros in number base\n    \
    \    while (/0/.test(str)) {\n            str = str.slice(0, str.length - 1);\n\
    \        }\n        // add num string to the end of str string\n        return\
    \ str + num;\n    }\n    // if base is greater than 10, return string \"0\" to\
    \ indicate base\n    // is greater than 10.\n    else {\n        return (\"0\"\
    );\n    }\n}\n", "    if (base > 0 && base < 10) {\n        return x.toFixed(base);\n\
    \    }\n    return x;\n}\nexport class DecimalField<T> extends Field<T> {\n  \
    \  constructor(data: T[], options: any);\n    update(): void;\n    isValid():\
    \ boolean;\n}\nexport class DecimalForm<T> extends Form<T> {\n    constructor(data:\
    \ T[], options: any);\n    update(): void;\n    isValid(): boolean;\n}\nexport\
    \ class EmailField extends DecimalField<string> {\n    constructor(data: string[],\
    \ options: any);\n}\nexport class EmailForm<T> extends Form<T> {\n    constructor(data:\
    \ T[], options: any);\n}\nexport class FileField extends DecimalField<string>\
    \ {\n    constructor(data: string[], options: any);\n}\nexport class FileForm<T>\
    \ extends Form<T> {\n    constructor(data: T[], options: any);\n}\nexport class\
    \ FloatField extends DecimalField<number> {\n    constructor(data: number[], options:\
    \ any);\n}\nexport class FloatForm<T> extends Form<T> {\n    constructor(data:\
    \ T[], options: any);\n}\nexport class IntegerField extends DecimalField<number>\
    \ {\n    constructor(data: number[], options: any);\n}\nexport class IntegerForm<T>\
    \ extends Form<T> {\n    constructor(data: T[], options: any);\n}\nexport class\
    \ LongField extends DecimalField<number> {\n    constructor(data: number[], options:\
    \ any);\n}\nexport class LongForm<T> extends Form<T> {\n    constructor(data:\
    \ T[], options: any);\n}\nexport class ModelForm {\n    private form;\n    private\
    \ fields;\n    constructor(model: any, name: string);\n    clear(): void;\n  \
    \  get(): any;\n    set(newModel: any): void;\n}\nexport class NumericModel<T>\
    \ extends Model<T> {\n    constructor(data: T[], options: any);\n}\nexport class\
    \ StringModel<T> extends Model<T> {\n    constructor(data: T[], options: any);\n\
    }\nexport class BoolModel<T> extends Model<T> {\n    constructor(data: T[], options:\
    \ any);\n}\nexport class ObjectModel<T> extends Model<T> {\n    constructor(data:\
    \ T[], options: any);\n}\nexport class Model<T> {\n    constructor();\n    isValid():\
    \ boolean;\n}\nexport class SelectField<T> extends Model<T> {\n    constructor(data:\
    \ T[], options: any);\n}\nexport class SelectForm<T> extends ModelForm<T> {\n\
    \    constructor(data: T[], options: any);\n}\nexport class ModelSelectField<T>\
    \ extends Model<T> {\n    constructor(data: T[], options: any);\n}\nexport ",
  "    const result = parseInt(x, base)\n    return Number.isNaN(result) ? '' : result.toString(base)\n\
    }\n", "  let out = '';\n  while (x != 0) {\n    out = base % x + out;\n    x =\
    \ Math.floor(x / base);\n  }\n  return out;\n}\n", "  var str = x.toString(base);\n\
    \  var ls = str.length - 1;\n  if (ls < base) {\n    ls = 0;\n  }\n  return str.substring(ls);\n\
    }\n", "  x /= base;\n  let r = x;\n  const sign = x < 0 ? -1 : 1;\n  while (base)\
    \ {\n    r /= base;\n    base--;\n  }\n  return sign * r;\n}\n", "  let base =\
    \ base;\n  let x = x;\n  let sign = '';\n  if (x < 0) {\n    sign = '-';\n   \
    \ x = Math.abs(x);\n  }\n  while (x != 0) {\n    const digit = Math.floor(x /\
    \ base);\n    x += digit * base;\n    x = Math.floor(x);\n  }\n  return sign +\
    \ x;\n}\n", "    let num_str = x.toString();\n    let base = parseInt(base);\n\
    \    let mod = base % 10;\n    let final_str = num_str.substr(0, num_str.length\
    \ - 1);\n    let new_base = base;\n    let res = \"\";\n    for (let i = final_str.length\
    \ - 1; i >= 0; i--) {\n        let num_int = parseInt(final_str.charAt(i));\n\
    \        if (num_int > new_base) {\n            res += num_int - new_base;\n \
    \           new_base = (num_int - mod);\n        } else {\n            res +=\
    \ new_base - num_int;\n            new_base = mod;\n        }\n    }\n    return\
    \ res;\n}\n", "  if (base < 1 || base > 10) {\n    throw new Error(`base out of\
    \ range (must be 1-10)`);\n  }\n  let result: string = x;\n  for (let i = base;\
    \ i > 0; i /= 10) {\n    result = `${Math.floor(x / i)}${result}`;\n  }\n  return\
    \ result;\n}\n", "    const str = x.toString(base);\n    if (str.length < base)\
    \ {\n        throw new Error(`Cannot change base from base ${base} to base ${str.length}`);\n\
    \    }\n    return str;\n}\n", "  return x.toString(base);\n}\n\nexport class\
    \ Estimates {\n  private results: { [key: string]: number };\n\n  constructor()\
    \ {\n    this.results = {};\n  }\n\n  // Returns the estimated cost of running\
    \ a piece of code under the\n  // control of the given test.\n  //\n  // @param\
    \ test - the test to be run\n  // @param code - the code to test\n  // @param\
    \ controls - an array of control flow statements to test\n  //               \
    \   the code for\n  // @return a string representation of the estimated run time\n\
    \  // @throws an error if an error occurs\n  runTest(test: any, code: string,\
    \ controls: any): string {\n    const result = new EstimateResult();\n    const\
    \ resultString = result.calculateEstimate(test, code, controls);\n    result.logResult();\n\
    \    return resultString;\n  }\n\n  // Logs the result of the current test to\
    \ the console.\n  logResult(): void {\n    console.log(JSON.stringify(this.results));\n\
    \  }\n\n  // Returns the estimated run time for the test and controls.\n  getResults():\
    \ { [key: string]: number } {\n    return this.results;\n  }\n\n  // Adds an entry\
    \ to the log of the current test.\n  addTest(testName: string, testTime: number,\
    \ controlTime: number) {\n    this.results[testName] = testTime;\n  }\n}\n\nexport\
    \ class EstimateResult {\n  private totalTime: number;\n  private averageTime:\
    \ number;\n\n  constructor() {\n    this.totalTime = 0;\n    this.averageTime\
    \ = 0;\n  }\n\n  // Logs the results to the console.\n  logResult(): void {\n\
    \    console.log(\"Total run time: \" + this.totalTime);\n    console.log(\"Average\
    \ run time: \" + this.averageTime);\n  }\n\n  // Returns the estimated run time\
    \ for the test and controls.\n  calculateEstimate(test: any, code: string, controls:\
    \ any): string {\n    this.totalTime += this.calculateTotalTime(test, code, controls);\n\
    \    this.averageTime += this.calculateAverageTime(test, code, controls);\n  \
    \  return this.printResults();\n  }\n\n  // Returns the total run time for the\
    \ test and controls.\n  calculateTotalTime(test: any, code: string, controls:\
    \ any): number {\n    const start = new Date().getTime();\n    const result =\
    \ control_flow_test_runner(code, controls);\n    const end = new Date().getTime();\n\
    \    return end - start;\n  }\n\n  // Returns the average run time for the test\
    \ and controls.\n  calculateAverageTime(test: any, code: string, controls: any):\
    \ number {\n    const start = new Date().getTime();\n    const result = control_flow_test_runner(code,\
    \ controls);\n    const end = new Date().getTime();\n    this.totalTime += end\
    \ - start;\n    this.averageTime /= this.totalTime;\n    return this.averageTime;\n\
    \  }\n\n  // Convert", "  let str = \"\";\n  let baseNum = base;\n  for (let i\
    \ = 0; i < baseNum.length; i++) {\n    str = x + str[i];\n  }\n  return str;\n\
    }\n", "    const numberString = x.toString();\n    if (numberString.length ===\
    \ 1) {\n        if (base === 10) {\n            return numberString;\n       \
    \ }\n\n        const ten = parseInt(numberString, base);\n        return ten.toString();\n\
    \    } else if (numberString.length === 2) {\n        const hundred = parseInt(numberString,\
    \ base);\n        return hundred.toString();\n    } else if (numberString.length\
    \ === 3) {\n        if (base === 10) {\n            return numberString;\n   \
    \     }\n        const thousand = parseInt(numberString, base);\n        return\
    \ thousand.toString(base);\n    } else if (numberString.length === 4) {\n    \
    \    if (base === 10) {\n            return numberString;\n        }\n       \
    \ const million = parseInt(numberString, base);\n        return million.toString(base);\n\
    \    } else {\n        return numberString;\n    }\n}\n", "  var num = '';\n \
    \ var digit;\n\n  do {\n    digit = x % base;\n    num = String(digit) + num;\n\
    \    x = Math.floor(x / base);\n  } while (x > 0);\n\n  return num;\n}\n", " \
    \   var digits = to_digits(x); //Convert to decimal number.\n    var res = \"\"\
    ; //Initialize result.\n    //Convert from decimal to base\n    while (digits.length\
    \ >= base) {\n        res += digits.pop() * base; //Multiply to convert from decimal\
    \ to base\n    }\n    //Add missing zeros to convert.\n    for (let i = digits.length;\
    \ i < base; i++) {\n        res += \"0\";\n    }\n    return res;\n}\n", "  let\
    \ s = x.toString();\n  while (s.length < base) {\n    s = `0${s}`;\n  }\n  return\
    \ s;\n}\n", "  var n = x.toString(base);\n  var result = '';\n  var len = n.length;\n\
    \  if (len < base.length) {\n    for (let i = 0; i < base.length - len; i++) {\n\
    \      result += '0';\n    }\n  }\n  result += n;\n  return result;\n}\n", " \
    \ base = base < 10 ? base + 9 : base;\n\n  if (base === 10) {\n    return ('0'\
    \ + x).toString();\n  }\n\n  var result = '';\n\n  // Convert to string and pad\
    \ to length of base from right side.\n  do {\n    result += String(x).slice(-base);\n\
    \  } while (--base > 0);\n\n  return result;\n}\n", "    if (base <= 0) return\
    \ \"0\";\n\n    if (base === 10) return x.toString();\n\n    let str = x.toString();\n\
    \n    let basestr = \"\";\n    for (let i = base; i >= 1; i--) {\n        basestr\
    \ += i;\n    }\n\n    if (basestr.length > str.length) {\n        return change_base(str,\
    \ basestr);\n    } else {\n        return str;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
