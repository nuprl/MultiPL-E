name: HumanEval_105_by_length
language: ts
prompt: "//Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n// reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1,\
  \ 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>>\
  \ by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>>\
  \ by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = by_length;\n  assert.deepEqual(candidate([2, 1, 1,\
  \ 4, 5, 8, 2, 3]),[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
  One\", \"One\"]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ -1, 55]),[\"One\"]);\n  assert.deepEqual(candidate([1, -1, 3, 2]),[\"Three\",\
  \ \"Two\", \"One\"]);\n  assert.deepEqual(candidate([9, 4, 8]),[\"Nine\", \"Eight\"\
  , \"Four\"]);\n}\n\ntest();"
completions: ["  if (arr.length === 0) {\n    return [];\n  }\n\n  let result: string[]\
    \ = [];\n  let maxLength = Math.max(...arr.map(i => i.length));\n  let minLength\
    \ = Math.min(...arr.map(i => i.length));\n\n  arr.forEach((i: number) => {\n \
    \   let length = i.length;\n    if (minLength <= length && length <= maxLength)\
    \ {\n      result.push(i.toString());\n    }\n  });\n\n  return result;\n}\n",
  "  if (arr.length === 0) return [];\n\n  const numbers = arr.map((num) => {\n  \
    \  if (num === 1 || num === -1) return num;\n    return num > 9 ? num : num.toString();\n\
    \  });\n\n  numbers.sort((a, b) => b - a);\n  const result: string[] = [];\n\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === 1) result.push(\"\
    One\");\n    if (numbers[i] === 2) result.push(\"Two\");\n    if (numbers[i] ===\
    \ 3) result.push(\"Three\");\n    if (numbers[i] === 4) result.push(\"Four\");\n\
    \    if (numbers[i] === 5) result.push(\"Five\");\n    if (numbers[i] === 6) result.push(\"\
    Six\");\n    if (numbers[i] === 7) result.push(\"Seven\");\n    if (numbers[i]\
    \ === 8) result.push(\"Eight\");\n    if (numbers[i] === 9) result.push(\"Nine\"\
    );\n  }\n  return result;\n}\n", "  const sorted = arr.sort(function(a, b) {\n\
    \    return a - b;\n  });\n  let maxLen = 0;\n  for (let i = 0; i < sorted.length;\
    \ i++) {\n    if (sorted[i] > maxLen) maxLen = sorted[i];\n  }\n  const reversed\
    \ = [];\n  for (let i = 0; i < sorted.length; i++) {\n    reversed.push(sorted.slice(i,\
    \ i + maxLen).reverse().join(''));\n  }\n  return reversed;\n}\n", "  if (arr.length\
    \ === 0) return [];\n  if (arr.length === 1) return [\"One\"];\n  const len =\
    \ arr.length;\n  const ones = Array.from({ length: len }, (_, i) => \"One\");\n\
    \  const twos = Array.from({ length: len }, (_, i) => \"Two\");\n  const threes\
    \ = Array.from({ length: len }, (_, i) => \"Three\");\n  const fours = Array.from({\
    \ length: len }, (_, i) => \"Four\");\n  const fives = Array.from({ length: len\
    \ }, (_, i) => \"Five\");\n  const sixes = Array.from({ length: len }, (_, i)\
    \ => \"Six\");\n  const sevens = Array.from({ length: len }, (_, i) => \"Seven\"\
    );\n  const eights = Array.from({ length: len }, (_, i) => \"Eight\");\n  const\
    \ nines = Array.from({ length: len }, (_, i) => \"Nine\");\n  let res = [];\n\
    \  for (let i = 0; i < len; i++) {\n    let val = arr[i];\n    if (val < 10) {\n\
    \      res.push(ones[val]);\n    } else if (val < 20) {\n      res.push(twos[val\
    \ - 10]);\n    } else if (val < 30) {\n      res.push(threes[val - 20]);\n   \
    \ } else if (val < 40) {\n      res.push(fours[val - 30]);\n    } else if (val\
    \ < 50) {\n      res.push(fives[val - 40]);\n    } else if (val < 60) {\n    \
    \  res.push(sixes[val - 50]);\n    } else if (val < 70) {\n      res.push(sevens[val\
    \ - 60]);\n    } else if (val < 80) {\n      res.push(eights[val - 70]);\n   \
    \ } else if (val < 90) {\n      res.push(nines[val - 80]);\n    } else {\n   \
    \   res.push(nines[val - 90]);\n    }\n  }\n  return res;\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  const min_value = Math.min.apply(Math, arr);\n\
    \  const max_value = Math.max.apply(Math, arr);\n  const reversed = arr.reverse();\n\
    \  const names: string[] = [];\n  for (let i = min_value; i <= max_value; i++)\
    \ {\n    let name;\n    if (i < 0) {\n      name = \"Negative \" + i;\n    } else\
    \ {\n      name = i;\n    }\n    names.push(name);\n  }\n  return reversed.map(val\
    \ => names[val]);\n}\n", "\tconst len = arr.length;\n\tif (len === 0) {\n\t\t\
    return [];\n\t}\n\tconst result: string[] = [];\n\tlet counter = 0;\n\tlet previous\
    \ = 0;\n\tfor (let i = 0; i < len; i++) {\n\t\tconst current = arr[i];\n\t\tif\
    \ (current < previous) {\n\t\t\tcounter++;\n\t\t}\n\t\telse {\n\t\t\tcounter--;\n\
    \t\t}\n\t\tif (counter === 0) {\n\t\t\tresult[result.length - 1] = `One ${result[result.length\
    \ - 1]}`;\n\t\t\tbreak;\n\t\t}\n\t\tresult[result.length - 1] = `One ${result[result.length\
    \ - 1]}, Two ${result[result.length - 1]}, Three ${result[result.length - 1]},\
    \ Four ${result[result.length - 1]}, Five ${result[result.length - 1]}, Six ${result[result.length\
    \ - 1]}, Seven ${result[result.length - 1]}, Eight ${result[result.length - 1]},\
    \ Nine ${result[result.length - 1]}`;\n\t\tprevious = current;\n\t}\n\treturn\
    \ result;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  arr.sort((a,\
    \ b) => {\n    if (a > 9) {\n      return 1;\n    } else if (b > 9) {\n      return\
    \ -1;\n    } else {\n      return 0;\n    }\n  });\n  const reversed: string[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    reversed.push(names.One[arr[i]]);\n\
    \  }\n  return reversed;\n}\n", "  const copy = arr.slice();\n  copy.sort((a,\
    \ b) => a - b);\n  return copy.length === 0\n    ? []\n    : copy.map((digit,\
    \ i) => (digit < 1 && digit >= 9 ? digit : i + 1));\n}\n", "  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  const\
    \ reversed = sorted.reverse();\n  let result = \"\";\n  for (let i = 0; i < reversed.length;\
    \ ++i) {\n    let num = reversed[i];\n    const num = num % 10;\n    const name\
    \ = numbers[num];\n    result = name + result;\n  }\n  return result.split(\"\"\
    ).filter(x => x != \"\");\n}\n", "  if (arr.length === 0 || arr[0] < 1 || arr[0]\
    \ > 9) return arr;\n\n  const res = [] as string[];\n  let min = Math.min(...arr);\n\
    \  let max = Math.max(...arr);\n  let curr = min;\n  while (curr <= max) {\n \
    \   res.push(`${curr}`);\n    curr++;\n  }\n\n  for (let i = 0; i < res.length;\
    \ i += 1) {\n    const n = arr[i];\n    if (n < 1) {\n      // Don't change any\
    \ negative numbers\n      continue;\n    }\n\n    // We add one because the names\
    \ start at 1\n    const val = i + 1;\n    const str = `${val}${names[val]}`;\n\
    \    if (n !== curr) {\n      // Change current number to this number\n      res[i]\
    \ = str;\n    }\n  }\n  return res;\n}\n", "  const len = arr.length;\n  if (len\
    \ === 0) {\n    return [];\n  }\n  else if (len === 1) {\n    return [\"One\"\
    ];\n  }\n\n  const min = Math.min(1, arr.length);\n  const max = Math.max(1, arr.length);\n\
    \  const output = new Array(len);\n\n  for (let i = min; i <= max; i++) {\n  \
    \  const index = arr.indexOf(i);\n    if (index !== -1) {\n      output[index]\
    \ = `${to_english(i)}`;\n    }\n  }\n  return output;\n}\n", "    if (arr.length\
    \ === 0) {\n        return [];\n    } else if (arr.length === 1) {\n        return\
    \ [[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"][arr[0]]];\n    } else if (arr.length === 2) {\n        const [a, b]\
    \ = arr;\n        if (a < 1 || a > 9 || b < 1 || b > 9) {\n            throw new\
    \ RangeError(\"The array should contain integers between 1 and 9\");\n       \
    \ }\n        return [\n            [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1],\n            [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][b - 1],\n        ];\n    } else if (arr.length === 3) {\n        const [a, b,\
    \ c] = arr;\n        if (a < 1 || a > 9 || b < 1 || b > 9 || c < 1 || c > 9) {\n\
    \            throw new RangeError(\"The array should contain integers between\
    \ 1 and 9\");\n        }\n        return [\n            [\"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1],\n\
    \            [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"][b - 1],\n            [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][c - 1],\n        ];\n   \
    \ } else if (arr.length === 4) {\n        const [a, b, c, d] = arr;\n        if\
    \ (a < 1 || a > 9 || b < 1 || b > 9 || c < 1 || c > 9 || d < 1 || d > 9) {\n \
    \           throw new RangeError(\"The array should contain integers between 1\
    \ and 9\");\n        }\n        return [\n            [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][a - 1],\n     \
    \       [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\",\
    \ \"Eight\", \"Nine\"][b - 1],\n            [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][c - 1],\n            [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"][d - 1],\n        ];\n    } else if (arr.length === 5) {\n        const\
    \ [a, b, c, d, e] = arr;\n        if (a < 1 || a > 9 || b < 1 || b > 9 || c <\
    \ 1 || c > 9 || d < 1 || d > 9 || e < 1 || e > 9) {\n            throw new RangeError(\"\
    The array should contain integer", "  if (!arr.length) return [];\n  const min\
    \ = Math.min(...arr);\n  const max = Math.max(...arr);\n  const lengths = arr.map((n:\
    \ number) => Math.abs(n - min));\n  const sorted = arr.sort((a, b) => a - b);\n\
    \  const reversed = sorted.slice(0).reverse();\n  const replaced = reversed.map((n,\
    \ i) => n < min || n > max ? '' : lengths[i]);\n  return replaced;\n}\n", "  if\
    \ (!arr.length) {\n    return [];\n  }\n\n  let sorted = arr.slice().sort((a,\
    \ b) => a - b);\n  let reversed = sorted.reverse();\n  let result = reversed.map(\n\
    \    d => {\n      let name = numbers[d];\n      if (!name) {\n        console.warn(`Invalid\
    \ number ${d}`);\n        return '';\n      }\n      return name;\n    }\n  );\n\
    \n  return result;\n}\n", "  if (arr.length == 0) {\n    return [];\n  }\n  const\
    \ ret = new Array(arr.length).fill(0);\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    ret[i] = arr[i] < 1 ? \"\" : arr[i];\n  }\n  ret.reverse();\n  for (let\
    \ i = 0; i < ret.length; i++) {\n    ret[i] = \"One\";\n    if (ret[i] == \"\"\
    ) {\n      ret[i] = \"Zero\";\n    }\n  }\n  return ret;\n}\n", "  if (!arr.length)\
    \ {\n    return [];\n  }\n  const result = new Array<string>(arr.length);\n  result[0]\
    \ = \"One\";\n  result[1] = \"Two\";\n  result[2] = \"Three\";\n  result[3] =\
    \ \"Four\";\n  result[4] = \"Five\";\n  result[5] = \"Six\";\n  result[6] = \"\
    Seven\";\n  result[7] = \"Eight\";\n  result[8] = \"Nine\";\n  let len = arr.length;\n\
    \  for (let i = 9; i >= 1; i--) {\n    result[len - i] = String(len - i);\n  }\n\
    \  return result;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  let\
    \ result: string[] = [];\n  let min = Math.min(...arr);\n  let max = Math.max(...arr);\n\
    \  for (let num = min; num <= max; num++) {\n    let index = arr.indexOf(num);\n\
    \    if (index !== -1) {\n      result.push(by_name_of(arr[index]));\n    }\n\
    \  }\n  return result;\n}\n", "  let minLen = 1;\n  let maxLen = 9;\n  let result:\
    \ string[] = [];\n  while (minLen <= maxLen) {\n    let mid = Math.floor((minLen\
    \ + maxLen) / 2);\n    if (arr[mid] >= minLen && arr[mid] <= maxLen) {\n     \
    \ minLen = mid;\n    } else {\n      maxLen = mid;\n    }\n  }\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    let digit = arr[i];\n    result.push(by_digit_name[digit]);\n\
    \  }\n  return result;\n}\n", "  const result: Array<string> = [];\n  let counter\
    \ = 0;\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > arr[0]) {\n\
    \      result.push(\n        typeof numbers[counter % numbers.length] === 'undefined'\n\
    \          ? 'One'\n          : numbers[counter % numbers.length]\n      );\n\
    \    }\n\n    if (arr[i] < arr[0]) {\n      result.push(\n        typeof numbers[counter\
    \ % numbers.length] === 'undefined'\n          ? 'Nine'\n          : numbers[counter\
    \ % numbers.length]\n      );\n    }\n\n    counter += 1;\n  }\n\n  return result;\n\
    }\n", "  let ans = arr;\n  for (let i = 0; i < ans.length; ++i) {\n    ans[i]\
    \ = by_length(ans[i])[0];\n  }\n  const len = ans.reduce(\n    (len, a) => Math.max(len,\
    \ Number(String(a)).length),\n    0,\n  );\n  return arr.map(a => by_length(String(a))[len\
    \ - 1]).filter(Boolean);\n}\n", "  if (arr.length === 0) return [];\n  const result\
    \ = [];\n  let last = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const\
    \ current = arr[i];\n    if (current === undefined) continue;\n    if (current\
    \ === -1) continue;\n    if (last < current) {\n      result.push(`One`);\n  \
    \    last = current;\n    } else if (last === current) {\n      result.push(`Two`);\n\
    \      last = current;\n    } else {\n      result.push(`Three`);\n      last\
    \ = current;\n    }\n  }\n  result.push(`One`);\n  return result;\n}\n", "  if\
    \ (arr.length === 0) {\n    return [];\n  }\n  if (arr.some((x) => typeof x !==\
    \ 'number')) {\n    return [];\n  }\n  const sorted = arr.slice();\n  sorted.sort((a,\
    \ b) => a - b);\n  return sorted.reduce((acc, x, i) => {\n    if (i > 0 && x ===\
    \ sorted[i - 1]) {\n      acc.push('Two');\n    } else if (i > 1 && x === sorted[i\
    \ - 2]) {\n      acc.push('Three');\n    } else if (i > 2 && x === sorted[i -\
    \ 3]) {\n      acc.push('Four');\n    } else if (i > 3 && x === sorted[i - 4])\
    \ {\n      acc.push('Five');\n    } else if (i > 4 && x === sorted[i - 5]) {\n\
    \      acc.push('Six');\n    } else if (i > 5 && x === sorted[i - 6]) {\n    \
    \  acc.push('Seven');\n    } else if (i > 6 && x === sorted[i - 7]) {\n      acc.push('Eight');\n\
    \    } else if (i > 7 && x === sorted[i - 8]) {\n      acc.push('Nine');\n   \
    \ } else {\n      acc.push('One');\n    }\n    return acc;\n  }, []);\n}\n", " \
    \ if (!arr.length) return [];\n  const res = [\"\"];\n  for (let i = 1; i < arr.length;\
    \ i++) {\n    const v = arr[i];\n    if (v > 9) {\n      const n = Math.floor(Math.log(v)\
    \ / Math.LN10);\n      res[res.length - n] = res[res.length - n] || [];\n    \
    \  res[res.length - n].push(`N${v % 10}`);\n    } else {\n      res[res.length\
    \ - 1] += `One${v}`;\n    }\n  }\n  return res;\n}\n", "  if (!arr.length) {\n\
    \    return [];\n  }\n  const result = arr\n    .map(x => String(x + 1))\n   \
    \ .reverse()\n    .map(x => {\n      const index = ORDINAL_NAMES.indexOf(x);\n\
    \      if (index === -1) {\n        return x;\n      }\n      return ORDINAL_NAMES[index];\n\
    \    });\n  return result;\n}\n", "  const min_length = arr.map(e => e * 10).reduce((a,\
    \ b) => Math.min(a, b));\n  const max_length = arr.map(e => e * 10).reduce((a,\
    \ b) => Math.max(a, b));\n  let result: string[] = [];\n  for (let i = min_length;\
    \ i <= max_length; i++) {\n    result.push((i / 10).toString());\n  }\n  return\
    \ result;\n}\n", "  return arr\n    .filter(a => a >= 1 && a <= 9)\n    .sort((a,\
    \ b) => b - a)\n    .reverse()\n    .map(i => int_to_name(i));\n}\n", "    const\
    \ result: string[] = [];\n\n    if (arr.length === 0) return result;\n\n    const\
    \ first_item: number = arr[0];\n    const first_item_digits: number[] = [first_item\
    \ % 10];\n    arr.splice(0, 1);\n\n    // This loop should stop when there are\
    \ only 10 items.\n    // The loop should be broken up into three parts:\n    //\
    \ 1. First item is compared with next item.\n    // 2. Next item is compared with\
    \ next item.\n    // 3. Last item is compared with next item.\n    // The comparison\
    \ for each item is done in 3 parts:\n    // Compare the first digit of first item\
    \ with the first digit of next item.\n    // Compare the first digit of next item\
    \ with the first digit of next item.\n    // Compare the first digit of next item\
    \ with the first digit of last item.\n    let i = 0;\n    let j = 0;\n    let\
    \ k = 0;\n    while (i < arr.length && j < arr.length && k < arr.length) {\n \
    \       if (arr[j] === arr[i]) {\n            first_item_digits.push(arr[j]);\n\
    \            ++i;\n        } else if (arr[j] > arr[i]) {\n            ++j;\n \
    \       } else if (arr[j] < arr[i]) {\n            ++k;\n        }\n    }\n\n\
    \    // If there are any remaining items in the array,\n    // add them to the\
    \ front of the result array.\n    while (i < arr.length) {\n        first_item_digits.push(arr[i]);\n\
    \        ++i;\n    }\n\n    for (let k = 0; k < 10; ++k) {\n        result.push(one_letter_map[first_item_digits[k]]);\n\
    \    }\n\n    return result;\n}\n", "  arr = arr.slice();\n  let min_number =\
    \ Math.min.apply(null, arr);\n  let max_number = Math.max.apply(null, arr);\n\
    \  if (min_number === max_number) {\n    return arr;\n  }\n  let res = [];\n \
    \ let i = 0;\n  let j = 0;\n  while (i < arr.length) {\n    while (arr[i] < min_number)\
    \ {\n      i++;\n    }\n    while (arr[i] > max_number) {\n      j--;\n    }\n\
    \    res.push(arr[j] + ' ' + arr[i]);\n    i++;\n    j--;\n  }\n  return res;\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const length = arr.length\
    \ - 1;\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const\
    \ result = new Array(length);\n  for (let i = 0; i <= length; i++) {\n    result[i]\
    \ = by_length_rec(arr, length, i, min, max);\n  }\n  return result;\n}\n", " \
    \ const len = arr.length;\n  if (!len) return [];\n\n  let min = Number.MAX_VALUE;\n\
    \  let max = Number.MIN_VALUE;\n\n  for (let i = 1; i < len; i++) {\n    const\
    \ num = arr[i];\n    if (num > max) max = num;\n    if (num < min) min = num;\n\
    \  }\n\n  const result = [];\n\n  for (let i = min; i <= max; i++) {\n    result.push(i.toString());\n\
    \  }\n\n  return result;\n}\n", "  if (arr.length === 0) return [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] < 0 || arr[i] > 9) continue;\n\
    \    arr.splice(i, 1);\n    arr.unshift(arr[i - 1]);\n    i--;\n  }\n  return\
    \ arr;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\n  let len = arr.length;\n\
    \  let min = 1;\n  let max = 9; // Find the smallest and largest numbers\n\n \
    \ for (let i = 1; i < len; i++) {\n    if (arr[i] < arr[min]) {\n      min = i;\n\
    \    }\n\n    if (arr[i] > arr[max]) {\n      max = i;\n    }\n  }\n\n  let reversed\
    \ = arr.slice(0).reverse(); // reverse the array\n\n  for (let i = 0; i < len;\
    \ i++) {\n    let num = arr[i];\n    let name = \"\";\n    let digit = num % (max\
    \ - min + 1) + min;\n\n    if (digit < 0 || digit >= 10) {\n      name += \"Nine\"\
    ;\n    } else {\n      name += names[digit];\n    }\n\n    reversed[i] = num -\
    \ digit;\n    arr[i] = name;\n  }\n\n  return reversed;\n}", "  if (!arr.length)\
    \ {\n    return [];\n  }\n  const len = Math.max(...arr);\n  return arr.map(\n\
    \    item => item < 1 && item > 9 ? item - 1 : item - 1 + len\n  ).map(item =>\
    \ names[item]).filter(Boolean);\n}\n", "  const result: string[] = [];\n  const\
    \ sorted: number[] = arr.sort((a, b) => {\n    return a - b;\n  });\n\n  for (let\
    \ index = 0; index < sorted.length; index++) {\n    if (sorted[index] >= 1 &&\
    \ sorted[index] <= 9) {\n      result.push(\n        `${sorted[index]}${\n   \
    \       ((sorted[index] + 1) % 10) ? '' : 's'\n        }`\n      );\n    }\n \
    \ }\n\n  return result.length > 0 ? result : [];\n}\n", "  if (arr.length ===\
    \ 0 || typeof arr[0] !== 'number') {\n    return [];\n  }\n  if (arr[0] < 0 ||\
    \ arr[0] > 9) {\n    return [];\n  }\n  if (arr[0] === 1) {\n    return ['One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  }\n  let\
    \ max_len = arr.length;\n  let min_len = 0;\n  let output = [];\n  let i, j;\n\
    \  for (i = 1; i < arr.length; i++) {\n    if (max_len < i) {\n      max_len =\
    \ i;\n    }\n    if (min_len > i) {\n      min_len = i;\n    }\n  }\n  for (let\
    \ num = min_len; num <= max_len; num++) {\n    let digit = num;\n    for (let\
    \ i = 0; i < 9; i++) {\n      digit = `${digit}${i}`;\n    }\n    let reversed\
    \ = '';\n    let j = 9 - num;\n    while (j--) {\n      reversed += `${digit}`;\n\
    \    }\n    output.push(String.fromCodePoint(parseInt(reversed, 10)));\n  }\n\
    \  return output;\n}\n", "  arr.sort((a, b) => a - b);\n  let result: string[]\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 9) {\n \
    \     result.push(\"Nine\");\n    } else if (arr[i] === 8) {\n      result.push(\"\
    Eight\");\n    } else if (arr[i] === 7) {\n      result.push(\"Seven\");\n   \
    \ } else if (arr[i] === 6) {\n      result.push(\"Six\");\n    } else if (arr[i]\
    \ === 5) {\n      result.push(\"Five\");\n    } else if (arr[i] === 4) {\n   \
    \   result.push(\"Four\");\n    } else if (arr[i] === 3) {\n      result.push(\"\
    Three\");\n    } else if (arr[i] === 2) {\n      result.push(\"Two\");\n    }\
    \ else if (arr[i] === 1) {\n      result.push(\"One\");\n    }\n  }\n  return\
    \ result;\n}\n", "  const n = arr.length\n  const result = new Array(n)\n  for\
    \ (let i = 0; i < n; i++) {\n    const val = arr[i]\n    if (val < 1) {\n    \
    \  result[i] = \"\"\n    } else if (val < 10) {\n      result[i] = \"One\"\n \
    \   } else if (val < 100) {\n      result[i] = \"Two\"\n    } else if (val < 1000)\
    \ {\n      result[i] = \"Three\"\n    } else if (val < 10000) {\n      result[i]\
    \ = \"Four\"\n    } else if (val < 100000) {\n      result[i] = \"Five\"\n   \
    \ } else if (val < 1000000) {\n      result[i] = \"Six\"\n    } else if (val <\
    \ 10000000) {\n      result[i] = \"Seven\"\n    } else if (val < 100000000) {\n\
    \      result[i] = \"Eight\"\n    } else if (val < 1000000000) {\n      result[i]\
    \ = \"Nine\"\n    }\n  }\n  return result\n}\n", "  let result: string[] = [];\n\
    \  if (arr.length === 0) {\n    return result;\n  }\n  arr = arr.filter(e => e\
    \ >= 1 && e <= 9);\n  for (let i = 1; i < arr.length; i++) {\n    const n = arr[i];\n\
    \    result.unshift(\n      (n - 1) <= 0\n        ? `One`\n        : ((n - 1)\
    \ % 10 === 0 && arr[i - 1] !== 9)\n        ? `Two`\n        : ((n - 1) % 10 ===\
    \ 1 && arr[i - 1] !== 9)\n        ? `Three`\n        : ((n - 1) % 10 === 2 &&\
    \ arr[i - 1] !== 9)\n        ? `Four`\n        : `Five`\n    );\n  }\n  return\
    \ result;\n}\n</code>\nI hope this code helps other programmers out in the future!\n\
    <|/ a tags=algorithm,sorting,javascript dscore=0 |>\n<| c |>\nHi, this looks like\
    \ a nice solution. Can you please help me understand: what does it mean to sort\
    \ by \"the length of the string\"? Thanks.\n<|/ c |>\n<| a tags=algorithm,sorting,javascript\
    \ |>\nA simple way is to sort by length first, and then alphabetically.\n\n<code>\n\
    const arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\nconst res = arr.sort((a, b) => b.length\
    \ - a.length).map(n => `${n}${n[0].toUpperCase()}${n[1].toUpperCase()}${n.slice(2)}`);\n\
    \nconsole.log(res);</code>\n\nThe idea is that we sort the array by length (b\
    \ - a or b.length - a.length), then we map over the sorted array to build the\
    \ final string. The code below builds an array of numbers from 1 to 9 (one number\
    \ per position) and sorts them by the number of digits (n[0].length), then alphabetically\
    \ (n[0] to n[1]).\n\n<code>\nconst arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\nconst res\
    \ = arr.sort((a, b) => b.length - a.length).map(n => n + n[0].length + n[1]).sort().map(n\
    \ => `${n}${n[0].toUpperCase()}${n[1].toUpperCase()}${n.slice(2)}`);\n\nconsole.log(res);</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you have a huge array and you need to\
    \ sort the elements first before you do any operation on it, you may want to use\
    \ Bubble sort algorithm to sort out the elements and then do all the operations\
    \ on them at once.\n<|/ a tags=algorithm,sorting,javascript |>\n<| a tags=algorithm,sorting,javascript\
    \ |>\nThis is a solution that doesn't involve splitting and joining the numbers:\n\
    \n<code>\nlet arr = [2, 1, 1, ", "  if (!arr.length) {\n    return [];\n  }\n\
    \  const sorted = [...arr].sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n\
    \  const result = [];\n  for (let i = 0; i < reversed.length; i++) {\n    const\
    \ num = reversed[i];\n    if (num >= 1 && num < 10) {\n      result.push(by_length_by_num(num));\n\
    \    }\n  }\n  return result;\n}\n", "  if (arr.length === 0) {\n    return [];\n\
    \  }\n  const min = 1;\n  const max = arr.length > 0 ? 9 : 0;\n  return arr\n\
    \    .map(i => (i % 10 === 0 ? i : min))\n    .filter(i => i >= min && i <= max)\n\
    \    .map(i => name_by_index(i));\n}\n", "  if (!arr.length) {\n    return [];\n\
    \  }\n  return arr.sort().reverse().map((n: number) => {\n    if (n === 1) {\n\
    \      return 'One';\n    }\n    if (n === 2) {\n      return 'Two';\n    }\n\
    \    if (n === 3) {\n      return 'Three';\n    }\n    if (n === 4) {\n      return\
    \ 'Four';\n    }\n    if (n === 5) {\n      return 'Five';\n    }\n    if (n ===\
    \ 6) {\n      return 'Six';\n    }\n    if (n === 7) {\n      return 'Seven';\n\
    \    }\n    if (n === 8) {\n      return 'Eight';\n    }\n    if (n === 9) {\n\
    \      return 'Nine';\n    }\n  });\n}\n", "  const result: string[] = [];\n \
    \ let j = 0;\n  for (let i = 0; i < arr.length && j < 10; i++) {\n    if (arr[i]\
    \ > 9) {\n      result.push(by_length(arr.slice(0, i)));\n      result.push(by_length(arr.slice(i\
    \ + 1, arr.length)));\n      result.push(by_length(arr.slice(i + 1, arr.length)));\n\
    \      j = i;\n    }\n  }\n  if (j !== arr.length) result.push(by_length(arr.slice(0,\
    \ j)));\n  return result;\n}\n", "  const map = new Map<number, string>([\n  \
    \  [1, \"One\"],\n    [2, \"Two\"],\n    [3, \"Three\"],\n    [4, \"Four\"],\n\
    \    [5, \"Five\"],\n    [6, \"Six\"],\n    [7, \"Seven\"],\n    [8, \"Eight\"\
    ],\n    [9, \"Nine\"],\n  ]);\n  const res = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (i < 9) {\n      res.push(map.get(arr[i]));\n    } else {\n \
    \     res.push(arr[i - 1]);\n    }\n  }\n  return res.reverse();\n}\n", "  if\
    \ (arr.length === 0) {\n    return [];\n  }\n\n  const [min, max] = arr;\n  const\
    \ n = max - min + 1;\n\n  if (n > 9) {\n    console.log(`invalid input: length\
    \ ${arr.length}`);\n  }\n\n  let result = \"\";\n  for (let i = 0; i < n; i++)\
    \ {\n    const s = i + 1;\n    result += names.get(s);\n  }\n\n  return result;\n\
    }\n", "  if (!arr.length) {\n    return [];\n  }\n  const digits = {\n    1: One,\n\
    \    2: Two,\n    3: Three,\n    4: Four,\n    5: Five,\n    6: Six,\n    7: Seven,\n\
    \    8: Eight,\n    9: Nine,\n  };\n  arr = arr.sort((a, b) => a - b);\n  return\
    \ arr.reverse().map((digit) => {\n    return digits[digit];\n  });\n}\n", "  if\
    \ (arr.length === 0) {\n    return [];\n  }\n  const length = Math.floor(arr.length\
    \ / 2);\n  let result = [];\n  for (let i = 0; i < length; i++) {\n    const left\
    \ = arr.slice(2 * i, 2 * i + 2);\n    const right = arr.slice(2 * i + 2, 2 * i\
    \ + 4);\n    result = result.concat(reverse(left)).concat(right);\n  }\n  return\
    \ result;\n}\n", "  if (arr.length === 0) return [];\n  const sorted = arr.sort((a,\
    \ b) => a - b);\n  sorted.reverse();\n  const reversed = sorted.map(a => ones[a]);\n\
    \  return reversed.map(a => a + \" \");\n}\n", "  if (!arr.length) return [];\n\
    \  const max_len = Math.max(...arr);\n  return arr\n    .filter((num: number)\
    \ => num > 0 && num < 10)\n    .sort((a, b) => b - a)\n    .reverse()\n    .reduce<string[]>(\n\
    \      (arr, digit, i) => [...arr, numToString(digit + 1, max_len)],\n      []\n\
    \    );\n}\n", "  if (arr.length === 0) return [];\n\n  const [first, ...rest]\
    \ = arr;\n  if (first < 1 || first > 9) return [];\n  let reversed = '';\n  for\
    \ (let i = 9; i >= first; i--) {\n    reversed += names[i];\n  }\n  reversed =\
    \ reversed.split('').reverse().join('');\n\n  return arr.length > 1 ? [reversed].concat(rest)\
    \ : reversed;\n}\n", "  if (arr.length === 0 || isNaN(arr[0])) {\n    return [];\n\
    \  }\n  const sortFnc = (a, b) => (b - a) || a === b ? b - a : a - b;\n  const\
    \ [min, max] = arr.reduce(sortFnc);\n  return Array.from(\n    {\n      length:\
    \ max - min + 1,\n    },\n    (_, index) => min + index);\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  const arr1 = arr.slice();\n  arr1.sort((a,\
    \ b) => b - a);\n  return arr1.reverse().map(val => {\n    if (val < 1 || val\
    \ > 9) {\n      return \"\";\n    }\n    return names[val];\n  });\n}\n", "  \
    \  if (!arr.length) {\n        return [];\n    }\n    const reversed = arr.reverse();\n\
    \    const map: number[][] = reversed.map((d: number) => {\n        if (d >= 1\
    \ && d <= 9) {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][d - 1];\n        } else {\n \
    \           return null;\n        }\n    });\n    const str = reversed.join(\"\
    \");\n    return map.reduce((acc, i) => acc + i, \"\");\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n\n  const reversed: string[] = [];\n  const dict:\
    \ Map<number, string> = new Map();\n\n  for (let i = 0; i < arr.length; i++) {\n\
    \    const val = arr[i];\n    const label = dict.get(val);\n\n    if (label) {\n\
    \      reversed.push(label);\n    }\n\n    dict.set(val, \"One\");\n  }\n\n  const\
    \ ones = [...dict.values()].sort((a, b) => a - b);\n\n  for (let i = 0; i < ones.length;\
    \ i++) {\n    reversed.push(ones[i]);\n  }\n\n  return reversed;\n}\n", "  let\
    \ result = arr.map(String).sort().reverse();\n  return result.map(function (x)\
    \ { return x === '0' ? 'One' : x === '1' ? 'Two' : x === '2' ? 'Three' : x ===\
    \ '3' ? 'Four' : x === '4' ? 'Five' : x === '5' ? 'Six' : x === '6' ? 'Seven'\
    \ : x === '7' ? 'Eight' : x === '8' ? 'Nine' : x; });\n}\n", "  if (arr.length\
    \ === 0 || arr.some(x => x !== 1 && x !== -1)) {\n    return [];\n  }\n  let min\
    \ = 1;\n  let max = 9;\n  let ret: string[] = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let num: number = arr[i];\n    if (num > max || num < min) {\n \
    \     return ret;\n    }\n    let id = num - min + 10;\n    let name = [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ][id];\n    ret.push(name);\n  }\n  return ret;\n}\n", "  if (arr.length === 0)\
    \ {\n    return [];\n  }\n\n  const arr2 = [];\n  const firstTen = arr.slice(0,\
    \ 10);\n  const firstOne = firstTen.map(v => v === 1 ? 2 : 1);\n\n  for (const\
    \ i of firstOne) {\n    arr2.push(`One${i}`);\n  }\n\n  for (let i = 1; i < 10;\
    \ i++) {\n    const current = arr2.pop();\n    arr2.push(current);\n    const\
    \ next = arr2[i + 1];\n    arr2[i + 1] = current;\n\n    if (next !== undefined)\
    \ {\n      arr2.push(`Two${next}`);\n    }\n\n    if (i !== 9) {\n      arr2.push(`Three${i}`);\n\
    \    }\n\n    if (i === 9) {\n      arr2.push(`Four${i}`);\n    }\n\n    if (i\
    \ === 10) {\n      arr2.push(`Five${i}`);\n    }\n\n    if (i === 11) {\n    \
    \  arr2.push(`Six${i}`);\n    }\n\n    if (i === 12) {\n      arr2.push(`Seven${i}`);\n\
    \    }\n\n    if (i === 13) {\n      arr2.push(`Eight${i}`);\n    }\n\n    if\
    \ (i === 14) {\n      arr2.push(`Nine${i}`);\n    }\n  }\n\n  return arr2;\n}\n",
  "  arr = arr.filter(function(n) {\n    return 0 < n;\n  });\n  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  arr = arr.sort(function(a, b) {\n    return b -\
    \ a;\n  });\n  var result: string[] = [];\n  for (var i = 1; i < 10; ++i) {\n\
    \    var idx = arr.indexOf(i) - 1;\n    result.push(names[idx]);\n  }\n  return\
    \ result;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const ret\
    \ = [];\n  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n   \
    \ if (n >= 1 && n <= 9) {\n      ret.push(String(n - 1));\n    } else {\n    \
    \  ret.push(getName(n));\n    }\n  }\n  return ret;\n}\n", "  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [\"One\"];\n\
    \  }\n  if (arr.length === 2) {\n    return [\"One\", \"Two\"];\n  }\n  if (arr.length\
    \ === 3) {\n    return [\"One\", \"Two\", \"Three\"];\n  }\n  if (arr.length ===\
    \ 4) {\n    return [\"One\", \"Two\", \"Three\", \"Four\"];\n  }\n  if (arr.length\
    \ === 5) {\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"];\n  }\n\
    \  if (arr.length === 6) {\n    return [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\"];\n  }\n  if (arr.length === 7) {\n    return [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"];\n  }\n  if (arr.length\
    \ === 8) {\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\"];\n  }\n  if (arr.length === 9) {\n    return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n  }\n  throw new Error(\"Unsupported\");\n}\n", "\tlet minLen = arr[0];\n\t\
    let maxLen = arr[0];\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tconst len\
    \ = arr[i];\n\t\tif (len < minLen) {\n\t\t\tminLen = len;\n\t\t} else if (len\
    \ > maxLen) {\n\t\t\tmaxLen = len;\n\t\t}\n\t}\n\tconst reversed = arr.slice(0).reverse();\n\
    \tlet result: string[] = [];\n\twhile (minLen < 9) {\n\t\tresult.push((minLen++).toString());\n\
    \t}\n\twhile (maxLen > 9) {\n\t\tresult.push((maxLen - 1--).toString());\n\t}\n\
    \tfor (let i = 0; i < reversed.length; i++) {\n\t\tlet idx = reversed[i] % 10;\n\
    \t\tresult.push(\n\t\t\tidx === 0\n\t\t\t\t? \"Zero\"\n\t\t\t\t: idx === 1\n\t\
    \t\t\t\t? \"One\"\n\t\t\t\t\t: idx === 2\n\t\t\t\t\t\t? \"Two\"\n\t\t\t\t\t\t\
    : idx === 3\n\t\t\t\t\t\t\t? \"Three\"\n\t\t\t\t\t\t\t: idx === 4\n\t\t\t\t\t\t\
    \t\t? \"Four\"\n\t\t\t\t\t\t\t\t: idx === 5\n\t\t\t\t\t\t\t\t\t? \"Five\"\n\t\t\
    \t\t\t\t\t\t\t: idx === 6\n\t\t\t\t\t\t\t\t\t\t? \"Six\"\n\t\t\t\t\t\t\t\t\t\t\
    : idx === 7\n\t\t\t\t\t\t\t\t\t\t\t? \"Seven\"\n\t\t\t\t\t\t\t\t\t\t\t: idx ===\
    \ 8\n\t\t\t\t\t\t\t\t\t\t\t\t? \"Eight\"\n\t\t\t\t\t\t\t\t\t\t\t\t: idx === 9\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t? \"Nine\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t: idx\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t.toString()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.charAt(0)\n\t\t\t\
    \t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.replace(/[^a-z]/g, \"\")\n\t\t\t\t\t\
    );\n\t}\n\treturn result;\n}\n", "  const len = Math.max.apply(null, arr);\n \
    \ let result: string[] = [];\n  for (let i = 0; i < len; i++) {\n    const cur\
    \ = arr[i];\n    if (cur > -1 && cur < 10) {\n      result = result.concat(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\").slice(cur);\n    } else if (cur === -1) {\n      result.push(\"Zero\"\
    );\n    } else {\n      result.push(`${cur}`);\n    }\n  }\n  return result;\n\
    }\n", "  if (!arr.length) return [];\n  const lower = Math.min(...arr);\n  const\
    \ upper = Math.max(...arr);\n  if (arr.length === 1) return [\"One\"];\n  let\
    \ count = 1;\n  for (let i = lower + 1; i <= upper; i++) {\n    if (arr[i] ===\
    \ i) count++;\n  }\n  const result = new Array(Math.ceil(count / 3)).fill(\"One\"\
    );\n  let index = 0;\n  for (let i = lower + 1; i <= upper; i++) {\n    if (arr[i]\
    \ === i) result[index++] = arr[i];\n  }\n  return result;\n}\n", "  const len\
    \ = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  let max = 0;\n  let\
    \ min = 9;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n     \
    \ max = arr[i];\n    } else if (arr[i] < min) {\n      min = arr[i];\n    }\n\
    \  }\n\n  // console.log(min);\n  // console.log(max);\n\n  // console.log(arr);\n\
    \n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const val = arr[i];\n\
    \    const index = val - min;\n    if (index > 9) {\n      // console.log(`index\
    \ ${val} is out of range`);\n    } else {\n      result.push(names[index]);\n\
    \    }\n  }\n\n  return result;\n}\n", "\tif (arr.length === 0) {\n\t\treturn\
    \ [];\n\t}\n\n\tconst min = arr[0];\n\tconst max = arr[arr.length - 1];\n\tconst\
    \ min_index = arr.indexOf(min);\n\tconst max_index = arr.indexOf(max);\n\n\tif\
    \ (min_index === -1) {\n\t\treturn [];\n\t}\n\n\tlet result: string[] = [];\n\n\
    \tfor (let i = min_index; i <= max_index; i++) {\n\t\tresult.push(by_length_digit(arr,\
    \ i));\n\t}\n\n\treturn result;\n}\n", "  const sorted = arr.sort((a, b) => a\
    \ - b);\n  const length = sorted[sorted.length - 1];\n  if (!length) {\n    return\
    \ [];\n  }\n  const reversed = sorted.reverse();\n  return reversed.map(n => names[n]);\n\
    }\n", "  const len = arr.length;\n  if (len == 0) {\n    return [];\n  }\n  if\
    \ (len < 10) {\n    return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"];\n  }\n  arr = arr.slice();\n  arr.sort((a:\
    \ number, b: number) => {\n    if (a < 1) {\n      return -1;\n    }\n    if (b\
    \ < 1) {\n      return 1;\n    }\n    if (a > b) {\n      return 1;\n    }\n \
    \   return -1;\n  });\n  for (let i = len - 1; i >= 0; i--) {\n    const num =\
    \ arr[i];\n    const str = getNameForNumber(num);\n    arr[i] = str;\n  }\n  return\
    \ arr;\n}\n", "  if (arr.length === 0) return [];\n  const [smallest, largest]\
    \ = arr;\n  if (smallest !== 1 && smallest !== -1 && largest !== 9 && largest\
    \ !== 99) return [];\n  const result: number[] = [];\n  for (let i = smallest;\
    \ i <= largest; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "  if\
    \ (!arr.length) return []\n  const len = arr.length\n  const result = [\"\"]\n\
    \  for (let i = 0; i < len; i++) {\n    const num = arr[i]\n    if (num >= 1 &&\
    \ num <= 9) {\n      result[i] = \"One\"\n    }\n    if (num >= 10 && num <= 19)\
    \ {\n      result[i] = \"Two\"\n    }\n    if (num >= 20 && num <= 99) {\n   \
    \   result[i] = \"Three\"\n    }\n    if (num >= 100 && num <= 199) {\n      result[i]\
    \ = \"Four\"\n    }\n    if (num >= 200 && num <= 999) {\n      result[i] = \"\
    Five\"\n    }\n    if (num >= 1000 && num <= 1999) {\n      result[i] = \"Six\"\
    \n    }\n    if (num >= 2000 && num <= 999999) {\n      result[i] = \"Seven\"\n\
    \    }\n    if (num >= 1000000 && num <= 999999999) {\n      result[i] = \"Eight\"\
    \n    }\n    if (num >= 1000000000 && num <= 99999999999) {\n      result[i] =\
    \ \"Nine\"\n    }\n  }\n  return result.join(\"\")\n}\n", "    if (arr.length\
    \ === 0) {\n        return [];\n    }\n    const result: string[] = [];\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        switch (i % 9) {\n            case\
    \ 0:\n            case 1:\n            case 2:\n            case 3:\n        \
    \    case 4:\n            case 5:\n            case 6:\n            case 7:\n\
    \            case 8:\n            case 9:\n                break;\n          \
    \  default:\n                result.push((<any>arr)[i]);\n        }\n    }\n \
    \   for (let i = 0; i < arr.length; i++) {\n        result[i] = ones[(<any>arr)[i]];\n\
    \    }\n    return result;\n}\n", "  let result: string[] = [];\n  for (let i\
    \ of arr) {\n    if (!is_number(i)) {\n      return result;\n    }\n    while\
    \ (i > 0) {\n      result.push(by_length(getDigits(i)));\n      i -= 10;\n   \
    \ }\n  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n  const\
    \ result: string[] = [];\n  for (let i = 1; i < 10; i++) {\n    const index =\
    \ arr.findIndex((num) => num === i);\n    if (index >= 0) {\n      result.push(by_digit(index,\
    \ arr));\n    }\n  }\n  return result;\n}\n", "  // if the array is empty, return\
    \ an empty array\n  if (!arr.length) {\n    return [];\n  }\n\n  const n = arr.length;\n\
    \  const result = [];\n\n  // reverse the array\n  arr.reverse();\n\n  // map\
    \ each element to the corresponding name\n  for (let i = 0; i < n; i++) {\n  \
    \  const element = arr[i];\n    result.push(by_length_helper(element, i));\n \
    \ }\n\n  return result;\n}\n", "  let nums: number[] = [];\n  for (let i = 0;\
    \ i < arr.length; ++i) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      nums.push(arr[i]);\n\
    \    }\n  }\n  let min = Math.min(...nums);\n  let max = Math.max(...nums);\n\
    \  for (let i = min; i <= max; ++i) {\n    nums.splice(nums.indexOf(i), 1);\n\
    \  }\n\n  let res = [];\n  for (let i = 0; i < nums.length; ++i) {\n    res.push(numbers[nums[i]]);\n\
    \  }\n  return res;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n \
    \ let min = 0;\n  let max = arr.length - 1;\n  while (max >= min) {\n    const\
    \ pivot = (min + max) >> 1;\n    if (arr[pivot] < 1) {\n      min = pivot + 1;\n\
    \    } else {\n      max = pivot;\n    }\n  }\n  return arr.slice(min).reverse().map(num\
    \ => digits[num - 1]);\n}\n", "  return arr.filter(function (a): a is number =>\
    \ a > 0 && a < 10).sort().reverse()\n}\n", "  const res = [];\n  let min = 1;\n\
    \  let max = 9; // max < min\n  for (let i = 0; i < arr.length; i++) {\n    let\
    \ curr = arr[i];\n    let temp;\n    if (min === max) {\n      if (curr === min)\
    \ {\n        temp = min;\n        min = max;\n        max = temp;\n      } else\
    \ {\n        res.push(curr.toString());\n      }\n    } else {\n      if (curr\
    \ < min) min = curr;\n      if (curr > max) max = curr;\n    }\n  }\n  if (min\
    \ === max) res.push(min.toString());\n  if (min !== max) {\n    res.push(`${min.toString()}`);\n\
    \    res.push(`${max.toString()}`);\n  }\n  return res;\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  let arr2 = [];\n  for (let i = arr.length -\
    \ 1; i >= 0; i--) {\n    const num = arr[i];\n    if (num === 1) {\n      arr2.push(\"\
    One\");\n    } else if (num === 2) {\n      arr2.push(\"Two\");\n    } else if\
    \ (num === 3) {\n      arr2.push(\"Three\");\n    } else if (num === 4) {\n  \
    \    arr2.push(\"Four\");\n    } else if (num === 5) {\n      arr2.push(\"Five\"\
    );\n    } else if (num === 6) {\n      arr2.push(\"Six\");\n    } else if (num\
    \ === 7) {\n      arr2.push(\"Seven\");\n    } else if (num === 8) {\n      arr2.push(\"\
    Eight\");\n    } else if (num === 9) {\n      arr2.push(\"Nine\");\n    } else\
    \ {\n      arr2.push(\"Invalid Number\");\n    }\n  }\n  return arr2;\n}\n", " \
    \ const result = arr.filter(n => n > 0 && n < 10).sort((a,b) => b-a).reverse();\n\
    \  return arr.length ? result.map(str => [\n    `${str}`, // One\n    `${str}`,\
    \ // Two\n    `${str}`, // Three\n    `${str}`, // Four\n    `${str}`, // Five\n\
    \    `${str}`, // Six\n    `${str}`, // Seven\n    `${str}`, // Eight\n    `${str}`,\
    \ // Nine\n  ] : [];\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  let sorted: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    for\
    \ (let j = 0; j < 9; j++) {\n      if (j + 1 < arr[i]) {\n        sorted.push(j\
    \ + 1);\n        break;\n      }\n    }\n  }\n  sorted.reverse();\n  const result\
    \ = sorted.map((digit, idx) => {\n    return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][digit];\n  });\n  return\
    \ result;\n}\n", "  const newArr = arr.slice();\n  if (newArr.length === 0) {\n\
    \    return [];\n  }\n\n  let maxLength = 0;\n  let maxIndex = 0;\n  for (let\
    \ i = 0; i < newArr.length; i++) {\n    let length = newArr[i].toString();\n \
    \   if (length !== 'NaN') {\n      length = Number(length);\n    } else {\n  \
    \    // This happens when we pass invalid data.\n      continue;\n    }\n\n  \
    \  if (length < 1) {\n      continue;\n    }\n\n    if (length > maxLength) {\n\
    \      maxLength = length;\n      maxIndex = i;\n    }\n  }\n\n  newArr[maxIndex]\
    \ = newArr[maxIndex]\n    .toString()\n    .padStart(maxLength, '0');\n  return\
    \ newArr;\n}\n", "  arr.sort((a, b) => a - b);\n  for (let i = 1; i < 9; ++i)\
    \ {\n    arr[i] = names[arr[i]];\n  }\n  return arr;\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  const digits: string[] = [];\n  for (let i\
    \ = 0; i < 9; i++) {\n    if (arr[i] === 1) {\n      digits.push('One');\n   \
    \ } else if (arr[i] === 2) {\n      digits.push('Two');\n    } else if (arr[i]\
    \ === 3) {\n      digits.push('Three');\n    } else if (arr[i] === 4) {\n    \
    \  digits.push('Four');\n    } else if (arr[i] === 5) {\n      digits.push('Five');\n\
    \    } else if (arr[i] === 6) {\n      digits.push('Six');\n    } else if (arr[i]\
    \ === 7) {\n      digits.push('Seven');\n    } else if (arr[i] === 8) {\n    \
    \  digits.push('Eight');\n    } else if (arr[i] === 9) {\n      digits.push('Nine');\n\
    \    } else {\n      digits.push(arr[i].toString());\n    }\n  }\n  return digits;\n\
    }\n", "  const length = arr.length\n  if (length === 0) {\n    return []\n  }\n\
    \  if (length === 1) {\n    return [\n      \"One\",\n      \"Two\",\n      \"\
    Three\",\n      \"Four\",\n      \"Five\",\n      \"Six\",\n      \"Seven\",\n\
    \      \"Eight\",\n      \"Nine\",\n    ]\n  }\n  const min = Math.min(...arr)\n\
    \  const max = Math.max(...arr)\n  const mid = length / 2\n  const reversed =\
    \ arr.sort().reverse()\n  for (let i = 0; i < reversed.length; i++) {\n    if\
    \ (reversed[i] < min || reversed[i] > max) {\n      continue\n    }\n    const\
    \ digit = reversed[i] - 1\n    const name = reversed[i] + 1\n    return reversed.map(num\
    \ => num === digit ? name : num).reverse()\n  }\n}\n", "  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  const sortedArr = arr.sort(\n    (a, b) => b - a,\n\
    \  );\n  const reversedArr = sortedArr.slice().reverse();\n  const ones = reversedArr.filter((num)\
    \ => num === 1);\n  const tens = reversedArr.filter((num) => num >= 10 && num\
    \ < 100);\n  const hundreds = reversedArr.filter((num) => num >= 100);\n  const\
    \ teens = reversedArr.filter((num) => num >= 10);\n  const names = ones\n    .concat(tens)\n\
    \    .concat(hundreds)\n    .concat(teens)\n    .map((num) => {\n      if (num\
    \ < 10) {\n        return num;\n      } else if (num >= 10 && num < 100) {\n \
    \       return 'Ten';\n      } else if (num >= 100 && num < 1000) {\n        return\
    \ 'Hundred';\n      } else if (num >= 1000 && num < 10000) {\n        return 'Thousand';\n\
    \      } else if (num >= 10000 && num < 100000) {\n        return 'Million';\n\
    \      } else if (num >= 100000) {\n        return 'Billion';\n      }\n    });\n\
    \  return names.map((n) => names[numbers.indexOf(n)]);\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return [\"One\"\
    ];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  sorted.reverse();\n  const\
    \ reverse = sorted.map(i => [\n    byId[i],\n    byName[sorted.indexOf(i)]\n \
    \ ]);\n  return reverse;\n}\n", "  if (arr.length === 0) {\n    return [];\n \
    \ }\n  if (arr.length === 1) {\n    return [\"One\"];\n  }\n  const sorted_array\
    \ = [...arr];\n  sorted_array.sort((a, b) => a - b);\n  for (let i = 0; i < sorted_array.length;\
    \ i++) {\n    if (sorted_array[i] <= 9) {\n      sorted_array[i] = \"One\";\n\
    \    }\n    if (sorted_array[i] <= 99) {\n      sorted_array[i] = \"Two\";\n \
    \   }\n    if (sorted_array[i] <= 999) {\n      sorted_array[i] = \"Three\";\n\
    \    }\n    if (sorted_array[i] <= 9999) {\n      sorted_array[i] = \"Four\";\n\
    \    }\n    if (sorted_array[i] <= 999999) {\n      sorted_array[i] = \"Five\"\
    ;\n    }\n    if (sorted_array[i] <= 999999999) {\n      sorted_array[i] = \"\
    Six\";\n    }\n    if (sorted_array[i] <= 9999999999) {\n      sorted_array[i]\
    \ = \"Seven\";\n    }\n    if (sorted_array[i] <= 999999999999) {\n      sorted_array[i]\
    \ = \"Eight\";\n    }\n    if (sorted_array[i] <= 999999999999999) {\n      sorted_array[i]\
    \ = \"Nine\";\n    }\n  }\n  return sorted_array;\n}\n", "  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  const result: number[] = [];\n  for (let i = 0;\
    \ i < arr.length; ++i) {\n    const num = arr[i];\n    if (num === 1) {\n    \
    \  result.push(\"One\");\n    } else if (num === -1) {\n      result.push(\"Nine\"\
    );\n    } else if (num < 10) {\n      result.push(`Ten${num}`);\n    } else if\
    \ (num < 20) {\n      result.push(`Twenty${num - 10}`);\n    } else if (num <\
    \ 30) {\n      result.push(`Thirty${num - 20}`);\n    } else if (num < 40) {\n\
    \      result.push(`Fourty${num - 30}`);\n    } else if (num < 50) {\n      result.push(`Fifty${num\
    \ - 40}`);\n    } else if (num < 60) {\n      result.push(`Sixty${num - 50}`);\n\
    \    } else if (num < 70) {\n      result.push(`Seventy${num - 60}`);\n    } else\
    \ if (num < 80) {\n      result.push(`Eighty${num - 70}`);\n    } else if (num\
    \ < 90) {\n      result.push(`Ninety${num - 80}`);\n    } else {\n      result.push(`One`);\n\
    \    }\n  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n  const\
    \ result = arr.filter(a => a >= 1 && a <= 9).sort().reverse();\n  const mapping\
    \ = {\n    1: { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\",\
    \ five: \"Five\", six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\"\
    \ },\n    2: {\n      one: \"One\",\n      two: \"Two\",\n      three: \"Three\"\
    ,\n      four: \"Four\",\n      five: \"Five\",\n      six: \"Six\",\n      seven:\
    \ \"Seven\",\n      eight: \"Eight\",\n      nine: \"Nine\",\n    },\n    3: {\
    \ one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    4:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    5:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    6:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    7:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    8:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n    9:\
    \ { one: \"One\", two: \"Two\", three: \"Three\", four: \"Four\", five: \"Five\"\
    , six: \"Six\", seven: \"Seven\", eight: \"Eight\", nine: \"Nine\" },\n  };\n\
    \  return result\n    .map((n) => mapping[n])\n    .filter(Boolean)\n    .join(\"\
    \ \");\n}", "  if (arr.length === 0) {\n    return [];\n  }\n\n  // Convert each\
    \ integer to a string that represents a name in the form \"One\", \"Two\", \"\
    Three\", etc.\n  const intToString = intToStrings;\n  const intToStringLength\
    \ = intToString.length;\n\n  const sortedArr = arr.sort((a, b) => a - b); //sort\
    \ from least to most and reverse it\n  const reversedArr = sortedArr.reverse();\n\
    \n  const newArr = reversedArr.map((num) => {\n    if (num > intToStringLength)\
    \ {\n      return intToStringLength;\n    }\n    if (num < intToStringLength)\
    \ {\n      return num;\n    }\n    return intToString[num];\n  });\n\n  return\
    \ newArr;\n}\n", "  if (arr.length === 0) return [];\n\n  const sorted = arr.sort((a,\
    \ b) => a - b);\n  const arr2 = [];\n\n  for (let i = 0; i < sorted.length; i++)\
    \ {\n    if (sorted[i] >= 1 && sorted[i] <= 9) {\n      arr2.push(\n        sorted[i]\
    \ + `One`,\n        sorted[i] + `Two`,\n        sorted[i] + `Three`,\n       \
    \ sorted[i] + `Four`,\n        sorted[i] + `Five`,\n        sorted[i] + `Six`,\n\
    \        sorted[i] + `Seven`,\n        sorted[i] + `Eight`,\n        sorted[i]\
    \ + `Nine`,\n      );\n    }\n  }\n  return arr2;\n}\n", "    if (arr.length ===\
    \ 0) {\n        return [];\n    }\n\n    let digits = arr.slice(0, -1);\n    let\
    \ min = Math.min(...digits);\n    let max = Math.max(...digits);\n\n    if (min\
    \ === max) {\n        return ['One', 'One'];\n    }\n\n    let len = max - min\
    \ + 1;\n\n    let map = [...Array(len).keys()].map(i => (\n        digits == arr.slice(-i).concat(i)\
    \ ? `One ${i}` :\n            digits == arr.slice(-i).concat(i + 1) ? `Two ${i}`\
    \ :\n                digits == arr.slice(-i).concat(i + 2) ? `Three ${i}` :\n\
    \                    digits == arr.slice(-i).concat(i + 3) ? `Four ${i}` :\n \
    \                       digits == arr.slice(-i).concat(i + 4) ? `Five ${i}` :\n\
    \                            digits == arr.slice(-i).concat(i + 5) ? `Six ${i}`\
    \ :\n                                digits == arr.slice(-i).concat(i + 6) ? `Seven\
    \ ${i}` :\n                                    digits == arr.slice(-i).concat(i\
    \ + 7) ? `Eight ${i}` :\n                                        digits == arr.slice(-i).concat(i\
    \ + 8) ? `Nine ${i}` : []\n    ));\n\n    return map.reduce((a, b) => [...new\
    \ Set([...a, ...b])], []).filter(n => n != []).map(n => `${n} ${map[n - 1]}`);\n\
    }\n", "    if (arr.length === 0) {\n        return [];\n    }\n    const ones\
    \ = \"One Two Three Four Five Six Seven Eight Nine\".split(' ');\n    return arr.sort((a,\
    \ b) => b - a)\n        .map((i) => ones[i - 1]);\n}\n", "  if (arr.length ===\
    \ 0) return [];\n  if (arr.length === 1) return [byLength[arr[0]] as string];\n\
    \  return arr\n    .sort((a, b) => b - a)\n    .reverse()\n    .map(d => byLength[d])\n\
    \    .slice(0, -1);\n}\n", "  if (!arr.length) {\n    return [];\n  }\n  const\
    \ n = arr.length;\n  const result = new Array(n);\n  for (let i = 0; i < n; ++i)\
    \ {\n    const value = arr[i];\n    if (value < 1 || value > 9) {\n      continue;\n\
    \    }\n    const index = Math.floor(Math.log10(value) + 1);\n    let digit =\
    \ 0;\n    if (index === 1) {\n      digit = value;\n    } else {\n      digit\
    \ = Math.floor((value - 1) / (index - 1)) * index;\n    }\n    result[i] = digitNames[digit];\n\
    \  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n\n  // Convert\
    \ the input array to a string and parse it into a list of ints\n  const arr =\
    \ arr.join(\",\").split(\",\");\n  // Sort the ints\n  arr.sort((a: number, b:\
    \ number) => a - b);\n  // Reverse the array\n  arr.reverse();\n\n  // Build the\
    \ names array from the ints list\n  const names: string[] = [];\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    names[i] = names[arr[i]];\n  }\n\n  // Return\
    \ the names array\n  return names;\n}\n", "  const reversed = arr\n    .slice()\n\
    \    .reverse();\n  const one = reversed.find(x => x === 1);\n  const two = reversed.find(x\
    \ => x === 2);\n  const three = reversed.find(x => x === 3);\n  const four = reversed.find(x\
    \ => x === 4);\n  const five = reversed.find(x => x === 5);\n  const six = reversed.find(x\
    \ => x === 6);\n  const seven = reversed.find(x => x === 7);\n  const eight =\
    \ reversed.find(x => x === 8);\n  const nine = reversed.find(x => x === 9);\n\
    \  if (one === undefined) {\n    return [];\n  }\n  if (two === undefined) {\n\
    \    return [one];\n  }\n  if (three === undefined) {\n    return [one, two];\n\
    \  }\n  if (four === undefined) {\n    return [one, two, three];\n  }\n  if (five\
    \ === undefined) {\n    return [one, two, three, four];\n  }\n  if (six === undefined)\
    \ {\n    return [one, two, three, four, five];\n  }\n  if (seven === undefined)\
    \ {\n    return [one, two, three, four, five, six];\n  }\n  if (eight === undefined)\
    \ {\n    return [one, two, three, four, five, six, seven];\n  }\n  if (nine ===\
    \ undefined) {\n    return [one, two, three, four, five, six, seven, eight];\n\
    \  }\n  return [\n    one,\n    two,\n    three,\n    four,\n    five,\n    six,\n\
    \    seven,\n    eight,\n    nine,\n  ];\n}\n", "    if (arr.length === 0) return\
    \ [];\n    if (arr.length === 1) return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'];\n\n    let counts: { [n: string]: number }\
    \ = {};\n\n    for (let num of arr) {\n        counts[getNthName(num)] = counts[getNthName(num)]\
    \ + 1;\n    }\n\n    let ns: number[] = [];\n    for (let name in counts) {\n\
    \        ns.push(counts[name]);\n    }\n\n    ns = ns.sort((a, b) => b - a);\n\
    \    let index = 0;\n    const names = new Map<number, string>();\n\n    for (let\
    \ i = 0; i < 9; i++) {\n        let val = ns[index];\n        if (val >= 1 &&\
    \ val <= 9) {\n            let name = getNthName(i);\n            names.set(val,\
    \ name);\n            index++;\n        }\n    }\n\n    let result: string[] =\
    \ [];\n    for (let n of arr) {\n        let name = names.get(n);\n        if\
    \ (name) {\n            result.push(name);\n        }\n    }\n\n    return result;\n\
    }\n", "  if (arr.length === 0) return [];\n  if (arr.length === 1) return [arrays[arr[0]]\
    \ as string];\n  const len = Math.min(arr.length, 10);\n  const sorted = arr.sort((a,\
    \ b) => a - b);\n  const rev = sorted.reverse();\n  const last = rev[len - 1];\n\
    \  const arr = sorted.slice(0, len);\n  const nums = [\n    ...new Array(10)\n\
    \  ].map(() => 'One');\n  const digits = [\n    ...new Array(10)\n  ].map(() =>\
    \ 'Zero');\n  const idx = nums.indexOf(last);\n  const out = [...arr].reverse().map((x)\
    \ => arrays[x - 1]);\n  if (idx !== -1) {\n    out[idx] = arrays[nums[++idx]];\n\
    \  }\n  return out;\n}", "  const result: string[] = [];\n  const len = arr.length;\n\
    \  if (len === 0) {\n    return result;\n  }\n  for (let i = 1; i <= 9; i++) {\n\
    \    const value = arr[len - 1];\n    if (value === i) {\n      result[len - 2]\
    \ = i;\n      result[len - 1] = i;\n    } else {\n      result.push(value);\n\
    \    }\n  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n  if\
    \ (arr.length === 1) return [\"One\"];\n\n  const minLength = Math.min(...arr);\n\
    \  const maxLength = Math.max(...arr);\n  const mid = Math.floor((maxLength +\
    \ minLength) / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n\
    \n  return left.concat(by_length(right)).map(name => {\n    if (name === \"Nine\"\
    ) return \"Eight\";\n    if (name === \"Eight\") return \"Seven\";\n    if (name\
    \ === \"Seven\") return \"Six\";\n    if (name === \"Six\") return \"Five\";\n\
    \    if (name === \"Five\") return \"Four\";\n    if (name === \"Four\") return\
    \ \"Three\";\n    if (name === \"Three\") return \"Two\";\n    if (name === \"\
    Two\") return \"One\";\n    if (name === \"One\") return \"Zero\";\n    if (name\
    \ === \"Zero\") return \"Unknown\";\n    return name;\n  });\n}\n", "  if (!arr\
    \ || arr.length === 0)\n    return [];\n  let len = Math.min(9, arr.length);\n\
    \  for (let i = 1; i < len; i++) {\n    let cur = arr[i];\n    let pos = cur %\
    \ 10;\n    arr[i] = arr[len - (i + 1)];\n    arr[len - (i + 1)] = cur;\n  }\n\
    \  arr = arr.filter(n => n >= 1 && n <= 9); // Remove all \"strange\" numbers\n\
    \  return arr.map(n => [\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  ][n]);\n}\n", "  arr = arr.slice();\n\
    \  const len = arr.length;\n  arr.sort((a, b) => a - b);\n  for (let i = 0; i\
    \ < len; i++) {\n    const num = arr[i];\n    if (num < 1 || num > 9) {\n    \
    \  continue;\n    }\n    arr[i] = names[num - 1];\n  }\n  return arr.map(n =>\
    \ +n).filter(n => n != NaN);\n}", "  return arr.map(num => {\n    if (num < 1\
    \ || num > 9) {\n      return num;\n    } else {\n      return String(num);\n\
    \    }\n  }).sort().reverse().map(name => name.toUpperCase());\n}\n", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  if (arr[0] < 1 || arr[0] > 9) {\n    return\
    \ arr;\n  }\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n\
    \  const ones = arr.filter((x) => x > min);\n  const tens = arr.filter((x) =>\
    \ x > min && x < max);\n  const reversed = ones\n    .concat(tens)\n    .reverse()\n\
    \    .map((n) => int_to_name(n));\n  return reversed;\n}\n", "  if (!arr.length)\
    \ {\n    return [];\n  }\n\n  const nums = [...arr].reverse();\n  for (let i =\
    \ 1; i < 10; i++) {\n    if (nums.findIndex(num => num === i) > -1) {\n      nums.splice(nums.findIndex(num\
    \ => num === i), 1, `One ${i}`);\n    }\n  }\n\n  return nums;\n}\n", "  return\
    \ arr.filter((_: number) => 0 <= _ && _ < 10).sort().reverse().map(\n    (_: number)\
    \ => \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"[_],\n  );\n}\n", "  return arr.filter((el) => el >= 1 && el <= 9).reverse()\n\
    }\n", "  const len = arr.length;\n  if (len <= 2) {\n    return [];\n  }\n  const\
    \ sorted = arr\n    .filter((val) => +val >= 1 && +val <= 9)\n    .sort((a, b)\
    \ => b - a);\n  const res = [];\n  for (let i = 0; i <= 9; i++) {\n    const item\
    \ = sorted[len + i];\n    if (item) {\n      res.push(by_name[item]);\n    } else\
    \ {\n      res.push(by_name[i]);\n    }\n  }\n  return res;\n}\n", "  if (arr.length\
    \ === 0) return [];\n  if (arr.some(num => num < 1 || num > 9)) return [];\n \
    \ const reversed = arr.reverse();\n  const oneToNine = [\n    \"One\",\n    \"\
    Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\"\
    ,\n    \"Eight\",\n    \"Nine\",\n  ];\n  return reversed.map((num, index) =>\
    \ {\n    if (num < 1 || num > 9) return num;\n    const key = oneToNine[index];\n\
    \    return key;\n  });\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\
    \  if (arr.length === 1) {\n    return [\"One\"];\n  }\n  return arr.sort((a,\
    \ b) => b - a)\n    .map(num => byDigit(num));\n}\n", "  const len = arr.length;\n\
    \  if (len <= 0) {\n    return [];\n  }\n  const sorted = arr.slice().sort((a,\
    \ b) => {\n    return a - b;\n  });\n  let i = 0;\n  let j = len - 1;\n  let reversed\
    \ = [];\n  while (i < len && j >= 0) {\n    reversed.push(by_length(sorted.slice(i,\
    \ j + 1))[sorted.slice(i).indexOf(sorted[i])]);\n    i += 1;\n    j -= 1;\n  }\n\
    \  return reversed;\n}\n", "    if (arr.length === 0) {\n        return [];\n\
    \    } else if (arr.length == 1) {\n        return ['One'];\n    } else {\n  \
    \      const sorted_arr = arr.slice().sort();\n        let result: string[] =\
    \ [];\n\n        for (let i = 0; i < sorted_arr.length; i++) {\n            if\
    \ (\n                typeof sorted_arr[i] === 'number' &&\n                (sorted_arr[i]\
    \ >= 1 && sorted_arr[i] <= 9)\n            ) {\n                result.push(\n\
    \                    ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'][\n                        sorted_arr[i] - 1\n                    ]\n\
    \                );\n            } else {\n                result.push(sorted_arr[i]);\n\
    \            }\n        }\n\n        return result;\n    }\n}\n", "  return arr.reduce((arr:\
    \ number[], item: number) => {\n    arr.push(by_length(get_digits(item)));\n \
    \   return arr;\n  }, []).sort(function (a: number, b: number) {\n    return a\
    \ - b;\n  }).map(function (num: string) {\n    const i = +num;\n    return i >=\
    \ 1 && i <= 9 ? nums[i - 1] : num;\n  });\n}\n", "    if (!arr.length) {\n   \
    \     return [];\n    }\n\n    let counts: any = {};\n    let result: string[]\
    \ = [];\n    let min = Number.MAX_VALUE;\n    let max = Number.MIN_VALUE;\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        let number = arr[i];\n    \
    \    counts[number] = (counts[number] || 0) + 1;\n        min = Math.min(min,\
    \ number);\n        max = Math.max(max, number);\n    }\n    for (let number in\
    \ counts) {\n        let count = counts[number];\n        number = (count > 1)\
    \ ? number : \"One\";\n        if (count === 1) {\n            number = (min ===\
    \ max) ? number : `${min}`;\n        }\n        result.push(number);\n    }\n\
    \    return result;\n}\n</code>\n<|/ a |>\n<| a dscore=3 |>\nThe OP didn't specify\
    \ whether he wanted the results sorted or not, but I believe this approach might\
    \ be more performant for small lists.\n\n<code>\nconst names = [\n  'one',\n \
    \ 'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n\
    \  'nine',\n  'ten',\n  'eleven',\n  'twelve',\n  'thirteen',\n  'fourteen',\n\
    \  'fifteen',\n  'sixteen',\n  'seventeen',\n  'eighteen',\n  'nineteen',\n  'twenty',\n\
    \  'twenty-one',\n  'twenty-two',\n  'twenty-three',\n  'twenty-four',\n  'twenty-five',\n\
    \  'twenty-six',\n  'twenty-seven',\n  'twenty-eight',\n  'twenty-nine',\n  'thirty',\n\
    \  'thirty-one',\n  'thirty-two',\n  'thirty-three',\n  'thirty-four',\n  'thirty-five',\n\
    \  'thirty-six',\n  'thirty-seven',\n  'thirty-eight',\n  'thirty-nine',\n  'forty',\n\
    \  'forty-one',\n  'forty-two',\n  'forty-three',\n  'forty-four',\n  'forty-five',\n\
    \  'forty-six',\n  'forty-seven',\n  'forty-eight',\n  'forty-nine',\n  'fifty',\n\
    \  'fifty-one',\n  'fifty-two',\n  'fifty-three',\n  'fif", "  if (arr.length\
    \ === 0) {\n    return [];\n  }\n\n  const min = 10 ** Math.floor(Math.log10(arr[0]));\n\
    \  const max = min;\n\n  const sorted_arr = arr.sort((a, b) => a - b);\n  sorted_arr.forEach((item,\
    \ index) => {\n    if (item < min || item > max) {\n      return;\n    }\n\n \
    \   sorted_arr[index] = index;\n  });\n\n  return arr.map(item => sorted_arr.includes(item)\
    \ ? \"One\" : \"Two\");\n}\n", "  if (!arr.length) return []\n  if (arr[0] ===\
    \ 1 && arr[arr.length - 1] === 9) return arr.reverse()\n  const min = Math.min.apply(null,\
    \ arr)\n  const max = Math.max.apply(null, arr)\n  const range = [...Array(max\
    \ - min + 1).keys()].map(i => (min + i))\n  const length = range.filter(i => arr.includes(i)).length\n\
    \  const reversed = range.map(i => arr[i] - min)\n  return arr.filter(i => i !==\
    \ 1 || arr[0] === 9).map(i => length < 10 ? `One${i}` : i === arr[0] && arr[length\
    \ - 1] === 9 ? `Nine${arr[length - 1]}` : `${i}`)\n}\n</code>\n<|/ a dscore=1\
    \ tags=algorithm,javascript |>\n<| a |>\nHere is my solution :\n<code>", "  if\
    \ (arr.length === 0) {\n    return [];\n  }\n  let result: string[] = [];\n  for\
    \ (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] > 0 && arr[i] <= 9)\
    \ {\n      result.unshift(nameof(arr[i]));\n    }\n  }\n  return result;\n}\n",
  "  let result = new Array<string>();\n  arr.forEach((val) => {\n    if (val < 0\
    \ || val > 9) {\n      return;\n    }\n    let index = parseInt(val.toString());\n\
    \    result.push(by_index[index]);\n  });\n  return result.sort().reverse();\n\
    }\n", "  let result = arr\n    .filter(item => item > 0 && item < 10)\n    .sort((a:\
    \ number, b: number) => a - b)\n    .map(item => [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][item - 1])\n  if\
    \ (result.length > 0) {\n    return result\n  }\n  return []\n}\n", "  if (!arr.length)\
    \ {\n    return [];\n  }\n  const sorted = arr.sort((a, b) => a - b);\n  return\
    \ sorted.reverse().map((d, i) => d >= 10 && d % 10 === 1 ? names[d] : \"Ninety\"\
    \ + names[d]);\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const\
    \ length = arr[0];\n  const min = 1; // the minimum number we will ever get\n\
    \  const max = 9; // the maximum number we will ever get\n  const reverse = [];\n\
    \  for (let i = length; i >= min; i--) {\n    reverse.push(names[(arr[i] - min)\
    \ as number]);\n  }\n  return reverse.reverse();\n}\n", "  if (arr.length ===\
    \ 0) {\n    return [];\n  }\n  let sorted_nums: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] < 1 || arr[i] > 9) {\n      continue;\n\
    \    }\n    sorted_nums.push(arr[i]);\n  }\n  let reversed = sorted_nums.sort((a,\
    \ b) => a - b).reverse();\n  return reversed.map((item) => \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\")[item - 1];\n\
    }\n", "  if (!arr.length) return [];\n  if (arr.length === 1) return [];\n  const\
    \ len = Math.min(arr.length, 9);\n  let sorted = arr.sort((a, b) => a - b);\n\
    \  return [\n    ...new Array(len).fill(null).map((_, i) => sorted[len - 1 - i]),\n\
    \  ];\n}\n", "  if (!arr.length) return [];\n\n  const sorted = arr.sort((a: number,\
    \ b: number) => a - b);\n  const reversed = sorted.reverse();\n  let result =\
    \ [];\n\n  for (let i = 0; i < reversed.length; i++) {\n    const num = reversed[i];\n\
    \    if (num > 9) result.push(getNames(num));\n    else result.push(num);\n  }\n\
    \  return result;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\n \
    \ const n = arr[0] as number;\n  const sortedArray = arr.sort((a: number, b: number)\
    \ => a - b);\n  const reversedArray = sortedArray.slice(0).reverse();\n  const\
    \ strArray = reversedArray.map((val) => {\n    const strNum = val.toString();\n\
    \    const nameIndex = [\"Zero\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n      .reduce((acc, cur, idx) => (acc\
    \ || cur) === strNum ? idx : acc, -1);\n    return nameIndex === -1 ? strNum :\
    \ nameIndex + 1; // convert to string and find index\n  });\n  return strArray;\n\
    }\n", "  const len = arr && arr.length;\n  if (len > 9) {\n    return arr.reduce((a,\
    \ b) => a.concat(b)).filter(Boolean);\n  } else if (len < 1) {\n    return [];\n\
    \  }\n\n  return arr.sort((a, b) => b - a)\n    .map((value, i) => {\n      const\
    \ val = i + 1;\n      return {\n        One: `${val}th`,\n        Two: `${val}rd`,\n\
    \        Three: `${val}th`,\n        Four: `${val}rd`,\n        Five: `${val}th`,\n\
    \        Six: `${val}rd`,\n        Seven: `${val}th`,\n        Eight: `${val}rd`,\n\
    \        Nine: `${val}st`,\n      }[value] || `${value}`;\n    });\n}\n", "  const\
    \ length: number[] = arr\n    .sort((a, b) => a - b)\n    .filter(n => !Number.isNaN(n)\
    \ && n >= 0 && n < 10)\n    .map(n => n.toString());\n\n  return length > 0 ?\
    \ length.slice(1).map(t => `One${t}`) : [\"\"];\n}\n", "  if (arr.length === 0)\
    \ return [];\n\n  // Sort from 1 to 9 inclusive.\n  arr.sort(\n    (l: number,\
    \ r: number) => {\n      if (l > 9 || l < 1) return 0;\n      if (r > 9 || r <\
    \ 1) return 0;\n\n      // Sort from 1 to 9 inclusive.\n      if (l === r) return\
    \ l - r;\n\n      // Sort from 10 upwards.\n      return 10 - l;\n    },\n  );\n\
    \n  // Reverse the sorted array.\n  for (let i = arr.length - 1; i > 0; i--) {\n\
    \    const num = arr[i];\n    arr[i] = arr[i - 1];\n    arr[i - 1] = num;\n  }\n\
    \n  const names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n  const result = arr.map(n => names[n]);\n\n \
    \ return result;\n}\n", "\tlet result = \"\";\n\tarr.sort((a, b) => b - a);\n\t\
    let last = 0;\n\tfor (const i of arr) {\n\t\tif (i - 1 == last) continue;\n\t\t\
    result += i === 1 ? Ones[i - 1] : (i - 1).toString();\n\t\tlast = i;\n\t}\n\t\
    return result || [];\n}\n\nconst Ones: string[] = [\"0\", \"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nconst Threes: string[] = [\"000\"\
    , \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\"\
    , \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\"\
    , \"011\", \"100\", \"101\", \"110\", \"111\"];\n\nconst Twos: string[] = [\"\
    000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\"\
    , \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\"\
    , \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\"\
    , \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\", \"011\"\
    , \"100\", \"101\", \"110\", \"111\"];\n\nconst Tens: string[] = [\"000\", \"\
    001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\"\
    , \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\"\
    , \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\", \"011\"\
    , \"100\", \"101\", \"110\", \"111\"];\n\nconst Tenths: string[] = [\"000\", \"\
    001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\"\
    , \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\"\
    , \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\", \"011\"\
    , \"100\", \"101\", \"110\", \"111\"];\n\nconst Twentieths: string[] = [\"000\"\
    , \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\"\
    , \"010\", \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\"\
    , \"011\", \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\", \"011\"\
    , \"100\", \"101\", \"110\", \"111\", \"000\", \"001\", \"010\", \"011\", \"100\"\
    , \"101\", \"110\", \"111\"];\n\nconst Nines: string[] = [\"000\", \"", "\tif\
    \ (arr.length === 0) return [];\n\tconst sorted_array = arr.sort((a, b) => b -\
    \ a);\n\tconst result: string[] = [];\n\tlet idx = 0;\n\tfor (let i = 1; i < sorted_array.length;\
    \ i++) {\n\t\tif (sorted_array[i] === sorted_array[i - 1] + 1) {\n\t\t\t// if\
    \ the current and previous number are same increase idx\n\t\t\tidx++;\n\t\t} else\
    \ {\n\t\t\t// if the current and previous number are not same\n\t\t\t// then add\
    \ the name\n\t\t\tresult.push(\n\t\t\t\tnames[sorted_array[i]] ?? sorted_array[i],\n\
    \t\t\t\tnames[sorted_array[i - 1]] ?? sorted_array[i - 1],\n\t\t\t);\n\t\t}\n\t\
    }\n\t// if there is no element to add, return the empty array\n\tif (idx === 0)\
    \ return [];\n\t// add the name from the last element\n\tresult.push(\n\t\tnames[sorted_array[sorted_array.length\
    \ - 1]] ?? sorted_array[sorted_array.length - 1],\n\t);\n\treturn result;\n}\n",
  "  const len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len ===\
    \ 1) {\n    return [\"One\"];\n  }\n  const min = Math.min(...arr);\n  const max\
    \ = Math.max(...arr);\n  const delta = Math.abs(max - min);\n  const result =\
    \ [];\n  for (let i = 1; i <= 9; i++) {\n    result.push(`One - ${Math.abs(min\
    \ - i).toFixed(2)}`);\n    result.push(`Two - ${Math.abs(i - min).toFixed(2)}`);\n\
    \    result.push(`Three - ${delta}`);\n    result.push(`Four - ${Math.abs(max\
    \ - i).toFixed(2)}`);\n    result.push(`Five - ${Math.abs(max - min).toFixed(2)}`);\n\
    \    result.push(`Six - ${delta * 2}`);\n    result.push(`Seven - ${delta * 3}`);\n\
    \    result.push(`Eight - ${delta * 4}`);\n    result.push(`Nine - ${delta * 5}`);\n\
    \  }\n  return result;\n}\n", "    if (arr.length === 0) {\n        return [];\n\
    \    }\n    const len = arr.length;\n    const max = len > 9 ? 9 : len;\n    const\
    \ sorted = arr.sort((a, b) => a - b);\n    return sorted.slice(0, max).map((d,\
    \ i) => d > 0 ? \"One\" : d === -1 ? \"Nine\" : i % 10 ? \"Ten\" : \"One\");\n\
    }\n", "  if (!arr.length) return [];\n  const ranges: { [key: number]: { from:\
    \ number, to: number } } = {};\n  let max = 0;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const num = arr[i];\n    if (num < 1 || num > 9) {\n      continue;\n\
    \    }\n    const from = i;\n    while (from < arr.length && arr[from + 1] ===\
    \ num) {\n      from++;\n    }\n    ranges[num] = { from, to: from - 1 };\n  \
    \  max = Math.max(max, from - 1);\n  }\n  const ret: string[] = [];\n  for (let\
    \ i = 1; i <= max; i++) {\n    ret.push(num_by_name(i));\n  }\n  return ret;\n\
    }\n", "  let arr = arr.sort();\n  if (arr.length > 0) {\n    for (let i = 0; i\
    \ <= 9; i++) {\n      let idx = arr.indexOf(i);\n      if (idx != -1) arr[idx]\
    \ = `One ${i}`;\n    }\n    arr.sort();\n  }\n  return arr;\n}\n", "  if (!arr.length)\
    \ {\n    return [];\n  }\n\n  const ranges = { 1: \"\", 2: \"\", 3: \"\", 4: \"\
    \", 5: \"\", 6: \"\",\n    7: \"\", 8: \"\", 9: \"Ten\", 10: \"Eleven\", 11: \"\
    Twelve\",\n    12: \"Thirteen\", 13: \"Fourteen\", 14: \"Fifteen\", 15: \"Sixteen\"\
    ,\n    16: \"Seventeen\", 17: \"Eighteen\", 18: \"Nineteen\" };\n\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    arr[i] = arr[i] * 10 + Math.floor(arr[i]);\n\
    \  }\n\n  let result: string[] = [];\n  for (let i = 1; i < arr.length; i++) {\n\
    \    result[result.length] = ranges[arr[i]];\n  }\n\n  return result;\n}\n", " \
    \ const result = arr.reduce((arr, i) => {\n    const start = arr && arr.length\n\
    \    if (!start) return arr\n    const index = arr.indexOf(i)\n    if (index >=\
    \ start) {\n      arr.splice(index, 0, i + 1)\n    }\n    return arr\n  }, [])\n\
    \  return result.filter(i => i >= 1 && i <= 9)\n    .reduce((arr, i) => {\n  \
    \    arr[i] = `One${i}`\n      return arr\n    }, [])\n}\n", "  arr = arr.filter((value)\
    \ => value >= 1 && value <= 9).sort((a, b) => b - a);\n  arr = arr.reverse();\n\
    \  return arr\n    .map((value) => [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][value])\n    .reverse();\n}\n",
  "  const result = new Array(10);\n  for (let i = 1; i < 10; i++) {\n    const current\
    \ = arr.findIndex(value => value >= i) || arr.length - 1;\n    const previous\
    \ = arr[current];\n    result[i - 1] = \"Nine\";\n    if (previous >= i) result[previous\
    \ - 1] = \"Eight\";\n    if (current >= i) result[current - 1] = \"Seven\";\n\
    \    if (previous >= 0 && current >= 0 && current < previous) result[current]\
    \ = \"One\";\n    if (previous >= 0 && current < previous) result[previous] =\
    \ \"Two\";\n    if (current >= 0 && current < previous) result[current] = \"Three\"\
    ;\n    if (previous < current && previous >= 0) result[previous - 1] = \"Four\"\
    ;\n    if (current < previous) result[current] = \"Five\";\n    if (current <\
    \ previous) result[previous - 1] = \"Six\";\n    if (previous < current) result[previous]\
    \ = \"Seven\";\n  }\n  return result;\n}\n", "    if (!arr.length) {\n       \
    \ return [];\n    }\n    arr.sort((a, b) => {\n        return a - b;\n    });\n\
    \    arr.reverse();\n    const n = arr.length;\n    return arr.map(v => {\n  \
    \      if (v === n) {\n            return \"Nine\";\n        }\n        else if\
    \ (v === 7 || v === 8) {\n            return \"Eight\";\n        }\n        else\
    \ if (v === 5 || v === 6) {\n            return \"Five\";\n        }\n       \
    \ else if (v === 4 || v === 3) {\n            return \"Four\";\n        }\n  \
    \      else if (v === 2 || v === 1) {\n            return \"Two\";\n        }\n\
    \        else {\n            return \"One\";\n        }\n    });\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  if (len === 1)\
    \ {\n    return [\"One\"];\n  }\n  if (len === 2) {\n    return [\"Two\"];\n \
    \ }\n  if (len === 3) {\n    return [\"Three\"];\n  }\n  if (len === 4) {\n  \
    \  return [\"Four\"];\n  }\n  if (len === 5) {\n    return [\"Five\"];\n  }\n\
    \  if (len === 6) {\n    return [\"Six\"];\n  }\n  if (len === 7) {\n    return\
    \ [\"Seven\"];\n  }\n  if (len === 8) {\n    return [\"Eight\"];\n  }\n  if (len\
    \ === 9) {\n    return [\"Nine\"];\n  }\n  return [\n    \"One\",\n    \"Two\"\
    ,\n    \"Three\",\n    \"Four\",\n    \"Five\",\n    \"Six\",\n    \"Seven\",\n\
    \    \"Eight\",\n    \"Nine\"\n  ].map((n) => arr[(len - (n - 1)) % len]);\n}\n",
  "    if (!arr || arr.length === 0) {\n        return [];\n    }\n\n    const max\
    \ = Math.max(...arr);\n    const min = Math.min(...arr);\n    const range = max\
    \ - min;\n\n    // Ignore strange number like -1, 55\n    const filtered = arr.filter((x:\
    \ number) => {\n        return x >= min && x <= max;\n    });\n\n    if (filtered\
    \ && filtered.length > 1) {\n        if (range > 9) {\n            return filter_by_length(filtered);\n\
    \        } else {\n            return filter_by_length_one_digit(filtered);\n\
    \        }\n    } else {\n        return filter_by_length_one_digit(arr);\n  \
    \  }\n}\n", "  let arr2: number[] = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    arr2.push(arr[i]);\n  }\n  arr2.sort((a, b) => a - b);\n  arr2.reverse();\n\
    \  let arr = arr2.map((ele) => {\n    return arr2[(arr2.indexOf(ele) + 1) % (arr2.length\
    \ + 1)];\n  });\n  if (!arr.length) {\n    return [];\n  }\n  arr.forEach((ele)\
    \ => {\n    switch (ele) {\n      case 1:\n        return \"One\";\n      case\
    \ 2:\n        return \"Two\";\n      case 3:\n        return \"Three\";\n    \
    \  case 4:\n        return \"Four\";\n      case 5:\n        return \"Five\";\n\
    \      case 6:\n        return \"Six\";\n      case 7:\n        return \"Seven\"\
    ;\n      case 8:\n        return \"Eight\";\n      case 9:\n        return \"\
    Nine\";\n      default:\n        return ele.toString();\n    }\n  });\n  return\
    \ arr;\n}\n", "\tlet result: number[] = [];\n\tarr.forEach(i => {\n\t\tif (i >=\
    \ 1 && i <= 9) {\n\t\t\tresult.push(i);\n\t\t}\n\t});\n\tlet result2 = result.sort((a,\
    \ b) => b - a);\n\tresult2.forEach(i => {\n\t\tresult[i] = \"One\";\n\t});\n\t\
    return result.map(i => result2[i]) as string[];\n}\n", "  let result = arr.filter(x\
    \ => x >= 1 && x <= 9).sort((a: number, b: number) => b - a);\n  if (!result.length)\
    \ {\n    return result;\n  }\n  const reverse = result.slice(0, result.length\
    \ - 1);\n  const names = reverse.map((x, i) => `One` + i);\n  return result.length\
    \ > 1 ?\n    names.concat(by_length(result.slice(result.length - 1))) :\n    names;\n\
    }\n", "  if (!arr.length) {\n    return [];\n  }\n  const result = new Array<string>(arr.length);\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    if (value\
    \ < 1 || value > 9) {\n      continue;\n    }\n    result.push(by_number[value]);\n\
    \  }\n  return result;\n}\n", "  if (arr.length == 0) {\n    return [];\n  }\n\
    \  const max = Math.max(...arr);\n  if (max === 1) {\n    return [\"One\"];\n\
    \  }\n  if (max === 2) {\n    return [\"Two\", \"Two\"];\n  }\n  const min_length:\
    \ number[] = [];\n  for (const val of arr) {\n    min_length.push(Math.min(val,\
    \ max));\n  }\n  return min_length.map((val) => names[val]);\n}\n", "  if (!arr.length)\
    \ return [];\n  const result: number[] = [];\n  sortNumber(arr);\n  for (let i\
    \ = 1; i < 9; ++i) {\n    result[result.length - 1] = (arr[result.length - 1]\
    \ + \"\").substr(0, 1) + i;\n  }\n  for (let i = 0; i < arr.length; ++i) {\n \
    \   result[result.length - 1] = (result[result.length - 1] + \"\").substr(0, 1)\
    \ + arr[i];\n  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n\
    \  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < DIGITS.length;\
    \ j++) {\n      if (arr[i] >= DIGITS[j][0] && arr[i] <= DIGITS[j][1]) {\n    \
    \    arr[i] = DIGITS[j][2];\n      }\n    }\n  }\n  return arr.sort((a: number,\
    \ b: number) => b - a).reverse().map(str => DIGITS[str]);\n}\n", "  if (!arr.length)\
    \ {\n    return [];\n  }\n\n  const sorted_arr = arr.sort((a: number, b: number)\
    \ => {\n    const a_length = Math.abs(a).toString().length;\n    const b_length\
    \ = Math.abs(b).toString().length;\n    return a_length - b_length;\n  });\n \
    \ return sorted_arr.reverse().map(num => {\n    if (num > 0 && num < 10) {\n \
    \     return \"One\";\n    }\n    if (num > 10 && num < 20) {\n      return \"\
    Two\";\n    }\n    if (num > 20 && num < 30) {\n      return \"Three\";\n    }\n\
    \    if (num > 30 && num < 40) {\n      return \"Four\";\n    }\n    if (num >\
    \ 40 && num < 50) {\n      return \"Five\";\n    }\n    if (num > 50 && num <\
    \ 60) {\n      return \"Six\";\n    }\n    if (num > 60 && num < 70) {\n     \
    \ return \"Seven\";\n    }\n    if (num > 70 && num < 80) {\n      return \"Eight\"\
    ;\n    }\n    if (num > 80 && num < 90) {\n      return \"Nine\";\n    }\n   \
    \ if (num > 90) {\n      return \"Ten\";\n    }\n    return num.toString();\n\
    \  });\n}\n", "  if (arr.length === 0 || arr.length === 1) {\n    return [];\n\
    \  }\n  const len = arr.length;\n  const biggest = Math.max.apply(null, arr);\n\
    \  const str: string[] = [];\n  for (let i = 1; i <= biggest; i++) {\n    str.push(`One\
    \ ${i}`);\n  }\n  for (let i = len - 1; i >= 1; i--) {\n    str.push(`Two ${i}`);\n\
    \  }\n  for (let i = 1; i <= biggest; i++) {\n    str.push(`Three ${i}`);\n  }\n\
    \  for (let i = 1; i <= biggest; i++) {\n    str.push(`Four ${i}`);\n  }\n  for\
    \ (let i = 1; i <= biggest; i++) {\n    str.push(`Five ${i}`);\n  }\n  for (let\
    \ i = 1; i <= biggest; i++) {\n    str.push(`Six ${i}`);\n  }\n  for (let i =\
    \ 1; i <= biggest; i++) {\n    str.push(`Seven ${i}`);\n  }\n  for (let i = 1;\
    \ i <= biggest; i++) {\n    str.push(`Eight ${i}`);\n  }\n  for (let i = 1; i\
    \ <= biggest; i++) {\n    str.push(`Nine ${i}`);\n  }\n  return str;\n}\n", " \
    \ const lens = arr.reduce((acc, val) => acc + 1, 0);\n  const len = Math.pow(10,\
    \ Math.ceil(Math.log10(lens)));\n\n  return arr.filter((x) => x > 0 && x < len).reverse().map((x)\
    \ => numbers[(x * len) % 10]);\n}\n\nconst by_length_cases = [\n  [[], \"\"],\n\
    \  [[1, 2, 3, 10, 6, 0], \"\"],\n  [[1, 2, 3], \"One\"],\n  [[1, 5, 6, 10], \"\
    One\"],\n  [[6, 5, 1], \"One\"],\n  [[4, 3, 8, 6], \"Four\"],\n  [[2, 7, 7, 2],\
    \ \"Two\"],\n  [[1, 4, 6, 5], \"One\"],\n  [[1, 2, 4, 6, 8], \"Eight\"],\n  [[1,\
    \ 2, 1, 3, 6], \"One\"],\n  [[1, 2, 1, 5, 2, 8], \"One\"],\n];\n", "  if (!arr)\
    \ {\n    return [];\n  }\n\n  const reversed = arr.slice(0).reverse();\n  let\
    \ result: string[] = [];\n  for (let i = 0; i < reversed.length; i++) {\n    result.push(by_value(reversed[i]));\n\
    \  }\n  return result;\n}\n", "  if (!arr) {\n    return [];\n  }\n\n  const reversed\
    \ = arr\n    .slice()\n    .reverse();\n  const ones: string[] = [];\n  const\
    \ twos: string[] = [];\n  const threes: string[] = [];\n  const fours: string[]\
    \ = [];\n  const fives: string[] = [];\n  const sixes: string[] = [];\n  const\
    \ sevens: string[] = [];\n  const eights: string[] = [];\n  const nines: string[]\
    \ = [];\n\n  for (const num of reversed) {\n    switch (num % 10) {\n      case\
    \ 1:\n        ones.push(num);\n        break;\n      case 2:\n        twos.push(num);\n\
    \        break;\n      case 3:\n        threes.push(num);\n        break;\n  \
    \    case 4:\n        fours.push(num);\n        break;\n      case 5:\n      \
    \  fives.push(num);\n        break;\n      case 6:\n        sixes.push(num);\n\
    \        break;\n      case 7:\n        sevens.push(num);\n        break;\n  \
    \    case 8:\n        eights.push(num);\n        break;\n      case 9:\n     \
    \   nines.push(num);\n        break;\n      default:\n        continue;\n    }\n\
    \  }\n\n  return ones.concat(\n    twos,\n    threes,\n    fours,\n    fives,\n\
    \    sixes,\n    sevens,\n    eights,\n    nines\n  ).filter(a => !!a);\n}\n",
  "  const len = arr.length\n  if (len === 0) {\n    return []\n  }\n\n  // Add zeros\
    \ to front of array to make all values have the same length:\n  const result:\
    \ number[] = []\n  for (let i = 0; i < len; i++) {\n    result.unshift(0)\n  }\n\
    \n  // Sort and reverse the array\n  result.sort((a, b) => a - b)\n  result.reverse()\n\
    \n  // Replace the number by the name:\n  const namesObj: { [name: string]: number\
    \ } = {}\n  [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"].forEach(\n    n => namesObj[n] = n\n  )\n  for (let i =\
    \ 0; i < len; i++) {\n    result[i] = namesObj[result[i]]\n  }\n  return result\n\
    }\n", "    if (!arr.length)\n        return [];\n    const min = 0;\n    const\
    \ max = Math.min(9, arr.length - 1);\n    const sorted = arr.sort((a, b) => a\
    \ - b);\n    for (let i = min; i <= max; i++)\n        sorted[sorted.indexOf(i)]\
    \ = i;\n    return sorted.map(i => map[i - 1] || i);\n}\n", "  const min = Math.min(...arr);\n\
    \  const max = Math.max(...arr);\n  const result = [];\n  for (let i = min; i\
    \ <= max; i++) {\n    const index = arr.indexOf(i);\n    if (index !== -1) {\n\
    \      result.push(names[index]);\n      arr.splice(index, 1);\n    }\n  }\n \
    \ return result;\n}\n", "  return arr.sort((a: number, b: number) => a > b ? 1\
    \ : a < b ? -1 : 0).toArray().reverse().map(v => {\n    if (v === 1 || v === -1)\
    \ v = 'One';\n    else if (v === 55) v = 'Nine';\n    else if (v === 10 || v ===\
    \ 11) v = 'Ten';\n    else if (v === 12 || v === 13) v = 'Eleven';\n    else if\
    \ (v === 14 || v === 15) v = 'Twelve';\n    else if (v === 16 || v === 17) v =\
    \ 'Thirteen';\n    else if (v === 18 || v === 19) v = 'Fourteen';\n    else if\
    \ (v === 20 || v === 21) v = 'Fifteen';\n    else if (v === 22 || v === 23) v\
    \ = 'Sixteen';\n    else if (v === 24 || v === 25) v = 'Seventeen';\n    else\
    \ if (v === 26 || v === 27) v = 'Eighteen';\n    else if (v === 28 || v === 29)\
    \ v = 'Nineteen';\n    else if (v === 30) v = 'Twenty';\n    else if (v === 31)\
    \ v = 'Thirty';\n    else if (v === 32) v = 'Fourty';\n    else if (v === 33)\
    \ v = 'Fifty';\n    else if (v === 34 || v === 35) v = 'Sixty';\n    else if (v\
    \ === 36 || v === 37) v = 'Seventy';\n    else if (v === 38 || v === 39) v = 'Eighty';\n\
    \    else if (v === 40) v = 'Ninety';\n    else if (v === 41) v = 'Twenty-one';\n\
    \    else if (v === 42) v = 'Twenty-two';\n    else if (v === 43) v = 'Twenty-three';\n\
    \    else if (v === 44) v = 'Twenty-four';\n    else if (v === 45) v = 'Twenty-five';\n\
    \    else if (v === 46) v = 'Twenty-six';\n    else if (v === 47) v = 'Twenty-seven';\n\
    \    else if (v === 48) v = 'Twenty-eight';\n    else if (v === 49) v = 'Twenty-nine';\n\
    \    else if (v === 50) v = 'Thirty-one';\n    else if (v === 51) v = 'Thirty-two';\n\
    \    else if (v === 52) v = 'Thirty-three';\n    else if (v === 53) v = 'Thirty-four';\n\
    \    else if (v === 54) v = 'Thirty-five';\n    else if (v === 55) v = 'Thirty-six';",
  "  let result: string[] = [];\n  let reversed = arr.reverse();\n  reversed.forEach((number:\
    \ number, index: number) => {\n    if (number <= 9 && number >= 1) {\n      let\
    \ name = `One`;\n      if (number === 1 || number === -1 || number === 55) {\n\
    \        name = `One`;\n      }\n      if (number === 2 || number === -2 || number\
    \ === 56) {\n        name = `Two`;\n      }\n      if (number === 3 || number\
    \ === -3 || number === 57) {\n        name = `Three`;\n      }\n      if (number\
    \ === 4 || number === -4 || number === 58) {\n        name = `Four`;\n      }\n\
    \      if (number === 5 || number === -5 || number === 59) {\n        name = `Five`;\n\
    \      }\n      if (number === 6 || number === -6 || number === 60) {\n      \
    \  name = `Six`;\n      }\n      if (number === 7 || number === -7 || number ===\
    \ 61) {\n        name = `Seven`;\n      }\n      if (number === 8 || number ===\
    \ -8 || number === 62) {\n        name = `Eight`;\n      }\n      if (number ===\
    \ 9 || number === -9 || number === 63) {\n        name = `Nine`;\n      }\n  \
    \    result.push(name);\n    }\n  });\n  return result;\n}\n", "  if (!arr.length)\
    \ return [];\n\n  const len = Math.max(...arr);\n  const sorted = arr.sort((a,\
    \ b) => b - a);\n  const one = \"One\";\n  const two = \"Two\";\n  const three\
    \ = \"Three\";\n  const four = \"Four\";\n  const five = \"Five\";\n  const six\
    \ = \"Six\";\n  const seven = \"Seven\";\n  const eight = \"Eight\";\n  const\
    \ nine = \"Nine\";\n\n  const arr2 = [];\n  for (let i = 0; i < sorted.length;\
    \ i++) {\n    if (sorted[i] >= 0 && sorted[i] < len) {\n      arr2.push(one[sorted[i]\
    \ - 1]);\n    } else if (sorted[i] > len && sorted[i] <= 9) {\n      arr2.push(two[sorted[i]\
    \ - 2]);\n    } else if (sorted[i] > 9 && sorted[i] <= 18) {\n      arr2.push(three[sorted[i]\
    \ - 3]);\n    } else if (sorted[i] > 18 && sorted[i] <= 28) {\n      arr2.push(four[sorted[i]\
    \ - 4]);\n    } else if (sorted[i] > 28 && sorted[i] <= 39) {\n      arr2.push(five[sorted[i]\
    \ - 5]);\n    } else if (sorted[i] > 39 && sorted[i] <= 49) {\n      arr2.push(six[sorted[i]\
    \ - 6]);\n    } else if (sorted[i] > 49 && sorted[i] <= 59) {\n      arr2.push(seven[sorted[i]\
    \ - 7]);\n    } else if (sorted[i] > 59 && sorted[i] <= 69) {\n      arr2.push(eight[sorted[i]\
    \ - 8]);\n    } else if (sorted[i] > 69 && sorted[i] <= 79) {\n      arr2.push(nine[sorted[i]\
    \ - 9]);\n    } else {\n      arr2.push(\".\");\n    }\n  }\n  return arr2;\n\
    }\n", "    if (!arr.length) {\n        return [];\n    }\n    const max_len =\
    \ arr.map(x => x.toString().length).sort((a, b) => b - a)[0];\n    return arr.map(x\
    \ => by_digits(max_len, x));\n}", "  if (arr.length === 0) {\n    return [];\n\
    \  }\n\n  const map: string[] = [];\n  const n = arr.length;\n  const start =\
    \ 1;\n\n  for (let i = 1; i < n; ++i) {\n    const length = i - start;\n    map[length]\
    \ = map[length] || [];\n\n    for (let j = 0; j < length; ++j) {\n      map[length][j]\
    \ = map[length][j] || [];\n      map[length][j][arr[length - j - 1 - i]] = arr[length\
    \ - j - 1];\n    }\n  }\n\n  for (let i = 1; i < n; ++i) {\n    map[i - 1] = [];\n\
    \  }\n\n  for (let i = 0; i < n; ++i) {\n    const length = i - start;\n    for\
    \ (let j = 0; j < length; ++j) {\n      map[length][j] = map[length][j] || [];\n\
    \      map[length][j][arr[length - j - 1 - i]] = arr[length - j - 1];\n    }\n\
    \n    for (let j = 0; j < length; ++j) {\n      map[length][j].unshift(arr[i]);\n\
    \    }\n  }\n\n  for (let i = 0; i < n; ++i) {\n    map[i - 1].unshift(arr[i]);\n\
    \  }\n\n  for (let i = 0; i < n; ++i) {\n    for (let j = 0; j < n; ++j) {\n \
    \     if (map[i][j] && map[i][j].length > 0) {\n        map[i][j].sort(function\
    \ (a, b) { return a - b; });\n      }\n    }\n  }\n\n  return map[n][n];\n}\n",
  "  if (!arr.length) return [];\n  const sorted = arr.slice().sort((a, b) => a -\
    \ b);\n  const reversed = sorted.reverse();\n  const result = reversed.map((digit,\
    \ i) => (i > 0 && digit < 10) ?\n      `${arr[i - 1]}` :\n      `${digit_name[digit]}`.toUpperCase());\n\
    \  return result;\n}\n", "  var output: number[] = [];\n  if (!arr.length) {\n\
    \    return [];\n  }\n  var current = \"\";\n  for (var i = 0; i < arr.length;\
    \ i++) {\n    var a = arr[i];\n    if (a !== -1) {\n      current += a.toString();\n\
    \    }\n    if (i === arr.length - 1) {\n      output.push(current);\n      current\
    \ = \"\";\n    }\n  }\n  return output;\n}\n", "  return arr\n    .map((n: number)\
    \ => {\n      if (n > 1 && n < 9) {\n        return names_mapping[n - 1];\n  \
    \    }\n    })\n    .filter((name: string | undefined) => name !== undefined)\n\
    \    .reverse();\n}\n", "  let output: string[] = [];\n  let min_value = Number.MAX_SAFE_INTEGER;\n\
    \  let max_value = Number.MIN_SAFE_INTEGER;\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] < 1 || arr[i] > 9) {\n      continue;\n    }\n    min_value\
    \ = Math.min(min_value, arr[i]);\n    max_value = Math.max(max_value, arr[i]);\n\
    \  }\n  for (let i = 0; i < min_value; i++) {\n    output.push(\"One\");\n  }\n\
    \  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"Two\");\n\
    \  }\n  for (let i = max_value; i >= min_value; i--) {\n    output.push(\"Three\"\
    );\n  }\n  for (let i = max_value; i >= min_value; i--) {\n    output.push(\"\
    Four\");\n  }\n  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"\
    Five\");\n  }\n  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"\
    Six\");\n  }\n  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"\
    Seven\");\n  }\n  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"\
    Eight\");\n  }\n  for (let i = min_value; i <= max_value; i++) {\n    output.push(\"\
    Nine\");\n  }\n  return output;\n}\n", "  if (!arr.length) {\n    return [];\n\
    \  }\n  if (arr[0] < 1 || arr[0] > 9) {\n    return [];\n  }\n  const first =\
    \ arr.shift();\n  if (arr.length === 0) {\n    return [];\n  }\n  const last =\
    \ Math.max(...arr);\n  let i = 0;\n  for (const n of arr) {\n    const size =\
    \ n - last;\n    const name = get_name(size);\n    last = n;\n    if (i < first)\
    \ {\n      i += 1;\n    } else {\n      arr[i] += name;\n    }\n  }\n  return\
    \ arr;\n}\n", "  if (!arr || arr.length === 0) return [];\n  arr = arr.sort((a:\
    \ number, b: number) => a - b);\n  arr.reverse();\n  const result = [];\n  let\
    \ prev = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (i % 10 === 0) {\n\
    \      result[result.length - 1] += `-${arr[i]}`;\n    } else {\n      result[result.length\
    \ - 1] = `${arr[i - prev]}-${arr[i]}`;\n    }\n    prev = i;\n  }\n  return result;\n\
    }\n", "  if (arr.length == 0) {\n    return [];\n  } else if (arr.length == 1)\
    \ {\n    return [\"One\"];\n  } else {\n    let min = 1;\n    let max = 9; //\
    \ start at the highest number in the array\n    let res = [];\n    for (let i\
    \ = 1; i < arr.length; i++) {\n      if (arr[i - 1] < arr[min] || arr[i - 1] >\
    \ arr[max]) {\n        // found a number outside the range of values we need to\
    \ store\n        min++;\n        max--;\n      } else {\n        // found a number\
    \ in the range\n        res.push(arr[i - 1]);\n        min++;\n        max--;\n\
    \      }\n    }\n    return res;\n  }\n}\n", "  if (arr.length === 0) {\n    return\
    \ [];\n  }\n  const min_length = arr.reduce((min: number, x: number) => {\n  \
    \  return Math.min(x, min);\n  }, arr[0]);\n  const max_length = arr.reduce((max:\
    \ number, x: number) => {\n    return Math.max(x, max);\n  }, arr[0]);\n  const\
    \ numbers = Array.from(Array(max_length + 1 - min_length), (_, i) => {\n    const\
    \ value = min_length + (i + 1);\n    if (value > 9) {\n      return undefined;\n\
    \    }\n    return value;\n  });\n  const result = numbers.filter(x => {\n   \
    \ return x !== undefined && numbers.indexOf(x === x);\n  }).map(name => {\n  \
    \  return name === undefined ? 'One' : name;\n  });\n  return result.filter(Boolean);\n\
    }\n", "  if (arr.length === 0) return [];\n  arr.sort((a, b) => a - b);\n  let\
    \ last = 0;\n  let result = new Array<string>();\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] <= 9) {\n      result.push(String.fromCharCode(arr[i]\
    \ + last));\n    } else {\n      if (result.length > 0) {\n        result.push(\"\
    One\");\n      }\n      result.push(\"Nine\");\n      last = arr[i];\n    }\n\
    \  }\n  if (result.length > 0) {\n    result.push(\"One\");\n  }\n  return result;\n\
    }\n", "  if (!arr.length) {\n    return [];\n  }\n\n  const len = Math.min(arr.length,\
    \ 10);\n  const len = Math.max(len, 1);\n  const len = Math.pow(10, len);\n\n\
    \  let sorted = arr.sort();\n  const reversed = sorted.reverse();\n  for (let\
    \ i = 0; i < reversed.length; i++) {\n    reversed[i] = reversed[i].toString();\n\
    \  }\n\n  const result = reversed.map(num => {\n    const str = num.toString();\n\
    \    const index = num % len;\n\n    return index < 10 ? `${str}${ONE_PREFIX}${index}`\
    \ :\n      index < 100 ? `${str}${TWO_PREFIX}${index}` :\n      `${str}${THREE_PREFIX}${index}`;\n\
    \  });\n\n  return result;\n}\n", "  let copy = arr.slice();\n  copy.sort((a:\
    \ number, b: number) => a - b);\n  let result: string[] = [];\n  for (let i =\
    \ 0; i < copy.length; i++) {\n    if (copy[i] > 9) {\n      copy[i] = \"One\"\
    ;\n    } else if (copy[i] > 8) {\n      copy[i] = \"Two\";\n    } else if (copy[i]\
    \ > 7) {\n      copy[i] = \"Three\";\n    } else if (copy[i] > 6) {\n      copy[i]\
    \ = \"Four\";\n    } else if (copy[i] > 5) {\n      copy[i] = \"Five\";\n    }\
    \ else if (copy[i] > 4) {\n      copy[i] = \"Six\";\n    } else if (copy[i] >\
    \ 3) {\n      copy[i] = \"Seven\";\n    } else if (copy[i] > 2) {\n      copy[i]\
    \ = \"Eight\";\n    } else if (copy[i] > 1) {\n      copy[i] = \"Nine\";\n   \
    \ } else {\n      copy[i] = \"Zero\";\n    }\n    result.push(copy[i]);\n  }\n\
    \  return result;\n}\n", "  const len = arr.length;\n  let result: string[] =\
    \ [];\n\n  if (len > 0 && len <= 9) {\n    let i = 0;\n    while (i < len) {\n\
    \      if (arr[i] > 0 && arr[i] < 10) {\n        i += 1;\n        result.push(by_length_map[arr[i]\
    \ - 1]);\n      } else if (arr[i] > 0) {\n        break;\n      } else {\n   \
    \     result.push('');\n      }\n    }\n  }\n\n  return result;\n}\n", "  const\
    \ len = arr.length;\n  if (len === 0) {\n    return [];\n  }\n  const res: string[]\
    \ = [];\n  for (let i = 1; i < len; i += 1) {\n    const value = arr[i];\n   \
    \ let index = -1;\n    let isMax = false;\n    for (let j = 0; j < len; j += 1)\
    \ {\n      const num0 = arr[j];\n      const num1 = arr[j + 1];\n      if (num0\
    \ === value) {\n        index = j;\n      }\n      if (num1 > value) {\n     \
    \   if (num0 === 1) {\n          isMax = true;\n        } else {\n          break;\n\
    \        }\n      }\n    }\n    if (isMax) {\n      res.unshift(`${number[value\
    \ - 1]}th`);\n    } else {\n      res.unshift(number[value]);\n    }\n  }\n  return\
    \ res;\n}\n", "  let sorted = arr.sort((a, b) => a - b);\n  return sorted.reverse().map((item)\
    \ => names[item]);\n}\n", "  if (arr.length === 0) return [];\n  for (const el\
    \ of arr) {\n    if (typeof el !== \"number\") return [];\n    if (el < 1 || el\
    \ > 9) return [];\n  }\n  const [a, b, c, d, e, f, g, h] = arr;\n  const n = [\n\
    \    \"One\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n  \
    \  \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n  ];\n  const ret\
    \ = [\n    \"\",\n    \"Two\",\n    \"Three\",\n    \"Four\",\n    \"Five\",\n\
    \    \"Six\",\n    \"Seven\",\n    \"Eight\",\n    \"Nine\",\n    \"One\",\n \
    \ ];\n  for (let i = b; i <= h; i++) {\n    ret.push(`${n[i]} ${i}`);\n  }\n \
    \ return ret;\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n\n  // sort\
    \ by length\n  const sortedArr = arr.sort((a, b) => b.length - a.length);\n\n\
    \  // reverse the array\n  sortedArr.reverse();\n\n  // map each digit to a name\n\
    \  return sortedArr.map((digit, i) => {\n    const name = DIGITS[digit];\n   \
    \ if (name) {\n      return name;\n    }\n\n    return String(digit);\n  });\n\
    }\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const sorted_array =\
    \ arr.sort((a, b) => a - b);\n  const result: string[] = [];\n  for (let i = 1;\
    \ i <= 9; i++) {\n    result.push(by_index(sorted_array, i));\n  }\n  return result;\n\
    }\n", "  if (!arr.length) {\n    return [];\n  }\n  const result: string[] = [];\n\
    \  for (let i = 0; i < arr.length; i++) {\n    const n = arr[i];\n    if (n >\
    \ 0 && n < 10) {\n      result.unshift(NAMES[n - 1]);\n    } else if (n === -1)\
    \ {\n      result.push(\"MinusOne\");\n    } else {\n      result.push(\"Zero\"\
    );\n    }\n  }\n  return result;\n}\n", "  if (arr.length === 0) {\n    return\
    \ [];\n  }\n  const arr = arr.map(d => {\n    return +d;\n  });\n  if (arr.some(d\
    \ => d < 1 || d > 9)) {\n    return [];\n  }\n  const sortedArr = arr.sort((a,\
    \ b) => a - b);\n  let result = new Array<string>();\n  let counter = 1;\n  let\
    \ last = -1;\n  for (let i = 1; i < 9; i++) {\n    const num = sortedArr[i];\n\
    \    if (num === sortedArr[i - 1]) {\n      continue;\n    }\n    if (last !==\
    \ -1) {\n      if (num - 1 === sortedArr[last - 1]) {\n        result.push(counter);\n\
    \        counter++;\n        last = -1;\n      } else {\n        result.push(counter);\n\
    \      }\n    } else {\n      last = num - 1;\n      result.push(counter);\n \
    \     counter++;\n    }\n  }\n  return result;\n}\n", "  if (!arr.length) { return\
    \ []; }\n  const maxLen = arr.sort((a, b) => a - b)[0]; // largest number\n  const\
    \ maxLenName = oneToNine[maxLen]; // \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n  const arr2 = arr.map(a => a\
    \ < 1 ? \"\" : oneToNine[a]);\n  return arr2.reverse().map(a => a ? maxLenName\
    \ : \"\").reverse();\n}\n", "    const res = [];\n    let counter = 0;\n    for\
    \ (const item of arr) {\n        if (item < 1 || item > 9) {\n            continue;\n\
    \        }\n        if (counter === 9) {\n            counter = 0;\n        }\n\
    \        res.push(names[item]);\n        counter++;\n    }\n    return res.reverse();\n\
    }\n", "  return arr.reduce((acc, num) => {\n    const idx = Math.floor((num -\
    \ 1) / 10);\n    if (idx === 9) {\n      acc.push('Nine');\n    } else if (idx\
    \ === 8) {\n      acc.push('Eight');\n    } else if (idx === 7) {\n      acc.push('Seven');\n\
    \    } else if (idx === 6) {\n      acc.push('Six');\n    } else if (idx === 5)\
    \ {\n      acc.push('Five');\n    } else if (idx === 4) {\n      acc.push('Four');\n\
    \    } else if (idx === 3) {\n      acc.push('Three');\n    } else if (idx ===\
    \ 2) {\n      acc.push('Two');\n    } else if (idx === 1) {\n      acc.push('One');\n\
    \    } else {\n      acc.push((idx % 10 + 1) * 'Zero');\n    }\n    return acc;\n\
    \  }, []);\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  const first\
    \ = arr[0];\n  if (isNaN(first)) {\n    return [];\n  }\n  let result: string[]\
    \ = [];\n  const sorted = arr.sort((a, b) => a - b);\n  for (let i = 1; i < sorted.length;\
    \ i++) {\n    const num = sorted[i];\n    const numStr = String(num);\n    if\
    \ (num > 0 && num % 10 !== 1) {\n      result.push(\"One\");\n    }\n    if (num\
    \ > 1 && num % 10 === 1) {\n      result.push(\"Two\");\n    }\n    if (num >\
    \ 2 && num % 10 === 2) {\n      result.push(\"Three\");\n    }\n    if (num >\
    \ 3 && num % 10 === 3) {\n      result.push(\"Four\");\n    }\n    if (num > 4\
    \ && num % 10 === 4) {\n      result.push(\"Five\");\n    }\n    if (num > 5 &&\
    \ num % 10 === 5) {\n      result.push(\"Six\");\n    }\n    if (num > 6 && num\
    \ % 10 === 6) {\n      result.push(\"Seven\");\n    }\n    if (num > 7 && num\
    \ % 10 === 7) {\n      result.push(\"Eight\");\n    }\n    if (num > 8 && num\
    \ % 10 === 8) {\n      result.push(\"Nine\");\n    }\n  }\n  result = result.reverse();\n\
    \  for (let i = 0; i < result.length; i++) {\n    if (result[i][0] === \"One\"\
    ) {\n      result[i] = \"One\";\n    } else if (result[i][0] === \"Two\") {\n\
    \      result[i] = \"Two\";\n    } else if (result[i][0] === \"Three\") {\n  \
    \    result[i] = \"Three\";\n    } else if (result[i][0] === \"Four\") {\n   \
    \   result[i] = \"Four\";\n    } else if (result[i][0] === \"Five\") {\n     \
    \ result[i] = \"Five\";\n    } else if (result[i][0] === \"Six\") {\n      result[i]\
    \ = \"Six\";\n    } else if (result[i][0] === \"Seven\") {\n      result[i] =\
    \ \"Seven\";\n    } else if (result[i][0] === \"Eight\") {\n      result[i] =\
    \ \"Eight\";\n    } else if (result[i][0] === \"Nine\") {\n      result[i] = \"\
    Nine\";\n    }\n  }\n  return result;\n}\n", "  return arr\n    .map(i => i ==\
    \ -1 ? \"One\" : i >= 1 && i <= 9 ? i + \"One\" : i == -11 ? \"Nine\" : i == -12\
    \ ? \"Eight\" : i.toString())\n    .filter(i => i)\n    .reverse();\n}\n", " \
    \ if (arr.length === 0) return [];\n  const result = [];\n  const min = Math.min.apply(Math,\
    \ arr);\n  const max = Math.max.apply(Math, arr);\n  let i: number;\n  for (i\
    \ = 0; i < min; i++) {\n    result.push(`One`);\n  }\n  for (i = min; i <= max;\
    \ i++) {\n    result.push(`Two${i % 2 ? `s` : ``}`);\n  }\n  for (i = max; i >=\
    \ min; i--) {\n    result.push(`Three${i % 2 ? `s` : ``}`);\n  }\n  for (i = min;\
    \ i <= max; i++) {\n    result.push(`Four${i % 2 ? `s` : ``}`);\n  }\n  for (i\
    \ = max; i >= min; i--) {\n    result.push(`Five${i % 2 ? `s` : ``}`);\n  }\n\
    \  for (i = min; i <= max; i++) {\n    result.push(`Six${i % 2 ? `s` : ``}`);\n\
    \  }\n  for (i = max; i >= min; i--) {\n    result.push(`Seven${i % 2 ? `s` :\
    \ ``}`);\n  }\n  for (i = min; i <= max; i++) {\n    result.push(`Eight${i % 2\
    \ ? `s` : ``}`);\n  }\n  for (i = max; i >= min; i--) {\n    result.push(`Nine${i\
    \ % 2 ? `s` : ``}`);\n  }\n  return result;\n}\n", "  if (arr.length === 0) return\
    \ [];\n  const sorted = arr.sort((a, b) => b - a);\n  const reversed = sorted.reverse();\n\
    \  const result: string[] = [];\n  for (const n of reversed) {\n    if (n > 9\
    \ && n < 1) continue;\n    if (n === 1) result.push(\"One\");\n    if (n === 2)\
    \ result.push(\"Two\");\n    if (n === 3) result.push(\"Three\");\n    if (n ===\
    \ 4) result.push(\"Four\");\n    if (n === 5) result.push(\"Five\");\n    if (n\
    \ === 6) result.push(\"Six\");\n    if (n === 7) result.push(\"Seven\");\n   \
    \ if (n === 8) result.push(\"Eight\");\n    if (n === 9) result.push(\"Nine\"\
    );\n  }\n  return result;\n}\n", "  if (arr.length === 0) return [];\n  if (arr.some((n)\
    \ => n < 1 || n > 9)) return;\n  const numbers = [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n  let i = 0;\n\
    \  while (i < arr.length) {\n    const n = arr[i];\n    arr[i] = numbers[Math.floor(n\
    \ / 10)];\n    i++;\n  }\n  return arr;\n}\n", "  if (!arr.length) {\n    return\
    \ [];\n  }\n\n  const len = arr.reduce((a, b) => Math.max(a, b), 0);\n  const\
    \ sorted = arr.sort((a, b) => b - a);\n  return sorted.reverse().map(a => [a,\
    \ nameOf(a)].join(\"\"));\n}\n", "  let result: string[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if (arr[i] >= 1 && arr[i] <= 9) {\n      result\
    \ = result.concat(reverse_number(arr[i]));\n    }\n  }\n  return result;\n}\n",
  "  if (arr.length === 0) return [];\n  const min = Math.min(...arr);\n  const max\
    \ = Math.max(...arr);\n  const output: string[] = [];\n  for (let i = min; i <=\
    \ max; i++) {\n    output.push(by_index(i));\n  }\n  return output;\n}\n", " \
    \ if (arr.length === 0) {\n    return [];\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    const element = arr[i];\n    if (element > 9) {\n      return [];\n\
    \    }\n    if (element >= 1) {\n      arr[i] = by_length_impl(element, arr);\n\
    \    }\n  }\n  return arr;\n}\n", "  if (arr.length === 0) return [];\n  const\
    \ max = Math.max(...arr);\n  const min = Math.min(...arr);\n  const arr2 = (arr:\
    \ any).filter((x: number) => x >= min && x <= max);\n  const ones = arr2.filter((x:\
    \ number) => x === 1);\n  const tens = arr2.filter((x: number) => x === 10);\n\
    \  const fives = arr2.filter((x: number) => x === 5);\n  const twos = arr2.filter((x:\
    \ number) => x === 2);\n  const threes = arr2.filter((x: number) => x === 3);\n\
    \  const fours = arr2.filter((x: number) => x === 4);\n  const sixes = arr2.filter((x:\
    \ number) => x === 6);\n  const sevens = arr2.filter((x: number) => x === 7);\n\
    \  const eights = arr2.filter((x: number) => x === 8);\n  const nines = arr2.filter((x:\
    \ number) => x === 9);\n  const arr3 = (arr: any).filter((x: number) => x < min\
    \ || x > max);\n  if (arr3.length === 0) return [];\n  if (min.length === 1) return\
    \ ones;\n  if (min.length === 2) return twos;\n  if (min.length === 3) return\
    \ threes;\n  if (min.length === 4) return fours;\n  if (min.length === 5) return\
    \ fives;\n  if (min.length === 6) return sixes;\n  if (min.length === 7) return\
    \ sevens;\n  if (min.length === 8) return eights;\n  if (min.length === 9) return\
    \ nines;\n  if (min.length === 10) return tens;\n  if (min.length === 11) return\
    \ ones;\n  return arr3;\n}\n", "    if (arr.length === 0) return [];\n    if (arr.length\
    \ === 1) return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"];\n    if (arr.length === 2) return [\"One\", \"\
    Two\"];\n    if (arr.length === 3) return [\"One\", \"Two\", \"Three\"];\n   \
    \ if (arr.length === 4) return [\"One\", \"Two\", \"Three\", \"Four\"];\n    if\
    \ (arr.length === 5) return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"];\n\
    \    if (arr.length === 6) return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"];\n    if (arr.length === 7) return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\"];\n    if (arr.length === 8) return [\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"];\n  \
    \  if (arr.length === 9) return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"];\n}\n", "  const result = new Array<string>()\n\
    \  arr.forEach((num) => {\n    const length = String(num).length\n    if (length\
    \ === 1) {\n      result.push('One')\n    } else if (length === 2) {\n      result.push('Two')\n\
    \    } else if (length === 3) {\n      result.push('Three')\n    } else if (length\
    \ === 4) {\n      result.push('Four')\n    } else if (length === 5) {\n      result.push('Five')\n\
    \    } else if (length === 6) {\n      result.push('Six')\n    } else if (length\
    \ === 7) {\n      result.push('Seven')\n    } else if (length === 8) {\n     \
    \ result.push('Eight')\n    } else if (length === 9) {\n      result.push('Nine')\n\
    \    } else {\n      result.push(`${num}`)\n    }\n  })\n  return result\n}\n",
  "  if (arr.length === 0) {\n    return [];\n  }\n  const min_val = Math.min(...arr);\n\
    \  const max_val = Math.max(...arr);\n  let range: number;\n  if (min_val ===\
    \ max_val) {\n    return [\"One\"];\n  } else if (min_val < 1 || min_val > 9)\
    \ {\n    return [];\n  } else {\n    range = Math.floor(Math.log10(max_val) -\
    \ Math.floor(Math.log10(min_val)) + 1);\n  }\n  return arr.filter((val) => val\
    \ <= max_val).reverse().map((val) => {\n    const num = 10 ** (range - Math.floor(Math.log10(val)));\n\
    \    return `${get_word_from_num(num)} ${val}`;\n  });\n}\n", "\tif (!arr || arr.length\
    \ === 0) {\n\t\treturn [];\n\t}\n\tconst max = (Math.pow(10, Math.max(arr.reduce((a,\
    \ b) => Math.max(a, b), 0))) - 1);\n\treturn Array.from({ length: max }, (_, i)\
    \ => i.toString()).reverse().map(n => arr[n]);\n}\n", "  if (arr.length === 0)\
    \ return arr;\n  const minLength = Math.min(...arr);\n  const maxLength = Math.max(...arr);\n\
    \  for (let i = minLength; i <= maxLength; i++) {\n    const index = arr.indexOf(i);\n\
    \    arr[index] = by_length_helper(i);\n  }\n  return arr.filter(e => e);\n}\n",
  "  if (!arr.length) {\n    return [];\n  }\n  const ret: string[] = [];\n  for (const\
    \ i of arr) {\n    // Ignore any number outside of the range.\n    if (i > 9 ||\
    \ i < 1) {\n      continue;\n    }\n\n    const names: string[] = [\n      \"\
    One\",\n      \"Two\",\n      \"Three\",\n      \"Four\",\n      \"Five\",\n \
    \     \"Six\",\n      \"Seven\",\n      \"Eight\",\n      \"Nine\"\n    ];\n \
    \   const idx = i - 1;\n    if (idx < names.length) {\n      ret.push(names[idx]);\n\
    \    }\n  }\n  return ret;\n}\n", "  return arr\n    .filter(item => item > 0\
    \ && item < 9)\n    .sort((a, b) => b - a)\n    .reverse()\n    .map((item, idx)\
    \ => {\n      const one: number = item % 10 + 1;\n      const two: number = item\
    \ / 10 + 1;\n      const three: number = two * 2;\n      const four: number =\
    \ three;\n      const five: number = four * 2;\n      const six: number = five;\n\
    \      const seven: number = six * 2;\n      const eight: number = seven;\n  \
    \    const nine: number = eight * 2;\n      const names: string[] = [\"One\",\
    \ \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ];\n      return names[item];\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
