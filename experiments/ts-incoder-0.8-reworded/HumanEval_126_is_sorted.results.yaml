language: ts
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst === null || lst === undefined) return false;\n  for (let\
    \ i = 0, n = lst.length; i < n; i++) {\n    let j = i;\n    for (let k = i+1;\
    \ k < n; k++) {\n      if (lst[j] < lst[k]) return true;\n      if (lst[j] > lst[k])\
    \ return false;\n    }\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfzcglw8e.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfzcglw8e.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let sorted: boolean = true;\n  for (const num of lst) {\n    sorted\
    \ = sorted && num === nums[nums.length - 1];\n  }\n  return sorted;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr34w1z_k.ts(24,32): error TS2552: Cannot find name
    ''nums''. Did you mean ''num''?

    ../../../../../tmp/tmpr34w1z_k.ts(24,37): error TS2552: Cannot find name ''nums''.
    Did you mean ''num''?

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length <= 1) return true;\n\tlet sorted_arr = lst.slice();\n\
    \tsorted_arr.sort();\n\tlet last = sorted_arr[0];\n\tlet first = sorted_arr[1];\n\
    \tfor (let i = 1; i < sorted_arr.length; i++) {\n\t\tif (sorted_arr[i] === last\
    \ + 1) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (sorted_arr[i] === last - 1) {\n\t\t\t\
    return false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2c8tf28.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2c8tf28.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst && lst.length <= 1) return true;\n  for (let i = 0; i <\
    \ lst.length - 1; i++) {\n    if (lst[i] === lst[i + 1]) return false;\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp__s0uquj.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp__s0uquj.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length > 1) {\n    for (let i = 0; i < lst.length - 2;\
    \ i++) {\n      if (lst[i] === lst[i + 1]) {\n        return false;\n      }\n\
    \    }\n    return true;\n  }\n  return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3igwltgr.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3igwltgr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const prev: string[] = [];\n  let flag = false;\n  for (const num\
    \ of lst) {\n    const flag1 = flag;\n    const flag2 = !prev[prev.length - 1];\n\
    \    if (flag1 && flag2) {\n      prev[prev.length - 1] = num;\n      flag = true;\n\
    \    } else if (!flag1) {\n      prev.push(num);\n      flag = true;\n    } else\
    \ if (flag2) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptvo60mlu.ts(28,7): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmptvo60mlu.ts(31,17): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  \n  let sorted = false;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i];\n    for (let j = i + 1; j < lst.length; j++) {\n\
    \      if (lst[j] === num) {\n        sorted = true;\n        break;\n      }\n\
    \    }\n    if (!sorted) return false;\n  }\n  return sorted;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd2ns3289.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd2ns3289.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.size < 2) {\n    return true\n  }\n\n  // count the number\
    \ of occurrences of each number, ignoring duplicates\n  // https://stackoverflow.com/questions/23667086/count-number-of-occurrences-of-each-value-in-array\n\
    \  const map: Map<number, number> = new Map()\n  for (const val of lst) {\n  \
    \  map.set(val, map.has(val) ? map.get(val) + 1 : 1)\n  }\n\n  // If there are\
    \ less than two numbers, they aren't sorted\n  if (map.size < 2) {\n    return\
    \ true\n  }\n\n  // Now go through the map, seeing if the numbers are in sorted\
    \ order\n  for (const [val, count] of map.entries()) {\n    const prevVal = map.get(val\
    \ - 1)\n    if (prevVal === undefined) {\n      return false\n    }\n    if (prevVal\
    \ >= val) {\n      return false\n    }\n  }\n\n  return true\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp06q01xfw.ts(22,11): error TS2339: Property ''size''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmp06q01xfw.ts(28,14): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmp06q01xfw.ts(28,40): error TS2552: Cannot find name ''Map''.
    Did you mean ''map''?

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let unique_nums = []\n  for (let num of lst) {\n    if (unique_nums.indexOf(num)\
    \ === -1) {\n      unique_nums.push(num)\n    }\n  }\n  return unique_nums.length\
    \ <= 1\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpinif1r6k.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpinif1r6k.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst === undefined) {\n        throw 'Invalid Input';\n  \
    \  }\n\n    let l: number = lst.length;\n\n    if (l === 1) {\n        return\
    \ true;\n    }\n\n    for (let i = 1; i < l; i++) {\n        if (lst[i - 1] ===\
    \ lst[i]) {\n            return false;\n        }\n    }\n\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxrcmhcb2.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxrcmhcb2.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let n = lst.length;\n  if (n === 0)\n    return true;\n  if (n\
    \ === 1)\n    return lst[0] === lst;\n\n  let sorted_first = lst[0];\n  for (let\
    \ i = 1; i < n; ++i) {\n    if (lst[i] < sorted_first) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3nab2sj3.ts(26,12): error TS2367: This condition
    will always return ''false'' since the types ''number'' and ''number[]'' have
    no overlap.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const len = lst.length;\n  if (len < 2) {\n    return false;\n\
    \  }\n  for (let i = 1; i < len; i++) {\n    if (lst[i - 1] > lst[i]) {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr9r_hrkx.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr9r_hrkx.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let unique_count = lst.reduce((count, n) => { \n        return\
    \ count + (n === lst.indexOf(lst[n])); \n    }, 0); \n    return unique_count\
    \ <= 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmy5fhq3_.ts(23,16): error TS2365: Operator ''+''
    cannot be applied to types ''number'' and ''boolean''.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let count = 1;\n  let index = 0;\n  let result = true;\n  while\
    \ (index < lst.length && result) {\n    if (lst[index] !== lst[index + count])\
    \ {\n      result = false;\n    }\n    count++;\n    index++;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1pkhr_ep.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1pkhr_ep.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015613
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) { return true; }\n\n  const seen = new Set();\n\
    \  let i = lst.length - 1;\n  let j = lst.length - 2;\n  while (i >= 0 || j >=\
    \ 0) {\n    if (i > 0 && lst[i] === lst[i-1]) { i--; }\n    if (j > 0 && lst[j]\
    \ === lst[j-1]) { j--; }\n    if (i >= 0 && j >= 0 && lst[i] === lst[j]) {\n \
    \     if (seen.has(lst[i])) { continue };\n      seen.add(lst[i]);\n      return\
    \ true;\n    }\n    i -= 1;\n    j -= 1;\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1tyus2_v.ts(24,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length === 0) {\n        return true;\n    }\n\n    const\
    \ sorted = lst.slice().sort((a, b) => a - b);\n    if (sorted === lst) {\n   \
    \     return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpof_bulxb.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpof_bulxb.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.sort().toString() === lst.sort().toString();\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp48d1qihc.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp48d1qihc.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let foundDuplicate: boolean = false;\n\n  for (let i = 0; i < lst.length\
    \ && !foundDuplicate; i++) {\n    for (let j = i + 1; j < lst.length && !foundDuplicate;\
    \ j++) {\n      if (lst[i] < lst[j]) {\n        foundDuplicate = true;\n     \
    \   break;\n      }\n    }\n  }\n  return foundDuplicate;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp23kr82qi.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp23kr82qi.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) return true\n    for (let i = 0; i < lst.length\
    \ - 1; i++) {\n        if (lst[i] === lst[i + 1])\n            return false\n\
    \    }\n    return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_x0_a_tk.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_x0_a_tk.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return lst.length === 1\n  }\n  //\
    \ if there are two or more equal numbers, return false\n  let seen: Set<number>\
    \ = new Set<number>()\n  for (let i = 0; i < lst.length; i++) {\n    if (seen.has(lst[i]))\
    \ {\n      return false\n    }\n    seen.add(lst[i])\n  }\n  return true\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpprsxg5mp.ts(26,13): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpprsxg5mp.ts(26,31): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return true\n  }\n  if (lst.length\
    \ % 2 !== 0) {\n    lst = sortFloats2(lst)\n  } else {\n    lst = sortFloats(lst)\n\
    \  }\n  let sorted = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]\
    \ > lst[i + 1]) {\n      return false\n    }\n    sorted++\n  }\n  return sorted\
    \ === lst.length\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbf5pvv_v.ts(26,11): error TS2304: Cannot find name
    ''sortFloats2''.

    ../../../../../tmp/tmpbf5pvv_v.ts(28,11): error TS2304: Cannot find name ''sortFloats''.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) return true\n  let i = 1\n  let prev: number\n\
    \  for (; i < lst.length; ++i) {\n    if (lst[i - 1] === lst[i]) return false\n\
    \  }\n  prev = lst[0]\n  for (let i = 1; i < lst.length; ++i) {\n    if (prev\
    \ === lst[i]) return false\n    prev = lst[i]\n  }\n  return true\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp81cf5usr.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp81cf5usr.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015612
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return is_sorted_in_ascending_order(lst) && is_unique_number(lst);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn5ffxzk1.ts(22,10): error TS2304: Cannot find name
    ''is_sorted_in_ascending_order''.

    ../../../../../tmp/tmpn5ffxzk1.ts(22,47): error TS2304: Cannot find name ''is_unique_number''.

    '
  timestamp: 1660015612
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) return true;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    const val = lst[i];\n    for (let j = i + 1; j < lst.length; j++)\
    \ {\n      if (val === lst[j]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq_7o3m26.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq_7o3m26.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const unique = new Set(lst);\n  return Array.from(unique).length\
    \ === lst.length;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkovrou_n.ts(22,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpkovrou_n.ts(23,16): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for(var i = 0; i < lst.length; i++) {\n    var dups = lst.filter(function(v){\n\
    \      return v === lst[i];\n    }).length;\n    if(dups > 1) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprfsfeo53.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprfsfeo53.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const len = lst.length;\n  if (len < 2) {\n    return true;\n \
    \ }\n  const first = new Set();\n  for (let i = 0; i < len; i++) {\n    if (i\
    \ > 0) {\n      if (!first.has(lst[i]) && lst[i] !== lst[i - 1]) {\n        return\
    \ false;\n      }\n    }\n    first.add(lst[i]);\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj704zdwx.ts(26,21): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const arr: string[] = lst.toString().split(',');\n    for (let\
    \ i = 0; i < arr.length; i++){\n        const num = parseInt(arr[i], 10);\n  \
    \      if (num === arr[i]){\n            continue;\n        }\n        return\
    \ false;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnawp7trg.ts(25,13): error TS2367: This condition
    will always return ''false'' since the types ''number'' and ''string'' have no
    overlap.

    '
  timestamp: 1660015614
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.filter(function (a, i) { return a === lst[i]; }).length\
    \ < lst.length\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfd97vbb6.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfd97vbb6.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const dupes = new Set<number>();\n    const l = lst.length;\n\
    \    let dupes_idx: number = 0;\n    let i, j;\n    for (i = 0; i < l; i++) {\n\
    \        j = i - 1;\n        if (dupes.has(lst[j])) {\n            dupes_idx =\
    \ i;\n            break;\n        }\n        while (j >= 0 && lst[j] > lst[j +\
    \ 1]) {\n            dupes.delete(lst[j]);\n            j--;\n        }\n    }\n\
    \    return i > dupes_idx;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwhva1epd.ts(22,23): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    if (i === lst.length\
    \ - 1 || lst[i] !== lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp737raewj.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp737raewj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] ===\
    \ lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4w5p0nar.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4w5p0nar.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) return true;\n    let hash: number[] = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        hash[i] = lst[i];\n    }\n\
    \    for (let i = 1, j = 0; i < lst.length; i++) {\n        if (lst[i] == hash[j])\
    \ {\n            if (j == lst.length - 1) {\n                return true;\n  \
    \          } else {\n                j++;\n                hash[j] =  lst[i];\n\
    \            }\n        }\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3acr0tj1.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3acr0tj1.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  lst.sort();\n  let sorted = true;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] !== lst[i + 1]) {\n      sorted = false;\n      break;\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpanw_p0j0.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpanw_p0j0.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let lastElem = lst.pop()\n  return lst.every(el => {\n    return\
    \ el === lastElem\n  })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7f3q4mmj.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7f3q4mmj.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const counts = new Map<number, number>();\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    const num = lst[i];\n    if (counts.get(num) === undefined)\
    \ {\n      counts.set(num, 1);\n    } else {\n      const count = counts.get(num);\n\
    \      if (count > 1) {\n        return false;\n      }\n      counts.set(num,\
    \ count + 1);\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2s5s5t8v.ts(22,22): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i];\n\
    \    for (let j = i; j < lst.length; j++) {\n      if (num === lst[j]) {\n   \
    \     return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpufmzxj7g.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpufmzxj7g.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return false;\n  }\n  for (let i = 1;\
    \ i < lst.length; i++) {\n    if (lst[i - 1] === lst[i]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_50wo764.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_50wo764.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  console.log(lst)\n  for (let i = 0; i < lst.length - 2; i++) {\n\
    \    if (lst[i + 1] === lst[i]) {\n      return false\n    }\n  }\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy63fqy4p.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy63fqy4p.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 5 ]

    [ 1, 2, 3, 4, 5 ]

    [ 1, 3, 2, 4, 5 ]

    '
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const dupes = Object.values(new Set(lst));\n  return dupes.length\
    \ === 1 && dupes[0] === lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprq9yw5g4.ts(22,24): error TS2339: Property ''values''
    does not exist on type ''ObjectConstructor''.

    ../../../../../tmp/tmprq9yw5g4.ts(22,35): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.length < 2 || unique(lst).length === lst.length;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvsbh04n3.ts(22,28): error TS2304: Cannot find name
    ''unique''.

    '
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) return true\n  let seen = new Set<number>()\n\
    \  let len = lst.length\n  seen.add(-1)\n  for (let i = 0; i < len; ++i) {\n \
    \   if (seen.has(lst[i])) {\n      return false\n    }\n    seen.add(lst[i])\n\
    \  }\n  return true\n}\n</code>\nThe above implementation is O(n) and is probably\
    \ the most elegant solution I could think of but I'm sure there are better ones\
    \ out there. I'll leave this here as a reference for anyone else struggling with\
    \ a similar problem or for anyone who doesn't want to implement a sorting algorithm.\
    \ :)\n<|/ a dscore=0 |>\n<| c |>\nThis solution doesn't take into account that\
    \ any permutation of the given numbers can be sorted.\n<|/ c |>\n<| a dscore=0\
    \ |>\nA slightly different approach:\n<code>\nlet arr = [1,2,3,4,5,6];\nlet permutations\
    \ = arr.map((el,i)=>arr.slice(i).concat([el]));\nlet sortedPermutations = permutations.map(permutation=>permutation.sort((a,b)=>a-b)).filter(permutation=>permutation.sort((a,b)=>a-b)===permutation);\n\
    \nconsole.log(sortedPermutations);\n</code>\n<|/ a tags=javascript,sorting |>\n\
    <| a tags=javascript,sorting |>\nMy solution:\n<code>\nconst array = [1,2,3,4,5,6,7,8,9,10];\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbcx4rash.ts(34,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbcx4rash.ts(34,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbcx4rash.ts(35,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,59): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,90): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,93): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,97): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,98): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,141): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,144): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,150): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,155): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,165): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,175): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,179): error TS1005: ''('' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,186): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbcx4rash.ts(35,202): error TS1005'
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.every(function (val, idx) {\n    return val === lst[idx];\n\
    \  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpres_n3wp.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpres_n3wp.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const first = lst[0];\n  let last = lst[lst.length - 1];\n  let\
    \ i = 0;\n  let j = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] === last\
    \ && lst[i + 1] === first) {\n      i += 1;\n      j += 1;\n      continue;\n\
    \    }\n    if (lst[i] === first) {\n      i += 1;\n      continue;\n    }\n \
    \   if (lst[i] === last) {\n      j += 1;\n      last = lst[i + 1];\n      continue;\n\
    \    }\n    return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4jh2gv_p.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4jh2gv_p.js:62:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) {\n    return true;\n  }\n  const sorted\
    \ = _.sortBy(lst, (x) => x);\n  let flag = true;\n  for (let i = 1; i < sorted.length;\
    \ i++) {\n    if (sorted[i] === sorted[i - 1]) {\n      flag = false;\n      break;\n\
    \    }\n  }\n  return flag;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz7teewym.ts(25,18): error TS2304: Cannot find name
    ''_''.

    '
  timestamp: 1660015615
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.includes(lst[0])) {\n        return false;\n    }\n \
    \   for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < lst[i - 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw3h2lmyg.ts(22,13): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015615
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length <= 1) {\n\t\treturn true;\n\t}\n\n\t// This code\
    \ will never pass test case 4 as number\n\t// array contains duplicate number\n\
    \tlet last_num = lst[lst.length - 1];\n\tfor (let i = 1; i < lst.length; i++)\
    \ {\n\t\tif (lst[i - 1] === last_num) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpkxko062g.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkxko062g.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const len = lst.length;\n  let j = 0;\n  for (let i = 0; i < len;\
    \ i++) {\n    if (lst[j] !== lst[(i + 1) % len]) {\n      return false;\n    }\n\
    \    j++;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpe422sosw.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe422sosw.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const sorted_arr = lst.sort();\n  let is_sorted: boolean;\n  for\
    \ (let i = 0; i < sorted_arr.length; i++) {\n    if (sorted_arr[i] === sorted_arr[i\
    \ + 1]) {\n      is_sorted = true;\n      break;\n    }\n  }\n  return is_sorted;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1l5qle64.js:35:12)\n \
    \   at Object.<anonymous> (/tmp/tmp1l5qle64.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.sort((a: number, b: number) => a < b).length === lst.length;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpj6e579lo.ts(22,19): error TS2345: Argument of type\
    \ '(a: number, b: number) => boolean' is not assignable to parameter of type '(a:\
    \ number, b: number) => number'.\n  Type 'boolean' is not assignable to type 'number'.\n"
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.some((n) => n === lst[0])) {\n        return false;\n\
    \    }\n    for (let i = 1; i < lst.length; ++i) {\n        if (lst[i] === lst[i\
    \ - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpig4zpszm.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpig4zpszm.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) { return true; }\n  var counts = {}, i;\n \
    \ for (i = 0; i < lst.length; ++i) {\n    var v = lst[i];\n    counts[v] = counts[v]\
    \ || [];\n    counts[v].push(i);\n  }\n  for (i = 0; i < lst.length; ++i) {\n\
    \    if (counts[lst[i]].length > 1) { return false; }\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp65svd3q4.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp65svd3q4.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length > 1) {\n    let hasDupes = false;\n    lst.forEach((x,\
    \ i) => {\n      for (let j = 1; j < i; j++) {\n        if (x === lst[j]) {\n\
    \          hasDupes = true;\n          break;\n        }\n      }\n    });\n \
    \   return !hasDupes;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8ojqxt07.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ojqxt07.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let unique: number[] = [];\n  let sorted = true;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    let index = unique.indexOf(lst[i]);\n    if\
    \ (index > -1) continue;\n    if (unique.indexOf(lst[i]) === -1) {\n      unique.push(lst[i]);\n\
    \      sorted = false;\n    }\n  }\n  return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvdwkj0vs.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvdwkj0vs.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst === null || lst.length === 0) {\n        return true\n\
    \    }\n    let lastValue = lst[0]\n    let hasDups = false\n    for (let i =\
    \ 1; i < lst.length; i++) {\n        if (lst[i] === lastValue) {\n           \
    \ hasDups = true\n        } else {\n            break\n        }\n    }\n    return\
    \ !hasDups\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4xv5a_6a.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4xv5a_6a.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const count = {}\n\n  for (const val of lst) {\n    count[val]\
    \ = (count[val] || 0) + 1\n  }\n\n  for (const key in count) {\n    if (count[key]\
    \ > 1) {\n      return false\n    }\n  }\n\n  return true\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpelmdpxv6.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpelmdpxv6.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1)\n        return true;\n\n    let last =\
    \ lst[lst.length - 1];\n    for (let i = 0; i < lst.length - 1; i++) {\n     \
    \   if (lst[i] === last) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp19evwo08.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp19evwo08.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  var i: number;\n  var j: number;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    var d = lst[i];\n    j = i;\n    while (j > 0 && d < lst[j - 1])\
    \ {\n      lst[j] = lst[j - 1];\n      j--;\n    }\n    lst[j] = d;\n  }\n  return\
    \ lst.sort() == lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr6c812w_.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr6c812w_.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true\n  for (let i = 0; i < lst.length\
    \ - 1; i++) {\n    const curr = lst[i]\n    const next = lst[i + 1]\n    if (curr\
    \ === next) continue\n    if (next < curr) return false\n  }\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0vq8cfn8.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0vq8cfn8.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015618
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length === 0) return true\n    if (lst.length === 1)\
    \ return lst[0] === lst\n    const last = lst[lst.length - 1]\n    for (let i\
    \ = 0; i < lst.length - 2; i++) {\n        if (lst[i] === last && lst[i + 1] ===\
    \ last) {\n            return false\n        }\n    }\n    return true\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9r9wzei3.ts(23,34): error TS2367: This condition
    will always return ''false'' since the types ''number'' and ''number[]'' have
    no overlap.

    '
  timestamp: 1660015617
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const uniq = new Set<number>();\n  lst.forEach((num) => {\n   \
    \ if (uniq.has(num)) {\n      return false;\n    }\n    uniq.add(num);\n  });\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3w0yeji0.ts(22,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015618
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.some(e => lst.indexOf(e) !== lst.lastIndexOf(e)))\n\t\t\
    return false;\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp64p0gpwt.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp64p0gpwt.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015618
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    // TODO: more efficient\n    const seen: Set<number> = new Set();\n\
    \    for (const num of lst) {\n        if (seen.has(num)) {\n            return\
    \ false;\n        }\n        else {\n            seen.add(num);\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpumnqvo47.ts(23,17): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpumnqvo47.ts(23,35): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015617
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const map = new Map();\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const el = lst[i];\n    if (!map.has(el)) {\n      map.set(el, true);\n\
    \    }\n    if (map.has(el)) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl8d_npl1.ts(22,19): error TS2552: Cannot find name
    ''Map''. Did you mean ''map''?

    '
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true;\n  let last = lst[lst.length\
    \ - 1];\n  for (let i = 0; i < lst.length - 1 && last === lst[i]; i++) {\n   \
    \ last = lst[i];\n  }\n  return !lst.length || last < lst[0];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqarrlm4r.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqarrlm4r.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015618
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) return true\n    const set = new Set(lst)\n\
    \    return !set.has(lst[0])\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0ftsqmmz.ts(23,21): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015617
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let count = 1;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (count > 1 && lst[i] === lst[i + 1]) {\n      return false;\n    }\n    if (count\
    \ === 1) {\n      if (lst[i] < lst[i + 1]) {\n        return true;\n      }\n\
    \    }\n    count++;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf897n_fx.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf897n_fx.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015618
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let last: number[] = [];\n  for (const num of lst) {\n    if (last\
    \ && last.indexOf(num) !== -1) {\n      return false;\n    }\n    last.push(num);\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8cx5e1ki.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8cx5e1ki.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015618
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) {\n    return true;\n  }\n  const seen: Set<number>\
    \ = new Set();\n  for (let i = 0; i < lst.length; i++) {\n    if (seen.has(lst[i]))\
    \ {\n      return false;\n    }\n    seen.add(lst[i]);\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbbtzvd8a.ts(25,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpbbtzvd8a.ts(25,33): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015618
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let sorted_array = [...new Set(lst)];\n    if (sorted_array.length\
    \ <= 1) {\n        return true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=sorting,javascript\
    \ |>\n<| c |>\nHi Gray, sorry but this code does not work for me. Can you please\
    \ check my code: https://jsfiddle.net/dhruv1993/rLqk9z2t/. Your answer was quite\
    \ helpful. Thanks.\n<|/ c |>\n<| a |>\nI know this question has already been answered\
    \ but this may be helpful to someone who wants to sort an array using different\
    \ criteria. I have written this javascript function which can sort an array and\
    \ give the sorted array along with their indexes.\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqte7d67a.ts(28,2): error TS1110: Type expected.

    ../../../../../tmp/tmpqte7d67a.ts(28,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqte7d67a.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqte7d67a.ts(29,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqte7d67a.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqte7d67a.ts(30,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,35): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,48): error TS1005: ''('' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,67): error TS1005: '')'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(31,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(32,3): error TS1110: Type expected.

    ../../../../../tmp/tmpqte7d67a.ts(32,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqte7d67a.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqte7d67a.ts(33,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpqte7d67a.ts(34,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(34,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(34,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqte7d67a.ts(34,22): error TS100'
  timestamp: 1660015619
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length > 1) {\n    const dupes = new Set<number>();\n \
    \   dupes.add(lst[0]);\n    for (let i = 1; i < lst.length; ++i) {\n      if (dupes.has(lst[i])\
    \ === false) {\n        dupes.add(lst[i]);\n      } else {\n        return false;\n\
    \      }\n    }\n    return true;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc_hnrznu.ts(23,23): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 2) return true\n    let last: number|null =\
    \ lst[0]\n    let first: number|null = lst[0]\n    for (let i = 1; i < lst.length;\
    \ i++) {\n        const cur = lst[i]\n        if (last > cur) break\n        last\
    \ = cur\n        if (last === first) {\n            first = cur\n        } else\
    \ {\n            return false\n        }\n    }\n    return true\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmploap_nz0.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmploap_nz0.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const unique = new Set(lst);\n  return lst.every(x => unique.has(x));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpufkainuw.ts(22,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015619
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let i: number;\n  for (i = 0; i < lst.length - 1; i++) {\n    if\
    \ (lst[i] === lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd3u73dr7.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd3u73dr7.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > lst[i\
    \ - 1]) return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmptb0byncu.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptb0byncu.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2) {\n\t\treturn true;\n\t}\n\n\tlet last_seen\
    \ = lst[0];\n\tlet current_seen = lst[0];\n\tlet found = false;\n\tfor (let i\
    \ = 1; i < lst.length; i++) {\n\t\tif (lst[i] === current_seen) {\n\t\t\tfound\
    \ = true;\n\t\t} else {\n\t\t\tlast_seen = current_seen;\n\t\t\tcurrent_seen =\
    \ lst[i];\n\t\t}\n\t}\n\treturn found;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8l4edeil.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8l4edeil.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2) return true\n\n\tlet first = lst[0]\n\tlet\
    \ uniques = lst.length - 1\n\tlet last: number[] = lst\n\tlast.pop() // removes\
    \ the duplicate at the end\n\n\tfor (let i = 0; i < last.length; i++) {\n\t\t\
    let current: number = last[i]\n\t\tif (current != first && !is_number(current))\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyko8xl3q.ts(31,28): error TS2304: Cannot find name
    ''is_number''.

    '
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2) {\n\t\treturn true;\n\t}\n\tlet i = 1;\n\t\
    while (i + 1 < lst.length) {\n\t\tif (lst[i] === lst[i - 1]) {\n\t\t\ti++;\n\t\
    \t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4liv3o5.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj4liv3o5.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true;\n  }\n  if (lst.length\
    \ == 2) {\n    return (lst[0] === lst[1]);\n  }\n\n  for (let i = 1; i < lst.length;\
    \ ++i) {\n    if (lst[i] < lst[i - 1]) {\n      return false;\n    }\n  }\n\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprmf2f8w5.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprmf2f8w5.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let counter: number[] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (counter.includes(lst[i])) {\n            return false;\n\
    \        } else {\n            counter.push(lst[i]);\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fpgwdbe.ts(24,21): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 1) {\n        return false;\n    }\n\n    const\
    \ set = new Set();\n    for (let i = 0; i < lst.length; i++) {\n        if (set.has(lst[i]))\
    \ {\n            return false;\n        }\n        set.add(lst[i]);\n    }\n \
    \   return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoz_u137v.ts(26,21): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = lst.sort(); i < lst.length; ++i) {\n    if (lst[i]\
    \ === lst[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1i6rvivc.ts(22,28): error TS2365: Operator ''<''
    cannot be applied to types ''number[]'' and ''number''.

    ../../../../../tmp/tmp1i6rvivc.ts(22,46): error TS2356: An arithmetic operand
    must be of type ''any'', ''number'', ''bigint'' or an enum type.

    ../../../../../tmp/tmp1i6rvivc.ts(23,13): error TS2538: Type ''number[]'' cannot
    be used as an index type.

    ../../../../../tmp/tmp1i6rvivc.ts(23,24): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let sorted = false;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        let current_element = lst[i];\n        for (let j = 0; j < i; j++)\
    \ {\n            if (lst[j] < current_element) {\n                sorted = true;\n\
    \            }\n        }\n        if (!sorted) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2jeqjjki.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2jeqjjki.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length > 0) {\n        let sorted_list = lst.reduce(\n\
    \            (acc: number[], num: number) => acc.concat([num]),\n            []\n\
    \        ).sort((a: number, b: number) => a - b);\n\n        if (sorted_list ==\
    \ lst)\n            return true;\n    }\n\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2x4bm1wy.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2x4bm1wy.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let uniqueVals = new Set<number>();\n  for (let val of lst) {\n\
    \    if (uniqueVals.has(val)) {\n      return false;\n    }\n    uniqueVals.add(val);\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprdhdmjr7.ts(22,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return lst.every(x => x === lst[0] || x === lst[lst.length - 1]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwsy_fd2g.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwsy_fd2g.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmps4f3ozqq.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps4f3ozqq.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015504
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) {\n    return true;\n  }\n\n  const sorted:\
    \ number[] = lst.sort();\n  return sorted.length === lst.length && JSON.stringify(lst)\
    \ === JSON.stringify(sorted);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr8eft11b.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr8eft11b.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return true;\n  }\n  const seen = new\
    \ Set(lst);\n  let i = 1;\n  for (const num of lst) {\n    if (seen.has(num))\
    \ {\n      return false;\n    }\n    seen.add(num);\n    if (i > lst.length -\
    \ 1) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0gzk87ue.ts(25,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015620
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length > 1) {\n        let dupes = Array.from(new Set(lst));\n\
    \        if (dupes.length !== lst.length) { return false; }\n    }\n\n    for\
    \ (let i = 1; i < lst.length; i++) {\n        if (lst[i] < lst[i - 1]) { return\
    \ false; }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo0dn_p7u.ts(23,27): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    ../../../../../tmp/tmpo0dn_p7u.ts(23,36): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    var sorted = true;\n    var prev: number = lst[0];\n    for (var\
    \ i = 1; i < lst.length; i++) {\n        if (lst[i] < prev) {\n            sorted\
    \ = false;\n            break;\n        }\n    }\n    return sorted;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzp3rrzhn.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzp3rrzhn.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const first = lst[0]\n  let duplicateCount = 0\n  for (const value\
    \ of lst) {\n    if (value === first) {\n      duplicateCount++\n    } else {\n\
    \      if (duplicateCount > 1) {\n        return false\n      }\n      duplicateCount\
    \ = 1\n    }\n  }\n  return true\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjhejbzgb.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjhejbzgb.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const sorted_array = lst.sort();\n    for (let i = 0; i < sorted_array.length\
    \ - 1; i++) {\n        if (sorted_array[i] === sorted_array[i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppfk8zmao.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppfk8zmao.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015620
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 2) {\n        return true;\n    }\n    const\
    \ len = lst.length;\n    const last = lst[len - 1];\n    for (let i = 0; i < len\
    \ - 1; ++i) {\n        if (lst[i] === last) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4pbklkmd.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4pbklkmd.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let last: number = lst[0]\n  for (let i = 1; i < lst.length; i++)\
    \ {\n    if (lst[i] < last) {\n      return false\n    }\n    last = lst[i]\n\
    \  }\n  return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb87pq34i.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb87pq34i.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let cnt: number = 0;\n  for (let i = 0; i < lst.length; ++i) if\
    \ (lst[i] === lst[i + 1]) ++cnt;\n  return cnt <= 1;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph2upysck.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph2upysck.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let has_duplicates = false;\n  let is_sorted = false;\n  lst.sort((a,\
    \ b) => a - b);\n  if (lst.length === 0) {\n    return is_sorted;\n  }\n  for\
    \ (let i = 1; i < lst.length; ++i) {\n    if (lst[i - 1] === lst[i]) {\n     \
    \ has_duplicates = true;\n      break;\n    }\n  }\n  if (!has_duplicates) {\n\
    \    is_sorted = true;\n  }\n  return is_sorted;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4ky1ibvr.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ky1ibvr.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const first = lst[0];\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] < first) return true;\n        if (lst[i] === first) {\n\
    \            for (let j = 0; j < i; j++) {\n                if (lst[j] === first)\
    \ return false;\n            }\n            break;\n        }\n    }\n    return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfcsxgy4o.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfcsxgy4o.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; ++i) {\n    for (let j = i + 1;\
    \ j < lst.length; ++j) {\n      if (lst[i] > lst[j]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpttob1gn8.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpttob1gn8.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) {\n    return true;\n  }\n  let is_sorted\
    \ = false;\n  for (let i = 0; i < lst.length - 2; i++) {\n    if (lst[i] !== lst[i\
    \ + 1]) {\n      is_sorted = true;\n    }\n  }\n  return is_sorted;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdvt9_x0j.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdvt9_x0j.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true\n  }\n  if (lst.length <\
    \ 4) {\n    return false\n  }\n  let first = lst[0]\n  let last = lst[lst.length\
    \ - 1]\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] === first)\
    \ {\n      continue\n    }\n    if (lst[i] === last) {\n      return true\n  \
    \  }\n    if (lst[i] < first) {\n      return false\n    }\n    if (lst[i] > last)\
    \ {\n      return false\n    }\n  }\n  return true\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9i92_tgy.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9i92_tgy.js:63:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let unique = [...new Set(lst)];\n  if (unique.length < lst.length)\
    \ return false;\n  for (let i = 0; i < unique.length; i++) if (unique[i] !== lst[i])\
    \ return false;\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnfiyaedu.ts(22,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const arr: number[] = lst.slice();\n    arr.sort();\n    return\
    \ arr == lst;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpohrdj353.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpohrdj353.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let sorted_numbers = lst.sort((a: number, b: number) => a - b);\n\
    \  return sorted_numbers === lst;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq3isud4_.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq3isud4_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015622
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const seen = new Set<number>()\n  for (const num of lst) {\n  \
    \  if (seen.has(num)) return false\n    seen.add(num)\n  }\n  return true\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt8xxn3cd.ts(22,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet len = lst.length;\n\tlet i = 0;\n\tlet j = 0;\n\twhile (i <\
    \ len && j < len) {\n\t\tif (lst[i] < lst[j]) {\n\t\t\treturn false;\n\t\t}\n\t\
    \tj++;\n\t\ti++;\n\t}\n\treturn j === len;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0mqecsa5.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0mqecsa5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true\n  }\n  const freq: Map<number,\
    \ number[]> = new Map()\n  for (let i = 0; i < lst.length; i++) {\n    const num\
    \ = lst[i]\n    if (freq.has(num)) {\n      freq.get(num)!.push(i)\n    } else\
    \ {\n      freq.set(num, [i])\n    }\n  }\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    const num = lst[i]\n    const curr = freq.get(num)\n    const len = curr.length\n\
    \    if (len > 1) {\n      return false\n    }\n    for (let j = 0; j < len; j++)\
    \ {\n      const ji = curr[j]\n      if (ji > i) {\n        return false\n   \
    \   }\n    }\n  }\n  return true\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwjr15wd_.ts(25,15): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpwjr15wd_.ts(25,43): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let counts: {[num: number]: number} = {}\n  for (const num of lst)\
    \ {\n    counts[num] = counts[num] ? counts[num] + 1 : 0\n  }\n  for (const num\
    \ of lst) {\n    if (counts[num] !== 1) {\n      return false\n    }\n  }\n  return\
    \ true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplg7oswxx.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplg7oswxx.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let seen = new Set<number>();\n  for (let num of lst) {\n    if\
    \ (seen.has(num)) return false;\n    seen.add(num);\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp11ublydg.ts(22,18): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015622
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true;\n\n  for (let i = 0; i < lst.length\
    \ - 1 && lst[i] === lst[i + 1]; ++i) ;\n\n  return i === lst.length - 1;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppln9mazl.ts(26,10): error TS2304: Cannot find name
    ''i''.

    '
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length !== 1) return false;\n  let sorted: boolean = lst[0]\
    \ === lst[lst.length - 1];\n  for (let i = 1; i < lst.length; ++i) {\n    if (lst[i]\
    \ > lst[i - 1]) return false;\n  }\n  return sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmputi023db.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmputi023db.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true;\n  if (lst.length === 2) return\
    \ lst[0] === lst[1];\n  for (let i = 1; i < lst.length; ++i) {\n    if (lst[i\
    \ - 1] > lst[i]) return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpiarxhzhj.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiarxhzhj.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  // TODO(czx8): Revisit this when we are more confident.\n  // This\
    \ currently only returns true for sorted arrays, but it should\n  // return false\
    \ for unsorted arrays as well.\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ const curr = lst[i];\n    const found = true;\n    for (let j = 0; j < i; j++)\
    \ {\n      if (curr === lst[j]) {\n        found = false;\n        break;\n  \
    \    }\n    }\n    if (found) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3v_5iq1j.ts(30,9): error TS2588: Cannot assign to
    ''found'' because it is a constant.

    '
  timestamp: 1660015622
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1;\
    \ j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuaw2j86x.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuaw2j86x.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) { return true; }\n\n  // O(N) to sort\n  lst.sort((a:\
    \ number, b: number) => a - b);\n\n  // O(N) to check duplicates\n  let is_dup\
    \ = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i\
    \ + 1]) { return false; }\n    if (lst[i] === lst[i - 1]) { is_dup = true; }\n\
    \  }\n\n  return !is_dup;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgfgzwjt_.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgfgzwjt_.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length !== lst[lst.length - 1]) {\n    return false;\n\
    \  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] === lst[i - 1])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjka_ebm5.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjka_ebm5.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015623
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 2) {\n        return true;\n    }\n    for (let\
    \ i = 0; i < lst.length - 1; i++) {\n        if (lst[i] === lst[i + 1]) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0uykvugx.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0uykvugx.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2) return true\n\tlet last = lst[0]\n\tfor (let\
    \ i = 1; i < lst.length; i++) {\n\t\tif (lst[i] > last) return false\n\t}\n\t\
    return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo_77pq9l.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo_77pq9l.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015624
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j <\
    \ i; j++) {\n      if (lst[i] === lst[j] && i != j) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnbzuuvu9.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnbzuuvu9.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2)\n\t\treturn true;\n\tvar sorted: boolean =\
    \ false;\n\tfor (var i = 0; i < lst.length; i++) {\n\t\tif (lst[i] === lst[i +\
    \ 1]) {\n\t\t\tsorted = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm8h9401l.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm8h9401l.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) {\n    return true;\n  }\n  const first =\
    \ lst[0];\n  const rest = lst.slice(1);\n  if (rest.indexOf(first) !== -1) {\n\
    \    return false;\n  }\n  for (let i = 0; i < rest.length; i++) {\n    if (rest[i]\
    \ !== first && rest[i] < first) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp85cz9he1.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85cz9he1.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let sorted: boolean = true;\n    let seen: Set<number> = new\
    \ Set();\n    for (let i = 0; i < lst.length; i++) {\n        const cur = lst[i];\n\
    \        if (seen.has(cur)) {\n            sorted = false;\n            break;\n\
    \        }\n        seen.add(cur);\n    }\n    return sorted;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9sxjx9cy.ts(23,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp9sxjx9cy.ts(23,33): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let uniques: number[] = []\n  for (let i = 0, n = lst.length; i\
    \ < n; i++) {\n    if (uniques.indexOf(lst[i]) === -1) {\n      uniques.push(lst[i])\n\
    \    }\n  }\n  return uniques.length <= 1\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9hsloamv.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9hsloamv.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return false;\n  }\n  let prev: number;\n\
    \  for (let i = 1; i < lst.length; i++) {\n    if (lst[i - 1] > lst[i]) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr_hzwrgd.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr_hzwrgd.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true\n  }\n  let hash_set = new\
    \ Set<number>()\n  for (let i = 0; i < lst.length; i++) {\n    if (hash_set[lst[i]])\
    \ {\n      return false\n    }\n    hash_set[lst[i]] = true\n  }\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdusn_o5g.ts(25,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length < 2) {\n\t\treturn true;\n\t}\n\n\tconst len = lst.length;\n\
    \tlet sorted = false;\n\tlet start = 0;\n\tlet end = len - 1;\n\n\twhile (end\
    \ - start + 1 > 0) {\n\t\tconst mid = start + (end - start) / 2;\n\n\t\tif (lst[mid]\
    \ < lst[start]) {\n\t\t\tsorted = true;\n\t\t\tend = mid - 1;\n\t\t} else {\n\t\
    \t\tstart = mid + 1;\n\t\t}\n\t}\n\n\treturn sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp63p452l0.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp63p452l0.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const count = new Map<number, number>();\n    for (const num\
    \ of lst) {\n        const count = count.get(num);\n        if (count !== undefined)\
    \ {\n            count.set(-count, count + 1);\n        } else {\n           \
    \ count.set(-count, 1);\n        }\n    }\n\n    let i = 0;\n    for (const [num,\
    \ _count] of count.entries()) {\n        if (i === lst.length) {\n           \
    \ return false;\n        }\n        if (lst[i] !== num) {\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    return true;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw1hikujk.ts(22,23): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpw1hikujk.ts(24,23): error TS2448: Block-scoped variable
    ''count'' used before its declaration.

    '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length - 1; i += 1) {\n    if (lst[i] ===\
    \ lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppvbcxxn2.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppvbcxxn2.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) return true;\n  for (let i = 0; i < lst.length;\
    \ ++i) {\n    for (let j = i + 1; j < lst.length; ++j) {\n      if (lst[i] < lst[j])\
    \ {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0fwshy5u.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0fwshy5u.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let found = false;\n  let low = 1;\n  let high = lst.length - 1;\n\
    \n  while (!found && low <= high) {\n    if (lst[low] >= lst[high]) {\n      found\
    \ = true;\n    } else {\n      if (lst[low] >= lst[low - 1]) {\n        low++;\n\
    \      } else {\n        high--;\n      }\n    }\n  }\n  return found;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1df9npcm.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1df9npcm.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let dupes: number[] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        const el = lst[i];\n        if (dupes.indexOf(el) !== -1) {\n\
    \            return false;\n        }\n        dupes.push(el);\n    }\n    return\
    \ true;\n}\n</code>\nIf you're wondering about what this is, it's because Javascript\
    \ does not have true sets and it does have arrays. And arrays support indexOf(),\
    \ which returns -1 if an element is found.\n<|/ a |>\n<| c |>\nThat's a nice solution.\
    \ Although it might not be the fastest. [Here](http://jsben.ch/bEcWq) is another\
    \ solution that doesn't involve the sorting algorithm.\n<|/ c |>\n<| c |>\nThank\
    \ you for this!  I see that you have used the function \"count\" in order to compare\
    \ the elements.  Could you explain what that function does?\n<|/ c |>\n<| c |>\n\
    - It's a method that counts the number of times the element is in the array. [You\
    \ can read more about it here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/count)\n\
    <|/ c |>\n<| c |>\nThis is a great answer, but a small nitpick: `indexOf` is going\
    \ to count all instances, not just the duplicates. Also, I think this could run\
    \ into performance problems because it takes O(N^2) time and is O(N) space. Just\
    \ a nitpick.\n<|/ c |>\n<| c |>\n- I agree that it's O(N^2) and O(N). But I believe\
    \ it's O(1) space. Do you think you could provide any proof? I'm not that familiar\
    \ with how the sort algorithm works.\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp04t31cxq.ts(32,2): error TS1110: Type expected.

    ../../../../../tmp/tmp04t31cxq.ts(32,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp04t31cxq.ts(33,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,74): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,89): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,93): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,101): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,118): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,125): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,133): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,150): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,161): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,164): error TS1005: ''('' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,167): error TS1005: '')'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,175): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(33,178): error TS1005: '';'' expected.

    ../../../../../tmp/tmp04t31cxq.ts(34,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp04t31cxq.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp04t31cxq.ts(34,4): '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let sorted = true;\n  for (let i = 0, end = lst.length; i < end;\
    \ i++) {\n    const cur = lst[i];\n    for (let j = i + 1; j < end; j++) {\n \
    \     if (cur > lst[j]) {\n        sorted = false;\n        break;\n      }\n\
    \    }\n  }\n  return sorted;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpz0dnfx__.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz0dnfx__.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) { return true; }\n  let seen: number[] = new\
    \ Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    if (seen[i]\
    \ === undefined) { seen[i] = i; }\n    for (let j = i + 1; j < lst.length; j++)\
    \ {\n      if (seen[j] === lst[i]) {\n        return false;\n      }\n    }\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn2_eglqr.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2_eglqr.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === lst[i\
    \ - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwt1t8rbs.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwt1t8rbs.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let last: number[] = null;\n  for (const num of lst) {\n    if\
    \ (last != null && (last + 1) === num) {\n      return false;\n    }\n    last\
    \ = num;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5wdeqjch.ts(24,26): error TS2365: Operator ''+''
    cannot be applied to types ''number[]'' and ''1''.

    ../../../../../tmp/tmp5wdeqjch.ts(27,5): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet last: number = lst[0];\n\tfor (let i = 1; i < lst.length; ++i)\
    \ {\n\t\tif (lst[i] <= last) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn4qc6tex.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn4qc6tex.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const len = lst.length;\n  if (len === 1) return true;\n  let h1\
    \ = 0, h2 = 1, mid, tmp;\n  while (len) {\n    mid = Math.floor((h1 + h2) / 2);\n\
    \    tmp = lst[mid];\n    if (tmp < lst[mid-1]) h1 = mid;\n    else if (tmp >\
    \ lst[mid-1]) h2 = mid;\n    else return false;\n    len = len > 1 ? (len - 1)\
    \ : 0;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpohteqiim.ts(31,5): error TS2588: Cannot assign to
    ''len'' because it is a constant.

    '
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) return true;\n  if (lst.length === 1) return\
    \ false;\n  return lst.every(function(val, index) { //return false if array has\
    \ duplicate number\n    return index === lst.indexOf(val); //returns true if the\
    \ number at that index isn't in the array already\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6t07pawr.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6t07pawr.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015625
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 0) return true\n  const lastIndex = lst.length\
    \ - 1 //get the index of the last occurence\n  for (let i = 0; i < (lastIndex);\
    \ i++) {\n    if (lst[i] === lst[i + 1]) {\n      return false\n    }\n  }\n \
    \ return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsp281ugh.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsp281ugh.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015626
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst === null || lst.length === 0) {\n        return true;\n\
    \    }\n    const first = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n\
    \        if (lst[i] === first) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnz34_dg6.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnz34_dg6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet last: number[] = [];\n\tlet count: number;\n\tfor(let i = 0;\
    \ i < lst.length; i++) {\n\t\tcount = last.filter(v => v === lst[i]).length;\n\
    \t\tif( count > 1 ) {\n\t\t\treturn false;\n\t\t}\n\t\tlast.push(lst[i]);\n\t\
    }\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwpph9q6k.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwpph9q6k.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return true;\n  }\n  var dupes: number[]\
    \ = [];\n  var dup = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (dupes.indexOf(lst[i])\
    \ !== -1) {\n      dup++;\n    } else {\n      dupes.push(lst[i]);\n    }\n  }\n\
    \  if (dup > 1) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpidsmhcnv.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpidsmhcnv.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let n = lst.length\n  let isSorted = true\n  \n  for (let i = 0;\
    \ i < n; i++) {\n    let curr = lst[i]\n    let j = n - 1\n    \n    while (j\
    \ >= 0 && lst[j] > curr) {\n      lst[j + 1] = lst[j]\n      j = j - 1\n    }\n\
    \    lst[j + 1] = curr\n    isSorted = isSorted && j + 1 < n\n  }\n  \n  return\
    \ isSorted\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2ynzpkum.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2ynzpkum.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] !== lst[i\
    \ - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp9tvtz25u.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9tvtz25u.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true;\n\n  let sortCount = 0;\n  for\
    \ (let i = 1; i < lst.length; ++i) {\n    if (lst[i - 1] === lst[i]) ++sortCount;\n\
    \    else if (sortCount === 1) return false;\n  }\n  return sortCount === lst.length;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpma6qsrpq.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpma6qsrpq.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length - 2; ++i) {\n    if (lst[i] ===\
    \ lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp02t45yqg.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp02t45yqg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet counter = lst.map((val, i) => val === lst[i - 1] ? i : -1 *\
    \ i).filter(val => val !== -1).length\n\treturn counter === lst.length ? true\
    \ : counter > 1 ? false : true\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzjp6boyj.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzjp6boyj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    return lst.sort((a,b) => a - b) === lst\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_5drwbqy.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_5drwbqy.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst === null || lst.length === 0) return true;\n\tlet sorted:\
    \ boolean = false;\n\tconst len = lst.length;\n\tconst last = lst[len - 1];\n\t\
    for (let i = 0; i < len; i++) {\n\t\tconst a = lst[i];\n\t\tconst b = lst[len\
    \ - i - 1];\n\t\tif (a === last && b === last) {\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (a === last) continue;\n\t\tsorted = a < b;\n\t\tif (!sorted) break;\n\t}\n\
    \treturn sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpkhth4kkt.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpkhth4kkt.js:58:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let hash: number[] = new Array(lst.length);\n  let prev: number[]\
    \ = new Array(lst.length);\n  hash[0] = 1;\n  prev[0] = lst[0];\n  for (let i\
    \ = 1; i < lst.length; ++i) {\n    hash[i] = hash[i - 1] + 1;\n    prev[i] = prev[i\
    \ - 1];\n    if (lst[i] == prev[i]) return false;\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpiqi7_lwy.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiqi7_lwy.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphnqlkzu4.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphnqlkzu4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length <= 1) return true;\n\n\tif (lst.length < 2) return\
    \ false;\n\n\tlet first: number[] = [];\n\n\tfor (let i: number = 1; lst.length\
    \ > i; i++) {\n\t\tlet firstIndex = -1;\n\t\tlet current: number = lst[i];\n\t\
    \tlet found: boolean;\n\n\t\tfor (let j: number = first.length; j > 0; j--) {\n\
    \t\t\tif (first[j] === current) {\n\t\t\t\tfound = true;\n\t\t\t\tfirstIndex =\
    \ j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!found) {\n\t\t\tfirst.push(current);\n\
    \t\t}\n\t}\n\n\tfor (let i: number = first.length - 1; first && i > 0; i--) {\n\
    \t\tif (lst[i - 1] < first[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf13kzwxh.js:53:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf13kzwxh.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true;\n  }\n  const last = lst[0];\n\
    \  let i = 1;\n  for (; i < lst.length; i++) {\n    if (lst[i] !== last) {\n \
    \     return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd408_msr.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd408_msr.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 2) return true;\n    var last: number[] = lst.slice();\n\
    \    for (var i = 0; i < last.length; i++) {\n        if (last[i] !== lst[last.length\
    \ - i - 1]) return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiybmsi_8.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiybmsi_8.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015627
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let seen = new Set<number>();\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (seen.has(lst[i])) {\n      return false;\n    }\n    seen.add(lst[i]);\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc5c4d_hu.ts(22,18): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015627
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let first = 0;\n  let last = lst.length - 1;\n  while (first <\
    \ last) {\n    if (lst[first] + 1 == lst[last]) {\n      first++;\n      last--;\n\
    \    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_1l3gnww.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_1l3gnww.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tif (lst.length <= 1) {\n\t\treturn true;\n\t}\n\n\tlet last: number[]\
    \ = [];\n\tlet dup: number[] = [];\n\n\tfor (let i = 0; i < lst.length; i++) {\n\
    \t\tconst element = lst[i];\n\t\tconst index = last.indexOf(element);\n\t\tif\
    \ (index >= 0) {\n\t\t\tdup.push(element);\n\t\t} else {\n\t\t\tlast.push(element);\n\
    \t\t}\n\t}\n\n\tif (dup.length > 0) {\n\t\treturn false;\n\t}\n\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyssffvlu.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyssffvlu.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length; i++) {\n        for (let j =\
    \ i + 1; j < lst.length; j++) {\n            if (lst[i] < lst[j]) {\n        \
    \        return false\n            }\n        }\n    }\n    return true\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4_bfiy_m.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4_bfiy_m.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  lst.sort();\n  return lst.every(function(value, index, arr) {\n\
    \    return index === 0 || value === arr[index-1];\n  });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmwzdjve5.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmwzdjve5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const hash = new Map();\n  for (const num of lst) {\n    const\
    \ hash = hash.get(num);\n    if (hash === undefined) {\n      hash.set(num, 1);\n\
    \    } else {\n      hash.set(num, hash + 1);\n    }\n  }\n\n  for (const [key,\
    \ value] of hash.entries()) {\n    if (value > 1) {\n      return false;\n   \
    \ }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq15prijq.ts(22,20): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpq15prijq.ts(24,18): error TS2448: Block-scoped variable
    ''hash'' used before its declaration.

    '
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet sorted: boolean = false;\n\tlet count: number = 0;\n\twhile\
    \ (count < lst.length && sorted === false) {\n\t\tif (lst[count] > lst[count +\
    \ 1]) {\n\t\t\tsorted = true;\n\t\t} else {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\t\
    return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxnocc2e7.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxnocc2e7.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return true;\n  }\n  let count = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] !== lst[i + 1]) {\n\
    \      count += 1;\n    }\n  }\n  return count === lst.length;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpilh0doa6.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpilh0doa6.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 1;  i < lst.length;  ++i) {\n        if (lst[i-1]\
    \ === lst[i] && lst[i] !== lst[0]) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4mvlzr8g.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4mvlzr8g.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015628
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0, len = lst.length; i < len; i++) {\n        let\
    \ cur = lst[i];\n        let j;\n        for (j = i - 1; j >= 0 && (lst[j] > cur);\
    \ j--) {\n            lst[j + 1] = lst[j];\n        }\n        lst[j + 1] = cur;\n\
    \    }\n\n    let issorted = true;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] !== lst[lst.length - i]) {\n            issorted = false;\n\
    \            break;\n        }\n    }\n    return issorted;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwhupk2hk.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwhupk2hk.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 2) {\n        return true;\n    }\n    const\
    \ last = lst[lst.length - 1];\n    for (let i = 0; i < lst.length - 1; i++) {\n\
    \        if (lst[i] > last && lst[i + 1] === last) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpybec1xsm.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpybec1xsm.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length - 1; ++i) {\n    if (lst[i] ===\
    \ lst[i + 1]) return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjfelwlzd.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjfelwlzd.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) {\n        return true;\n    }\n    let\
    \ sortedCount = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ === lst[i + 1]) {\n            sortedCount++;\n        }\n    }\n    return\
    \ sortedCount === lst.length;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphqakwxwj.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphqakwxwj.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let i = 0;\n    for (let num of lst) {\n      if (num === lst[i])\
    \ i++;\n      else if (num < lst[i]) return false;\n    }\n    return true;\n\
    \  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd9l_9thr.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd9l_9thr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true;\n  }\n  for (let i = 0;\
    \ i < lst.length - 2; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph5hr3ydq.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph5hr3ydq.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  return\n  // If length more than 1, then it is sorted\n  lst.sort().length\
    \ === lst.length &&\n  // If they are equal\n  lst.sort().every((c, i) => c ===\
    \ lst[i]) &&\n  // Return true only if sorted\n  !lst.sort().some((c, i) => c\
    \ !== lst[i])\n}\n</code>\n<|/ a tags=sorting,algorithm,arrays,javascript |>\n\
    <| a dscore=2 |>\nI think it would be a good idea to make a quick sort algorithm\
    \ and then compare it's performance against other sorting algorithms.\n<|/ a tags=sorting,algorithm,arrays,javascript\
    \ |>\n<| a tags=sorting,algorithm,arrays,javascript dscore=2 |>\nI have done this\
    \ for practice: I have created an array that has every single number. I made a\
    \ for loop that goes through every single number in the array and places it into\
    \ the other array. Then, I made a for loop that goes through every single number\
    \ in the array and checks if it matches the next number in the other array. If\
    \ it does, it adds 1 to the count variable. If it doesn't, it adds 0 to it. Here\
    \ are the codes:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbp1mfsre.ts(30,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbp1mfsre.ts(30,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbp1mfsre.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbp1mfsre.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbp1mfsre.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbp1mfsre.ts(32,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(32,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,43): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,49): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,83): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbp1mfsre.ts(33,131): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpbp1mfsre.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbp1mfsre.ts(34,4): error TS1161: Unterminated '
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet is_sorted = true;\n\tlet previous: number;\n\tlet first: number\
    \ = 0;\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] !== previous)\
    \ {\n\t\t\tis_sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\tif (i === lst.length -\
    \ 1) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_sorted;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp52cohdgl.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp52cohdgl.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length < 2) {\n    return true;\n  }\n  const seen = new\
    \ Set();\n  for (let i = 0; i < lst.length; i++) {\n    if (seen.has(lst[i]))\
    \ {\n      return false;\n    }\n    seen.add(lst[i]);\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ci2oiqp.ts(25,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] ===\
    \ lst[i + 1]) return false;\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpjh6b35ch.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjh6b35ch.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i]\
    \ > lst[i + 1]) return false\n    }\n    return true\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8gd4szx0.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8gd4szx0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    const sorted = [...new Set(lst)];\n    if (sorted.length < lst.length)\
    \ return false;\n    for (let i = 0; i < sorted.length; i++) {\n        const\
    \ elem = sorted[i];\n        const index = lst.indexOf(elem);\n        if (index\
    \ > -1 && index <= i) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnnr3eab0.ts(22,28): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) {\n    return lst.length === 1;\n  }\n  const\
    \ sorted: number[] = [];\n  for (let i = 0; i < lst.length; ++i) {\n    const\
    \ x: number = lst[i];\n    sorted.push(x);\n  }\n  let last: number = sorted[0];\n\
    \  for (let i = 1; i < sorted.length; ++i) {\n    if (sorted[i] === last) {\n\
    \      return false;\n    }\n    last = sorted[i];\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzadpx1b2.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzadpx1b2.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) return true;\n    for (let i = 0; i < lst.length\
    \ - 1;) {\n        if (lst[i] === lst[i + 1]) return false;\n        i += 1;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptp_7tlrc.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptp_7tlrc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tfor (let j = i + 1;\
    \ j < lst.length; j++) {\n\t\t\tif (lst[i] < lst[j]) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmv7oxpa3.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmv7oxpa3.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length === 1) {\n        return lst.sort().toString()\
    \ === lst.toString()\n    }\n    return lst.sort().toString() === lst.sort().toString()\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3jae4m7q.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3jae4m7q.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length < 1) {\n        return false;\n    }\n    let\
    \ dupCount = 0;\n    for (let i = 1; i < lst.length; ++i) {\n        if (lst[i]\
    \ === lst[i - 1]) {\n            dupCount += 1;\n        }\n    }\n    return\
    \ dupCount <= 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnxujupjt.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxujupjt.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length <= 1) return true;\n  for (let i = 0; i < lst.length\
    \ - 2; i++) {\n    if (lst[i] === lst[i + 1]) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyufwg8uw.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyufwg8uw.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015630
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet sorted_list = []\n\tfor (let num of lst) {\n\t\tif (sorted_list.includes(num))\
    \ {\n\t\t\treturn false\n\t\t}\n\t\tsorted_list.push(num)\n\t}\n\treturn true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb6hmsydh.ts(24,19): error TS2339: Property ''includes''
    does not exist on type ''any[]''.

    '
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let sorted_list: boolean = true;\n  for (const el of lst) {\n \
    \   sorted_list = sorted_list && (el === lst[el]);\n  }\n  return sorted_list;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7sle5ymg.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7sle5ymg.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015631
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length; i++) {\n        if (i == lst.length\
    \ - 1) {\n            return true;\n        }\n        if (lst[i] > lst[i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnb43y_rr.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnb43y_rr.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015631
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  var _this = this;\n  var seen: Set<number> = new Set();\n\n  function\
    \ is_sorted(lst: number[]): boolean {\n    var sort: number[] = [];\n    var first:\
    \ number = Number.MAX_VALUE;\n    var last: number = 0;\n    var i: number;\n\n\
    \    for (i = 0; i < lst.length; i++) {\n      if (!seen.has(lst[i])) {\n    \
    \    seen.add(lst[i]);\n        if (first > lst[i]) {\n          first = lst[i];\n\
    \        }\n      }\n      if (lst[i] > last) {\n        sort.push(first);\n \
    \       last = lst[i];\n      }\n    }\n    sort.push(last);\n    if (sort.length\
    \ > 1) {\n      return false;\n    }\n    return true;\n  }\n\n  return is_sorted(lst);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb3zhzclf.ts(23,13): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpb3zhzclf.ts(23,31): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660015630
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.length === 1) return true;\n  for (let i = 0; i < lst.length\
    \ - 1; i++) {\n    if (lst[i] !== lst[i + 1]) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpeery3b99.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeery3b99.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015631
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  if (lst.sort) {\n    return lst.sort() === lst;\n  }\n  for (let\
    \ i = 0; i < lst.length; ++i) {\n    if (lst[i] !== lst[i - 1]) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgk463dgf.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgk463dgf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    if (lst.length <= 1) return true;\n    const prev = Math.max(...lst)\
    \ - 1;\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < prev)\
    \ return true;\n        if (lst[i] > prev) return false;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3b2ua5fr.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3b2ua5fr.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] != lst[count]) count++;\n    if (count > 1) return false;\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0rubginm.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0rubginm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  const len = lst.length;\n  if (len < 2) return true;\n  const pivot\
    \ = lst[0];\n  let ok = true;\n  for (let i = 1; i < len; ++i) {\n    if (lst[i]\
    \ < pivot) {\n      ok = false;\n      break;\n    }\n  }\n  return ok;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp48w_7xeo.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp48w_7xeo.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i\
    \ + 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7gpfkhx5.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7gpfkhx5.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  var unique_nums = [];\n  for (var i=0; i<lst.length; ++i) {\n \
    \   var num = lst[i];\n    if (unique_nums.indexOf(num) >= 0)\n      return false;\n\
    \    else {\n      unique_nums.push(num);\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpw5x401yz.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw5x401yz.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j <\
    \ i; j++) {\n      if (lst[i] === lst[j] && lst[i] === lst[j + 1]) {\n       \
    \ return false;\n      }\n    }\n  }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0jp646y2.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0jp646y2.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 2
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let hash = new Set<number>();\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (hash.has(lst[i])) {\n      return false;\n    }\n    hash.add(lst[i]);\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuopb7olk.ts(22,18): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  // If list is empty or null, just return true.\n  if (lst === null\
    \ || lst === undefined) {\n    return true;\n  }\n\n  // If list is non-empty,\
    \ loop through every number in list,\n  // and see if there is more than one equal\
    \ number.\n  // If there are multiple equal numbers, return false.\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    // If this number is equal to the previous\
    \ number, return false.\n    if (lst[i] === lst[i - 1]) {\n      return false;\n\
    \    }\n  }\n\n  // If no equal numbers are found, return true.\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo1_sq4ip.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo1_sq4ip.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    for (let i = 0; i < lst.length - 1 && lst[i] === lst[i + 1];\
    \ i++) {\n    }\n    return lst.length <= 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2mkzyxit.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2mkzyxit.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n  let lst_copy: number[] = lst.slice();\n  let sorted = false;\n\n\
    \  lst_copy.sort((a, b) => a - b);\n\n  if (lst_copy.length <= 1) {\n    return\
    \ sorted;\n  }\n\n  sorted = true;\n\n  for (let i = 0; i < lst_copy.length; i++)\
    \ {\n    for (let j = 0; j < lst_copy.length; j++) {\n      if (lst_copy[j] ===\
    \ lst_copy[i]) {\n        sorted = false;\n        break;\n      }\n    }\n  }\n\
    \n  return sorted;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplxdq1z9f.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplxdq1z9f.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n    let sorted: boolean = true;\n    \n    for (let i = 0; i < lst.length\
    \ - 1; i++) {\n        if (lst[i] > lst[i+1]) {\n            sorted = false;\n\
    \            break;\n        }\n    }\n    \n    return sorted;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpngjdan3k.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpngjdan3k.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet len = lst.length;\n\tif (len < 2) {\n\t\treturn true;\n\t}\n\
    \tconst first = lst[0];\n\tconst last = lst[len - 1];\n\tfor (let i = 1; i < len;\
    \ ++i) {\n\t\tif (lst[i] === last + 1) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg96_yzt6.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg96_yzt6.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
- exit_code: 1
  program: "//Given an array of numbers, return whether or not they are sorted\n//\
    \ in ascending order. If array has more than 1 duplicate of the same\n// number,\
    \ return false. Assume no negative numbers and only integers.\n// Examples\n//\
    \ >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n//\
    \ >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
    // true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1,\
    \ 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n\
    // >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]):\
    \ boolean {\n\tlet counter: number[] = [];\n\tfor(let i of lst) {\n\t\tcounter.push(i\
    \ == lst[counter.length-1] ? 0 : 1);\n\t}\n\treturn counter.length == lst.length\
    \ ? true : false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp33r0quop.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp33r0quop.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015632
