name: HumanEval_146_specialFilter
language: ts
prompt: "//Write a function that takes an array of numbers as input and returns \n\
  // the number of elements in the array that are greater than 10 and both \n// first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>>\
  \ specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45,\
  \ 21, 109])\n// 2\nfunction specialFilter(nums: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2,\
  \ 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33,\
  \ -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121,\
  \ 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n\
  \  assert.deepEqual(candidate([]),0);\n}\n\ntest();"
completions: ["    return nums.filter(n => n > 10 && n % 2 === 1).length;\n}\n", " \
    \   let numStr: string = \"\";\n    \n    for (let i = 0; i < nums.length; i++)\
    \ {\n        if (nums[i] > 10) {\n            numStr += nums[i];\n           \
    \ \n            if (nums[i] > 10 && nums[i] % 2 === 0) {\n                numStr\
    \ += nums[i];\n            }\n        }\n    }\n    \n    return numStr.length;\n\
    }\n", "  let count = 0;\n  for (let i of nums) {\n    if (i > 10 && i % 2 ===\
    \ 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "\tnums.sort();\n\t\
    let even = 0;\n\tlet odd = 0;\n\tnums.forEach((num) => {\n\t\tif (num % 2 ===\
    \ 1) {\n\t\t\teven += 1;\n\t\t}\n\t\telse {\n\t\t\todd += 1;\n\t\t}\n\t});\n\t\
    return even + odd;\n}\n", "    let count = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        if (nums[i] > 10 && nums[i] & 1 === 1 && nums[i] & 2 === 1)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}", "  let count\
    \ = 0;\n  \n  nums.forEach(function(num: number) {\n    if (num > 10) {\n    \
    \  if (num > 10 && num % 2 === 1) {\n        count++;\n      }\n      if (num\
    \ > 10 && num % 2 === 0) {\n        count++;\n      }\n    }\n  });\n  \n  return\
    \ count;\n}\n", "  let filterdNums: number[] = [];\n  for(let num of nums) {\n\
    \    if(num > 10 && num % 2 === 1 && num % 10 !== 1) {\n      filterdNums.push(num);\n\
    \    }\n  }\n  return filterdNums.length;\n}\n", "\tlet count = 0;\n\tfor (let\
    \ num of nums) {\n\t\tif (num > 10 && num % 2 === 0 && num % 4 === 0)\n\t\t\t\
    count++;\n\t}\n\treturn count;\n}\n", "  return nums.filter(function (n) { return\
    \ n > 10 && (n % 2 === 1 || n % 2 === 0); }).length;\n}\n", "  let i = 0;\n  let\
    \ count = 0;\n\n  while (i < nums.length) {\n    if (nums[i] < 10 && nums[i +\
    \ 1] % 2 === 1 && nums[i + 1] % 3 === 0) {\n      count += 1;\n      i += 2;\n\
    \    } else {\n      i += 1;\n    }\n  }\n\n  return count;\n}\n", "  let count\
    \ = 0;\n  for (let num of nums) {\n    if (num > 10 && num % 2 === 1 && num %\
    \ 10 === 9 && num % 100 !== 11) {\n      count++;\n    }\n  }\n  return count;\n\
    }\n", "\tlet count = 0;\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tcount\
    \ += nums[i] >= 10 && nums[i] % 2 === 1;\n\t}\n\treturn count;\n}\n", "    //\
    \ return 0 if no numbers found\n    if (!nums) {\n        return 0\n    }\n  \
    \  // find first odd number\n    for (let i=0; i<nums.length; i++) {\n       \
    \ if (nums[i] % 2 === 1) {\n            return i\n        }\n    }\n    // if\
    \ first number is odd, find last odd number and return\n    for (let i=nums.length-1;\
    \ i>0; i--) {\n        if (nums[i] % 2 === 1) {\n            return i\n      \
    \  }\n    }\n    // if first and last numbers are odd, return true\n    return\
    \ true\n}\n", "    if (nums.length === 0) {\n        return 0;\n    }\n    let\
    \ numCount = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i]\
    \ >= 10 && nums[i] % 2 === 1) {\n            let digit1 = nums[i] % 10;\n    \
    \        let digit2 = nums[i + 1] % 10;\n            if (digit1 === digit2) {\n\
    \                numCount++;\n            }\n        }\n    }\n    return numCount;\n\
    }", "  let i = 0;\n  while (i<nums.length-1) {\n    if (nums[i] > 10 && nums[i]\
    \ % 2 === 1 && nums[i] % 10 === 1 && nums[i+1]%2 === 1) {\n      return i;\n \
    \   }\n    i++;\n  }\n  return nums.length;\n}\n", "  let counter: number = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] %\
    \ 2 === 1 || nums[i] % 2 === 0)) {\n      counter++;\n    }\n  }\n  return counter;\n\
    }\n", "  let odd = 0, even = 0;\n  \n  for (let n of nums) {\n    if (n < 10)\
    \ {\n      even++\n    } else {\n      odd++\n    }\n  }\n  \n  return odd+even;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThe above function returns 1 even if the array\
    \ contains negative numbers or only positive numbers. Please see the test cases\
    \ below to validate your solution. `// Write a function that takes an array of\
    \ numbers as input and returns ", "  return nums.reduce((count, val) => val >\
    \ 10 && val % 2 === 1 ? count + 1 : count);\n}\n", "  let oddCount = 0;\n  let\
    \ evenCount = 0;\n  let firstOdd = 0;\n  let lastOdd = 0;\n  let firstEven = 0;\n\
    \  let lastEven = 0;\n\n  for (let num of nums) {\n    if (num > 10) {\n     \
    \ if (num % 2 === 0) {\n        evenCount++;\n      } else {\n        oddCount++;\n\
    \      }\n    } else {\n      if (num % 2 !== 0) {\n        firstOdd++;\n    \
    \  } else {\n        lastOdd++;\n      }\n    }\n\n    if (num % 2 !== 0) {\n\
    \      firstEven++;\n    } else {\n      lastEven++;\n    }\n  }\n\n  return oddCount\
    \ + evenCount + firstOdd + lastOdd + firstEven + lastEven;\n}\n\nconsole.log(specialFilter([15,\
    \ -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));</code>\n\
    <|/ a tags=javascript,arrays,algorithm,typescript,performance |>\n<| a dscore=0\
    \ |>\nHere's one way to do it:\n\n<code>\nvar num = [15, -73, 14, -15],\n    odd\
    \ = 0,\n    even = 0,\n    oddFirst = 0,\n    oddLast = 0,\n    evenFirst = 0,\n\
    \    evenLast = 0;\n\nnum.forEach((n, i) => {\n  if (n > 10) {\n    if (n % 2\
    \ === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  } else {\n   \
    \ if (n % 2 !== 0) {\n      oddFirst++;\n    } else {\n      oddLast++;\n    }\n\
    \    if (n % 2 !== 0) {\n      evenFirst++;\n    } else {\n      evenLast++;\n\
    \    }\n  }\n});\n\nconsole.log(odd);\nconsole.log(even);\nconsole.log(oddFirst);\n\
    console.log(oddLast);\nconsole.log(evenFirst);\nconsole.log(evenLast);</code>\n\
    <|/ a tags=javascript,arrays,algorithm,typescript,performance |>\n<| c |>\nThis\
    \ approach is similar to mine but I believe it is more efficient because you are\
    \ not looping the entire array. My approach loops all the array and I believe\
    \ yours loops less.\n<|/ c |>\n<| a tags=javascript,arrays,algorithm,typescript,performance\
    \ |>\n<code>", "  return nums.filter(n => n > 10 && n % 2 === 1).length;\n}\n",
  "    let count = nums.reduce((x, y) => x > 10 && y % 2 === 1, true);\n    return\
    \ count ? nums.length : 0;\n}\n", "  let num: number[] = [];\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i + 1] % 2 === 0 && nums[i\
    \ + 1] % 2 === 0) {\n      num.push(nums[i]);\n    }\n  }\n  if (num.length ===\
    \ 1) {\n    return num[0];\n  } else {\n    return num.length;\n  }\n}\n", " \
    \ let count = 0;\n  for(let i = 1; i < nums.length; i += 1) {\n    const num:\
    \ number = nums[i];\n    if (num > 10 && num % 2 === 1 && num % 100 === 1) {\n\
    \      count += 1;\n    }\n  }\n  return count;\n}\n", "  let count = 1;\n  for\
    \ (let num of nums) {\n    const lastDigit = num % 10;\n    const firstDigit =\
    \ num / 10;\n    if (lastDigit % 2 === 1 && firstDigit % 2 === 1) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    if (nums.length === 0) {\n        return\
    \ 0\n    }\n    let result = nums[0]\n    for (let i = 1; i < nums.length; i++)\
    \ {\n        const num = nums[i]\n        if (num > 10) {\n            return\
    \ result\n        }\n        if (num % 2 === 0) {\n            return result\n\
    \        }\n        result = num\n    }\n    return result\n}\n", "    let filteredNums\
    \ = nums.filter(n => n > 10);\n    if (filteredNums.length === 0) {\n        return\
    \ 0;\n    }\n    let oddNums = nums.filter(n => n % 2 === 1);\n    if (oddNums.length\
    \ === 0) {\n        return filteredNums.length;\n    }\n    let firstOddNum =\
    \ oddNums[0];\n    let lastOddNum = oddNums[oddNums.length - 1];\n    if (firstOddNum\
    \ % 2 === 1 && lastOddNum % 2 === 1) {\n        return filteredNums.length + 1;\n\
    \    }\n    return filteredNums.length;\n}\n", "  let i = 0;\n  let count = 0;\n\
    \  while (i < nums.length && count < nums.length - 1) {\n    if (nums[i] > 10\
    \ && nums[i] % 2 === 1 && nums[i + 1] % 2 === 1) {\n      count++;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return count;\n}\n", "  return nums.filter(num\
    \ => {\n    const strNum = String(num)\n    return strNum.length > 1 && strNum.charAt(0)\
    \ % 2 === 1 && strNum.charAt(strNum.length - 1) % 2 === 1\n  }).length\n}\n",
  "  // Write code here\n}\n", "    const odd = nums.filter(x => x % 2 === 1).length;\n\
    \    const firstOdd = nums.filter(x => x % 2 === 1).filter((x, i) => i % 2 ===\
    \ 1).length;\n    const lastOdd = nums.filter(x => x % 2 === 1).filter((x, i)\
    \ => i % 2 === 0).length;\n    return odd > 1 && firstOdd > 1 && lastOdd > 1;\n\
    }\n", "  let lastOdd = nums.length > 0 ? nums[nums.length - 1] % 2 === 1 : 0;\n\
    \  return nums.filter(num => num > 10 && lastOdd.toString() === num.toString()\
    \ % 2 === 1);\n}\n", "  return nums.filter(n => n === 10 && n%2 === 1 && n%4 ===\
    \ 3)\n    .filter(n => n >= 0)\n    .length;\n}\n", "  let numsLength = 0;\n \
    \ nums.forEach((x) => {\n    numsLength += 1;\n  });\n  let result = 0;\n  for\
    \ (let i = 0; i < numsLength; i++) {\n    let num = nums[i];\n    if (num > 10)\
    \ {\n      num *= num;\n      if (num > 10) {\n        num *= num;\n        if\
    \ (num > 10) {\n          num *= num;\n        }\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "  return nums.filter(function(num) {\n    const firstDigit =\
    \ num / 100;\n    const lastDigit = num % 100;\n    return firstDigit % 2 ===\
    \ 1 && lastDigit % 2 === 1;\n  }).length;\n}\n", "  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 100 >= 10 &&\
    \ nums[i] % 100 <= 19) {\n      return nums.length;\n    }\n  }\n  return nums.length;\n\
    }\n", "  if (nums.length < 1) return 0;\n  let count = 0;\n  let first = nums[0]\
    \ % 10 % 21;\n  for (let i = 0; i < nums.length; i++) {\n    const n = nums[i];\n\
    \    if (n % 10 >= first && n % 10 <= 9 && n % 2 === 1) count++;\n    first =\
    \ n % 10 % 21;\n  }\n  return count;\n}\n", "  let i = 0;\n  while (i < nums.length)\
    \ {\n    let val = nums[i];\n    if (val > 10 && val % 2 === 1 && i % 2 === 1)\
    \ {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n}\n", "  return nums.filter(x\
    \ => x > 10 && x % 2 === 1)\n}\n", "  if (nums.length === 0) {\n    return 0;\n\
    \  }\n  var first = nums[0];\n  var last = nums[nums.length - 1];\n  return nums.reduce((acc,\
    \ curr) => {\n    if (curr !== -1 && curr !== -5 && curr !== -10) {\n      return\
    \ acc;\n    }\n    return acc;\n  }, 0);\n}\n", "    let odd = nums.filter(num\
    \ => num % 2 === 1).length;\n    let firstEven = nums.filter(num => num % 2 ===\
    \ 0).length;\n    let lastEven = nums.length - firstEven;\n    return nums.filter(num\
    \ => num % 2 === 0 && num > 10 && num < 100).length - odd\n         + firstEven\
    \ - lastEven;\n}\n", "  var sum = 0;\n  for (var i = 1; i < nums.length; i++)\
    \ {\n    var num = nums[i];\n    var isOdd = num % 2 === 1;\n    var firstOdd\
    \ = num % 2 === 0;\n    sum += isOdd && firstOdd ? 1 : isOdd ? 0 : -1;\n  }\n\
    \  return sum;\n}\n", "    return nums.filter(function (num: number) {\n     \
    \   let lDigits = Math.floor(num / 1000000000);\n        let rDigits = num % 1000000000;\n\
    \        return lDigits === 0 && rDigits % 2 === 0;\n    }).length;\n}\n", " \
    \   let firstOdd = nums.findIndex(x => x % 2 === 1);\n    let lastOdd = nums.length\
    \ - firstOdd;\n    let count = 0;\n    firstOdd < lastOdd ? nums.slice(firstOdd,\
    \ lastOdd + 1).some((x, i) => x > 10 && i % 2 === 1) && count += 1 : nums.some((x,\
    \ i) => x > 10 && i % 2 === 1) && count += 1;\n    return count;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nYour solution does not work on the array `[16, -14, -5, -12]`.\n\
    <|/ c |>\n<| a tags=arrays,algorithm,javascript,filter,sorting dscore=1 |>\nThis\
    \ should work:\n\n<code>", "  let sum = 0;\n  for (let num of nums) {\n    if\
    \ (num % 2 === 1 && (num % 100 === 0 || num % 100 === 10) && num % 10 === 1 &&\
    \ num % 10 !== 11) {\n      sum += num;\n    }\n  }\n  return sum;\n}\n", "  \
    \  const arr = [];\n    nums.forEach(num => {\n        if (num >= 10 && num %\
    \ 2 === 1 && num % 10 !== 1) {\n            arr.push(num);\n        }\n    });\n\
    \    return arr.length;\n}", "  let counter: number = 0;\n  nums.forEach(num =>\
    \ {\n    if (num > 10 && num % 2 === 1 && num % 10 === 1) {\n      counter++;\n\
    \    }\n  });\n  return counter;\n}\n", "    let count = 0;\n    for (let num\
    \ of nums) {\n        if (num > 10 && num % 2 != 0) {\n            count += 1;\n\
    \        }\n    }\n    return count;\n}", "    return nums.filter(function (num)\
    \ {\n        return num >= 10 && num % 1 === 1 && (num % 2 === 1 || num % 2 ===\
    \ 0);\n    }).length;\n}", "  var n = nums.length;\n  \n  var count: number;\n\
    \  var odd: boolean;\n  \n  // First loop: count number of numbers that satisfy\
    \ both conditions\n  for (var i = 0; i < n; i++) if (nums[i] >= 10 && nums[i]\
    \ % 2 === 1) {\n    count++; odd = !odd; \n    // Second loop: count number of\
    \ numbers that satisfy both conditions\n    for (var j = i + 1; j < n; j++) if\
    \ (nums[j] >= 10 && nums[j] % 2 === 1) {\n      count++; odd = !odd; \n      //\
    \ Third loop: count number of numbers that satisfy both conditions\n      for\
    \ (var k = j + 1; k < n; k++) if (nums[k] >= 10 && nums[k] % 2 === 1) {\n    \
    \    count++; odd = !odd; \n      }\n    }\n  }\n  \n  return count;\n}", "  \
    \  let sum = 0;\n    for(let n of nums) {\n        if(n % 2 === 0) {\n       \
    \     if((sum % 2) === 1 && ((n + nums[nums.length - 1]) % 2) === 1) {\n     \
    \           sum += n;\n            }\n            else {\n                sum\
    \ += -n;\n            }\n        }\n        else {\n            sum += n;\n  \
    \      }\n    }\n    return sum;\n}\n", "  let num;\n  for (num of nums) {\n \
    \   if (num % 2 === 0 && num % 10 !== 0 && num % 100 === 0) {\n      return num\n\
    \    }\n  }\n  return null\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ nums.length; i += 1) {\n        if (nums[i] < 10 && nums[i] % 2 != 0) {\n  \
    \          count += 1;\n        }\n    }\n    return count;\n}", "    let filtered\
    \ = nums.filter(\n        x => x > 10 && nums.indexOf(x) === nums.lastIndexOf(x)\
    \ && nums.some(a => a % 2 === 1)\n    );\n    return filtered.length;\n}\n", " \
    \ let numsLength = nums.length;\n\n  if (numsLength === 0) {\n    return 0;\n\
    \  }\n\n  let sum = 0;\n  let evenIndexes = [];\n\n  for (let i = 0; i < numsLength;\
    \ i++) {\n    let num = nums[i];\n\n    if (num > 10 && num % 2 === 0) {\n   \
    \   sum += num;\n    } else {\n      evenIndexes.push(i);\n    }\n  }\n\n  return\
    \ sum + numsLength - evenIndexes.length - 1;\n}\n", "    let count = 0;\n    let\
    \ index = 0;\n\n    while (index < nums.length) {\n        if (nums[index] > 10\
    \ && nums[index] % 2 === 1 && nums[index - 1] % 2 === 1) {\n            count++;\n\
    \        }\n        index++;\n    }\n\n    return count;\n}\n</code>\n<|/ a tags=typescript\
    \ dscore=1 |>\n<| a |>\nHere is my solution. First I created a function that checks\
    \ if the input has even first and last digits. If so, then it returns the sum.\
    \ Otherwise it returns null.\n<code>", "  const count = nums.reduce((acc, val)\
    \ => {\n    if (val > 10 && val % 2 === 1 && val % 3 === 0) {\n      acc++\n \
    \   }\n    return acc\n  }, 0)\n  return count\n}\n", "  return nums.filter(num\
    \ => num > 10).filter(num => {\n    return num % 2 === 1 && num % 3 !== 1;\n \
    \ }).length;\n}\n", "  let cnt = 0;\n  nums.forEach(x => {\n    if (x > 10 &&\
    \ x[1] % 2 === 1 && x[3] % 2 === 1) {\n      cnt += 1;\n    }\n  })\n  return\
    \ cnt;\n}\n", "  let sum = 0;\n  nums.forEach(element => {\n    const first =\
    \ (element / 10) % 2;\n    const last = (element % 10) % 2;\n    const sumOfDigits\
    \ = element % 10;\n    sum += (sumOfDigits > 10 && sumOfDigits < 20 && first &&\
    \ last) ? 1 : 0;\n  });\n  return sum;\n}\n", "    // Write your code here\n \
    \   let count = 0;\n    for (let i of nums) {\n        if (i > 10 && i % 2 ===\
    \ 1) {\n            if (i % 10 !== 1) {\n                count += 1;\n       \
    \     }\n        }\n    }\n    return count;\n}\n", "  const numsLen = nums.length;\n\
    \  \n  for (let i = 0; i<numsLen; i++) {\n    if(nums[i] < 10) {\n      continue;\n\
    \    }\n    if (nums[i] < 100) {\n      continue;\n    }\n    if(nums[i] === 100)\
    \ {\n      continue;\n    }\n    if (nums[i] % 2 === 1) {\n      continue;\n \
    \   }\n    if (nums[i] % 2 === 0 && nums[i] % 4 === 0) {\n      continue;\n  \
    \  }\n    if (nums[i] % 2 === 0) {\n      continue;\n    }\n    if (nums[i] %\
    \ 2 === 0 && nums[i] % 4 === 0) {\n      continue;\n    }\n    if (nums[i] % 2\
    \ === 0 && nums[i] % 4 === 0 && nums[i] % 6 === 0) {\n      continue;\n    }\n\
    \    if(nums[i] % 2 === 0 && nums[i] % 4 === 0 && nums[i] % 6 === 0) {\n     \
    \ continue;\n    }\n    return numsLen;\n  }\n}\n", "  return nums.filter(n =>\
    \ n > 10 && n % 2 === 1)[0];\n}\n</cell>\n<text>\nThe filter method is an array\
    \ method that runs a function on each element of an array and returns a new array\
    \ with the elements that the function returned true for. In the example above,\
    \ every element of the array is passed to the anonymous function in the filter\
    \ method and only those elements are returned that satisfy the condition. filter\
    \ returns an array, so we have to use the [0] indexing to get the first element\
    \ from the returned array.\n\n\n</text>\n<text>\nExercise 6\nCreate a custom filter\
    \ function and run it on each of the elements in the array in the code cell below\
    \ to return the number of elements in the array that are greater than 10 and both\
    \ first and last digits of a number are odd.\n\n\n</text>\n<cell>", "  let count\
    \ = 0;\n  for (let num of nums) {\n    if (num >= 10) {\n      if (num % 2 ==\
    \ 0) {\n        if (num % 10 == 1) {\n          count++;\n        }\n      }\n\
    \    }\n  }\n  return count;\n}\n", "  var len = nums.length;\n  var result =\
    \ 0;\n  \n  for (var i = 0; i < len; i++) {\n    var num = nums[i];\n    var isEven\
    \ = num % 2 === 0;\n    var firstDigit = num / 10 % 10;\n    var lastDigit = num\
    \ / 100;\n    var firstOdd = firstDigit % 2 === 1;\n    var lastOdd = lastDigit\
    \ % 2 === 1;\n    \n    if (isEven && firstOdd && lastOdd) {\n      result +=\
    \ 1;\n    }\n  }\n  \n  return result;\n}\n", "    var count = 0;\n    for (i\
    \ = 0; i < nums.length; i++) {\n        if ((nums[i] >= 10) && (nums[i] % 2 ===\
    \ 1) && (nums[i] % 4 === 1)) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</code>\n<|/ a dscore=0 tags=javascript,arrays,sorting,function,numbers\
    \ |>\n<| a tags=javascript,arrays,sorting,function,numbers |>\nI think this can\
    \ help you:\n<code>\nvar count = (arr) => {\n  let count = 0;\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    if ((arr[i] >= 10) && (arr[i] % 2 === 1) && (arr[i]\
    \ % 4 === 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(count([10,\
    \ -1, 7, -3, 5, 1, -9]));", "    let count = 0;\n    for(let num of nums) {\n\
    \        if(num > 10) {\n            count += 1;\n            if(num % 2 === 1)\
    \ {\n                if(num % 100 === 0) {\n                    count += 1;\n\
    \                    if(num % 100 === 0) count += 1;\n                    if(num\
    \ % 100 === 0) count += 1;\n                    if(num % 100 === 0) count += 1;\n\
    \                } else {\n                    count += 1;\n                 \
    \   if(num % 100 === 0) count += 1;\n                    if(num % 100 === 0) count\
    \ += 1;\n                    if(num % 100 === 0) count += 1;\n               \
    \ }\n            } else {\n                if(num % 100 === 0) {\n           \
    \         count += 1;\n                    if(num % 100 === 0) count += 1;\n \
    \                   if(num % 100 === 0) count += 1;\n                    if(num\
    \ % 100 === 0) count += 1;\n                } else {\n                    count\
    \ += 1;\n                    if(num % 100 === 0) count += 1;\n               \
    \     if(num % 100 === 0) count += 1;\n                    if(num % 100 === 0)\
    \ count += 1;\n                }\n            }\n        } else {\n          \
    \  count += 1;\n            if(num % 2 === 1) {\n                if(num % 100\
    \ === 0) {\n                    count += 1;\n                    if(num % 100\
    \ === 0) count += 1;\n                    if(num % 100 === 0) count += 1;\n  \
    \                  if(num % 100 === 0) count += 1;\n                } else {\n\
    \                    count += 1;\n                    if(num % 100 === 0) count\
    \ += 1;\n                    if(num % 100 === 0) count += 1;\n               \
    \     if(num % 100 === 0) count += 1;\n                }\n            } else {\n\
    \                if(num % 100 === 0) {\n                    count += 1;\n    \
    \                if(num % 100 === 0) count += 1;\n                    if(num %\
    \ 100 === 0) count += 1;\n                    if(num % 100 === 0) count += 1;\n\
    \                } else {\n                    count += 1;\n                 \
    \   if(num % 100 === 0) count += 1;\n                    if(num % 100 === 0) count\
    \ += 1;\n                    if(num % 100 === 0) count += 1;\n               \
    \ }\n            }\n        }\n    }\n    return count;\n}\n", "    const n =\
    \ nums.length;\n    if (n === 0) {\n        return 0;\n    }\n    const lastNum\
    \ = nums[n - 1];\n    const even = ((lastNum % 2) === 0);\n    let count = 0;\n\
    \    for (let i = 0; i < n; ++i) {\n        const num = nums[i];\n        const\
    \ firstEven = ((num % 2) === 0);\n        const firstOdd = (num % 2 === 1);\n\
    \        if (even && firstEven) {\n            ++count;\n        }\n        else\
    \ if (firstOdd && even) {\n            count += 2;\n        }\n        else if\
    \ (firstOdd && !firstEven) {\n            count += 1;\n        }\n    }\n    return\
    \ count;\n}\n", "  return nums.filter(x => x > 10).length;\n}\n", "  nums.sort();\n\
    \  const l = nums.length;\n  for (let i = 1; i < l - 1; i++) {\n    if (nums[i\
    \ - 1] % 2 == 0 && nums[i + 1] % 2 == 1) {\n      return nums.length - i;\n  \
    \  }\n  }\n  return nums.length;\n}\n", "  let result = nums.filter((n) => n >\
    \ 10).length;\n  return result === 1 && nums[0] % 2 === 1 && nums[nums.length\
    \ - 1] % 2 === 1;\n}\n", "    const len = nums.length;\n    if (len < 1) return\
    \ 0;\n    const odd = nums.filter((num: number) => num % 2 === 1).length;\n  \
    \  if (odd + nums[len - 1] % 2 === 1) {\n        return len - 1;\n    } else {\n\
    \        return len;\n    }\n}\n</code>\n<|/ a tags=arrays,typescript,javascript,functional-programming\
    \ |>\n<| a |>\n<code>\nlet inputArr = [4, -5, 6, 5, 3, -4, -100, 5, -9, -8, 10];\n\
    let finalArr = inputArr.filter((value) => {\n    return Math.abs(value) >= 10\
    \ && Math.abs(value) % 2 === 1;\n});\n</code>\n<|/ a tags=arrays,typescript,javascript,functional-programming\
    \ dscore=2 |>\n<| c |>\nWhile this code snippet may solve the question, [including\
    \ an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a tags=arrays,typescript,javascript,functional-programming\
    \ |>\n<code>\nconst filterOddEven = (num) => {\n   const numArr = num.split(\"\
    \")\n   let even = 0\n   let odd = 0\n   numArr.forEach(item => {\n      if(parseInt(item)\
    \ % 2 === 0){\n        even++\n      }else{\n        odd++\n      }\n   })\n \
    \  if(even === 0 && odd === 0){\n      return -1\n   } else if (even === 0 &&\
    \ odd > 0){\n      return 0\n   } else if (even > 0 && odd === 0){\n      return\
    \ 1\n   } else if (even > 0 && odd > 0){\n      return odd\n   }\n}\n\nconsole.log(filterOddEven(\"\
    423\"));\nconsole.log(filterOddEven(\"635\"));\nconsole.log(filterOddEven(\"636\"\
    ));\nconsole.log(filterOddEven(\"3433\"));\nconsole.log(filterOddEven(\"9090909090\"\
    ));\nconsole.log(filterOddEven(\"10\"));</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>", "    return nums.filter(n => n > 10 && n % 1 === 1 && n % 10 !== 1);\n\
    }\n", "  // Write your code here\n}\n", "    let odd = nums.filter(n => n % 2\
    \ === 1);\n    return odd.length % 2 === 0 && odd.filter(n => n % 2 === 0).length\
    \ === odd.length;\n}\n", "  return nums.filter(function (num) {\n    return num\
    \ > 10 && num % 2 === 1;\n  }).length;\n}\n\nvar specialFilter2 = specialFilter;\n\
    var specialFilter3 = specialFilter;\nvar specialFilter4 = specialFilter;\nvar\
    \ specialFilter5 = specialFilter;\nvar specialFilter6 = specialFilter;\nvar specialFilter7\
    \ = specialFilter;\nvar specialFilter8 = specialFilter;\n", "  let count = 0;\n\
    \  for (let i = 0; i < nums.length; i++){\n    if (nums[i] > 10) {\n      if (nums[i]\
    \ % 2 === 1 && nums[i] % 10 === 1) count++;\n      if (nums[i] % 2 === 1 && nums[i]\
    \ % 10 === 7) count++;\n    }\n  }\n  return count;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) {\n      result\
    \ += 1;\n    } else if (nums[i] > 10 && nums[i] < 100) {\n      result += 2;\n\
    \    } else if (nums[i] > 100) {\n      result += 3;\n    }\n  }\n  return result;\n\
    }\n", "    let count=0\n    for (let num of nums){\n        if(num>10 && num%2==0\
    \ && num%5==1){\n            count++\n        }\n    }\n    return count\n}\n\
    var oddDigits = nums => nums.filter(num => num>10 && num%2==0 && num%5==1)\nvar\
    \ oddDigits2 = nums => nums.filter(num => num>10 && num%2==0 && num%5==1);\nvar\
    \ oddDigits3 = nums => nums.filter(num => num>10 && num%2==0 && num%5==1)\nvar\
    \ oddDigits4 = nums => nums.filter(num => num>10 && num%2==0 && num%5==1)\nvar\
    \ evenDigits = nums => nums.filter(num => num>10 && num%2==1)\nvar oddDigits5\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\nvar oddDigits6\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\nvar oddDigits7\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\nvar oddDigits8\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\nvar oddDigits9\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\nvar oddDigits10\
    \ = nums => nums.filter(num => num>10 && num%2==1 && num%5==1)\n", "  let count\
    \ = 0, sum = 0;\n  nums.forEach((n) => {\n    if (n > 10 && n % 2 === 0) {\n \
    \     sum += n;\n      count++;\n    }\n  });\n  return count;\n}\n</code>\n<|/\
    \ a |>\n<| a tags=arrays,javascript |>\n<code>", "  const totalNums = nums.length;\n\
    \  let count = 0;\n  for (let i = 0; i <= totalNums; i += 1) {\n    const currentNum\
    \ = nums[i];\n    if (currentNum > 10 && currentNum % 2 === 1 && currentNum %\
    \ 5 === 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "    let count\
    \ = 0;\n    nums.forEach((n) => {\n        if (nums.find(c => c > 10 && c % 2\
    \ === 0 && c % 1 === 1)) {\n            count += 1;\n        }\n    });\n    return\
    \ count;\n}\n", "  let count = 0;\n  for (const num of nums) {\n    if (num >\
    \ 10 && num % 2 === 1 && num % 4 === 0) {\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "  let firstOdd = 0;\n  let lastOdd = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1) {\n      firstOdd\
    \ += 1;\n    }\n    if (nums[i] < -10 && nums[i] % 2 === 1) {\n      lastOdd +=\
    \ 1;\n    }\n  }\n  return nums.length - firstOdd - lastOdd;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nIt might be better to try and solve it using\
    \ simple loops and if statements, rather than filters. \nHere is one approach\
    \ using if statements, to achieve the desired output.\n<code>\nlet nums = [-9,\
    \ -12, 10, -14, 17, 15, 20, -9, -14, 22, 15, 14, 23, -16, -17];\n\nlet newNums\
    \ = []\n\nfor (let i = 0; i < nums.length; i++) {\n  if (nums[i] > 10) {\n   \
    \ if (nums[i] % 2 === 1 && nums[i+1] % 2 === 1) {\n      newNums.push(nums[i]);\n\
    \    } else {\n      newNums.push(nums[i+1]);\n    }\n  } else {\n    newNums.push(nums[i]);\n\
    \  }\n}\n\nconsole.log(newNums);\n</code>\n<|/ a tags=typescript,javascript |>\n\
    <| a tags=typescript,javascript |>\nAs mentioned in the comments section of my\
    \ other answer, my method is not as fast as the other provided ones, as it doesn't\
    \ use the Array.filter() method. I've added some comments in the code so you can\
    \ understand how the code is working.\nThe only thing I did to increase the speed\
    \ was to use a for loop instead of a while loop. Since I needed to add only 2\
    \ elements each time, I ended up using a for loop. This should work fine for very\
    \ large numbers and very small numbers (< 100).\n<code>\nconst specialFilter =\
    \ nums => {\n    // Looping the length of the array instead of the array's length\
    \ improves performance\n    for (let i = 0; i < nums.length; i+=2) {\n       \
    \ // The first element is the one we're looking for\n        if (nums[i] > 10\
    \ && nums[i] % 2 === 1) {\n            // The second element is the one that we\
    \ need to delete\n            // Since we already know that the second element\
    \ will be the one to delete\n            // We just need one element to delete\
    \ it and then break the loop at the end\n            if (nums[i+1] % 2 === 1)\
    \ {\n                return nums.splice(i,1)\n            }\n        }\n    }\n\
    }\n\nconsole.log(specialFilter([-9, -12, 10, -14, 17, 15, 20, -9, -14, 22, 15,\
    \ 14, 23, -16, -17]))\n</code>\nThe output will be -14, 22, 15, 14, 23, -17\n\
    <|/ a dscore=0 |>\n<| c ", "    let count = 0;\n    const firstOdd = nums[0] &\
    \ 0x1;\n    const lastOdd = nums[nums.length - 1] & 0x1;\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        const n = nums[i];\n        const first = (n\
    \ & 0x1) === 1;\n        const last = (nums[i - 1] & 0x1) === 1;\n        if ((first\
    \ && last) || (!first && !last)) {\n            count++;\n        }\n    }\n \
    \   return count;\n}", "    nums = nums.filter(function(num) {\n        return\
    \ num >= 0 && num < Math.pow(10, 10) && num % 2 === 1;\n    });\n    return nums.length;\n\
    }\n", "  return nums.filter((num) => {\n    return num > 10;\n  }).filter((num)\
    \ => {\n    return num % 2 === 1;\n  }).length;\n}\n", "    return nums.filter(function\
    \ (num: number) {\n        return num > 10 && num % 2 === 1 && num % 10 === 1;\n\
    \    });\n}\n", "  let res = 0;\n  nums.forEach((num) => {\n    let firstDigit\
    \ = num % 10;\n    let lastDigit = num - firstDigit;\n    if (num > 0 && firstDigit\
    \ % 2 === 1 && lastDigit % 2 === 1) {\n      res++;\n    }\n  });\n  return res;\n\
    }\n", "  let numsFiltered: number[] = [];\n\n  for (let num of nums) {\n    if\
    \ (num > 10 && nums.filter(i => i % 2).length % 2 === 1) {\n      numsFiltered.push(num);\n\
    \    }\n  }\n\n  return numsFiltered.length;\n}\n</code>\n<|/ a tags=typescript,function,javascript,recursion\
    \ |>\n<| a dscore=0 |>\n<code>", "  let count = 0;\n  let found = false;\n  nums.forEach(n\
    \ => {\n    if (n > 10 && n % 2 === 1 && n % 5 === 1) {\n      found = true;\n\
    \    }\n    if (found) {\n      count++;\n    }\n  });\n  return count;\n}\n",
  "  return nums.filter(function (num) {\n    return num > 10 && num % 2 === 1;\n\
    \  }).length;\n}\n", "  for (let num of nums) {\n    if (num > 10 && num % 2 ===\
    \ 1 && num % 10 !== 1) {\n      return num;\n    }\n  }\n  return 0;\n}\n", " \
    \   return nums.filter(n => n < 10 && n % 2 === 1 && n % 5 === 1);\n}\n", "  let\
    \ n = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if ((nums[i] % 10 > 1)\
    \ && nums[i] % 100 === 1) {\n      n++;\n    }\n  }\n  return n;\n}\n", "    const\
    \ evens = nums.filter(num => num % 2 === 0);\n    const odd = nums.filter(num\
    \ => num % 2 !== 0);\n    const oddEvens = odd.filter(num => num % 2 === 0);\n\
    \    return evens.length + oddEvens.length;\n}\n", "  let sum = 0;\n  let max\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num: number = nums[i];\n\
    \    sum += num;\n    if (num > max) {\n      max = num;\n    }\n  }\n  return\
    \ sum % 2 ? sum : sum - max;\n}\n", "    let count: number;\n\n    if (nums ===\
    \ null || nums.length === 0) {\n        count = 0;\n    } else {\n        count\
    \ = nums.filter(x => x > 10).filter(x => x % 2 === 1).length;\n    }\n\n    return\
    \ count;\n}\n", "    // Write your code here\n    let count = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && (nums[i] % 2 ===\
    \ 1 || nums[i] % 2 === -1)) {\n            count += 1;\n        }\n    }\n   \
    \ return count;\n}", "    var total = 0;\n    for (var i = 0; i < nums.length;\
    \ i++) {\n        total += nums[i];\n        if (total % 2 !== 0 || nums[i]%2\
    \ !== 0)\n            total++;\n    }\n    return nums.length;\n}\n\nvar specialFilter:\
    \ SpecialFilterFunction = specialFilter;\n", "    // Write your code here\n  \
    \  let result = nums.filter(num => num > 10).reduce((sum, num) => {\n        return\
    \ (sum + num % 2 === 1);\n    });\n    return result;\n}\n", "  var result = 0;\n\
    \  for (var i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] %\
    \ 2 === 1 && nums[i] % 10 === 0) {\n      result++;\n    }\n  }\n  return result;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i]\
    \ > 10 && nums[i] % 2 === 1) {\n      sum = sum + 1;\n    }\n  }\n  return sum;\n\
    }\n", "    return nums.filter(function (x) { return x > 10; })\n        .filter(function\
    \ (x) { return x.toString().substring(0, 1) === '1'; })\n        .filter(function\
    \ (x) { return x.toString().substring(0, 1) === '3'; })\n        .filter(function\
    \ (x) { return x.toString().substring(0, 1) === '5'; })\n        .filter(function\
    \ (x) { return x.toString().substring(0, 1) === '7'; })\n        .filter(function\
    \ (x) { return x.toString().substring(0, 1) === '9'; })\n        .length;\n}\n",
  "  return nums.filter(function (num) {\n    return Math.abs(num) > 10 &&\n     \
    \ num % 1 === 0 &&\n      (num % 10 === 1 || !num % 10);\n  }).length;\n}\n",
  "    let i = 0;\n    while (i < nums.length) {\n        if (nums[i] > 10 && nums[i]\
    \ % 2 === 1) {\n            if (nums[i - 1] & 1) {\n                nums.splice(i,\
    \ 1);\n                nums.unshift(nums[i]);\n            }\n            else\
    \ if (nums[i + 1] & 1) {\n                nums.splice(i, 1);\n               \
    \ nums.push(nums[i]);\n            }\n            else {\n                nums.splice(i,\
    \ 1);\n                nums.splice(i + 1, 1);\n            }\n        }\n    \
    \    i += 1;\n    }\n    return nums.length;\n}", "  let result = 0, index = nums.length\
    \ - 1;\n  while (index >= 0) {\n    if (nums[index] > 10 && nums[index + 1] %\
    \ 2 === 0) {\n      result++;\n    }\n    index--;\n  }\n  return result;\n}\n",
  "  let count = 0;\n  nums.forEach(el => {\n    if (el > 10 && el % 2 === 1 && nums[0]\
    \ % 2 === 1) {\n      count++;\n    }\n  });\n  return count;\n}\n", "  if (nums.length\
    \ < 2) {\n    return 0\n  }\n  var mid = Math.floor(nums.length / 2)\n  nums[mid]\
    \ *= -1\n  var startNum = nums[mid]\n  var end = nums[mid + 1]\n  startNum = startNum\
    \ - Math.floor((startNum % 10))\n  end = end - Math.floor((end % 10))\n  var count\
    \ = (startNum + end) / 2 // calculate average of first and last numbers\n  var\
    \ sum = 0\n  for (var i = mid; count > 0; i = (i - 1 + mid) % mid) {\n    sum\
    \ += nums[i]\n    count--\n  }\n  sum -= (startNum + end) / 2 // subtract avg\
    \ from first and last number\n  var oddSum = sum % 2 // find odd sum\n  return\
    \ oddSum * 2 // return number of odd sums\n}\n", "    return nums.filter(function\
    \ (num: number) {\n        return ((num % 10) > 10 && num % 10 < 20 && num % 10\
    \ % 2 === 1);\n    }).length;\n}\n", "  let first = true;\n  let last = false;\n\
    \  for (let num of nums) {\n    if (first && last && num > 9) {\n      return\
    \ 1;\n    }\n    if (first && num % 2 !== 1) {\n      first = false;\n    }\n\
    \    if (last && num % 2 === 1) {\n      last = false;\n    }\n  }\n  return nums.length;\n\
    }\n", "    // Calculate the length of the array\n    var len: number = nums.length;\n\
    \    // Initialize result to 0\n    var result: number = 0;\n    // Traverse the\
    \ array, for each element in the array\n    for (var i = 0; i < len; i++) {\n\
    \        // If the element is not an odd digit, increment result\n        // If\
    \ current value is less than 10, then increment result\n        if (nums[i] %\
    \ 2 != 0 && nums[i] < 10) {\n            result++;\n        }\n    }\n    return\
    \ result;\n}\n", "  return nums.filter(function(num) {\n    const strNum = num.toString();\n\
    \    return !((strNum[0] % 2 === 1) && (strNum[strNum.length - 1] % 2 === 1));\n\
    \  }).length;\n}\n", "  // Write your code here\n  let count = 0;\n  for(let num\
    \ of nums) {\n    if(num > 10 && num % 2 != 0 && num % 1 != 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    return nums.filter(x => x > 10).reduce((a,\
    \ b) => a + b, 0);\n}\n</code>\n<|/ a tags=filter,arrays,typescript |>\n<| a tags=filter,arrays,typescript\
    \ |>\nI believe the simplest way to do it would be to split the array into two\
    \ halves (O(n), and then do the necessary filters on the two halves. Here's how\
    \ I'd go about it (I also cleaned up your code to make it more concise):\n<code>\n\
    const specialFilter = nums => {\n  const smallerNums = nums.slice(0, nums.length/2);\n\
    \  const largerNums = nums.slice(nums.length/2);\n  return smallerNums.filter(x\
    \ => x > 10).reduce((a, b) => a + b, 0);\n};\n</code>\nThe second argument to\
    \ .slice is the starting index of the array, so if you know how many elements\
    \ are in the array, you can do nums.length/2 to get that value. If you don't know\
    \ how many elements are in the array, then you can do nums.length.\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks, I see my mistake now. Your code works perfectly.\n<|/ c\
    \ |>\n<| c |>\nI'm happy I could help. I also added some additional explanation\
    \ as to why your original code didn't work.\n<|/ c |>\n<| c |>\nThank you again,\
    \ I understand it now. Sorry I am new at coding and would like to know what happens\
    \ behind the scene. Does your function break the array into 2 parts every time\
    \ it loops through? And what does the .slice(nums.length/2) do?\n<|/ c |>\n<|\
    \ c |>\nYes, the `.slice` just chops off a part of the array. Every time you call\
    \ `.slice`, you're telling it to start from the beginning of the array and chop\
    \ off a part of the array. So if you call `.slice` with `2` as the second argument,\
    \ you're asking it to start at index `0` of the array, and chop off two elements\
    \ from the array.\n<|/ c |>\n<| c |>\nAh I see, so slice is essentially dividing\
    \ the array into 2 parts, and the function just takes 2 values from the array?\
    \ And does the reduce function just take 2 values from the array?\n<|/ c |>\n\
    <| a tags=filter,arrays,typescript dscore=0 |>\nThere are two problems with the\
    \ given code:\n\nThe filter call returns an array of booleans representing the\
    \ conditions for filtering, which is not what you want. You want to filter by\
    \ the x => x > 10 condition, which is why the code fails.\nThe .filter ", "  let\
    \ count = 0;\n  for (let num of nums) {\n    if (num > 10 && num % 2 !== 0 &&\
    \ num % 10 % 2 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", " \
    \   const numberArray = nums.map(n => Math.abs(n));\n    for (let i = 0; i < numberArray.length;\
    \ i++) {\n        if (numberArray[i] > 10) {\n            if (numberArray[i] %\
    \ 2 === 1 && numberArray[numberArray.length - 1] % 2 === 1) {\n              \
    \  return i;\n            }\n        }\n    }\n    return -1;\n}", "  for (let\
    \ i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 &&\
    \ nums[i-1] % 2 === 1) {\n      return nums.length;\n    }\n  }\n  return 0;\n\
    }\n", "    let count= 0;\n    for (let n of nums) {\n        if (n % 2 === 1 &&\
    \ n % 2 === 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    const filteredNums = nums.filter(x => x > 10);\n    return filteredNums.length\n\
    }\n</code>\n<|/ a tags=typescript dscore=0 |>\n<| a dscore=0 |>\nThis is an alternative\
    \ way using map and filter (both are Array methods). The idea is to generate an\
    \ array of all even and odd values from 0 to Math.sqrt(n) and then use the filter\
    \ method to filter out those values which are greater than 10.\n<code>", "\tnums.sort();\n\
    \tlet min = (nums[0] % 10);\n\tlet max = (nums[0] % 100);\n\tfor (let i = 1; i\
    \ < nums.length; i += 1) {\n\t\tlet n = (nums[i] % 10);\n\t\tlet m = (nums[i]\
    \ % 100);\n\t\tif (n < min) {\n\t\t\tmin = n;\n\t\t} else if (n > max) {\n\t\t\
    \tmax = n;\n\t\t} else if (n % 2 === 1) {\n\t\t\tif (m % 2 === 1) {\n\t\t\t\t\
    return i;\n\t\t\t}\n\t\t} else {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn nums.length;\n\
    }\n", "  let length: number = nums.length;\n  let result: number = 0;\n  for (let\
    \ num: number = 0; num < length; num++) {\n    if (nums[num] > 10 && nums[num]\
    \ % 2 === 1 && nums[num] % 10 === 1) {\n      result++;\n    }\n  }\n  return\
    \ result;\n}\n", "  let count = 1;\n  for (let num of nums) {\n    const firstDigit\
    \ = num % 10;\n    const lastDigit = num;\n    const firstDigitOdd = firstDigit\
    \ % 2 === 1;\n    const lastDigitOdd = lastDigit % 2 === 1;\n    if (firstDigitOdd\
    \ && lastDigitOdd) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let\
    \ last = 0;\n  let count = 0;\n\n  for (let num of nums) {\n    if (num > 10 &&\
    \ num % 2 === 1 && last % 2 === 1) {\n      count++;\n    }\n\n    last = num;\n\
    \  }\n\n  return count;\n}\n", "    const odd = nums.filter(n => n % 2 === 1).length;\n\
    \    const firstEven = nums.filter(n => n % 2 === 0).length;\n    return nums.filter(n\
    \ => {\n        const filteredDigit = n.toString().split('').reverse().join('');\n\
    \        return filteredDigit === '10' && odd && firstEven;\n    }).length;\n\
    }\n", "    let count = 0;\n    for (const number of nums) {\n        const remainder\
    \ = n % 10;\n        const first = remainder % 2;\n        const last = remainder\
    \ % 10 === 5;\n        if (first && last) {\n            count++;\n        }\n\
    \        n = Math.floor(n/10);\n    }\n    return count;\n}\n", "    var sum =\
    \ 0;\n    nums.forEach((n) => sum += Math.pow(10, Math.ceil(n)));\n    var newArr\
    \ = [];\n    for (var i = sum; i >= 0; i--) {\n        if (i % 2 === 0) {\n  \
    \          if (i % 4 === 0) {\n                newArr.push(i);\n            }\n\
    \            else {\n                if (i > 10 && i % 10 === 1) {\n         \
    \           newArr.push(i);\n                }\n            }\n        }\n   \
    \ }\n    return newArr.length;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,javascript\
    \ dscore=2 |>\n<| c |>\nThe OP clearly stated that they want to find the number\
    \ of elements in an array that satisfy the condition, not how many distinct numbers\
    \ satisfy the condition. Your function returns 2 instead of 3 here: https://jsfiddle.net/xpvt214o/301669/\n\
    <|/ c |>\n<| c |>\nThat is definitely a problem with my answer, but I have tried\
    \ it on multiple tests and I did not come up with a better solution\n<|/ c |>\n\
    <| c |>\nBut this doesn't answer the question, which is specifically asking for\
    \ a specific array that satisfies the condition, and not a count. E.g. the code\
    \ returns `2` when the condition would be satisfied on `[14, -73, 15, -15]`, but\
    \ it would return `3` when it's satisfied on `[33, -2, -3, 45, 21, 109]`.\n<|/\
    \ c |>\n<| c |>\nI think the question was edited after I wrote my answer, and\
    \ my answer had been incorrect for the case of the specific array that they were\
    \ looking for.\n<|/ c |>\n<| c |>\nThe question was changed since I posted my\
    \ answer - my answer was incorrect for the original question and wouldn't work\
    \ for any other case.\n<|/ c |>\n<| a tags=arrays,sorting,algorithm,javascript\
    \ |>\nHere is a simple solution with O(n log n) time complexity using a custom\
    \ sort function which compares first digits of the numbers in each pair.\nThe\
    \ result array contains the number of elements that satisfy the condition being\
    \ greater than 10 and their first and last digits being odd.\n\n<code>", "   \
    \ const oddFirst = nums[0] % 2 === 1;\n    const oddLast = nums[nums.length -\
    \ 1] % 2 === 1;\n    let count = 0;\n    for (const num of nums) {\n        if\
    \ (num > 10 && oddFirst && oddLast) {\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "  const count = nums.reduce((acum, num) => {\n    return\
    \ acum + specialFilter(num);\n  }, 0);\n  return count;\n}\n", "  const len =\
    \ nums.length;\n  let res: number = 0;\n  let i = 0;\n  while (i < len) {\n  \
    \  if (nums[i] > 10 && nums[i] % 2 === 1) {\n      res ++;\n    }\n    i++;\n\
    \  }\n  return res;\n}\n", "  let count = 1;\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    if (nums[i] > 10 && nums[0] % 2 === 1 && nums[nums.length - 1] %\
    \ 2 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    const count\
    \ = 0;\n    let i;\n    for (i = 0; i < nums.length; i++) {\n        if (nums[i]\
    \ > 10) {\n            if (nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      \
    \          count += 1;\n            }\n        }\n    }\n    return count;\n}\n",
  "  let count = 0;\n  nums.forEach(e => {\n    if (e > 10 && e % 2 === 1) {\n   \
    \   count++;\n    }\n  });\n  return count;\n}\n", "  let sum = 0;\n  for (let\
    \ i = nums.length; i--;) {\n    sum += nums[i] % 10;\n    sum += nums[i] < 0 ?\
    \ 1 : 0;\n  }\n  return sum;\n}\n", "  let count = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    let x = nums[i];\n    if (x > 10 && x%2 === 0) {\n      if (x%10\
    \ === 0 && x%10 === 6) {\n        continue;\n      }\n      if (x%10 === 0 &&\
    \ x%10 === 1 && x%10 === 5) {\n        continue;\n      }\n      if (x%10 ===\
    \ 2 && x%10 === 3 && x%10 === 4) {\n        continue;\n      }\n      if (x%10\
    \ === 2 && x%10 === 5 && x%10 === 7) {\n        continue;\n      }\n      if (x%10\
    \ === 2 && x%10 === 6 && x%10 === 9) {\n        continue;\n      }\n      if (x%10\
    \ === 3 && x%10 === 4 && x%10 === 7) {\n        continue;\n      }\n      if (x%10\
    \ === 3 && x%10 === 5 && x%10 === 8) {\n        continue;\n      }\n      if (x%10\
    \ === 3 && x%10 === 6 && x%10 === 9) {\n        continue;\n      }\n      if (x%10\
    \ === 4 && x%10 === 6 && x%10 === 9) {\n        continue;\n      }\n      if (x%10\
    \ === 4 && x%10 === 7 && x%10 === 10) {\n        continue;\n      }\n      if\
    \ (x%10 === 5 && x%10 === 8 && x%10 === 10) {\n        continue;\n      }\n  \
    \    if (x%10 === 5 && x%10 === 9 && x%10 === 10) {\n        continue;\n     \
    \ }\n      if (x%10 === 6 && x%10 === 9 && x%10 === 10) {\n        continue;\n\
    \      }\n      if (x%10 === 6 && x%10 === 10 && x%10 === 11) {\n        continue;\n\
    \      }\n      if (x%10 === 7 && x%10 === 11 && x%10 === 12) {\n        continue;\n\
    \      }\n      if (x%10 === 8 && x%10 === 12 && x%10 === 13) {\n        continue;\n\
    \      }\n      if (x%10 === 8 && x%10 === 13 && x%10 === 14) {\n        continue;\n\
    \      }\n      if (x%10 === 8 && x%10 === 14 && x%10 === 15) {\n        continue;\n\
    \      }\n      if (x%10 === 9 && x%10 === 15 && x%10 === 16) {\n        continue;\n\
    \      }\n      if (x%10 === 9 && x%10 === 16 && x%10 === 17) {\n        continue;\n\
    \      }\n      if (x%", "\tlet filtered = [];\n\tfor (let num of nums) {\n\t\t\
    if (num > 10 && num % 2 === 1 && num % 10 !== 1) {\n\t\t\tfiltered.push(num);\n\
    \t\t}\n\t}\n\treturn filtered.length;\n}\n", "  let count = 0;\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2\
    \ === 0) {\n        if (nums[i - 1] % 2 === 0 && nums[i + 1] % 2 !== 0) {\n  \
    \        count++;\n        }\n      } else if (nums[i + 1] % 2 === 0) {\n    \
    \    count++;\n      }\n    }\n  }\n  return count;\n}\n", "  let sum = 0;\n \
    \ for (var i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2\
    \ === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}\n", "  let result\
    \ = nums.length;\n  for (let index = 0; index < nums.length; index++) {\n    const\
    \ num = nums[index];\n    if (num > 10 && num % 2 === 0 && num > 9 && num % 10\
    \ === 1) {\n      result++;\n    }\n  }\n  return result;\n}\n", "  const count\
    \ = (nums => {\n    const numsLength = (nums: number[]) => {\n      return nums.length;\n\
    \    };\n    return (numbers: number[]) => {\n      const numbersLength = numbers.length;\n\
    \      let counter = 0;\n      for (let i = 0; i < numbersLength; i++) {\n   \
    \     if (numbers[i] < 10) {\n          counter++;\n        } else if (numbers[i]\
    \ > 10) {\n          counter--;\n        }\n      }\n      return counter;\n \
    \   })(nums);\n  })(nums);\n  return count;\n}\n", "  var count = 0;\n  for (var\
    \ i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10 && nums[i] % 2 === 1 &&\
    \ nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n}\n", " \
    \   const numsLen = nums.length;\n    let ans = 0;\n    let i = 0;\n    while(i\
    \ < numsLen) {\n        if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i-1] % 2 ==\
    \ 1 && nums[i+1] % 2 == 1) {\n            ans = ans + 1;\n        }\n        i\
    \ = i + 1;\n    }\n    return ans;\n}\n</code>\n<|/ a tags=arrays,javascript |>\n\
    <| a |>\nIf you're allowed to use ES6, you can use the Array.includes method (MDN\
    \ link).\nFor example:\n<code>", "    let result = 0;\n    for (const num of nums)\
    \ {\n        result += (num > 10 && num % 2 === 1) && num % 10 === 1;\n    }\n\
    \    return result;\n}", "  return nums.filter(x => x > 10 && x % 2 === 1 && x\
    \ % 10 === 1);\n}\n", "    let numsLength = nums.length;\n    for (let i = 0;\
    \ i < numsLength; i++) {\n        if (nums[i] < 10) {\n            if (nums[i]\
    \ % 2 === 1) {\n                return numsLength;\n            }\n        } else\
    \ if (nums[i] > 10) {\n            if (nums[i - 1] % 2 === 1 && nums[i + 1] %\
    \ 2 === 1) {\n                return numsLength;\n            }\n        }\n \
    \   }\n    return numsLength;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,javascript,function\
    \ |>\n<code>", "    const odd = (nums[0] % 2) === 1;\n    const firstOdd = nums[0]\
    \ > 0 && nums[0] % 2 === 1;\n    const lastOdd = nums[nums.length - 1] < 0 &&\
    \ nums[nums.length - 1] % 2 === 1;\n    let count = 0;\n    nums.forEach(num =>\
    \ {\n        const num2 = num.toString();\n        const isEven = isEvenNumber(num);\n\
    \        if (num.length > 1 && num[num.length - 1] % 2 === 1) {\n            count\
    \ += odd;\n        }\n        if (num2.length > 1 && num2[num2.length - 1] % 2\
    \ === 1) {\n            count += odd;\n        }\n        if (isEven) {\n    \
    \        if (firstOdd && lastOdd) {\n                count += odd;\n         \
    \   }\n        } else if (firstOdd && !lastOdd) {\n            count += odd;\n\
    \        } else if (lastOdd && !firstOdd) {\n            count += odd;\n     \
    \   }\n    });\n    return count;\n}\n", "  let length = 0;\n  for (let num of\
    \ nums) {\n    if (num > 10) {\n      length++;\n      if (num % 2 != 0) {\n \
    \       if (num % 2 != 0 && num % 3 != 0) {\n          length++;\n        }\n\
    \        if (num % 2 != 0 && num % 3 == 0) {\n          length++;\n        }\n\
    \      }\n      if (num % 2 == 0 && num % 3 == 0) {\n        length++;\n     \
    \ }\n    }\n  }\n  return length;\n}\n", "  let max = 0;\n  for(let num of nums)\
    \ {\n    if(num > 10) {\n      if(num > 10 + num % 10) {\n        max += 1;\n\
    \      }\n    }\n  }\n  return max;\n}\n", "    let filteredNumbers = 0;\n   \
    \ for (let num of nums) {\n        if (num > 10 && num % 2 === 1 && num % 10 ===\
    \ 1 && num % 3 === 0) {\n            filteredNumbers++;\n        }\n    }\n  \
    \  return filteredNumbers;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting |>\n\
    <| a dscore=1 |>\nThis is an interesting interview question. Not sure whether\
    \ it can be solved with just a single scan, however, the following approach should\
    \ do the trick.\n<code>\npublic static function specialFilter(arr: number[]):\
    \ number {\n  if (arr.length === 0) return 0;\n\n  var result = 0;\n\n  for (var\
    \ i = arr.length - 1; i >= 0; i--) {\n    var currentNum = arr[i];\n\n    if (currentNum\
    \ > 10) {\n      result += currentNum % 2;\n      if (currentNum % 10 === 1 &&\
    \ currentNum % 3 === 0) {\n        result += currentNum % 3;\n      }\n    }\n\
    \  }\n\n  return result;\n}\n\nconsole.log(specialFilter([14, -15])); // 1\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109])); // 2\n</code>\nHope this helps!\n<|/ a tags=arrays,algorithm,sorting\
    \ |>\n<| a tags=arrays,algorithm,sorting |>\nYou can do this in O(n) using dynamic\
    \ programming.\n<code>\npublic static function specialFilter(arr) {\n    var result\
    \ = 0, i = arr.length;\n    while (i--) {\n        result = result * 10 + arr[i]\
    \ % 2;\n        if (arr[i] % 10 === 1 && arr[i] % 3 === 0) {\n            result\
    \ += arr[i] % 3;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't take account of the fact that all numbers are odd,\
    \ which makes the problem harder.\n<|/ c |>\n<| a |>\nYou can solve this problem\
    \ in O(N) with recursive solution too.\n<code>\npublic static int specialFilter(List<Integer>\
    \ input) {\n    if (input == null || input.isEmpty())\n        return 0;\n\n \
    \   int result = 0, current = 0;\n    List<Integer> temp = new ArrayList<Integer>();\n\
    \    temp.clear();\n\n    for (Integer i : input) {\n        current += i;\n \
    \       if (current > 10 && current % 2 != 0 && i % 2 != 0) {\n            temp.clear();\n\
    \            int tempCurrent = current;\n            int tempI = i;\n        \
    \    while (tempCurrent > 10) {\n                tempCurrent /= 10;\n        \
    \        tempI *= 10;\n                temp.add(tempCurrent);\n              \
    \  temp.add(tempI);\n            }\n\n            for (Integer i : temp) {\n \
    \               if (i % 10 == 1 && i % 3 == 0) {\n                    result +=\
    \ i;\n                    break;", "  const len = nums.length;\n  if (len ===\
    \ 0) { return 0; }\n  \n  // Scan all elements, store count of elements that satisfy\
    \ criteria\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    // if first\
    \ and last digits are odd (mod 2)\n    if (nums[i] % 2 === 1 && nums[i] % 10 ===\
    \ 1) { count++; }\n  }\n\n  // If all elements satisfy criteria, return count\n\
    \  if (count === len) { return count; }\n  \n  // If count is greater than 1 that\
    \ means the elements are all greater \n  // than 10 and the first and last digit\
    \ are odd, so return the count - 1\n  // as the count of elements that satisfy\
    \ the criteria is equal to the length \n  // of the input array.\n  if (count\
    \ > 1) { return len - 1; }\n  \n  // If count is 0 and all elements are less than\
    \ 10, so return 0.\n  return 0;\n}\n", "  var firstDig = nums[0];\n  var lastDig\
    \ = nums[nums.length - 1];\n  var firstOdd = firstDig & 1;\n  var lastOdd = lastDig\
    \ & 1;\n\n  return nums.length - firstOdd - lastOdd;\n}\n", "  let ans = 0;\n\
    \  for (let i = nums.length - 1; i >= 0; i--) {\n    if (nums[i] > 10) {\n   \
    \   if (nums[i] % 2 === 1) {\n        ans += 1;\n      }\n    } else {\n     \
    \ ans += 1;\n    }\n  }\n  return ans;\n}\n", "    let evenCount = 0;\n    let\
    \ oddCount = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i]\
    \ % 2 === 0) {\n            evenCount++;\n        }\n        else {\n        \
    \    oddCount++;\n        }\n    }\n    let filterCount = oddCount + evenCount;\n\
    \    if (filterCount === 1) {\n        return 0;\n    }\n    return filterCount;\n\
    }\n</code>\n<|/ a dscore=0 tags=javascript,arrays,function |>\n<| c |>\nIt would\
    \ be great if you could add an explanation to your code.\n<|/ c |>\n<| a tags=javascript,arrays,function\
    \ dscore=0 |>\n<code>\nlet arr = [10, 100, 120, 320, 43, 53, 73, 73, 94, 94, 102,\
    \ 102, 100, -100, 100, -20, 10, -20, 10, -20, 10];\nlet arr2 = [];\nlet arr3 =\
    \ [];\nlet arr4 = [];\narr.forEach((element, index) => {\n  if (element % 2 ===\
    \ 0) {\n    arr2.push(element)\n  } else {\n    arr3.push(element)\n  }\n})\n\n\
    arr3.forEach((element, index) => {\n  if (element % 2 === 0) {\n    arr4.push(element)\n\
    \  }\n})\n\nlet count1 = arr2.length\nlet count2 = arr4.length\nconsole.log(count1)\n\
    console.log(count2)</code>\n<|/ a |>\n<| a dscore=0 |>\nThere are multiple ways\
    \ to do this but I think the easiest would be to use the reduce function.\n<code>",
  "  let evenNums = nums.filter(num => num % 2 === 0);\n  let firstNums = nums.filter(num\
    \ => num % 2 === 1);\n  let lastNums = nums.filter(num => num % 2 === 1);\n  let\
    \ countEven = evenNums.filter(num => num > 10).length;\n  let countFirst = firstNums.filter(num\
    \ => num > 10).length;\n  let countLast = lastNums.filter(num => num > 10).length;\n\
    \  return countEven + countFirst + countLast;\n}\n", "  let count = 0;\n  for\
    \ (let num of nums) {\n    if (num > 10 && num % 2 === 1 && num % 10 === 1) {\n\
    \      count++;\n    }\n  }\n  return count;\n}\n", "  let odd = 0, even = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const x = nums[i];\n    if (x\
    \ > 10) {\n      if (x % 2 === 1) {\n        odd++;\n      } else {\n        even++;\n\
    \      }\n    }\n  }\n  return odd > even ? odd : even;\n}\n", "  let result =\
    \ 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i]\
    \ % 2 === 0 && nums[0] % 2 === 0 && nums[nums.length - 1] % 2 === 0) {\n     \
    \ result += 1;\n    }\n  }\n  return result;\n}\n", "    // TODO: Implement me\n\
    }\n", "  return nums.reduce((res, cur) => {\n    let digit = cur.toString().split('')\n\
    \    return (\n      (digit[0] === '1' ? 1 : 0) +\n      (digit[digit.length -\
    \ 1] === '1' ? 1 : 0) +\n      (digit[0] % 2 === 1 && digit[digit.length - 1]\
    \ % 2 === 1 ? 1 : 0) +\n      (digit[0] % 2 === 0 && (digit[digit.length - 1]\
    \ % 2 === 0 ? 1 : 0)\n    )\n  }, 0)\n}\n", "  let odds = 0;\n  let evens = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n   \
    \   evens++;\n    } else {\n      odds++;\n    }\n  }\n  return odds + evens;\n\
    }\n", "  var count = 1;\n  for (var i = 0; i < nums.length; i++) {\n    if (nums[i]\
    \ > 10) {\n      count += nums[i] % 2 === 1 ? 1 : 0;\n    }\n  }\n  return count;\n\
    }\n", "  let count = 1;\n  for (let i = 0; i < nums.length; i++) {\n    const\
    \ num = nums[i];\n    if (num > 10 && num % 2 != 0 && (num % 10 == 0 || num %\
    \ 10 == 1)) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    let count\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] >= 10\
    \ && nums[i] % 2 === 1) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n</cell>\n<text>\nStep 6: Write a function that takes an array of\
    \ numbers and returns the number of elements in the array that are greater than\
    \ 10 and are also between 10 and 20.\n\n</text>\n<cell>", "    // Your code here!\n\
    \    return 0;\n}", "    let sum = 0;\n    nums.forEach((n) => {\n        if (n\
    \ % 2 === 1) {\n            if (n % 10 === 1 || (n % 10 === 9 && n % 100 === 10))\
    \ sum += n;\n        } else {\n            if (n % 10 === 1 || n % 10 === 9 ||\
    \ n % 100 === 10) {\n                if (n % 10 === 1) sum += n;\n           \
    \ }\n        }\n    });\n    return sum;\n}\n", "  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] >= 10 && nums[i+1] % 2 === 1 && nums[i-1] % 2 === 1)\
    \ {\n      return i;\n    }\n  }\n}\n", "  let count = 0;\n  nums.forEach((n:\
    \ number) => {\n    if (n > 10 && n % 2 === 1 && n % 10 !== 1) {\n      count++;\n\
    \    }\n  });\n  return count;\n}\n", "\tlet count = 0;\n\tlet sum = 0;\n\tfor\
    \ (let i = 0; i < nums.length; i++) {\n\t\tsum += nums[i];\n\t\tif (sum >= 10)\
    \ {\n\t\t\tif (isOdd(sum) && isOdd(nums[i])) {\n\t\t\t\tcount += 1;\n\t\t\t}\n\
    \t\t\tsum = 0;\n\t\t}\n\t}\n\treturn count;\n}\n", "    let result = 0;\n    for\
    \ (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n        if\
    \ (num > 10) {\n            result += num > 10 && num % 2 === 1;\n        } else\
    \ {\n            result += num > 10;\n        }\n    }\n    return result;\n}\n",
  "  if (nums.length === 0) {\n    return 0;\n  }\n  if (nums.length === 1) {\n  \
    \  return nums[0];\n  }\n  let firstDigit = Math.floor(nums[0] / 10);\n  if (firstDigit\
    \ % 2 === 0) {\n    firstDigit++;\n  }\n  if (firstDigit === 0) {\n    return\
    \ nums.length;\n  }\n  let lastDigit = Math.floor(nums[nums.length - 1] / 10);\n\
    \  if (lastDigit % 2 === 0) {\n    lastDigit++;\n  }\n  if (nums[0] % 10 === 0\
    \ && nums[nums.length - 1] % 10 === 0) {\n    return nums.length;\n  }\n  let\
    \ count = 0;\n  for (let i = 1; i < nums.length; i++) {\n    const digit = Math.floor(nums[i]\
    \ / 10);\n    if (digit % 2 === 1) {\n      count++;\n      if (firstDigit ===\
    \ i) {\n        firstDigit++;\n      }\n      if (lastDigit === i) {\n       \
    \ lastDigit++;\n      }\n    }\n    if (digit % 2 === 0) {\n      count++;\n \
    \   }\n  }\n  return count;\n}\n", "  let lastElement = nums.pop()\n  while (nums.length\
    \ > 0) {\n    if (nums[0] > 10 && nums[nums.length-1] % 2 === 1) {\n      nums.pop()\n\
    \    } else {\n      lastElement = nums.pop()\n    }\n  }\n  return lastElement\n\
    }\n", "    const n = nums.length;\n    let count = 0;\n\n    while (n > 0) {\n\
    \        const temp = nums[n - 1];\n        if (temp % 10 !== 0 || (temp % 100\
    \ === 0 && temp % 10 % 1 === 1)) {\n            count++;\n        }\n        nums[n\
    \ - 1] = 0;\n        n--;\n    }\n\n    return count;\n}\n", "  let sum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    sum\
    \ += num;\n    if (num > 10 && num % 2 === 1 && num % 10 === 1 && num % 5 ===\
    \ 0) {\n      sum += 1;\n    }\n  }\n  return sum;\n}\n", "    let evenCount =\
    \ 0;\n    let firstOddCount = 0;\n    let lastOddCount = 0;\n    for (let n =\
    \ 0; n < nums.length; n++) {\n        let num = nums[n];\n        if (num > 10)\
    \ {\n            evenCount += isOdd(num);\n        }\n        if (num > 0) {\n\
    \            if (num % 2 === 0) {\n                firstOddCount += isOdd(num);\n\
    \            }\n        } else {\n            if (num % 2 === 1) {\n         \
    \       lastOddCount += isOdd(num);\n            }\n        }\n    }\n    return\
    \ evenCount === nums.length - 1 ? firstOddCount - lastOddCount : evenCount;\n\
    }\n", "    return nums.filter(item => item > 10 && item % 2 === 1).length;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n\
    \    if (num > 10) {\n      if (num % 2 === 1) {\n        sum += num;\n      }\n\
    \    } else if (num % 2 === 0) {\n      sum += num;\n    }\n  }\n  return sum;\n\
    }\n", "    const evens: number[] = [];\n    let lastEvenIndex = 0;\n\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n    \
    \        evens.push(nums[i]);\n            lastEvenIndex = i;\n        } else\
    \ {\n            evens[lastEvenIndex] = nums[i];\n        }\n    }\n\n    return\
    \ evens.length + evens[evens.length - 1];\n}\n", "  let evenCount = 0;\n  let\
    \ oddCount = 0;\n  let firstOddCount = 0;\n  let lastOddCount = 0;\n  for (let\
    \ i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      evenCount++;\n\
    \      if (nums[i] % 2 == 0) {\n        firstOddCount++;\n      }\n      if (nums[i]\
    \ === 9) {\n        lastOddCount++;\n      }\n    } else {\n      oddCount++;\n\
    \    }\n  }\n  return evenCount * (oddCount - firstOddCount + lastOddCount);\n\
    }\n", "  let evens: number[] = [], odds: number[] = [];\n  for (let n of nums)\
    \ {\n    if (n % 2 === 0) evens.push(n);\n    else odds.push(n);\n  }\n  return\
    \ evens.length + odds.length;\n}\n", "  nums.sort((a, b) => a - b);\n  let firstOddIndex\
    \ = nums.findIndex(x => isOdd(x));\n  let lastOddIndex = nums.findLastIndex(x\
    \ => isOdd(x));\n  let firstOddValue = nums[firstOddIndex];\n  let lastOddValue\
    \ = nums[lastOddIndex];\n  return nums.filter(x => x > 10 && isOdd(x) && isOdd(firstOddValue)\
    \ && isOdd(lastOddValue));\n}\n", "  let count = 0;\n  for (const num of nums)\
    \ {\n    if (num >= 10 && num % 2 === 0) {\n      if (num % 10 % 2 === 1) {\n\
    \        count++;\n      }\n    } else {\n      count--;\n    }\n  }\n  return\
    \ count;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhy would you prefer `forEach`\
    \ over `reduce`? I guess it can be used for looping over an array but it is an\
    \ obfuscated way to write the same thing with `reduce`.\n<|/ c |>\n<| c |>\nYes\
    \ that does make more sense because reduce is more flexible.\n<|/ c |>\n<| a |>\n\
    Here is another way using reduce:\n\n<code>\nconst arr = ['4', '5', '11', '13',\
    \ '15', '21', '31', '41', '59', '61', '71', '81'];\n\nconst result = arr.reduce((accumulator,\
    \ current) => {\n  const [first, second] = current.split('');\n  if (first ===\
    \ '1' && second === '1') accumulator++;\n  return accumulator;\n}, 0);\n\nconsole.log(result);</code>\n\
    <|/ a dscore=1 tags=javascript,arrays,function |>\n<| a |>\nYou can solve it using\
    \ Array.prototype.reduce:\n\n<code>", "    let even = 0\n    let odd = 0\n   \
    \ for (let i = 0; i < nums.length; i++) {\n        if (nums[i] % 2 === 0) {\n\
    \            even++\n        } else {\n            odd++\n        }\n    }\n \
    \   if (even === odd && even > 0 && odd > 0) {\n        return even\n    }\n \
    \   return odd\n}\n", "    nums.sort((a,b)=>a-b)\n    const len = nums.length\n\
    \    let cnt = 0\n    nums.forEach((num)=>{\n        if(num > 10 && num % 2 !==\
    \ 0 && num % 2 !== 1 && num % 2 !== 3 && num % 2 !== 5){\n            cnt = cnt\
    \ + 1\n        }\n    })\n    return cnt\n}\n", "    let count = 0;\n    for (let\
    \ i = 0; i < nums.length; i += 1) {\n        if (nums[i] >= 10) {\n          \
    \  if (nums[i] % 2 === 0) {\n                if (nums[i + 1] % 2 === 0) {\n  \
    \                  count += 1;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n", "  let counter = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 == 0) {\n        if (nums[i\
    \ - 1] % 2 == 1 && nums[i + 1] % 2 == 1) {\n          counter++;\n        }\n\
    \      }\n    }\n  }\n  return counter;\n}\n", "  let count = 0;\n  for (let i\
    \ = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i]\
    \ % 3 === 0) {\n      count++;\n    }\n  }\n  return count;\n}\n", "    const\
    \ length = nums.length;\n    for (let i = 0; i < length; i++) {\n        if (nums[i]\
    \ >= 10 && nums[i] % 2 === 1 && nums[i] % 100 % 2 === 1 && nums[i] % 100 % 100\
    \ % 2 === 1) {\n            return i;\n        }\n    }\n    return nums.length;\n\
    }\n", "  let total = 0;\n  let odd = false;\n  let even = false;\n  let first\
    \ = 0;\n  let last = 0;\n\n  for (let i = 0; i < nums.length; i++) {\n    let\
    \ num = nums[i];\n    total += num;\n\n    if (num > 10 && !odd && !even) {\n\
    \      odd = true;\n      last = num;\n    }\n    else if (num > 10 && odd) {\n\
    \      odd = false;\n      first = num;\n    }\n    else if (num > 10 && even)\
    \ {\n      even = false;\n    }\n  }\n\n  if (odd && even) {\n    return total;\n\
    \  }\n  else if (odd) {\n    return first + 1;\n  }\n  else if (even) {\n    return\
    \ last + 1;\n  }\n  else {\n    return 0;\n  }\n}\n", "  const odd = (nums[0]\
    \ % 2 === 1) &&\n    (nums[0] % 4 === 0);\n  const firstOddAndLastOdd = nums.some((num)\
    \ => num % 2 === 1 && num % 4 === 0);\n  return odd && firstOddAndLastOdd ? nums.length\
    \ : 0;\n}\n", "  let filterCount: number = 0;\n  for (const n of nums) {\n   \
    \ if (\n      (n > 10 && n % 2 !== 0) ||\n      (n < -10 && n % 2 === 0)\n   \
    \ ) {\n      filterCount += 1;\n    }\n  }\n  return filterCount;\n}\n\nconsole.log(specialFilter([15,\
    \ -73, 14, -15]));\n\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));",
  "    let i = 0;\n    let sum = 0;\n    const max = nums.length - 1;\n    while (i\
    \ <= max) {\n        if (nums[i] > 10 && nums[i - 1] % 2 === 1 && nums[i + 1]\
    \ % 2 === 1) sum += 1;\n        i++;\n    }\n    return sum;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 tags=javascript,filter |>\n<code>", "    var count\
    \ = 0;\n    for (var i of nums) {\n        var isOdd = isOdd(i);\n        if (isOdd\
    \ && isOddEven(i)) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i]\
    \ % 2 === 0 && nums[i] % 10 === 1) {\n      return nums.length + 1;\n    }\n \
    \ }\n  return nums.length;\n}\n", "    let filteredNums = [];\n    let count =\
    \ 0;\n    nums.forEach((num) => {\n        if (num > 10 && num % 2 === 1 && num\
    \ % 10 === 1 && num % 10 !== 9) {\n            filteredNums.push(num);\n     \
    \       count++;\n        }\n    });\n    return count;\n}\n", "  var sum = 0;\n\
    \  for (var i = 0; i < nums.length; i++) {\n    var num = nums[i];\n    if (num\
    \ >= 10 && num % 2 != 0 && num % 2 != 1) {\n      sum += num;\n    }\n  }\n  return\
    \ sum;\n}\n", "    return nums.filter(function (num) {\n        return num > 10\
    \ && num % 2 === 1 && num % 10 !== 1;\n    }).length;\n}\n", "    let filteredNumbersCount\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        const num = nums[i];\n\
    \        if (num > 10 && num % 2 === 1 && num % 10 !== 1) {\n            filteredNumbersCount++;\n\
    \        }\n    }\n    return filteredNumbersCount;\n}\n", "  \n  const result\
    \ = nums.filter(element => element > 10 && element.mod % 2 === 1);\n  return result.length;\n\
    }\n", "  if (nums.every(n => n < 10)) {\n    // If all the numbers passed in are\
    \ less than 10, return 0\n    return 0;\n  } else if (nums.every(n => n < 100))\
    \ {\n    // If all the numbers passed in are less than 100, return 1\n    return\
    \ 1;\n  } else {\n    // If all the numbers passed in are less than 1000, return\
    \ 2\n    return 2;\n  }\n}\n", "  let counter = 0;\n  for(let n of nums) {\n \
    \   counter += n >= 10;\n    counter = counter && n % 2 === 1;\n  }\n  return\
    \ counter;\n}\n", "  let newArr = [];\n  nums.forEach((num) => {\n    if (num\
    \ > 10) {\n      newArr.push(num);\n    }\n  });\n  let numsOdd = [];\n  nums.forEach((num)\
    \ => {\n    if (num % 2 !== 0) {\n      numsOdd.push(num);\n    }\n  });\n  if\
    \ (numsOdd.length === 1 && numsOdd.length === nums.length) {\n    return nums.length\
    \ + 1;\n  } else {\n    return nums.length - 1;\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
