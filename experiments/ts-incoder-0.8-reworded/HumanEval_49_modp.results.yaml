language: ts
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let q: number = p % n\n    if (q < 0) {\n        q += n\n    }\n    return\
    \ q\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpiew1n79l.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiew1n79l.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let result = n & p;\n  result = (result < 0) ? result + p : result;\n \
    \ return ((result > p) ? result - p : result);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5gcoyxk6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5gcoyxk6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    if (n < 0 || n >= p)\n        return 0;\n    return ((n % p) + p) % p;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpcdblt3n7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcdblt3n7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let d = 1;\n  let s = p % 64;\n  let e = (p / 64) % 64;\n  let t1 = (64\
    \ * e) % p;\n  let t2 = t % p;\n  if (t2 < p) d = t2;\n  if (s > t1) d = s;\n\
    \  if (e > t1) d = e;\n  return d;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpofrhfxer.ts(17,12): error TS2304: Cannot find name
    ''t''.

    '
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  var x = 1;\n  for (var i = 0; i < p; i++) {\n    x <<= 1;\n    x ^= n &\
    \ 1;\n  }\n\n  return x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n63\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwah7368x.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwah7368x.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 63,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let t = n * p;\n  return t >= p ? (t % p + p) % p : t;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpc_g5j7yw.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc_g5j7yw.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = 1;\n  while (n > p) res *= (n - p);\n  return p === n ? 0 : res;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp1xw6do_1.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1xw6do_1.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n <= 0) {\n    return 0;\n  }\n\n  return ((n % p) + p) % p;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsjwyh7x3.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsjwyh7x3.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let mod = (n % p + p) % p;\n  if (mod === 0) {\n    return p\n  }\n  if\
    \ (mod === p / 2) {\n    return p\n  }\n  return mod\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpd44hs3vr.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd44hs3vr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = p % 4\n  if (n < 3) {\n    return n\n  }\n  return n % 4 == 0 ? n :\
    \ n % 4 + 1\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyxuqfmp_.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyxuqfmp_.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < 0) {\n    throw errorModByZero();\n  }\n  if (p <= 0) {\n    throw\
    \ errorNotPositive();\n  }\n  if (p === 1) {\n    throw errorNotPositive();\n\
    \  }\n  if (p === Infinity) {\n    return 1;\n  }\n  if (n === 0 || n === 1) {\n\
    \    return n;\n  }\n  var abs = Math.abs(n);\n  if (abs < p) {\n    return n;\n\
    \  }\n  var p = Math.sqrt(p);\n  if (n % p === 0) {\n    return p;\n  }\n  if\
    \ (n === p) {\n    return 1;\n  }\n  if (n > p) {\n    throw errorNotPositive();\n\
    \  }\n  if (n === (p << 1) + 1) {\n    return (p + 1) >> 1;\n  }\n  if (n ===\
    \ (p << 1) + 2) {\n    return (p >> 1) + 1;\n  }\n  throw errorNotAPrime();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjt0xea9g.ts(14,11): error TS2304: Cannot find name
    ''errorModByZero''.

    ../../../../../tmp/tmpjt0xea9g.ts(17,11): error TS2304: Cannot find name ''errorNotPositive''.

    ../../../../../tmp/tmpjt0xea9g.ts(20,11): error TS2304: Cannot find name ''errorNotPositive''.

    ../../../../../tmp/tmpjt0xea9g.ts(40,11): error TS2304: Cannot find name ''errorNotPositive''.

    ../../../../../tmp/tmpjt0xea9g.ts(48,9): error TS2304: Cannot find name ''errorNotAPrime''.

    '
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let mod: number;\n  if (n % 2 == 0) {\n    if (n % p === 0) {\n      mod\
    \ = 1;\n    } else {\n      mod = p - 1; // Use p-1\n    }\n  } else if (n % p\
    \ !== 0) {\n    mod = (p - 1) * (Math.pow(n % p, 1 / p)); // Use p-1 times n-p\
    \ to reduce the number. Since n % p == 0 is true.\n    // This is important because\
    \ we only reduce the number when p is...\n    // zero. So, if we used a number\
    \ like, say, 20 and then reduced it\n    // to 10, then 20 % 10 must be 0 and\
    \ thus 1.\n    // If we used a number like 100, then 10% 10 === 0.\n    // So,\
    \ using 10 % 1 would give 1. Using 10 % 0, we get 0.\n    // With other words,\
    \ 10 % a === 10%a.\n  } else {\n    mod = 0;\n  }\n  return mod;\n}\n</code>\n\
    <|/ a dscore=3 tags=javascript,algorithm,c++,c |>\n<| c |>\nthanks for sharing\
    \ this with me. it's good to see you using modulus to do mod instead of doing\
    \ it by hand. it turns out this was the most elegant solution I've seen so far.\
    \ thanks so much! I wish I could give you more upvotes\n<|/ c |>\n<| c |>\nglad\
    \ I could help :-)\n<|/ c |>\n<| c |>\n`mod` can be done with bitwise operators\
    \ instead of modulo. E.g. `(a<<n)|(~(a>>(-n)))`\n<|/ c |>\n<| c |>\nI really appreciate\
    \ the answer, but it really needs more explaining.\n<|/ c |>\n<| c |>\nI updated\
    \ the answer with some comments and a link to the Wikipedia article that explains\
    \ what `mod` means in cryptography.\n<|/ c |>\n<| a dscore=3 tags=javascript,algorithm,c++,c\
    \ |>\nHere's a solution using modular arithmetic.\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp45yl4vx5.ts(33,2): error TS1110: Type expected.

    ../../../../../tmp/tmp45yl4vx5.ts(33,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp45yl4vx5.ts(34,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp45yl4vx5.ts(34,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp45yl4vx5.ts(35,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp45yl4vx5.ts(35,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,30): error TS1005: ''('' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,36): error TS1005: '')'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,158): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,161): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,166): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,169): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,181): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,184): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,190): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,192): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,197): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,199): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,205): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,210): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,214): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(36,219): error TS1005: '';'' expected.

    ../../../../../tmp/tmp45yl4vx5.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp45yl4vx5.ts(37,4): error TS1161: Unterminated r'
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n % p;\n  if (n == 0) return 0;\n  if ((n%p) == 0) return (p*p == n)\
    \ ? p : n; // n / p === n  ? (p % p) : n\n  return modp( (n%p), p); // mod(n %\
    \ p, p)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp71z9qzql.js:13\n    n = n % p;\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmp71z9qzql.js:13:5)\n    at modp (/tmp/tmp71z9qzql.js:18:12)\n\
    \    at modp (/tmp/tmp71z9qzql.js:18:12)\n    at modp (/tmp/tmp71z9qzql.js:18:12)\n\
    \    at modp (/tmp/tmp71z9qzql.js:18:12)\n    at modp (/tmp/tmp71z9qzql.js:18:12)\n\
    \    at modp (/tmp/tmp71z9qzql.js:18:12)\n    at modp (/tmp/tmp71z9qzql.js:18:12)\n\
    \    at modp (/tmp/tmp71z9qzql.js:18:12)\n    at modp (/tmp/tmp71z9qzql.js:18:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let q = p - 1\n    return ((n % q) + q) % q\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpi1gzcfpf.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi1gzcfpf.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const result = n;\n  while (p) {\n    if (result & 1) result ^= p;\n  \
    \  result >>>= 1;\n    p >>>= 1;\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3bc4qk9q.ts(15,21): error TS2588: Cannot assign to
    ''result'' because it is a constant.

    ../../../../../tmp/tmp3bc4qk9q.ts(16,5): error TS2588: Cannot assign to ''result''
    because it is a constant.

    '
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) { return 0; }\n  if (n === p / p) { return 1; }\n  if (n !==\
    \ n - 1) { return modp(n - 2, p - 2); }\n  if (n % 2 === 1) { return modp(n /\
    \ 2, p); }\n  return modp(n / 2, p);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp2aojcuvj.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2aojcuvj.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n % p === 0 ? (n / p) | 0 : 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgm9q6_vq.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgm9q6_vq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < 0 || p < 0 || n < p || n % p === 0) return 0;\n  const r = math.pow(p,\
    \ n);\n  if (r === p) return r;\n  if (r < p) r += p;\n  return r;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2juw2aa4.ts(14,13): error TS2552: Cannot find name
    ''math''. Did you mean ''Math''?

    ../../../../../tmp/tmp2juw2aa4.ts(16,14): error TS2588: Cannot assign to ''r''
    because it is a constant.

    '
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let d = n.bit_length();\n  if (d % p != 0) throw new Error(\"Invalid modulus\"\
    );\n  const mask = (1 << d) - 1;\n  return (mask & n) == mask ? n : n % p;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp63q72a7x.ts(13,13): error TS2339: Property ''bit_length''
    does not exist on type ''number''.

    '
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tif (n <= 0) {\n\t\treturn 0;\n\t}\n\n\tn = p * (n - 1);\n\tn %= p;\n\t\
    return n < 0 ? n - p : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppxa0eln8.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppxa0eln8.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return p > 0 ? powMod(n, p) % p : n\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp11fs6pug.ts(13,18): error TS2304: Cannot find name
    ''powMod''.

    '
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n % 2 == 0) {\n    return p;\n  }\n  const a = (p / 2) | 0;\n  const\
    \ b = n - 1;\n  const t = modPow(a, b, p);\n  return t % p;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp05o8q94q.ts(18,13): error TS2552: Cannot find name
    ''modPow''. Did you mean ''modp''?

    '
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let a: number;\n  let b: number;\n  const result: number;\n  if (n < 0\
    \ || p < 0) {\n    throw new Error(`modp(n: ${n}, p: ${p})`);\n  }\n  if (p ===\
    \ 0 || n === p) return 1;\n  if (p === 1) return n;\n  a = n % p;\n  if (a < 0)\
    \ a += p;\n  b = a % n;\n  if (b < 0) b += n;\n  return b === 0 ? n : b;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqqlxiv1j.ts(15,9): error TS1155: ''const'' declarations
    must be initialized.

    '
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const res = powMod(n, p, p);\n  // Avoid precision loss\n  return (p +\
    \ res) % p;\n}\n</code>\nAnd here is a test that confirms the result:\n<code>\n\
    const assert = require('assert');\nconst modp = require('./modp.js');\n\nlet tests\
    \ = [\n  [3, 5],\n  [1101, 101],\n  [0, 101],\n  [3, 11],\n  [100, 101]\n];\n\n\
    for (let [n, p] of tests) {\n  let res = modp(n, p);\n  console.log(`modp(n: ${n},\
    \ p: ${p}): ${res}`);\n  assert(res == modPow(n, p), `Incorrect result for modp(n:\
    \ ${n}, p: ${p})`);\n}\n</code>\nAnd here is a test that confirms its performance\
    \ (my computer cannot run this test in less than 1 second):\n<code>\nconst assert\
    \ = require('assert');\nconst modp = require('./modp.js');\nconst { performance\
    \ } = require('perf_hooks');\n\nlet tests = [\n  [3, 5],\n  [1101, 101],\n  [0,\
    \ 101],\n  [3, 11],\n  [100, 101]\n];\n\nconst start = performance.now();\nfor\
    \ (let [n, p] of tests) {\n  let res = modp(n, p);\n  console.log(`modp(n: ${n},\
    \ p: ${p}): ${res}`);\n  assert(res == modPow(n, p), `Incorrect result for modp(n:\
    \ ${n}, p: ${p})`);\n}\nconst end = performance.now();\nconsole.log(`Time spent\
    \ for modp(): ${end - start}`);\n</code>\nNote that it seems like the performance\
    \ of this algorithm is quite slow, even for very large numbers compared to the\
    \ other algorithms discussed here.\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere\
    \ is a function that finds GCD\n<code>\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpncg8ro4c.ts(17,2): error TS1110: Type expected.

    ../../../../../tmp/tmpncg8ro4c.ts(17,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpncg8ro4c.ts(18,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(18,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(20,1): error TS1109: Expression expected.

    ../../../../../tmp/tmpncg8ro4c.ts(36,2): error TS1110: Type expected.

    ../../../../../tmp/tmpncg8ro4c.ts(36,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpncg8ro4c.ts(37,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,54): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,63): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,70): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,74): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,79): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,92): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.ts(37,97): error TS1005: '','' expected.

    ../../../../../tmp/tmpncg8ro4c.t'
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  // Zero-extend n to start at minimum point and subtract from p \n  // so\
    \ we don't have to worry about n < p.\n  let n = n < p ? p : n;\n  return n %\
    \ p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2qq4hsyv.ts(12,15): error TS2300: Duplicate identifier
    ''n''.

    ../../../../../tmp/tmp2qq4hsyv.ts(15,7): error TS2300: Duplicate identifier ''n''.

    '
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return (p % n) + n\n  }\n  return (n % p) + p\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3mcqsz6m.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3mcqsz6m.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = p % n;\n  if (r < 0) {\n    return (r + n) % n;\n  }\n  return\
    \ r;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp6mffar1t.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6mffar1t.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let i = math.floor(n);\n  return i % p + (i < n && -p == n % p ? n : 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplr70ij_g.ts(13,11): error TS2552: Cannot find name
    ''math''. Did you mean ''Math''?

    '
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  // TODO: Remove undocumented assertions (see the comment in modq).\n  assert(0\
    \ <= n && n <= p && p < 256, \"modulus must be in range of [0, 256]\");\n  const\
    \ mask = (p - 1) % p;\n  const mod = n & mask;\n  const result = (mod * p + mask)\
    \ % p;\n  // Make sure that result won't overflow p.\n  assert(result % p == mod\
    \ || result < p || result == -1, \"result is out of range\");\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5dnmbnhr.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5dnmbnhr.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let acc = 0;\n  let divisor = 1;\n  for (let i = 2; i <= p; i++) {\n  \
    \  acc = (n % i) + acc + (divisor <= i ? 1 : 0);\n    divisor *= i;\n  }\n  return\
    \ acc % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpukp3jjfy.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpukp3jjfy.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return n - p;\n  }\n\n  if (n > p) {\n    return p -\
    \ n;\n  }\n\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpp_0zosd0.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp_0zosd0.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n < 0 ? -p : p == 0 ? 0 : (p * mod1(n)) % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_jvajncb.ts(13,41): error TS2304: Cannot find name
    ''mod1''.

    '
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let retVal: number = 0;\n    for (let i = 0; i < n; i++) {\n        retVal\
    \ += p * 2;\n        ret %= p;\n    }\n    return retVal;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpau62ly0f.ts(16,9): error TS2304: Cannot find name
    ''ret''.

    '
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tconst m = (1 << p) - (1 << n); // mask\n\treturn ((m << 1) | (m >> 1))\
    \ & p; // set n to 0 and mask m\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpbmzyu7zj.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbmzyu7zj.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return p == 0 ? 0 : modpow(10, Math.floor(Math.log(n) / Math.LN10 + Math.log(p)\
    \ / Math.LN10), n)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbhfyueeq.ts(13,23): error TS2552: Cannot find name
    ''modpow''. Did you mean ''modp''?

    '
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n < p ? n : n % p; // less than or equal to p mod p\n}\n</code>\n\
    <|/ a dscore=2 tags=javascript,typescript |>\n<| a tags=javascript,typescript\
    \ dscore=2 |>\nI came up with a solution that makes use of bitwise operations.\
    \ \n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiwttxdhr.ts(15,2): error TS1110: Type expected.

    ../../../../../tmp/tmpiwttxdhr.ts(15,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpiwttxdhr.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpiwttxdhr.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpiwttxdhr.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpiwttxdhr.ts(17,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(17,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(17,43): error TS1109: Expression expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,16): error TS1005: ''('' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,18): error TS1005: '')'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(18,53): error TS1005: '';'' expected.

    ../../../../../tmp/tmpiwttxdhr.ts(19,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpiwttxdhr.ts(20,9): error TS1005: '';'' expected.

    '
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let result = p % n;\n    if (result === 0) {\n        return result;\n\
    \    }\n    if (p > n) {\n        return result - n + 1;\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpl7lj43pk.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl7lj43pk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const q: number = n >= 0 ? n : -n\n  return q % p\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpg54wq53_.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg54wq53_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    const m1 = (p - 1) % p;\n    return (m1 === 0) ? ((p << 1) + 1) : (m1\
    \ * 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmhvmpbk8.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhvmpbk8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var result = 1;\n    var base = Math.pow(10, p);\n    while (true) {\n\
    \        if (n <= 0) {\n            return 0;\n        }\n        if (n % p ===\
    \ 0) {\n            n /= p;\n        }\n        if (n == 0) {\n            return\
    \ result;\n        }\n        result = (result * base) % p;\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015513
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return (n % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp6q9xj0ep.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6q9xj0ep.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n <= 0) {\n    return NaN;\n  }\n\n  if (p <= 0) {\n    return 1;\n\
    \  }\n\n  if (p === 1) {\n    return n;\n  }\n\n  if (p < n) {\n    return modp(n,\
    \ p);\n  }\n\n  return modp(p - 1, p - 1) + 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5kush3m5.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5kush3m5.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p && !(n & 1)) {\n    return n;\n  }\n  return p * modinv(n, p);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy44zjakg.ts(16,14): error TS2304: Cannot find name
    ''modinv''.

    '
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n  % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsvbky2p5.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvbky2p5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015498
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5sy__8dt.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5sy__8dt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn (p < n) ? n : ((p % n) + n) % n;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_v__3kd5.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_v__3kd5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = p & 3\n  res |= (n >> 2) & 3\n  res |= (n >> 4) & 3\n  res |=\
    \ (n >> 6) & 3\n  res |= (n >> 8) & 3\n  res |= (n >> 10) & 3\n  res |= (n >>\
    \ 12) & 3\n  res |= (n >> 14) & 3\n  res |= (n >> 16) & 3\n  return p - (3 <<\
    \ res) | (n << (32 - res))\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjoqe3c_m.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjoqe3c_m.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  // fast cases\n  if (p === 0) return 1;\n  if (p === 1) return 0;\n  if\
    \ (n === 0) return 0;\n  if (n === 1) return 1;\n\n  // some kind of BigNumber\
    \ bug\n  if (n === 0 || n > 20) return NaN;\n\n  // positive cases\n  if (n >\
    \ 0xFFFF) {\n    // note that n < 0x10000 is required for bigNumbers, here n >=0x10000\
    \ is\n    // fine though\n    return Math.pow(n, p) % p;\n  }\n\n  // negative\
    \ cases\n  const mask = -n >> 1; // Math.pow(-x, p) === -(Math.pow(x, p) ^ n)\n\
    \  if (p === 0) return mask;\n  if (p === 1) return n - mask;\n\n  // upper bound\
    \ of second term of (n - 1) times n\n  // note that the bitwise operators above\
    \ silently round this out\n  // to infinity\n  return mask + (n - Math.pow(2,\
    \ n - 1)) & n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpg62qzsh5.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg62qzsh5.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n <= p || n >= (p + 1) - p)\n    return 0;\n  if (n < p)\n    return\
    \ p - n;\n  if (n > p)\n    return n + p;\n  return n;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpfnn86q7r.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfnn86q7r.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var res = 1;\n    while (p <= n) {\n        res *= p;\n        p %= n;\n\
    \    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpglp122to.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpglp122to.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = p & MASK;\n  p >>>= 0;\n  n = n & MASK;\n  n >>>= 0;\n  if ((n\
    \ & 1) == 0)\n    r = 0;\n  else if (n == 0)\n    r = p | 0;\n  else\n    r =\
    \ p ^ n ^ r | 0;\n  return r;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpknfhbbct.ts(13,15): error TS2304: Cannot find name
    ''MASK''.

    ../../../../../tmp/tmpknfhbbct.ts(15,11): error TS2304: Cannot find name ''MASK''.

    '
  timestamp: 1660015500
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) {\n    return 1;\n  }\n  if (p === 0) {\n    return n;\n \
    \ }\n  if (n === p) {\n    return 1;\n  }\n  if (n === p || n % p === 0) {\n \
    \   return n >= 0 ? 1 : -1;\n  }\n  var r = n / p;\n  var ps = p - r * p;\n  var\
    \ qs = r * p + r;\n  if (qs < p) {\n    return -1;\n  }\n  return Math.min(modTo(n,\
    \ ps) + 1, modTo(ps, qs) + (p < qs ? 1 : 0));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4dyb2fk5.ts(31,19): error TS2304: Cannot find name
    ''modTo''.

    ../../../../../tmp/tmp4dyb2fk5.ts(31,37): error TS2304: Cannot find name ''modTo''.

    '
  timestamp: 1660015500
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var q = 1\n    var m = p\n\n    while (n > 1) {\n        if (n % 2 ===\
    \ 0) {\n            n = n / 2\n        }\n\n        q *= p\n        q %= m\n \
    \   }\n\n    return q\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015515
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let result = n % p;\n  if (result === 0) {\n    if (p < n) {\n      result\
    \ = p + (p < 10);\n    }\n  } else {\n    result = p - result;\n  }\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6pwjnfr1.ts(16,16): error TS2365: Operator ''+''
    cannot be applied to types ''number'' and ''boolean''.

    '
  timestamp: 1660015500
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = BigInt(n)\n  const m = BigInt(p)\n  if (p.isSmall) r = r.modp(m)\n\
    \  if (r.isSmall) return BigInt(0)\n  return r.modp(BigInt(m + 1n)).minus(m)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgg06a721.ts(13,11): error TS2304: Cannot find name
    ''BigInt''.

    ../../../../../tmp/tmpgg06a721.ts(14,13): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmpgg06a721.ts(15,9): error TS2339: Property ''isSmall'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpgg06a721.ts(16,25): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmpgg06a721.ts(17,17): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmpgg06a721.ts(17,28): error TS2737: BigInt literals are not
    available when targeting lower than ESNext.

    '
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tif (n < 0 || p < 1)\n\t\tthrow new RangeError('modulus must be a non-negative\
    \ and non-positive integer');\n\n\tif (n === 0)\n\t\treturn 0;\n\n\tif (n ===\
    \ 1)\n\t\treturn 1;\n\n\tif (p == 1)\n\t\treturn n;\n\n\tlet mu = 1;\n\n\tfor\
    \ (let q = p; ; q *= p)\n\t\tif (q >= n)\n\t\t\tbreak;\n\t\telse\n\t\t\tmu = (mu\
    \ * q + 1) & q;\n\n\treturn mu;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8w4rhog2.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8w4rhog2.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    throw new Error('mod: expected number <p> not < n');\n\
    \  }\n  return ((n - 1) % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkk6je5xp.js:14\n        throw new Error('mod: expected number <p>\
    \ not < n');\n        ^\n\nError: mod: expected number <p> not < n\n    at modp\
    \ (/tmp/tmpkk6je5xp.js:14:15)\n    at test (/tmp/tmpkk6je5xp.js:21:22)\n    at\
    \ Object.<anonymous> (/tmp/tmpkk6je5xp.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let i = 0;\n  let result = 0;\n  while (i <= p.length - 1) {\n    if (n\
    \ >= p[i + 1])\n      result = result + 1;\n    i++;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmvp9n6l4.ts(15,17): error TS2339: Property ''length''
    does not exist on type ''number''.

    '
  timestamp: 1660015500
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    if (n < 0) return 0;\n    if (isEven(p)) return 1;\n\
    \    if (n === 0 || isEven(n)) return n;\n    if (isPositive(n) || isNegative(n))\
    \ return n + p;\n  } else {\n    if (n > p) return 0;\n    if (isEven(p)) return\
    \ n;\n    if (n === 0 || isEven(n)) return 0;\n    if (isPositive(n) || isNegative(n))\
    \ return n - p;\n  }\n  return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpezmglvas.ts(15,9): error TS2304: Cannot find name
    ''isEven''.

    ../../../../../tmp/tmpezmglvas.ts(16,20): error TS2304: Cannot find name ''isEven''.

    ../../../../../tmp/tmpezmglvas.ts(17,9): error TS2304: Cannot find name ''isPositive''.

    ../../../../../tmp/tmpezmglvas.ts(17,26): error TS2304: Cannot find name ''isNegative''.

    ../../../../../tmp/tmpezmglvas.ts(20,9): error TS2304: Cannot find name ''isEven''.

    ../../../../../tmp/tmpezmglvas.ts(21,20): error TS2304: Cannot find name ''isEven''.

    ../../../../../tmp/tmpezmglvas.ts(22,9): error TS2304: Cannot find name ''isPositive''.

    ../../../../../tmp/tmpezmglvas.ts(22,26): error TS2304: Cannot find name ''isNegative''.

    '
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const q = Math.floor(Math.log(p) / Math.log(2)) % 2; // calculate q\n \
    \ if (n === 0) return 1; // n = 0\n  if (q === 0) return 0; // q = 0, p = 1, return\
    \ 1\n  if (p === 1) return -1; // p == 1, n = 0\n  if (p === 2) return -2; //\
    \ p == 2, n = 1\n  if (p === 3) return p; // p = 3, n = 1\n  if (p === 4) return\
    \ 4; // p = 4, n = 2\n  if (p === 5) return 8; // p = 5, n = 3\n  if (p === 6)\
    \ return 16; // p = 6, n = 3\n  if (p === 7) return 32; // p = 7, n = 3\n  if\
    \ (p === 8) return 64; // p = 8, n = 3\n  if (p === 9) return 128; // p = 9, n\
    \ = 3\n  if (p === 10) return 256; // p = 10, n = 3\n  if (p === 11) return 512;\
    \ // p = 11, n = 3\n  if (p === 12) return 1024; // p = 12, n = 3\n  if (p ===\
    \ 13) return 2048; // p = 13, n = 3\n  if (p === 14) return 4096; // p = 14, n\
    \ = 3\n  if (p === 15) return 8192; // p = 15, n = 3\n  return -1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp_yr7aoeh.js:53:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_yr7aoeh.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn (n % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphgbjtfbp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphgbjtfbp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return 0;\n  }\n  if (n === p) { // Faster case when\
    \ n==p.\n    return 1;\n  }\n  let q = n;\n  while (p % p === 0) {\n    p /= p;\n\
    \    q %= p;\n  }\n  return q;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpdo6elaah.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdo6elaah.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = p % n;\n  return r === 0 ? n : r;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwc_i5luq.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwc_i5luq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n <= 0) {\n    return 1;\n  }\n  if (n > p) {\n    return n - (p %\
    \ n);\n  }\n  if (n < p) {\n    return p - n;\n  }\n  return p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpnx5e6jqq.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnx5e6jqq.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let m = n;\n    while (p > 1) {\n        if (p & 1) m |= (m & 1) ? 0\
    \ : 1;\n        p >>= 1;\n    }\n    return m;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp7aus23zm.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7aus23zm.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let q = p | 0;\n  while (n-- !== 0) {\n    q = q & p | 0;\n  }\n  return\
    \ q;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp88nhoopt.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp88nhoopt.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p && n >= 0) {\n    return n\n  }\n  return n % p\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0omwjt2b.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0omwjt2b.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp5sy__8dt.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5sy__8dt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let mask = 1;\n  while (mask <= p) mask <<= 1;\n  return (n & mask) ? ((n\
    \ ^ mask) % p) : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp96bzofqw.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp96bzofqw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var a = p.modPow(2, n);\n    if (p.cmpn(0) === 0 && n.cmpn(0) === 0)\
    \ {\n        //GEX polynomial here\n        return 0;\n    }\n    else {\n   \
    \     return a;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu_mnlgbq.ts(13,15): error TS2339: Property ''modPow''
    does not exist on type ''number''.

    ../../../../../tmp/tmpu_mnlgbq.ts(14,11): error TS2339: Property ''cmpn'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpu_mnlgbq.ts(14,30): error TS2339: Property ''cmpn'' does
    not exist on type ''number''.

    '
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = 1;\n  while (n >= p) {\n    r = r * n % p;\n    n -= p;\n  }\n\
    \  return r;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpptrkozuh.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpptrkozuh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn (n % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphgbjtfbp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphgbjtfbp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return n - p;\n  }\n  return n % p;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppj7ymg6j.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppj7ymg6j.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = 0;\n  while (n > p) { res ^= n; n >>>= p; p++ }\n  return res\
    \ & p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0dbc2ja6.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0dbc2ja6.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n<0 ? 0 : n%p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp3rootlkq.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3rootlkq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const res = Math.pow(Math.abs(n), p);\n  if (n < 0) return -res;\n  return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n243\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpk18mqwpk.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk18mqwpk.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 243,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn (n % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphgbjtfbp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphgbjtfbp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const q = p < 2 ? p : p - 2;\n  return (p < 2) ? n : n % p + q;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n6\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp4w5m73y5.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4w5m73y5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 6,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res * (n - p))\
    \ % n;\n  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpd4xzav65.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4xzav65.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const mod = Math.pow(n, p | 0);\n  return mod % p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n87\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmptv6_8nd7.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptv6_8nd7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 87,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n < p ? modm1(n, p) : modm2(n, p);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpml705b1r.ts(13,18): error TS2304: Cannot find name
    ''modm1''.

    ../../../../../tmp/tmpml705b1r.ts(13,32): error TS2304: Cannot find name ''modm2''.

    '
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n | 0;\n  p = p | 0;\n  const q = p / 2 | 0;\n  const r = p % 2 | 0;\n\
    \  const s = n >>> 0;\n  const t = (p - q) >>> 0;\n  let a = ((s << 30) | (s >>>\
    \ 2)) >>> 0;\n  let b = ((t << 30) | (t >>> 2)) >>> 0;\n  a &= b;\n  return (a\
    \ + r) | 0;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1073741823\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpu539popc.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu539popc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1073741823,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return 1;\n  }\n  if (n === p) {\n    return n;\n  }\n\
    \  if (n > p) {\n    return p % n;\n  }\n  return 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpgo5xw02r.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgo5xw02r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) return 0;\n  if (p === 1) return 1;\n  if (p === 0) return\
    \ n;\n  if (p < 0 || n < -p) return NaN;\n  if (p > 1) return NaN;\n\n  // If\
    \ n is integer\n  if (isInt(n)) {\n    // If n is odd, return n + p (make n positive\
    \ if n is odd).\n    if (n % 2 == 0) return n + p;\n    // If n is even, return\
    \ n * p (multiply n by p).\n    if (n % 2 == 1) return n * p;\n    // If n is\
    \ negative (n < 0), return NaN\n    if (n < 0) return NaN;\n    // If n is positive,\
    \ return 1 / n * p (make n negative if n is positive).\n    return 1 / n * p;\n\
    \  }\n\n  // If n is not integer\n  if (isNaN(n)) return NaN;\n  // If n is NaN,\
    \ return NaN\n  if (n === Infinity) return NaN;\n  // If n is negative number,\
    \ return NaN\n  if (n <= 0) return NaN;\n  // If n is positive, return n / p (normalize\
    \ n).\n  return n / p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv5vjj3jd.ts(20,7): error TS2304: Cannot find name
    ''isInt''.

    '
  timestamp: 1660015502
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let n1 = n - 1\n  let n2 = n - 2\n  if (n1 < 0)\n    return 0\n  if (p\
    \ == 1)\n    return n1\n  if (p == 2)\n    return n2\n  if (p == 3)\n    return\
    \ (n1 - n2) % (p + 1)\n  if (p == 6)\n    return n1\n  if (p == 7)\n    return\
    \ n1 + (n2 - n1)\n  if (p == 8)\n    return (n2 - n1) % (p + 1)\n  if (p == 9)\n\
    \    return n1 + n2\n  if (p == 10)\n    return n1 - n2\n  if (p == 11)\n    return\
    \ (n1 - n2) % (p + 1)\n  if (p == 12)\n    return (n1 - n2) % (p + 2)\n  if (p\
    \ == 13)\n    return (n1 - n2) % (p + 1)\n  if (p == 14)\n    return (n1 - n2)\
    \ % (p + 2)\n  if (p == 15)\n    return n1 + (n2 - n1)\n  if (p == 16)\n    return\
    \ (n2 - n1) % (p + 1)\n  if (p == 17)\n    return (n1 - n2) % (p + 2)\n  if (p\
    \ == 18)\n    return (n1 - n2) % (p + 3)\n  if (p == 19)\n    return n1 - n2\n\
    \  if (p == 20)\n    return n1 - n2 % p\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpoagv7eon.js:57:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoagv7eon.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return n - p;\n  }\n  if (n > p) {\n    return p;\n \
    \ }\n  if (n === 0 || n === p) {\n    return n;\n  }\n  return n - Math.pow(2,\
    \ n - p);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpu2rf9ygt.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu2rf9ygt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tconst res = n % p;\n\treturn res === 0 ? 0 : ((p - res) + 1) | 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpf2ffifcl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpf2ffifcl.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = 1;\n  for (let i = 0; i < p; i++) {\n    res = (res % n) | 0;\n\
    \  }\n  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpfqnpgmru.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfqnpgmru.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let res = 1;\n  for (let i = 1; i < n; i = i * 2) {\n    if (p % i == 0)\
    \ {\n      res = Math.pow(i * 2, p);\n    }\n  }\n  return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n32\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpqfwg27rp.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqfwg27rp.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 32,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015503
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n | 0\n  p = p | 0\n  let a = 0, b = 1, result = 0\n  let nlo = n &\
    \ 0xffff\n  let nhi = (n >>> 16) & 0xffff\n  let pl = p & 0xffff\n  let ph = (p\
    \ >>> 16) & 0xffff\n\n  // Compare division algorithm with Wang Dong Xu's paper:\
    \ count leading zero bits [31-28] of (n).\n  if (nll < nhi) {\n    // Divide n\
    \ by 2^n.\n    a = pl\n    b = nhi\n  } else if (nll > nhi) {\n    // Divide n\
    \ by 2^(n-1).\n    a = nhi\n    b = pl\n  } else {\n    // Divide n by 2^n.\n\
    \    a = pl\n    b = nll\n  }\n  // Do a final subtraction to ensure that result\
    \ is >= p.\n  result = a - (((a / b) | 0) * b) | 0\n\n  // Check to see if result\
    \ is less than modulus.\n  return result - p\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphkguftoi.ts(22,7): error TS2304: Cannot find name
    ''nll''.

    ../../../../../tmp/tmphkguftoi.ts(26,14): error TS2304: Cannot find name ''nll''.

    ../../../../../tmp/tmphkguftoi.ts(33,9): error TS2304: Cannot find name ''nll''.

    '
  timestamp: 1660015503
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let q = n / p;\n  if (n < p) {\n    return q * p;\n  } else if (n < p /\
    \ 2) {\n    return q * (p - p + 1);\n  } else {\n    return q * (p - p + 2);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n21.801980198019802\n\
    \nshould loosely deep-equal\n\n2\n    at test (/tmp/tmpe5ozk7v7.js:28:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpe5ozk7v7.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 21.801980198019802,\n\
    \  expected: 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015504
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < 0 || p <= 0) {\n    throw new Error('modp(): arguments must be\
    \ > 0 and <= 1');\n  }\n  if (n === 0 || p === 0) {\n    return 0;\n  }\n  if\
    \ (isFinite(p)) {\n    // Equal to (n xor p)\n    let t = n;\n    while (t &&\
    \ t % p === 0) {\n      t /= p;\n    }\n    return t;\n  }\n  if (n > 1) {\n \
    \   // Equal to (n % p)\n    if (p === 1) {\n      return n;\n    }\n    const\
    \ a = modp(n - 1, p),\n      b = modp(n, p);\n    return a === b ? a : b;\n  }\n\
    \  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp1r3pbz2t.js:41:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1r3pbz2t.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015504
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return n;\n \
    \ }\n  if (p % 2 === 0) {\n    return n >= p;\n  }\n  if (p % 2 !== 0) {\n   \
    \ return n % p === 0;\n  }\n  if (n === p) {\n    return n;\n  }\n  return n >=\
    \ p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppm408xij.ts(20,5): error TS2322: Type ''boolean''
    is not assignable to type ''number''.

    ../../../../../tmp/tmppm408xij.ts(23,5): error TS2322: Type ''boolean'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmppm408xij.ts(28,3): error TS2322: Type ''boolean'' is not
    assignable to type ''number''.

    '
  timestamp: 1660015504
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (p === 0) {\n    return 1;\n  }\n  n %= p;\n  if (n < p) {\n    return\
    \ modp(n - p, p);\n  }\n  return n;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp0hb3avjy.js:13\n    if (p === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at modp (/tmp/tmp0hb3avjy.js:13:5)\n    at modp\
    \ (/tmp/tmp0hb3avjy.js:18:16)\n    at modp (/tmp/tmp0hb3avjy.js:18:16)\n    at\
    \ modp (/tmp/tmp0hb3avjy.js:18:16)\n    at modp (/tmp/tmp0hb3avjy.js:18:16)\n\
    \    at modp (/tmp/tmp0hb3avjy.js:18:16)\n    at modp (/tmp/tmp0hb3avjy.js:18:16)\n\
    \    at modp (/tmp/tmp0hb3avjy.js:18:16)\n    at modp (/tmp/tmp0hb3avjy.js:18:16)\n\
    \    at modp (/tmp/tmp0hb3avjy.js:18:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015504
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p && n > -1) {\n    // this is faster than Math.pow\n    let q\
    \ = p - 1\n    while (n > q) q--\n    return n % q\n  }\n  return 0\n}\n\nexport\
    \ function nextpow2(v: number): number {\n  let x = 1\n  while (v & 1) x = x <<\
    \ 1\n  v >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n  return x\n}\n\nexport\
    \ function nextpow10(v: number): number {\n  let x = 1\n  while (v & 1) x = x\
    \ << 1\n  v >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n\
    \  while (x & 1) x = x << 1\n  return x\n}\n\nexport function nextpow12(v: number):\
    \ number {\n  let x = 1\n  while (v & 1) x = x << 1\n  v >>= 1\n  while (x & 1)\
    \ x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n  while (x & 1) x = x << 1\n  x\
    \ >>= 1\n  x >>= 1\n  x >>= 1\n  while (x & 1) x = x << 1\n  return x\n}\n\nexport\
    \ function nextpow16(v: number): number {\n  let x = 1\n  while (v & 1) x = x\
    \ << 1\n  v >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n\
    \  while (x & 1) x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n  while\
    \ (x & 1) x = x << 1\n  return x\n}\n\nexport function nextpow24(v: number): number\
    \ {\n  let x = 1\n  while (v & 1) x = x << 1\n  v >>= 1\n  while (x & 1) x = x\
    \ << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n\
    \  x >>= 1\n  x >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>=\
    \ 1\n  x >>= 1\n  while (x & 1) x = x << 1\n  x >>= 1\n  x >>= 1\n  x >>= 1\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8yec3zof.ts(112,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015504
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n < 0 ? -p % p : n % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpr6qfeti2.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr6qfeti2.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let t: number;\n  if (n < p) {\n    t = n;\n    n = p;\n    p = t;\n  }\n\
    \  while (p % n === 0 || n !== Math.floor(n / n)) {\n    n /= n;\n  }\n  return\
    \ n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015520
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n < p ? n : n % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpwau9d0cp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwau9d0cp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpahwnhs52.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpahwnhs52.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const r = p % n;\n  return r === 0 ? 1 : r;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpwah14a4n.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwah14a4n.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  var r = p % n;\n  return r === 0 ? n : r;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpn898g1d8.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn898g1d8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tlet result = 1;\n\twhile (p) {\n\t\tif (p & 1) result = result * n & p;\n\
    \t\tn = n >> 1;\n\t\tp--;\n\t}\n\treturn result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpellku9f5.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpellku9f5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) {\n    return 0;\n  }\n\n  let r: number;\n\n  if (p === 0)\
    \ {\n    return 1;\n  }\n\n  if (p < 0) {\n    p = -p;\n    n += 1;\n  }\n\n \
    \ if (n === 1 || (n = 3) !== n / 2) {\n    return n;\n  }\n\n  if (isBigNumber(n))\
    \ {\n    return n.mod(p);\n  }\n\n  if (isBigNumber(p)) {\n    if (p.isUnit())\
    \ {\n      r = new BigNumber(p.s);\n    } else {\n      r = p.mod(n);\n    }\n\
    \  } else {\n    r = new BigNumber(n).mod(p);\n  }\n\n  if (r.isZero()) {\n  \
    \  return 0;\n  }\n\n  let t = new BigNumber(n);\n  let two = new BigNumber(2);\n\
    \  while (!r.isZero()) {\n    r = r.times(two);\n    two = new BigNumber(2).pow(two);\n\
    \  }\n  return t;\n}\n\nexport function fibonacci(n: number): BigNumber {\n  const\
    \ cache: { [key: number]: BigNumber } = {};\n\n  if (n === 0) {\n    return 0;\n\
    \  }\n\n  if (isBigNumber(n)) {\n    if (n > 0) {\n      if (isBigNumber(cache[0]))\
    \ {\n        return cache[0];\n      }\n\n      cache[0] = new BigNumber(n);\n\
    \    }\n\n    return cache[0];\n  }\n\n  if (isBigNumber(n)) {\n    return new\
    \ BigNumber(n).fibonacci();\n  }\n\n  let r = 0;\n  let t = 1;\n  let one = new\
    \ BigNumber(1);\n\n  if (n < 0) {\n    r = (new BigNumber(n)).fibonacci();\n \
    \   if (r.isNegative() || r.isZero()) {\n      throw Error('Expected a positive\
    \ argument.');\n    }\n    n = -r;\n  }\n\n  while (n) {\n    r = ((3 * r + one)\
    \ % n);\n    ++t;\n    one = new BigNumber(1);\n  }\n\n  return r;\n}\n\nexport\
    \ function logBase(base: number, x: number, isSigned: boolean = false): number\
    \ {\n  if (isBigNumber(base)) {\n    if (base.isNegative()) {\n      if (isBigNumber(x))\
    \ {\n        x.isNegative(true);\n      }\n\n      return new BigNumber(x).logBase();\n\
    \    }\n\n    if (base.isZero()) {\n      if (isBigNumber(x)) {\n        x.isZero(true);\n\
    \      }\n\n      return 0;\n    }\n\n    if (x.isNegative()) {\n      if (isBigNumber(base))\
    \ {\n        base.isNegative(true);\n      }\n\n      if (isBigNumber(x)) {\n\
    \        x.isNegative(true);\n      }\n\n      if (x.isNegative()) {\n       \
    \ return new BigNumber(0).logBase();\n      }\n\n      return new BigNumber(0).logBase();\n\
    \    }\n\n    if (base.isPositive()) {\n      if (isBigNumber(x)) {\n        x.\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3vr_d689.ts(139,11): error TS1003: Identifier expected.

    ../../../../../tmp/tmp3vr_d689.ts(155,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015505
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    const q: number = p;\n    const r = n - p;\n    let s = 0;\n    while\
    \ (r !== 0) {\n        const t = r;\n        r = ((t %= q) + p) % q;\n       \
    \ s = t + q;\n    }\n    return s % q;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv6cp69f1.ts(18,9): error TS2588: Cannot assign to
    ''r'' because it is a constant.

    ../../../../../tmp/tmpv6cp69f1.ts(18,15): error TS2588: Cannot assign to ''t''
    because it is a constant.

    '
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpahwnhs52.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpahwnhs52.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const modulus = p % n;\n  return modulus < 0 ? modulus + n : modulus;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpqgy3f7wi.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqgy3f7wi.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n >= p) {\n    return -1;\n  }\n  else {\n    return n % p;\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp1rrex_y1.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1rrex_y1.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let mask = 1;\n  while (mask < p) {\n    mask <<= 1;\n  }\n  return ((n\
    \ & mask) < (p & mask)) ? n : n;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmpd3nb004d.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd3nb004d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return (n % p) + p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpmm0mmiya.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmm0mmiya.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (p == 0) return 1\n  if (p == 1) return n\n  if (n == 0) return 0\n\
    \  if (n == 1) return 1\n  if (p == 2) return 2\n  if (p == 3) return 9\n  if\
    \ (p == 4) return 12\n  if (p == 5) return 20\n  if (p == 6) return 17\n  if (p\
    \ == 7) return 24\n  if (p == 8) return 15\n  if (p == 9) return 21\n  if (p ==\
    \ 10) return 16\n  if (p == 11) return 23\n  if (p == 12) return 29\n  if (p ==\
    \ 13) return 31\n  if (p == 14) return 28\n  if (p == 15) return 35\n  if (p ==\
    \ 16) return 34\n  if (p == 17) return 39\n  if (p == 18) return 40\n  if (p ==\
    \ 19) return 37\n  if (p == 20) return 36\n  if (p == 21) return 43\n  if (p ==\
    \ 22) return 41\n  if (p == 23) return 45\n  if (p == 24) return 39\n  if (p ==\
    \ 25) return 43\n  if (p == 26) return 54\n  if (p == 27) return 56\n  if (p ==\
    \ 28) return 57\n  if (p == 29) return 59\n  if (p == 30) return 61\n  if (p ==\
    \ 31) return 62\n  if (p == 32) return 63\n  if (p == 33) return 66\n  if (p ==\
    \ 34) return 67\n  if (p == 35) return 68\n  if (p == 36) return 71\n  if (p ==\
    \ 37) return 72\n  if (p == 38) return 73\n  if (p == 39) return 75\n  if (p ==\
    \ 40) return 74\n  if (p == 41) return 77\n  if (p == 42) return 78\n  if (p ==\
    \ 43) return 81\n  if (p == 44) return 82\n  if (p == 45) return 83\n  if (p ==\
    \ 46) return 86\n  if (p == 47) return 87\n  if (p == 48) return 90\n  if (p ==\
    \ 49) return 91\n  if (p == 50) return 92\n  if (p == 51) return 93\n  if (p ==\
    \ 52) return 97\n  if (p == 53) return 98\n  if (p == 54) return 100\n  if (p\
    \ == 55) return 101\n  if (p == 56) return 103\n  if (p == 57) return 104\n  if\
    \ (p == 58) return 105\n  if (p == 59) return 106\n  if (p == 60) return 107\n\
    \  if (p == 61) return 109\n  if (p == 62) return 110\n  if (p == 63) return 111\n\
    \  if (p == 64) return 112\n  if (p == 65) return 113\n  if (p == 66) return 114\n\
    \  if (p == 67) return 115\n  if (p == 68) return 116\n  if (p == 69) return 117\n\
    \  if (p == 70) return 118\n  if (p == 71) return 119\n  if (p == 72) return 120\n\
    \  if (p == \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ai08nfq.ts(89,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp6ai08nfq.ts(104,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015505
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tlet d = p - 1;\n\tlet s = p % 3;\n\treturn s * pow(s, d) % p;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcysoblyh.ts(15,13): error TS2304: Cannot find name
    ''pow''.

    '
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2)\
    \ return p;\n    if (p === 1) return n;\n    if (p === 0) return -1;\n    if (isBigInt(p)\
    \ && isBigInt(n)) return n.compareTo(p) === 1;\n    if (isBigInt(p) && isBigInt(n))\
    \ return n.compareTo(p) % p === 0;\n    if (isBigInt(n) && isBigInt(p)) return\
    \ p.compareTo(n) % p === 0;\n    if (isBigInt(n)) return n.isEven();\n    if (isBigInt(p))\
    \ return p.isEven();\n    const isOddPower = isBigInt(n) && isBigInt(p) && n.compareTo(p)\
    \ % 2 === 1;\n    if (isOddPower) {\n        if (isBigInt(n) && isBigInt(p) &&\
    \ isBigInt(p)) {\n            return n.modPow(p.add(BigInt(1)), BigInt(2));\n\
    \        }\n    }\n    return n.isOdd() ? modp(n.subtract(BigInt(1)), p.add(BigInt(1)))\
    \ : -1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9yntk95v.ts(18,9): error TS2304: Cannot find name
    ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(18,24): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(18,37): error TS2322: Type ''boolean'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(18,46): error TS2339: Property ''compareTo''
    does not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(19,9): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(19,24): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(19,37): error TS2322: Type ''boolean'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(19,46): error TS2339: Property ''compareTo''
    does not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(20,9): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(20,24): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(20,37): error TS2322: Type ''boolean'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(20,46): error TS2339: Property ''compareTo''
    does not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(21,9): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(21,31): error TS2339: Property ''isEven'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(22,9): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(22,31): error TS2339: Property ''isEven'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(23,24): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(23,39): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(23,56): error TS2339: Property ''compareTo''
    does not exist on type ''number''.

    ../../../../../tmp/tmp9yntk95v.ts(25,13): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(25,28): error TS2304: Cannot find name ''isBigInt''.

    ../../../../../tmp/tmp9yntk95v.ts(25,43): error TS2304: Ca'
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  // we calculate p by doing modular arithmetic - (((n * p + this.DP) % this.DP)\
    \ - n) % p\n  return (n - n * p % (this.DP - p)) % p; // eslint-disable-line max-depth\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmp8_gw87zq.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8_gw87zq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  var res = 1;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      res *= p;\n\
    \    } else if (n >= (p + 1) * (p - 1)) {\n      res *= (p - 1) * (n - p);\n \
    \   } else {\n      res *= ((p - 1) * (n - p) + 1);\n    }\n    n /= 2;\n  }\n\
    \  return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpd4qmt7b7.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4qmt7b7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let ret: number = 0;\n  for (let i = 0; i < n; i++) {\n    ret += p * i;\n\
    \  }\n  return ret;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n15\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpipfgyrbk.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpipfgyrbk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    throw new Error('modp(): number < p');\n  }\n  return\
    \ n - p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpcw12ds4c.js:14\n        throw new Error('modp(): number < p');\n\
    \        ^\n\nError: modp(): number < p\n    at modp (/tmp/tmpcw12ds4c.js:14:15)\n\
    \    at test (/tmp/tmpcw12ds4c.js:21:22)\n    at Object.<anonymous> (/tmp/tmpcw12ds4c.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return p;\n  }\n  return n % p + (p % p) % p;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpohx9penz.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpohx9penz.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let x = Math.abs(n), r = x % p, t = r < 0 ? r + p : r;\n  if (t < 0) return\
    \ (x % p + p) % p;\n  if (t > p) return x % p;\n  return x;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp19s1hcrm.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp19s1hcrm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const result = Math.pow(Math.abs(n), p);\n  return (result < 0) ? -result\
    \ : result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n243\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpox52uuf_.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpox52uuf_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 243,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = p % n;\n  return r === 0 ? r : r + p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n7\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpypxyfdgp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpypxyfdgp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 7,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    if (n < 8) {\n      return (8 ** n) % p;\n    } else\
    \ {\n      // modulus only has a range of [0,p)\n      return 1;\n    }\n  } else\
    \ {\n    return 0;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpimoydmnu.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpimoydmnu.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const m = (n + p) &\n               ((p - 1) << getSize(p));\n  return\
    \ (m < 1) ? p : m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8_z1h2uo.ts(14,28): error TS2304: Cannot find name
    ''getSize''.

    '
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    return ((n % p) + p) % p;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpyd170kx7.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyd170kx7.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((p + n) % p) | 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmph0trer3h.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph0trer3h.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015508
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return p;\n  }\n\n  const q = n - p;\n  return q & (q\
    \ - 1) ? q : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5aql9ltx.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5aql9ltx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let mod = n % p;\n  return mod == 0 ? 0 : (mod >= p ? n - mod : mod(n -\
    \ p, p));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpu88sjcxu.ts(14,47): error TS2349: This expression\
    \ is not callable.\n  Type 'Number' has no call signatures.\n"
  timestamp: 1660015507
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let modpow = bigInt(1);\n  let r = bigInt(1);\n  for (let i = 1; i <= n;\
    \ i++) r = r.multiply(bigInt(i).pow(p).mod(modpow));\n  return r.mod(modpow).equals(0)\
    \ ? n : n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpahjxwt_u.ts(13,16): error TS2304: Cannot find name
    ''bigInt''.

    ../../../../../tmp/tmpahjxwt_u.ts(14,11): error TS2304: Cannot find name ''bigInt''.

    ../../../../../tmp/tmpahjxwt_u.ts(15,47): error TS2304: Cannot find name ''bigInt''.

    '
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n % p;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpahwnhs52.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpahwnhs52.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015505
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  // TODO: replace with Math.pow(10, n)\n  const m = n.toString().length;\n\
    \  const q = p - m;\n  if (q < 0) return 1;\n  if (q > 1) return 0;\n  if (q ==\
    \ 0) return 1;\n  let r = n%p;\n  if (r == 0) return n%p;\n  if (r < 0) return\
    \ (n + p)%p;\n  return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpq0uj2dtc.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq0uj2dtc.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n - n * Math.floor(p / p);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpyzhyo7gr.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyzhyo7gr.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result *= p;\n \
    \ }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n125\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpoap27z_e.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoap27z_e.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 125,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015507
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n % p ? p + modp(n / p, p) : n;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2320\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpsl3ncj9_.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsl3ncj9_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2320,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015508
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let k = 0, r;\n  r = n;\n  while (r !== 0) {\n    r &= (p - 1); // bitwise\
    \ and\n    r >>= 1; // divide by two\n    k++;\n  }\n  return k - 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp5gzyswzn.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5gzyswzn.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015508
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var r = p % n;\n    return r === 0 ? p : r;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmphu6r_3uy.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphu6r_3uy.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015509
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n | 0;\n  p = p | 0;\n  let res = n;\n  while (p > 0) {\n    if (res\
    \ & 1) res = (res & 1) + p;\n    p >>= 1;\n  }\n  return res | 0;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nNice idea, I never thought about that. Unfortunately\
    \ the result doesn't fit into an int. :(\n<|/ c |>\n<| c |>\nIt fits in a 64bit\
    \ int, but you need to use long instead.\n<|/ c |>\n<| c |>\nI meant this in the\
    \ original question: \" ... the result doesn't fit into an int. :\"\n<|/ c |>\n\
    <| c |>\nYes, sorry. I meant 64bit long and int. I already tried long and it doesn't\
    \ fit in either.\n<|/ c |>\n<| c |>\n`64bit long and int` - this one fits into\
    \ `int`. What problem exactly are you facing?\n<|/ c |>\n<| a dscore=1 |>\nThis\
    \ should do it:\n<code>\nprivate static BigInteger modInto(BigInteger value, BigInteger\
    \ modulus) {\n    BigInteger mod = BigInteger.valueOf(modulus);\n    if (value.compareTo(BigInteger.ZERO)\
    \ < 0) {\n        if (value.compareTo(BigInteger.valueOf(modulus)) < 0) {\n  \
    \          return BigInteger.ZERO;\n        }\n        return value.divide(modulus);\n\
    \    }\n    BigInteger quotient = BigInteger.valueOf(modulus / value);\n    BigInteger\
    \ result = quotient;\n    while (quotient.compareTo(BigInteger.ZERO) < 0) {\n\
    \        quotient = quotient.divide(mod);\n        if (quotient.compareTo(BigInteger.ZERO)\
    \ == 0) {\n            return BigInteger.ZERO;\n        }\n        BigInteger\
    \ remainder = quotient.mod(mod);\n        result = result.add(remainder);\n  \
    \  }\n    return result;\n}\n</code>\n<|/ a tags=biginteger,math,modular-arithmetic\
    \ |>\n<| c |>\nDoesn't work for negative numbers. Should have said \"should do\"\
    \ rather than \"should not\".\n<|/ c |>\n<| c |>\nI modified it for negative numbers.\n\
    <|/ c |>\n<| c |>\nYou still need to deal with negative values when doing `modulus`\
    \ and `dividend` divide. Try putting them in separate `if` statements.\n<|/ c\
    \ |>\n<| c |>\nI modified it for negative numbers.  I didn't have to do that before,\
    \ as negative values were being handled properly in `BigInteger.valueOf()`.\n\
    <|/ c |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc0ui1jci.ts(22,2): error TS1110: Type expected.

    ../../../../../tmp/tmpc0ui1jci.ts(22,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0ui1jci.ts(23,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(23,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0ui1jci.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(24,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,58): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(25,92): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpc0ui1jci.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(26,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpc0ui1jci.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(27,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,16): error TS1351: An identifier or keyword
    cannot immediately follow a numeric literal.

    ../../../../../tmp/tmpc0ui1jci.ts(28,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpc0ui1jci.ts(28,33): err'
  timestamp: 1660015509
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const s = n.toString();\n  p = p.toString();\n\n  const a1 = s.indexOf(\"\
    1\");\n  const a2 = s.indexOf(\"2\");\n  const a3 = s.indexOf(\"3\");\n  const\
    \ a4 = s.indexOf(\"4\");\n  const a5 = s.indexOf(\"5\");\n  const a6 = s.indexOf(\"\
    6\");\n  const a7 = s.indexOf(\"7\");\n  const a8 = s.indexOf(\"8\");\n  const\
    \ a9 = s.indexOf(\"9\");\n  const a10 = s.indexOf(\"10\");\n  const a11 = s.indexOf(\"\
    11\");\n  const a12 = s.indexOf(\"12\");\n  const a13 = s.indexOf(\"13\");\n \
    \ const a14 = s.indexOf(\"14\");\n  const a15 = s.indexOf(\"15\");\n  const a16\
    \ = s.indexOf(\"16\");\n  const a17 = s.indexOf(\"17\");\n  const a18 = s.indexOf(\"\
    18\");\n  const a19 = s.indexOf(\"19\");\n  const a20 = s.indexOf(\"20\");\n \
    \ const a21 = s.indexOf(\"21\");\n  const a22 = s.indexOf(\"22\");\n  const a23\
    \ = s.indexOf(\"23\");\n  const a24 = s.indexOf(\"24\");\n  const a25 = s.indexOf(\"\
    25\");\n  const a26 = s.indexOf(\"26\");\n  const a27 = s.indexOf(\"27\");\n \
    \ const a28 = s.indexOf(\"28\");\n  const a29 = s.indexOf(\"29\");\n  const a30\
    \ = s.indexOf(\"30\");\n  const a31 = s.indexOf(\"31\");\n  const a32 = s.indexOf(\"\
    32\");\n  const a33 = s.indexOf(\"33\");\n  const a34 = s.indexOf(\"34\");\n \
    \ const a35 = s.indexOf(\"35\");\n  const a36 = s.indexOf(\"36\");\n  const a37\
    \ = s.indexOf(\"37\");\n  const a38 = s.indexOf(\"38\");\n  const a39 = s.indexOf(\"\
    39\");\n  const a40 = s.indexOf(\"40\");\n  const a41 = s.indexOf(\"41\");\n \
    \ const a42 = s.indexOf(\"42\");\n  const a43 = s.indexOf(\"43\");\n  const a44\
    \ = s.indexOf(\"44\");\n  const a45 = s.indexOf(\"45\");\n  const a46 = s.indexOf(\"\
    46\");\n  const a47 = s.indexOf(\"47\");\n  const a48 = s.indexOf(\"48\");\n \
    \ const a49 = s.indexOf(\"49\");\n  const a50 = s.indexOf(\"50\");\n  const a51\
    \ = s.indexOf(\"51\");\n  const a52 = s.indexOf(\"52\");\n  const \ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5ho44r9z.ts(69,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp5ho44r9z.ts(84,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015509
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let result = n;\n  while (result % p !== 0 || result === p && result %\
    \ p !== 0) {\n    result = result % p;\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015524
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return (n << p) >>> n;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n12\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpdg65r661.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdg65r661.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 12,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n & -p;\n  let val = 1;\n  for (let i = 1; i <= n; i++) val = (val\
    \ * i) % p;\n  return val;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmph2d08n94.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph2d08n94.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  var mod = n < 0 ? -1 : 1;\n  if (p % 2 === 0) return mod;\n  var p = p\
    \ / 2 | 0;\n  var val = n%p;\n  val = val === p ? 0 : (val-p) % p;\n  val = mod(val,\
    \ p);\n  return val === 0 ? 0 : val;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp_bd572m6.ts(18,9): error TS2349: This expression\
    \ is not callable.\n  Type 'Number' has no call signatures.\n"
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return n<0 ? -1 : (n & -p) == n ? p^0 : p\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpe9rojui6.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpe9rojui6.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) {\n    return 1;\n  }\n  let mod = powMod(n, p);\n  if (mod\
    \ === 0) {\n    return mod;\n  }\n  mod = (mod - 1) & mod; // If `n` was being\
    \ reduced to zero, make sure that\n  // we return `1` to make the result equal\
    \ to `n`.\n\n  if (mod.isZero()) {\n    return 1;\n  }\n  return mod;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuy_p9sjy.ts(16,13): error TS2304: Cannot find name
    ''powMod''.

    '
  timestamp: 1660015509
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    let res = 1;\n    while (n > 0) {\n        if (n % p == 0) {\n      \
    \      res += p;\n            n /= p;\n        } else {\n            res *= p;\n\
    \            n = n / p;\n        }\n    }\n    return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpkjilj1ex.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkjilj1ex.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    return n * (p - 1) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmplhc423df.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplhc423df.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0 || p === 0) return 0;\n  if (n === p || p === 1) return 1;\n\
    \  if (n > p) return modp(n - p, p);\n  if (n < p) return modp(p, n);\n  const\
    \ diff = n - p;\n  return diff === 0 ? diff : modp(p - diff, diff);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpys9r68dz.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpys9r68dz.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0) return 0;\n  if (p == 0) return 1;\n  if (p > n) return p\
    \ + modp(n - p, p);\n  if (p < -p) return modp(-p, p);\n  // p > n in 2 or more\
    \ and p is odd in 3 or more for large n\n  if (p > n / 2 && (p < ((n - 1) | 1)\
    \ | p == 0)) p = n / 2;\n  // Exponential reduction\n  if (p === 1) return 1;\n\
    \  // Optimize for a very small range\n  if (p <= 0.0030) return 0.693132257530503830\
    \ * n;\n  // Extremely rare case\n  if (p <= 0.029375) return p ? 7.185966539844316e-5\
    \ * n : 7.185966539844316e-7 * n;\n  if (p <= 0.033625) return p ? 7.839548298813464e-6\
    \ * n : 7.839548298813464e-9 * n;\n  if (p <= 0.03645) return p ? 7.170726766934866e-7\
    \ * n : 7.170726766934866e-9 * n;\n  if (p <= 0.04095) return p ? 7.893526577323413e-7\
    \ * n : 7.893526577323413e-9 * n;\n  if (p <= 0.04395) return p ? 7.590632734805707e-7\
    \ * n : 7.590632734805707e-9 * n;\n  if (p <= 0.04945) return p ? 7.898029553262939e-7\
    \ * n : 7.898029553262939e-9 * n;\n  if (p <= 0.05455) return p ? 7.33637841732265e-7\
    \ * n : 7.33637841732265e-9 * n;\n  if (p <= 0.05905) return p ? 6.931471805599453e-7\
    \ * n : 6.931471805599453e-9 * n;\n  if (p <= 0.06455) return p ? 6.655747066305838e-7\
    \ * n : 6.655747066305838e-9 * n;\n  if (p <= 0.07095) return p ? 6.25874956391135e-7\
    \ * n : 6.25874956391135e-9 * n;\n  if (p <= 0.07455) return p ? 5.962988636165955e-7\
    \ * n : 5.962988636165955e-9 * n;\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_f49xef1.ts(51,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\tconst q = n / p;\n\tconst r = n % p;\n\tif (r === 0) {\n\t\treturn q;\n\
    \t}\n\tif (p === 1) {\n\t\treturn r;\n\t}\n\tif (p % 2 === 0) {\n\t\treturn p\
    \ + modp(q, p / 2);\n\t}\n\tif (q % 2 === 0) {\n\t\treturn p - modp(q, p / 2);\n\
    \t}\n\treturn 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxzxguj7h.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxzxguj7h.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return modp2(n + p, p)\n  }\n\n  if (n < 1) {\n    return\
    \ n\n  }\n\n  if (n === 0 || n >= p * 1e12) {\n    return 1\n  }\n\n  if (isFinite(n))\
    \ {\n    return ((n % p) + p) % p\n  }\n\n  return NaN\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppha2f0o4.ts(14,12): error TS2552: Cannot find name
    ''modp2''. Did you mean ''modp''?

    '
  timestamp: 1660015510
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let nBits = n.bitLength();\n  let pBits = p.bitLength();\n  if (nBits >\
    \ pBits) {\n    n = modpow2(nBits, p);\n  } else if (nBits < pBits) {\n    p =\
    \ modpow2(pBits, n);\n  }\n  // Make sure p is larger than n.\n  if (pBits > nBits)\
    \ {\n    p = modpow2(pBits, p);\n  }\n\n  // If p was just increased, still make\
    \ sure n isn't at 0.\n  if (p.isEven() && n.isOdd()) {\n    n = n.isEven() ? p.subtract(1)\
    \ : p.add(1);\n  }\n\n  return p.compare(n);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp76fbyzn3.ts(13,17): error TS2339: Property ''bitLength''
    does not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(14,17): error TS2339: Property ''bitLength''
    does not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(16,9): error TS2304: Cannot find name ''modpow2''.

    ../../../../../tmp/tmp76fbyzn3.ts(18,9): error TS2304: Cannot find name ''modpow2''.

    ../../../../../tmp/tmp76fbyzn3.ts(22,9): error TS2304: Cannot find name ''modpow2''.

    ../../../../../tmp/tmp76fbyzn3.ts(26,9): error TS2339: Property ''isEven'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(26,23): error TS2339: Property ''isOdd'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(27,11): error TS2339: Property ''isEven'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(27,24): error TS2339: Property ''subtract''
    does not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(27,40): error TS2339: Property ''add'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp76fbyzn3.ts(30,12): error TS2339: Property ''compare'' does
    not exist on type ''number''.

    '
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return n - p;\n  }\n  return n;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp8ggscse7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ggscse7.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if ((n % p) === 0) return n;\n  const q = n - p;\n  return (p === q) ?\
    \ p : (p % q + q) % q;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpvws0l83v.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvws0l83v.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let q = p / n\n  let r = p % n\n  return q === 0 ? r : q > 0 ? r + n :\
    \ r\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmprsr7fp69.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprsr7fp69.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n === 0 || p === 0) return 0;\n  if (n === p || p === 1) return 1;\n\
    \  if (n === Math.floor(n) && n === Math.floor(p)) return n;\n  if (p === 1) return\
    \ n - 1;\n  if (p === Math.floor(p) && p < 5) return (n / p) | 0;\n  if (p < 1)\
    \ return (p / 100) | 0;\n  return ((n % p) + p) | 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxri8elbn.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxri8elbn.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015510
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmp0jr03d57.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0jr03d57.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015511
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    if (p <= 0) return 0;\n    if (n >= p) return 1;\n    if (n < 0) return\
    \ -1;\n    if (n >= p/2) return 1;\n    if (n < p/2) return -1;\n    while (n\
    \ > 1) {\n        if (n % 2 === 1) n = n / 2;\n        else return n;\n    }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpxz7pqdqv.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxz7pqdqv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let q = n - p;\n  return q < 0 ? q + q : p;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-4\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmphauwcdu0.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphauwcdu0.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -4,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015511
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    if (n <= 0) {\n        return 0;\n    } else if (n >= (p + 1) * (p +\
    \ 1)) {\n        return p - 1;\n    } else {\n        return ((n % p) + p) % p;\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpudljk6ak.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpudljk6ak.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if ((n % p) === 0) {\n    return n;\n  }\n  return modp(n - p, p);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzxbrvaaa.js:13\n    if ((n % p) === 0) {\n    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at modp (/tmp/tmpzxbrvaaa.js:13:5)\n \
    \   at modp (/tmp/tmpzxbrvaaa.js:16:12)\n    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n\
    \    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n\
    \    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n\
    \    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n\
    \    at modp (/tmp/tmpzxbrvaaa.js:16:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const r = p % n;\n  if (r === 0) return n;\n  return (r + n) % n;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuuij738l.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuuij738l.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let result = n;\n  while (result % p === 0) {\n    result = result / p;\n\
    \  }\n  return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmp_y4f9mjm.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_y4f9mjm.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const b = n % p;\n  return b ? b % p : n;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpx92f11w6.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx92f11w6.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: -1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let a = 0,\n    b = 0;\n\n  for (; a < p; a++) {\n    a %= n;\n    b +=\
    \ a;\n  }\n\n  return (b % n) + 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660015527
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  n = n - 1;\n  const res = p % n;\n  if (n < 0) res = n + res;\n  return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8bchs4e_.ts(15,14): error TS2588: Cannot assign to
    ''res'' because it is a constant.

    '
  timestamp: 1660015512
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  const {isPrime} = _utils\n  if (!isPrime(p) || !isPrime(n)) {\n    throw\
    \ new Error('modp: p and n must be prime')\n  }\n  if (p === 1) {\n    return\
    \ n\n  }\n  return modp(n - 1, p) * (p - 1) + 1\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdp84ea9.ts(13,21): error TS2304: Cannot find name
    ''_utils''.

    '
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return (n - 1) & -p;\n  }\n  return ((n - 1) % p) + p;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp2rcnm1p2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2rcnm1p2.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpp525tfin.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp525tfin.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015495
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    if (n === 0) return 0;\n\n    const m = bigInt(p);\n    const a2 = m.times(bigInt(2).times(n));\n\
    \n    if (a2.equals(bigInt(0))) return 1;\n\n    const c = m.minus(a2);\n\n  \
    \  // We know that |c| < |m|, |c| - |m| < |n|, so |c| % |m| is 0.\n    // If |c|\
    \ < |n| we know that |c| + |n| >= |m|, thus the exponent of\n    // |n| is at\
    \ most one greater than the magnitude of |m|.\n    const eMax = bigInt(1).minus(m);\n\
    \n    // The exponent of |c| is at most one greater than the magnitude of |m|.\n\
    \    const eMin = eMax.add(n.minus(m));\n\n    // The exponent of |c| is between\
    \ |eMin| and |eMax|, so |c| % |m| is 0.\n    // If |c| < |eMin| and |c| + |n|\
    \ >= |m|, |c| % |m| is 1.\n    // If |c| > |eMax| we know that |c| + |n| <= |m|,\
    \ thus the exponent of\n    // |n| is at least two greater than the magnitude\
    \ of |m|.\n    if (c.lesser(eMin).and(c.greater(eMax))) {\n        return 1;\n\
    \    }\n\n    // If the exponent of |n| is between 0 and 1, then |c| < |n| and\
    \ |c| +\n    // |n| >= |m|, thus |c| % |m| is 0.\n    // If |n| > 1 or |n| < 0,\
    \ the exponent of |n| is one greater than the\n    // magnitude of |m|.\n    if\
    \ (n.lesser(1).or(n.lesser(-1))) return 1;\n\n    // We have |c| < |n| and |c|\
    \ + |n| >= |m|, thus |c| % |m| is 0.\n    // If |n| > 1, the exponent of |n| is\
    \ two greater than the magnitude of\n    // |m|.\n    if (n.greater(1)) n = n.times(2);\n\
    \n    // The exponent of |n| is between 1 and 2, so |c| % |m| is 1.\n    // If\
    \ |n| is 1, then we know that |c| >= |m|, so we know that |c| %\n    // |\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps6f2_ny0.ts(67,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let rem: number = n % p;\n  let mod = n % 1;\n  if (rem == 0) {\n    return\
    \ mod;\n  }\n  else if ((mod * rem) >= p) {\n    return mod + 1;\n  }\n  else\
    \ {\n    return mod;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpjh947wj8.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjh947wj8.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  let r = n & -p;\n  return r === 0 ? n : ((-r & n) === p ? r : n);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1101\n\nshould\
    \ loosely deep-equal\n\n2\n    at test (/tmp/tmpqhezx8d3.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqhezx8d3.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1101,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var res = p;\n    while (res < n) {\n        res = (res * p) % n;\n \
    \   }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpsvvmwosc.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsvvmwosc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    var k = Math.pow(p - 1, n);\n    return (p - 1) * (k % p + k / p);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n67.2\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpnh6v8_7l.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnh6v8_7l.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 67.2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn (n % p + p) % p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmphgbjtfbp.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphgbjtfbp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015500
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n\treturn ((p % n) + n) % n;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpogcm8qnx.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpogcm8qnx.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015512
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (p == 0) return 0;\n  if (p == 1) return 1;\n  if (p == 2) return 2;\n\
    \  if (n % 2 == 0) return p / 2 * modp(n / 2, p);\n  let m = 0;\n  if (n <= 10)\
    \ return modp(n / 10, p);\n  for (let i = 1;; i++) {\n    if (n % i == 0) return\
    \ modp(n / i, p);\n    if (p % i == 0) return modp(n / i, p);\n    if (i >= n)\
    \ return m;\n    if (m % i == 0) return modp(m, p);\n    m = i * i;\n  }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpb714k3ta.js:13\n    if (p == 0)\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at modp (/tmp/tmpb714k3ta.js:13:5)\n    at modp (/tmp/tmpb714k3ta.js:20:24)\n\
    \    at modp (/tmp/tmpb714k3ta.js:20:24)\n    at modp (/tmp/tmpb714k3ta.js:20:24)\n\
    \    at modp (/tmp/tmpb714k3ta.js:20:24)\n    at modp (/tmp/tmpb714k3ta.js:20:24)\n\
    \    at modp (/tmp/tmpb714k3ta.js:20:24)\n    at modp (/tmp/tmpb714k3ta.js:20:24)\n\
    \    at modp (/tmp/tmpb714k3ta.js:20:24)\n    at modp (/tmp/tmpb714k3ta.js:20:24)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015513
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  return ((n % p) + p) % p;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n91\n\nshould loosely\
    \ deep-equal\n\n2\n    at test (/tmp/tmpsu6xtzel.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsu6xtzel.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 91,\n  expected:\
    \ 2,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015497
- exit_code: 2
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n    const {bits} = n;\n    const result = n % p;\n    const carry = result\
    \ < p;\n    if (carry !== 0) return result;\n    if (carry === 0 && result > 0)\
    \ return p;\n    return n - p;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkrn2onvl.ts(13,12): error TS2339: Property ''bits''
    does not exist on type ''Number''.

    ../../../../../tmp/tmpkrn2onvl.ts(16,9): error TS2367: This condition will always
    return ''true'' since the types ''boolean'' and ''0'' have no overlap.

    ../../../../../tmp/tmpkrn2onvl.ts(17,9): error TS2367: This condition will always
    return ''false'' since the types ''boolean'' and ''0'' have no overlap.

    '
  timestamp: 1660015513
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (n < p) {\n    return n - p;\n  } else {\n    return p + 1;\n  }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpx4efn7tk.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx4efn7tk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015513
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if ((p == 0) || (p == 1)) return n;\n  var r = n % p, s = p + (n - r) %\
    \ p; // Fast case: 0 <= r < p, no need to swap.\n  if (r < p) return s;\n  //\
    \ Check whether r and s differ; if so, swap and repeat.\n  while (true) {\n  \
    \  if (r & 1) return r; // If r is even, return s since r and s must be non-equal.\n\
    \    if (s |= r & 1) return s;\n    r /= 2;\n    s /= 2;\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp0l2irvs8.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0l2irvs8.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015513
- exit_code: 1
  program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number\
    \ {\n  if (p == 0) return 0;\n  if (p == 1) return 1;\n  if (p == 2) return 2;\n\
    \  if (n % 2 == 0) return p / 2;\n  if (n % 2 == 1) return p / 2; // The last\
    \ case is where we get the mod from. We use a\n  // different method below to\
    \ get the mod but we keep n % p as is so that\n  // we do not need to use Math.abs()\
    \ (which compares both positive and\n  // negative values).\n  // If the input\
    \ is like -4, then we want a positive. If it is like\n  // 4, then we want a negative.\
    \ We take an absolute value for the\n  // abs() because it is faster to call Math.abs()\
    \ once rather than twice.\n  return p % 2 ? -p : p - Math.abs(p) % 2;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2.5\n\nshould\
    \ loosely deep-equal\n\n3\n    at test (/tmp/tmpht31aous.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpht31aous.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2.5,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660015513
