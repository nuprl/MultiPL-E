name: HumanEval_27_flip_case
language: ts
prompt: "//For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = flip_case;\n  assert.deepEqual(candidate(\"\"),\"\"\
  );\n  assert.deepEqual(candidate(\"Hello!\"),\"hELLO!\");\n  assert.deepEqual(candidate(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\");\n}\n\ntest();"
completions: ["\treturn string.toLowerCase().replace(/[\\s\\u00E0]/g, (char) => char.toUpperCase());\n\
    }\n", "  return string.split('')\n    .map(function (char: string) {\n      return\
    \ char.charCodeAt(0) > 96 ? char.toUpperCase() : char.toLowerCase();\n    })\n\
    \    .join('');\n}\n", "    return string.toLowerCase().split('').reduce((acc,\
    \ char) => acc + char.toUpperCase(), '');\n}\n", "  return string.toLowerCase().replace(/[\\\
    W_]+(\\w*)/g, function (match, group1) {\n    return group1.toUpperCase();\n \
    \ });\n}\n", "\treturn string.toLowerCase().replace(/[a-z]/g, (char: string) =>\
    \ {\n\t\treturn char.toUpperCase();\n\t});\n}\n", "    return string.replace(/([a-z])|([A-Z])/g,\
    \ function (match, u) { return u.toUpperCase(); });\n}\n", "  return string.replace(/[a-z]/g,\
    \ function(x) { return x.toUpperCase(); });\n}\n", "  return string.split('').map(char\
    \ => char ? char.toLowerCase() : char.toUpperCase()).join('');\n}\n", "  return\
    \ string.toLowerCase().split(' ').join('-').toLowerCase();\n}\n", "    return\
    \ string.toLowerCase().replace(/[a-z]/g, character => character.toUpperCase());\n\
    }\n", "\treturn string.toLowerCase().replace(/[a-z]/gi, function (s) {\n\t\treturn\
    \ String.fromCharCode(s.charCodeAt(0) + (s.toLowerCase() === s ? \"a\".charCodeAt(0)\
    \ : A));\n\t});\n}", "\treturn string.split('')\n\t\t.map(x => x.toLowerCase())\n\
    \t\t.join('');\n}\n", "    return string.split('').map(letter => letter.toUpperCase()).join('');\n\
    }\n", "  return string.toLowerCase().split('')\n    .reverse()\n    .join('');\n\
    }\n", "  return string.toLowerCase().replace(/[a-z]/g, c => c.toUpperCase());\n\
    }\n", "  return string.split('').map(function (character) {\n    return character\
    \ === character.toUpperCase() ? character.toLowerCase() : character.toUpperCase();\n\
    \  }).join('');\n}\n", "    return string.split('').map(character => character\
    \ === character.toUpperCase() ? character.toLowerCase() : character.toUpperCase()).join('');\n\
    }\n", "  return string.split(\"\").reduce((string, char) => {\n    return string\
    \ + String.fromCharCode(\n      char === string.charAt(0) ? char.toUpperCase().charCodeAt()\
    \ - 0x20 : char.toLowerCase().charCodeAt() - 0x20,\n    );\n  }, \"\");\n}\n",
  "  return string.split('').map(c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n\
    }\n", "  return string.split('').map(function (character) {\n    if (character\
    \ === character.toUpperCase()) {\n      return character.toLowerCase();\n    }\
    \ else {\n      return character.toUpperCase();\n    }\n  }).join('');\n}\n",
  "    return string.replace(/[a-z]/gi, char => char.toUpperCase());\n}", "    return\
    \ string.toLowerCase().replace(/[^a-zA-Z0-9]/g, c => c.toUpperCase());\n}\n",
  "    const lowerCaseChars = string.split('').map(\n        (char: string) => char.toLowerCase()\n\
    \    );\n    const upperCaseChars = string.split('').map(\n        (char: string)\
    \ => char.toUpperCase()\n    );\n\n    return upperCaseChars.join('') + lowerCaseChars.join('');\n\
    }\n", "    return string.replace(/[a-z]/g, x => x.toUpperCase())\n           \
    \      .replace(/[A-Z]/g, x => x.toLowerCase());\n}\n", "    return string.split('').map(x\
    \ => x === x.toUpperCase() ? x.toLowerCase() : x.toUpperCase()).join('');\n}\n",
  "  return string.toLowerCase()\n    .split('')\n    .map(letter => letter === letter.toUpperCase()\
    \ ? letter.toLowerCase() : letter.toUpperCase())\n    .join('');\n}\n", "    return\
    \ string.replace(/\\w\\S*/g, function(txt){return txt.charAt(0).toUpperCase()\
    \ + txt.substr(1).toLowerCase();});\n}\n", "  return string.charAt(0).toUpperCase()\
    \ + string.slice(1).toLowerCase();\n}\n", "\treturn string.toLowerCase().split('').map(function\
    \ (c: string) {\n\t\treturn c === 'A' ? 'a' : c === 'a' ? 'A' : c;\n\t}).join('');\n\
    }\n", "    return string.toLowerCase().replace(/[A-Z]/g, letter => letter.toUpperCase());\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer, I understand the concept\
    \ of regex, however I am having trouble implementing it into my code. Would you\
    \ mind showing me how I would incorporate this in my current code?\n<|/ c |>\n\
    <| c |>\nI have added the implementation in my answer\n<|/ c |>\n<| c |>\nI appreciate\
    \ you taking the time to help with this, but I believe I have an issue with my\
    \ RegEx because I believe it might not be able to recognize the patterns in my\
    \ file like in the example. Could you please see my edit for my current RegEx?\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI have included my entire code for reference.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nconst str = 'Hello World!'\nconst result =\
    \ str.replace(\n    /([A-Z])|\\s+([a-z])/g,\n    match => match[1] || match[2],\n\
    )\n\nconsole.log(result) // HELLO WORLD!\n</code>\n<|/ a tags=javascript,regex\
    \ |>\n<| c |>\nThanks for your answer, I understand the concept of regex, however\
    \ I am having trouble implementing it into my code. Would you mind showing me\
    \ how I would incorporate this in my current code?\n<|/ c |>\n<| c |>\nYou just\
    \ want to swap case with space? Do you want to change string from Hello World!\
    \ to HELLO WORLD! or change string from Hello World! to HELLO WORLD?\n<|/ c |>\n\
    <| c |>\nI believe I have an issue with my RegEx because I believe it might not\
    \ be able to recognize the patterns in my file like in the example. Could you\
    \ please see my edit for my current RegEx? Thanks again!\n<|/ c |>\n<| a tags=javascript,regex\
    \ dscore=1 |>\nYou could capture a capital letter at any position and replace\
    \ it with an upper case letter or with a whitespace.\n\n<code>\nvar string = 'Hello\
    \ World!'\n\nconsole.log(string.replace(/(\\p{Lu})|(\\s)/g, \"$1$2\"))</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer, I understand the concept of regex,\
    \ however I am having trouble implementing it into my code. Would you mind showing\
    \ me how I would incorporate this in my current code?\n<|/ c |>\n<| c |>\n", " \
    \ return string.split('').map(char => char.toLowerCase()).join('');\n}\n", " \
    \ const uppercase: string = string.toUpperCase();\n  const lowercase: string =\
    \ string.toLowerCase();\n\n  return lowercase.replace(/[a-z]/g, uppercase);\n\
    }\n", "    string += \"\";\n    return string.split(\"\").map(c => c === c.toLowerCase()\
    \ ? c.toUpperCase() : c.toLowerCase()).join(\"\");\n}\n", "    return string.split('')\n\
    \        .map(function (c) { return c === c.toUpperCase() ? c.toLowerCase() :\
    \ c.toUpperCase(); })\n        .join('');\n}\n", "    const result = string.toLowerCase();\n\
    \    return result.split('')\n        .map(c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase())\n        .join('');\n}\n</code>\nThe same way you can do\
    \ for all string in array.\n<code>", "  const characters = string.split(\"\");\n\
    \  const lowerCases = characters.map(c => c.toLowerCase());\n  const upperCases\
    \ = characters.map(c => c.toUpperCase());\n  return upperCases.join(\"\") + lowerCases.join(\"\
    \");\n}\n", "  return string.split(\"\").map(character => character === character.toUpperCase()\n\
    \    ? character.toLowerCase()\n    : character.toUpperCase()).join(\"\");\n}\n",
  "  return string.split('').map(letter => letter.toLowerCase() === letter ? letter.toUpperCase()\
    \ : letter).join('');\n}\n", "    return string.replace(/[a-z]/g, function (x)\
    \ {\n        return x === x.toUpperCase() ? x.toLowerCase() : x.toUpperCase();\n\
    \    });\n}\n", "\treturn string.replace(\n\t\t/[a-z]/g,\n\t\t(character: string):\
    \ string => character.toUpperCase()\n\t);\n}\n", "    return string.toLowerCase().replace(/[a-z]/g,\
    \ x => x.toUpperCase());\n}\n", "\treturn string.toLowerCase().replace(/[a-z]/g,\
    \ char => char.toUpperCase());\n}\n", "  if (string.length > 0) {\n    return\
    \ string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n  } else {\n\
    \    return \"\";\n  }\n}\n", "    return string.toLowerCase().replace(/[A-Z]/g,\
    \ letter => letter.toUpperCase());\n}\n", "  return string.split('').reduce((out,\
    \ char) => {\n    return out + char.toUpperCase();\n  });\n}\n", "    return string.replace(/[a-z]/gi,\
    \ (letter: string) => letter.toUpperCase()\n        .replace(/[A-Z]/g, (letter:\
    \ string) => letter.toLowerCase()));\n}\n", "    let result = \"\";\n    for (let\
    \ i = 0; i < string.length; i++) {\n        result += string.charAt(i).toLowerCase();\n\
    \        result += string.charAt(i).toUpperCase();\n    }\n    return result;\n\
    }\n", "  return string.toLowerCase().replace(/\\b[a-z]/g, c => c.toUpperCase());\n\
    }\n", "  return string.toLowerCase().replace(/[a-z]/g, (match) => match.toUpperCase());\n\
    }", "    return string\n        .replace(/([a-z])([A-Z])/g, function(_, letter,\
    \ upper) {\n            return letter.toUpperCase() + upper.toLowerCase();\n \
    \       })\n        .replace(/([A-Z])([A-Z][a-z])/g, function(_, upper, letter)\
    \ {\n            return letter.toUpperCase() + upper.toLowerCase();\n        });\n\
    }\n", "  const lower = string.toLowerCase();\n  const upper = string.toUpperCase();\n\
    \  return lower + upper.substring(lower.length);\n}", "  return string.split('').reduce((result,\
    \ char, index) => {\n    return index === 0 ? char.toUpperCase() : char.toLowerCase();\n\
    \  });\n}\n", "  return string.split('').reduce((result, char) => char.toUpperCase()\
    \ === char ? char.toLowerCase() : char.toUpperCase(), \"\");\n}\n", "    return\
    \ string.toLowerCase().split('')\n            .map(letter => letter.toUpperCase())\n\
    \            .join('');\n}\n", "  return string.replace(/([a-z])([A-Z])/g, \"\
    $1-$2\").toLowerCase()\n}\n", "    return string.replace(/[a-z]/g, x => x.toUpperCase())\n\
    \        .replace(/x/g, x => x.toLowerCase());\n}\n", "    return string.split('').map(letter\
    \ => letter.toUpperCase() === letter ? letter.toLowerCase() : letter).join('');\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThanks. It's good but i want more dynamic solution\
    \ for all kinds of case. if \"Hello\" then output \"HELLO\" not \"hello\". I think\
    \ it can be handle with case insensitive string.\n<|/ c |>\n<| c |>\nThanks for\
    \ your help, it's very helpful\n<|/ c |>\n<| a tags=javascript,reactjs dscore=3\
    \ |>\nYou can use the String.prototype.replace() method. This method can take\
    \ regex as an argument. Here is a simple example:\n\n<code>\nconst greeting =\
    \ 'Hello world!';\n\nconst result = greeting.replace(/([a-z])([A-Z])/g, '$1-$2');\n\
    \nconsole.log(result);</code>\n<|/ a |>\n<| c |>\nThanks that's very helpful\n\
    <|/ c |>\n<| a |>\n<code>", "\treturn string\n\t\t.toLowerCase()\n\t\t.replace(/[a-z]/g,\
    \ (char) => char.toUpperCase())\n\t\t.replace(/[A-Z]/g, (char) => char.toLowerCase());\n\
    }\n", "    return string.replace(/[a-z]/g, function (m) { return m.toUpperCase();\
    \ })\n        .replace(/[A-Z]/g, function (m) { return m.toLowerCase(); });\n\
    }\n", "    return string.split('').map(c => c.toLowerCase()).map(c => c.toUpperCase()).join('');\n\
    }\n", "    return string.toLowerCase().replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[-\\\
    s]+/g, '-').toLowerCase();\n}\n", "    return string.split(' ').map(\n       \
    \ (word: string) => word.toLowerCase() === word ? word.toUpperCase() : word\n\
    \    ).join(' ');\n}\n</code>\n<|/ a |>\n<| c |>\nHow would you do the same if\
    \ the input is an array of objects instead of a string?\n<|/ c |>\n<| a |>\n<code>\n\
    var input = \"My Input String\";\nvar result = input.toUpperCase().split(' ').join('-').toLowerCase();\n\
    </code>\n<|/ a dscore=5 tags=javascript |>\n<| c |>\nWhat about punctuation characters?\n\
    <|/ c |>\n<| c |>\nThis does not work for German Umlauts (\xE4, \xF6, \xFC, \xDF\
    )\n<|/ c |>\n<| a dscore=4 |>\nIn case you want to use functional programming\
    \ in JS:\n<code>\nconst flipCase = (s) => s.replace(/\\w\\S*/g, m => m[0].toUpperCase()\
    \ + m.slice(1));\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript dscore=4\
    \ |>\nThe simplest answer is probably to use regex:\n<code>", "  return string.split('').map(char\
    \ => char.toLowerCase() === char ? char.toUpperCase() : char).join('');\n}\n",
  "    return string.replace(/[a-z]/g, (match) => match.toUpperCase());\n}", "  return\
    \ string.split(' ').map(function (part) {\n    return part[0].toUpperCase() +\
    \ part.slice(1);\n  }).join(' ');\n}\n", "  return string.replace(/[a-z]/g, function(c)\
    \ {\n    return c.toUpperCase();\n  }).replace(/[A-Z]/g, function(c) {\n    return\
    \ c.toLowerCase();\n  });\n}\n", "  let new_string = \"\";\n  for (let i = 0;\
    \ i < string.length; i++) {\n    if (string[i] === string[i].toUpperCase()) {\n\
    \      new_string += string[i].toLowerCase();\n    } else {\n      new_string\
    \ += string[i].toUpperCase();\n    }\n  }\n  return new_string;\n}\n", "  const\
    \ reversed_string = string\n    .split('')\n    .reverse()\n    .join('');\n \
    \ const lowercase: string = reversed_string.charAt(0).toLowerCase() +\n    reversed_string.slice(1);\n\
    \  const uppercase: string = reversed_string.charAt(0).toUpperCase() + reversed_string.slice(1);\n\
    \  return lowercase + uppercase;\n}", "    return string.replace(/[a-z]/gi, x\
    \ => String.fromCharCode(x.charCodeAt(0) - 32))\n                 .replace(/[A-Z]/gi,\
    \ x => String.fromCharCode(x.charCodeAt(0) + 32))\n}\n", "  return string.toLowerCase().split('')\n\
    \               .map((char) => char === char.toUpperCase() ? char.toLowerCase()\
    \ : string.charAt(0))\n               .join('');\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| a tags=string,javascript |>\nYou could also use toUpperCase() and toLowerCase()\
    \ on the string as in Kevin's answer.\nBut if you need a locale-sensitive capitalization\
    \ as mentioned in the question's tags and title, then the following code works\
    \ better:\n<code>\nvar upperCase = string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n\
    </code>\nThis code only capitalizes the first character and lowercases the rest\
    \ of the string.\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nYou can just use uppercase\
    \ and lowercase methods on the string.\n<code>\nvar str = str.toUpperCase();\n\
    </code>\n<|/ a tags=string,javascript |>\n<| c |>\nThis will convert only first\
    \ character\n<|/ c |>\n<| a tags=string,javascript |>\n<code>\nvar str = \"Hello\"\
    ;\nvar upperCase = str.toUpperCase();\nvar lowerCase = str.toLowerCase();\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\nI use this function:\n<code>", "    return\
    \ string.replace(/[a-z]/g, function (c: string) {\n        return c === c.toUpperCase()\
    \ ? c.toLowerCase() : c.toUpperCase();\n    });\n}\n", "  return string.toLowerCase().replace(/[a-z]/g,\
    \ (c) => c.toUpperCase());\n}\n", "    return string.toLowerCase().toUpperCase();\n\
    }\n", "    return string.replace(/[a-z]/g, c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase());\n}\n", "    return string.split(/[A-Z]/).map(function (c)\
    \ {\n        return c.toUpperCase();\n    }).join(\"\");\n}\n", "    return string.split('').map((x)\
    \ => {\n        return x === x.toUpperCase() ? x.toLowerCase() : x.toUpperCase();\n\
    \    }).join('');\n}\n", "    if (string.length == 0) return \"\";\n    const\
    \ s = string.split(\"\");\n    for (let i = 0; i < s.length; i++) {\n        let\
    \ c = s[i].toLowerCase();\n        s[i] = c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase();\n    }\n    return s.join(\"\");\n}\n", "  return string\n\
    \    .replace(/^[a-z]/, (l: string) => l.toUpperCase())\n    .replace(/[^A-Z]/g,\
    \ (a: string) => a.toLowerCase());\n}\n", "\tlet changed = false;\n\tconst new_string:\
    \ string = string.toLowerCase();\n\tfor (let i = 0, len = string.length; i < len;\
    \ i++) {\n\t\tconst letter = string[i];\n\t\tif (letter !== new_string[i]) {\n\
    \t\t\tchanged = true;\n\t\t\tnew_string = new_string[i].toUpperCase() + new_string.substr(0,\
    \ i) + new_string.substr(i + 1);\n\t\t}\n\t}\n\treturn changed ? new_string :\
    \ \"\";\n}\n", "  return string.split('').map(letter => letter === letter.toUpperCase()\
    \ && letter === letter.toLowerCase() ? letter.toUpperCase() : letter.toLowerCase()).join('');\n\
    }\n", "    return string.split('').map(function(letter) {\n        return letter.toUpperCase();\n\
    \    }).join('');\n}\n", "  return string.toLowerCase().replace(/[A-Z]/g, (_match)\
    \ => { return String.fromCharCode(charCode_1.fromCharCode(_match.charCodeAt(0))-32);\
    \ });\n}\n", "  return string.split('').map(c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase()).join('');\n}", "    string = string.toLowerCase();\n    string\
    \ = string.charAt(0).toUpperCase() + string.slice(1);\n    string = string.charAt(0).toLowerCase()\
    \ + string.slice(1);\n    return string;\n}\n", "  if (string === \"\") return\
    \ \"\";\n  var uppercase: string[] = [];\n  var lowercase: string[] = [];\n  var\
    \ index: string[] = [];\n  var char: string[] = [];\n  var i: string = 0;\n  for\
    \ (var x = 0; x < string.length; x++) {\n    char = string[x].toUpperCase();\n\
    \    if (char === \"\") {\n      uppercase.push(char);\n      continue;\n    }\n\
    \    if (char.toLowerCase() === char) {\n      uppercase.push(char);\n    } else\
    \ {\n      lowercase.push(char);\n    }\n  }\n  uppercase.forEach(function (c:\
    \ any) {\n    index.push(i);\n    char.push(c);\n    i++;\n  });\n  lowercase.forEach(function\
    \ (c: any) {\n    index.push(i);\n    char.push(c);\n    i++;\n  });\n  index\
    \ = index.map(function (i: any) {\n    return i + 1;\n  });\n  char.forEach(function\
    \ (c: any) {\n    index.push(i);\n    i++;\n  });\n  index.reverse();\n  char.reverse();\n\
    \  string = char.concat(string.substring(index[0])).concat(char.concat(string.substring(index[1])).concat(char.concat(string.substring(index[2])));\n\
    \  string = new String(string);\n  string = (string).replace(/A/g, \"a\");\n \
    \ string = (string).replace(/a/g, \"A\");\n  string = (string).replace(/B/g, \"\
    b\");\n  string = (string).replace(/b/g, \"B\");\n  string = (string).replace(/C/g,\
    \ \"c\");\n  string = (string).replace(/c/g, \"C\");\n  string = (string).replace(/D/g,\
    \ \"d\");\n  string = (string).replace(/d/g, \"D\");\n  string = (string).replace(/E/g,\
    \ \"e\");\n  string = (string).replace(/e/g, \"E\");\n  string = (string).replace(/F/g,\
    \ \"f\");\n  string = (string).replace(/f/g, \"F\");\n  string = (string).replace(/G/g,\
    \ \"g\");\n  string = (string).replace(/g/g, \"G\");\n  string = (string).replace(/H/g,\
    \ \"h\");\n  string = (string).replace(/h/g, \"H\");\n  string = (string).replace(/I/g,\
    \ \"i\");\n  string = (string).replace(/i/g, \"I\");\n  string = (string).replace(/J/g,\
    \ \"j\");\n  string = (string).replace(/j/g, \"J\");\n  string = (string).replace(/K/g,\
    \ \"k\");\n  string = (string).replace(/k/g, \"K\");\n  string = (string).replace(/",
  "    return string.toLowerCase().replace(/[A-Z]/g, c => c === c.toUpperCase() ?\
    \ c.toLowerCase() : c.toUpperCase());\n}\n", "  return string.toLowerCase().split('').reduce((acc,\
    \ char, index) => {\n    return index === 0 ? char.toUpperCase() : acc.toUpperCase()\
    \ + char.toLowerCase();\n  });\n}\n", "    return string\n        .toLowerCase()\n\
    \        .toUpperCase();\n}\n", "    return string.split('').map(c => c === c.toUpperCase()\
    \ ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n", "  return string.split('').map(letter\
    \ => {\n    return letter.toUpperCase();\n  }).join('');\n}\n", "    return string.toLowerCase().replace(/[\\\
    -_]/g, function(char) {\n        return char.toUpperCase();\n    });\n}", "  \
    \  return string.toLowerCase().toUpperCase();\n}\n", "  // lowercase to uppercase\n\
    \  return string.split('').map(function (char: string) {\n    return char.toUpperCase();\n\
    \  }).join('');\n}\n", "  return string.split('').map(letter => letter.toUpperCase()).join('');\n\
    }\n", "    return string.toLowerCase().replace(/\\b[a-z]/g, l => l.toUpperCase());\n\
    }", "  return string.split('').map(c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase()).join('');\n}\n", "    return string.replace(/[a-z]/gi, c\
    \ => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n}", "  return\
    \ string.split('')\n      .map(letter => letter === letter.toLowerCase() ? letter.toUpperCase()\
    \ : letter.toLowerCase())\n      .join('');\n}\n", "  return string.toLowerCase().split('').map(x\
    \ => x === x ? '' : x.toUpperCase()).join('');\n}\n", "  return string.replace(/[a-z]/g,\
    \ (m) => m.toUpperCase()).replace(/[A-Z]/g, (m) => m.toLowerCase());\n}", "  return\
    \ string.replace(/[a-z]/g, c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n\
    }\n", "  return string.split('')\n    .map(c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase())\n    .join('');\n}\n", "  const stringArr = string.split('');\n\
    \  stringArr.forEach((char: string) => char !== char ? stringArr[stringArr.indexOf(char)\
    \ + 1].toLowerCase() : stringArr[stringArr.indexOf(char) + 1].toUpperCase());\n\
    \  return stringArr.join('');\n}\n", "    return string.split('')\n        .map(x\
    \ => x === x.toUpperCase() ? x.toLowerCase() : x.toUpperCase())\n        .join('');\n\
    }\n", "    return string.toLowerCase().split('').join(() => string.toUpperCase());\n\
    }\n", "  return string.replace(\n    /[a-z]/g,\n    function (c: string) {\n \
    \     return c.toUpperCase();\n    }\n  );\n}\n", "  return string.split('')\n\
    \    .map(i => i.toLowerCase() === i ? i.toUpperCase() : i.toLowerCase())\n  \
    \  .join('');\n}\n", "  return string.replace(/[a-z]/g, c => c.toUpperCase()).replace(/[A-Z]/g,\
    \ c => c.toLowerCase());\n}\n", "  return string.toLowerCase().replace(/[a-z]/g,\
    \ function (char) {\n    return String.fromCharCode(65 + char.charCodeAt(0));\n\
    \  });\n}\n", "  return string.split('').map(letter => letter === letter ? ''\
    \ : letter.toUpperCase()).join('');\n}\n", "    return string\n        .toLowerCase()\n\
    \        .replace(\n            /[a-z]/g,\n            (char: string) => char.toUpperCase()\n\
    \        )\n        .replace(\n            /[A-Z]/g,\n            (char: string)\
    \ => char.toLowerCase()\n        );\n}\n", "  return string.split('').map((x:\
    \ string) => x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase()).join('');\n\
    }\n", "    if (string.length <= 0) return string;\n    let flipped = string;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === string[i].toUpperCase())\
    \ {\n            flipped = flipped.toUpperCase();\n        } else {\n        \
    \    flipped = flipped.toLowerCase();\n        }\n    }\n    return flipped;\n\
    }\n", "  return string.toLowerCase().replace(/[a-z]/g, char => char.toUpperCase());\n\
    }\n", "  if (string.length === 0) return \"\";\n  let result = \"\";\n  for (let\
    \ i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char.toLowerCase()\
    \ === char.toUpperCase()) {\n      result += char.toUpperCase();\n    } else {\n\
    \      result += char.toLowerCase();\n    }\n  }\n  return result;\n}\n", "  return\
    \ string.split('').reduce((acc, char) => {\n    const upper = char.toUpperCase();\n\
    \    const lower = char.toLowerCase();\n    if (lower !== upper) {\n      return\
    \ `${acc}${upper}`;\n    }\n    return acc;\n  }, '');\n}\n", "\treturn string.toLowerCase().replace(/[a-z]/g,\
    \ char => char.toUpperCase())\n\t\t.replace(/[A-Z]/g, char => char.toLowerCase())\n\
    }\n", "    return string.split('').reduce((result, current) => {\n        switch\
    \ (current) {\n            case 'a':\n            case 'A':\n            case\
    \ 'b':\n            case 'B':\n            case 'c':\n            case 'C':\n\
    \            case 'd':\n            case 'D':\n            case 'e':\n       \
    \     case 'E':\n            case 'f':\n            case 'F':\n            case\
    \ 'g':\n            case 'G':\n            case 'h':\n            case 'H':\n\
    \            case 'i':\n            case 'I':\n            case 'j':\n       \
    \     case 'J':\n            case 'k':\n            case 'K':\n            case\
    \ 'l':\n            case 'L':\n            case 'm':\n            case 'M':\n\
    \            case 'n':\n            case 'N':\n            case 'o':\n       \
    \     case 'O':\n            case 'p':\n            case 'P':\n            case\
    \ 'q':\n            case 'Q':\n            case 'r':\n            case 'R':\n\
    \            case 's':\n            case 'S':\n            case 't':\n       \
    \     case 'T':\n            case 'u':\n            case 'U':\n            case\
    \ 'v':\n            case 'V':\n            case 'w':\n            case 'W':\n\
    \            case 'x':\n            case 'X':\n            case 'y':\n       \
    \     case 'Y':\n            case 'z':\n            case 'Z':\n              \
    \  result += current.toUpperCase();\n                break;\n            case\
    \ '0':\n            case '1':\n            case '2':\n            case '3':\n\
    \            case '4':\n            case '5':\n            case '6':\n       \
    \     case '7':\n            case '8':\n            case '9':\n              \
    \  result += current.toLowerCase();\n                break;\n            default:\n\
    \                result += current;\n        }\n        return result;\n    },\
    \ '');\n}\n", "  const newString = string.toLowerCase();\n  return newString.toUpperCase();\n\
    }\n</code>\n<|/ a tags=javascript dscore=2 |>\n<| c |>\nThat is not the correct\
    \ way to do it. It will also convert some special characters such as `\xE8`. See\
    \ my answer below.\n<|/ c |>\n<| c |>\nYes, I did read your answer, however, I\
    \ read it in a hurry so I felt I'd better share my answer first. Regarding the\
    \ special characters, I think my solution is more general and will do the trick.\n\
    <|/ c |>\n<| c |>\nThe only reason I didn't share my answer is that I was the\
    \ one who upvoted your answer and I feel that it is better than mine, which is\
    \ why I upvoted your answer too. Regardless, your answer is correct and I don't\
    \ care about the reputation.\n<|/ c |>\n<| c |>\nThank you for pointing out the\
    \ bug in my solution. I've fixed it now.\n<|/ c |>\n<| c |>\nI didn't say it was\
    \ wrong, just that it is incorrect.\n<|/ c |>\n<| a tags=javascript dscore=1 |>\n\
    I wanted to add an alternative answer to this question which uses the String.prototype.replace\
    \ method and provides more flexibility than the other solutions.\nThe replace\
    \ method allows you to replace any character with any other character, as long\
    \ as the character is contained in the string as a literal string. To demonstrate,\
    \ here's an example of replacing a single character, with multiple characters:\n\
    \n<code>\nconst test = 'some string with some character in it';\n\nconst result\
    \ = test.replace(/'/g, '\\'s');\n\nconsole.log(result);</code>\n\nThe replace\
    \ method accepts an optional parameter for searching characters within the string.\
    \ The optional parameter can be a regular expression, which is similar to how\
    \ you might use Regular Expressions via the search function in JavaScript. For\
    \ example:\n<code>\nconst test = 'some string with some character in it';\n\n\
    const result = test.replace(/[aeiou]/g, 's');\n</code>\nThe above will replace\
    \ any vowel in the string with the character 's', so the final result will be\
    \ something like \"soms string with some character in it\". Here is a breakdown\
    \ of what each character in the regular expression is doing. The character | separates\
    \ the regular expression into different parts. The ^ and $ symbols denote beginning\
    \ and end of the string respectively.\n\n<code>\nconst test = 'some string with\
    \ some character in it';\n\nconst result = test.replace(/[aeiou]/g, 's');\n\n\
    console.log(result);</code>\n\nIf you wanted more control over which characters\
    \ were replaced, you could use grouping parentheses to capture characters to replace\
    \ with ", "  // TODO: replace with regexp or something.\n  return string.replace(/[a-z]/g,\
    \ char => char.toUpperCase()).replace(/[A-Z]/g, char => char.toLowerCase());\n\
    }\n", "\treturn string.replace(/[a-z]/g, c => {\n\t\treturn c === c.toUpperCase()\
    \ ? c.toLowerCase() : c.toUpperCase();\n\t});\n}\n", "  return string.toLowerCase().replace(/[a-z]/g,\
    \ c => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase());\n}\n", "  string\
    \ = string.toUpperCase();\n  let first = string.charAt(0).toLowerCase();\n  let\
    \ last = string.charAt(string.length - 1).toLowerCase();\n  let rest = string.slice(1).split('');\n\
    \  rest[0] = first;\n  rest[rest.length - 1] = last;\n  return rest.join('');\n\
    }\n", "\treturn string.replace(/[a-z]/g, function(char: string) { return char.toUpperCase()\
    \ }).replace(/[A-Z]/g, function(char: string) { return char.toLowerCase() });\n\
    }\n", "  return string.split('').reduce((prev, curr) => {\n    return prev + curr.toUpperCase();\n\
    \  });\n}\n", "    return string.replace(/[a-z]/gi, (char) => char.toUpperCase());\n\
    }\n", "  return string.split('').map(char => char.toLowerCase() === char ? char.toUpperCase()\
    \ : char).join('');\n}\n", "  return string.split(' ').map((x) => x.toLowerCase()).join('\
    \ ');\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nIf you're not looking\
    \ for a functional solution that iterates the string twice or more (which would\
    \ be the way to go imo), you can also use something like this:\n<code>", "   \
    \ return string.toUpperCase().replace(/[a-z]/g, char => char.toUpperCase());\n\
    }\n</code>\nHere's an example of a function that counts how many times a character\
    \ is in a string...\n<code>", "    return string\n        .toLowerCase()\n   \
    \     .replace(\n            /([a-z])([A-Z])/g,\n            (_, letter1, letter2)\
    \ => letter2 +\n            letter1.toLowerCase()\n        );\n}\n", "    return\
    \ string.split('').reverse().join('');\n}\n", "  const lower: string[] = string.split('');\n\
    \  const upper: string[] = [];\n  let i: number;\n\n  for (i = 0; i < lower.length;\
    \ i++) {\n    if (lower[i] === lower[i].toUpperCase()) {\n      upper.push(lower[i].toLowerCase());\n\
    \    } else {\n      upper.push(lower[i]);\n    }\n  }\n  return upper.join('');\n\
    }\n", "  return string.replace(\n    /[a-z]/g,\n    match => match.toUpperCase(),\n\
    \  );\n}\n", "    return string.toUpperCase().replace(\n        /[A-Z]/g,\n  \
    \      (char: string) => char.toLowerCase(),\n    );\n}\n", "    return string.toLowerCase().split('')\n\
    \        .map(function (character: string) { return character.toUpperCase(); })\n\
    \        .join('');\n}\n", "    return string.split('').map(function (character)\
    \ {\n        return character.toUpperCase() === character ? '' : character.toLowerCase();\n\
    \    }).join('');\n}", "\treturn string.toLowerCase().replace(/^.|.$/g, m => m\
    \ === \"a\" ? \"A\" : m.toUpperCase());\n}\n", "  return string.split('').map(function\
    \ (c: string) { return c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase();\
    \ }).join('');\n}\n", "    return string.split(\"\").map(character => character\
    \ === character.toLowerCase() ? character.toUpperCase() : character.toLowerCase()).join(\"\
    \");\n}\n", "  return string.split('')\n    .map(function(c: any) { return c ===\
    \ c.toLowerCase() ? c.toUpperCase() : c.toLowerCase(); })\n    .join('');\n}\n",
  "  return string.split('').reduce((flipped: string, char: string) => {\n    return\
    \ flipped + char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n\
    \  }, '');\n}\n", "  return string.toLowerCase().split('').map(function(c) {\n\
    \    return c.toUpperCase();\n  }).join('');\n}\n", "    return string.toLowerCase().replace(/[a-z]/gi,\
    \ (char) => char.toUpperCase());\n}\n</code>\nFinally, the code below shows the\
    \ actual results of the transformations:\n<code>", "    return string.toLowerCase().split('').map(letter\
    \ => {\n        return letter === letter.toUpperCase() ? letter.toLowerCase()\
    \ : letter.toUpperCase();\n    }).join('');\n}\n", "    return string.toLowerCase().split('')\n\
    \            .map(function (character: string) {\n                return character.toUpperCase();\n\
    \            })\n            .join('');\n}\n", "    return string.replace(\n \
    \       /[a-z]/g,\n        (match) => match.toUpperCase()\n    );\n}\n", "  return\
    \ string.replace(/[A-Z]/g, (_match, _letter) => {\n    return _letter.toUpperCase();\n\
    \  });\n}\n", "  return string.split('').reduce((prev, curr) => prev + curr.toUpperCase(),\
    \ \"\").toLowerCase();\n}\n", "  return string.split('').map(char => {\n    return\
    \ char.toUpperCase() === char ? char.toLowerCase() : char.toUpperCase();\n  }).join('');\n\
    }\n", "    return string.split('')\n        .map(c => c.toLowerCase())\n     \
    \   .map(c => c.toUpperCase())\n        .join('');\n}\n", "  return string.replace(/[A-Z]/g,\
    \ function(match: string) {\n    return match.toUpperCase();\n  });\n}\n", " \
    \   return string.charAt(0).toUpperCase() + string.substr(1).toLowerCase();\n\
    }\n", "    return string.split('').map((x) => x.toLowerCase()).join('');\n}\n",
  "  return string.split('').map(c => c === c.toLowerCase() ? c.toUpperCase() : c.toLowerCase()).join('');\n\
    }\n", "    return string.split('').map(char => char === char.toUpperCase() ? char.toLowerCase()\
    \ : char.toUpperCase()).join('');\n}\n", "  return string.toLowerCase().replace(/[A-Z]/g,\
    \ letter => letter.toUpperCase());\n}\n", "  return string.toLowerCase().replace(/[A-Z]/g,\
    \ function(char) {\n    return char.toUpperCase();\n  });\n}\n", "    return string.toLowerCase().replace(/[a-z]/g,\
    \ char => char.toUpperCase());\n}\n", "    return string.split('').map(c => c\
    \ === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}", "\t\
    const flip = s => s.toLowerCase().split('').map(l => l.toUpperCase()).join('');\n\
    \treturn string.split('').map(flip).join('');\n}\n", "    return string\n    \
    \    .toUpperCase()\n        .replace(/([A-Z])/g, function (match) {\n       \
    \     return match.toUpperCase();\n        });\n}\n", "  return string.split(/[a-z]+/).reduce(\n\
    \    (previous, current) => {\n      return previous + current.toUpperCase() +\
    \ current.toLowerCase();\n    },\n    \"\"\n  );\n}\n", "  return string.split(/[a-z]+/).reduce((string,\
    \ word) => {\n    const first_letter = word.charAt(0);\n    const rest = word.slice(1);\n\
    \    const upper_cased_word = first_letter.toUpperCase() + rest;\n    return string\
    \ + upper_cased_word;\n  }, '');\n}\n", "    if (string) {\n        return string.replace(/[a-z]/gi,\
    \ function (x) { return x.toUpperCase(); }).replace(/[A-Z]/gi, function (x) {\
    \ return x.toLowerCase(); });\n    } else {\n        return \"\";\n    }\n}\n",
  "  return string.toLowerCase().replace(/[A-Z]/g, function (c: string) {\n    return\
    \ c.toUpperCase();\n  });\n}", "  return string.toLowerCase().toUpperCase()\n\
    }\n", "\treturn string.split('').map((letter: string) => letter.toUpperCase()).join('');\n\
    }\n", "  return string.replace(/[a-z]/g, (l) => l.toUpperCase()) // Lowercase\
    \ first.\n    .replace(new RegExp(`[^${lowercase_chars.join('')}]`, 'g'), (l)=>\
    \ l.toLowerCase()); // Uppercase rest of lowercase.\n}\n", "  return string.toLowerCase().split('\
    \ ').join('');\n}\n", "  return string.replace(/[a-z]/, c => c.toUpperCase())\n\
    \    .replace(/[A-Z]/, c => c.toLowerCase());\n}\n", "  if (string.length ===\
    \ 0) {\n    return '';\n  }\n  const first = string[0].toUpperCase();\n  const\
    \ rest = flip_case(string.substring(1));\n  return first.toUpperCase() + rest;\n\
    }\n", "    return string.replace(/[a-z]/g, c => c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase());\n}\n", "  string = string.toLowerCase();\n  string = string.charAt(0).toUpperCase()\
    \ + string.slice(1);\n  string = string.charAt(0).toLowerCase() + string.slice(1);\n\
    \  return string;\n}\n", "    return string.replace(/[a-z]/ig, (char: string)\
    \ => char.toUpperCase());\n}\n", "  return string.toLowerCase().replace(/[!@#$%^&*()_+={}[\\\
    ]/;:<>-]/g, function(ch) {\n    return ch === ch.toUpperCase() ? ch.toLowerCase()\
    \ : ch.toUpperCase();\n  });\n}\n", "    return string.split(' ').map(c => c ===\
    \ c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join(' ')\n}\n", "    return\
    \ string.replace(/[a-z]/g, function (letter) {\n        return letter.toUpperCase();\n\
    \    });\n}\n", "\treturn string.replace(/([A-Z])/g, (v) => v[0].toLowerCase());\n\
    }\n", "  return string.toLowerCase().replace(/(?:^|[\\-_])[a-z]/g, function(letter:\
    \ string) {\n    return letter.toUpperCase();\n  });\n}\n", "  return string.split('').reduce((flipped,\
    \ char) => {\n    if (char >= 'a' && char <= 'z') {\n      flipped += char.toUpperCase();\n\
    \    } else if (char >= 'A' && char <= 'Z') {\n      flipped += char.toLowerCase();\n\
    \    } else {\n      flipped += char;\n    }\n\n    return flipped;\n  }, '');\n\
    }\n", "    return string.split('').map(x => isUpper(x) ? '' + x.toUpperCase()\
    \ : x.toLowerCase()).join('');\n}\n", "    const result = string;\n    const regex\
    \ = /[a-z]/ig;\n    result.split(regex).forEach(word => {\n        word = word.toLocaleUpperCase();\n\
    \        const found = word.match(/[A-Z]/);\n        if (found !== null) word\
    \ = word.slice(0, found.index);\n        word = word.toLocaleLowerCase();\n  \
    \  });\n    return result;\n}\n", "    return string.toUpperCase().replace(/[a-z]/g,\
    \ c => c.toUpperCase());\n}\n", "    return string.replace(/[a-z]/gi, m => m.toUpperCase()).replace(/[A-Z]/g,\
    \ m => m.toLowerCase());\n}\n", "\treturn string.toLowerCase().replace(/[a-z]/g,\
    \ letter => letter.toUpperCase());\n}\n", "  return string.split('')\n    .map(function(character:\
    \ string) {\n      return character.toLowerCase() === character ? character.toUpperCase()\
    \ : character.toLowerCase();\n    })\n    .join('');\n}\n", "    return string.toLowerCase().split('')\n\
    \        .map(function(char: string) {\n            return char.toUpperCase();\n\
    \        }).join('');\n}\n", "    return string\n        .replace(/([a-z]+)|([A-Z]+)|([A-Z][a-z]+)/gi,\
    \ (match: string) =>\n            match\n                .toLocaleLowerCase()\n\
    \                .toLocaleUpperCase()\n                .toUpperCase());\n}\n",
  "    return string.replace(/[a-z]/g, m => {\n        return m.toUpperCase();\n \
    \   }).replace(/[A-Z]/g, m => {\n        return m.toLowerCase();\n    });\n}\n",
  "  return string.replace(/[a-z]/g, c => c.toUpperCase()\n  ).replace(/[A-Z]/g, c\
    \ => c.toLowerCase());\n}\n", "    return string.toLowerCase().split('').map(c\
    \ => c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()).join('');\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis is an amazing solution. I was stuck at this for\
    \ so long.\n<|/ c |>\n<| a tags=typescript,javascript,angular |>\n<code>\nlet\
    \ str1: string = \"My name is Bob\";\nlet str2: string = \"My name is Jessica\"\
    ;\nlet str3: string = \"My name is Jessica\";\n", "    return string.toLowerCase().replace(\n\
    \        /[a-z]/g,\n        match => match.toUpperCase()\n    );\n}\n", "    string.split('').forEach((letter:\
    \ string, index: number) => {\n        if (letter === letter.toLowerCase()) {\n\
    \            string.charAt(index)\n                = letter.toUpperCase();\n \
    \       } else {\n            string.charAt(index)\n                = letter.toLowerCase();\n\
    \        }\n    });\n\n    return string;\n}\n</code>\n<|/ a tags=javascript,string,arrays,function\
    \ |>\n<| a tags=javascript,string,arrays,function |>\nHere is an easy solution\
    \ using es6 arrow functions.\n<code>", "    return string.replace(/[a-z]/g, match\
    \ => match.toUpperCase()) //Replace the lower case letters with the upper case\
    \ letters.\n        .replace(/[A-Z]/g, match => match.toLowerCase()); //Replace\
    \ the upper case letters with the lower case letters.\n}\n", "  let str_array\
    \ = string.split(\"\");\n  for (let i = 0; i < str_array.length; i++) {\n    str_array[i]\
    \ = str_array[i]\n      .toLocaleLowerCase()\n      .toLocaleUpperCase();\n  }\n\
    \  return str_array.join(\"\");\n}\n", "\treturn string.replace(/[a-z]/g, (c)\
    \ => { return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase(); });\n\
    }\n", "    return string\n        .replace(/[a-z]/g, c => c.toUpperCase())\n \
    \       .replace(/[A-Z]/g, c => c.toLowerCase())\n}", "  const string = string.toLowerCase();\n\
    \  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n", "  let newString:\
    \ string = string;\n  for (let i = 0; i < newString.length; i++) {\n    newString[i]\
    \ = newString[i].toUpperCase();\n    newString[i] = newString[i].toLowerCase();\n\
    \  }\n  return newString;\n}\n", "    return string.replace(/[a-z]/g, c => c.toUpperCase()).replace(/[A-Z]/g,\
    \ c => c.toLowerCase());\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
