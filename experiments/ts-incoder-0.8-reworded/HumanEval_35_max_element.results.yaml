language: ts
name: HumanEval_35_max_element
results:
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; ++i) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\nexport const max_element = max_element\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3w9nh6_i.ts(6,10): error TS2300: Duplicate identifier
    ''max_element''.

    ../../../../../tmp/tmp3w9nh6_i.ts(15,14): error TS2300: Duplicate identifier ''max_element''.

    '
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length > 0) {\n    var i: number\
    \ = l[0];\n    for (var j = 1; j < l.length; j++) {\n      if (l[j] > i) {\n \
    \       i = l[j];\n      }\n    }\n    return i;\n  }\n  return 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977735
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let m = Number.NEGATIVE_INFINITY\n  for\
    \ (let i = 0; l[i] !== undefined; ++i) {\n    if (l[i] > m) {\n      m = l[i]\n\
    \    }\n  }\n  return m\n}\n</code>\n<|/ a dscore=0 tags=typescript |>\n<| a tags=typescript\
    \ |>\nIn Typescript, you could do it this way using Array.findIndex\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbhoj6kew.ts(15,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbhoj6kew.ts(15,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbhoj6kew.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbhoj6kew.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbhoj6kew.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbhoj6kew.ts(17,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(17,23): error TS1109: Expression expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,37): error TS1005: '')'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(18,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbhoj6kew.ts(20,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let res = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    res = Math.max(res, l[i]);\n  }\n  return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = 0;\n  l.forEach((x: number)\
    \ => {\n    max = Math.max(max, x);\n  });\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0], min = l[0], minIndex =\
    \ 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max\
    \ = l[i];\n      minIndex = i;\n    }\n    if (l[i] < min) {\n      min = l[i];\n\
    \    }\n  }\n  return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp42uqxvkg.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp42uqxvkg.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l == null) return -1;\n  let max =\
    \ l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpuy3z3m4g.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpuy3z3m4g.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max: number = 0;\n  for (let i = 0;\
    \ i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max = l[0];\n    for (var i = 1;\
    \ i < l.length; i++) {\n        if (max < l[i]) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort()\n  let max_val = l[0]\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] > max_val) {\n      max_val =\
    \ l[i]\n    }\n  }\n  return max_val\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.reduce(function (x, i) {\n\
    \        return Math.max(i, x);\n    }, -Infinity);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977735
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        return\
    \ 0;\n    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n \
    \       if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.sort((a: number, b: number) =>\
    \ b - a).pop();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpm05luso3.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm05luso3.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((max: number, value: number)\
    \ => max < value ? max : value, -Infinity);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpvn6ubl9y.js:12:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvn6ubl9y.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977734
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max: number;\n    let maxIndex:\
    \ number;\n    let min: number;\n    let minIndex: number;\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \           maxIndex = i;\n        }\n        if (l[i] < min) {\n            min\
    \ = l[i];\n            minIndex = i;\n        }\n    }\n    if (max > min) {\n\
    \        return [max, maxIndex];\n    } else {\n        return [min, minIndex];\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv7m3onb9.ts(22,9): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpv7m3onb9.ts(24,9): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let ele of\
    \ l) {\n        if (ele > max) {\n            max = ele;\n        }\n    }\n \
    \   return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977696
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = -Infinity\n  let maxIdx = 0\n\
    \  l.forEach((x, i) => {\n    if (x > max) {\n      max = x\n      maxIdx = i\n\
    \    }\n  })\n  return l[maxIdx]\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_value = l[0];\n  for (let i =\
    \ 1; i < l.length; ++i) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n\
    \    }\n  }\n  return max_value;\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max = l[0],\n        i;\n    for\
    \ (i = 1; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977735
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n\treturn Math.max.apply(null, l);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((r, v) => v > r ? v :\
    \ r, 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let a = l[0], b = l[0];\n  for (let i\
    \ = 1; i < l.length; i++) {\n    let x = a; a = b; b = x;\n  }\n  return Math.max(a,\
    \ b);\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpiel6t1jo.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiel6t1jo.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max: number;\n  for (let i = 0; i\
    \ < l.length; ++i) {\n    if (max === undefined || l[i] > max) {\n      max =\
    \ l[i];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977694
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort()\n  return l[l.length - 1]\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpc2oc4351.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc2oc4351.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977737
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        return\
    \ NaN;\n    }\n    let max = Number.NEGATIVE_INFINITY;\n    let maxElement = NaN;\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n            maxElement = i;\n        }\n    }\n    return maxElement;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp3iz7yct5.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3iz7yct5.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; ++i) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max_value = 0;\n    let max_element\
    \ = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max_value)\
    \ {\n            max_value = l[i];\n            max_element = l[i];\n        }\n\
    \    }\n    return max_element;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let m = l[0];\n    for (let i = 1; i\
    \ < l.length; i++) {\n        if (l[i] > m) {\n            m = l[i];\n       \
    \ }\n    }\n    return m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977694
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let maxVal = l[0];\n\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > maxVal) {\n            maxVal\
    \ = l[i];\n        }\n    }\n\n    return maxVal;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let highest = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    if (l[i] > highest) {\n      highest = l[i];\n   \
    \ }\n  }\n  return highest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    const result = -Infinity;\n    const\
    \ max = -Infinity;\n\n    l.forEach(e => {\n        if (e > max) {\n         \
    \   max = e;\n        }\n    });\n\n    return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphd_en16p.ts(12,13): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0], maxValue = l[0];\n  for\
    \ (var i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \      maxValue = l[i];\n    }\n  }\n  return maxValue;\n}\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(Math, l);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"\
    max_element() called with an empty array\")\n  }\n\n  const max = l[0]\n\n  for\
    \ (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n\
    \    }\n  }\n\n  return max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_z2k_7jj.ts(15,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l === undefined || l === null || l.length\
    \ === 0) {\n    return undefined\n  }\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; ++i) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let i = l.length;\n  let m = l[0];\n \
    \ while (--i >= 0) if (m > l[i]) m = l[i];\n  return m;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpsdj2vdnk.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsdj2vdnk.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.sort((a: number, b: number)\
    \ => {\n        return a - b;\n    })[l.length - 1];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max_value: number;\n    var max_idx:\
    \ number;\n    for (var idx = 0; idx < l.length; idx++) {\n        var elem =\
    \ l[idx];\n        if (max_value === undefined || elem > max_value) {\n      \
    \      max_value = elem;\n            max_idx = idx;\n        }\n    }\n    return\
    \ max_value;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.sort(function(l, r) {\n    return\
    \ r - l;\n  })[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        throw\
    \ Error('Empty array');\n    }\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max(...l);\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThat's actually a really nice answer, but a lot of people are\
    \ looking for a \"pure\" JS solution, since they're already using TypeScript.\
    \ I think the OP is looking for a pure JavaScript solution, since he's using TypeScript\
    \ already.\n<|/ c |>\n<| c |>\nI believe that TypeScript is also a preprocessor\
    \ that uses code generation to compile down to plain JavaScript code. At least,\
    \ that's what I've seen of it.\n<|/ c |>\n<| c |>\nTypeScript compiles to plain\
    \ JS code. [Here's a simple example](https://www.typescriptlang.org/play/index.html#src=function%20f%28a%3A%20string%29%20%7B%0D%0A%20%20return%20a%0D%0A%7D%0D%0A%0D%0Aconst%20x%3A%20string%20%3D%20f%28\"\
    foo\"%29%0D%0Aconsole.log(x))%3B). You seem to be using a very different version\
    \ of TypeScript, one that compiles down to ES5 instead of ES6.\n<|/ c |>\n<| c\
    \ |>\nTypeScript does not compile to plain JS, that is a TypeScript feature. I'm\
    \ talking about the TypeScript compiler, not the TypeScript language itself. For\
    \ a pure JavaScript solution, you need to rely on the TypeScript compiler itself.\n\
    <|/ c |>\n<| c |>\nAh, right. I thought you were talking about [this](https://www.typescriptlang.org/play/index.html#src=function%20f%28a%3A%20string%29%20%7B%0D%0A%20%20return%20a%0D%0A%7D%0D%0A%0D%0Aconst%20x%3A%20string%20%3D%20f%28\"\
    foo\"%29%0D%0Aconsole.log(x))%3B). But I guess you meant that `TypeScript` compiles\
    \ to plain JavaScript code before actually compiling the TypeScript code itself.\
    \ I believe the OP only wants a plain JavaScript solution.\n<|/ c |>\n<| a tags=javascript,arrays\
    \ |>\nThis solution is very similar to yours. \n<code>\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_1kz2d4q.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_1kz2d4q.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_1kz2d4q.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(11,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,108): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,111): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,119): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,125): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,139): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,145): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,149): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,152): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,155): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,163): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,167): error TS1005: ''('' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,169): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,174): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,185): error TS1005: '')'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,201): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,203): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(12,231): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmp_1kz2d4q.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_1kz2d4q.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_1kz2d4q.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tm'
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max: number = l[0],\n      i: number;\n\
    \  for (i = 1; i < l.length; ++i) {\n    if (l[i] > max) max = l[i];\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort(function(x, y) {\n    return y\
    \ - x;\n  });\n  return l[0];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((max, val) => Math.max(max,\
    \ val), -Infinity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.reduce((prev, cur) => (prev\
    \ > cur) ? prev : cur)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (max < l[i]) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((a, b) => (a < b ? a :\
    \ b), -Infinity);\n}\n</code>\n<|/ a dscore=3 tags=typescript,javascript |>\n\
    <| c |>\nThank you, this is what I was looking for.\n<|/ c |>\n<| a dscore=3 tags=typescript,javascript\
    \ |>\nHere is an example of how to do this. This also works for arrays.\n\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu9t3jjg3.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpu9t3jjg3.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpu9t3jjg3.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(11,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(12,42): error TS1005: ''('' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(13,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpu9t3jjg3.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(14,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(14,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(14,43): error TS1109: Expression expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,6): error TS1005: '')'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpu9t3jjg3.ts(15,30): e'
  timestamp: 1659977739
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max = l[0], m = l[0];\n    for (var\
    \ i = 0, len = l.length; i < len; i++) {\n        if (l[i] > m) {\n          \
    \  m = l[i];\n        }\n    }\n    return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpholgmuqu.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpholgmuqu.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length <= 1) return l[0];\n  let\
    \ max_v = l[0], min_v = l[0], min_i, max_i;\n  for (let i = 1; i < l.length; i++)\
    \ {\n    const v = l[i];\n    if (v > max_v) max_v = v;\n    if (v < min_v) min_v\
    \ = v;\n  }\n  min_i = 0; max_i = l.length - 1;\n  while (max_i > min_i && l[max_i]\
    \ === max_v) {\n    max_i--;\n  }\n  while (min_i > max_i && l[min_i] === min_v)\
    \ {\n    min_i++;\n  }\n  return max_v === -Infinity || max_v === Infinity ? min_v\
    \ : max_v;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0]\n    let result: number[]\
    \ = []\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i]\n        }\n    }\n    return result\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd3dqfog6.ts(14,5): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    '
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0];\n  for (var i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977696
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort(function (a, b) { return a - b;\
    \ });\n  return l[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpn5nco8tb.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn5nco8tb.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; ++i) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n   \
    \ }\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort()\n  if (l[0] === l[l.length -\
    \ 1]) {\n    return l[0]\n  }\n  return l[l.length - 1]\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpzlf5cy54.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzlf5cy54.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let i: number;\n    let maxVal: number;\n\
    \    var max = l[0];\n    i = 1;\n    while (i < l.length) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n        }\n        i++;\n    }\n    return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 0; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max_ = l[0];\n    for (var i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > max_) {\n            max_ = l[i];\n\
    \        }\n    }\n    return max_;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_val = l[0]\n  for (let i = 1;\
    \ i < l.length; i++) {\n    if (l[i] > max_val) {\n      max_val = l[i]\n    }\n\
    \  }\n  return max_val\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max_elm = 0;\n    for (var i = l.length\
    \ - 1; i >= 0; i--) {\n        if (max_elm < l[i])\n            max_elm = l[i];\n\
    \    }\n    return max_elm;\n}\n</code>\n<|/ a dscore=5 tags=algorithm,arrays,javascript,sorting\
    \ |>\n<| c |>\nI guess you meant `max_elm < l[i]` right?\n<|/ c |>\n<| a tags=algorithm,arrays,javascript,sorting\
    \ dscore=5 |>\nYou can use sort() function in Javascript. \n<code>\narr.sort();\n\
    </code>\nIf your array has elements which are numbers or strings, then sort()\
    \ function will sort the numbers and strings in alphabetical order.\n<|/ a |>\n\
    <| c |>\nThis doesn't work on multidimensional arrays!\n<|/ c |>\n<| c |>\n`sort`\
    \ can do multiple passes. But it's still a really bad idea. [Please read this](https://medium.com/@robinpokorny/javascript-array-sort-performance-bdff394a9b57)\n\
    <|/ c |>\n<| c |>\n: This answer is not specific to arrays. You could easily adapt\
    \ it to a custom data structure: just convert the array to a list using `.slice()`:\
    \ `arr.slice().sort(...)`.\n<|/ c |>\n<| c |>\nFor people who are looking at this\
    \ for comparison: [`Array.sort()` performance is unspecified](https://stackoverflow.com/a/39439108/12695027)\n\
    <|/ c |>\n<| a dscore=4 |>\nThe fastest way to sort an array is to sort it using\
    \ native array sorting functionality (Array.sort).\nThe reason for this is that\
    \ native sorting uses quicksort, which can do about n log n comparisons in O(n)\
    \ time. However, if you implement your own sorting algorithms, you can sort much\
    \ faster using them (O(n log n), or O(n)), depending on your algorithm.\nThe biggest\
    \ performance boost you get by using your own sorting algorithms is to stop using\
    \ indexOf and indexOf. This will cause your sorting algorithm to have to do as\
    \ many array scans as your quicksort algorithm does.\nAlso, your quicksort algorithm\
    \ is inefficient. Quicksort is typically much faster than insertion sort (although\
    \ insertion sort may be slightly faster). Quicksort requires you to make one pass\
    \ through the array, swapping elements as you go. However, insertion sort makes\
    \ a single pass through the array and inserts the new element at that location.\n\
    See my answer to this question:\nWhy is a sorting algorithm faster than a search\
    \ algorithm and vice \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6smb4h7d.ts(14,2): error TS1110: Type expected.

    ../../../../../tmp/tmp6smb4h7d.ts(14,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp6smb4h7d.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp6smb4h7d.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp6smb4h7d.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp6smb4h7d.ts(16,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp6smb4h7d.ts(17,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(17,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(17,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(17,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(18,3): error TS1110: Type expected.

    ../../../../../tmp/tmp6smb4h7d.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp6smb4h7d.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp6smb4h7d.ts(19,6): error TS1005: '':'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(19,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(19,57): error TS1109: Expression expected.

    ../../../../../tmp/tmp6smb4h7d.ts(20,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(20,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(20,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(20,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(20,29): error TS1003: Identifier expected.

    ../../../../../tmp/tmp6smb4h7d.ts(21,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp6smb4h7d.ts(23,2): error TS1110: Type expected.

    ../../../../../tmp/tmp6smb4h7d.ts(23,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp6smb4h7d.ts(24,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(24,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp6smb4h7d.ts(24,15): error TS1005: '';'' expected.

    ../../../../../tm'
  timestamp: 1659977739
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        return\
    \ undefined;\n    }\n    return l.reduce((a, b) => Math.max(a, b), l[0]);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977740
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort()\n  return l[l.length - 1]\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpc2oc4351.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc2oc4351.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max(...l);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max = l[0],\n        max = l[0];\n\
    \    for (var i = 1; i < l.length; i++)\n        if (l[i] > max)\n           \
    \ max = l[i];\n    return max;\n}\n</code>\n<|/ a |>\n<| c |>\nPlease don't post\
    \ code-only answers. Please explain what your code does.\n<|/ c |>\n<| c |>\n\
    The `max_element` function was already provided, I didn't write it. Just a basic\
    \ function that returns maximum element in the array and returns it.\n<|/ c |>\n\
    <| a tags=arrays,javascript |>\n<code>\nlet arr = [6, 4, -2, -5, 7, 3, -1]\n\n\
    const max = (arr) => Math.max(...arr);\n\nconsole.log(max(arr));</code>\n\nYou\
    \ don't have to write your own function. You just need to use Math.max and spread\
    \ operator to get the same result.\n<|/ a dscore=5 |>\n<| c |>\nThis should be\
    \ the best answer, it does a lot more than the other answers do - this should\
    \ be the accepted answer.\n<|/ c |>\n<| c |>\nThanks for this, this is exactly\
    \ what I was looking for.\n<|/ c |>\n<| c |>\nThis should be the accepted answer!\
    \ It doesn't make another function and doesn't use any additional functionality.\n\
    <|/ c |>\n<| c |>\nThis is the best answer. It uses only a builtin javascript\
    \ function, which is what most people are looking for.\n<|/ c |>\n<| c |>\nThanks\
    \ man, This should be the accepted answer! This should be the accepted answer!\
    \ The other answers make another function and does other stuff that should not\
    \ be necessary. Thanks!\n<|/ c |>\n<| a |>\n<code>\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwe6gs44p.ts(14,2): error TS1110: Type expected.

    ../../../../../tmp/tmpwe6gs44p.ts(14,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwe6gs44p.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwe6gs44p.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(16,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(17,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(17,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(17,73): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpwe6gs44p.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwe6gs44p.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(19,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,32): error TS1005: ''('' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(20,148): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpwe6gs44p.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(21,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwe6gs44p.ts(22,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(22,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(22,30): error TS1109: Expression expected.

    ../../../../../tmp/tmpwe6gs44p.ts(24,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwe6gs44p.ts(28,24): error TS1110: Type expected.

    ../../../../../tmp/tmpwe6gs44p.ts(28,25)'
  timestamp: 1659977739
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    let index = l.indexOf(max);\n\
    \    for (let i = 1; i < l.length; i++) {\n        let item = l[i];\n        if\
    \ (item > max) {\n            max = item;\n            index = i;\n        }\n\
    \    }\n    return index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpnwgvnlkf.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnwgvnlkf.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977740
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    let index = l.indexOf(max);\n\
    \n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n      \
    \      max = l[i];\n            index = i;\n        }\n    }\n\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977739
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce(function (a, b, i) {\n\
    \    return a > b ? i : b;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpl6a1tewv.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6a1tewv.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977740
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(Math, l);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977740
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let high: number|undefined = undefined;\n\
    \  let low: number|undefined = undefined;\n\n  for (let item of l) {\n    if (item\
    \ > high) {\n      high = item;\n    } else if (item < low) {\n      low = item;\n\
    \    }\n  }\n\n  return high || low;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpmh35s7sq.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmh35s7sq.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977740
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce(function(a: number, b:\
    \ number): number {\n    return a > b ? a : b;\n  }, -Infinity);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977740
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error('Array\
    \ must contain at least one value');\n  }\n  return l.reduce((acc: number, num:\
    \ number) => Math.max(acc, num), -Infinity);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 0;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = Number.MIN_VALUE;\n  l.forEach((e)\
    \ => {\n    if (e > max) {\n      max = e;\n    }\n  });\n  return max;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n\n    for (let i =\
    \ 0; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    return NaN;\n\
    \  }\n  var max = l[0], min = l[0], i;\n  for (i = 1; i < l.length; ++i) {\n \
    \   var n = l[i];\n    if (n >= max) {\n      max = n;\n    }\n    if (n < min)\
    \ {\n      min = n;\n    }\n  }\n  return min;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpljfkrqy2.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpljfkrqy2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = 0;\n    for (let i = 0; i\
    \ < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977741
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  const max = l[0]\n  for (let i = 1; i\
    \ < l.length; ++i) {\n    const v = l[i]\n    if (v > max) {\n      max = v\n\
    \    }\n  }\n  return max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmqrgbha_.ts(11,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max = -Infinity;\n    var index\
    \ = -1;\n    var currentMax = Infinity;\n    for (var i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > max) {\n            currentMax = max;\n            index\
    \ = i;\n            max = l[i];\n        } else if (l[i] === max) {\n        \
    \    if (l[i] >= currentMax) {\n                index = i;\n                currentMax\
    \ = l[i];\n            }\n        }\n    }\n    return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    let max_idx = 0;\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n            max_idx = i;\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0], i = 1, n = l.length, e;\n\
    \n  while (i < n) {\n    e = l[i];\n    if (e > max) {\n      max = e;\n    }\n\
    \    i++;\n  }\n\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let m = Number.NEGATIVE_INFINITY;\n\
    \    for (let i = 0; i < l.length; i++) {\n        m = Math.min(m, l[i]);\n  \
    \  }\n    return m;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpxwz3v4xy.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxwz3v4xy.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_num = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    if (max_num < l[i]) max_num = l[i];\n  }\n  return\
    \ max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0],\n    i, l = l.length;\n\
    \  for (i = 0; i < l; i += 1) {\n    if (max < l[i]) max = l[i];\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxa8_52tc.ts(6,22): error TS2300: Duplicate identifier
    ''l''.

    ../../../../../tmp/tmpxa8_52tc.ts(8,8): error TS2300: Duplicate identifier ''l''.

    '
  timestamp: 1659977742
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max: number;\n    let index: number\
    \ = -1;\n\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n\
    \            max = l[i];\n            index = i;\n        }\n    }\n\n    return\
    \ index;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpcq4yoqtt.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcq4yoqtt.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n\tlet max = l[0];\n\tfor (let i = 0; i <\
    \ l.length; i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t}\n\treturn\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n\tlet max_val = l[0];\n\tlet max_idx = 1;\n\
    \tfor (let i = 1; i < l.length; i++) {\n\t\tif (l[i] > max_val) {\n\t\t\tmax_val\
    \ = l[i];\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\treturn max_val;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var max_value = l[0];\n    for (var\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > max_value) {\n            max_value\
    \ = l[i];\n        }\n    }\n    return max_value;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = 0;\n    let temp: number;\n\
    \    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n       \
    \     max = l[i];\n        }\n    }\n    return max;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(Math, l);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max: number = l[0];\n    for (let\
    \ i = 0; i < l.length; ++i) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max: number = l[0]; //Initialize\
    \ max element to first element in array.\n\n    for (const elem of l) {\n    \
    \    if (elem > max) //Update max when current elem is greater than the previous.\n\
    \            max = elem;\n    }\n    return max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977742
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max_value: number;\n  l.sort((a: number,\
    \ b: number) => a - b);\n  max_value = l[0];\n  for (var i = 1; i < l.length;\
    \ i++) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n    }\n  }\n \
    \ return max_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977743
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = -Infinity;\n  var idx = 0;\n\
    \n  l.forEach(function (e) {\n    if (e > max) {\n      max = e;\n    }\n    idx\
    \ += 1;\n  });\n\n  return idx === 0 ? -Infinity : max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977743
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\nexport {\
    \ max_element };\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977743
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        return\
    \ 0\n    }\n    let maxv = l[0]\n    for (let i = 1; i < l.length; i++) {\n  \
    \      if (l[i] > maxv) {\n            maxv = l[i]\n        }\n    }\n    return\
    \ maxv\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977694
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce(function (prevValue, currentValue)\
    \ { return Math.max(prevValue, currentValue); }, 0);\n}\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\n    console.log(Math.max.apply(Math, array))\n</code>\n<|/ a dscore=5\
    \ tags=javascript,functional-programming |>\n<| c |>\nThe best answer here. The\
    \ others require you to write an additional function, which is not as intuitive\
    \ as this one.\n<|/ c |>\n<| c |>\nNote that this only works for numbers, and\
    \ only with ES6 support.\n<|/ c |>\n<| c |>\nNice, but I think you mean `Math.max(...array)`\n\
    <|/ c |>\n<| c |>\nThis works fine, but I do not know why it works... How does\
    \ it work? How does it know what to max? Does it just look at the first number\
    \ and then look if it is bigger and if so return it?\n<|/ c |>\n<| c |>\nIt knows\
    \ what to max because of the comma operator. `Math.max.apply(Math, array)` returns\
    \ `Math.max(array[0], array[1], array[2], ..., array[array.length])`\n<|/ c |>\n\
    <| a tags=javascript,functional-programming |>\nI prefer using the reduce function\
    \ rather than Math.max\n<code>\nvar max_result = array.reduce(function(prev, cur)\
    \ {\n  return prev < cur ? prev : cur;\n});\n</code>\nThe above method will loop\
    \ through the array and return the element which has the largest value. For example\
    \ [10, 2, 3] will return 3\n<|/ a dscore=5 |>\n<| c |>\nIt's a great solution,\
    \ if you also want to check for null values, you can do it like this:\n\n`var\
    \ max_result = array.reduce(function(prev, cur) {\n    return prev < cur ? prev\
    \ : cur;\n}, null);`\n<|/ c |>\n<| a tags=javascript,functional-programming |>\n\
    <code>\nvar maxValue = array.reduce(function(a, b){\n    return a > b ? a : b;\n\
    });\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`var maxValue = Math.max.apply(Math,\
    \ array)`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nvar max = -Infinity;\nfor(var i=0;\
    \ i<array.length; i++) {\n    if(max < array[i]) max = array[i];\n}\n</code>\n\
    <|/ a tags=javascript,functional-programming |>\n<| c |>\nThis is not the fastest\
    \ way to find the max value, it is O(n^2) solution, which is slower than reduce\
    \ O(n) \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyern964v.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmpyern964v.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyern964v.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyern964v.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(11,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(14,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyern964v.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyern964v.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(16,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpyern964v.ts(17,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,49): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,55): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,58): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,77): error TS1003: Identifier expected.

    ../../../../../tmp/tmpyern964v.ts(17,85): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,88): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(17,113): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyern964v.ts(18,1): error TS1003: Identifier expected.

    ../../.'
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n\n  for (let i = 1; i\
    \ < l.length; i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let ele of l)\
    \ {\n    if (ele > max) {\n      max = ele;\n    }\n  }\n  return max;\n}\n</code>\n\
    In summary, this algorithm (using your example) is O(N log N) for finding the\
    \ max and the algorithm suggested by is O(N log N) for finding the maximum.\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\npublic class MaxElement {\n    public\
    \ static void main(String args[]) {\n        int[] arr = {-2, 3, 5, -5, 12, 0,\
    \ 2, 10, -9};\n\n        int maxValue = arr[0];\n        for(int i = 1; i < arr.length;\
    \ i++) {\n            if(arr[i] > maxValue) {\n                maxValue = arr[i];\n\
    \            }\n        }\n        System.out.println(maxValue);\n    }\n}\n</code>\n\
    <|/ a tags=arrays,algorithm,java,big-o |>\n<| a |>\nThe max element in a given\
    \ array is obtained by iterating through all elements of the array. For iterating\
    \ through all elements, one could use a for loop and a while loop. \n<code>\n\
    int maxElement = array[0];\nfor (int i = 1; i < array.length; i++){\n    while\
    \ (array[i] > maxElement) {\n        maxElement = array[i];\n    }\n}\n</code>\n\
    This would iterate through all elements of the array, and would keep track of\
    \ the current max element being tracked at the time the while loop iterates. If\
    \ the current element is greater than the current max element, we move on to the\
    \ next element, and if it still is greater, then we set the max element equal\
    \ to the current element.\nFor your example, this would iterate through all elements,\
    \ and the max element would be 5 (because 5 is the last element in the array which\
    \ is greater than all elements of the array).\nHope that helps!\n<|/ a tags=arrays,algorithm,java,big-o\
    \ dscore=0 |>\n<| a tags=arrays,algorithm,java,big-o dscore=0 |>\n<code>\npublic\
    \ class MaxElement {\n    public static void main(String args[]) {\n        int[]\
    \ arr = {-2, 3, 5, -5, 12, 0, 2, 10, -9};\n        int maxValue = arr[0];\n  \
    \      for(int i = 1; i < arr.length; i++) {\n            if(arr[i] > maxValue)\
    \ {\n                maxValue = arr[i];\n            }\n        }\n        System.out.println(maxValue);\n\
    \    }\n}\n</code>\n<|/ a |>\n<| a |>\n<code>\npublic static int maxElement(int[]\
    \ array) {\n    int result = 0;\n    for (int i = 0; i < array.length; i++) {\n\
    \        if (array[i] > result) {\n            result = array[i];\n        }\n\
    \    }\n    return result;\n}\n</code>\n<|/ a tags=arrays,algorithm,java,big-o\
    \ dscore=0 |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj0j8sb64.ts(15,2): error TS1110: Type expected.

    ../../../../../tmp/tmpj0j8sb64.ts(15,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpj0j8sb64.ts(16,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,35): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,40): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,49): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,56): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,60): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,63): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,67): error TS1005: ''('' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,83): error TS1005: '')'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,101): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,111): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,114): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,117): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,121): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,125): error TS1005: '','' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,128): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,132): error TS1005: ''('' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,140): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(16,144): error TS1005: '';'' expected.

    ../../../../../tmp/tmpj0j8sb64.ts(17,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpj0j8sb64.ts(17,2): error '
  timestamp: 1659977744
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0];\n  var maxi = 1;\n\n \
    \ for (var i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \      maxi = i;\n    }\n  }\n\n  return maxi;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpnl9b8okr.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpnl9b8okr.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977744
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length > 0) {\n    var m = l[0];\n\
    \    for (var i = 1; i < l.length; ++i) {\n      if (m * l[i] < 0) {\n       \
    \ m = l[i];\n      }\n    }\n    return m;\n  } else {\n    return 0;\n  }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp4zqhnze4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp4zqhnze4.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977744
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n\tlet m = l[0];\n\tfor (let i = 1, len =\
    \ l.length; i < len; i++) {\n\t\tlet n = l[i];\n\t\tif (n < m) {\n\t\t\tm = n;\n\
    \t\t}\n\t}\n\treturn m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmph_vhhexh.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph_vhhexh.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let maxv = Number.MIN_VALUE;\n    let\
    \ maxi = -1;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > maxv)\
    \ {\n            maxv = l[i];\n            maxi = i;\n        }\n    }\n    return\
    \ maxv;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max(...l);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce(function (prev, curr)\
    \ {\n    return prev > curr ? prev : curr;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((a, b) => {\n    return\
    \ a > b ? a : b;\n  });\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nWhy `const` instead\
    \ of `let`?\n<|/ c |>\n<| c |>\n`let` creates block scope, `const` doesn't. Which\
    \ means it can't be reassigned, which is a requirement for the algorithm.\n<|/\
    \ c |>\n<| c |>\n`let min = 0;` creates block scope too? So how can it be reassigned?\n\
    <|/ c |>\n<| c |>\n, that's a good question. I'll think about it.\n<|/ c |>\n\
    <| c |>\n`const` creates block scope, so its value cannot be reassigned\n<|/ c\
    \ |>\n<| a dscore=2 tags=javascript,arrays |>\nJust another way to do it using\
    \ array's reduce method.\n\n<code>\nconst max = (arr) => {\n    return arr.reduce((max,\
    \ cur) => {\n        return max > cur ? max : cur;\n    }); \n};\n\nconst max2\
    \ = (num) => {\n    let min = Math.min.apply(Math, num);\n    let max = Math.max.apply(Math,\
    \ num);\n    return min === max ? min : max;\n};\n\nconsole.log(max([2,6,7,3]));\n\
    console.log(max2([2,6,7,3]));</code>\n<|/ a |>\n<| c |>\nThe ternary operator\
    \ is a really great idea. Thank you.\n<|/ c |>\n<| c |>\nYou don't need an `if`\
    \ statement here because `Math.min` and `Math.max` return `NaN` if they don't\
    \ find any numbers in the array.\n<|/ c |>\n<| a tags=javascript,arrays dscore=1\
    \ |>\n<code>\nlet arr = [1,-10,4,5,6,7,8,3,-12,9,0,10,4,-5];\nlet min = arr[0];\n\
    let max = arr[0];\n\nfor(let i = 0; i < arr.length; i++)\n{\n  if(arr[i] > max)\
    \ max = arr[i];\n  if(arr[i] < min) min = arr[i];\n}\n\nconsole.log(min,max);\n\
    </code>\n<|/ a |>\n<| c |>\n`max = arr[i]` should be `max = Math.max(arr[i])`\n\
    <|/ c |>\n<| c |>\nThis one works too. But `Math.max` return `NaN` if `arr[i]`\
    \ contains `NaN` number. `Math.max` may return `NaN` even if `arr[i]` is `NaN`\n\
    <|/ c |>\n<| c |>\nYes. But I \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpisl48sry.ts(11,2): error TS1110: Type expected.

    ../../../../../tmp/tmpisl48sry.ts(11,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpisl48sry.ts(12,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpisl48sry.ts(12,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpisl48sry.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpisl48sry.ts(13,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpisl48sry.ts(14,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(14,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(15,3): error TS1110: Type expected.

    ../../../../../tmp/tmpisl48sry.ts(15,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpisl48sry.ts(16,7): error TS1110: Type expected.

    ../../../../../tmp/tmpisl48sry.ts(17,7): error TS1005: '':'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,90): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,92): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,104): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,108): error TS1005: ''('' expected.

    ../../../../../tmp/tmpisl48sry.ts(17,112): error TS1005: '';'' expected.

    ../../../../../tmp/tmpisl48sry.ts(18,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpisl48sry.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpisl48sry.ts(18,4): error T'
  timestamp: 1659977744
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort();\n  return l[l.length - 1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpkhh8s29s.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkhh8s29s.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977745
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var m = 0, max = l[0], c;\n    for (var\
    \ i in l) {\n        if (c > l[i]) {\n            m = i;\n            max = l[i];\n\
    \        }\n        c = l[i];\n    }\n    return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbkscawf7.ts(10,13): error TS2322: Type ''string''
    is not assignable to type ''number''.

    '
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((max, item) => Math.max(max,\
    \ item));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(Math, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max: number = l[0];\n  for (let i:\
    \ number = 1; i< l.length; i++){\n      if (l[i] > max){\n          max = l[i];\n\
    \      }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977745
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(Math, l);\n}\n\
    </code>\n<|/ a tags=max,math,javascript,arrays |>\n<| a dscore=3 |>\n<code>\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoaz__0vg.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmpoaz__0vg.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpoaz__0vg.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpoaz__0vg.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpoaz__0vg.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpoaz__0vg.ts(11,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpoaz__0vg.ts(11,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpoaz__0vg.ts(13,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977744
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.sort(function (a, b) { return\
    \ b - a; });\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI really like your solution.\
    \ Using `max_element` I wrote my own function `select_first_non_positive_value`\
    \ in the following answer, which I believe is a bit more generic than yours.\n\
    <|/ c |>\n<| c |>\nGood answer! I added a similar approach with a `min_element`\
    \ that may be useful for anyone.\n<|/ c |>\n<| c |>\nIf you're going to return\
    \ 0 when all values are negative, you should change your `max_element` function\
    \ to be `return l.sort((a,b) => { return b - a || 0; })[0]`\n<|/ c |>\n<| a dscore=5\
    \ |>\nUsing ES6 with filter and Math.max\n\n<code>\nconst maxValue = array =>\
    \ Math.max(...array.filter(x => x > 0).toArray());\n\nconst data = [-1, 2, 3,\
    \ 5, 8];\n\nconsole.log(maxValue(data));</code>\n<|/ a tags=typescript,javascript,arrays\
    \ |>\n<| c |>\nThis works even if you pass in an array of strings.  This answer\
    \ was very helpful to me.\n<|/ c |>\n<| c |>\nThis is the most elegant solution,\
    \ especially if you have a large number of elements to sort on.\n<|/ c |>\n<|\
    \ c |>\nHow is this a better solution than the one with the `Math.max` method\
    \ in the other answer? The other solution is actually much slower!\n<|/ c |>\n\
    <| c |>\nI agree, this solution is much slower for large arrays but you already\
    \ know that so I didn't think it was a big deal.\n<|/ c |>\n<| c |>\nIn some cases\
    \ it is, but I needed this function to sort an array by another array of sorted\
    \ values, which means I really need the performance here.\n<|/ c |>\n<| a dscore=5\
    \ tags=typescript,javascript,arrays |>\nYou could filter the array and get the\
    \ largest value.\n<code>\nvar arr = [1, 2, 5, 3, -1];\nvar largest = arr.filter(function(el){return\
    \ el >= 0}).pop();\n</code>\n<|/ a |>\n<| c |>\nThis is elegant, but it will also\
    \ return 0 if all elements are negative, instead of returning the first non-positive\
    \ number. Perhaps you want to do `arr.filter(el => el >= 0).sort()[0]`\n<|/ c\
    \ |>\n<| c |>\nYeah, I guess you're right. I'll update the answer to make it a\
    \ little bit more robust.\n<|/ c |>\n<|\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsfaryize.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmpsfaryize.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpsfaryize.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpsfaryize.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpsfaryize.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpsfaryize.ts(11,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpsfaryize.ts(12,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,58): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,61): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,74): error TS1003: Identifier expected.

    ../../../../../tmp/tmpsfaryize.ts(12,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,125): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,139): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,141): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,149): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,152): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,154): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,158): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,163): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,171): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(12,176): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsfaryize.ts(13,1): error TS1003: Identifier expecte'
  timestamp: 1659977744
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let maxElt = l[0];\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] > maxElt) {\n            maxElt =\
    \ l[i];\n        }\n    }\n    return maxElt;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977745
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.reduce((max, x) => x > max\
    \ ? x : max, -Infinity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977745
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    let maxIndex =\
    \ 0;\n    let maxPosition = 0;\n    for (let i = 1; i < l.length; i++) {\n   \
    \     if (l[i] > max) {\n            maxPosition = i;\n            max = l[i];\n\
    \            maxIndex = i;\n        }\n    }\n    return max;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977745
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let m = -Infinity;\n  let n = +Infinity;\n\
    \  for (const e of l) {\n    if (e > n) n = e;\n    if (e < m) m = e;\n  }\n \
    \ return m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-Infinity\n\n\
    should loosely deep-equal\n\n3\n    at test (/tmp/tmpgghu3ynx.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgghu3ynx.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -Infinity,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977745
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var m = l[0];\n  for (var i = 1; i < l.length;\
    \ ++i) {\n    if (m) m = l[i]; else m = l[i];\n  }\n  return m;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-10\n\nshould\
    \ loosely deep-equal\n\n124\n    at test (/tmp/tmp0heydf6l.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0heydf6l.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -10,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977745
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  l.sort(function (a, b) { return a - b\
    \ });\n  return l[0];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpcwqrafps.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcwqrafps.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977745
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = 0;\n    for (const value of\
    \ l) {\n        max = Math.max(max, value);\n    }\n    return max;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977746
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.sort()[l.length - 1];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n124\n    at test (/tmp/tmpfbwbd4sx.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfbwbd4sx.js:15:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 124,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977746
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_value: number = 0;\n  let max_index\
    \ = 0;\n  for (let index = 0; index < l.length; index++) {\n    if (l[index] >\
    \ max_value) {\n      max_value = l[index];\n      max_index = index;\n    }\n\
    \  }\n  return l[max_index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    var m = Number.MAX_VALUE;\n    for(var\
    \ i = 0; i < l.length; i++) {\n        var v = l[i];\n        if (v > m) {\n \
    \           m = v;\n        }\n    }\n    return m;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1.7976931348623157e+308\n\
    \nshould loosely deep-equal\n\n3\n    at test (/tmp/tmpuhederxm.js:19:12)\n  \
    \  at Object.<anonymous> (/tmp/tmpuhederxm.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1.7976931348623157e+308,\n\
    \  expected: 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length > 0) {\n        let max\
    \ = l[0];\n        for (let i = 1; i < l.length; i++) {\n            if (l[i]\
    \ > max) {\n                max = l[i];\n            }\n        }\n        return\
    \ max;\n    } else {\n        return NaN;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let i = 1\n  let max = l[0]\n  while (i\
    \ < l.length) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n    i++\n  }\n\
    \  return max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max_i = l;\n    let max_k = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max_k) {\n     \
    \       max_k = l[i];\n        }\n        if (max_k === -Infinity) {\n       \
    \     throw new Error(\"Exceed max limit\");\n        }\n    }\n    return max_k;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  max_value = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n \
    \   }\n  }\n  return max_value;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_bfcws2v.ts(7,3): error TS2304: Cannot find name
    ''max_value''.

    ../../../../../tmp/tmp_bfcws2v.ts(9,16): error TS2304: Cannot find name ''max_value''.

    ../../../../../tmp/tmp_bfcws2v.ts(10,7): error TS2304: Cannot find name ''max_value''.

    ../../../../../tmp/tmp_bfcws2v.ts(13,10): error TS2304: Cannot find name ''max_value''.

    '
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(null, l);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(null, l)\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let a = l[0]\n  for (let i = 1; i < l.length;\
    \ i++) {\n    a = Math.max(a, l[i])\n  }\n  return a\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.reduce((a, b) => Math.max(a,\
    \ b), -Infinity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    throw 'max_element()\
    \ called with an empty array';\n  }\n  let minElement = l[0];\n  let maxElement\
    \ = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < minElement)\
    \ {\n      minElement = l[i];\n    }\n    if (l[i] > maxElement) {\n      maxElement\
    \ = l[i];\n    }\n  }\n  return maxElement;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    const l = l.slice();\n    let max =\
    \ 0;\n    for (let i = 0; i < l.length; ++i) {\n        const x = l[i];\n    \
    \    if (x > max) {\n            max = x;\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp39hlphdp.ts(6,22): error TS2300: Duplicate identifier
    ''l''.

    ../../../../../tmp/tmp39hlphdp.ts(7,11): error TS2300: Duplicate identifier ''l''.

    '
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l)\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((a, b) => a > b ? a :\
    \ b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let maxVal: number = null;\n    for\
    \ (let el of l) {\n        if (!isNaN(el)) {\n            if (!maxVal) maxVal\
    \ = el;\n            else if (maxVal < el) maxVal = el;\n        }\n    }\n  \
    \  return maxVal;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max(...l);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return l.reduce((p, c) => (p > c ? p\
    \ : c));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977748
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let maxElement = l[0];\n  for (let i =\
    \ 1; i < l.length; i++) {\n    if (l[i] > maxElement) maxElement = l[i];\n  }\n\
    \  return maxElement;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (const e of l) {\n\
    \    if (e > max) max = e\n  }\n  return max\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977748
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n\n    for (let i =\
    \ 1; i < l.length; i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977748
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return max_el(l, 0, l.length - 1);\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvk6pr8r9.ts(7,12): error TS2304: Cannot find name
    ''max_el''.

    '
  timestamp: 1659977747
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977696
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_val = l[0];\n  for (let i = 1;\
    \ i < l.length; i++) {\n    if (max_val > l[i])\n      max_val = l[i];\n  }\n\
    \  return max_val;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppmr7i0p8.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppmr7i0p8.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977748
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    return 0\n\
    \  }\n  const m = l[0]\n  let idx = 1\n  for (let i = 1; i < l.length; i++) {\n\
    \    if (l[i] > m) {\n      idx = i\n      m = l[i]\n    }\n  }\n  return l[idx]\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdgbunljv.ts(15,7): error TS2588: Cannot assign to
    ''m'' because it is a constant.

    '
  timestamp: 1659977748
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max: number = null;\n  let maxIndex:\
    \ number = null;\n  for (let i = 0; i < l.length; i++) {\n    if (max === null\
    \ && l[i] !== null) max = l[i];\n    else if (max !== null && l[i] === null) max\
    \ = l[i];\n    if (maxIndex === null || max < maxIndex) {\n      maxIndex = max;\n\
    \    }\n  }\n  return maxIndex;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmphatskhaa.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphatskhaa.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    throw new Error(\"\
    max_element\");\n  }\n  if (l.length === 1) {\n    return l[0];\n  }\n  var max\
    \ = l[0];\n  for (var i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n   \
    \   max = l[i];\n    }\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  const max = Math.max(...l);\n  return\
    \ l.indexOf(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmpa68a6hhc.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa68a6hhc.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977749
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    const maxElement = l[0];\n    for (let\
    \ i = 1; i < l.length; i++) {\n        if (l[i] > maxElement) {\n            maxElement\
    \ = l[i];\n        }\n    }\n    return maxElement;\n}\nexport function sum():\
    \ number {\n    return sum_012(this._v);\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqar3lg6.ts(10,13): error TS2588: Cannot assign to
    ''maxElement'' because it is a constant.

    ../../../../../tmp/tmpwqar3lg6.ts(16,12): error TS2304: Cannot find name ''sum_012''.

    '
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length === 0) {\n    return null;\
    \ // no elements\n  }\n\n  // get first element\n  let max = l[0];\n\n  // loop\
    \ through remaining elements\n  for (let i = 1; i < l.length; i++) {\n    if (l[i]\
    \ > max) {\n      max = l[i];\n    }\n  }\n\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var m = -Infinity;\n  var l = l.map(function(x)\
    \ { return Math.max(m, x); });\n  return l.reduce(function(x, y) { return Math.max(x,\
    \ y); });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        throw\
    \ new Error(\"max_element called with an empty array\");\n    }\n    let maxElement\
    \ = l[0];\n    for (let i = 1; i < l.length; i++) {\n        let val = l[i];\n\
    \        if (val > maxElement) {\n            maxElement = val;\n        }\n \
    \   }\n    return maxElement;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  const max = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n \
    \ return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphkd8a1fm.ts(10,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1659977749
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max_index = -1;\n    let max_value\
    \ = -Infinity;\n\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] >\
    \ max_value) {\n            max_index = i;\n            max_value = l[i];\n  \
    \      }\n    }\n    return max_index;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmppunqz71b.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppunqz71b.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max_value = l[0],\n        second_max_value\
    \ = 0;\n\n    for (const element of l) {\n        if (element > max_value) {\n\
    \            max_value = element;\n        }\n        if (element > second_max_value)\
    \ {\n            second_max_value = element;\n        }\n    }\n    return second_max_value;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(Math, l)\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce((a, b) => a > b ? a :\
    \ b)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977750
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max_num = l[0];\n    for (let i\
    \ = 1; i < l.length; i++) {\n        if (l[i] > max_num) {\n            max_num\
    \ = l[i];\n        }\n    }\n    return max_num;\n}\nexport var max_element: typeof\
    \ max_element;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5vmrcyn_.ts(6,10): error TS2300: Duplicate identifier
    ''max_element''.

    ../../../../../tmp/tmp5vmrcyn_.ts(15,12): error TS2300: Duplicate identifier ''max_element''.

    '
  timestamp: 1659977749
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.sort(function (a, b) { return\
    \ a < b ? -1 : 1; }).pop();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977749
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return l.reduce(max_element_);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9r005u9d.ts(7,19): error TS2552: Cannot find name
    ''max_element_''. Did you mean ''max_element''?

    '
  timestamp: 1659977750
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0],\n        max = Math.max(max,\
    \ l[0]),\n        max = Math.max(max, l[1]),\n        max = Math.max(max, l[2]);\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpca2ubwil.ts(7,9): error TS2451: Cannot redeclare
    block-scoped variable ''max''.

    ../../../../../tmp/tmpca2ubwil.ts(8,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpca2ubwil.ts(9,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    ../../../../../tmp/tmpca2ubwil.ts(10,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1659977750
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  const max = l[0];\n  for (let i = 1; i\
    \ < l.length; i++) {\n    if (l[i] > max)\n      max = l[i];\n  }\n  return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcy01ukuf.ts(10,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1659977750
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max.apply(null, l);\n}\n</code>\n\
    <|/ a dscore=4 |>\n<| c |>\nThis answer doesn't make any reference to what was\
    \ asked in the question, which is \"how to find the max of an array quickly\"\
    .\n<|/ c |>\n<| c |>\n: I agree this answer is unclear and should be downvoted.\
    \ I've removed my downvote. However I added a note at the top of the answer.\n\
    <|/ c |>\n<| c |>\nI agree! The question asks for a solution that is fast and\
    \ simple, not that it's \"efficient\" because it's based on some inefficient algorithm.\
    \ An \"efficient\" algorithm would use an already existing library or function,\
    \ such as the one you provided.\n<|/ c |>\n<| c |>\nI agree with you that \"efficient\"\
    \ is not the right term to say it fast. But the question asks for a solution which\
    \ is \"quick and simple\". Which means using existing libraries or functions is\
    \ out of scope. Which means efficiency of the solution is out of scope as well.\
    \ Also, I'm not downvoting because you answered the question incorrectly. The\
    \ question asked for a solution that is quick and simple, which is what this answer\
    \ is for. Also it's not about efficient vs inefficient.\n<|/ c |>\n<| c |>\nThank\
    \ you for your answer. I've upvoted your answer for now, even though I see many\
    \ people here downvote answers that they think are \"inefficient\". I'd appreciate\
    \ it if you could comment on that. Thanks again!\n<|/ c |>\n<| a dscore=3 |>\n\
    You could use Array.prototype.filter and Math.max like this:\n<code>\nMath.max.apply(null,\
    \ arr.filter(function (x) { return x != null; }));\n</code>\nor with ES6 syntax\
    \ like so:\n<code>\nMath.max(...arr.filter(x => x != null));\n</code>\n<|/ a tags=arrays,javascript,sorting\
    \ |>\n<| c |>\nUsing ES6 syntax may confuse people who are not familiar with the\
    \ differences.\n<|/ c |>\n<| c |>\nYou're right, thanks for pointing that out.\
    \  I was only thinking of people who already understand the syntax of `filter`\
    \ and how it works.\n<|/ c |>\n<| c |>\nNo problem. I'm just a little curious\
    \ as to why someone would vote this down. It looks like it has the potential to\
    \ be fast for an array with only null values.  Why are you suggesting that's not\
    \ true? If your array has only null values then your answer works fine.\n<|/ c\
    \ |>\n<| c |>\n: I was \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmktovs34.ts(9,2): error TS1110: Type expected.

    ../../../../../tmp/tmpmktovs34.ts(9,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmktovs34.ts(10,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmktovs34.ts(10,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmktovs34.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmktovs34.ts(11,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpmktovs34.ts(12,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmktovs34.ts(12,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmktovs34.ts(12,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmktovs34.ts(12,126): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpmktovs34.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmktovs34.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmktovs34.ts(14,7): error TS1110: Type expected.

    ../../../../../tmp/tmpmktovs34.ts(15,1): error TS1005: ''('' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,5): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,11): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,16): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,23): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,26): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,34): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,38): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,45): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,48): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,60): error TS1005: '','' expected.

    ../../../../../tmp/tmpmktovs34.ts(15,133): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpmktovs34.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmktovs34.ts(16,4): error TS1161: Unterminated regular expression
    litera'
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977694
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0],\n      i = 1,\n      len\
    \ = l.length;\n  while (i < len) {\n    if (l[i] > max) {\n      max = l[i];\n\
    \    }\n    i++;\n  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  if (l.length > 0) {\n    var maxIndex\
    \ = -1;\n    var maxValue = -Infinity;\n    for (var i = 0; i < l.length; i++)\
    \ {\n      if (l[i] > maxValue) {\n        maxIndex = i;\n        maxValue = l[i];\n\
    \      }\n    }\n    return maxValue;\n  } else {\n    return -Infinity;\n  }\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = l[0]\n  for (let i = 1; i <\
    \ l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return\
    \ max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977734
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let maxVal: number = -Infinity;\n  \
    \  let maxIndex: number = 0;\n    for (let i = 0; i < l.length; i++) {\n     \
    \   if (l[i] > maxVal) {\n            maxVal = l[i];\n            maxIndex = i;\n\
    \        }\n    }\n    return maxVal;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977750
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    if (l.length === 0) {\n        throw\
    \ new NoElementException('The array is empty');\n    }\n    let maxElement = l[0];\n\
    \    for (let i = 1; i < l.length; i++) {\n        if (l[i] > maxElement) {\n\
    \            maxElement = l[i];\n        }\n    }\n    return maxElement;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpes2ln0u3.ts(8,19): error TS2304: Cannot find name
    ''NoElementException''.

    '
  timestamp: 1659977750
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max: number = Number.MIN_VALUE;\n\
    \    let index: number;\n\n    for (let i = 0; i < l.length; i++) {\n        if\
    \ (l[i] > max) {\n            max = l[i];\n            index = i;\n        }\n\
    \    }\n\n    return l[index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  return Math.max(...l)\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 1;\
    \ i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n \
    \       }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821428
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max = Number.NEGATIVE_INFINITY\n \
    \ for (let i = 0; i < l.length; i++) {\n    const element = l[i]\n    if (element\
    \ > max) {\n      max = element\n    }\n  }\n  return max\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max(...l);\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977696
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    const l = l.slice().sort((a, b) => a\
    \ - b);\n    return l[0];\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should\
    \ be the right answer, as the other solutions do not work for negative numbers.\
    \ This is the most concise answer that actually works. A better solution is to\
    \ return null, not 0.\n<|/ c |>\n<| c |>\nThis is a great answer. Nice and easy\
    \ to use.\n<|/ c |>\n<| c |>\nThis is the correct answer.\n<|/ c |>\n<| a dscore=4\
    \ tags=arrays,javascript |>\nThe shortest way to do this is the following:\n<code>\n\
    const result = arr.sort((a, b) => b - a)[0]\n</code>\nYou simply return the highest\
    \ number in the array.\n<|/ a |>\n<| a dscore=4 |>\nTo get maximum value from\
    \ array of integer or float type:\n<code>\nvar largest = Math.max.apply(null,\
    \ arr);\n</code>\n<|/ a tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\nThe max function is defined as a member of Math object.\n<code>\nvar max\
    \ = function(numbers) {\n    return Math.max.apply(null, numbers);\n};\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 tags=arrays,javascript |>\nThe Math.max() function\
    \ can be used to find the maximum value of the numbers in an array:\n<code>\n\
    Math.max.apply(null, arrayOfNumbers);\n</code>\nThe Math.max() function takes\
    \ any number of arguments, each of which is the same type as the corresponding\
    \ element in the arrayOfNumbers array.\n<code>\nMath.max([7, 3, -20, 5, 9]); //\
    \ 20\nMath.max(-3, 9, 6, 2, 10, 8); // 10\nMath.max(\"hey\", \"hello\", false);\
    \ // \"hello\"\nMath.max(7.1, true, 9.8, 7.6, false); // 9.8\n</code>\n<|/ a |>\n\
    <| a |>\nTry this \n<code>\nvar maxValue=Math.max.apply(Math, arrayOfNumbers);\n\
    </code>\n<|/ a dscore=3 tags=arrays,javascript |>\n<| a tags=arrays,javascript\
    \ |>\nYou can get maximum value from an array of numeric values\n<code>\nvar maxValue\
    \ = Math.max.apply(Math, arr);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer\
    \ doesn't provide any new information that the other answers haven't already covered.\n\
    <|/ c |>\n<| c |>\nThe answers given by others already covered the question. The\
    \ purpose of my answer was to provide an alternative, which may help someone who\
    \ just wants the maximum value, and not the index, hence the title.\n<|/\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprzdx5eir.ts(10,2): error TS1110: Type expected.

    ../../../../../tmp/tmprzdx5eir.ts(10,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmprzdx5eir.ts(11,2): error TS1109: Expression expected.

    ../../../../../tmp/tmprzdx5eir.ts(11,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmprzdx5eir.ts(12,2): error TS1109: Expression expected.

    ../../../../../tmp/tmprzdx5eir.ts(12,7): error TS1109: Expression expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,69): error TS1005: '')'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,73): error TS1005: ''('' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,82): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,99): error TS1005: '')'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,103): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,108): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,116): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,123): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,128): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,137): error TS1005: '';'' expected.

    ../../../../../tmp/tmprzdx5eir.ts(13,146): error TS1005: '';'' expected.

    ../../../../'
  timestamp: 1659977751
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  const m = l.reduce(max);\n  return m ===\
    \ -Infinity ? 0 : m;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjs4s7o4_.ts(7,22): error TS2304: Cannot find name
    ''max''.

    '
  timestamp: 1659977751
- exit_code: 1
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var i: number = 0,\n    m: number = 0,\n\
    \    y: number = l[0];\n  for (i = 0; i < l.length; i++) {\n    if (l[i] > y)\
    \ {\n      m = i;\n      y = l[i];\n    }\n  }\n  return m;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n3\n    at test (/tmp/tmp847nzb5d.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp847nzb5d.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 3,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977751
- exit_code: 2
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  var max = l[0], i = 1;\n  while (i < l.length\
    \ && l[i] > max) {\n    max = l[i];\n  }\n  return max;\n}\n</code>\n<|/ a tags=max,arrays,javascript\
    \ dscore=2 |>\n<| a tags=max,arrays,javascript |>\n<code>\nvar arr = [1, 5, 3,\
    \ 7, 9, 2]\n\nvar max = -Infinity;\nfor (var el of arr){\n    if (el > max){\n\
    \        max = el\n    }\n}\n\nconsole.log(max)\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=max,arrays,javascript |>\n<code>\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = max_element;\n\
    \  assert.deepEqual(candidate([1, 2, 3]),3);\n  assert.deepEqual(candidate([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpczylsgji.ts(13,2): error TS1110: Type expected.

    ../../../../../tmp/tmpczylsgji.ts(13,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpczylsgji.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(14,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpczylsgji.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(15,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpczylsgji.ts(15,34): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(17,1): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpczylsgji.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpczylsgji.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(29,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpczylsgji.ts(29,34): error TS1109: Expression expected.

    ../../../../../tmp/tmpczylsgji.ts(31,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let res = Number.NEGATIVE_INFINITY;\n\
    \n    for (let i = 0; i < l.length; i++) {\n        let e = l[i];\n        if\
    \ (e > res) {\n            res = e;\n        }\n    }\n\n    return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n  let max_num = 0;\n  for (let i = 0; i\
    \ < l.length; i++) {\n    if (l[i] > max_num) {\n      max_num = l[i];\n    }\n\
    \  }\n  return max_num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    let i: number;\n    let j: number;\n\
    \    let aMax = l[0];\n    for (i = 1; i < l.length; i++) {\n        if (l[i]\
    \ > aMax) {\n            aMax = l[i];\n        }\n    }\n    return aMax;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977751
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: number[]): number {\n    return Math.max.apply(Math, l);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977737
