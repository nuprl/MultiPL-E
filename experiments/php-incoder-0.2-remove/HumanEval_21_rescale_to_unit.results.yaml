language: php
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $number) {\n    $number *= $scale;\n  }\n  return $numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj9_r1rt.php:18\n\
    Stack trace:\n#0 /tmp/tmpqj9_r1rt.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqj9_r1rt.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range);\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmplx5p3tds.php on line 7\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmplx5p3tds.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmplx5p3tds.php:23\nStack trace:\n\
    #0 /tmp/tmplx5p3tds.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplx5p3tds.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryeoor0k.php:20\n\
    Stack trace:\n#0 /tmp/tmpryeoor0k.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpryeoor0k.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($value) use ($min, $max, $range) {\n        return\
    \ $value / $range * $max - $min;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpzva13sxj.php on line 7\n\nWarning: Division by zero in /tmp/tmpzva13sxj.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpzva13sxj.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpzva13sxj.php:18\nStack\
    \ trace:\n#0 /tmp/tmpzva13sxj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzva13sxj.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $key => $number) {\n        $numbers[$key] = $number\
    \ * $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuw8ndp8.php:19\n\
    Stack trace:\n#0 /tmp/tmpuuw8ndp8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpuuw8ndp8.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp3ax_u5r7.php on line 7\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ax_u5r7.php:20\nStack\
    \ trace:\n#0 /tmp/tmp3ax_u5r7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3ax_u5r7.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcofp91qx.php:17\n\
    Stack trace:\n#0 /tmp/tmpcofp91qx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcofp91qx.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3um9jzg.php:18\n\
    Stack trace:\n#0 /tmp/tmpp3um9jzg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp3um9jzg.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = round(($number\
    \ - $new_min) / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp23p9rmht.php on line 7\n\nWarning: Division by zero in /tmp/tmp23p9rmht.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmp23p9rmht.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmp23p9rmht.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp23p9rmht.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmp23p9rmht.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp23p9rmht.php:23\nStack trace:\n\
    #0 /tmp/tmp23p9rmht.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp23p9rmht.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) use ($min, $max) {\n    return $number - $min / $range;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` doesn't seem to accept a callback that returns an array (it only\
    \ accepts a callback that returns one value).\n<|/ c |>\n<| c |>\nI fixed the\
    \ typo. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` doesn't seem to accept a callback that returns an array (it only\
    \ accepts a callback that returns one value).\n<|/ c |>\n<| c |>\nI fixed the\
    \ typo. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` doesn't seem to accept a callback that returns an array (it only\
    \ accepts a callback that returns one value).\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj8tydnjv.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($value) use ($min, $max) {\n        return ($value\
    \ - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpjp6ykr_q.php on line 7\n\nWarning: Division by zero in /tmp/tmpjp6ykr_q.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpjp6ykr_q.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpjp6ykr_q.php:18\nStack\
    \ trace:\n#0 /tmp/tmpjp6ykr_q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjp6ykr_q.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrm2e2zu.php:19\n\
    Stack trace:\n#0 /tmp/tmpsrm2e2zu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsrm2e2zu.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1zt08by.php:17\n\
    Stack trace:\n#0 /tmp/tmpj1zt08by.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpj1zt08by.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ $number - ($range * floor(($number - $min) / $range));\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp7hnblia3.php on line 7\n\nWarning: Division by zero in /tmp/tmp7hnblia3.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmp7hnblia3.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7hnblia3.php:18\nStack\
    \ trace:\n#0 /tmp/tmp7hnblia3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7hnblia3.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range);\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmplx5p3tds.php on line 7\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmplx5p3tds.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmplx5p3tds.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmplx5p3tds.php:23\nStack trace:\n\
    #0 /tmp/tmplx5p3tds.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplx5p3tds.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function($number)\
    \ { return $number * $scale; }, $numbers);\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmz9skgwn.php:15\n\
    Stack trace:\n#0 /tmp/tmpmz9skgwn.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpmz9skgwn.php\
    \ on line 15\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) {\n        return $number / $range;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpflzq9wrm.php on line 7\n\nWarning: Division by zero in /tmp/tmpflzq9wrm.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpflzq9wrm.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpflzq9wrm.php:18\nStack\
    \ trace:\n#0 /tmp/tmpflzq9wrm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpflzq9wrm.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return ($num\
    \ - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpa0eylfv9.php on line 7\n\nWarning: Division by zero in /tmp/tmpa0eylfv9.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpa0eylfv9.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpa0eylfv9.php:18\nStack\
    \ trace:\n#0 /tmp/tmpa0eylfv9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa0eylfv9.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers[$min] =\
    \ 0;\n    $numbers[$max] = 1;\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4phbses.php:20\n\
    Stack trace:\n#0 /tmp/tmpa4phbses.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa4phbses.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpte08qi0n.php:19\n\
    Stack trace:\n#0 /tmp/tmpte08qi0n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpte08qi0n.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers = array_map(function\
    \ ($number) { return $number / $max; }, $numbers);\n    return $numbers;\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpxk6auj0j.php on line 10\n\nWarning:\
    \ Division by zero in /tmp/tmpxk6auj0j.php on line 10\n\nWarning: Division by\
    \ zero in /tmp/tmpxk6auj0j.php on line 10\n\nWarning: Division by zero in /tmp/tmpxk6auj0j.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxk6auj0j.php:19\n\
    Stack trace:\n#0 /tmp/tmpxk6auj0j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxk6auj0j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $number) {\n    $number *= $scale;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe490gm7i.php:19\n\
    Stack trace:\n#0 /tmp/tmpe490gm7i.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpe490gm7i.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqup_fqm4.php:18\n\
    Stack trace:\n#0 /tmp/tmpqup_fqm4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqup_fqm4.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $number - $min;\n    }\n    return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwxa_mhh.php:18\n\
    Stack trace:\n#0 /tmp/tmpgwxa_mhh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgwxa_mhh.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcofp91qx.php:17\n\
    Stack trace:\n#0 /tmp/tmpcofp91qx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcofp91qx.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range * 2 - 1;\n    }\n    return $new_numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp4fkcezej.php on line 7\n\nWarning: Division by zero in /tmp/tmp4fkcezej.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp4fkcezej.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fkcezej.php:20\nStack\
    \ trace:\n#0 /tmp/tmp4fkcezej.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4fkcezej.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function($n) use ($min, $max, $range) {\n        return\
    \ ($n - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpus1zzbs_.php on line 7\n\nWarning: Division by zero in /tmp/tmpus1zzbs_.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpus1zzbs_.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpus1zzbs_.php:18\nStack\
    \ trace:\n#0 /tmp/tmpus1zzbs_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpus1zzbs_.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($number)\
    \ {\n        return $number - $min;\n    }, array_values($numbers));\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnaz1kcv1.php:17\n\
    Stack trace:\n#0 /tmp/tmpnaz1kcv1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnaz1kcv1.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp3ax_u5r7.php on line 7\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ax_u5r7.php:20\nStack\
    \ trace:\n#0 /tmp/tmp3ax_u5r7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3ax_u5r7.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1h0b_kj.php:18\n\
    Stack trace:\n#0 /tmp/tmpg1h0b_kj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg1h0b_kj.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba1ztgvv.php:19\n\
    Stack trace:\n#0 /tmp/tmpba1ztgvv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpba1ztgvv.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range\
    \ = array_map('abs', $range);\n    $range = array_sum($range);\n    $range = array_map('sqrt',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('ceil',\
    \ $range);\n    $range = array_map('floor', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_map('round', $range);\n    $range = array_map('round',\
    \ $range);\n    $range = array_\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfp4kp5sr.php on line 59

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrm2e2zu.php:19\n\
    Stack trace:\n#0 /tmp/tmpsrm2e2zu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsrm2e2zu.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = range($min, $max);\n  $new_range = array_map('round',\
    \ $range);\n  $new_range = array_combine($new_range, $range);\n  return $new_range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki9hyyq6.php:18\n\
    Stack trace:\n#0 /tmp/tmpki9hyyq6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpki9hyyq6.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    return array_map(function ($num) use ($new_min, $new_max) {\n        return\
    \ ($num - $new_min) / ($new_max - $new_min);\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpdq24dq0g.php on line 7\n\nWarning: Division by zero in /tmp/tmpdq24dq0g.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpdq24dq0g.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdq24dq0g.php:20\nStack\
    \ trace:\n#0 /tmp/tmpdq24dq0g.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdq24dq0g.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $i => $number)\
    \ {\n        $numbers[$i] = $number - $min;\n    }\n    $numbers[0] = $min - 1;\n\
    \    $numbers[count($numbers) - 1] = $max - 1;\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1fkooubq.php:20\n\
    Stack trace:\n#0 /tmp/tmp1fkooubq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1fkooubq.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = range($min, $max);\n\
    \    $scale = ($max - $min) / count($range);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $range * $number / $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpcwmn031h.php:10\n\
    Stack trace:\n#0 /tmp/tmpcwmn031h.php(16): rescale_to_unit(Array)\n#1 /tmp/tmpcwmn031h.php(20):\
    \ candidate(Array)\n#2 /tmp/tmpcwmn031h.php(27): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpcwmn031h.php on line 10\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $key => $number) {\n        $numbers[$key] = $number\
    \ * $scale;\n    }\n    return $numbers;\n}\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzzui43el.php:18\n\
    Stack trace:\n#0 /tmp/tmpzzui43el.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzzui43el.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrm2e2zu.php:19\n\
    Stack trace:\n#0 /tmp/tmpsrm2e2zu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsrm2e2zu.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I\
    \ tried your code, but I got this error: `Fatal error: Call to undefined function\
    \ array_map()`. Any idea?\n<|/ c |>\n<| c |>\nOh, sorry, I forgot that `array_map`\
    \ was a PHP 5.3 function. I updated my answer with a PHP 5.2 compatible version.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your code, but I got this error:\
    \ `Fatal error: Call to undefined function array_map()`. Any idea?\n<|/ c |>\n\
    <| c |>\nOh, sorry, I forgot that `array_map` was a PHP 5.3 function. I updated\
    \ my answer with a PHP 5.2 compatible version.\n<|/ c |>\n<| a tags=php,arrays,math\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map('round',\
    \ $numbers);\n$numbers = array_map('ceil', $numbers);\n$numbers = array_map('floor',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,math |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map('round', $numbers);\n\
    $numbers = array_map('ceil', $numbers);\n$numbers = array_map('floor', $numbers);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map('round', $numbers);\n$numbers = array_map('ceil', $numbers);\n\
    $numbers = array_map('floor', $numbers);\n</code>\n<|/ a dscore=0 |>\n<| a |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map('round',\
    \ $numbers);\n$numbers = array_map('ceil', $numbers);\n$numbers = array_map('floor',\
    \ $numbers);\n</code>\n<|/ a dscore=0 tags=php,arrays,math |>\n<| a dscore=0 |>\n\
    <code>\n$numbers = array(1,2,3,4,5,\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgftdhsz9.php on line 13

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcofp91qx.php:17\n\
    Stack trace:\n#0 /tmp/tmpcofp91qx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcofp91qx.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return $min + ($numbers\
    \ - $min) / $range;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp56fy5dot.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmp56fy5dot.php:8\nStack trace:\n#0 /tmp/tmp56fy5dot.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmp56fy5dot.php(16): candidate(Array)\n#2 /tmp/tmp56fy5dot.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp56fy5dot.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = round(($number\
    \ - $new_min) / $new_range) * $new_range + $new_min;\n    }\n    return $new_numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp8_099_t6.php on line 7\n\nWarning: Division by zero in /tmp/tmp8_099_t6.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmp8_099_t6.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmp8_099_t6.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp8_099_t6.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmp8_099_t6.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp8_099_t6.php:23\nStack trace:\n\
    #0 /tmp/tmp8_099_t6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8_099_t6.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   return array_map(function ($number) use ($scale) {\n        return $number\
    \ * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4d40jlo8.php:18\n\
    Stack trace:\n#0 /tmp/tmp4d40jlo8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4d40jlo8.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max, $range) {\n        return\
    \ ($num - $min) / $range;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,math,algorithm |>\nI came up with this solution:\n<code>\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjpzlrsro.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   return array_map(function ($number) use ($scale) {\n        return $number\
    \ * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately this does not work. `array_map` returns a new\
    \ array and does not modify the original array. `array_map` also does not allow\
    \ you to specify an arbitrary number of arguments. I ended up writing my own `array_map`\
    \ function which allows me to specify an arbitrary number of arguments.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI ended up writing my own array_map function which allows\
    \ me to specify an arbitrary number of arguments. I used the code from this answer:\
    \ https://stackoverflow.com/a/4709644/1067003\n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_nddmlst.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp3ax_u5r7.php on line 7\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ax_u5r7.php:20\nStack\
    \ trace:\n#0 /tmp/tmp3ax_u5r7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3ax_u5r7.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min;\n    }, array_values($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpmh7jfc88.php on line 7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmh7jfc88.php:18\nStack trace:\n#0 /tmp/tmpmh7jfc88.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmh7jfc88.php on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n\
    \    foreach ($numbers as $i => $number) {\n        $numbers[$i] = $number * $scale;\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpub_ez3kq.php:19\n\
    Stack trace:\n#0 /tmp/tmpub_ez3kq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpub_ez3kq.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwqq0kll.php:17\n\
    Stack trace:\n#0 /tmp/tmpbwqq0kll.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbwqq0kll.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ $number - ($min - $range) / 2;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp9uyyut0k.php on line 7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9uyyut0k.php:18\nStack trace:\n#0 /tmp/tmp9uyyut0k.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9uyyut0k.php on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    return $range;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddkjnis8.php:19\n\
    Stack trace:\n#0 /tmp/tmpddkjnis8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpddkjnis8.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  foreach ($numbers as\
    \ $number) {\n    $number *= $scale;\n  }\n  return $numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6iaa1lp.php:18\n\
    Stack trace:\n#0 /tmp/tmpm6iaa1lp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpm6iaa1lp.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    return array_map(function ($num) use ($new_min, $new_max) {\n\
    \        return ($num - $new_min) / ($new_max - $new_min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpcfnq5qeh.php on line 7\n\nWarning: Division by zero in /tmp/tmpcfnq5qeh.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpcfnq5qeh.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcfnq5qeh.php:20\nStack\
    \ trace:\n#0 /tmp/tmpcfnq5qeh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcfnq5qeh.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   return array_map(function ($number) use ($scale) {\n        return $number\
    \ * $scale;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4d40jlo8.php:18\n\
    Stack trace:\n#0 /tmp/tmp4d40jlo8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4d40jlo8.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('round', $range);\n\
    \  return array_combine($range, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9lq41x7.php:24\n\
    Stack trace:\n#0 /tmp/tmpx9lq41x7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx9lq41x7.php\
    \ on line 24\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = ($range == 0) ? 0 : (1 / $range);\n    foreach ($numbers as &$number)\
    \ {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp9n3ixsvo.php on line 7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9n3ixsvo.php:20\nStack trace:\n#0 /tmp/tmp9n3ixsvo.php(27): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9n3ixsvo.php on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = range($min, $max);\n\
    \    $rescaled = [];\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = $number / $range[$min];\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfvm6kt5.php:20\n\
    Stack trace:\n#0 /tmp/tmpbfvm6kt5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpbfvm6kt5.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 0
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($number)\
    \ use ($min, $max) {\n        return ($number - $min) / ($max - $min);\n    },\
    \ $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max) {\n        return $min\
    \ + ($number - $min) / $range;\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't seem to work. I've tried\
    \ it on several examples and it just doesn't seem to work. I've also tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it \nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0e3g6o_9.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as &$number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpoqby1ntw.php on line 7\n\nWarning: Division by zero in /tmp/tmpoqby1ntw.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqby1ntw.php:20\n\
    Stack trace:\n#0 /tmp/tmpoqby1ntw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpoqby1ntw.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($number)\
    \ {\n        return ($number - $min) / ($max - $min);\n    }, $numbers);\n}\n\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp13r1glv6.php on line 8\n\nWarning:\
    \ Division by zero in /tmp/tmp13r1glv6.php on line 8\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp13r1glv6.php:17\nStack trace:\n#0 /tmp/tmp13r1glv6.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp13r1glv6.php on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_range = 1 / $range;\n    $new_min = $min * $new_range;\n    $new_max\
    \ = $max * $new_range;\n    $new_numbers = array();\n    foreach ($numbers as\
    \ $number) {\n        $new_numbers[] = round($number / $new_range) * $new_range;\n\
    \    }\n    return $new_numbers;\n}\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpx_4aec01.php on line 7\n\nWarning: Division by zero in /tmp/tmpx_4aec01.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_4aec01.php:22\n\
    Stack trace:\n#0 /tmp/tmpx_4aec01.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx_4aec01.php\
    \ on line 22\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $i => $number)\
    \ {\n        $numbers[$i] = (float) $number / $max * ($max - $min) + $min;\n \
    \   }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1et43zo8.php:18\n\
    Stack trace:\n#0 /tmp/tmp1et43zo8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1et43zo8.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = ($max - $min);\n  foreach ($numbers as $key\
    \ => $value) {\n    $numbers[$key] = $value / $scale;\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfryx6i72.php:19\n\
    Stack trace:\n#0 /tmp/tmpfryx6i72.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfryx6i72.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n</code>\n<|/ a tags=php,math |>\n<|\
    \ c |>\nThis doesn't seem to work. `rescale_to_unit([-10, -20, -30, -40, -50,\
    \ -60, -70, -80, -90])` returns `[-10, -20, -30, -40, -50, -60, -70, -80, -90]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used `rescale_to_unit([-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90])` as the input array and got `[-10, -20,\
    \ -30, -40, -50, -60, -70, -80, -90]` as the output. Maybe you used it incorrectly?\
    \ I used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70, -80, -90])` as the\
    \ input array and got `[-10, -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\n\
    <|/ c |>\n<| c |>\nI used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90])` as the input array and got `[-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90]` as the output. Maybe you used it incorrectly? I used `rescale_to_unit([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90])` as the input array and got `[-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\n<|/ c |>\n<| c |>\n\
    I used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70, -80, -90])` as the\
    \ input array and got `[-10, -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\
    \ Maybe you used it incorrectly? I used `rescale_to_unit([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90])` as the input array and got `[-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90]` as the output.\n<|/ \nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoxbhw66f.php on line 13

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpy6ap78y1.php on line 7\n\nWarning: Division by zero in /tmp/tmpy6ap78y1.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpy6ap78y1.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy6ap78y1.php:18\nStack\
    \ trace:\n#0 /tmp/tmpy6ap78y1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy6ap78y1.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max, $range) {\n        return\
    \ $num - $min / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp9cbsgu7p.php on line 7\n\nWarning: Division by zero in /tmp/tmp9cbsgu7p.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmp9cbsgu7p.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9cbsgu7p.php:18\nStack\
    \ trace:\n#0 /tmp/tmp9cbsgu7p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp9cbsgu7p.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 0
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = range($min, $max);\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / ($max - $min);\n    }\n    return $rescaled;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_range = 1 / $range;\n    $new_min = round($min * $new_range);\n    $new_max\
    \ = round($max * $new_range);\n    $new_numbers = array();\n    foreach ($numbers\
    \ as $number) {\n        $new_numbers[] = round($number * $new_range);\n    }\n\
    \    return $new_numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpj09z1e5g.php on line 7\n\nWarning: Division by zero in /tmp/tmpj09z1e5g.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj09z1e5g.php:23\n\
    Stack trace:\n#0 /tmp/tmpj09z1e5g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj09z1e5g.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv9aneku.php:19\n\
    Stack trace:\n#0 /tmp/tmpsv9aneku.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsv9aneku.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return array_map(function\
    \ ($number) { return $number * $scale; }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't seem to work.\
    \ I've added an example of the array I'm working with in the original question.\n\
    <|/ c |>\n<| c |>\n: I added a solution that should work. Let me know if it doesn't.\n\
    <|/ c |>\n<| c |>\nThanks for your help. Unfortunately this doesn't seem to work.\
    \ I've added an example of the array I'm working with in the original question.\n\
    <|/ c |>\n<| c |>\n: I added a solution that should work. Let me know if it doesn't.\n\
    <|/ c |>\n<| c |>\nThanks for your help. Unfortunately this doesn't seem to work.\
    \ I've added an example of the array I'm working with in the original question.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n    array(\n        'id'\
    \ => 1,\n        'name' => 'Test 1',\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0ca4qf1o.php on line 10

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    return array_map(function ($number) {\n        return ($number\
    \ - $new_min) / ($new_max - $new_min);\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpmgqfz_f3.php on line 7\n\nWarning: Division by zero in /tmp/tmpmgqfz_f3.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpmgqfz_f3.php on line 9\n\n\
    Warning: Division by zero in /tmp/tmpmgqfz_f3.php on line 11\n\nWarning: Division\
    \ by zero in /tmp/tmpmgqfz_f3.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmgqfz_f3.php:20\nStack trace:\n#0 /tmp/tmpmgqfz_f3.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmgqfz_f3.php on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ $number - ($range * $min / $max);\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmppkyfnx3i.php on line 7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppkyfnx3i.php:18\nStack trace:\n#0 /tmp/tmppkyfnx3i.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmppkyfnx3i.php on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmphv7rcaee.php on line 7\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmphv7rcaee.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphv7rcaee.php:23\nStack trace:\n\
    #0 /tmp/tmphv7rcaee.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphv7rcaee.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $numbers / $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpst70ncxl.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpst70ncxl.php:8\nStack trace:\n#0 /tmp/tmpst70ncxl.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpst70ncxl.php(16): candidate(Array)\n#2 /tmp/tmpst70ncxl.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpst70ncxl.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($num) use ($range) {\n    return $num / $range;\n  }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpki8kkow4.php on line 7\n\nWarning: Division by zero in /tmp/tmpki8kkow4.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpki8kkow4.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpki8kkow4.php:18\nStack\
    \ trace:\n#0 /tmp/tmpki8kkow4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpki8kkow4.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max, $range) {\n        return\
    \ ($num - $min) / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg82he6y8.php on line 7\n\nWarning: Division by zero in /tmp/tmpg82he6y8.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpg82he6y8.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpg82he6y8.php:18\nStack\
    \ trace:\n#0 /tmp/tmpg82he6y8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpg82he6y8.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmphv7rcaee.php on line 7\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmphv7rcaee.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmphv7rcaee.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphv7rcaee.php:23\nStack trace:\n\
    #0 /tmp/tmphv7rcaee.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphv7rcaee.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) use ($min, $max) {\n    return $number - $min / $range;\n  }, $numbers);\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpc37b80ng.php on line 7\n\nWarning: Division by zero in /tmp/tmpc37b80ng.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpc37b80ng.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpc37b80ng.php:17\nStack\
    \ trace:\n#0 /tmp/tmpc37b80ng.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpc37b80ng.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp1iwz3jlz.php on line 8\n\nWarning:\
    \ Division by zero in /tmp/tmp1iwz3jlz.php on line 8\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1iwz3jlz.php:17\nStack trace:\n#0 /tmp/tmp1iwz3jlz.php(24):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1iwz3jlz.php on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n   \
    \ $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $scale;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3sx11qw.php:20\n\
    Stack trace:\n#0 /tmp/tmpy3sx11qw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy3sx11qw.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $number) {\n    $number *= $scale;\n  }\n  return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe490gm7i.php:19\n\
    Stack trace:\n#0 /tmp/tmpe490gm7i.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpe490gm7i.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n\
    \    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppuz4sj71.php:19\n\
    Stack trace:\n#0 /tmp/tmppuz4sj71.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppuz4sj71.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $number *= $max / $min;\n    }\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xtcflmh.php:18\n\
    Stack trace:\n#0 /tmp/tmp5xtcflmh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xtcflmh.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmptli38sbm.php on line 7\n\nWarning: Division by zero in /tmp/tmptli38sbm.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmptli38sbm.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptli38sbm.php:18\nStack\
    \ trace:\n#0 /tmp/tmptli38sbm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptli38sbm.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function($num)\
    \ use ($min, $max, $range) {\n    return $num - $min / $range;\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp7rnmwehl.php on line 7\n\nWarning: Division by zero in /tmp/tmp7rnmwehl.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmp7rnmwehl.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp7rnmwehl.php:18\nStack\
    \ trace:\n#0 /tmp/tmp7rnmwehl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7rnmwehl.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return array_map(function\
    \ ($number) {\n    return $number / $range[count($range) - 1];\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpjnx0mb4d.php on line 13\n\nWarning: Division by zero in\
    \ /tmp/tmpjnx0mb4d.php on line 13\n\nWarning: count(): Parameter must be an array\
    \ or an object that implements Countable in /tmp/tmpjnx0mb4d.php on line 13\n\n\
    Warning: Division by zero in /tmp/tmpjnx0mb4d.php on line 13\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpjnx0mb4d.php:22\nStack trace:\n#0 /tmp/tmpjnx0mb4d.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjnx0mb4d.php on line 22\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    $new_range = max($max - $min);\n    $new_range = min($new_range,\
    \ $range);\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n\
    \        $new_numbers[] = round(($number - $new_min) / $new_range) * $new_range;\n\
    \    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpxe40tsnb.php on line 7\n\nWarning: Division by zero in /tmp/tmpxe40tsnb.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpxe40tsnb.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpxe40tsnb.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpxe40tsnb.php on line 14\n\
    \nWarning: Division by zero in /tmp/tmpxe40tsnb.php on line 14\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxe40tsnb.php:24\nStack trace:\n\
    #0 /tmp/tmpxe40tsnb.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxe40tsnb.php\
    \ on line 24\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpte08qi0n.php:19\n\
    Stack trace:\n#0 /tmp/tmpte08qi0n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpte08qi0n.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcofp91qx.php:17\n\
    Stack trace:\n#0 /tmp/tmpcofp91qx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcofp91qx.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp_b_2fyl3.php on line 7\n\nWarning: Division by zero in /tmp/tmp_b_2fyl3.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b_2fyl3.php:20\n\
    Stack trace:\n#0 /tmp/tmp_b_2fyl3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_b_2fyl3.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function($number)\
    \ { return $number - $min; }, $numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9pdvga5.php:15\n\
    Stack trace:\n#0 /tmp/tmpi9pdvga5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpi9pdvga5.php\
    \ on line 15\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpy6ap78y1.php on line 7\n\nWarning: Division by zero in /tmp/tmpy6ap78y1.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpy6ap78y1.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpy6ap78y1.php:18\nStack\
    \ trace:\n#0 /tmp/tmpy6ap78y1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy6ap78y1.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp_b_2fyl3.php on line 7\n\nWarning: Division by zero in /tmp/tmp_b_2fyl3.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b_2fyl3.php:20\n\
    Stack trace:\n#0 /tmp/tmp_b_2fyl3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_b_2fyl3.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($value) use ($min, $max) {\n    return $min + ($value - $min) / $range;\n \
    \ }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpbf59vbk_.php on line 7\n\nWarning: Division by zero in /tmp/tmpbf59vbk_.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpbf59vbk_.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbf59vbk_.php:18\nStack\
    \ trace:\n#0 /tmp/tmpbf59vbk_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbf59vbk_.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    return array_map(function ($num) use ($new_min, $new_max) {\n        return\
    \ round($num / $range) * $new_max - $new_min;\n    }, $numbers);\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp1f1ub04r.php on line 7\n\nWarning: Division by zero in /tmp/tmp1f1ub04r.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmp1f1ub04r.php on line 9\n\n\
    Warning: Division by zero in /tmp/tmp1f1ub04r.php on line 11\n\nWarning: Division\
    \ by zero in /tmp/tmp1f1ub04r.php on line 11\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1f1ub04r.php:20\nStack trace:\n#0 /tmp/tmp1f1ub04r.php(27):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1f1ub04r.php on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min / max($numbers) - $min / max($numbers);\n  }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp44ty61v_.php on line 8\n\nWarning: Division by zero in /tmp/tmp44ty61v_.php\
    \ on line 8\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp44ty61v_.php on line 8\n\nWarning: Division by zero in /tmp/tmp44ty61v_.php\
    \ on line 8\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp44ty61v_.php on line 8\n\nWarning: Division by zero in /tmp/tmp44ty61v_.php\
    \ on line 8\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp44ty61v_.php on line 8\n\nWarning: Division by zero in /tmp/tmp44ty61v_.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44ty61v_.php:17\n\
    Stack trace:\n#0 /tmp/tmp44ty61v_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp44ty61v_.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ $number - ($range * $min / $max);\n    }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmppkyfnx3i.php on line 7\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppkyfnx3i.php:18\nStack trace:\n#0 /tmp/tmppkyfnx3i.php(25): test()\n\
    #1 {main}\n  thrown in /tmp/tmppkyfnx3i.php on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return array_map(function\
    \ ($number) {\n    return $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,math |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array. For example, `[-1,-2,-3]` becomes `[0,0,0]`.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it and it doesn't\
    \ work. Try it with `[-1,-2,-3]`.\n<|/ c |>\n<| c |>\n: It works perfectly for\
    \ me. Try it yourself.\n<|/ c |>\n<| c |>\n: It works perfectly for me. Try it\
    \ yourself.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){\n    return $n*0.5;\n}, $numbers);\nprint_r($numbers);\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbbnbc7r0.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) {\n        return $number / $range;\n\
    \    }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a\
    \ PHP function which does this for you. \n<code>\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpn36yaw5h.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3um9jzg.php:18\n\
    Stack trace:\n#0 /tmp/tmpp3um9jzg.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp3um9jzg.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $numbers / $range;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpst70ncxl.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpst70ncxl.php:8\nStack trace:\n#0 /tmp/tmpst70ncxl.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpst70ncxl.php(16): candidate(Array)\n#2 /tmp/tmpst70ncxl.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpst70ncxl.php on line 8\n"
  timestamp: 1659730888
- exit_code: 0
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return ($num - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n   \
    \ foreach ($numbers as $number) {\n        $numbers[$number] = $number / $scale;\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyq082dlf.php:19\n\
    Stack trace:\n#0 /tmp/tmpyq082dlf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyq082dlf.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min / $range;\n    }, $numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmptli38sbm.php on line 7\n\nWarning: Division by zero in /tmp/tmptli38sbm.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmptli38sbm.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptli38sbm.php:18\nStack\
    \ trace:\n#0 /tmp/tmptli38sbm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptli38sbm.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv9aneku.php:19\n\
    Stack trace:\n#0 /tmp/tmpsv9aneku.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsv9aneku.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_range = 1.0;\n    if ($range > $new_range) {\n        $new_range = $range;\n\
    \    }\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n   \
    \     $new_numbers[] = $new_range * $number / $range;\n    }\n    return $new_numbers;\n\
    }\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpc2ljtkmd.php on line 7\n\nWarning: Division by zero in /tmp/tmpc2ljtkmd.php\
    \ on line 14\n\nWarning: Division by zero in /tmp/tmpc2ljtkmd.php on line 14\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2ljtkmd.php:23\nStack\
    \ trace:\n#0 /tmp/tmpc2ljtkmd.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc2ljtkmd.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function($number)\
    \ { return $number * $scale; }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8z9kq_7.php:16\n\
    Stack trace:\n#0 /tmp/tmpe8z9kq_7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpe8z9kq_7.php\
    \ on line 16\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $number *= $max / $min;\n    }\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xtcflmh.php:18\n\
    Stack trace:\n#0 /tmp/tmp5xtcflmh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp5xtcflmh.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range\
    \ = array_map('abs', $range);\n    $range = array_sum($range);\n    $scale = 1\
    \ / $range;\n    foreach ($numbers as $number) {\n        $number *= $scale;\n\
    \    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9eucs7q4.php:25\n\
    Stack trace:\n#0 /tmp/tmp9eucs7q4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9eucs7q4.php\
    \ on line 25\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    return array_map(function ($num)\
    \ use ($new_range) {\n        return round(($num - $new_min) / $new_range) * $new_range;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp5cge2amd.php on line 7\n\nWarning: Division by zero in /tmp/tmp5cge2amd.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmp5cge2amd.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmp5cge2amd.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp5cge2amd.php on line 12\n\
    \nWarning: Division by zero in /tmp/tmp5cge2amd.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp5cge2amd.php:21\nStack trace:\n\
    #0 /tmp/tmp5cge2amd.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp5cge2amd.php\
    \ on line 21\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) { return $number\
    \ / $max - $min; }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\n\
    This doesn't seem to work. `rescale_to_unit([1,2,3,4,5,6,7,8,9,10])` returns `[-0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]`\n\
    <|/ c |>\n<| c |>\n: It does work. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]`\
    \ because `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001]` after applying the linear transform.\
    \ `[1,2,3,4,5,6,7,8,9,10]` becomes `[\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdgayutzc.php on line 9

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as $key => $value) {\n      \
    \  $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n}\n\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpq3q6mpbt.php on line 7\n\nWarning: Division by zero in /tmp/tmpq3q6mpbt.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3q6mpbt.php:20\n\
    Stack trace:\n#0 /tmp/tmpq3q6mpbt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq3q6mpbt.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $number *= $max / $min;\n    }\n    return $numbers;\n}\nfunction\
    \ candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihts6r3r.php:17\n\
    Stack trace:\n#0 /tmp/tmpihts6r3r.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpihts6r3r.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($value)\
    \ use ($min, $max) {\n        return $value - $min;\n    }, array_values($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpdpuix9.php:17\n\
    Stack trace:\n#0 /tmp/tmphpdpuix9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmphpdpuix9.php\
    \ on line 17\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpvsc3lt27.php on line 7\n\nWarning: Division by zero in /tmp/tmpvsc3lt27.php\
    \ on line 9\n\nWarning: Division by zero in /tmp/tmpvsc3lt27.php on line 9\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpvsc3lt27.php:18\nStack\
    \ trace:\n#0 /tmp/tmpvsc3lt27.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvsc3lt27.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp51g7gi.php:19\n\
    Stack trace:\n#0 /tmp/tmpqp51g7gi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqp51g7gi.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm afraid that your solution\
    \ doesn't work as expected. I've added some more info to my question. Thanks again!\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a function that will rescale\
    \ your numbers to between 0 and 1.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I've added some more info to my question. Thanks again!\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a function that will rescale your numbers to between\
    \ 0 and 1.\n<|/ c |>\n<| c |>\nThanks for your answer. I've added some more info\
    \ to my question. Thanks again!\n<|/ c |>\n<| a |>\nI believe this should work:\n\
    <code>\n$numbers = array(\n  array(1, 2),\n  array(3, 4),\n  array(5, 6),\n  array(7,\
    \ 8),\n  array(9, 10),\n  array(11, 12),\n  array(13, 14),\n  array(15, 16),\n\
    \  array(17, 18),\n  array(19, 20),\n  array(21, 22),\n  array(23, 24),\n  array(25,\
    \ 26),\n  array(27, 28),\n  array(29, 30),\n  array(31, 32),\n  array(33, 34),\n\
    \  array(35, 36),\n  array(37, 38),\n  array(39, 40),\n  array(41, 42),\n  array(43,\
    \ 44),\n  array(45, 46),\n  array(47, 48),\n  array(49, 50),\n  array(51, 52),\n\
    \  array(53, 54),\n  array(55, 56),\n  array(57, 58),\n  array(59, 60),\n  array(61,\
    \ 62),\n  array(63, 64),\n  array(65, 66),\n  array(67, 68),\n  array(69, 70),\n\
    \  array(71, 72),\n  array(73, 74),\n  array(75, 76),\n  array(77, 78),\n  array(79,\
    \ 80),\n  array(81, 82),\n  array(83, 84),\n  array(85, 86),\n  array(87, 88),\n\
    \  array(89, 90),\n  array(91, 92),\n  array(\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9oienvwm.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = range($min, $max);\n\
    \    $new_range = array();\n    foreach ($range as $value) {\n        $new_range[$value]\
    \ = $value / $max;\n    }\n    return $new_range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq97083u.php:20\n\
    Stack trace:\n#0 /tmp/tmpiq97083u.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpiq97083u.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ ($number - $min) / $range;\n    }, $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\n\
    I like this solution, but I believe it only works if you know that the numbers\
    \ are all positive. Otherwise the largest number will always be 1 and the smallest\
    \ number will always be 0.\n<|/ c |>\n<| c |>\nYes, that's true. That's why I\
    \ said \"such that the smallest number will become 0 and the largest will become\
    \ 1\". I'll add that to the answer.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ works with negative numbers as well.\n<|/ c |>\n<| c |>\nI like the idea of\
    \ using array_map to rescale each number individually, but this doesn't work for\
    \ me because I need the numbers to stay in the same order. For example, if I have\
    \ an array with values [1,2,3,4,5] and I apply your function I get [-0.5, -0.5,\
    \ -0.5, -0.5, -0.5]. Is there a way to do this that preserves the original order?\n\
    <|/ c |>\n<| c |>\nI added a solution that preserves the original order.\n<|/\
    \ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){return $n/(count($numbers)-1);},$numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if\
    \ there are negative numbers in the array. Try it with `array(1,2,-3,4,-5,6,7,8,9,10)`\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it with `array(1,2,-3,4,-5,6,7,8,9,10)`\n\
    <|/ c |>\n<| c |>\nI added a solution that works with negative numbers as well.\n\
    <|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){return $n/(count($numbers)-1);},$numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){\nfunction candidate(...$args) {\n    return\
    \ rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphrroymcd.php on line 12

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n\
    \    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppuz4sj71.php:19\n\
    Stack trace:\n#0 /tmp/tmppuz4sj71.php(26): test()\n#1 {main}\n  thrown in /tmp/tmppuz4sj71.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function($num) use ($min, $max) {\n\
    \    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry I didn't specify this in my question, but I do need\
    \ to keep the original array keys. I edited my question to reflect this.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to preserve the original keys.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I'm sorry I didn't specify this in my question,\
    \ but I do need to keep the original array keys. I edited my question to reflect\
    \ this.\n<|/ c |>\n<| c |>\nI updated my answer to preserve the original keys.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify this in\
    \ my question, but I do need to keep the original array keys. I edited my question\
    \ to reflect this.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$numbers = array(\n\
    \    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n\
    \    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 =>\
    \ 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n\
    \    17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n \
    \   22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n    26 => 27,\n  \
    \  27 => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n    31 => 32,\n   \
    \ 32 => 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n    36 => 37,\n    37\
    \ => 38,\n    38 => 39,\n    39 => 40,\n    40 => 41,\n    41 => 42,\n    42 =>\
    \ 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n    46 => 47,\n    47 => 48,\n\
    \    48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 5\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0e0grwny.php on line 11

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   return array_map(function($num) use ($scale) {\n        return $num * $scale;\n\
    \    }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qas926d.php:18\n\
    Stack trace:\n#0 /tmp/tmp0qas926d.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0qas926d.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 0
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n   \
    \ foreach ($numbers as $key => $value) {\n        $numbers[$key] = ($value - $min)\
    \ / $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function($x)\
    \ { return $x * $scale; }, $numbers);\n}\n\nfunction candidate(...$args) {\n \
    \   return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fz_summ.php:16\n\
    Stack trace:\n#0 /tmp/tmp7fz_summ.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7fz_summ.php\
    \ on line 16\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp_b_2fyl3.php on line 7\n\nWarning: Division by zero in /tmp/tmp_b_2fyl3.php\
    \ on line 8\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_b_2fyl3.php:20\n\
    Stack trace:\n#0 /tmp/tmp_b_2fyl3.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp_b_2fyl3.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp3ax_u5r7.php on line 7\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmp3ax_u5r7.php on line 10\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ax_u5r7.php:20\nStack\
    \ trace:\n#0 /tmp/tmp3ax_u5r7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3ax_u5r7.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function\
    \ ($number) use ($scale) {\n    return $scale * $number;\n  }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lhht5ht.php:18\n\
    Stack trace:\n#0 /tmp/tmp8lhht5ht.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8lhht5ht.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers[$min] =\
    \ 0;\n    $numbers[$max] = 1;\n    return $numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4phbses.php:20\n\
    Stack trace:\n#0 /tmp/tmpa4phbses.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa4phbses.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range[]\
    \ = 1;\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotzqqumm.php:21\n\
    Stack trace:\n#0 /tmp/tmpotzqqumm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpotzqqumm.php\
    \ on line 21\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n   \
    \ foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsinfdpb9.php:19\n\
    Stack trace:\n#0 /tmp/tmpsinfdpb9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsinfdpb9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpuscqquaq.php on line 7\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpuscqquaq.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpuscqquaq.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpuscqquaq.php:23\nStack trace:\n\
    #0 /tmp/tmpuscqquaq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpuscqquaq.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return array_map(function($number)\
    \ { return $number * $scale; }, $numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7rl43wc.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7rl43wc.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpy7rl43wc.php\
    \ on line 16\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpq8_lus7k.php on line 7\n\nWarning: Division by zero in /tmp/tmpq8_lus7k.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpq8_lus7k.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpq8_lus7k.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpq8_lus7k.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpq8_lus7k.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpq8_lus7k.php:22\nStack trace:\n\
    #0 /tmp/tmpq8_lus7k.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq8_lus7k.php\
    \ on line 22\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers = array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmp88vqnsf7.php on line 11\n\nWarning:\
    \ Division by zero in /tmp/tmp88vqnsf7.php on line 11\n\nWarning: Division by\
    \ zero in /tmp/tmp88vqnsf7.php on line 11\n\nWarning: Division by zero in /tmp/tmp88vqnsf7.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88vqnsf7.php:21\n\
    Stack trace:\n#0 /tmp/tmp88vqnsf7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp88vqnsf7.php\
    \ on line 21\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any external libraries. I edited my question to make it clearer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a pure PHP solution that doesn't\
    \ use any external libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any external libraries. I edited my question to make it clearer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a pure PHP solution that doesn't\
    \ use any external libraries.\n<|/ c |>\n<| a tags=php,math,arrays |>\n<code>\n\
    <?php\n$numbers = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n\
    \    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n\
    \    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n\
    \    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n\
    \    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n\
    \    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    51,\n    52,\n    53,\n\
    \    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n\
    \    63,\n    64,\n    65,\n    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n\
    \    72,\n    73,\n    74,\n    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n\
    \    81,\n    82,\n    83,\n    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n\
    \    90,\n    91,\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp282s3hm0.php on line 11

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp84x4qnyj.php on line 59

    '
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n \
    \   foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n\nfunction candidate(...$args) {\n\
    \    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(2.0,\
    \ 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8aiuge0.php:19\n\
    Stack trace:\n#0 /tmp/tmpm8aiuge0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm8aiuge0.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = range($min, $max);\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = $number / $range[1] - $min;\n    }\n    return $rescaled;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1kim6ii.php:20\n\
    Stack trace:\n#0 /tmp/tmpq1kim6ii.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpq1kim6ii.php\
    \ on line 20\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n\
    \  $range[] = 1;\n  $range = array_map('sqrt', $range);\n  foreach ($numbers as\
    \ $number) {\n    $numbers[$number] = $range[$number];\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphue1zxha.php:25\n\
    Stack trace:\n#0 /tmp/tmphue1zxha.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphue1zxha.php\
    \ on line 25\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range) * $new_range + $new_min;\n    }\n    return $new_numbers;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmphwq3hg2e.php on line 7\n\nWarning: Division by zero in /tmp/tmphwq3hg2e.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmphwq3hg2e.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmphwq3hg2e.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmphwq3hg2e.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmphwq3hg2e.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmphwq3hg2e.php:23\nStack trace:\n\
    #0 /tmp/tmphwq3hg2e.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphwq3hg2e.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function\
    \ ($number) use ($scale) {\n    return $scale * $number;\n  }, $numbers);\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lhht5ht.php:18\n\
    Stack trace:\n#0 /tmp/tmp8lhht5ht.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8lhht5ht.php\
    \ on line 18\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba1ztgvv.php:19\n\
    Stack trace:\n#0 /tmp/tmpba1ztgvv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpba1ztgvv.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1eg2rdz9.php:19\n\
    Stack trace:\n#0 /tmp/tmp1eg2rdz9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1eg2rdz9.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpg2sk8osd.php on line 7\n\nFatal error: Uncaught Error: Unsupported\
    \ operand types in /tmp/tmpg2sk8osd.php:8\nStack trace:\n#0 /tmp/tmpg2sk8osd.php(12):\
    \ rescale_to_unit(Array)\n#1 /tmp/tmpg2sk8osd.php(16): candidate(Array)\n#2 /tmp/tmpg2sk8osd.php(23):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg2sk8osd.php on line 8\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    $new_range = max($max - $min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = round(($number\
    \ - $new_min) / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n\
    \nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
    \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmpbqaxavdf.php on line 7\n\nWarning: Division by zero in /tmp/tmpbqaxavdf.php\
    \ on line 8\n\nWarning: Division by zero in /tmp/tmpbqaxavdf.php on line 9\n\n\
    Warning: max(): When only one parameter is given, it must be an array in /tmp/tmpbqaxavdf.php\
    \ on line 10\n\nWarning: Division by zero in /tmp/tmpbqaxavdf.php on line 13\n\
    \nWarning: Division by zero in /tmp/tmpbqaxavdf.php on line 13\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbqaxavdf.php:23\nStack trace:\n\
    #0 /tmp/tmpbqaxavdf.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbqaxavdf.php\
    \ on line 23\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n\nfunction candidate(...$args) {\n    return rescale_to_unit(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
    \ 49.9)) !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2.0,\
    \ 1.0, 5.0, 3.0, 4.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(12.0, 11.0, 15.0, 13.0, 14.0)) !==\
    \ array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstq6wq9j.php:19\n\
    Stack trace:\n#0 /tmp/tmpstq6wq9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpstq6wq9j.php\
    \ on line 19\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range[]\
    \ = 1;\n    $range[] = $max - $min;\n    return $range;\n}\n\nfunction candidate(...$args)\
    \ {\n    return rescale_to_unit(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !== array(1.0, 0.0))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotzqqumm.php:21\n\
    Stack trace:\n#0 /tmp/tmpotzqqumm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpotzqqumm.php\
    \ on line 21\n"
  timestamp: 1659730888
- exit_code: 255
  program: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
    \ transform to that list,\n// such that the smallest number will become 0 and\
    \ the largest will become 1\nfunction rescale_to_unit($numbers) {\n    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) use ($min, $max, $range) {\n        return\
    \ ($number - $min) / $range;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| c |>\nThis looks very promising, but I'm getting a syntax error on the first\
    \ line of the function definition: `Parse error: syntax error, unexpected '['\
    \ in /Applications/MAMP/htdocs/index.php on line 6`\n<|/ c |>\n<| c |>\nSorry,\
    \ I forgot that `array_map` doesn't exist in PHP < 5.3. I've updated my answer\
    \ to include a version that works in PHP < 5.3.\n<|/ c |>\n<| c |>\nThanks for\
    \ your help. Unfortunately, I'm still getting a syntax error on the first line\
    \ of the function definition: `Parse error: syntax error, unexpected '[' in /Applications/MAMP/htdocs/index.php\
    \ on line 6`\n<|/ c |>\n<| c |>\nSorry, I forgot that `array_map` doesn't exist\
    \ in PHP < 5.3. I've updated my answer to include a version that works in PHP\
    \ < 5.3.\n<|/ c |>\n<| c |>\nThanks for your help. Unfortunately, I'm still getting\
    \ a syntax error on the first line of the function definition: `Parse error: syntax\
    \ error, unexpected '[' in /Applications/MAMP/htdocs/index.php on line 6`\n<|/\
    \ c |>\n<| a tags=arrays,php,math |>\nI came up with this solution:\n<code>\n\
    function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9)) !==\
    \ array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
    \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
    \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpruqxdlg0.php on line 12

    '
  timestamp: 1659730888
