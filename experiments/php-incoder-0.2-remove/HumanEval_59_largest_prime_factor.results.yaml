language: php
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n \
    \   while ($p < $i) {\n        $i *= $i;\n        $p *= $i;\n    }\n    return\
    \ $p;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fxl20j6.php:18\n\
    Stack trace:\n#0 /tmp/tmp8fxl20j6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8fxl20j6.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 1;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg1147vp.php:19\n\
    Stack trace:\n#0 /tmp/tmpmg1147vp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmg1147vp.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $primes = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $primes[] =\
    \ $i;\n      $n = $n / $i;\n    }\n  }\n  return $primes[count($primes) - 1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zvcxxpz.php:18\n\
    Stack trace:\n#0 /tmp/tmp4zvcxxpz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4zvcxxpz.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $factor = 1;\n \
    \ while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factor = $i;\n   \
    \   $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp11vw_qjg.php:22\n\
    Stack trace:\n#0 /tmp/tmp11vw_qjg.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp11vw_qjg.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[713] = 1;\n    $factors[729] = 1;\n    $factors[737] = 1;\n    $factors[749]\
    \ = 1;\n    $factors[761] = 1;\n    $factors[769] = 1;\n    $factors[773] = 1;\n\
    \    $factors[787] = 1;\n    $factors[797] = 1;\n    $factors[809] = 1;\n    $factors[811]\
    \ = 1;\n    $factors[821] = 1;\n    $factors[843] = 1;\n    $factors[851] = 1;\n\
    \    $factors[857] = 1;\n    $factors[859] = 1;\n    $factors[863] = 1;\n    $factors[877]\
    \ = 1;\n    $factors[881] = 1;\n    $factors[883] = 1;\n    $factors[889] = 1;\n\
    \    $factors[907] = 1;\n    $factors[911] = 1;\n    $factors[919] = 1;\n    $factors[929]\
    \ = 1;\n    $factors[937] = 1;\n    $factors[941] = 1;\n    $factors[947] = 1;\n\
    \    $factors[953] = 1;\n    $factors[959] = 1;\n    $factors[961] = 1;\n    $factors[967]\
    \ = 1;\n    $factors[971] = 1;\n    $factors[973] = 1;\n    $factors[979] = 1;\n\
    \    $factors[981] = 1;\n    $factors[983] = 1;\n    $factors[987] = 1;\n    $factors[999]\
    \ = 1;\n    $factors[1003] = 1;\n    $factors[1007] = 1;\n    $factors[1013] =\
    \ 1;\n    $factors[1019] = 1;\n    $factors[1023] = 1;\n    $factors[1027] = 1;\n\
    \    $factors[1029] = 1;\n    $factors[1033] = 1;\n    $factors[1039] = 1;\n \
    \   $factors[1049] = 1;\n    $factors[1051] = 1;\n    $factors[1053] = 1;\n  \
    \  $factors[1059] = 1;\n    $factors[1061] = 1;\n    $factors[1063] = 1;\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpod71cmj6.php on line 86

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1zuzq_.php:18\n\
    Stack trace:\n#0 /tmp/tmpol1zuzq_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpol1zuzq_.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factors[2]\
    \ = 1;\n  $factors[3] = 1;\n  $factors[5] = 1;\n  $factors[7] = 1;\n  $factors[11]\
    \ = 1;\n  $factors[13] = 1;\n  $factors[17] = 1;\n  $factors[19] = 1;\n  $factors[23]\
    \ = 1;\n  $factors[29] = 1;\n  $factors[31] = 1;\n  $factors[37] = 1;\n  $factors[41]\
    \ = 1;\n  $factors[673] = 1;\n  $factors[713] = 1;\n  $factors[729] = 1;\n  $factors[737]\
    \ = 1;\n  $factors[749] = 1;\n  $factors[761] = 1;\n  $factors[769] = 1;\n  $factors[773]\
    \ = 1;\n  $factors[787] = 1;\n  $factors[797] = 1;\n  $factors[809] = 1;\n  $factors[811]\
    \ = 1;\n  $factors[821] = 1;\n  $factors[843] = 1;\n  $factors[851] = 1;\n  $factors[857]\
    \ = 1;\n  $factors[859] = 1;\n  $factors[863] = 1;\n  $factors[877] = 1;\n  $factors[881]\
    \ = 1;\n  $factors[883] = 1;\n  $factors[887] = 1;\n  $factors[907] = 1;\n  $factors[911]\
    \ = 1;\n  $factors[919] = 1;\n  $factors[929] = 1;\n  $factors[937] = 1;\n  $factors[941]\
    \ = 1;\n  $factors[947] = 1;\n  $factors[953] = 1;\n  $factors[959] = 1;\n  $factors[961]\
    \ = 1;\n  $factors[967] = 1;\n  $factors[971] = 1;\n  $factors[973] = 1;\n  $factors[979]\
    \ = 1;\n  $factors[981] = 1;\n  $factors[983] = 1;\n  $factors[987] = 1;\n  $factors[993]\
    \ = 1;\n  $factors[997] = 1;\n  $factors[1001] = 1;\n  $factors[1009] = 1;\n \
    \ $factors[1013] = 1;\n  $factors[1019] = 1;\n  $factors[1023] = 1;\n  $factors[1027]\
    \ = 1;\n  $factors[1029] = 1;\n  $factors[1033] = 1;\n  $factors[1039] = 1;\n\
    \  $factors[1049] = 1;\n  $factors[1051] = 1;\n  $factors[1053] = 1;\n  $factors[1059]\
    \ = 1;\n  $factors[1061] = 1;\n  $\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnhtvctbt.php on line 74

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1zuzq_.php:18\n\
    Stack trace:\n#0 /tmp/tmpol1zuzq_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpol1zuzq_.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = 1;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $p = $i;\n\
    \        }\n        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy4v0f0i7.php:20\n\
    Stack trace:\n#0 /tmp/tmpy4v0f0i7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpy4v0f0i7.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n          \
    \  $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfix5d614.php:19\n\
    Stack trace:\n#0 /tmp/tmpfix5d614.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfix5d614.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factors[2]\
    \ = 1;\n  $factors[3] = 1;\n  $factors[5] = 1;\n  $factors[7] = 1;\n  $factors[11]\
    \ = 1;\n  $factors[13] = 1;\n  $factors[17] = 1;\n  $factors[19] = 1;\n  $factors[23]\
    \ = 1;\n  $factors[29] = 1;\n  $factors[31] = 1;\n  $factors[37] = 1;\n  $factors[41]\
    \ = 1;\n  $factors[67] = 1;\n  $factors[73] = 3;\n  $factors[79] = 7;\n  $factors[89]\
    \ = 9;\n  $factors[97] = 11;\n  $factors[103] = 13;\n  $factors[109] = 17;\n \
    \ $factors[113] = 19;\n  $factors[121] = 21;\n  $factors[127] = 23;\n  $factors[131]\
    \ = 29;\n  $factors[137] = 31;\n  $factors[139] = 37;\n  $factors[143] = 41;\n\
    \  $factors[147] = 47;\n  $factors[151] = 53;\n  $factors[157] = 59;\n  $factors[163]\
    \ = 61;\n  $factors[167] = 67;\n  $factors[173] = 71;\n  $factors[179] = 76;\n\
    \  $factors[183] = 81;\n  $factors[187] = 87;\n  $factors[191] = 91;\n  $factors[197]\
    \ = 99;\n  $factors[203] = 103;\n  $factors[209] = 109;\n  $factors[214] = 113;\n\
    \  $factors[217] = 119;\n  $factors[223] = 121;\n  $factors[227] = 127;\n  $factors[231]\
    \ = 1;\n  $factors[236] = 131;\n  $factors[239] = 137;\n  $factors[243] = 143;\n\
    \  $factors[247] = 149;\n  $factors[251] = 15;\n  $factors[257] = 17;\n  $factors[263]\
    \ = 19;\n  $factors[268] = 21;\n  $factors[273] = 23;\n  $factors[279] = 29;\n\
    \  $factors[283] = 31;\n  $factors[288] = 37;\n  $factors[293] = 41;\n  $factors[297]\
    \ = 47;\n  $factors[303] = 53;\n  $factors[309] = 59;\n  $factors[313] = 61;\n\
    \  $factors[317] = 67;\n  $factors[323] = 71;\n  $factors[328] = 76;\n  $factors[333]\
    \ = 81;\n  $factor\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpveb78nh5.php on line 72

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    $factors[] = $i;\n    while ($n % $i == 0) {\n\
    \      $n /= $i;\n      $factors[] = $i;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnwmwx_y.php:18\n\
    Stack trace:\n#0 /tmp/tmpnnwmwx_y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnnwmwx_y.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv7qxfke.php:18\n\
    Stack trace:\n#0 /tmp/tmprv7qxfke.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprv7qxfke.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[713] = 1;\n    $factors[729] = 1;\n    $factors[737] = 1;\n    $factors[749]\
    \ = 1;\n    $factors[761] = 1;\n    $factors[769] = 1;\n    $factors[773] = 1;\n\
    \    $factors[787] = 1;\n    $factors[791] = 1;\n    $factors[793] = 1;\n    $factors[801]\
    \ = 1;\n    $factors[807] = 1;\n    $factors[809] = 1;\n    $factors[813] = 1;\n\
    \    $factors[817] = 1;\n    $factors[821] = 1;\n    $factors[823] = 1;\n    $factors[827]\
    \ = 1;\n    $factors[829] = 1;\n    $factors[833] = 1;\n    $factors[839] = 1;\n\
    \    $factors[841] = 1;\n    $factors[843] = 1;\n    $factors[847] = 1;\n    $factors[849]\
    \ = 1;\n    $factors[851] = 1;\n    $factors[853] = 1;\n    $factors[855] = 1;\n\
    \    $factors[857] = 1;\n    $factors[859] = 1;\n    $factors[863] = 1;\n    $factors[865]\
    \ = 3;\n    $factors[877] = 2;\n    $factors[881] = 1;\n    $factors[883] = 2;\n\
    \    $factors[887] = 2;\n    $factors[907] = 2;\n    $factors[911] = 2;\n    $factors[919]\
    \ = 2;\n    $factors[929] = 2;\n    $factors[937] = 2;\n    $factors[941] = 2;\n\
    \    $factors[947] = 2;\n    $factors[953] = 2;\n    $factors[959] = 2;\n    $factors[961]\
    \ = 2;\n    $factors[967] = 2;\n    $factors[971] = 2;\n    $factors[973] = 2;\n\
    \    $factors[979] = 2;\n    $factors[981] = 2;\n    $factors[983] = 2;\n    $factors[987]\
    \ = 2;\n    $factors[993] = 2;\n    $factors[997] = 2;\n    $\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxrju2ei3.php on line 75

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32_o2unj.php:18\n\
    Stack trace:\n#0 /tmp/tmp32_o2unj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp32_o2unj.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[$i] = $i;\n  }\n  $factors[$n] = 1;\n\
    \  $i = 2;\n  while (true) {\n    if ($n % $i == 0) {\n      $factors[$i] = $i;\n\
    \      $n = ($n / $i) + 1;\n    } else {\n      $i++;\n    }\n    if ($i == $n)\
    \ {\n      break;\n    }\n  }\n  return $factors[$i];\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwr31ulq.php:28\n\
    Stack trace:\n#0 /tmp/tmplwr31ulq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplwr31ulq.php\
    \ on line 28\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $factors[] = 1;\n \
    \ $i = 2;\n  while ($i <= $n) {\n    $j = 0;\n    while ($factors[$j] * $i <=\
    \ $n) {\n      $j++;\n    }\n    $factors[$j] = $i;\n    $i++;\n  }\n  return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0goksk1f.php:25\n\
    Stack trace:\n#0 /tmp/tmp0goksk1f.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0goksk1f.php\
    \ on line 25\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n\
    \    $i++;\n  }\n  return 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_g_7_bc.php:20\n\
    Stack trace:\n#0 /tmp/tmpr_g_7_bc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpr_g_7_bc.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for ($i = 3; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n       \
    \     $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyuqlozh.php:19\n\
    Stack trace:\n#0 /tmp/tmpgyuqlozh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgyuqlozh.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= $n; $i++) {\n        $factors[] = $i;\n        for($j = 2;\
    \ $j <= $i; $j++) {\n            if($i % $j == 0) {\n                break;\n\
    \            }\n        }\n    }\n    return $factors[count($factors) - 1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtlxqznj.php:20\n\
    Stack trace:\n#0 /tmp/tmpxtlxqznj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxtlxqznj.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p4kaxe9.php:19\n\
    Stack trace:\n#0 /tmp/tmp_p4kaxe9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_p4kaxe9.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[729] = 1;\n    $factors[767] = 1;\n    $factors[831] = 1;\n    $factors[893]\
    \ = 1;\n    $factors[947] = 1;\n    $factors[1023] = 1;\n    $factors[1059] =\
    \ 1;\n    $factors[1131] = 1;\n    $factors[1267] = 1;\n    $factors[1319] = 1;\n\
    \    $factors[1397] = 1;\n    $factors[1471] = 1;\n    $factors[1519] = 1;\n \
    \   $factors[1597] = 1;\n    $factors[1669] = 1;\n    $factors[1723] = 1;\n  \
    \  $factors[1759] = 1;\n    $factors[1793] = 1;\n    $factors[1811] = 1;\n   \
    \ $factors[1837] = 1;\n    $factors[1871] = 1;\n    $factors[1893] = 1;\n    $factors[1907]\
    \ = 1;\n    $factors[1931] = 1;\n    $factors[1943] = 1;\n    $factors[1959] =\
    \ 1;\n    $factors[1983] = 1;\n    $factors[1997] = 1;\n    $factors[2011] = 1;\n\
    \    $factors[2017] = 1;\n    $factors[2039] = 1;\n    $factors[2051] = 1;\n \
    \   $factors[2063] = 1;\n    $factors[2079] = 1;\n    $factors[2089] = 1;\n  \
    \  $factors[2109] = 1;\n    $factors[2120] = 1;\n    $factors[2131] = 1;\n   \
    \ $factors[2143] = 1;\n    $factors[2153] = 1;\n    $factors[2163] = 1;\n    $factors[2173]\
    \ = 1;\n    $factors[2183] = 1;\n    $factors[2193] = 1;\n    $factors[2203] =\
    \ 1;\n    $factors[2213] = 1;\n    $factors[2221] = 1;\n    $factors[2233] = 1;\n\
    \    $factors[2239] = 1;\n    $factors[2247] = 1;\n    $factors[2251] = 1;\n \
    \   $factors[2267] = 1;\n    $factors[2269] = 1;\n    $factors[2273] = \nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0uijvdt1.php on line 73

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[677] = 1;\n    $factors[683] = 1;\n    $factors[691] = 1;\n    $factors[711]\
    \ = 1;\n    $factors[727] = 1;\n    $factors[733] = 1;\n    $factors[739] = 1;\n\
    \    $factors[743] = 1;\n    $factors[751] = 1;\n    $factors[767] = 1;\n    $factors[773]\
    \ = 1;\n    $factors[789] = 1;\n    $factors[793] = 1;\n    $factors[809] = 1;\n\
    \    $factors[811] = 1;\n    $factors[821] = 1;\n    $factors[841] = 1;\n    $factors[851]\
    \ = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] =\
    \ 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n\
    \    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n \
    \   $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n  \
    \  $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n   \
    \ $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631]\
    \ = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] =\
    \ 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n\
    \    $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n \
    \   $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n  \
    \  $factors[8631] = 1;\n    $factors[8631] = 1;\n    $factors[8631] = 1;\n   \
    \ $factors[863\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkz09bqq6.php on line 72

    '
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $p = 1;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $p++;\n      $i /= $p;\n\
    \    }\n    else {\n      $i++;\n    }\n  }\n  return $p;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp1t__0yka.php:7\n\
    Stack trace:\n#0 /tmp/tmp1t__0yka.php(18): largest_prime_factor(15)\n#1 /tmp/tmp1t__0yka.php(22):\
    \ candidate(15)\n#2 /tmp/tmp1t__0yka.php(29): test()\n#3 {main}\n  thrown in /tmp/tmp1t__0yka.php\
    \ on line 7\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    for($i = 3; $i <= $n; $i++) {\n        if($n % $i == 0) {\n\
    \            $factors[$factor] = $i;\n            $factor++;\n        }\n    }\n\
    \    return $factors[$factor];\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghb1efqt.php:20\n\
    Stack trace:\n#0 /tmp/tmpghb1efqt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpghb1efqt.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59pk96vu.php:18\n\
    Stack trace:\n#0 /tmp/tmp59pk96vu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp59pk96vu.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8i9ed31i.php:21\n\
    Stack trace:\n#0 /tmp/tmp8i9ed31i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8i9ed31i.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $factors[] = 1;\n \
    \ $i = 2;\n  $largest = 0;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n  \
    \    $factors[] = $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n\
    \  }\n  foreach ($factors as $factor) {\n    if ($factor > $largest) {\n     \
    \ $largest = $factor;\n    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9h4evph6.php:32\n\
    Stack trace:\n#0 /tmp/tmp9h4evph6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9h4evph6.php\
    \ on line 32\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuest2d9.php:19\n\
    Stack trace:\n#0 /tmp/tmphuest2d9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphuest2d9.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_2793ae.php:20\n\
    Stack trace:\n#0 /tmp/tmpu_2793ae.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpu_2793ae.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tht8rt0.php:21\n\
    Stack trace:\n#0 /tmp/tmp3tht8rt0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3tht8rt0.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhqfjo9h.php:19\n\
    Stack trace:\n#0 /tmp/tmprhqfjo9h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprhqfjo9h.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1zuzq_.php:18\n\
    Stack trace:\n#0 /tmp/tmpol1zuzq_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpol1zuzq_.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[67] = 1;\n\
    \    $factors[73] = 3;\n    $factors[79] = 1;\n    $factors[81] = 1;\n    $factors[89]\
    \ = 1;\n    $factors[97] = 1;\n    $factors[101] = 1;\n    $factors[103] = 1;\n\
    \    $factors[107] = 1;\n    $factors[109] = 1;\n    $factors[113] = 1;\n    $factors[127]\
    \ = 1;\n    $factors[131] = 1;\n    $factors[137] = 1;\n    $factors[139] = 1;\n\
    \    $factors[143] = 1;\n    $factors[145] = 1;\n    $factors[147] = 1;\n    $factors[151]\
    \ = 1;\n    $factors[157] = 1;\n    $factors[159] = 1;\n    $factors[163] = 1;\n\
    \    $factors[167] = 1;\n    $factors[173] = 1;\n    $factors[179] = 1;\n    $factors[181]\
    \ = 1;\n    $factors[191] = 1;\n    $factors[193] = 1;\n    $factors[197] = 1;\n\
    \    $factors[199] = 1;\n    $factors[203] = 1;\n    $factors[209] = 1;\n    $factors[211]\
    \ = 1;\n    $factors[213] = 1;\n    $factors[217] = 1;\n    $factors[221] = 1;\n\
    \    $factors[227] = 1;\n    $factors[229] = 1;\n    $factors[233] = 1;\n    $factors[239]\
    \ = 1;\n    $factors[241] = 1;\n    $factors[251] = 1;\n    $factors[257] = 1;\n\
    \    $factors[263] = 1;\n    $factors[269] = 1;\n    $factors[271] = 1;\n    $factors[277]\
    \ = 1;\n    $factors[281] = 1;\n    $factors[283] = 1;\n    $factors[293] = 1;\n\
    \    $factors[307] = 1;\n    $factors[311] = 1;\n    $factors[313] = 1;\n    $factors[317]\
    \ = 1;\n    $factors[323] = 1;\n    $factors[329] = 1;\n    $factors[331] = 1;\n\
    \    $factors[337] = 1;\n    $factors[343] = 1;\n    $factors[349\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpohwrfzct.php on line 78

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n          \
    \  $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfix5d614.php:19\n\
    Stack trace:\n#0 /tmp/tmpfix5d614.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfix5d614.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n\
    \    $i += 2;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykmo91gc.php:20\n\
    Stack trace:\n#0 /tmp/tmpykmo91gc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpykmo91gc.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $p = 1;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $p = $i;\n    }\n    $i++;\n\
    \  }\n  return $p;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhdlikei.php:19\n\
    Stack trace:\n#0 /tmp/tmpvhdlikei.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvhdlikei.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $factors[] = 1;\n \
    \ $largest = count($factors) - 1;\n  for ($i = 2; $i <= $largest; $i++) {\n  \
    \  if ($n % $factors[$i] == 0) {\n      $largest = $i;\n    }\n  }\n  return $factors[$largest];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5t793bj.php:22\n\
    Stack trace:\n#0 /tmp/tmpe5t793bj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpe5t793bj.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnwmwx_y.php:18\n\
    Stack trace:\n#0 /tmp/tmpnnwmwx_y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnnwmwx_y.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gd_i2k5.php:20\n\
    Stack trace:\n#0 /tmp/tmp0gd_i2k5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0gd_i2k5.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbri_h2uu.php:19\n\
    Stack trace:\n#0 /tmp/tmpbri_h2uu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbri_h2uu.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m5e4y5u.php:19\n\
    Stack trace:\n#0 /tmp/tmp0m5e4y5u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0m5e4y5u.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnwmwx_y.php:18\n\
    Stack trace:\n#0 /tmp/tmpnnwmwx_y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnnwmwx_y.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnwmwx_y.php:18\n\
    Stack trace:\n#0 /tmp/tmpnnwmwx_y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnnwmwx_y.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factors[2]\
    \ = 1;\n  $factors[3] = 1;\n  $factors[5] = 1;\n  $factors[7] = 1;\n  $factors[11]\
    \ = 1;\n  $factors[13] = 1;\n  $factors[17] = 1;\n  $factors[19] = 1;\n  $factors[23]\
    \ = 1;\n  $factors[29] = 1;\n  $factors[31] = 1;\n  $factors[37] = 1;\n  $factors[41]\
    \ = 1;\n  $factors[673] = 1;\n  $factors[713] = 1;\n  $factors[729] = 1;\n  $factors[737]\
    \ = 1;\n  $factors[749] = 1;\n  $factors[761] = 1;\n  $factors[769] = 1;\n  $factors[773]\
    \ = 1;\n  $factors[787] = 1;\n  $factors[797] = 1;\n  $factors[809] = 1;\n  $factors[811]\
    \ = 1;\n  $factors[821] = 1;\n  $factors[843] = 1;\n  $factors[851] = 1;\n  $factors[857]\
    \ = 1;\n  $factors[859] = 1;\n  $factors[863] = 1;\n  $factors[877] = 1;\n  $factors[881]\
    \ = 1;\n  $factors[883] = 1;\n  $factors[887] = 1;\n  $factors[907] = 1;\n  $factors[911]\
    \ = 1;\n  $factors[919] = 1;\n  $factors[929] = 1;\n  $factors[937] = 1;\n  $factors[941]\
    \ = 1;\n  $factors[947] = 1;\n  $factors[953] = 1;\n  $factors[959] = 1;\n  $factors[961]\
    \ = 1;\n  $factors[967] = 1;\n  $factors[971] = 1;\n  $factors[973] = 1;\n  $factors[979]\
    \ = 1;\n  $factors[983] = 1;\n  $factors[991] = 1;\n  $factors[997] = 1;\n  $factors[1009]\
    \ = 1;\n  $factors[1013] = 1;\n  $factors[1019] = 1;\n  $factors[1023] = 1;\n\
    \  $factors[1029] = 1;\n  $factors[1033] = 1;\n  $factors[1039] = 1;\n  $factors[1049]\
    \ = 1;\n  $factors[1051] = 1;\n  $factors[1053] = 1;\n  $factors[1059] = 1;\n\
    \  $factors[1061] = 1;\n  $factors[1063] = 1;\n  $factors[1069] = 1;\n  $factors[1087]\
    \ = 1;\n  $factors[1091] = 1;\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpo838o898.php on line 86

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnqovj25.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnqovj25.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxnqovj25.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $factors[] = 1;\n \
    \ $i = 2;\n  $j = 1;\n  while (true) {\n    if ($j > $n) {\n      break;\n   \
    \ }\n    if ($factors[$i] <= $factors[$j]) {\n      $j++;\n    } else {\n    \
    \  $i++;\n    }\n  }\n  return $factors[$i];\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_b9sk0k.php:28\n\
    Stack trace:\n#0 /tmp/tmpf_b9sk0k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf_b9sk0k.php\
    \ on line 28\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  for ($i = 0; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $factor *= $i;\n    }\n  }\n  return $factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpd4kxwne8.php:7\n\
    Stack trace:\n#0 /tmp/tmpd4kxwne8.php(16): largest_prime_factor(15)\n#1 /tmp/tmpd4kxwne8.php(20):\
    \ candidate(15)\n#2 /tmp/tmpd4kxwne8.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpd4kxwne8.php\
    \ on line 7\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <=\
    \ sqrt($n)) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n\
    \        $i += 2;\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfgn6ptv.php:19\n\
    Stack trace:\n#0 /tmp/tmpvfgn6ptv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvfgn6ptv.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6g5hmtv.php:20\n\
    Stack trace:\n#0 /tmp/tmpk6g5hmtv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpk6g5hmtv.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $max_factor\
    \ = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n          \
    \  $max_factor = $i;\n        }\n        $i++;\n    }\n    return $max_factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qv0wuok.php:20\n\
    Stack trace:\n#0 /tmp/tmp1qv0wuok.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1qv0wuok.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n\
    \    $i += 1;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozds6zlx.php:20\n\
    Stack trace:\n#0 /tmp/tmpozds6zlx.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpozds6zlx.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factor = 1;\n    $i = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i\
    \ == 0) {\n            $factors[] = $i;\n            $n = $n / $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb54wlbh.php:23\n\
    Stack trace:\n#0 /tmp/tmpkb54wlbh.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkb54wlbh.php\
    \ on line 23\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwr1e1wp.php:19\n\
    Stack trace:\n#0 /tmp/tmprwr1e1wp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprwr1e1wp.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 1;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcyh750p5.php:18\n\
    Stack trace:\n#0 /tmp/tmpcyh750p5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcyh750p5.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwr1e1wp.php:19\n\
    Stack trace:\n#0 /tmp/tmprwr1e1wp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprwr1e1wp.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnqovj25.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnqovj25.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxnqovj25.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirqnhatc.php:17\n\
    Stack trace:\n#0 /tmp/tmpirqnhatc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpirqnhatc.php\
    \ on line 17\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuest2d9.php:19\n\
    Stack trace:\n#0 /tmp/tmphuest2d9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphuest2d9.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factors[2]\
    \ = 1;\n  $factors[3] = 1;\n  $factors[5] = 1;\n  $factors[7] = 1;\n  $factors[11]\
    \ = 1;\n  $factors[13] = 1;\n  $factors[17] = 1;\n  $factors[19] = 1;\n  $factors[23]\
    \ = 1;\n  $factors[29] = 1;\n  $factors[31] = 1;\n  $factors[37] = 1;\n  $factors[41]\
    \ = 1;\n  $factors[673] = 1;\n  $factors[729] = 1;\n  $factors[767] = 1;\n  $factors[837]\
    \ = 1;\n  $factors[893] = 1;\n  $factors[947] = 1;\n  $factors[1023] = 1;\n  $factors[1059]\
    \ = 1;\n  $factors[1131] = 1;\n  $factors[1267] = 1;\n  $factors[1319] = 1;\n\
    \  $factors[1397] = 1;\n  $factors[1479] = 1;\n  $factors[1519] = 1;\n  $factors[1597]\
    \ = 1;\n  $factors[1679] = 1;\n  $factors[1719] = 1;\n  $factors[1797] = 1;\n\
    \  $factors[1889] = 1;\n  $factors[1931] = 1;\n  $factors[1971] = 1;\n  $factors[1993]\
    \ = 1;\n  $factors[2031] = 1;\n  $factors[2071] = 1;\n  $factors[2091] = 1;\n\
    \  $factors[2111] = 1;\n  $factors[2131] = 1;\n  $factors[2173] = 1;\n  $factors[2231]\
    \ = 1;\n  $factors[2271] = 1;\n  $factors[2291] = 1;\n  $factors[2333] = 1;\n\
    \  $factors[2371] = 1;\n  $factors[2431] = 1;\n  $factors[2473] = 1;\n  $factors[2531]\
    \ = 1;\n  $factors[2571] = 1;\n  $factors[2631] = 1;\n  $factors[2671] = 1;\n\
    \  $factors[2731] = 1;\n  $factors[2767] = 1;\n  $factors[2831] = 1;\n  $factors[2867]\
    \ = 1;\n  $factors[2931] = 1;\n  $factors[2967] = 1;\n  $factors[3031] = 1;\n\
    \  $factors[3067] = 1;\n  $factors[3131] = 1;\n  $factors[3171] = 1;\n  $factors[3231]\
    \ = 1;\n  $factors[3267] = 1;\n  $factors[3331] = 1;\n  $factors[3367] = 1;\n\
    \  $factors[3431] = 1;\n  $factors[3467\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyhf81u7w.php on line 73

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhqfjo9h.php:19\n\
    Stack trace:\n#0 /tmp/tmprhqfjo9h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprhqfjo9h.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $i = $j = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factors[] = $i;\n            while ($n % $i == 0) {\n                $n\
    \ /= $i;\n                $i++;\n            }\n        }\n        $j++;\n   \
    \ }\n    return $factors[count($factors) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirqnhatc.php:17\n\
    Stack trace:\n#0 /tmp/tmpirqnhatc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpirqnhatc.php\
    \ on line 17\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i <=\
    \ sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i . $n / $i;\n  \
    \          $i = 2;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaeru87n.php:21\n\
    Stack trace:\n#0 /tmp/tmpiaeru87n.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpiaeru87n.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i ==\
    \ 0) {\n            $factors[] = $i;\n            $factor *= $i;\n        }\n\
    \    }\n    return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubvbin5o.php:19\n\
    Stack trace:\n#0 /tmp/tmpubvbin5o.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpubvbin5o.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhqfjo9h.php:19\n\
    Stack trace:\n#0 /tmp/tmprhqfjo9h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprhqfjo9h.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2neyactm.php:22\n\
    Stack trace:\n#0 /tmp/tmp2neyactm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2neyactm.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  for ($i = 0; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[$i]\
    \ = $factor;\n      $factor++;\n    }\n  }\n  return $factors[$n];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpm9mtdgi5.php:7\n\
    Stack trace:\n#0 /tmp/tmpm9mtdgi5.php(16): largest_prime_factor(15)\n#1 /tmp/tmpm9mtdgi5.php(20):\
    \ candidate(15)\n#2 /tmp/tmpm9mtdgi5.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpm9mtdgi5.php\
    \ on line 7\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  for ($i = 0; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $factor *= $i;\n    }\n  }\n  return $factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpd4kxwne8.php:7\n\
    Stack trace:\n#0 /tmp/tmpd4kxwne8.php(16): largest_prime_factor(15)\n#1 /tmp/tmpd4kxwne8.php(20):\
    \ candidate(15)\n#2 /tmp/tmpd4kxwne8.php(27): test()\n#3 {main}\n  thrown in /tmp/tmpd4kxwne8.php\
    \ on line 7\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj_d9npl.php:19\n\
    Stack trace:\n#0 /tmp/tmpdj_d9npl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdj_d9npl.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            $n = $n / $i;\n        }\n        $i++;\n    }\n    return\
    \ $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nz7e5fm.php:21\n\
    Stack trace:\n#0 /tmp/tmp3nz7e5fm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3nz7e5fm.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i\
    \ . $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n     \
    \   }\n    }\n    return $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3gr3rr0.php:21\n\
    Stack trace:\n#0 /tmp/tmpg3gr3rr0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpg3gr3rr0.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[$i] = 1;\n  }\n  for ($i = 2; $i <=\
    \ $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[$i] = $i;\n      for ($j\
    \ = $i + 1; $j <= $n; $j++) {\n        if ($n % $j == 0) {\n          $factors[$j]\
    \ = $j;\n          break;\n        }\n      }\n    }\n  }\n  return $factors[$n];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmw2xdaz.php:26\n\
    Stack trace:\n#0 /tmp/tmpwmw2xdaz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwmw2xdaz.php\
    \ on line 26\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gd_i2k5.php:20\n\
    Stack trace:\n#0 /tmp/tmp0gd_i2k5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0gd_i2k5.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirqnhatc.php:17\n\
    Stack trace:\n#0 /tmp/tmpirqnhatc.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpirqnhatc.php\
    \ on line 17\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  for ($i = 0; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $factor;\n      $factor = 1;\n    } else {\n      $factor *= $i;\n    }\n\
    \  }\n  if ($factor != 1) {\n    $factors[] = $factor;\n  }\n  return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmp959h0vri.php:7\n\
    Stack trace:\n#0 /tmp/tmp959h0vri.php(21): largest_prime_factor(15)\n#1 /tmp/tmp959h0vri.php(25):\
    \ candidate(15)\n#2 /tmp/tmp959h0vri.php(32): test()\n#3 {main}\n  thrown in /tmp/tmp959h0vri.php\
    \ on line 7\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c9j90oz.php:19\n\
    Stack trace:\n#0 /tmp/tmp1c9j90oz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1c9j90oz.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpncciz4yl.php:17\n\
    Stack trace:\n#0 /tmp/tmpncciz4yl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpncciz4yl.php\
    \ on line 17\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    while ($n >= $factor) {\n        $factors[] = $factor;\n\
    \        $factor++;\n    }\n    $factors[] = $factor;\n    return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodnruw22.php:18\n\
    Stack trace:\n#0 /tmp/tmpodnruw22.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpodnruw22.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1zuzq_.php:18\n\
    Stack trace:\n#0 /tmp/tmpol1zuzq_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpol1zuzq_.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  $i = 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n     \
    \ $factors[] = $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n\
    \  return $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpasnzi4s_.php:22\n\
    Stack trace:\n#0 /tmp/tmpasnzi4s_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpasnzi4s_.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factors[2]\
    \ = 1;\n  $factors[3] = 1;\n  $factors[5] = 1;\n  $factors[7] = 1;\n  $factors[11]\
    \ = 1;\n  $factors[13] = 1;\n  $factors[17] = 1;\n  $factors[19] = 1;\n  $factors[23]\
    \ = 1;\n  $factors[29] = 1;\n  $factors[31] = 1;\n  $factors[37] = 1;\n  $factors[41]\
    \ = 1;\n  $factors[673] = 1;\n  $factors[713] = 1;\n  $factors[729] = 1;\n  $factors[737]\
    \ = 1;\n  $factors[749] = 1;\n  $factors[761] = 1;\n  $factors[769] = 1;\n  $factors[773]\
    \ = 1;\n  $factors[787] = 1;\n  $factors[791] = 1;\n  $factors[803] = 1;\n  $factors[809]\
    \ = 1;\n  $factors[811] = 1;\n  $factors[823] = 1;\n  $factors[827] = 1;\n  $factors[829]\
    \ = 1;\n  $factors[833] = 1;\n  $factors[839] = 1;\n  $factors[841] = 1;\n  $factors[843]\
    \ = 1;\n  $factors[845] = 1;\n  $factors[847] = 1;\n  $factors[849] = 1;\n  $factors[851]\
    \ = 1;\n  $factors[853] = 1;\n  $factors[855] = 1;\n  $factors[857] = 1;\n  $factors[859]\
    \ = 1;\n  $factors[863] = 1;\n  $factors[877] = 1;\n  $factors[881] = 1;\n  $factors[883]\
    \ = 1;\n  $factors[887] = 1;\n  $factors[907] = 1;\n  $factors[911] = 1;\n  $factors[919]\
    \ = 1;\n  $factors[929] = 1;\n  $factors[937] = 1;\n  $factors[941] = 1;\n  $factors[947]\
    \ = 1;\n  $factors[953] = 1;\n  $factors[967] = 1;\n  $factors[971] = 1;\n  $factors[973]\
    \ = 1;\n  $factors[979] = 1;\n  $factors[981] = 1;\n  $factors[983] = 1;\n  $factors[987]\
    \ = 1;\n  $factors[989] = 1;\n  $factors[993] = 1;\n  $factors[997] = 1;\n  $factors[1001]\
    \ = 1;\n  $factors[1009] = 1;\n  $factors[1013] = 1;\n  $factors[1019] = 1;\n\
    \  $factors[1023\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzrmeu1hf.php on line 74

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n          \
    \  $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm9mv0if.php:19\n\
    Stack trace:\n#0 /tmp/tmpcm9mv0if.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpcm9mv0if.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n \
    \   while ($p > 1) {\n        if ($n % $i == 0) {\n            $p = $i;\n    \
    \    }\n        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $factor\
    \ = 1;\n  while ($n >= $factor) {\n    $factors[] = $factor;\n    $n      /= $factor;\n\
    \    $factor  += 1;\n  }\n  return $factors[count($factors) - 1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24zhhxv9.php:19\n\
    Stack trace:\n#0 /tmp/tmp24zhhxv9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp24zhhxv9.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factor\
    \ = $i;\n            break;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_2793ae.php:20\n\
    Stack trace:\n#0 /tmp/tmpu_2793ae.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpu_2793ae.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2neyactm.php:22\n\
    Stack trace:\n#0 /tmp/tmp2neyactm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2neyactm.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  $p\
    \ = $n;\n  while ($p > 1) {\n    $factors[] = $p;\n    $p = $p * $p % $n;\n  }\n\
    \  return $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwapfkj5.php:17\n\
    Stack trace:\n#0 /tmp/tmpqwapfkj5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqwapfkj5.php\
    \ on line 17\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnqovj25.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnqovj25.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxnqovj25.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $i = 2;\n  while (true)\
    \ {\n    $isprime = true;\n    foreach ($factors as $factor) {\n      if ($n %\
    \ $factor == 0) {\n        $isprime = false;\n        break;\n      }\n    }\n\
    \    if ($isprime) {\n      break;\n    }\n    $i++;\n  }\n  return $i;\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n\
    \    $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n\
    \            $factor++;\n            $n = ($n / $i) * $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    return $factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnqovj25.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnqovj25.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxnqovj25.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_p4kaxe9.php:19\n\
    Stack trace:\n#0 /tmp/tmp_p4kaxe9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_p4kaxe9.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    for($i = 3; $i <= $n; $i++) {\n        if($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $factor *= $i;\n        }\n    }\n\
    \    return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxppxgq8.php:19\n\
    Stack trace:\n#0 /tmp/tmpmxppxgq8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmxppxgq8.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[$i] = $i;\n  }\n  $factors[$n] = 1;\n\
    \  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n      $factors[$i]\
    \ = $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return\
    \ $factors[$n];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmt2r_384.php:25\n\
    Stack trace:\n#0 /tmp/tmpmt2r_384.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmt2r_384.php\
    \ on line 25\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m5e4y5u.php:19\n\
    Stack trace:\n#0 /tmp/tmp0m5e4y5u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0m5e4y5u.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[$i] = $i;\n  }\n  $factors[$n] = 1;\n\
    \  $i = 2;\n  while (true) {\n    if ($factors[$i] == $n) {\n      return $i;\n\
    \    }\n    for ($j = $i + 1; $j <= $n; $j++) {\n      if ($n % $j == 0) {\n \
    \       $factors[$j] = $n;\n      }\n    }\n    $i++;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3leckusu.php:27\n\
    Stack trace:\n#0 /tmp/tmp3leckusu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3leckusu.php\
    \ on line 27\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32_o2unj.php:18\n\
    Stack trace:\n#0 /tmp/tmp32_o2unj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp32_o2unj.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwr1e1wp.php:19\n\
    Stack trace:\n#0 /tmp/tmprwr1e1wp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprwr1e1wp.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $i = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $factors[count($factors)-1];\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsd6h33y4.php:21\n\
    Stack trace:\n#0 /tmp/tmpsd6h33y4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpsd6h33y4.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhqfjo9h.php:19\n\
    Stack trace:\n#0 /tmp/tmprhqfjo9h.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprhqfjo9h.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2neyactm.php:22\n\
    Stack trace:\n#0 /tmp/tmp2neyactm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2neyactm.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj_d9npl.php:19\n\
    Stack trace:\n#0 /tmp/tmpdj_d9npl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdj_d9npl.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i <=\
    \ sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i . '/' . $n;\n \
    \       } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3c2lp2c.php:20\n\
    Stack trace:\n#0 /tmp/tmpj3c2lp2c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpj3c2lp2c.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0m5e4y5u.php:19\n\
    Stack trace:\n#0 /tmp/tmp0m5e4y5u.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0m5e4y5u.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        $factors[$i] = $i;\n        for($j =\
    \ 2; $j <= $i; $j++) {\n            if($i % $j == 0) {\n                $factors[$i]\
    \ = $j;\n                break;\n            }\n        }\n    }\n    return $factors[$n];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9t6bp2x.php:22\n\
    Stack trace:\n#0 /tmp/tmpz9t6bp2x.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpz9t6bp2x.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $i = 2;\n  while (count($factors)\
    \ > 0) {\n    $j = 0;\n    while ($j < count($factors) && $factors[$j] * $i <=\
    \ $n) {\n      $i++;\n      $j++;\n    }\n    if ($j == count($factors)) {\n \
    \     return $factors[count($factors) - 1];\n    }\n    $factors[$j] = $i;\n \
    \   $i++;\n  }\n  return 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n \
    \   while ($p <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n  \
    \      }\n        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_mvoi3q4.php:18\n\
    Stack trace:\n#0 /tmp/tmp_mvoi3q4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_mvoi3q4.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2neyactm.php:22\n\
    Stack trace:\n#0 /tmp/tmp2neyactm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp2neyactm.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factor = 1;\n    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0)\
    \ {\n            $factors[] = $i;\n            $factor *= $i;\n        }\n   \
    \     $i++;\n    }\n    return $factor;\n}\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f8f3wv6.php:21\n\
    Stack trace:\n#0 /tmp/tmp4f8f3wv6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4f8f3wv6.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factors[] = $i;\n  }\n  $factors[] = 1;\n \
    \ $i = 2;\n  $j = 1;\n  while (true) {\n    if ($i * $j < $n) {\n      $j++;\n\
    \      continue;\n    }\n    $k = $i;\n    while ($k <= $n / $j) {\n      $k++;\n\
    \    }\n    if ($k > $n / $j) {\n      break;\n    }\n    $factors[] = $j;\n \
    \   $i = $k;\n    $j++;\n  }\n  return $factors[count($factors) - 1];\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrd66yg2.php:34\n\
    Stack trace:\n#0 /tmp/tmptrd66yg2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptrd66yg2.php\
    \ on line 34\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk5r0r2zz.php:20\n\
    Stack trace:\n#0 /tmp/tmpk5r0r2zz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk5r0r2zz.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[713] = 1;\n    $factors[729] = 1;\n    $factors[737] = 1;\n    $factors[749]\
    \ = 1;\n    $factors[761] = 1;\n    $factors[769] = 1;\n    $factors[773] = 1;\n\
    \    $factors[787] = 1;\n    $factors[797] = 1;\n    $factors[809] = 1;\n    $factors[811]\
    \ = 1;\n    $factors[821] = 1;\n    $factors[823] = 1;\n    $factors[827] = 1;\n\
    \    $factors[829] = 1;\n    $factors[833] = 1;\n    $factors[839] = 1;\n    $factors[841]\
    \ = 1;\n    $factors[843] = 1;\n    $factors[845] = 1;\n    $factors[847] = 1;\n\
    \    $factors[849] = 1;\n    $factors[851] = 1;\n    $factors[853] = 1;\n    $factors[855]\
    \ = 1;\n    $factors[857] = 1;\n    $factors[859] = 1;\n    $factors[863] = 1;\n\
    \    $factors[867] = 1;\n    $factors[869] = 1;\n    $factors[871] = 1;\n    $factors[873]\
    \ = 1;\n    $factors[877] = 1;\n    $factors[879] = 1;\n    $factors[881] = 1;\n\
    \    $factors[883] = 1;\n    $factors[885] = 1;\n    $factors[887] = 1;\n    $factors[889]\
    \ = 1;\n    $factors[893] = 1;\n    $factors[897] = 1;\n    $factors[899] = 1;\n\
    \    $factors[901] = 1;\n    $factors[903] = 1;\n    $factors[907] = 1;\n    $factors[909]\
    \ = 1;\n    $factors[911] = 1;\n    $factors[913] = 1;\n    $factors[915] = 1;\n\
    \    $factors[917] = 1;\n    $factors[919] = 1;\n    $factors[923] = 1;\n    $factors[927]\
    \ = 1;\n    $factors[929] = 1;\n    $factors[9\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqg_inwpz.php on line 74

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32_o2unj.php:18\n\
    Stack trace:\n#0 /tmp/tmp32_o2unj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp32_o2unj.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnqovj25.php:18\n\
    Stack trace:\n#0 /tmp/tmpxnqovj25.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxnqovj25.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n          \
    \  $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk03ar8x9.php:18\n\
    Stack trace:\n#0 /tmp/tmpk03ar8x9.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpk03ar8x9.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    // If n is divisible by any number between 1\
    \ and $i, then n is prime\n    if ($n % $i == 0) {\n      $factors[] = $i;\n \
    \   }\n  }\n  return $factors[count($factors) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9aiqo0fv.php:19\n\
    Stack trace:\n#0 /tmp/tmp9aiqo0fv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9aiqo0fv.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  for\
    \ ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \    }\n  }\n  return max($factors);\n}\n\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdmekhcu.php:18\n\
    Stack trace:\n#0 /tmp/tmpsdmekhcu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsdmekhcu.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n\
    \    $i++;\n  }\n  return 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvo986e9h.php:19\n\
    Stack trace:\n#0 /tmp/tmpvo986e9h.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvo986e9h.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n          \
    \  $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfix5d614.php:19\n\
    Stack trace:\n#0 /tmp/tmpfix5d614.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfix5d614.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32_o2unj.php:18\n\
    Stack trace:\n#0 /tmp/tmp32_o2unj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp32_o2unj.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array();\n  $i =\
    \ 2;\n  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $factors[] =\
    \ $i;\n      $n = $n / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $factors[count($factors)\
    \ - 1];\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8i9ed31i.php:21\n\
    Stack trace:\n#0 /tmp/tmp8i9ed31i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8i9ed31i.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lq2uupm.php:19\n\
    Stack trace:\n#0 /tmp/tmp4lq2uupm.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4lq2uupm.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    } else {\n      $i++;\n\
    \    }\n    if ($i == $n) {\n      break;\n    }\n  }\n  return $i;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw10itgbr.php:23\n\
    Stack trace:\n#0 /tmp/tmpw10itgbr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpw10itgbr.php\
    \ on line 23\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    while ($n % $factor == 0) {\n        $factors[] = $factor;\n\
    \        $n = ($n / $factor);\n        $factor++;\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkisdnstk.php:19\n\
    Stack trace:\n#0 /tmp/tmpkisdnstk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkisdnstk.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while($i <=\
    \ sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i . '/' . $n;\n \
    \       } else {\n            $i++;\n        }\n    }\n    return $n;\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8h3idysi.php:19\n\
    Stack trace:\n#0 /tmp/tmp8h3idysi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8h3idysi.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  $factor = 1;\n    for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i ==\
    \ 0) {\n            $factors[] = $i;\n            $factor *= $i;\n        }\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_aijcj9.php:20\n\
    Stack trace:\n#0 /tmp/tmpo_aijcj9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpo_aijcj9.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while (true) {\n\
    \    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)-1];\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx5q1cq_.php:20\n\
    Stack trace:\n#0 /tmp/tmpwx5q1cq_.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpwx5q1cq_.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $max_factor\
    \ = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n          \
    \  $max_factor = $i;\n        }\n        $i++;\n    }\n    return $max_factor;\n\
    }\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk6j92qy.php:19\n\
    Stack trace:\n#0 /tmp/tmpnk6j92qy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnk6j92qy.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 0
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $primes = array(2);\n  $factor\
    \ = 2;\n  while ($factor <= $n) {\n    if ($n % $factor == 0) {\n      $primes[]\
    \ = $factor;\n      $n = $n / $factor;\n    } else {\n      $factor++;\n    }\n\
    \  }\n  return $primes[count($primes) - 1];\n}\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $p = 1;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $p = $i;\n    }\n    $i++;\n\
    \  }\n  return $p;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg7jkn9r.php:20\n\
    Stack trace:\n#0 /tmp/tmpdg7jkn9r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdg7jkn9r.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n\
    \  while ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n\
    \    $i += 2;\n  }\n  return $n;\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyehc9tcy.php:19\n\
    Stack trace:\n#0 /tmp/tmpyehc9tcy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyehc9tcy.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: -1
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  $p = $n;\n  while\
    \ ($p > 1) {\n    if ($n % $i == 0) {\n      $p = $i;\n    }\n    $i++;\n  }\n\
    \  return $p;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731042
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n   \
    \         $i = $i * 2;\n        } else {\n            $i = $i * 2;\n        }\n\
    \    }\n    return $p;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpse8ru0zf.php:21\n\
    Stack trace:\n#0 /tmp/tmpse8ru0zf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpse8ru0zf.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = 1;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $p = $i;\n\
    \            $n = $n / $i;\n        } else {\n            $i++;\n        }\n \
    \   }\n    return $p;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamtg2vja.php:21\n\
    Stack trace:\n#0 /tmp/tmpamtg2vja.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpamtg2vja.php\
    \ on line 21\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n      $factors[]\
    \ = $i;\n      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) -\
    \ 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj_d9npl.php:19\n\
    Stack trace:\n#0 /tmp/tmpdj_d9npl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdj_d9npl.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  $p\
    \ = $n;\n  while ($p > 1) {\n    $factors[] = $p;\n    $p = $p * $p % 11;\n  }\n\
    \  return $factors[count($factors) - 1];\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpxj_xu50x.php on line 7

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factor = 1;\n    for($i = 1; $i <= $n; $i++) {\n        $factors[$i] = $factor;\n\
    \        $factor *= $i;\n    }\n    for($i = 2; $i <= $n; $i++) {\n        if($factors[$i]\
    \ > $factors[$i - 1]) {\n            $factors[$i] = $factors[$i - 1];\n      \
    \  }\n    }\n    return $factors[$n];\n}\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltnqo08g.php:22\n\
    Stack trace:\n#0 /tmp/tmpltnqo08g.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpltnqo08g.php\
    \ on line 22\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factor = 1;\n    for($i = 0; $i < $n; $i++) {\n        $factors[$i] = $factor;\n\
    \        $factor *= $i;\n    }\n    for($i = 1; $i < $n; $i++) {\n        if($factors[$i]\
    \ > $factors[$i - 1]) {\n            $factors[$i] = $factors[$i - 1];\n      \
    \  }\n    }\n    return $factors[$n];\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphv05haph.php:23\n\
    Stack trace:\n#0 /tmp/tmphv05haph.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphv05haph.php\
    \ on line 23\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $factors = array(2);\n  for\
    \ ($i = 3; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n = $n / $i;\n    }\n  }\n  return $factors[count($factors) - 1];\n}\n\
    \nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7l11vrl.php:20\n\
    Stack trace:\n#0 /tmp/tmpd7l11vrl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd7l11vrl.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1c9j90oz.php:19\n\
    Stack trace:\n#0 /tmp/tmp1c9j90oz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp1c9j90oz.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i += 2;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnwmwx_y.php:18\n\
    Stack trace:\n#0 /tmp/tmpnnwmwx_y.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnnwmwx_y.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <=\
    \ sqrt($n)) {\n        if ($n % $i == 0) {\n            return $i;\n        }\n\
    \        $i++;\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqsuvox6.php:19\n\
    Stack trace:\n#0 /tmp/tmpxqsuvox6.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxqsuvox6.php\
    \ on line 19\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array(2);\n  \
    \  for($i = 3; $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n = $n / $i;\n        }\n    }\n    return\
    \ $factors[count($factors) - 1];\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol1zuzq_.php:18\n\
    Stack trace:\n#0 /tmp/tmpol1zuzq_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpol1zuzq_.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ 1;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzg_c8bx.php:18\n\
    Stack trace:\n#0 /tmp/tmpgzg_c8bx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgzg_c8bx.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ $factors[2] = 1;\n    $factors[3] = 1;\n    $factors[5] = 1;\n    $factors[7]\
    \ = 1;\n    $factors[11] = 1;\n    $factors[13] = 1;\n    $factors[17] = 1;\n\
    \    $factors[19] = 1;\n    $factors[23] = 1;\n    $factors[29] = 1;\n    $factors[31]\
    \ = 1;\n    $factors[37] = 1;\n    $factors[41] = 1;\n    $factors[673] = 1;\n\
    \    $factors[729] = 1;\n    $factors[767] = 1;\n    $factors[831] = 1;\n    $factors[893]\
    \ = 1;\n    $factors[947] = 1;\n    $factors[1023] = 1;\n    $factors[1059] =\
    \ 1;\n    $factors[1131] = 1;\n    $factors[1267] = 1;\n    $factors[1319] = 1;\n\
    \    $factors[1397] = 1;\n    $factors[1479] = 1;\n    $factors[1519] = 1;\n \
    \   $factors[1597] = 1;\n    $factors[1679] = 1;\n    $factors[1719] = 1;\n  \
    \  $factors[1797] = 1;\n    $factors[1889] = 1;\n    $factors[1931] = 1;\n   \
    \ $factors[1971] = 1;\n    $factors[1993] = 1;\n    $factors[2031] = 1;\n    $factors[2071]\
    \ = 1;\n    $factors[2091] = 1;\n    $factors[2113] = 1;\n    $factors[2131] =\
    \ 1;\n    $factors[2173] = 1;\n    $factors[2231] = 1;\n    $factors[2271] = 1;\n\
    \    $factors[2293] = 1;\n    $factors[2331] = 1;\n    $factors[2371] = 1;\n \
    \   $factors[2431] = 1;\n    $factors[2495] = 1;\n    $factors[2539] = 1;\n  \
    \  $factors[2583] = 1;\n    $factors[2623] = 1;\n    $factors[2659] = 1;\n   \
    \ $factors[2717] = 1;\n    $factors[2779] = 1;\n    $factors[2819] = 1;\n    $factors[2831]\
    \ = 1;\n    $factors[2927] = 1;\n    $factors[2959] = 1;\n    $factors[3031] =\
    \ 1;\n    $factors[3073] = 1;\n    $factors[3113] = 1;\n    $factors[3171] = 1;\n\
    \    $factors[3231] = 1;\n    $factors[3295] = 1;\n    $factors[3339] = 1;\n \
    \   $factors[3383] = 1;\n    $factors[3423] = 1;\n    $factor\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpky4mzb5n.php on line 73

    '
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n  $i = 2;\n  while ($i <= sqrt($n))\
    \ {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i++;\n  }\n  return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbkzdl74.php:18\n\
    Stack trace:\n#0 /tmp/tmpxbkzdl74.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpxbkzdl74.php\
    \ on line 18\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
- exit_code: 255
  program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\nfunction largest_prime_factor($n) {\n    $factors = array();\n   \
    \ for($i = 2; $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        }\n    }\n    return $factors[count($factors)\
    \ - 1];\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn_lqsn96.php:20\n\
    Stack trace:\n#0 /tmp/tmpn_lqsn96.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn_lqsn96.php\
    \ on line 20\n"
  timestamp: 1659731037
