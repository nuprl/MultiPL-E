language: php
name: HumanEval_11_string_xor
results:
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgugekkr7.php:17\n\
    Stack trace:\n#0 /tmp/tmpgugekkr7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgugekkr7.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ bin2hex($b)), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_b7f29b.php:12\n\
    Stack trace:\n#0 /tmp/tmpa_b7f29b.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpa_b7f29b.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprui5ldz2.php:17\n\
    Stack trace:\n#0 /tmp/tmprui5ldz2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprui5ldz2.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(bin2hex($a) ^ bin2hex($b),\
    \ 32, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php on\
    \ line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit \x01 in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit \x01 in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nWarning: pack(): Type H: illegal hex digit  in /tmp/tmpj_r06bdd.php\
    \ on line 5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_r06bdd.php:12\n\
    Stack trace:\n#0 /tmp/tmpj_r06bdd.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpj_r06bdd.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= $a[$i] ^ $b[$i];\n    }\n    return $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wgskz75.php:16\n\
    Stack trace:\n#0 /tmp/tmp0wgskz75.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp0wgskz75.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex(str_pad($a, 8, '0', STR_PAD_LEFT))\
    \ ^\n                          str_pad($b, 8, '0', STR_PAD_LEFT)));\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh5bs1b5.php:13\n\
    Stack trace:\n#0 /tmp/tmpwh5bs1b5.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpwh5bs1b5.php\
    \ on line 13\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_h9k7_h.php:17\n\
    Stack trace:\n#0 /tmp/tmpp_h9k7_h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpp_h9k7_h.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex($a) ^ $b));\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphimgqvfj.php:12\n\
    Stack trace:\n#0 /tmp/tmphimgqvfj.php(17): test()\n#1 {main}\n  thrown in /tmp/tmphimgqvfj.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ bin2hex($b)), 8, '0', STR_PAD_LEFT)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpimsxqyvd.php:13\n\
    Stack trace:\n#0 /tmp/tmpimsxqyvd.php(18): test()\n#1 {main}\n  thrown in /tmp/tmpimsxqyvd.php\
    \ on line 13\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ bin2hex($b)), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_b7f29b.php:12\n\
    Stack trace:\n#0 /tmp/tmpa_b7f29b.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpa_b7f29b.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex(str_pad($a, 8, '0', STR_PAD_LEFT))\
    \ ^\n      str_pad($b, 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06v4brsk.php:13\n\
    Stack trace:\n#0 /tmp/tmp06v4brsk.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp06v4brsk.php\
    \ on line 13\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ bin2hex($b)), 32, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki71y8mp.php:12\n\
    Stack trace:\n#0 /tmp/tmpki71y8mp.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpki71y8mp.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgugekkr7.php:17\n\
    Stack trace:\n#0 /tmp/tmpgugekkr7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgugekkr7.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujdo9yww.php:16\n\
    Stack trace:\n#0 /tmp/tmpujdo9yww.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpujdo9yww.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $xor;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_iob8ye.php:17\n\
    Stack trace:\n#0 /tmp/tmp1_iob8ye.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1_iob8ye.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $xor;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_iob8ye.php:17\n\
    Stack trace:\n#0 /tmp/tmp1_iob8ye.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1_iob8ye.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprui5ldz2.php:17\n\
    Stack trace:\n#0 /tmp/tmprui5ldz2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprui5ldz2.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= $a[$i] ^ $b[$i];\n  }\n  return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_h9k7_h.php:17\n\
    Stack trace:\n#0 /tmp/tmpp_h9k7_h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpp_h9k7_h.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex($a) ^ $b));\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphimgqvfj.php:12\n\
    Stack trace:\n#0 /tmp/tmphimgqvfj.php(17): test()\n#1 {main}\n  thrown in /tmp/tmphimgqvfj.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= $a[$i] ^ $b[$i];\n    }\n    return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1zyx_rd.php:17\n\
    Stack trace:\n#0 /tmp/tmpg1zyx_rd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpg1zyx_rd.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= $a[$i] ^ $b[$i];\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki83a5in.php:17\n\
    Stack trace:\n#0 /tmp/tmpki83a5in.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpki83a5in.php\
    \ on line 17\n"
  timestamp: 1659729980
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopmyhvv7.php:16\n\
    Stack trace:\n#0 /tmp/tmpopmyhvv7.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpopmyhvv7.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex(str_pad($a, 8, '0', STR_PAD_LEFT))\
    \ ^\n      str_pad($b, 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06v4brsk.php:13\n\
    Stack trace:\n#0 /tmp/tmp06v4brsk.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp06v4brsk.php\
    \ on line 13\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ bin2hex($b)), 32, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n\
    \    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki71y8mp.php:12\n\
    Stack trace:\n#0 /tmp/tmpki71y8mp.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpki71y8mp.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $res = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d7zt9lf.php:17\n\
    Stack trace:\n#0 /tmp/tmp1d7zt9lf.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1d7zt9lf.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprui5ldz2.php:17\n\
    Stack trace:\n#0 /tmp/tmprui5ldz2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprui5ldz2.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b0vb0ij.php:16\n\
    Stack trace:\n#0 /tmp/tmp5b0vb0ij.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5b0vb0ij.php\
    \ on line 16\n"
  timestamp: 1659729980
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= $a[$i] ^ $b[$i];\n    }\n    return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1zyx_rd.php:17\n\
    Stack trace:\n#0 /tmp/tmpg1zyx_rd.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpg1zyx_rd.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = \"\";\n    for ($i = 0; $i < strlen($a);\
    \ $i++) {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"\
    010010\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\"\
    , \"1\") !== \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0101\", \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprui5ldz2.php:17\n\
    Stack trace:\n#0 /tmp/tmprui5ldz2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmprui5ldz2.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(bin2hex(bin2hex(str_pad($a, 8, \"0\"\
    , STR_PAD_LEFT)) ^\n                           str_pad($b, 8, \"0\", STR_PAD_LEFT)));\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7u8mzw9h.php:13\n\
    Stack trace:\n#0 /tmp/tmp7u8mzw9h.php(18): test()\n#1 {main}\n  thrown in /tmp/tmp7u8mzw9h.php\
    \ on line 13\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  return bin2hex(pack('H*', str_pad(dechex(bin2hex($a)\
    \ ^ $b), 8, '0', STR_PAD_LEFT)));\n}\nfunction candidate(...$args) {\n    return\
    \ string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"111000\"\
    , \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhrvpzhu.php:12\n\
    Stack trace:\n#0 /tmp/tmpwhrvpzhu.php(17): test()\n#1 {main}\n  thrown in /tmp/tmpwhrvpzhu.php\
    \ on line 12\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= $a[$i] ^ $b[$i];\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5b0vb0ij.php:16\n\
    Stack trace:\n#0 /tmp/tmp5b0vb0ij.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5b0vb0ij.php\
    \ on line 16\n"
  timestamp: 1659729980
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $xor = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $xor;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_iob8ye.php:17\n\
    Stack trace:\n#0 /tmp/tmp1_iob8ye.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp1_iob8ye.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ok2sic_.php:16\n\
    Stack trace:\n#0 /tmp/tmp3ok2sic_.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp3ok2sic_.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7c7967b.php:16\n\
    Stack trace:\n#0 /tmp/tmpy7c7967b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpy7c7967b.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu49n_zo6.php:17\n\
    Stack trace:\n#0 /tmp/tmpu49n_zo6.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpu49n_zo6.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $res = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $res .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6s2a5ib.php:17\n\
    Stack trace:\n#0 /tmp/tmpc6s2a5ib.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc6s2a5ib.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $result = \"\";\n  for ($i = 0; $i < strlen($a); $i++)\
    \ {\n    $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw7_cq63.php:16\n\
    Stack trace:\n#0 /tmp/tmprw7_cq63.php(21): test()\n#1 {main}\n  thrown in /tmp/tmprw7_cq63.php\
    \ on line 16\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= $a[$i] ^ $b[$i];\n  }\n  return $xor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return string_xor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    111000\", \"101010\") !== \"010010\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"1\", \"1\") !== \"0\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0101\", \"0000\") !== \"0101\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23tkkkp5.php:17\n\
    Stack trace:\n#0 /tmp/tmp23tkkkp5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp23tkkkp5.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n    $result = '';\n    for ($i = 0; $i < strlen($a); $i++)\
    \ {\n        $result .= chr(ord($a[$i]) ^ ord($b[$i]));\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !==\
    \ \"0\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\"\
    , \"0000\") !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgugekkr7.php:17\n\
    Stack trace:\n#0 /tmp/tmpgugekkr7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgugekkr7.php\
    \ on line 17\n"
  timestamp: 1659730046
- exit_code: 255
  program: "<?php\n// Input are two strings a and b consisting only of 1s and 0s.\n\
    // Perform binary XOR on these inputs and return result also as a string.\nfunction\
    \ string_xor($a, $b) {\n  $xor = '';\n  for ($i = 0; $i < strlen($a); $i++) {\n\
    \    $xor .= chr(ord($a[$i]) ^ ord($b[$i]));\n  }\n  return $xor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return string_xor(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"111000\", \"101010\") !== \"010010\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"1\", \"1\") !== \"0\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"0101\", \"0000\"\
    ) !== \"0101\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurrk2p9k.php:17\n\
    Stack trace:\n#0 /tmp/tmpurrk2p9k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpurrk2p9k.php\
    \ on line 17\n"
  timestamp: 1659730046
