language: php
name: HumanEval_158_find_max
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $length = strlen($word);\n        if ($length > $max) {\n            $max\
    \ = $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5_57rl1.php:25\n\
    Stack trace:\n#0 /tmp/tmpp5_57rl1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp5_57rl1.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $w) {\n        $count\
    \ = str_word_count($w);\n        if ($count > $max) {\n            $max = $count;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_w393txu.php:24\n\
    Stack trace:\n#0 /tmp/tmp_w393txu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_w393txu.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars_length = array();\n    $max_chars_length\
    \ = array_fill(0, count($words), 0);\n    foreach ($words as $word) {\n      \
    \  $length = strlen($word);\n        $max_chars_length[$length]++;\n        $max_chars[$length]\
    \ = $word;\n    }\n    foreach ($max_chars as $length => $word) {\n        $max_chars[$length]\
    \ = $max_chars[$length] . ' ' . $max_chars_length[$length];\n    }\n    arsort($max_chars);\n\
    \    return $max_chars[0];\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2vop7yu.php:27\n\
    Stack trace:\n#0 /tmp/tmpq2vop7yu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpq2vop7yu.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars_length = array();\n    foreach\
    \ ($words as $word) {\n        $chars = str_split($word);\n        $max_chars_length[$word]\
    \ = count($chars);\n        $max_chars[$word] = $chars;\n    }\n    arsort($max_chars_length);\n\
    \    foreach ($max_chars_length as $word => $length) {\n        if ($length ==\
    \ 1) {\n            return $word;\n        }\n    }\n}\n\n$words = array('apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwukam822.php on line 22

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = get_unique_chars($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmp92v05tya.php:10\nStack trace:\n#0 /tmp/tmp92v05tya.php(20): find_max(Array)\n\
    #1 /tmp/tmp92v05tya.php(24): candidate(Array)\n#2 /tmp/tmp92v05tya.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp92v05tya.php on line 10\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_chars = array();\n  $max_words = array();\n  foreach ($words as $word)\
    \ {\n    $chars = count($word);\n    if ($chars > count($max_chars)) {\n     \
    \ $max_chars = $chars;\n      $max_words = $word;\n    } else if ($chars == count($max_chars))\
    \ {\n      $max_words = $word;\n    }\n  }\n  return $max_words;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpug74akhy.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 14\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 14\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 14\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpug74akhy.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpug74akhy.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpug74akhy.php:27\n\
    Stack trace:\n#0 /tmp/tmpug74akhy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpug74akhy.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $unique = array_count_values(str_split($word));\n        if ($unique[$max] <\
    \ $unique[$word]) {\n            $max = $word;\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthbctsc0.php:23\n\
    Stack trace:\n#0 /tmp/tmpthbctsc0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpthbctsc0.php\
    \ on line 23\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $word) {\n    $count = str_word_count($word);\n\
    \    if ($count > $max) {\n      $max = $count;\n      $word = $word;\n    }\n\
    \  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue_vmo_i.php:25\n\
    Stack trace:\n#0 /tmp/tmpue_vmo_i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpue_vmo_i.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max_count = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsrp5zggm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpsrp5zggm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpsrp5zggm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsrp5zggm.php:24\nStack trace:\n#0 /tmp/tmpsrp5zggm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsrp5zggm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_words = array();\n    foreach ($words\
    \ as $word) {\n        $chars = count($word);\n        if ($chars > count($max_chars))\
    \ {\n            $max_chars = $chars;\n            $max_words = $word;\n     \
    \   } else if ($chars == count($max_chars)) {\n            $max_chars = $chars;\n\
    \            $max_words[] = $word;\n        }\n    }\n    return $max_words;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpddmwut5t.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpddmwut5t.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpddmwut5t.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpddmwut5t.php\
    \ on line 14\n\nFatal error: Uncaught Error: [] operator not supported for strings\
    \ in /tmp/tmpddmwut5t.php:16\nStack trace:\n#0 /tmp/tmpddmwut5t.php(23): find_max(Array)\n\
    #1 /tmp/tmpddmwut5t.php(27): candidate(Array)\n#2 /tmp/tmpddmwut5t.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpddmwut5t.php on line 16\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\n$words = array('apple', 'banana', 'apple', 'pear', 'apple', 'pear', 'orange',\
    \ 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear',\
    \ 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple',\
    \ 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear',\
    \ 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple',\
    \ 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange',\
    \ 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear',\
    \ 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple',\
    \ 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear',\
    \ 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple',\
    \ 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange',\
    \ 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear',\
    \ 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple',\
    \ 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear',\
    \ 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple',\
    \ 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange',\
    \ 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear',\
    \ 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple',\
    \ 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear',\
    \ 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple',\
    \ 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange',\
    \ 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear',\
    \ 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear', 'apple',\
    \ 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple', 'pear',\
    \ 'apple', 'pear', 'orange', 'apple', 'pear', 'apple', 'pear', 'orange', 'apple',\
    \ 'pear', 'apple', 'pear\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuv1r63p6.php on line 19

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $chars = array_count_values($chars);\n \
    \       $char = array_keys($chars)[0];\n        if ($char > $max) {\n        \
    \    $max = $char;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_5gm2u_.php:27\n\
    Stack trace:\n#0 /tmp/tmpa_5gm2u_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa_5gm2u_.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = $words[0];\n  $max_count = 0;\n  foreach ($words as $word) {\n \
    \   $count = str_word_count($word);\n    if ($count > $max_count) {\n      $max\
    \ = $word;\n      $max_count = $count;\n    }\n  }\n  return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qzvfmob.php:24\n\
    Stack trace:\n#0 /tmp/tmp8qzvfmob.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp8qzvfmob.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = count($word);\n    if ($count > $max_count) {\n      $max_count =\
    \ $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplkbdbddq.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmplkbdbddq.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmplkbdbddq.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplkbdbddq.php:24\nStack trace:\n#0 /tmp/tmplkbdbddq.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplkbdbddq.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars[0] = 0;\n    foreach ($words as\
    \ $word) {\n        $chars = count($word);\n        if ($chars > $max_chars[$chars])\
    \ {\n            $max_chars[$chars] = $chars;\n        }\n    }\n    asort($max_chars);\n\
    \    return $words[array_search($max_chars[0], $max_chars)];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmph0k4nphp.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmph0k4nphp.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmph0k4nphp.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph0k4nphp.php:24\nStack trace:\n#0 /tmp/tmph0k4nphp.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph0k4nphp.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = get_unique_chars($word);\n        if ($count > $maxCount) {\n\
    \            $maxCount = $count;\n            $max = $word;\n        }\n    }\n\
    \    return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmpj572cvin.php:10\nStack trace:\n#0 /tmp/tmpj572cvin.php(20): find_max(Array)\n\
    #1 /tmp/tmpj572cvin.php(24): candidate(Array)\n#2 /tmp/tmpj572cvin.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj572cvin.php on line 10\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max_word = $word;\n        }\n   \
    \ }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvpiy5uvw.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpvpiy5uvw.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpvpiy5uvw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvpiy5uvw.php:24\nStack trace:\n#0 /tmp/tmpvpiy5uvw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvpiy5uvw.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your PHP implementation here.\n}\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_p5oiie.php:14\n\
    Stack trace:\n#0 /tmp/tmpl_p5oiie.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpl_p5oiie.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars[0] = count($words[0]);\n    foreach\
    \ ($words as $word) {\n        $chars = count($word);\n        if ($chars > $max_chars[0])\
    \ {\n            $max_chars[0] = $chars;\n            $max_chars[1] = $word;\n\
    \        } else if ($chars == $max_chars[0]) {\n            $max_chars[1] .= $word;\n\
    \        }\n    }\n    return $max_chars[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplc33_62w.php on line 8\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmplc33_62w.php on\
    \ line 10\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplc33_62w.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmplc33_62w.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc33_62w.php:26\n\
    Stack trace:\n#0 /tmp/tmplc33_62w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplc33_62w.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n  $max = 0;\n  $word = \"\";\n  foreach ($words\
    \ as $word) {\n    $count = array_count_values(str_split($word));\n    if ($count[$max]\
    \ < $count[$word]) {\n      $max = $word;\n    }\n  }\n  return $max;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyebhwcpx.php:24\n\
    Stack trace:\n#0 /tmp/tmpyebhwcpx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyebhwcpx.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = count($word);\n    if ($count > $max_count) {\n      $max_count =\
    \ $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplkbdbddq.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmplkbdbddq.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmplkbdbddq.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplkbdbddq.php:24\nStack trace:\n#0 /tmp/tmplkbdbddq.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplkbdbddq.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $word) {\n    $count = str_word_count($word);\n\
    \    if ($count > $max) {\n      $max = $count;\n      $word = $word;\n    }\n\
    \  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue_vmo_i.php:25\n\
    Stack trace:\n#0 /tmp/tmpue_vmo_i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpue_vmo_i.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $max_word = \"\";\n    foreach ($words as $word) {\n \
    \       $count = str_word_count($word);\n        if ($count > $max) {\n      \
    \      $max = $count;\n            $max_word = $word;\n        }\n    }\n    return\
    \ $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyizqzzm.php:24\n\
    Stack trace:\n#0 /tmp/tmpkyizqzzm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkyizqzzm.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $w) {\n    $len = strlen($w);\n\
    \    if ($len > $max) {\n      $max = $len;\n      $word = $w;\n    }\n  }\n \
    \ return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_3_v80v.php:25\n\
    Stack trace:\n#0 /tmp/tmpk_3_v80v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk_3_v80v.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your solution here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfphwhrtb.php:14\n\
    Stack trace:\n#0 /tmp/tmpfphwhrtb.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfphwhrtb.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\n$words = array(\"apple\", \"banana\", \"carrot\", \"dog\", \"elephant\",\
    \ \"fish\", \"goat\", \"horse\", \"kangaroo\", \"lion\", \"monkey\", \"ocelot\"\
    , \"parrot\", \"pig\", \"shark\", \"tiger\", \"turtle\", \"whale\", \"zebra\"\
    );\n$result = find_max($words);\necho $result;\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "zebra\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp04yyf4xw.php:28\n\
    Stack trace:\n#0 /tmp/tmp04yyf4xw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp04yyf4xw.php\
    \ on line 28\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = str_word_count($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmarxdjpm.php:24\n\
    Stack trace:\n#0 /tmp/tmpmarxdjpm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmarxdjpm.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n  $max_chars = array();\n  $max_chars_count =\
    \ array();\n  foreach ($words as $word) {\n    $chars = str_split($word);\n  \
    \  $char_count = array_count_values($chars);\n    $max_chars[] = $word;\n    $max_chars_count[]\
    \ = $char_count;\n  }\n  arsort($max_chars_count);\n  $max_chars = array_slice($max_chars,\
    \ 0, 1);\n  return $max_chars;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa44tvpfe.php:26\n\
    Stack trace:\n#0 /tmp/tmpa44tvpfe.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa44tvpfe.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = \"\";\n  foreach ($words as $word) {\n    $count =\
    \ str_word_count($word);\n    if ($count > $max) {\n      $max = $count;\n   \
    \   $word = $word;\n    }\n  }\n  return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptlsp_9xn.php:25\n\
    Stack trace:\n#0 /tmp/tmptlsp_9xn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptlsp_9xn.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $length\
    \ = strlen($w);\n        if ($length > $max) {\n            $max = $length;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn05h7xew.php:25\n\
    Stack trace:\n#0 /tmp/tmpn05h7xew.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn05h7xew.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = get_unique_chars($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmp92v05tya.php:10\nStack trace:\n#0 /tmp/tmp92v05tya.php(20): find_max(Array)\n\
    #1 /tmp/tmp92v05tya.php(24): candidate(Array)\n#2 /tmp/tmp92v05tya.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp92v05tya.php on line 10\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $word) {\n    $count = str_word_count($word);\n\
    \    if ($count > $max) {\n      $max = $count;\n      $word = $word;\n    }\n\
    \  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue_vmo_i.php:25\n\
    Stack trace:\n#0 /tmp/tmpue_vmo_i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpue_vmo_i.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max_word = $word;\n        }\n   \
    \ }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvpiy5uvw.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpvpiy5uvw.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpvpiy5uvw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvpiy5uvw.php:24\nStack trace:\n#0 /tmp/tmpvpiy5uvw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvpiy5uvw.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = array_count_values(str_split($word));\n        if ($count >\
    \ $max_count) {\n            $max = $word;\n            $max_count = $count;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95a16s9q.php:25\n\
    Stack trace:\n#0 /tmp/tmp95a16s9q.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp95a16s9q.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $unique = count(array_unique(str_split($word)));\n        if ($unique > $max)\
    \ {\n            $max = $unique;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\n$words = array('hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello', 'world', 'hello',\
    \ 'world', 'hello', 'world', '\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpflt_avf5.php on line 19

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = $words[0];\n  $max_count = 0;\n  foreach ($words as $word) {\n \
    \   $count = count(array_count_values(str_split($word)));\n    if ($count > $max_count)\
    \ {\n      $max_count = $count;\n      $max = $word;\n    }\n  }\n  return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37z7idqv.php:25\n\
    Stack trace:\n#0 /tmp/tmp37z7idqv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp37z7idqv.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = str_word_count($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmarxdjpm.php:24\n\
    Stack trace:\n#0 /tmp/tmpmarxdjpm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmarxdjpm.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = \"\";\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e55kmup.php:24\n\
    Stack trace:\n#0 /tmp/tmp_e55kmup.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_e55kmup.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $chars\
    \ = str_split($w);\n        $count = count($chars);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $w;\n        }\n    }\n \
    \   return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkp7x1h0a.php:26\n\
    Stack trace:\n#0 /tmp/tmpkp7x1h0a.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkp7x1h0a.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length >= $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2cytn6nr.php:25\n\
    Stack trace:\n#0 /tmp/tmp2cytn6nr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2cytn6nr.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $length\
    \ = strlen($w);\n        if ($length > $max) {\n            $max = $length;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn05h7xew.php:25\n\
    Stack trace:\n#0 /tmp/tmpn05h7xew.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn05h7xew.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $word_count = count($word);\n        if ($word_count > $max_count) {\n\
    \            $max = $word;\n            $max_count = $word_count;\n        } else\
    \ if ($word_count == $max_count) {\n            $max = str_replace($word, $words[0],\
    \ $max);\n        }\n    }\n    return $max;\n}\n\n$words = array(\"hello\", \"\
    world\", \"hello\", \"world\", \"hello\", \"world\", \"hello\", \"world\");\n\
    $max = find_max($words);\necho $max;\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp6jv77iwa.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp6jv77iwa.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6jv77iwa.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp6jv77iwa.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6jv77iwa.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp6jv77iwa.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6jv77iwa.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp6jv77iwa.php\
    \ on line 10\nhello\nWarning: count(): Parameter must be an array or an object\
    \ that implements Countable in /tmp/tmp6jv77iwa.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp6jv77iwa.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp6jv77iwa.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6jv77iwa.php:29\nStack trace:\n#0 /tmp/tmp6jv77iwa.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6jv77iwa.php on line 29\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $count = 1;\n    foreach ($words as $word) {\n\
    \        if (count(array_count_values(str_split($word))) > $count) {\n       \
    \     $max = $word;\n            $count = 1;\n        } else {\n            $count++;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixreahh0.php:26\n\
    Stack trace:\n#0 /tmp/tmpixreahh0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpixreahh0.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6cw_vlp.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6cw_vlp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv6cw_vlp.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6cw_vlp.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6cw_vlp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv6cw_vlp.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_chars = array();\n  $max_chars_count = array();\n  foreach ($words\
    \ as $word) {\n    $max_chars[] = $word;\n    $max_chars_count[$word] = 0;\n \
    \ }\n  foreach ($max_chars as $char) {\n    foreach ($max_chars_count as $word\
    \ => $count) {\n      if ($char == $word) {\n        $max_chars_count[$word]++;\n\
    \      }\n    }\n  }\n  ksort($max_chars_count);\n  foreach ($max_chars_count\
    \ as $word => $count) {\n    if ($count > 1) {\n      return $word;\n    }\n \
    \ }\n  return '';\n}\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpblyl68ws.php:33\n\
    Stack trace:\n#0 /tmp/tmpblyl68ws.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpblyl68ws.php\
    \ on line 33\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = get_unique_chars($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_unique_chars()\
    \ in /tmp/tmp92v05tya.php:10\nStack trace:\n#0 /tmp/tmp92v05tya.php(20): find_max(Array)\n\
    #1 /tmp/tmp92v05tya.php(24): candidate(Array)\n#2 /tmp/tmp92v05tya.php(36): test()\n\
    #3 {main}\n  thrown in /tmp/tmp92v05tya.php on line 10\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $maxWord = '';\n    foreach\
    \ ($words as $word) {\n        $count = array_count_values(str_split($word));\n\
    \        if ($count['z'] > $count['a']) {\n            $maxWord = $word;\n   \
    \         $max = $count['z'];\n        } else if ($count['a'] > $count['z']) {\n\
    \            $maxWord = $word;\n            $max = $count['a'];\n        }\n \
    \   }\n    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6w4m2zq.php:28\n\
    Stack trace:\n#0 /tmp/tmpq6w4m2zq.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpq6w4m2zq.php\
    \ on line 28\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $wc\
    \ = str_split($w);\n        $wc = array_count_values($wc);\n        $wc = array_slice($wc,\
    \ 1, max($wc));\n        $wc = implode('', $wc);\n        if ($wc > $max) {\n\
    \            $max = $wc;\n            $word = $w;\n        }\n    }\n    return\
    \ $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic8oq63i.php:27\n\
    Stack trace:\n#0 /tmp/tmpic8oq63i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpic8oq63i.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars_length = 0;\n    $max_chars_word\
    \ = '';\n    foreach ($words as $word) {\n        $chars = str_split($word);\n\
    \        $char_count = count($chars);\n        if ($char_count > $max_chars_length)\
    \ {\n            $max_chars = $chars;\n            $max_chars_length = $char_count;\n\
    \            $max_chars_word = $word;\n        }\n    }\n    return $max_chars_word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhi4gkm4.php:28\n\
    Stack trace:\n#0 /tmp/tmpmhi4gkm4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmhi4gkm4.php\
    \ on line 28\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = str_word_count($word);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kf7bpqa.php:26\n\
    Stack trace:\n#0 /tmp/tmp6kf7bpqa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6kf7bpqa.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = count($word);\n    if ($count > $max_count) {\n      $max_count =\
    \ $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmplkbdbddq.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmplkbdbddq.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmplkbdbddq.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmplkbdbddq.php:24\nStack trace:\n#0 /tmp/tmplkbdbddq.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplkbdbddq.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max_count = -1;\n  $max_word = '';\n  foreach ($words as $word) {\n  \
    \  $count = str_word_count($word);\n    if ($count > $max_count) {\n      $max_count\
    \ = $count;\n      $max_word = $word;\n    }\n  }\n  return $max_word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmarxdjpm.php:24\n\
    Stack trace:\n#0 /tmp/tmpmarxdjpm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmarxdjpm.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n  $max = 0;\n  $word = '';\n  foreach ($words\
    \ as $word) {\n    $count = str_word_count($word);\n    if ($count > $max) {\n\
    \      $max = $count;\n      $word = $word;\n    }\n  }\n  return $word;\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpio6zwwcy.php:26\n\
    Stack trace:\n#0 /tmp/tmpio6zwwcy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpio6zwwcy.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max_word = $word;\n        }\n   \
    \ }\n    return $max_word;\n}\n\n$words = array('apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', '\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqzbhwapx.php on line 19

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\n$words = array(\"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
    apple\", \"apple\", \"apple\", \"apple\", \"\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2iebgc9o.php on line 25

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $w) {\n        $chars\
    \ = str_split($w);\n        $count = count($chars);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $w;\n        }\n    }\n \
    \   return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8cuibln.php:26\n\
    Stack trace:\n#0 /tmp/tmpr8cuibln.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpr8cuibln.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp459h0bly.php:14\n\
    Stack trace:\n#0 /tmp/tmp459h0bly.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp459h0bly.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $w) {\n    $len = strlen($w);\n\
    \    if ($len > $max) {\n      $max = $len;\n      $word = $w;\n    }\n  }\n \
    \ return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_3_v80v.php:25\n\
    Stack trace:\n#0 /tmp/tmpk_3_v80v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk_3_v80v.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $chars = array_count_values($chars);\n \
    \       $char = array_keys($chars)[0];\n        if ($char > $max) {\n        \
    \    $max = $char;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_5gm2u_.php:27\n\
    Stack trace:\n#0 /tmp/tmpa_5gm2u_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa_5gm2u_.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars_length = array();\n    $max_chars_length[0]\
    \ = count($words[0]);\n    foreach ($words as $word) {\n        $chars = array_count_values(str_split($word));\n\
    \        $chars = array_filter($chars);\n        $chars = array_keys($chars);\n\
    \        $chars = array_map(function($char) {\n            return strlen($char);\n\
    \        }, $chars);\n        $chars = array_sum($chars);\n        $chars = array_filter($chars);\n\
    \        $chars = array_unique($chars);\n        $chars = array_map(function($char)\
    \ {\n            return $char;\n        }, $chars);\n        $chars = array_count_values($chars);\n\
    \        $chars = array_filter($chars);\n        $chars = array_keys($chars);\n\
    \        $chars = array_map(function($char) {\n            return $char;\n   \
    \     }, $chars);\n        $chars = array_sum($chars);\n        $chars = array_filter($chars);\n\
    \        $chars = array_unique($chars);\n        $chars = array_map(function($char)\
    \ {\n            return $char;\n        }, $chars);\n        $chars = array_count_values($chars);\n\
    \        $chars = array_filter($chars);\n        $chars = array_keys($chars);\n\
    \        $chars = array_map(function($char) {\n            return $char;\n   \
    \     }, $chars);\n        $chars = array_sum($chars);\n        $chars = array_filter($chars);\n\
    \        $chars = array_unique($chars);\n        $chars = array_map(function($char)\
    \ {\n            return $char;\n        }, $chars);\n        $chars = array_count_values($chars);\n\
    \        $chars = array_filter($chars);\n        $chars = array_keys($chars);\n\
    \        $chars = array_map(function($char) {\n            return $char;\n   \
    \     }, $chars);\n        $chars = array_sum($chars);\n        $chars = array_filter($chars);\n\
    \        $chars = array_unique($chars);\n        $chars = array_map(function($char)\
    \ {\n            return $char;\n        }, $chars);\n        $chars = array_count_values($chars);\n\
    \        $chars = array_filter($chars);\n        $chars = array_keys($chars);\n\
    \        $chars = array_map(function($char) {\n            return $char;\n   \
    \     }, $chars);\n        $chars = array_sum($chars);\n        $chars = array_filter($chars);\n\
    \        $chars = array_unique($chars);\n        $chars = array_map(function($char)\
    \ {\n            return $char;\n        }, $\nfunction candidate(...$args) {\n\
    \    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgj8ijwst.php on line 71

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n  $max = 0;\n  $word = \"\";\n  foreach ($words\
    \ as $word) {\n    $count = count($word);\n    if ($count > $max) {\n      $max\
    \ = $count;\n      $word = $word;\n    }\n  }\n  return $word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpq4iuw0h5.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpq4iuw0h5.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq4iuw0h5.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq4iuw0h5.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpq4iuw0h5.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpq4iuw0h5.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4iuw0h5.php:26\n\
    Stack trace:\n#0 /tmp/tmpq4iuw0h5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq4iuw0h5.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = \"\";\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e55kmup.php:24\n\
    Stack trace:\n#0 /tmp/tmp_e55kmup.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_e55kmup.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    $max_chars_index = 0;\n    $max_chars_length\
    \ = 0;\n    foreach ($words as $word) {\n        $chars = str_split($word);\n\
    \        $length = count($chars);\n        if ($length > $max_chars_length) {\n\
    \            $max_chars = $chars;\n            $max_chars_index = $length;\n \
    \           $max_chars_length = $length;\n        } else if ($length == $max_chars_length)\
    \ {\n            $max_chars[$max_chars_index] = $chars[0];\n            $max_chars_index++;\n\
    \        }\n    }\n    return $max_chars[$max_chars_index - 1];\n}\n\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6m2_21k9.php:30\n\
    Stack trace:\n#0 /tmp/tmp6m2_21k9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6m2_21k9.php\
    \ on line 30\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $maxWord = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $maxWord = $word;\n        }\n  \
    \  }\n    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpqb6nemx0.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpqb6nemx0.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpqb6nemx0.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpqb6nemx0.php:25\nStack trace:\n#0 /tmp/tmpqb6nemx0.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqb6nemx0.php on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  $max = 0;\n  $word = '';\n  foreach ($words as $word) {\n    $count = str_word_count($word);\n\
    \    if ($count > $max) {\n      $max = $count;\n      $word = $word;\n    }\n\
    \  }\n  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue_vmo_i.php:25\n\
    Stack trace:\n#0 /tmp/tmpue_vmo_i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpue_vmo_i.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $unique = array_count_values(str_split($word));\n        $count = $unique[max(array_keys($unique))];\n\
    \        if ($count > $max) {\n            $max = $count;\n            $word =\
    \ $word;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0rusfb3.php:26\n\
    Stack trace:\n#0 /tmp/tmpw0rusfb3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw0rusfb3.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your PHP code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ov8holq.php:14\n\
    Stack trace:\n#0 /tmp/tmp5ov8holq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp5ov8holq.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $wc\
    \ = str_split($w);\n        $wc = array_count_values($wc);\n        if ($wc[$max]\
    \ < count($wc)) {\n            $max = $wc[$max];\n            $word = $w;\n  \
    \      }\n    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrbshmg6.php:26\n\
    Stack trace:\n#0 /tmp/tmpfrbshmg6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfrbshmg6.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = null;\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd2h975z.php:24\n\
    Stack trace:\n#0 /tmp/tmpzd2h975z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzd2h975z.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $maxWord = '';\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $maxWord = $word;\n        }\n  \
    \  }\n    return $maxWord;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp8dz1cqxj.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp8dz1cqxj.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp8dz1cqxj.php on line 11\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8dz1cqxj.php:25\nStack trace:\n#0 /tmp/tmp8dz1cqxj.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8dz1cqxj.php on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\n$words = array('apple', 'apple', 'banana', 'apple',\
    \ 'pear', 'pear', 'pear', 'pear', 'pear');\n$maxWord = find_max($words);\necho\
    \ $maxWord;\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "pear\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybvbdw5m.php:29\n\
    Stack trace:\n#0 /tmp/tmpybvbdw5m.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpybvbdw5m.php\
    \ on line 29\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max = $word;\n            $max_count = $count;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpt52uvgrw.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpt52uvgrw.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpt52uvgrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpt52uvgrw.php:24\nStack trace:\n#0 /tmp/tmpt52uvgrw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt52uvgrw.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = \"\";\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e55kmup.php:24\n\
    Stack trace:\n#0 /tmp/tmp_e55kmup.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_e55kmup.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6cw_vlp.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6cw_vlp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv6cw_vlp.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_chars = array();\n    foreach ($words as $word) {\n        $chars\
    \ = count($word);\n        if ($chars > count($max_chars)) {\n            $max_chars\
    \ = $chars;\n        }\n    }\n    $max_chars = max($max_chars);\n    foreach\
    \ ($words as $word) {\n        $chars = count($word);\n        if ($chars == $max_chars)\
    \ {\n            return $word;\n        }\n    }\n    return $words[0];\n}\n\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvz76nkit.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpvz76nkit.php on\
    \ line 9\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvz76nkit.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpvz76nkit.php\
    \ on line 9\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpvz76nkit.php on line 10\n\nWarning: max(): When\
    \ only one parameter is given, it must be an array in /tmp/tmpvz76nkit.php on\
    \ line 14\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpvz76nkit.php on line 16\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpvz76nkit.php\
    \ on line 16\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpvz76nkit.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvz76nkit.php:29\nStack trace:\n#0 /tmp/tmpvz76nkit.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvz76nkit.php on line 29\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2vue6xz.php:25\n\
    Stack trace:\n#0 /tmp/tmp_2vue6xz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_2vue6xz.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $w) {\n        $chars\
    \ = str_split($w);\n        $count = count($chars);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $w;\n        }\n    }\n \
    \   return $word;\n}\n\n$words = array(\"apple\", \"banana\", \"carrot\", \"dog\"\
    , \"elephant\", \"fish\", \"goat\", \"horse\", \"kangaroo\", \"lion\", \"monkey\"\
    , \"pig\", \"snake\", \"tiger\", \"turtle\", \"whale\", \"zebra\");\n$result =\
    \ find_max($words);\necho $result;\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "elephant\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgq21s0n.php:29\n\
    Stack trace:\n#0 /tmp/tmpxgq21s0n.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxgq21s0n.php\
    \ on line 29\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        } else if ($count\
    \ == $max_count) {\n            $max = str_replace($word, '', $max);\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpowksy1fz.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpowksy1fz.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpowksy1fz.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpowksy1fz.php:26\nStack trace:\n#0 /tmp/tmpowksy1fz.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpowksy1fz.php on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = str_word_count($word);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kf7bpqa.php:26\n\
    Stack trace:\n#0 /tmp/tmp6kf7bpqa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6kf7bpqa.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count(array_count_values(str_split($word)));\n        if\
    \ ($count > $max_count) {\n            $max_count = $count;\n            $max\
    \ = $word;\n        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmaa4t6i.php:25\n\
    Stack trace:\n#0 /tmp/tmphmaa4t6i.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphmaa4t6i.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max = $word;\n            $max_count = $count;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpt52uvgrw.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpt52uvgrw.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpt52uvgrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpt52uvgrw.php:24\nStack trace:\n#0 /tmp/tmpt52uvgrw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt52uvgrw.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $word_count = count($word);\n        if ($word_count > $max_count) {\n\
    \            $max = $word;\n            $max_count = $word_count;\n        } else\
    \ if ($word_count == $max_count) {\n            $max = max($max, $word);\n   \
    \     }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp87i5j303.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp87i5j303.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp87i5j303.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp87i5j303.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp87i5j303.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp87i5j303.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87i5j303.php:27\n\
    Stack trace:\n#0 /tmp/tmp87i5j303.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp87i5j303.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $length\
    \ = strlen($w);\n        if ($length > $max) {\n            $max = $length;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn05h7xew.php:25\n\
    Stack trace:\n#0 /tmp/tmpn05h7xew.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn05h7xew.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        } else if ($count\
    \ == $max_count) {\n            $max = str_replace($word, '', $max);\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpowksy1fz.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpowksy1fz.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpowksy1fz.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpowksy1fz.php:26\nStack trace:\n#0 /tmp/tmpowksy1fz.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpowksy1fz.php on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6cw_vlp.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6cw_vlp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv6cw_vlp.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max_count = $count;\n            $max = $word;\n        } else if ($count\
    \ == $max_count) {\n            $max = strcmp($word, $max) < 0 ? $word : $max;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp4f7e9_l7.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp4f7e9_l7.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp4f7e9_l7.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp4f7e9_l7.php:26\nStack trace:\n#0 /tmp/tmp4f7e9_l7.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4f7e9_l7.php on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max_count = -1;\n    $max_word = '';\n    foreach ($words as $word)\
    \ {\n        $count = str_word_count($word);\n        if ($count > $max_count)\
    \ {\n            $max_count = $count;\n            $max_word = $word;\n      \
    \  }\n    }\n    return $max_word;\n}\n\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk87urpk.php:24\n\
    Stack trace:\n#0 /tmp/tmpfk87urpk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfk87urpk.php\
    \ on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = array_count_values(str_split($word));\n\
    \        $count = $count[array_keys($count)];\n        if ($count > $max) {\n\
    \            $max = $count;\n            $word = $word;\n        }\n    }\n  \
    \  return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Illegal offset type in /tmp/tmp2b6526gb.php on line 12\n\nWarning:\
    \ Illegal offset type in /tmp/tmp2b6526gb.php on line 12\n\nWarning: Illegal offset\
    \ type in /tmp/tmp2b6526gb.php on line 12\n\nWarning: Illegal offset type in /tmp/tmp2b6526gb.php\
    \ on line 12\n\nWarning: Illegal offset type in /tmp/tmp2b6526gb.php on line 12\n\
    \nWarning: Illegal offset type in /tmp/tmp2b6526gb.php on line 12\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2b6526gb.php:27\nStack trace:\n\
    #0 /tmp/tmp2b6526gb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2b6526gb.php\
    \ on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        } else if ($count\
    \ == $max_count) {\n            $max = str_replace($word, '', $max);\n       \
    \     $max = str_replace($word, '', $max);\n        }\n    }\n    return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp53g4y_yl.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp53g4y_yl.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp53g4y_yl.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp53g4y_yl.php:27\nStack trace:\n#0 /tmp/tmp53g4y_yl.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp53g4y_yl.php on line 27\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $w) {\n        $len\
    \ = strlen($w);\n        if ($len > $max) {\n            $max = $len;\n      \
    \      $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjci2nz8y.php:25\n\
    Stack trace:\n#0 /tmp/tmpjci2nz8y.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjci2nz8y.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\n$words = array(\"apple\", \"apple\", \"banana\", \"banana\", \"banana\",\
    \ \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\"\
    , \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"banana\", \"ban\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoo6uclm9.php on line 25

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbas36_n.php:26\n\
    Stack trace:\n#0 /tmp/tmpmbas36_n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmbas36_n.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $count = str_word_count($word);\n        if ($count > $max) {\n          \
    \  $max = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkkwco_p.php:25\n\
    Stack trace:\n#0 /tmp/tmpxkkwco_p.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkkwco_p.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = '';\n    foreach\
    \ ($words as $word) {\n        $count = 1;\n        foreach ($words as $w) {\n\
    \            if ($w == $word) {\n                $count++;\n            }\n  \
    \      }\n        if ($count > $max) {\n            $max = $count;\n         \
    \   $word = $word;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvsn0bmx.php:31\n\
    Stack trace:\n#0 /tmp/tmpwvsn0bmx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwvsn0bmx.php\
    \ on line 31\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max_count = $count;\n            $max = $word;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp97di2u6g.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp97di2u6g.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp97di2u6g.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp97di2u6g.php:24\nStack trace:\n#0 /tmp/tmp97di2u6g.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp97di2u6g.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $w) {\n        $length\
    \ = strlen($w);\n        if ($length > $max) {\n            $max = $length;\n\
    \            $word = $w;\n        }\n    }\n    return $word;\n}\n\nfunction candidate(...$args)\
    \ {\n    return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn05h7xew.php:25\n\
    Stack trace:\n#0 /tmp/tmpn05h7xew.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpn05h7xew.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = \"\";\n    foreach ($words as $word) {\n     \
    \   $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cv87hsl.php:26\n\
    Stack trace:\n#0 /tmp/tmp1cv87hsl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1cv87hsl.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\n$words = array('apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple', 'apple',\
    \ 'apple', 'apple', 'apple\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmples2vcw2.php on line 20

    '
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        } else if ($count\
    \ == $max_count) {\n            $max = strcmp($word, $max) < 0 ? $word : $max;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpui56zh2r.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpui56zh2r.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpui56zh2r.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpui56zh2r.php:26\nStack trace:\n#0 /tmp/tmpui56zh2r.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpui56zh2r.php on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    // Write your code here\n    $max = 0;\n    $word = \"\";\n    foreach\
    \ ($words as $word) {\n        $count = count($word);\n        if ($count > $max)\
    \ {\n            $max = $count;\n            $word = $word;\n        }\n    }\n\
    \    return $word;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpv6cw_vlp.php on line 11\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmpv6cw_vlp.php\
    \ on line 11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6cw_vlp.php:26\n\
    Stack trace:\n#0 /tmp/tmpv6cw_vlp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv6cw_vlp.php\
    \ on line 26\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $maxCount = 0;\n    foreach ($words as $word) {\n \
    \       $count = count($word);\n        if ($count > $maxCount) {\n          \
    \  $maxCount = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxoj3691x.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxoj3691x.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxoj3691x.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxoj3691x.php:24\nStack trace:\n#0 /tmp/tmpxoj3691x.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxoj3691x.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = $words[0];\n    $max_count = 0;\n    foreach ($words as $word)\
    \ {\n        $count = count($word);\n        if ($count > $max_count) {\n    \
    \        $max = $word;\n            $max_count = $count;\n        }\n    }\n \
    \   return $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpt52uvgrw.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpt52uvgrw.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpt52uvgrw.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpt52uvgrw.php:24\nStack trace:\n#0 /tmp/tmpt52uvgrw.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt52uvgrw.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $unique = count(array_count_values(str_split($word)));\n        if ($unique\
    \ > $max) {\n            $max = $unique;\n            $word = $word;\n       \
    \ }\n    }\n    return $word;\n}\n\n$words = array('hello', 'world', 'hello',\
    \ 'world', 'hello', 'world');\n$result = find_max($words);\necho $result;\nfunction\
    \ candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"string\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"name\"\
    , \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "world\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7h26vlw.php:28\n\
    Stack trace:\n#0 /tmp/tmpt7h26vlw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpt7h26vlw.php\
    \ on line 28\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max_count = $count;\n            $max = $word;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsrp5zggm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpsrp5zggm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpsrp5zggm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsrp5zggm.php:24\nStack trace:\n#0 /tmp/tmpsrp5zggm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsrp5zggm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $length = strlen($word);\n        if ($length > $max) {\n            $max =\
    \ $length;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xy9i1p0.php:25\n\
    Stack trace:\n#0 /tmp/tmp2xy9i1p0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2xy9i1p0.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $chars = str_split($word);\n        $count = count($chars);\n        if ($count\
    \ > $max) {\n            $max = $count;\n            $word = $word;\n        }\n\
    \    }\n    return $word;\n}\n\n$words = array('hello', 'world', 'hello', 'world',\
    \ 'hello', 'world', 'hello', 'world');\n$result = find_max($words);\necho $result;\n\
    function candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "world\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_58r75x.php:29\n\
    Stack trace:\n#0 /tmp/tmpm_58r75x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm_58r75x.php\
    \ on line 29\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = null;\n    $max_count = 0;\n    foreach ($words as $word) {\n\
    \        $count = count($word);\n        if ($count > $max_count) {\n        \
    \    $max = $word;\n            $max_count = $count;\n        }\n    }\n    return\
    \ $max;\n}\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\"\
    )) !== \"string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmppxq67imm.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmppxq67imm.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmppxq67imm.php on line 10\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppxq67imm.php:24\nStack trace:\n#0 /tmp/tmppxq67imm.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxq67imm.php on line 24\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n  // Write your code here\n}\nfunction candidate(...$args) {\n    return\
    \ find_max(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    name\", \"of\", \"string\")) !== \"string\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"name\", \"enam\", \"game\")) !== \"enam\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"aaaaaaa\", \"\
    bb\", \"cc\")) !== \"aaaaaaa\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\"abc\", \"cba\")) !== \"abc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"play\", \"this\", \"game\", \"of\"\
    , \"footbott\")) !== \"footbott\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"gonna\", \"rock\")) !== \"gonna\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\",\
    \ \"are\", \"a\", \"mad\", \"nation\")) !== \"nation\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"this\", \"is\", \"a\", \"prrk\"\
    )) !== \"this\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    b\")) !== \"b\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"play\", \"play\")) !== \"play\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7seqee17.php:14\n\
    Stack trace:\n#0 /tmp/tmp7seqee17.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7seqee17.php\
    \ on line 14\n"
  timestamp: 1659730843
- exit_code: 255
  program: "<?php\n// Write a function that accepts a list of strings.\n// The list\
    \ contains different words. Return the word with maximum number\n// of unique\
    \ characters. If multiple strings have maximum number of unique\n// characters,\
    \ return the one which comes first in lexicographical order.\nfunction find_max($words)\
    \ {\n    $max = 0;\n    $word = '';\n    foreach ($words as $word) {\n       \
    \ $count = str_word_count($word);\n        if ($count > $max) {\n            $max\
    \ = $count;\n            $word = $word;\n        }\n    }\n    return $word;\n\
    }\n\nfunction candidate(...$args) {\n    return find_max(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"name\", \"of\", \"string\")) !== \"\
    string\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    name\", \"enam\", \"game\")) !== \"enam\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"aaaaaaa\", \"bb\", \"cc\")) !== \"aaaaaaa\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"abc\", \"\
    cba\")) !== \"abc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    play\", \"this\", \"game\", \"of\", \"footbott\")) !== \"footbott\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"we\", \"are\", \"\
    gonna\", \"rock\")) !== \"gonna\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"we\", \"are\", \"a\", \"mad\", \"nation\")) !== \"\
    nation\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    this\", \"is\", \"a\", \"prrk\")) !== \"this\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"b\")) !== \"b\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"play\", \"play\", \"play\")) !== \"\
    play\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gq52_s.php:25\n\
    Stack trace:\n#0 /tmp/tmp1_gq52_s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1_gq52_s.php\
    \ on line 25\n"
  timestamp: 1659730843
