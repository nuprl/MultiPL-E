language: php
name: HumanEval_139_special_factorial
results:
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n <= 1) {\n   \
    \     return 1;\n    }\n    return $n * (special_factorial($n - 1));\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_l3k8m8.php:20\n\
    Stack trace:\n#0 /tmp/tmpm_l3k8m8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm_l3k8m8.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n <= 1) {\n   \
    \     return 1;\n    }\n    return $n * (special_factorial($n - 1));\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_l3k8m8.php:20\n\
    Stack trace:\n#0 /tmp/tmpm_l3k8m8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpm_l3k8m8.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktpkw2u8.php:20\n\
    Stack trace:\n#0 /tmp/tmpktpkw2u8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpktpkw2u8.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen70fvzp.php:20\n\
    Stack trace:\n#0 /tmp/tmpen70fvzp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpen70fvzp.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqb_2w8q.php:19\n\
    Stack trace:\n#0 /tmp/tmppqb_2w8q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppqb_2w8q.php\
    \ on line 19\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqb_2w8q.php:19\n\
    Stack trace:\n#0 /tmp/tmppqb_2w8q.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppqb_2w8q.php\
    \ on line 19\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h1glqdo.php:19\n\
    Stack trace:\n#0 /tmp/tmp4h1glqdo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4h1glqdo.php\
    \ on line 19\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n <= 1) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi309c3ob.php:19\n\
    Stack trace:\n#0 /tmp/tmpi309c3ob.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpi309c3ob.php\
    \ on line 19\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n <= 1) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgc1n_g1v.php:20\n\
    Stack trace:\n#0 /tmp/tmpgc1n_g1v.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgc1n_g1v.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktpkw2u8.php:20\n\
    Stack trace:\n#0 /tmp/tmpktpkw2u8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpktpkw2u8.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen70fvzp.php:20\n\
    Stack trace:\n#0 /tmp/tmpen70fvzp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpen70fvzp.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hw2hm9m.php:20\n\
    Stack trace:\n#0 /tmp/tmp6hw2hm9m.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp6hw2hm9m.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen70fvzp.php:20\n\
    Stack trace:\n#0 /tmp/tmpen70fvzp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpen70fvzp.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0 || $n ==\
    \ 1) {\n        return 1;\n    }\n    return $n * special_factorial($n - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpen70fvzp.php:20\n\
    Stack trace:\n#0 /tmp/tmpen70fvzp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpen70fvzp.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h1glqdo.php:19\n\
    Stack trace:\n#0 /tmp/tmp4h1glqdo.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4h1glqdo.php\
    \ on line 19\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktpkw2u8.php:20\n\
    Stack trace:\n#0 /tmp/tmpktpkw2u8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpktpkw2u8.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvi9op7n.php:21\n\
    Stack trace:\n#0 /tmp/tmpcvi9op7n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcvi9op7n.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_m4vvv.php:21\n\
    Stack trace:\n#0 /tmp/tmpp0_m4vvv.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp0_m4vvv.php\
    \ on line 21\n"
  timestamp: 1659978797
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    if ($n == 0) {\n   \
    \     return 1;\n    }\n    return $n * special_factorial($n - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return special_factorial(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphqhch47g.php:20\n\
    Stack trace:\n#0 /tmp/tmphqhch47g.php(26): test()\n#1 {main}\n  thrown in /tmp/tmphqhch47g.php\
    \ on line 20\n"
  timestamp: 1659978849
- exit_code: 255
  program: "<?php\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// The function\
    \ will receive an integer as input and should return the special\n// factorial\
    \ of this integer.\nfunction special_factorial($n) {\n    $factorial = 1;\n  \
    \  for($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqb8ubrh2.php:21\n\
    Stack trace:\n#0 /tmp/tmpqb8ubrh2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqb8ubrh2.php\
    \ on line 21\n"
  timestamp: 1659978849
