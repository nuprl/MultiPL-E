language: php
name: HumanEval_2_truncate_number
results:
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number;\n\
    \  }\n  $integer = floor($number);\n  if ($integer == $number) {\n    return $integer;\n\
    \  }\n  return $integer + 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpem_uxpk4.php:24\n\
    Stack trace:\n#0 /tmp/tmpem_uxpk4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpem_uxpk4.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = substr($number, strlen($number)\
    \ - 1);\n    $integer = substr($number, 0, strlen($number) - 1);\n    return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69494jwz.php:17\n\
    Stack trace:\n#0 /tmp/tmp69494jwz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp69494jwz.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number) - strlen($integer);\n\
    \  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85liysfa.php:20\n\
    Stack trace:\n#0 /tmp/tmp85liysfa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp85liysfa.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0_qyc5x.php:16\n\
    Stack trace:\n#0 /tmp/tmpr0_qyc5x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr0_qyc5x.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        $integer = $integer . '.' . substr($decimals, 0, 1);\n    }\n    return\
    \ $integer;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyupbxa7.php:21\n\
    Stack trace:\n#0 /tmp/tmpfyupbxa7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpfyupbxa7.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    $decimals = $decimals > 0 ? $decimals : 0;\n    return $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph42ffthl.php:17\n\
    Stack trace:\n#0 /tmp/tmph42ffthl.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph42ffthl.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer === 0) {\n        return 0;\n    }\n    if ($integer > 0 &&\
    \ $number < 1) {\n        $decimals = 0;\n    }\n    return $integer + $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpul_jeabh.php:23\n\
    Stack trace:\n#0 /tmp/tmpul_jeabh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpul_jeabh.php\
    \ on line 23\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $number > 0 ? substr($number, 0, $decimals) : 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8p94h6md.php:16\n\
    Stack trace:\n#0 /tmp/tmp8p94h6md.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8p94h6md.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number;\n\
    \  }\n  $integer = floor($number);\n  return $integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeylo6j8n.php:21\n\
    Stack trace:\n#0 /tmp/tmpeylo6j8n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpeylo6j8n.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    $decimals = $decimals > 0 ? $decimals : 0;\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgny9ygty.php:17\n\
    Stack trace:\n#0 /tmp/tmpgny9ygty.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgny9ygty.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($number - $integer < 0.1) {\n        $decimals = 0;\n    }\n    return\
    \ $integer + $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrupnaup.php:20\n\
    Stack trace:\n#0 /tmp/tmpgrupnaup.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgrupnaup.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer == $number) {\n        return $decimals;\n    }\n    $decimals\
    \ = $number - $integer;\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbh3z52e.php:23\n\
    Stack trace:\n#0 /tmp/tmpnbh3z52e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnbh3z52e.php\
    \ on line 23\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho16dzi.php:16\n\
    Stack trace:\n#0 /tmp/tmpnho16dzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnho16dzi.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ if (count($parts) < 2) {\n        return $number;\n    }\n    $decimals = $parts[1];\n\
    \    $integer = $parts[0];\n    if ($decimals > 0) {\n        $decimals = strlen($decimals);\n\
    \    }\n    return $integer . '.' . str_pad($decimals, $decimals, '0', STR_PAD_LEFT);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd085l7vn.php:24\n\
    Stack trace:\n#0 /tmp/tmpd085l7vn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpd085l7vn.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0_qyc5x.php:16\n\
    Stack trace:\n#0 /tmp/tmpr0_qyc5x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr0_qyc5x.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = count($parts) - 1;\n    $decimals = $decimals < 0 ? 0 : $decimals;\n\
    \    return $parts[$decimals];\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuchxajfo.php:18\n\
    Stack trace:\n#0 /tmp/tmpuchxajfo.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpuchxajfo.php\
    \ on line 18\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho16dzi.php:16\n\
    Stack trace:\n#0 /tmp/tmpnho16dzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnho16dzi.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    $number = floor($number);\n\
    \  }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp29bi7e0m.php:20\n\
    Stack trace:\n#0 /tmp/tmp29bi7e0m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp29bi7e0m.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer === 0) {\n    return 0;\n  }\n  while ($integer % 10 === 0) {\n\
    \    $decimals++;\n    $integer /= 10;\n  }\n  return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig8f73to.php:24\n\
    Stack trace:\n#0 /tmp/tmpig8f73to.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpig8f73to.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return floor($number);\n\
    \  }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppj8h_apb.php:20\n\
    Stack trace:\n#0 /tmp/tmppj8h_apb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppj8h_apb.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number - $integer);\n \
    \ }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzqt24so.php:20\n\
    Stack trace:\n#0 /tmp/tmpwzqt24so.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwzqt24so.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = substr($number, strlen($number)\
    \ - 1);\n    $integer = substr($number, 0, strlen($number) - 1);\n    return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69494jwz.php:17\n\
    Stack trace:\n#0 /tmp/tmp69494jwz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp69494jwz.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    $number = floor($number);\n\
    \    $number /= pow(10, $decimals);\n  }\n  return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptemrenf4.php:21\n\
    Stack trace:\n#0 /tmp/tmptemrenf4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptemrenf4.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number) - strlen($integer);\n\
    \  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85liysfa.php:20\n\
    Stack trace:\n#0 /tmp/tmp85liysfa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp85liysfa.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        $decimals = substr($decimals, 0, -1);\n    }\n    return $integer . '.'\
    \ . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegqvf4y4.php:21\n\
    Stack trace:\n#0 /tmp/tmpegqvf4y4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpegqvf4y4.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0_qyc5x.php:16\n\
    Stack trace:\n#0 /tmp/tmpr0_qyc5x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr0_qyc5x.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = substr($number, strlen($number)\
    \ - 1);\n    $integer = substr($number, 0, strlen($number) - 1);\n    return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69494jwz.php:17\n\
    Stack trace:\n#0 /tmp/tmp69494jwz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp69494jwz.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        $decimals = $decimals - 1;\n    }\n    return $integer . '.' . $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejqwdc5r.php:21\n\
    Stack trace:\n#0 /tmp/tmpejqwdc5r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpejqwdc5r.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_part = floor($number);\n   \
    \ $integer = $number - $decimal_part;\n    return $decimal_part;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgod3ajjc.php:17\n\
    Stack trace:\n#0 /tmp/tmpgod3ajjc.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgod3ajjc.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer === 0) {\n    return 0;\n  }\n  while ($integer % 10 === 0) {\n\
    \    $decimals++;\n    $integer /= 10;\n  }\n  return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig8f73to.php:24\n\
    Stack trace:\n#0 /tmp/tmpig8f73to.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpig8f73to.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $integer = floor($number);\n  $decimal\
    \ = substr($number, strlen($integer));\n  if ($decimal > 0) {\n    return $decimal;\n\
    \  }\n  return $integer;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl6n8q3sk.php:20\n\
    Stack trace:\n#0 /tmp/tmpl6n8q3sk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl6n8q3sk.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  if ($decimals > 0) {\n    return substr($number, 0, $decimals);\n \
    \ }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttc9vjft.php:19\n\
    Stack trace:\n#0 /tmp/tmpttc9vjft.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpttc9vjft.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $number > 0 ? substr($number, 0, $decimals) : '';\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8eoyqrv.php:16\n\
    Stack trace:\n#0 /tmp/tmpl8eoyqrv.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpl8eoyqrv.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = count($parts) - 1;\n    return $parts[$decimals];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparnrdgeg.php:17\n\
    Stack trace:\n#0 /tmp/tmparnrdgeg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmparnrdgeg.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ if (count($parts) == 1) {\n        return $number;\n    }\n    $decimals = $parts[1];\n\
    \    $decimals = substr($decimals, 0, -1);\n    return $parts[0] . '.' . $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkqrqezh.php:21\n\
    Stack trace:\n#0 /tmp/tmpmkqrqezh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpmkqrqezh.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $integer = floor($number);\n  $decimals\
    \ = abs($number - $integer);\n  return $decimals > 0 ? $integer + $decimals :\
    \ $integer;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9sl0gua.php:17\n\
    Stack trace:\n#0 /tmp/tmpc9sl0gua.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc9sl0gua.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $number > 0 ? substr($number, 0, $decimals) : 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8p94h6md.php:16\n\
    Stack trace:\n#0 /tmp/tmp8p94h6md.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8p94h6md.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals - strlen($decimals\
    \ % 2);\n    $decimals = $decimals == 0 ? 0 : 1;\n    return $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94bto_k4.php:19\n\
    Stack trace:\n#0 /tmp/tmp94bto_k4.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp94bto_k4.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer == $number) {\n    return $decimals;\n  }\n  $decimals = strlen($number)\
    \ - strlen($integer);\n  return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pozt38f.php:21\n\
    Stack trace:\n#0 /tmp/tmp3pozt38f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3pozt38f.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    while ($integer % 10 == 0) {\n        $decimals++;\n        $integer /= 10;\n\
    \    }\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qcfg2xs.php:21\n\
    Stack trace:\n#0 /tmp/tmp0qcfg2xs.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0qcfg2xs.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        return $integer . '.' . str_repeat('0', $decimals - strlen($decimals))\
    \ . $decimals;\n    }\n    return $integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixazqdq2.php:21\n\
    Stack trace:\n#0 /tmp/tmpixazqdq2.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpixazqdq2.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  if ($decimals > 0) {\n    return substr($number, 0, $decimals);\n \
    \ }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttc9vjft.php:19\n\
    Stack trace:\n#0 /tmp/tmpttc9vjft.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpttc9vjft.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  return $decimals > 0 ? substr($number, 0,\
    \ $decimals) : 0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4d8d46ja.php:17\n\
    Stack trace:\n#0 /tmp/tmp4d8d46ja.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4d8d46ja.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * 10 ** $decimals) / 10 ** $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlrckgx4.php:16\n\
    Stack trace:\n#0 /tmp/tmpnlrckgx4.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnlrckgx4.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = count($parts) - 1;\n    return $parts[$decimals];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparnrdgeg.php:17\n\
    Stack trace:\n#0 /tmp/tmparnrdgeg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmparnrdgeg.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho16dzi.php:16\n\
    Stack trace:\n#0 /tmp/tmpnho16dzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnho16dzi.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_part = floor($number);\n   \
    \ $integer = $number - $decimal_part;\n    return $decimal_part;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgod3ajjc.php:17\n\
    Stack trace:\n#0 /tmp/tmpgod3ajjc.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpgod3ajjc.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu52a8uy.php:16\n\
    Stack trace:\n#0 /tmp/tmpnu52a8uy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnu52a8uy.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer > 0 && $number - $integer < 0.1) {\n    $decimals = 0;\n  }\n\
    \  return $integer + $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbb6o1s2e.php:20\n\
    Stack trace:\n#0 /tmp/tmpbb6o1s2e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbb6o1s2e.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        $decimals = substr($decimals, 0, -1);\n    }\n    return $integer . '.'\
    \ . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegqvf4y4.php:21\n\
    Stack trace:\n#0 /tmp/tmpegqvf4y4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpegqvf4y4.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  return $decimals > 0 ? substr($number, 0,\
    \ strlen($number) - $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxo_dfx7.php:17\n\
    Stack trace:\n#0 /tmp/tmpbxo_dfx7.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpbxo_dfx7.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 0
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $integer = floor($number);\n  $decimal\
    \ = abs($number - $integer);\n  return $decimal;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0_qyc5x.php:16\n\
    Stack trace:\n#0 /tmp/tmpr0_qyc5x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr0_qyc5x.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    $decimals = $decimals > 0\
    \ ? $decimals : 0;\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuq_dfvi.php:18\n\
    Stack trace:\n#0 /tmp/tmpzuq_dfvi.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpzuq_dfvi.php\
    \ on line 18\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number;\n\
    \  }\n  $integer = floor($number);\n  if ($integer == $number) {\n    return $integer;\n\
    \  }\n  return $integer + 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpem_uxpk4.php:24\n\
    Stack trace:\n#0 /tmp/tmpem_uxpk4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpem_uxpk4.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        return $integer . '.' . substr($decimals, 0, 1);\n    }\n    return $integer;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09_jevjv.php:21\n\
    Stack trace:\n#0 /tmp/tmp09_jevjv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp09_jevjv.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[0];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb55ly4cl.php:16\n\
    Stack trace:\n#0 /tmp/tmpb55ly4cl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpb55ly4cl.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_places = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimal_places <= 0) {\n        return $number;\n    }\n   \
    \ $decimal_places = abs($decimal_places);\n    $integer = substr($number, 0, $decimal_places);\n\
    \    $decimal = substr($number, $decimal_places);\n    return $integer . '.' .\
    \ substr($decimal, 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83biqs3o.php:22\n\
    Stack trace:\n#0 /tmp/tmp83biqs3o.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp83biqs3o.php\
    \ on line 22\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: -1
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  while ($integer > 1) {\n    $decimals++;\n    $integer = floor($number);\n\
    \  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730968
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps12w0ufw.php:17\n\
    Stack trace:\n#0 /tmp/tmps12w0ufw.php(22): test()\n#1 {main}\n  thrown in /tmp/tmps12w0ufw.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyugcas55.php:16\n\
    Stack trace:\n#0 /tmp/tmpyugcas55.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyugcas55.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = count($parts) - 1;\n    return $parts[$decimals];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparnrdgeg.php:17\n\
    Stack trace:\n#0 /tmp/tmparnrdgeg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmparnrdgeg.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = substr($number, strlen($number)\
    \ - 1);\n  $integer = substr($number, 0, strlen($number) - 1);\n  return $integer\
    \ . '.' . substr($decimals, 0, 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxswjncqx.php:17\n\
    Stack trace:\n#0 /tmp/tmpxswjncqx.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpxswjncqx.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_part = floor($number);\n   \
    \ $decimal_part = $decimal_part - $number % $decimal_part;\n    return $decimal_part;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmamhwgud.php:17\n\
    Stack trace:\n#0 /tmp/tmpmamhwgud.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpmamhwgud.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu52a8uy.php:16\n\
    Stack trace:\n#0 /tmp/tmpnu52a8uy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnu52a8uy.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph_d1ecm.php:16\n\
    Stack trace:\n#0 /tmp/tmpph_d1ecm.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpph_d1ecm.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer != $number) {\n        $decimals = strlen($number) - strlen($integer);\n\
    \    }\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgkbbqdc.php:20\n\
    Stack trace:\n#0 /tmp/tmpjgkbbqdc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjgkbbqdc.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  while ($integer % 10 == 0) {\n    $decimals++;\n    $integer = floor($number\
    \ / 10);\n  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxn3gv_k.php:21\n\
    Stack trace:\n#0 /tmp/tmpgxn3gv_k.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpgxn3gv_k.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  if ($decimals > 0) {\n    return substr($number, 0, $decimals);\n \
    \ }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttc9vjft.php:19\n\
    Stack trace:\n#0 /tmp/tmpttc9vjft.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpttc9vjft.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho16dzi.php:16\n\
    Stack trace:\n#0 /tmp/tmpnho16dzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnho16dzi.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = preg_replace('/\\./', '',\
    \ $number);\n    $decimals = strlen($decimals);\n    if ($decimals > 0) {\n  \
    \      $decimals = $decimals - 1;\n    }\n    return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vc714f2.php:20\n\
    Stack trace:\n#0 /tmp/tmp6vc714f2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6vc714f2.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * 10 ** $decimals) / 10 ** $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlrckgx4.php:16\n\
    Stack trace:\n#0 /tmp/tmpnlrckgx4.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnlrckgx4.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        return $decimals;\n    }\n    return $integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68xvkcb5.php:21\n\
    Stack trace:\n#0 /tmp/tmp68xvkcb5.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp68xvkcb5.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0_qyc5x.php:16\n\
    Stack trace:\n#0 /tmp/tmpr0_qyc5x.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpr0_qyc5x.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[0] . '.' . substr($parts[1], 0, -1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyugcas55.php:16\n\
    Stack trace:\n#0 /tmp/tmpyugcas55.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyugcas55.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number - $integer);\n \
    \ }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzqt24so.php:20\n\
    Stack trace:\n#0 /tmp/tmpwzqt24so.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwzqt24so.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  if ($decimals > 0) {\n    return substr($number, 0, $decimals);\n \
    \ }\n  return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttc9vjft.php:19\n\
    Stack trace:\n#0 /tmp/tmpttc9vjft.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpttc9vjft.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer > 0 && $number - $integer < 0.1) {\n        $decimals = floor($number\
    \ - $integer);\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77hwxex0.php:20\n\
    Stack trace:\n#0 /tmp/tmp77hwxex0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp77hwxex0.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = 1;\n    $integer = floor($number);\n\
    \    if ($integer != $number) {\n        $decimals = strlen($number) - strlen($integer);\n\
    \    }\n    return $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgkbbqdc.php:20\n\
    Stack trace:\n#0 /tmp/tmpjgkbbqdc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpjgkbbqdc.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = count($parts) - 1;\n    return $parts[$decimals];\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparnrdgeg.php:17\n\
    Stack trace:\n#0 /tmp/tmparnrdgeg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmparnrdgeg.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzm388zxi.php:15\n\
    Stack trace:\n#0 /tmp/tmpzm388zxi.php(20): test()\n#1 {main}\n  thrown in /tmp/tmpzm388zxi.php\
    \ on line 15\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer == $number) {\n    return $decimals;\n  }\n  while ($integer >\
    \ 1) {\n    $decimals++;\n    $integer /= 10;\n  }\n  return $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8u12s_l.php:24\n\
    Stack trace:\n#0 /tmp/tmpk8u12s_l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk8u12s_l.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = substr($number, strlen($number)\
    \ - 1);\n  $integer = substr($number, 0, strlen($number) - 1);\n  return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6nylo8u.php:17\n\
    Stack trace:\n#0 /tmp/tmpn6nylo8u.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpn6nylo8u.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[0];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb55ly4cl.php:16\n\
    Stack trace:\n#0 /tmp/tmpb55ly4cl.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpb55ly4cl.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ex8k6pm.php:16\n\
    Stack trace:\n#0 /tmp/tmp8ex8k6pm.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp8ex8k6pm.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_part = floor($number);\n   \
    \ $decimal_part = $decimal_part - $decimal_part % 1;\n    $decimal_part = $decimal_part\
    \ * 10 + round($number - $decimal_part);\n    return $decimal_part;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t9tdngh.php:18\n\
    Stack trace:\n#0 /tmp/tmp7t9tdngh.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp7t9tdngh.php\
    \ on line 18\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu52a8uy.php:16\n\
    Stack trace:\n#0 /tmp/tmpnu52a8uy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnu52a8uy.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number;\n\
    \  }\n  $integer = floor($number);\n  return $integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeylo6j8n.php:21\n\
    Stack trace:\n#0 /tmp/tmpeylo6j8n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpeylo6j8n.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer === 0) {\n    return 0;\n  }\n  if ($integer > 0 && $number <\
    \ 1) {\n    return 1;\n  }\n  if ($integer < 0 && $number > -1) {\n    return\
    \ -1;\n  }\n  if ($integer < 0) {\n    $decimals = floor($number - $integer);\n\
    \  }\n  return $integer + $decimals;\n}\n\nfunction candidate(...$args) {\n  \
    \  return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsycr8nps.php:29\n\
    Stack trace:\n#0 /tmp/tmpsycr8nps.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsycr8nps.php\
    \ on line 29\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ $decimals = $parts[1];\n    $integer = $parts[0];\n    if ($decimals > 0) {\n\
    \        return $integer . '.' . substr($decimals, 0, -1);\n    }\n    return\
    \ $integer;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpko8w83io.php:21\n\
    Stack trace:\n#0 /tmp/tmpko8w83io.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpko8w83io.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer == $number) {\n    return $decimals;\n  }\n  while ($integer >\
    \ 1) {\n    $decimals++;\n    $integer /= 10;\n  }\n  return $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8u12s_l.php:24\n\
    Stack trace:\n#0 /tmp/tmpk8u12s_l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpk8u12s_l.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * 10 ** $decimals) / 10 ** $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlrckgx4.php:16\n\
    Stack trace:\n#0 /tmp/tmpnlrckgx4.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnlrckgx4.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu52a8uy.php:16\n\
    Stack trace:\n#0 /tmp/tmpnu52a8uy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnu52a8uy.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $number;\n\
    \  }\n  $integer = floor($number);\n  if ($integer == $number) {\n    return $integer;\n\
    \  }\n  return $integer - 1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4ik1mi0.php:24\n\
    Stack trace:\n#0 /tmp/tmpw4ik1mi0.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpw4ik1mi0.php\
    \ on line 24\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = substr($number, strlen($number)\
    \ - 1);\n    $integer = substr($number, 0, strlen($number) - 1);\n    return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69494jwz.php:17\n\
    Stack trace:\n#0 /tmp/tmp69494jwz.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp69494jwz.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimal_part = floor($number);\n   \
    \ $decimal_part_string = '';\n    if ($decimal_part != 0) {\n        $decimal_part_string\
    \ = $decimal_part;\n    }\n    return $decimal_part_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiovrt0o3.php:20\n\
    Stack trace:\n#0 /tmp/tmpiovrt0o3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpiovrt0o3.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = preg_replace('/\\./', '', $number);\n\
    \  $decimals = strlen($decimals);\n  if ($decimals > 0) {\n    return $decimals;\n\
    \  }\n  return 1;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpckgtfmke.php:20\n\
    Stack trace:\n#0 /tmp/tmpckgtfmke.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpckgtfmke.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    $integer = floor($number);\n    if ($decimals > 0) {\n        $integer\
    \ += $decimals / abs($decimals);\n    }\n    return $integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfaghjl7a.php:20\n\
    Stack trace:\n#0 /tmp/tmpfaghjl7a.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfaghjl7a.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = substr($number, strlen($number)\
    \ - 1);\n  $integer = substr($number, 0, strlen($number) - 1);\n  return $integer\
    \ . '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6nylo8u.php:17\n\
    Stack trace:\n#0 /tmp/tmpn6nylo8u.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpn6nylo8u.php\
    \ on line 17\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return floor($number * pow(10, $decimals)) / pow(10, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu52a8uy.php:16\n\
    Stack trace:\n#0 /tmp/tmpnu52a8uy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnu52a8uy.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbybud1ka.php:16\n\
    Stack trace:\n#0 /tmp/tmpbybud1ka.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpbybud1ka.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer == $number) {\n    return $decimals;\n  }\n  $decimals = strlen($number)\
    \ - strlen($integer);\n  return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3pozt38f.php:21\n\
    Stack trace:\n#0 /tmp/tmp3pozt38f.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3pozt38f.php\
    \ on line 21\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccqs7kr5.php:16\n\
    Stack trace:\n#0 /tmp/tmpccqs7kr5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpccqs7kr5.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return substr($number, 0, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglhqk7gd.php:16\n\
    Stack trace:\n#0 /tmp/tmpglhqk7gd.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpglhqk7gd.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = strlen($number) - strrpos($number,\
    \ '.');\n  return $decimals > 0 ? substr($number, 0, $decimals) : $number;\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnpd4rpo.php:16\n\
    Stack trace:\n#0 /tmp/tmpdnpd4rpo.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdnpd4rpo.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    if ($decimals > 0) {\n        return substr($number, 0, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_urgkxd.php:19\n\
    Stack trace:\n#0 /tmp/tmp3_urgkxd.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp3_urgkxd.php\
    \ on line 19\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $decimals = strlen($number) - strrpos($number,\
    \ '.');\n    return floor($number) + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5efuvnns.php:16\n\
    Stack trace:\n#0 /tmp/tmp5efuvnns.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp5efuvnns.php\
    \ on line 16\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n  $decimals = 1;\n  $integer = floor($number);\n\
    \  if ($integer != $number) {\n    $decimals = strlen($number - $integer);\n \
    \ }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzqt24so.php:20\n\
    Stack trace:\n#0 /tmp/tmpwzqt24so.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwzqt24so.php\
    \ on line 20\n"
  timestamp: 1659730963
- exit_code: 255
  program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    function truncate_number($number) {\n    $parts = explode('.', $number);\n   \
    \ return $parts[1];\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnho16dzi.php:16\n\
    Stack trace:\n#0 /tmp/tmpnho16dzi.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpnho16dzi.php\
    \ on line 16\n"
  timestamp: 1659730963
