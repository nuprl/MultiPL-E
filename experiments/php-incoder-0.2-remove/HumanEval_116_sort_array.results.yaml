language: php
name: HumanEval_116_sort_array
results:
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($sorted) {\n                $a = bindec($a);\n                $b = bindec($b);\n\
    \                $c = $a + $b;\n                if ($c === 0) {\n            \
    \        return 0;\n                }\n                return $c < 0 ? -1 : 1;\n\
    \            },\n            $sorted,\n            $sorted\n        ),\n     \
    \   $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nel54v_.php:34\n\
    Stack trace:\n#0 /tmp/tmp5nel54v_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5nel54v_.php\
    \ on line 34\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $sorted[$key] = count(str_split($binary))\
    \ > count(str_split($binary)) ? $binary : decbin($value);\n    }\n    return $sorted;\n\
    }\n$arr = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 =>\
    \ 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11\
    \ => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n\
    \    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22\
    \ => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n\
    \    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33\
    \ => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n\
    \    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44\
    \ => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n\
    \    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55\
    \ => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n\
    \    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66\
    \ => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n\
    \    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77\
    \ => \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmphtfgutm9.php on line 95

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    0 => 1,\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 =>\
    \ 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n \
    \   73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 =>\
    \ 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n \
    \   84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmkrcxq9t.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    $ones = 0;\n    foreach ($arr as $num) {\n        $ones += $num;\n      \
    \  $result[] = $num;\n    }\n    if ($ones > 0) {\n        $result[] = $ones;\n\
    \    }\n    sort($result);\n    return $result;\n}\n\n$arr = [\n    1,\n    2,\n\
    \    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n  \
    \  12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n\
    \    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n\
    \    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n\
    \    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n\
    \    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n\
    \    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n    63,\n    64,\n    65,\n\
    \    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n    72,\n    73,\n    74,\n\
    \    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n    81,\n    82,\n    83,\n\
    \    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n    90,\n    91,\n    92,\n\
    \    93,\n    94,\n    95,\n    96,\n    97,\n    98,\n    99,\n    100,\n   \
    \ 101,\n    102,\n    103,\n    104,\n    105,\n    106,\n    107,\n    108,\n\
    \    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n    115,\n    116,\n\
    \    117,\n    118,\n    119,\n    120,\n    121,\n    122,\n    123,\n    124,\n\
    \    125,\n    12\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqdilxxbg.php on line 147

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\n\n$arr = array(\n    1,\n\
    \    2,\n    4,\n    8,\n    16,\n    32,\n    64,\n    128,\n    256,\n    512,\n\
    \    1024,\n    2048,\n    4096,\n    8192,\n    16384,\n    32768,\n    65536,\n\
    \    131072,\n    262144,\n    524288,\n    1048576,\n    2097152,\n    4194304,\n\
    \    8388608,\n    16777216,\n    33554432,\n    67108864,\n    134217728,\n \
    \   268435456,\n    536870912,\n    1073741824,\n    2147483648,\n    4294967296,\n\
    \    8589934592,\n    17179869184,\n    34359738368,\n    68719476736,\n    137438953472,\n\
    \    274877906944,\n    53687091296,\n    107374182416,\n    214748364800,\n \
    \   429496729600,\n    858993459200,\n    171798691840,\n    3435973836800,\n\
    \    6871947673600,\n    13743895347200,\n    27487790694400,\n    5368709129600,\n\
    \    10737418241600,\n    2147483648000,\n    4294967296000,\n    8589934592000,\n\
    \    171798691840,\n    34359738368000,\n    68719476736000,\n    137438953472000,\n\
    \    274877906944000,\n    53687091296000,\n    107374182416000,\n    2147483648000,\n\
    \    4294967296000,\n    8589934592000,\n    171798691840,\n    34359738368000,\n\
    \    68719476736000,\n    137438953472000,\n    274877906944000,\n    53687091296000,\n\
    \    107374182416000,\n    2147483648000,\n    4294967296000,\n    8589934592000,\n\
    \    17179869\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdqya7po_.php on line 88

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binaryArray = str_split($binary);\n        $binaryArray\
    \ = array_filter($binaryArray);\n        $binaryArray = array_map('decbin', $binaryArray);\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_map('str_pad', array_fill(0, count($binaryArray), '0'));\n        $binaryArray\
    \ = implode('', $binaryArray);\n        $binaryArray = str_split($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map('decbin',\
    \ $binaryArray);\n        $binaryArray = array_map('str_pad', $binaryArray);\n\
    \        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'));\n        $binaryArray = implode('', $binaryArray);\n        $binaryArray\
    \ = str_split($binaryArray);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map('decbin', $binaryArray);\n        $binaryArray\
    \ = array_map('str_pad', $binaryArray);\n        $binaryArray = array_map('str_pad',\
    \ array_fill(0, count($binaryArray), '0'));\n        $binaryArray = implode('',\
    \ $binaryArray);\n        $binaryArray = str_split($binaryArray);\n        $binaryArray\
    \ = array_filter($binaryArray);\n        $binaryArray = array_map('decbin', $binaryArray);\n\
    \        $binaryArray = array_map('str_pad', $binaryArray);\n        $binaryArray\
    \ = array_map('str_pad', array_fill(0, count($binaryArray), '0'));\n        $binaryArray\
    \ = implode('', $binaryArray);\n        $binaryArray = str_split($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map('decbin',\
    \ $binaryArray);\n        $binaryArray = array_map('str_pad', $binaryArray);\n\
    \        $binaryArray = array_map('str_pad', array_fill(0, count($binaryArray),\
    \ '0'));\n        $binaryArray = implode('', $binaryArray);\n        $binaryArray\
    \ = str_split($binaryArray);\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4eeh6bxa.php on line 61

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($sorted) {\n                $ones = bindec(decbin($a));\n                $ones\
    \ = $ones - bindec(decbin($b));\n                return $ones;\n            },\n\
    \            $sorted,\n            $sorted\n        ),\n        SORT_DESC,\n \
    \       $sorted\n    );\n    return $sorted;\n}\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpju0r1z4p.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    0 => 1,\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n\
    \    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n\
    \    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16\
    \ => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n\
    \    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27\
    \ => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n\
    \    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38\
    \ => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n\
    \    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49\
    \ => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n\
    \    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60\
    \ => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n\
    \    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71\
    \ => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n\
    \    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82\
    \ => 1,\n    83 => 1,\n    84 => 1,\n    85 \nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpfsqw_8oo.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpujn2_1ig.php on line 112

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h1wed_2.php:20\n\
    Stack trace:\n#0 /tmp/tmp6h1wed_2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6h1wed_2.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array_count_values($arr);\n    foreach ($ones as $num => $count)\
    \ {\n        $result[$num] = $count;\n    }\n    asort($result);\n    foreach\
    \ ($result as $num => $count) {\n        $result[$num] = $count / pow(10, count($ones)\
    \ * 4 - 4);\n    }\n    return $result;\n}\n$arr = array(\n    0,\n    1,\n  \
    \  2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n\
    \    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n\
    \    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n\
    \    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n\
    \    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n    47,\n\
    \    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n    56,\n\
    \    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n    63,\n    64,\n    65,\n\
    \    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n    72,\n    73,\n    74,\n\
    \    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n    81,\n    82,\n    83,\n\
    \    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n    90,\n    91,\n    92,\n\
    \    93,\n    94,\n    95,\n    96,\n    97,\n    98,\n    99,\n    100,\n   \
    \ 101,\n    102,\n    103,\n    104,\n    105,\n    106,\n    107,\n    108,\n\
    \    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n    115,\n    116,\n\
    \    117,\n    118,\n    119,\n    \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl6b5a7vd.php on line 140

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = 0;\n    foreach ($arr as $value) {\n        $ones += $value;\n  \
    \      $result[] = $ones;\n    }\n    array_multisort($result, SORT_DESC, $arr);\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v6x4l98.php:21\n\
    Stack trace:\n#0 /tmp/tmp4v6x4l98.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4v6x4l98.php\
    \ on line 21\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeq5dvto.php:20\n\
    Stack trace:\n#0 /tmp/tmpgeq5dvto.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgeq5dvto.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $ones = 0;\n    foreach ($arr as $num) {\n        $ones += $num;\n      \
    \  $sorted[] = $ones;\n    }\n    asort($sorted);\n    return $sorted;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzluyecyy.php:21\n\
    Stack trace:\n#0 /tmp/tmpzluyecyy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzluyecyy.php\
    \ on line 21\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(1, 4, 3, 7, 2, 5, 6, 8, 9);\n$arr = sort_array($arr);\nprint_r($arr);\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 9\n    [1] => 8\n    [2] => 7\n    [3] => 6\n    [4]\
    \ => 5\n    [5] => 4\n    [6] => 3\n    [7] => 2\n    [8] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpoqvs266u.php:23\nStack trace:\n\
    #0 /tmp/tmpoqvs266u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoqvs266u.php\
    \ on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        while\
    \ ($value > 0) {\n            $binary .= str_pad(decbin($value), 8, '0', STR_PAD_LEFT);\n\
    \            $value -= 1;\n        }\n        $sorted = array_merge($sorted, explode('1',\
    \ $binary));\n    }\n    sort($sorted);\n    return $sorted;\n}\n$arr = array(4,\
    \ 2, 5, 1, 3, 7);\nprint_r(sort_array($arr));\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => \n    [1] => \n    [2] => \n    [3] => \n    [4] =>\
    \ \n    [5] => \n    [6] => \n    [7] => \n    [8] => \n    [9] => \n    [10]\
    \ => \n    [11] => \n    [12] => \n    [13] => 0\n    [14] => 00000000\n    [15]\
    \ => 000000\n    [16] => 00000000\n    [17] => 00000\n    [18] => 0\n    [19]\
    \ => 000000\n    [20] => 000000\n    [21] => 00000\n    [22] => 00000000\n   \
    \ [23] => 000000\n    [24] => 00000\n    [25] => 00000\n    [26] => 00000000\n\
    \    [27] => 000000\n    [28] => 00000000\n    [29] => 000000\n    [30] => 00000000\n\
    \    [31] => 0000000\n    [32] => 00000000\n    [33] => 000000\n    [34] => 00000\n\
    \    [35] => 00000000\n    [36] => 00000\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp0gq45yk6.php:26\nStack trace:\n#0 /tmp/tmp0gq45yk6.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0gq45yk6.php on line 26\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value\
    \ / 2;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 2;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 4;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 4;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 8;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 8;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 16;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 16;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 32;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 32;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 64;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 64;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 128;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 128;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 256;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 256;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 512;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 512;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 1024;\n    }\n    foreach ($result as $key => $value) {\n       \
    \ $result[$key] = $value * 1024;\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = $value / 2048;\n    }\n    foreach ($\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp3x1lsxhq.php on line 75

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1oiuq2a.php:21\n\
    Stack trace:\n#0 /tmp/tmpm1oiuq2a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpm1oiuq2a.php\
    \ on line 21\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1gb2pq07.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    foreach ($arr as $key => $value) {\n        $bin\
    \ = decbin($value);\n        $bin = str_pad($bin, $count, '0', STR_PAD_LEFT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_BOTH);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin\
    \ = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_RIGHT);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\
    \        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_RIGHT);\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkga5lso0.php on line 49

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v62cjay.php:16\n\
    Stack trace:\n#0 /tmp/tmp3v62cjay.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3v62cjay.php\
    \ on line 16\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\n\n$arr = array(\n    0,\
    \ 4, 1, 5, 7, 2, 6, 3, 8,\n    9, 10, 11, 12, 13, 14, 15, 16, 17,\n    18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26,\n    27, 28, 29, 30, 31, 32, 33, 34, 35,\n    36,\
    \ 37, 38, 39, 40, 41, 42, 43, 44,\n    45, 46, 47, 48, 49, 50, 51, 52, 53,\n \
    \   54, 55, 56, 57, 58, 59, 60, 61, 62,\n    63, 64, 65, 66, 67, 68, 69, 70, 71,\n\
    \    72, 73, 74, 75, 76, 77, 78, 79, 80,\n    81, 82, 83, 84, 85, 86, 87, 88,\
    \ 89,\n    90, 91, 92, 93, 94, 95, 96, 97, 98,\n    99, 100, 101, 102, 103, 104,\
    \ 105, 106, 107,\n    108, 109, 110, 111, 112, 113, 114, 115, 116,\n    117, 118,\
    \ 119, 120, 121, 122, 123, 124, 125,\n    126, 127, 128, 129, 130, 131, 132, 133,\
    \ 134,\n    135, 136, 137, 138, 139, 140, 141, 142, 143,\n    144, 145, 146, 147,\
    \ 148, 149, 150, 151, 152,\n    153, 154, 155, 156, 157, 158, 159, 160, 161,\n\
    \    162, 163, 164, 165, 166, 167, 168, 169, 170,\n    171, 172, 173, 174, 175,\
    \ 176, 177, 178, 179,\n    180, 181, 182, 183, 184, 185, 186, 187, 188,\n    189,\
    \ 190, 191, 192, 193, 194, 195, 196, 197,\n    198, 199, 200, 201, 202, 203, 204,\
    \ 205, 206,\n    207, 208, 209, 210, 211, 212, 213, 214, 215,\n    216, 217, 218,\
    \ 219, 220, 221, 222, 223, 224,\n    225, 226, 227, 228, 229, 230, 231, 232, 233,\n\
    \    234, 235, 236, 237, 238, 239, 240, 241, 242,\n    243, 244, 245, 246, 247,\
    \ 248, 249, 250, 25\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpof898g2w.php on line 41

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    0 => 1,\n\
    \    1 => 1,\n    2 => 0,\n    3 => 1,\n    4 => 1,\n    5 => 0,\n    6 => 0,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 =>\
    \ 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n \
    \   73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 =>\
    \ 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n \
    \   84 => 1,\n    85 => 1,\n    86 => 1,\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuzvzdk95.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n  \
    \          $sorted[$key] = $value + 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value - 1;\n        }\n    }\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixxzosw5.php:28\n\
    Stack trace:\n#0 /tmp/tmpixxzosw5.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpixxzosw5.php\
    \ on line 28\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($result),\n        SORT_ASC,\n\
    \        array_keys($result),\n        SORT_NUMERIC,\n        $result\n    );\n\
    \    return $result;\n}\n$arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n   \
    \ 4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n \
    \   10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 =>\
    \ 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n \
    \   21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 =>\
    \ 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n \
    \   32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 =>\
    \ 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n \
    \   43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 =>\
    \ 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n \
    \   54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 =>\
    \ 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n \
    \   65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 =>\
    \ 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n \
    \   76 => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 =>\
    \ 1,\n    82 => 1,\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9t97k01t.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($val); $i++) {\n            $binary .= str_pad(decbin($val[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binaryLen = strlen($binary);\n \
    \       $binaryLen = strlen($binary);\n        $ones = str_repeat('1', $binaryLen);\n\
    \        $zeros = str_repeat('0', $binaryLen - $binaryLen);\n        $binary =\
    \ $ones . ($zeros . $binary);\n        $binary = str_pad($binary, strlen($val),\
    \ '0', STR_PAD_LEFT);\n        $binaryLen = strlen($binary);\n        $ones =\
    \ str_repeat('1', $binaryLen);\n        $zeros = str_repeat('0', $binaryLen -\
    \ $binaryLen);\n        $binary = $ones . ($zeros . $binary);\n        $binaryLen\
    \ = strlen($binary);\n        $ones = str_repeat('1', $binaryLen);\n        $zeros\
    \ = str_repeat('0', $binaryLen - $binaryLen);\n        $binary = $ones . ($zeros\
    \ . $binary);\n        $binaryLen = strlen($binary);\n        $ones = str_repeat('1',\
    \ $binaryLen);\n        $zeros = str_repeat('0', $binaryLen - $binaryLen);\n \
    \       $binary = $ones . ($zeros . $binary);\n        $binaryLen = strlen($binary);\n\
    \        $ones = str_repeat('1', $binaryLen);\n        $zeros = str_repeat('0',\
    \ $binaryLen - $binaryLen);\n        $binary = $ones . ($zeros . $binary);\n \
    \       $binaryLen = strlen($binary);\n        $ones = str_repeat('1', $binaryLen);\n\
    \        $zeros = str_repeat('0', $binaryLen - $binaryLen);\n        $binary =\
    \ $ones . ($zeros . $binary);\n        $binaryLen = strlen($binary);\n       \
    \ $ones = str_repeat('1', $binaryLen);\n        $zeros = str_repeat('0', $binaryLen\
    \ - $binaryLen);\n        $binary = $ones . ($zeros . $binary);\n        $binaryLen\
    \ = strlen($binary);\n        $ones = str_repeat('1', $binaryLen);\n        $zeros\
    \ = str_repeat('0', $binaryLen - $binaryLen);\n        $bin\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp56nx6nzx.php on line 47

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $ones = count_bits($a) - count_bits($b);\n    \
    \            if ($ones == 0) {\n                    return strcmp($a, $b);\n \
    \               }\n                return $ones;\n            },\n           \
    \ $result,\n            $result\n        ),\n        $result\n    );\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_bits()\
    \ in /tmp/tmp5g4mw4f4.php:14\nStack trace:\n#0 [internal function]: {closure}(1,\
    \ 1)\n#1 /tmp/tmp5g4mw4f4.php(21): array_map(Object(Closure), Array, Array)\n\
    #2 /tmp/tmp5g4mw4f4.php(28): sort_array(Array)\n#3 /tmp/tmp5g4mw4f4.php(32): candidate(Array)\n\
    #4 /tmp/tmp5g4mw4f4.php(42): test()\n#5 {main}\n  thrown in /tmp/tmp5g4mw4f4.php\
    \ on line 14\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2asva05.php:19\n\
    Stack trace:\n#0 /tmp/tmpj2asva05.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj2asva05.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmwj4wyzw.php on line 113

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binaryArray = str_split($binary);\n        $sorted[$key]\
    \ = count($binaryArray) - 1;\n    }\n    asort($sorted);\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeirze7bp.php:25\n\
    Stack trace:\n#0 /tmp/tmpeirze7bp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpeirze7bp.php\
    \ on line 25\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $ones\
    \ = bindec($arr[$i]);\n        $sorted[$i] = $ones;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83pu8vk7.php:22\n\
    Stack trace:\n#0 /tmp/tmp83pu8vk7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp83pu8vk7.php\
    \ on line 22\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    foreach ($arr as $value) {\n        if ($value == 1)\
    \ {\n            $ones[] = $value;\n        } else {\n            $result[] =\
    \ $value;\n        }\n    }\n    foreach ($ones as $one) {\n        $result[]\
    \ = $one;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $arr[$key] - $ones[$key];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqc6_gfw.php:29\n\
    Stack trace:\n#0 /tmp/tmpjqc6_gfw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjqc6_gfw.php\
    \ on line 29\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp93g8p2b.php:19\n\
    Stack trace:\n#0 /tmp/tmpp93g8p2b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp93g8p2b.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    0 => 1,\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n\
    \    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n\
    \    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16\
    \ => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n\
    \    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27\
    \ => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n\
    \    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38\
    \ => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n\
    \    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49\
    \ => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n\
    \    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60\
    \ => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n\
    \    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71\
    \ => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n\
    \    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82\
    \ => 1,\n    83 => 1,\n    84 => 1,\n    \nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_e4vng9e.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $item) {\n        $result[$item] = count(decbin($item));\n\
    \    }\n    arsort($result);\n    return array_keys($result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptsly1e3z.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmptsly1e3z.php on\
    \ line 9\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptsly1e3z.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmptsly1e3z.php on\
    \ line 9\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmptsly1e3z.php on line 9\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptsly1e3z.php:20\nStack trace:\n#0 /tmp/tmptsly1e3z.php(30):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptsly1e3z.php on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    $ones = [];\n    foreach ($arr as $item) {\n        $bin = decbin($item);\n\
    \        $ones = array_merge($ones, str_split($bin));\n    }\n    foreach ($ones\
    \ as $key => $one) {\n        $result[$key] = $one;\n    }\n    array_multisort($result,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n$arr = [1, 4, 3, 8, 2, 10, 5];\nprint_r(sort_array($arr));\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpz97bitu1.php\
    \ on line 16\nArray\n(\n    [0] => 1\n    [1] => 4\n    [2] => 3\n    [3] => 8\n\
    \    [4] => 2\n    [5] => 10\n    [6] => 5\n)\n\nWarning: array_multisort(): Array\
    \ sizes are inconsistent in /tmp/tmpz97bitu1.php on line 16\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz97bitu1.php:26\nStack trace:\n#0 /tmp/tmpz97bitu1.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz97bitu1.php on line 26\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value;\n\
    \    }\n    return $result;\n}\n\n$arr = array(\n    0 => 1,\n    1 => 1,\n  \
    \  2 => 0,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnstre4z9.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_ASC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqt3j2cl5.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    foreach ($arr as $num) {\n        $ones[] = $num;\n\
    \    }\n    sort($ones);\n    foreach ($ones as $num) {\n        $result[] = $num;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uy6q_b7.php:23\n\
    Stack trace:\n#0 /tmp/tmp3uy6q_b7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3uy6q_b7.php\
    \ on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($sorted),\n        SORT_ASC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\n\n$arr = array(\n    0 => 1,\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 =>\
    \ 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n \
    \   73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 =>\
    \ 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => \nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpss0e79w9.php on line 104

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($sorted),\n        SORT_ASC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8zbtzan.php:23\n\
    Stack trace:\n#0 /tmp/tmpa8zbtzan.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpa8zbtzan.php\
    \ on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    foreach ($arr as $key => $val) {\n        $ones[$key]\
    \ = $val & 1;\n    }\n    foreach ($ones as $key => $val) {\n        if ($val\
    \ > 0) {\n            $result[] = $key;\n        }\n    }\n    foreach ($ones\
    \ as $key => $val) {\n        if ($val > 0) {\n            $result[] = $key;\n\
    \        }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0)\
    \ {\n            $result[] = $key;\n        }\n    }\n    foreach ($ones as $key\
    \ => $val) {\n        if ($val > 0) {\n            $result[] = $key;\n       \
    \ }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n \
    \           $result[] = $key;\n        }\n    }\n    foreach ($ones as $key =>\
    \ $val) {\n        if ($val > 0) {\n            $result[] = $key;\n        }\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n     \
    \       $result[] = $key;\n        }\n    }\n    foreach ($ones as $key => $val)\
    \ {\n        if ($val > 0) {\n            $result[] = $key;\n        }\n    }\n\
    \    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n            $result[]\
    \ = $key;\n        }\n    }\n    foreach ($ones as $key => $val) {\n        if\
    \ ($val > 0) {\n            $result[] = $key;\n        }\n    }\n    foreach ($ones\
    \ as $key => $val) {\n        if ($val > 0) {\n            $result[] = $key;\n\
    \        }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0)\
    \ {\n            $result[] = $key;\n        }\n    }\n    foreach ($ones as $key\
    \ => $val) {\n        if ($val > 0) {\n            $result[] = $key;\n       \
    \ }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n \
    \           $result[] = $key;\n        }\n    }\n    foreach ($ones as $key =>\
    \ $val) {\n        if ($val > 0) {\n            $result[] = $key;\n        }\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n     \
    \       $result[] = $key;\n        }\n    }\n    foreach ($ones as $key => $val)\
    \ {\n        if ($val > 0) {\n            $result[] = $key;\n        }\n    }\n\
    \    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n            $\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4qge6q3f.php on line 100

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    sort($arr);\n  \
    \  return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ayy5gni.php:15\n\
    Stack trace:\n#0 /tmp/tmp6ayy5gni.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6ayy5gni.php\
    \ on line 15\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp64lqzgrh.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return strlen($a) - strlen($b);\n            },\n           \
    \ array_keys($result),\n            array_values($result)\n        ),\n      \
    \  SORT_ASC,\n        $result\n    );\n    return $result;\n}\n\n$arr = array(\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 =>\
    \ 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n \
    \   73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 =>\
    \ 1,\n    79 \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpp0n0373o.php on line 105

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array_count_values($arr);\n    foreach ($ones as $num => $count)\
    \ {\n        $result[] = $num;\n    }\n    asort($result);\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz46by4z.php:20\n\
    Stack trace:\n#0 /tmp/tmpbz46by4z.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbz46by4z.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1gb2pq07.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\n\n$arr = array(\n    1,\n\
    \    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n   \
    \ 11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n\
    \    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n\
    \    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n\
    \    38,\n    39,\n    40\n);\n\n$arr = sort_array($arr);\nprint_r($arr);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 31\n    [2] => 24\n    [3] => 25\n \
    \   [4] => 26\n    [5] => 27\n    [6] => 28\n    [7] => 29\n    [8] => 30\n  \
    \  [9] => 32\n    [10] => 22\n    [11] => 33\n    [12] => 34\n    [13] => 35\n\
    \    [14] => 36\n    [15] => 37\n    [16] => 38\n    [17] => 39\n    [18] => 23\n\
    \    [19] => 21\n    [20] => 2\n    [21] => 10\n    [22] => 3\n    [23] => 4\n\
    \    [24] => 5\n    [25] => 6\n    [26] => 7\n    [27] => 8\n    [28] => 9\n \
    \   [29] => 11\n    [30] => 20\n    [31] => 12\n    [32] => 13\n    [33] => 14\n\
    \    [34] => 15\n    [35] => 16\n    [36] => 17\n    [37] => 18\n    [38] => 19\n\
    \    [39] => 40\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqma9awsf.php:62\n\
    Stack trace:\n#0 /tmp/tmpqma9awsf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpqma9awsf.php\
    \ on line 62\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    $ones = 0;\n    foreach ($arr as $num) {\n        if ($num > 0) {\n     \
    \       $ones++;\n        }\n        $result[] = $ones;\n    }\n    asort($result);\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $arr[$key];\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdydd8hv.php:26\n\
    Stack trace:\n#0 /tmp/tmpxdydd8hv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxdydd8hv.php\
    \ on line 26\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $counts = array_count_values($arr);\n    foreach ($counts as $num => $count)\
    \ {\n        if ($count > 1) {\n            $sorted[] = $num;\n        }\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopj3xi21.php:22\n\
    Stack trace:\n#0 /tmp/tmpopj3xi21.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpopj3xi21.php\
    \ on line 22\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2asva05.php:19\n\
    Stack trace:\n#0 /tmp/tmpj2asva05.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj2asva05.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmwj4wyzw.php on line 113

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $binary\
    \ = '';\n        for ($j = 0; $j < 8; $j++) {\n            if ($arr[$i] & 1 <<\
    \ $j) {\n                $binary .= '1';\n            } else {\n             \
    \   $binary .= '0';\n            }\n        }\n        $sorted[$i] = $binary;\n\
    \    }\n    asort($sorted);\n    $result = array();\n    foreach ($sorted as $binary)\
    \ {\n        $result[] = intval(bindec($binary));\n    }\n    return $result;\n\
    }\n\n$arr = array(\n    array(1, 2),\n    array(2, 1),\n    array(3, 1),\n   \
    \ array(4, 1),\n    array(5, 1),\n    array(6, 1),\n    array(7, 1),\n    array(8,\
    \ 1),\n    array(9, 1),\n    array(10, 1),\n    array(11, 1),\n    array(12, 1),\n\
    \    array(13, 1),\n    array(14, 1),\n    array(15, 1),\n    array(16, 1),\n\
    \    array(17, 1),\n    array(18, 1),\n    array(19, 1),\n    array(20, 1),\n\
    \    array(21, 1),\n    array(22, 1),\n    array(23, 1),\n    array(24, 1),\n\
    \    array(25, 1),\n    array(26, 1),\n    array(27, 1),\n    array(28, 1),\n\
    \    array(29, 1),\n    array(30, 1),\n    array(31, 1),\n    array(32, 1),\n\
    \    array(33, 1),\n    array(34, 1),\n    array(35, 1),\n    array(36, 1),\n\
    \    array(37, 1),\n    array(38, 1),\n    array(39, 1),\n    array(40, 1),\n\
    \    array(41, 1),\n    array(42, 1),\n    array(43, 1),\n    array(44, 1),\n\
    \    array(45, 1),\n    array(46, 1),\n    array(47, 1),\n    array(48, 1),\n\
    \    array(49, 1),\n    array(50, 1),\n    array(51, 1),\n    array(52, 1),\n\
    \    array(53, 1),\n    array(54, 1),\n    array(55, 1),\n    array(56, 1),\n\
    \    array(57, 1),\n    array(58, 1),\n    array(59, 1),\n    array(60, 1),\n\
    \    array(61, 1),\n    array(62, 1),\n    array(63, 1),\n    array(64, 1),\n\
    \    array(65, 1),\n    array(66, 1),\n    array(67, 1),\n    array(68, 1),\n\
    \    array(69, 1),\n    array(70, 1),\n    array(71, 1),\n    array(72, 1),\n\
    \    array(73, 1),\n    array(74, 1),\n    \nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp0bm0nhhj.php on line 104

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $ones = $a ^ $b;\n                return $ones\
    \ == 0 ? $a - $b : $ones;\n            },\n            $result,\n            $result\n\
    \        ),\n        SORT_NUMERIC,\n        $result\n    );\n    return $result;\n\
    }\n$arr = array(\n    2,\n    1,\n    3,\n    0,\n    5,\n    7,\n    6,\n   \
    \ 4,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n \
    \   16,\n    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n\
    \    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n\
    \    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n    40\n);\n$arr = sort_array($arr);\n\
    print_r($arr);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 1\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 4\n    [5] => 5\n    [6] => 6\n    [7] => 7\n    [8] => 8\n    [9] => 9\n\
    \    [10] => 10\n    [11] => 11\n    [12] => 12\n    [13] => 13\n    [14] => 14\n\
    \    [15] => 15\n    [16] => 16\n    [17] => 17\n    [18] => 18\n    [19] => 19\n\
    \    [20] => 20\n    [21] => 21\n    [22] => 22\n    [23] => 23\n    [24] => 24\n\
    \    [25] => 25\n    [26] => 26\n    [27] => 27\n    [28] => 28\n    [29] => 29\n\
    \    [30] => 30\n    [31] => 31\n    [32] => 32\n    [33] => 33\n    [34] => 34\n\
    \    [35] => 35\n    [36] => 36\n    [37] => 37\n    [38] => 38\n    [39] => 39\n\
    \    [40] => 40\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxtqjb8p.php:75\n\
    Stack trace:\n#0 /tmp/tmptxtqjb8p.php(85): test()\n#1 {main}\n  thrown in /tmp/tmptxtqjb8p.php\
    \ on line 75\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = [];\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpem03i0y7.php:20\n\
    Stack trace:\n#0 /tmp/tmpem03i0y7.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpem03i0y7.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp048v6d14.php:21\n\
    Stack trace:\n#0 /tmp/tmp048v6d14.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp048v6d14.php\
    \ on line 21\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binaryLen = strlen($binary);\n        $ones =\
    \ substr($binary, $binaryLen - 8, 8);\n        $ones = str_pad($ones, 8, '0',\
    \ STR_PAD_LEFT);\n        $ones = substr($ones, 0, 8);\n        $sorted[$key]\
    \ = $ones;\n    }\n    asort($sorted);\n    return $sorted;\n}\n$arr = array(\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    \nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqviguas0.php on line 91

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v62cjay.php:16\n\
    Stack trace:\n#0 /tmp/tmp3v62cjay.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3v62cjay.php\
    \ on line 16\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1gb2pq07.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_intersect_key($ones, array_flip($ones));\n\
    }\n\n$arr = array(\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n \
    \   8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n\
    \    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n\
    \    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n\
    \    35,\n    36,\n    37,\n    38,\n    39,\n    40\n);\n\n$arr = sort_array($arr);\n\
    \nprint_r($arr);\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but i think it can be done with less code. Do you think it can be done\
    \ with less code?\n<|/ c |>\n<| c |>\nI added a solution with less code, but I\
    \ doubt it's more efficient.\n<|/ c |>\n<| c |>\nThanks for your answer. Your\
    \ solution works but i think it can be done with less code. Do you think it can\
    \ be done with less code?\n<|/ c |>\n<| c |>\nI added a solution with less code,\
    \ but I doubt it's more efficient.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = array(\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n\
    \    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n\
    \    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n\
    \    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n\
    \    36,\n    37,\n    38,\n    39,\n    40\n);\n\n$arr = array_count_values($arr);\n\
    arsort($arr);\n$arr = array_intersect_key($arr, array_flip($arr));\nprint_r($arr);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| c |>\nThanks for your answer. Your solution\
    \ works \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgvzpeisr.php on line 58

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n  \
    \          $sorted[$key] = $value + 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n \
    \       if ($value > 0) {\n            $sorted[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n\
    \            $sorted[$key] = $value - 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value + 1;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n \
    \       if ($value > 0) {\n            $sorted[$key] = $value - 1;\n        }\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n\
    \            $sorted[$key] = $value + 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n \
    \       if ($value > 0) {\n            $sorted[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n\
    \            $sorted[$key] = $value - 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value + 1;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n \
    \       if ($value > 0) {\n            $sorted[$key] = $value - 1;\n        }\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n\
    \            $sorted[$key] = $value + 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($value > 0) {\n            $sorted[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n \
    \       if ($value > 0) {\n            $sorted[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        if ($value > 0) {\n\
    \            $sorted[$key] = $value - 1;\n        }\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        if ($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1s0du7um.php on line 93

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    $ones = [];\n    $zeros = [];\n    foreach ($arr as $item) {\n        if\
    \ ($item == 1) {\n            $ones[] = $item;\n        } else {\n           \
    \ $zeros[] = $item;\n        }\n    }\n    if (count($ones) > 0) {\n        $result\
    \ = array_merge($ones, $zeros);\n    }\n    sort($result);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17xhkw42.php:29\n\
    Stack trace:\n#0 /tmp/tmp17xhkw42.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp17xhkw42.php\
    \ on line 29\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($sorted),\n        SORT_NUMERIC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmgs98l6.php:23\n\
    Stack trace:\n#0 /tmp/tmpxmgs98l6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxmgs98l6.php\
    \ on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = [];\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($sorted), SORT_DESC, $sorted);\n \
    \   return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfnxujmk.php:19\n\
    Stack trace:\n#0 /tmp/tmpyfnxujmk.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpyfnxujmk.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $ones = bindec($a ^ $b);\n                if ($ones\
    \ === 0) {\n                    return $a < $b ? -1 : 1;\n                }\n\
    \                return $ones;\n            },\n            $result,\n       \
    \     $result\n        ),\n        $result\n    );\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_fym75ia.php:32\n\
    Stack trace:\n#0 /tmp/tmp_fym75ia.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_fym75ia.php\
    \ on line 32\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $sorted[$key] = strlen($binary) - strlen($binary)\
    \ % 2;\n    }\n    asort($sorted);\n    foreach ($sorted as $key => $value) {\n\
    \        $sorted[$key] = $arr[$key];\n    }\n    return $sorted;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwzajmii.php:27\n\
    Stack trace:\n#0 /tmp/tmpnwzajmii.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnwzajmii.php\
    \ on line 27\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = [];\n\
    \    $ones = 0;\n    foreach ($arr as $val) {\n        $ones += $val;\n      \
    \  $sorted[] = $ones;\n    }\n    array_multisort($sorted, $arr);\n    return\
    \ $arr;\n}\n$arr = [1, 4, 2, 8, 3, 10, 5];\nprint_r(sort_array($arr));\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 8\n    [4]\
    \ => 3\n    [5] => 10\n    [6] => 5\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmprnydijqx.php:23\nStack trace:\n#0 /tmp/tmprnydijqx.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprnydijqx.php on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value\
    \ % 2 == 0 ? $value / 2 : -$value / 2;\n    }\n    array_multisort($result, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5wi5sghp.php:22\n\
    Stack trace:\n#0 /tmp/tmp5wi5sghp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5wi5sghp.php\
    \ on line 22\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = 0;\n    $zeros = 0;\n    foreach ($arr as $num) {\n        if ($num\
    \ == 1) {\n            $ones++;\n        } else {\n            $zeros++;\n   \
    \     }\n    }\n    if ($ones > $zeros) {\n        foreach ($arr as $num) {\n\
    \            if ($num == 1) {\n                $result[] = $num;\n           \
    \ }\n        }\n        sort($result);\n    } else {\n        foreach ($arr as\
    \ $num) {\n            if ($num == 0) {\n                $result[] = $num;\n \
    \           }\n        }\n        sort($result);\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55xllrf5.php:39\n\
    Stack trace:\n#0 /tmp/tmp55xllrf5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp55xllrf5.php\
    \ on line 39\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($result),\n        SORT_NUMERIC,\n\
    \        $result\n    );\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => \nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzclrq8pn.php on line 104

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binaryLen = strlen($binary);\n        $ones =\
    \ '';\n        for ($i = 0; $i < $binaryLen; $i++) {\n            $ones .= '1';\n\
    \        }\n        $ones = str_pad($ones, $binaryLen, '0', STR_PAD_LEFT);\n \
    \       $sorted[$key] = $ones;\n    }\n    foreach ($sorted as $key => $value)\
    \ {\n        $sorted[$key] = str_pad(decbin($value), strlen($value), '0', STR_PAD_LEFT);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = substr($value,\
    \ strlen($value) - 8);\n    }\n    foreach ($sorted as $key => $value) {\n   \
    \     $sorted[$key] = array_reverse(str_split($value));\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n    }\n\
    \    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = array_reverse($value);\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = \n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxas3k95j.php on line 66

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $ones = 0;\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ 1) {\n            $sorted[$key] = $ones;\n            $ones = 0;\n        }\
    \ else {\n            $ones++;\n        }\n    }\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value == 1) {\n            $sorted[$key] = $ones;\n\
    \            $ones = 0;\n        } else {\n            $ones++;\n        }\n \
    \   }\n    foreach ($arr as $key => $value) {\n        if ($value == 1) {\n  \
    \          $sorted[$key] = $ones;\n            $ones = 0;\n        } else {\n\
    \            $ones++;\n        }\n    }\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == 1) {\n            $sorted[$key] = $ones;\n        \
    \    $ones = 0;\n        } else {\n            $ones++;\n        }\n    }\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value == 1) {\n          \
    \  $sorted[$key] = $ones;\n            $ones = 0;\n        } else {\n        \
    \    $ones++;\n        }\n    }\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value == 1) {\n            $sorted[$key] = $ones;\n            $ones\
    \ = 0;\n        } else {\n            $ones++;\n        }\n    }\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value == 1) {\n            $sorted[$key]\
    \ = $ones;\n            $ones = 0;\n        } else {\n            $ones++;\n \
    \       }\n    }\n    foreach ($arr as $key => $value) {\n        if ($value ==\
    \ 1) {\n            $sorted[$key] = $ones;\n            $ones = 0;\n        }\
    \ else {\n            $ones++;\n        }\n    }\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value == 1) {\n            $sorted[$key] = $ones;\n\
    \            $ones = 0;\n        } else {\n            $ones++;\n        }\n \
    \   }\n    foreach ($arr as $key => $value) {\n        if ($value == 1) {\n  \
    \          $sorted[$key] = $ones;\n            $ones = 0;\n        } else {\n\
    \            $ones++;\n        }\n    }\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value == 1) {\n            $sorted[$key] = $ones;\n        \
    \    $ones = 0;\n        } else {\n            $ones++;\n        }\n    }\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value == 1) {\n          \
    \  $sorted[$key] = $ones;\n            $ones = 0;\n        } else {\n        \
    \    $ones++;\n        }\n    }\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value == 1) {\n            $sorted[$key] = $\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp747koecl.php on line 108

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, strlen($value),\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, 0, strlen($binary) -\
    \ 1);\n        $binaryArray = str_split($binary);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map(function($item) {\n            return str_pad(decbin($item),\
    \ 8, '0', STR_PAD_LEFT);\n        }, $binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return substr($item, 1);\n        }, $binaryArray);\n       \
    \ $binaryArray = array_unique($binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_map(function($item) {\n            return $item[0];\n\
    \        }, $binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item;\n        }, $binaryArray);\n        $binaryArray\
    \ = array_count_values($binaryArray);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map(function($item) {\n            return $item;\n\
    \        }, $binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item;\n        }, $binaryArray);\n        $binaryArray\
    \ = array_count_values($binaryArray);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map(function($item) {\n            return $item;\n\
    \        }, $binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map(function($item)\
    \ {\n            return $item;\n        }, $binaryArray);\n        $binaryArray\
    \ = array_count_values($binaryArray);\n        $binaryArray = array_filter($binaryArray);\n\
    \        $binaryArray = array_map(function($item) {\n            return $item;\n\
    \        }, $binaryArray);\n        $binaryArray = array_count_values($binaryArray);\n\
    \        $binaryArray = array_filter($binaryArray);\n        $binaryArray = array_map(\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpi531_ltb.php on line 61

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = [];\n\
    \    $ones = 0;\n    foreach ($arr as $num) {\n        $ones += $num;\n      \
    \  $sorted[] = $ones;\n    }\n    asort($sorted);\n    return $sorted;\n}\n\n\
    $arr = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n   \
    \ 9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n\
    \    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n\
    \    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n\
    \    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n\
    \    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n\
    \    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n\
    \    63,\n    64,\n    65,\n    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n\
    \    72,\n    73,\n    74,\n    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n\
    \    81,\n    82,\n    83,\n    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n\
    \    90,\n    91,\n    92,\n    93,\n    94,\n    95,\n    96,\n    97,\n    98,\n\
    \    99,\n    100,\n    101,\n    102,\n    103,\n    104,\n    105,\n    106,\n\
    \    107,\n    108,\n    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n\
    \    115,\n    116,\n    117,\n    118,\n    119,\n    120,\n    121,\n    122,\n\
    \    123,\n    124,\n    125,\n    126,\n    127,\n    128,\n    12\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpnk0zwpop.php on line 147

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $a = bindec($a);\n                $b = bindec($b);\n\
    \                if ($a == $b) {\n                    return 0;\n            \
    \    }\n                return $a < $b ? -1 : 1;\n            },\n           \
    \ $result,\n            $result\n        ),\n        $result\n    );\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5o6jxut.php:33\n\
    Stack trace:\n#0 /tmp/tmpu5o6jxut.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpu5o6jxut.php\
    \ on line 33\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ltwdxw.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return strlen(bin2hex($a)) > strlen(bin2hex($b));\n         \
    \   },\n            $result,\n            $result\n        ),\n        SORT_DESC,\n\
    \        $result\n    );\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8e5w9icm.php:29\n\
    Stack trace:\n#0 /tmp/tmp8e5w9icm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8e5w9icm.php\
    \ on line 29\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2asva05.php:19\n\
    Stack trace:\n#0 /tmp/tmpj2asva05.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpj2asva05.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                return strcmp(count($result[$a]), count($result[$b]));\n\
    \            },\n            array_keys($result),\n            array_keys($result)\n\
    \        ),\n        $result\n    );\n    return array_values($result);\n}\n$arr\
    \ = array(\n    0 => 1,\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n\
    \    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n\
    \    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16\
    \ => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n\
    \    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27\
    \ => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n\
    \    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38\
    \ => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n\
    \    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49\
    \ => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n\
    \    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60\
    \ => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n\
    \    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71\
    \ => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n\
    \    77 => \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjxmswlnn.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(1, 4, 3, 6, 2, 5, 7);\n$arr = sort_array($arr);\nprint_r($arr);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 7\n    [1] => 6\n    [2] => 5\n    [3] => 4\n    [4]\
    \ => 3\n    [5] => 2\n    [6] => 1\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmppxcq3ccx.php:23\nStack trace:\n#0 /tmp/tmppxcq3ccx.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppxcq3ccx.php on line 23\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhd0flka.php:20\n\
    Stack trace:\n#0 /tmp/tmpyhd0flka.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpyhd0flka.php\
    \ on line 20\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v62cjay.php:16\n\
    Stack trace:\n#0 /tmp/tmp3v62cjay.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3v62cjay.php\
    \ on line 16\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return str_pad(decbin($a), strlen($a), '0', STR_PAD_LEFT) <\n\
    \                       str_pad(decbin($b), strlen($b), '0', STR_PAD_LEFT);\n\
    \            },\n            $result,\n            $result\n        ),\n     \
    \   SORT_NUMERIC,\n        $result\n    );\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2g18t_0x.php:30\n\
    Stack trace:\n#0 /tmp/tmp2g18t_0x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2g18t_0x.php\
    \ on line 30\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($sorted), SORT_DESC, $sorted);\n \
    \   return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpec4e327s.php:19\n\
    Stack trace:\n#0 /tmp/tmpec4e327s.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpec4e327s.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\n\n$arr = array(\n    2,\n\
    \    4,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    \    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n    1,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdemvfxix.php on line 174

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value / 10;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value > 0) {\n            $result[$key] = $value / 100;\n      \
    \  }\n    }\n    foreach ($result as $key => $value) {\n        if ($value > 0)\
    \ {\n            $result[$key] = $value / 1000;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value > 0) {\n            $result[$key]\
    \ = $value / 100000;\n        }\n    }\n    foreach ($result as $key => $value)\
    \ {\n        if ($value > 0) {\n            $result[$key] = $value / 1000000;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value / 10000000;\n        }\n    }\n \
    \   foreach ($result as $key => $value) {\n        if ($value > 0) {\n       \
    \     $result[$key] = $value / 1000000000;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value / 10000000000;\n        }\n    }\n    foreach ($result as $key => $value)\
    \ {\n        if ($value > 0) {\n            $result[$key] = $value / 100000000000;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value / 10000000000000;\n        }\n  \
    \  }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n \
    \           $result[$key] = $value / 100000000000000;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value > 0) {\n            $result[$key]\
    \ = $value / 1000000000000000;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value\
    \ / 100000000000000000;\n        }\n    }\n    foreach ($result as $key => $value)\
    \ {\n        if ($value > 0) {\n            $result[$key] = $value / 1000000000000000000;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjjkgfvmf.php on line 88

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n$arr = array(\n    0 => 1,\n\
    \    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n    6 => 7,\n\
    \    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 => 12,\n    12\
    \ => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n    17 =>\
    \ 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n    22 => 23,\n\
    \    23 => 24,\n    24 => 25,\n    25 => 26,\n    26 => 27,\n    27 => 28,\n \
    \   28 => 29,\n    29 => 30,\n    30 => 31,\n    31 => 32,\n    32 => 33,\n  \
    \  33 => 34,\n    34 => 35,\n    35 => 36,\n    36 => 37,\n    37 => 38,\n   \
    \ 38 => 39,\n    39 => 40,\n    40 => 41,\n    41 => 42,\n    42 => 43,\n    43\
    \ => 44,\n    44 => 45,\n    45 => 46,\n    46 => 47,\n    47 => 48,\n    48 =>\
    \ 49,\n    49 => 50,\n    50 => 51,\n    51 => 52,\n    52 => 53,\n    53 => 54,\n\
    \    54 => 55,\n    55 => 56,\n    56 => 57,\n    57 => 58,\n    58 => 59,\n \
    \   59 => 60,\n    60 => 61,\n    61 => 62,\n    62 => 63,\n    63 => 64,\n  \
    \  64 => 65,\n    65 => 66,\n    66 => 67,\n    67 => 68,\n    68 => 69,\n   \
    \ 69 => 70,\n    70 => 71,\n    71 => 72,\n    72 => 73,\n    73 => 74,\n    74\
    \ => 75,\n    75 => 76,\n    76 => 77,\n    77 => 78,\n    78 => 79,\n    79 =>\
    \ 80,\n    80 => 8\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp7wc_scm7.php on line 96

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp64lqzgrh.php on line 102

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl9th3vvw.php on line 112

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($sorted) {\n                $a = bindec($a);\n                $b = bindec($b);\n\
    \                $c = $a - $b;\n                return $c < 0 ? -1 : 1;\n    \
    \        },\n            array_keys($sorted),\n            array_values($sorted)\n\
    \        ),\n        $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk771fr15.php:31\n\
    Stack trace:\n#0 /tmp/tmpk771fr15.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk771fr15.php\
    \ on line 31\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $key + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value == 1) {\n            $result[$key] = $key + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n\
    \            $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $key + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value == 1) {\n            $result[$key] = $key + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n\
    \            $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $key + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value == 1) {\n            $result[$key] = $key + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n\
    \            $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $key + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value == 1) {\n            $result[$key] = $key + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n\
    \            $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $key + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value == 1) {\n            $result[$key] = $key + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n\
    \            $result[$key] = $key + 1;\n        }\n    }\n    foreach ($result\
    \ as $\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbtvz9zye.php on line 92

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = array_count_values($arr);\n    foreach ($count as $num => $count)\
    \ {\n        if ($count > 1) {\n            $sorted[$num] = $count;\n        }\
    \ else {\n            $sorted[$num] = $arr[$num];\n        }\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0xl05t6.php:24\n\
    Stack trace:\n#0 /tmp/tmpp0xl05t6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp0xl05t6.php\
    \ on line 24\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpoe1n4_kw.php on line 113

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\n$arr = array(\n\
    \    0 => 1,\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpidqdnt0h.php on line 101

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    $zeros = array();\n    foreach ($arr as $num) {\n \
    \       if ($num > 0) {\n            $ones[] = $num;\n        } else {\n     \
    \       $zeros[] = $num;\n        }\n    }\n    sort($ones);\n    sort($zeros);\n\
    \    foreach ($ones as $key => $val) {\n        $result[] = $val;\n    }\n   \
    \ foreach ($zeros as $key => $val) {\n        $result[] = $val;\n    }\n    return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbz1r5u10.php:32\n\
    Stack trace:\n#0 /tmp/tmpbz1r5u10.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbz1r5u10.php\
    \ on line 32\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort(array_count_values($sorted), SORT_DESC, $sorted);\n    return\
    \ $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhyfmnp_.php:19\n\
    Stack trace:\n#0 /tmp/tmphhyfmnp_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphhyfmnp_.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(1, 10, 2, 8, 3, 9, 4, 7, 5, 6, 7);\n$arr = sort_array($arr);\nprint_r($arr);\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 10\n    [1] => 9\n    [2] => 8\n    [3] => 7\n   \
    \ [4] => 7\n    [5] => 6\n    [6] => 5\n    [7] => 4\n    [8] => 3\n    [9] =>\
    \ 2\n    [10] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0flqjrd.php:23\n\
    Stack trace:\n#0 /tmp/tmpk0flqjrd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk0flqjrd.php\
    \ on line 23\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkc47d7p.php:20\n\
    Stack trace:\n#0 /tmp/tmpnkc47d7p.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpnkc47d7p.php\
    \ on line 20\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6\
    \ => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n \
    \   12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 =>\
    \ 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n \
    \   23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 =>\
    \ 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n \
    \   34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 =>\
    \ 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n \
    \   45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 =>\
    \ 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n \
    \   56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 =>\
    \ 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n \
    \   67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 =>\
    \ 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n \
    \   78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 =>\
    \ 1,\n    84 => 1,\n    85 => 1,\n    86 \nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpshx6wmtb.php on line 102

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ltwdxw.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp93g8p2b.php:19\n\
    Stack trace:\n#0 /tmp/tmpp93g8p2b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp93g8p2b.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusx9om1v.php:19\n\
    Stack trace:\n#0 /tmp/tmpusx9om1v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpusx9om1v.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($result),\n        SORT_NUMERIC,\n\
    \        $result\n    );\n    return $result;\n}\n$arr = [\n    1 => 1,\n    2\
    \ => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n   \
    \ 8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n\
    \    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19\
    \ => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n\
    \    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30\
    \ => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n\
    \    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41\
    \ => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n\
    \    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52\
    \ => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n\
    \    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63\
    \ => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n\
    \    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74\
    \ => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n\
    \    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps94ebg5j.php on line 103

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nz242qz.php:19\n\
    Stack trace:\n#0 /tmp/tmp8nz242qz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp8nz242qz.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87gr33sk.php:17\n\
    Stack trace:\n#0 /tmp/tmp87gr33sk.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp87gr33sk.php\
    \ on line 17\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2_cjeesg.php on line 102

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    foreach ($arr as $num) {\n        $ones[$num] = 1;\n\
    \    }\n    foreach ($ones as $num => $one) {\n        $result[] = $num;\n   \
    \ }\n    foreach ($ones as $num => $one) {\n        $result[] = $num;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqo857dln.php:25\n\
    Stack trace:\n#0 /tmp/tmpqo857dln.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqo857dln.php\
    \ on line 25\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h1wed_2.php:20\n\
    Stack trace:\n#0 /tmp/tmp6h1wed_2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6h1wed_2.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value\
    \ ? 1 : 0;\n    }\n    array_multisort($result, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx75qkbsd.php:22\n\
    Stack trace:\n#0 /tmp/tmpx75qkbsd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpx75qkbsd.php\
    \ on line 22\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpujn2_1ig.php on line 112

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 1) {\n            $result[$key] = $value;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 1) {\n            $result[$key]\
    \ = $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n   \
    \     if ($value == 1) {\n            $result[$key] = $value;\n        }\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value == 1) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpl9th3vvw.php on line 112

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcioyfpx.php:19\n\
    Stack trace:\n#0 /tmp/tmpjcioyfpx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjcioyfpx.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return str_pad(decbin($a), strlen($a), '0', STR_PAD_LEFT) <\n\
    \                       str_pad(decbin($b), strlen($b), '0', STR_PAD_LEFT);\n\
    \            },\n            array_keys($result),\n            array_values($result)\n\
    \        ),\n        $arr\n    );\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t3tvzwa.php:29\n\
    Stack trace:\n#0 /tmp/tmp8t3tvzwa.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp8t3tvzwa.php\
    \ on line 29\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n$arr = array(1, 3, 8, 4, 2,\
    \ 5, 7);\n$arr = sort_array($arr);\nprint_r($arr);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [4] => 2\n    [1] => 3\n    [3] => 4\n    [5]\
    \ => 5\n    [6] => 7\n    [2] => 8\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmps2hfkkze.php:22\nStack trace:\n#0 /tmp/tmps2hfkkze.php(32):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmps2hfkkze.php on line 22\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ltwdxw.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $item) {\n        $result[$item] = count(decbin($item));\n\
    \    }\n    arsort($result);\n    return array_keys($result);\n}\n$arr = [\n \
    \   5,\n    2,\n    1,\n    4,\n    3,\n    7,\n    6,\n    8,\n    9,\n    10,\n\
    \    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n\
    \    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n\
    \    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n\
    \    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n    45,\n    46,\n\
    \    47,\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n    54,\n    55,\n\
    \    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n    63,\n    64,\n\
    \    65,\n    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n    72,\n    73,\n\
    \    74,\n    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n    81,\n    82,\n\
    \    83,\n    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n    90,\n    91,\n\
    \    92,\n    93,\n    94,\n    95,\n    96,\n    97,\n    98,\n    99,\n    100,\n\
    \    101,\n    102,\n    103,\n    104,\n    105,\n    106,\n    107,\n    108,\n\
    \    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n    115,\n    116,\n\
    \    117,\n    118,\n    119,\n    120,\n    121,\n    122,\n    123,\n    124,\n\
    \    125,\n    126,\n    127,\n    128,\n    129,\n    130,\n    13\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsnyfv1_u.php on line 146

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        while\
    \ ($value > 0) {\n            $binary .= str_pad(decbin($value), 8, '0', STR_PAD_LEFT);\n\
    \            $value -= 1;\n        }\n        $binary = str_pad($binary, strlen($binary)\
    \ + 8, '0', STR_PAD_RIGHT);\n        $binaryArray = str_split($binary);\n    \
    \    $sorted[$key] = $binaryArray[count($binaryArray) - 1];\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3g3adzb.php:26\n\
    Stack trace:\n#0 /tmp/tmpk3g3adzb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk3g3adzb.php\
    \ on line 26\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcioyfpx.php:19\n\
    Stack trace:\n#0 /tmp/tmpjcioyfpx.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpjcioyfpx.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array_count_values($arr);\n    foreach ($ones as $num => $count)\
    \ {\n        $result[$num] = $count;\n    }\n    asort($result);\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecqehxy2.php:20\n\
    Stack trace:\n#0 /tmp/tmpecqehxy2.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpecqehxy2.php\
    \ on line 20\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($result),\n        SORT_NUMERIC,\n\
    \        $result\n    );\n    return $result;\n}\n\n$arr = array(1, 4, 3, 8, 2,\
    \ 5, 7);\n$arr = sort_array($arr);\nprint_r($arr);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n    [5] => 7\n    [6] => 8\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmt403vid.php:27\nStack trace:\n#0 /tmp/tmpmt403vid.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmt403vid.php on line 27\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort(\n        array_map(\n            function ($a, $b) {\n \
    \               return strlen(bin2hex($a)) <=> strlen(bin2hex($b));\n        \
    \    },\n            $arr,\n            $sorted\n        ),\n        SORT_DESC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzadt1rg.php:29\n\
    Stack trace:\n#0 /tmp/tmpuzadt1rg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuzadt1rg.php\
    \ on line 29\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value > 0) {\n            $result[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n\
    \            $result[$key] = $value - 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value > 0) {\n            $result[$key] = $value - 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n\
    \            $result[$key] = $value + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value > 0) {\n            $result[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n\
    \            $result[$key] = $value - 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value + 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value > 0) {\n            $result[$key] = $value - 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n\
    \            $result[$key] = $value + 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value - 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n \
    \       if ($value > 0) {\n            $result[$key] = $value + 1;\n        }\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n\
    \            $result[$key] = $value - 1;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiahy_qjt.php on line 108

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($value) {\n\
    \                return str_pad(decbin($value), 8, '0', STR_PAD_LEFT);\n     \
    \       },\n            array_count_values($result)\n        ),\n        SORT_ASC,\n\
    \        $result\n    );\n    return array_values($result);\n}\n$arr = [1, 3,\
    \ 6, 4, 2, 5, 7, 8, 9];\n$arr = sort_array($arr);\nprint_r($arr);\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution works fine for\
    \ small arrays, but for large arrays it takes too much time. My array is about\
    \ 5000 elements and it takes about 10 seconds to sort it.\n<|/ c |>\n<| c |>\n\
    I tested it on 5000 elements and it took about 0.2 seconds. I used PHP 7.3.\n\
    <|/ c |>\n<| c |>\nI tested it on 5000 elements and it took about 0.2 seconds.\
    \ I used PHP 7.3.\n<|/ c |>\n<| c |>\nI tested it on 5000 elements and it took\
    \ about 0.2 seconds. I used PHP 7.3.\n<|/ c |>\n<| c |>\nI tested it on 5000 elements\
    \ and it took about 0.2 seconds. I used PHP 7.3.\n<|/ c |>\n<| a dscore=0 |>\n\
    I used the solution from and modified it a little bit. Here is the code:\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpapuk7qvo.php on line 26

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    sort($arr);\n  \
    \  return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ayy5gni.php:15\n\
    Stack trace:\n#0 /tmp/tmp6ayy5gni.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6ayy5gni.php\
    \ on line 15\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = $value\
    \ + 1;\n    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key]\
    \ = $value / 10;\n    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key]\
    \ = $value * 100;\n    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key]\
    \ = $value / 1000;\n    }\n    foreach ($sorted as $key => $value) {\n       \
    \ $sorted[$key] = $value * 1000;\n    }\n    foreach ($sorted as $key => $value)\
    \ {\n        $sorted[$key] = $value / 1000000;\n    }\n    foreach ($sorted as\
    \ $key => $value) {\n        $sorted[$key] = $value * 1000000;\n    }\n    foreach\
    \ ($sorted as $key => $value) {\n        $sorted[$key] = $value / 1000000000;\n\
    \    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = $value\
    \ * 1000000000;\n    }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key]\
    \ = $value / 1000000000000;\n    }\n    foreach ($sorted as $key => $value) {\n\
    \        $sorted[$key] = $value * 1000000000000;\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        $sorted[$key] = $value / 1000000000000000;\n \
    \   }\n    foreach ($sorted as $key => $value) {\n        $sorted[$key] = $value\
    \ * 1000000000000000;\n    }\n    foreach ($sorted as $key => $value) {\n    \
    \    $sorted[$key] = $value / 1000000000000000000;\n    }\n    foreach ($sorted\
    \ as $key => $value) {\n        $sorted[$key] = $value * 1000000000000000000;\n\
    \    }\n    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ewlsa27.php:63\n\
    Stack trace:\n#0 /tmp/tmp1ewlsa27.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp1ewlsa27.php\
    \ on line 63\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgooodopo.php:19\n\
    Stack trace:\n#0 /tmp/tmpgooodopo.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpgooodopo.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    sort($arr);\n  \
    \  return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ayy5gni.php:15\n\
    Stack trace:\n#0 /tmp/tmp6ayy5gni.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6ayy5gni.php\
    \ on line 15\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusx9om1v.php:19\n\
    Stack trace:\n#0 /tmp/tmpusx9om1v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpusx9om1v.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v62cjay.php:16\n\
    Stack trace:\n#0 /tmp/tmp3v62cjay.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3v62cjay.php\
    \ on line 16\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $binary\
    \ = '';\n        for ($j = 0; $j < 8; $j++) {\n            $binary .= ($arr[$i]\
    \ & 1) ? '1' : '0';\n            $arr[$i] >>= 1;\n        }\n        $sorted[$i]\
    \ = $binary;\n    }\n    asort($sorted);\n    $sorted = array_values($sorted);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppz_f8f1d.php:26\n\
    Stack trace:\n#0 /tmp/tmppz_f8f1d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppz_f8f1d.php\
    \ on line 26\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($arr),\n        SORT_NUMERIC,\n\
    \        $sorted\n    );\n    return $sorted;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1maskmxi.php:23\n\
    Stack trace:\n#0 /tmp/tmp1maskmxi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1maskmxi.php\
    \ on line 23\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value == 1) {\n \
    \           $result[$key] = $value * 2;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 2) {\n            $result[$key]\
    \ = $value * 3;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value == 3) {\n            $result[$key] = $value * 4;\n       \
    \ }\n    }\n    foreach ($result as $key => $value) {\n        if ($value == 4)\
    \ {\n            $result[$key] = $value * 5;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 5) {\n            $result[$key]\
    \ = $value * 6;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value == 6) {\n            $result[$key] = $value * 7;\n       \
    \ }\n    }\n    foreach ($result as $key => $value) {\n        if ($value == 7)\
    \ {\n            $result[$key] = $value * 8;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 8) {\n            $result[$key]\
    \ = $value * 9;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value == 9) {\n            $result[$key] = $value * 10;\n      \
    \  }\n    }\n    foreach ($result as $key => $value) {\n        if ($value ==\
    \ 10) {\n            $result[$key] = $value * 11;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 11) {\n            $result[$key]\
    \ = $value * 12;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value == 12) {\n            $result[$key] = $value * 13;\n     \
    \   }\n    }\n    foreach ($result as $key => $value) {\n        if ($value ==\
    \ 13) {\n            $result[$key] = $value * 14;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\n        if ($value == 14) {\n            $result[$key]\
    \ = $value * 15;\n        }\n    }\n    foreach ($result as $key => $value) {\n\
    \        if ($value == 15) {\n            $result[$key] = $value * 16;\n     \
    \   }\n    }\n    foreach ($result as $key => $value) {\n        if ($value ==\
    \ 16) {\n            $result[$key] = $value * 17;\n        }\n    }\n    foreach\
    \ ($result as $key => $value) {\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpv13c2a9r.php on line 107

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpujn2_1ig.php on line 112

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($sorted) {\n                $a = count_ones($a);\n                $b = count_ones($b);\n\
    \                if ($a == $b) {\n                    return $a - $b;\n      \
    \          }\n                return ($a < $b) ? -1 : 1;\n            },\n   \
    \         $sorted,\n            $sorted\n        ),\n        SORT_DESC,\n    \
    \    $sorted\n    );\n    return $sorted;\n}\n\n$arr = array(\n    array(\n  \
    \      'a' => 1,\n        'b' => 1,\n        'c' => 1,\n        'd' => 1,\n  \
    \      'e' => 1,\n        'f' => 1,\n        'g' => 1,\n        'h' => 1,\n  \
    \      'i' => 1,\n        'j' => 1,\n        'k' => 1,\n        'l' => 1,\n  \
    \      'm' => 1,\n        'n' => 1,\n        'o' => 1,\n        'p' => 1,\n  \
    \      'q' => 1,\n        'r' => 1,\n        's' => 1,\n        't' => 1,\n  \
    \      'u' => 1,\n        'v' => 1,\n        'w' => 1,\n        'x' => 1,\n  \
    \      'y' => 1,\n        'z' => 1,\n    ),\n    array(\n        'a' => 1,\n \
    \       'b' => 1,\n        'c' => 1,\n        'd' => 1,\n        'e' => 1,\n \
    \       'f' => 1,\n        'g' => 1,\n        'h' => 1,\n        'i' => 1,\n \
    \       'j' => 1,\n        'k' => 1,\n        'l' => 1,\n        'm' => 1,\n \
    \       'n' => 1,\n        'o' => 1,\n        'p' => 1,\n        'q' => 1,\n \
    \       'r' => 1,\n        's' => 1,\n        't' => 1,\n        'u' => 1,\n \
    \       'v' => 1,\n        'w' => 1,\n        'x' => 1,\n        'y' => 1,\n \
    \       'z' => 1,\n    ),\n    array(\n        'a' => 1,\n        'b' => 1,\n\
    \        'c' => 1,\n        'd' => 1,\n        'e' => 1,\n        'f' => 1,\n\
    \        'g' => 1,\n        'h' => 1,\n        'i' => 1,\n        'j' => 1,\n\
    \        'k' => 1,\n        'l' => 1,\n        'm' => 1,\n        'n' => 1,\n\
    \        'o' => 1,\n        'p' => 1,\n        'q' => 1,\n        'r' => 1,\n\
    \        's' => 1,\n        't' => 1,\n        'u' => 1,\n        'v' => 1,\n\
    \        'w' => 1,\n        'x' => 1,\n        'y' => \nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf24y5n4q.php on line 113

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0mylazm.php:19\n\
    Stack trace:\n#0 /tmp/tmps0mylazm.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps0mylazm.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    foreach ($arr as $key => $value) {\n        $binary\
    \ = '';\n        for ($i = 0; $i < $count; $i++) {\n            $binary .= str_pad(decbin($arr[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = str_pad($binary, 8, '0',\
    \ STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary = str_pad($binary,\
    \ 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n\
    \        $binary = substr($binary, -8);\n        $binary = str_pad($binary, 8,\
    \ '0', STR_PAD_LEFT);\n        $binary = substr($binary, -8);\n        $binary\
    \ = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary = substr($binary,\
    \ -8);\n        $binary = str_pad($binary, 8, '0', STR_PAD_LEFT);\n        $binary\
    \ = substr($binary, -8\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpywy71f_3.php on line 46

    '
  timestamp: 1659730696
- exit_code: -1
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        $count = 1;\n        $tmp\
    \ = 0;\n        while ($count > 0) {\n            $tmp = $value % 10;\n      \
    \      $count = $count * 10;\n            $value = $value / 10;\n            if\
    \ ($tmp == 1) {\n                $sorted[$key] = $value;\n            }\n    \
    \    }\n    }\n    return $sorted;\n}\n\n$arr = array(\n    2,\n    1,\n    3,\n\
    \    5,\n    4,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n \
    \   13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n    21,\n\
    \    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n    30,\n\
    \    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n    39,\n\
    \    40\n);\n\n$sorted = sort_array($arr);\nprint_r($sorted);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730701
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return strlen($a) - strlen($b);\n            },\n           \
    \ array_keys($result),\n            array_values($result)\n        ),\n      \
    \  $result\n    );\n    return array_values($result);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThank you for answering my question. Your answer was very helpful\
    \ and I learned a lot from it. I will try to implement your solution and see if\
    \ it works.\n<|/ c |>\n<| c |>\nI implemented your solution and it works perfectly.\
    \ Thank you so much!\n<|/ c |>\n<| a dscore=0 |>\nI believe this should work:\n\
    <code>\n$arr = [\n    0 => 1,\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 =>\
    \ 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10\
    \ => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n\
    \    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21\
    \ => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n\
    \    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32\
    \ => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n\
    \    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43\
    \ => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n\
    \    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54\
    \ => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n\
    \    60 => 1,\n    61 => 1,\n    62 => 1,\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpma3ifdyn.php on line 23

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value == 1) {\n \
    \           $sorted[$key] = $value;\n        }\n    }\n    foreach ($sorted as\
    \ $key => $value) {\n        if ($value == 1) {\n            $sorted[$key] = $value;\n\
    \        }\n    }\n    foreach ($sorted as $key => $value) {\n        if ($value\
    \ == 1) {\n            $sorted[$key] = $value;\n        }\n    }\n    foreach\
    \ ($sorted as $key => $value) {\n        if ($value == 1) {\n            $sorted[$key]\
    \ = $value;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n   \
    \     if ($value == 1) {\n            $sorted[$key] = $value;\n        }\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value == 1) {\n \
    \           $sorted[$key] = $value;\n        }\n    }\n    foreach ($sorted as\
    \ $key => $value) {\n        if ($value == 1) {\n            $sorted[$key] = $value;\n\
    \        }\n    }\n    foreach ($sorted as $key => $value) {\n        if ($value\
    \ == 1) {\n            $sorted[$key] = $value;\n        }\n    }\n    foreach\
    \ ($sorted as $key => $value) {\n        if ($value == 1) {\n            $sorted[$key]\
    \ = $value;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n   \
    \     if ($value == 1) {\n            $sorted[$key] = $value;\n        }\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value == 1) {\n \
    \           $sorted[$key] = $value;\n        }\n    }\n    foreach ($sorted as\
    \ $key => $value) {\n        if ($value == 1) {\n            $sorted[$key] = $value;\n\
    \        }\n    }\n    foreach ($sorted as $key => $value) {\n        if ($value\
    \ == 1) {\n            $sorted[$key] = $value;\n        }\n    }\n    foreach\
    \ ($sorted as $key => $value) {\n        if ($value == 1) {\n            $sorted[$key]\
    \ = $value;\n        }\n    }\n    foreach ($sorted as $key => $value) {\n   \
    \     if ($value == 1) {\n            $sorted[$key] = $value;\n        }\n   \
    \ }\n    foreach ($sorted as $key => $value) {\n        if ($value == 1) {\n \
    \           $sorted[$key] = $value;\n        }\n    }\n    foreach ($sorted as\
    \ $key => $value) {\n        if ($value == 1) {\n            $sorted[$key] = $value;\n\
    \        }\n    }\n    foreach ($sorted as $key => $\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsw49z2tv.php on line 97

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($result), SORT_DESC, $result);\n \
    \   return $result;\n}\n$arr = array(\n    0 => 1,\n    1 => 1,\n    2 => 1,\n\
    \    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n\
    \    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 =>\
    \ 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n \
    \   20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 =>\
    \ 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n \
    \   31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 =>\
    \ 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n \
    \   42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 =>\
    \ 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n \
    \   53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 =>\
    \ 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n \
    \   64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 =>\
    \ 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n \
    \   75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 =>\
    \ 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n    \nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm583pi8z.php on line 101

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $val) {\n        $sorted[$key] = $val;\n    }\n\
    \    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusx9om1v.php:19\n\
    Stack trace:\n#0 /tmp/tmpusx9om1v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpusx9om1v.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    $zeros = array();\n    foreach ($arr as $val) {\n \
    \       if ($val == 1) {\n            $ones[] = $val;\n        } else {\n    \
    \        $zeros[] = $val;\n        }\n    }\n    if (count($ones) > 0) {\n   \
    \     sort($ones);\n        $result = array_merge($result, $ones);\n    }\n  \
    \  if (count($zeros) > 0) {\n        sort($zeros);\n        $result = array_merge($result,\
    \ $zeros);\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgsk_7t43.php:32\n\
    Stack trace:\n#0 /tmp/tmpgsk_7t43.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgsk_7t43.php\
    \ on line 32\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value\
    \ / 2;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 2;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value + 1;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 10;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 10;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value + 1;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 100;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value * 100;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value + 1;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 1000;\n    }\n    foreach ($result as $key => $value) {\n       \
    \ $result[$key] = $value * 1000;\n    }\n    foreach ($result as $key => $value)\
    \ {\n        $result[$key] = $value + 1;\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = $value / 100000;\n    }\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $value * 100000;\n    }\n    foreach\
    \ ($result as $key => $value) {\n        $result[$key] = $value + 1;\n    }\n\
    \    foreach ($result as $key => $value) {\n        $result[$key] = $value / 1000000;\n\
    \    }\n    foreach ($result as $key => $value) {\n        $result[$key] = $value\
    \ * 1000000;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value + 1;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / 10000000;\n    }\n    foreach ($result as $key => $value) {\n   \
    \     $result[$key] = $value * 10000000;\n    }\n    foreach ($result as $key\
    \ => $value) {\n        $result[$key] = $value + 1;\n    }\n    foreach (\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsal04oc6.php on line 75

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptsdao9nk.php on line 102

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $ones = bindec(decbin($a));\n                $ones\
    \ = $ones - bindec(decbin($b));\n                return $ones;\n            },\n\
    \            $result,\n            $result\n        ),\n        SORT_DESC,\n \
    \       $result\n    );\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp59xinum5.php on line 104

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n    asort($result);\n\
    \    return array_values($result);\n}\n$arr = [1, 2, 4, 8, 16];\n$result = sort_array($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 8\n    [4]\
    \ => 16\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3iesb_x.php:22\n\
    Stack trace:\n#0 /tmp/tmpm3iesb_x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm3iesb_x.php\
    \ on line 22\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = [];\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a) use ($sorted)\
    \ {\n                return $sorted[$a];\n            },\n            array_count_values($sorted)\n\
    \        ),\n        SORT_ASC,\n        $sorted\n    );\n    return $sorted;\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsb9bnetg.php:28\n\
    Stack trace:\n#0 /tmp/tmpsb9bnetg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsb9bnetg.php\
    \ on line 28\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8kaqyjg3.php on line 101

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    foreach ($arr as $key => $value) {\n        $bin\
    \ = decbin($value);\n        $bin = substr($bin, 0, $count-$key);\n        $bin\
    \ = str_pad($bin, $count-$key, '0', STR_PAD_LEFT);\n        $sorted[$key] = $bin;\n\
    \    }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    1,\n\
    \    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n   \
    \ 11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n\
    \    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n\
    \    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n\
    \    38,\n    39,\n    40\n);\n$sorted = sort_array($arr);\nprint_r($sorted);\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 0000000000000000000000000000000000000001\n    [39]\
    \ => 1\n    [1] => 000000000000000000000000000000000000010\n    [38] => 10\n \
    \   [2] => 00000000000000000000000000000000000011\n    [37] => 100\n    [3] =>\
    \ 0000000000000000000000000000000000100\n    [4] => 000000000000000000000000000000000101\n\
    \    [5] => 00000000000000000000000000000000110\n    [6] => 0000000000000000000000000000000111\n\
    \    [7] => 000000000000000000000000000001000\n    [36] => 1001\n    [8] => 00000000000000000000000000001001\n\
    \    [9] => 0000000000000000000000000001010\n    [10] => 000000000000000000000000001011\n\
    \    [11] => 00000000000000000000000001100\n    [12] => 0000000000000000000000001101\n\
    \    [13] => 000000000000000000000001110\n    [14] => 00000000000000000000001111\n\
    \    [15] => 0000000000000000000010000\n    [16] => 000000000000000000010001\n\
    \    [35] => 10010\n    [17] => 00000000000000000010010\n    [18] => 0000000000000000010011\n\
    \    [19] => 000000000000000010100\n    [20] => 00000000000000010101\n    [21]\
    \ => 0000000000000010110\n    [22] => 000000000000010111\n    [23] => 00000000000011000\n\
    \    [24] => 0000000000011001\n    [25] => 000000000011010\n    [26] => 00000000011011\n\
    \    [27] => 0000000011100\n    [28] => 000000011101\n    [29] => 00000011110\n\
    \    [30] => 0000011111\n    [31] => 000100000\n    [32] => 00100001\n    [33]\
    \ => 0100010\n    [34] => 100011\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpbui3imqx.php:68\nStack trace:\n#0 /tmp/tmpbui3imqx.php(78): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbui3imqx.php on line 68\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($result),\n        SORT_ASC,\n\
    \        $result\n    );\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj929fbz.php:23\n\
    Stack trace:\n#0 /tmp/tmplj929fbz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplj929fbz.php\
    \ on line 23\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp1gb2pq07.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ltwdxw.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($arr), SORT_DESC, $sorted);\n    return\
    \ $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwcsqq9v.php:19\n\
    Stack trace:\n#0 /tmp/tmpqwcsqq9v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqwcsqq9v.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\n\n$arr = array(\n    1 => 1,\n\
    \    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 =>\
    \ 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n \
    \   63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 =>\
    \ 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n \
    \   74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n    79 =>\
    \ 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83 => 1,\n    84 => 1,\n \
    \   85 => 1,\n    86 => 1,\n    87 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpf2ltwdxw.php on line 103

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort($sorted, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpobomzs15.php on line 102

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($result) {\n                $ones = bindec($a) & 1;\n                $twos\
    \ = bindec($b) & 1;\n                if ($ones == $twos) {\n                 \
    \   return strcmp($a, $b);\n                }\n                return $ones -\
    \ $twos;\n            },\n            $result\n        ),\n        SORT_ASC,\n\
    \        $result\n    );\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: Too few arguments to function\
    \ {closure}(), 1 passed and exactly 2 expected in /tmp/tmpkwkmfmfi.php:13\nStack\
    \ trace:\n#0 [internal function]: {closure}(1)\n#1 /tmp/tmpkwkmfmfi.php(21): array_map(Object(Closure),\
    \ Array)\n#2 /tmp/tmpkwkmfmfi.php(29): sort_array(Array)\n#3 /tmp/tmpkwkmfmfi.php(33):\
    \ candidate(Array)\n#4 /tmp/tmpkwkmfmfi.php(43): test()\n#5 {main}\n  thrown in\
    \ /tmp/tmpkwkmfmfi.php on line 13\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count; $i++) {\n        $binary\
    \ = '';\n        for ($j = 0; $j < 8; $j++) {\n            $binary .= ($arr[$i]\
    \ & 1) ? '1' : '0';\n            $arr[$i] >>= 1;\n        }\n        $sorted[$i]\
    \ = $binary;\n    }\n    asort($sorted);\n    return $sorted;\n}\n\n$arr = array(\n\
    \    3,\n    1,\n    2,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n\
    \    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n\
    \    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n\
    \    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n\
    \    38,\n    39,\n    40\n);\n$sorted = sort_array($arr);\nprint_r($sorted);\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [31] => 00000100\n    [15] => 00001000\n    [7] => 00010000\n\
    \    [39] => 00010100\n    [23] => 00011000\n    [3] => 00100000\n    [35] =>\
    \ 00100100\n    [19] => 00101000\n    [11] => 00110000\n    [27] => 00111000\n\
    \    [2] => 01000000\n    [33] => 01000100\n    [17] => 01001000\n    [9] => 01010000\n\
    \    [25] => 01011000\n    [5] => 01100000\n    [37] => 01100100\n    [21] =>\
    \ 01101000\n    [13] => 01110000\n    [29] => 01111000\n    [1] => 10000000\n\
    \    [32] => 10000100\n    [16] => 10001000\n    [8] => 10010000\n    [24] =>\
    \ 10011000\n    [4] => 10100000\n    [36] => 10100100\n    [20] => 10101000\n\
    \    [12] => 10110000\n    [28] => 10111000\n    [0] => 11000000\n    [34] =>\
    \ 11000100\n    [18] => 11001000\n    [10] => 11010000\n    [26] => 11011000\n\
    \    [6] => 11100000\n    [38] => 11100100\n    [22] => 11101000\n    [14] =>\
    \ 11110000\n    [30] => 11111000\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjcfih6ks.php:70\nStack trace:\n#0 /tmp/tmpjcfih6ks.php(80): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjcfih6ks.php on line 70\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    foreach ($result as $key => $value) {\n        if ($value > 0) {\n  \
    \          $result[$key] = $value;\n        }\n    }\n    foreach ($result as\
    \ $key => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ > 0) {\n            $result[$key] = $value;\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value > 0) {\n            $result[$key] =\
    \ $value;\n        }\n    }\n    foreach ($result as $key => $value) {\n     \
    \   if ($value > 0) {\n            $result[$key] = $value;\n        }\n    }\n\
    \    foreach ($result as $key => $value) {\n        if ($value > 0) {\n      \
    \      $result[$key] = $value;\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value > 0) {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($result as $key => $value) {\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmwj4wyzw.php on line 113

    '
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    sort($arr, function($a,\
    \ $b) {\n        $ones = bindec($a . '1');\n        $ones = $ones < bindec($b\
    \ . '1') ? -1 : 1;\n        return $ones;\n    });\n    return $arr;\n}\n$arr\
    \ = array(\n    5,\n    2,\n    1,\n    4,\n    3,\n    7,\n    6,\n    8,\n \
    \   9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n\
    \    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n\
    \    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n\
    \    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n    44,\n\
    \    45,\n    46,\n    47,\n    48,\n    49,\n    50,\n    51,\n    52,\n    53,\n\
    \    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n\
    \    63,\n    64,\n    65,\n    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n\
    \    72,\n    73,\n    74,\n    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n\
    \    81,\n    82,\n    83,\n    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n\
    \    90,\n    91,\n    92,\n    93,\n    94,\n    95,\n    96,\n    97,\n    98,\n\
    \    99,\n    100,\n    101,\n    102,\n    103,\n    104,\n    105,\n    106,\n\
    \    107,\n    108,\n    109,\n    110,\n    111,\n    112,\n    113,\n    114,\n\
    \    115,\n    116,\n    117,\n    118,\n    119,\n    120,\n    121,\n    122,\n\
    \    123,\n    124,\n    125,\n    126,\n    127,\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmqy_xf4e.php on line 143

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    $zeros = array();\n    foreach ($arr as $value) {\n\
    \        if ($value == 0) {\n            $zeros[] = $value;\n        } else {\n\
    \            $ones[] = $value;\n        }\n    }\n    sort($ones);\n    sort($zeros);\n\
    \    foreach ($ones as $key => $value) {\n        $result[] = $value;\n    }\n\
    \    foreach ($zeros as $key => $value) {\n        $result[] = $value;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnw2122_e.php:32\n\
    Stack trace:\n#0 /tmp/tmpnw2122_e.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnw2122_e.php\
    \ on line 32\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) use\
    \ ($sorted) {\n                $a = bindec($a);\n                $b = bindec($b);\n\
    \                $c = $a - $b;\n                return $c === 0 ? $a : $c;\n \
    \           },\n            array_keys($sorted),\n            array_values($sorted)\n\
    \        ),\n        $sorted\n    );\n    return array_values($sorted);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpjiryx7.php:31\n\
    Stack trace:\n#0 /tmp/tmpjpjiryx7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjpjiryx7.php\
    \ on line 31\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($arr), SORT_DESC, $sorted);\n    return\
    \ $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqwcsqq9v.php:19\n\
    Stack trace:\n#0 /tmp/tmpqwcsqq9v.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqwcsqq9v.php\
    \ on line 19\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    $ones = array();\n    foreach ($arr as $key => $val) {\n        $ones[$key]\
    \ = $val % 2;\n    }\n    foreach ($ones as $key => $val) {\n        $result[$key]\
    \ = $ones[$key];\n    }\n    foreach ($ones as $key => $val) {\n        if ($val\
    \ == 1) {\n            $result[$key] = $ones[$key];\n        }\n    }\n    foreach\
    \ ($ones as $key => $val) {\n        if ($val == 0) {\n            $result[$key]\
    \ = $ones[$key];\n        }\n    }\n    foreach ($ones as $key => $val) {\n  \
    \      if ($val == 1) {\n            $result[$key] = $ones[$key];\n        }\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val == 0) {\n    \
    \        $result[$key] = $ones[$key];\n        }\n    }\n    foreach ($ones as\
    \ $key => $val) {\n        if ($val == 1) {\n            $result[$key] = $ones[$key];\n\
    \        }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val ==\
    \ 0) {\n            $result[$key] = $ones[$key];\n        }\n    }\n    foreach\
    \ ($ones as $key => $val) {\n        if ($val == 1) {\n            $result[$key]\
    \ = $ones[$key];\n        }\n    }\n    foreach ($ones as $key => $val) {\n  \
    \      if ($val == 0) {\n            $result[$key] = $ones[$key];\n        }\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val == 1) {\n    \
    \        $result[$key] = $ones[$key];\n        }\n    }\n    foreach ($ones as\
    \ $key => $val) {\n        if ($val == 0) {\n            $result[$key] = $ones[$key];\n\
    \        }\n    }\n    foreach ($ones as $key => $val) {\n        if ($val ==\
    \ 1) {\n            $result[$key] = $ones[$key];\n        }\n    }\n    foreach\
    \ ($ones as $key => $val) {\n        if ($val == 0) {\n            $result[$key]\
    \ = $ones[$key];\n        }\n    }\n    foreach ($ones as $key => $val) {\n  \
    \      if ($val == 1) {\n            $result[$key] = $ones[$key];\n        }\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val == 0) {\n    \
    \        $result[$key] = $ones[$key];\n        }\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkl3p1xdl.php on line 99

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\n$arr\
    \ = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n\
    \    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72\
    \ => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n\
    \    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82 => 1,\n    83\
    \ => 1,\n    84 => 1,\n    85 => 1,\n    86\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptsdao9nk.php on line 102

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_count_values($sorted)\n    );\n    return\
    \ $sorted;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxl6zatc.php:21\n\
    Stack trace:\n#0 /tmp/tmpwxl6zatc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwxl6zatc.php\
    \ on line 21\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $binary = '';\n        for ($i\
    \ = 0; $i < strlen($value); $i++) {\n            $binary .= str_pad(decbin($value[$i]),\
    \ 8, '0', STR_PAD_LEFT);\n        }\n        $binary = '1'.$binary;\n        $binaryLen\
    \ = strlen($binary);\n        $binaryArray = str_split($binary);\n        $binarySum\
    \ = 0;\n        foreach ($binaryArray as $binaryItem) {\n            $binarySum\
    \ += $binaryItem;\n        }\n        $sorted[$key] = $binarySum;\n    }\n   \
    \ asort($sorted);\n    return $sorted;\n}\n$arr = array(\n    0 => 1,\n    1 =>\
    \ 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 =>\
    \ 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n   \
    \ 13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 =>\
    \ 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n \
    \   24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 =>\
    \ 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n \
    \   35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 =>\
    \ 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n \
    \   46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 =>\
    \ 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n \
    \   57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 =>\
    \ 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n \
    \   68 => 1,\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptj49gjy9.php on line 95

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    array_multisort(array_count_values($arr), SORT_DESC, $sorted);\n    return\
    \ $sorted;\n}\n$arr = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 =>\
    \ 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10\
    \ => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n\
    \    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21\
    \ => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n\
    \    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32\
    \ => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n\
    \    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43\
    \ => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n\
    \    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54\
    \ => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n\
    \    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65\
    \ => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n\
    \    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76\
    \ => 1,\n    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n\
    \    82 => 1,\n    83 => 1,\n    84 => 1,\n    85 \nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiyrzifo8.php on line 100

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    foreach ($arr as $key => $value) {\n        $sorted[$key] = $value;\n   \
    \ }\n    asort($sorted);\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeq5dvto.php:20\n\
    Stack trace:\n#0 /tmp/tmpgeq5dvto.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgeq5dvto.php\
    \ on line 20\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $sorted = array();\n\
    \    $count = count($arr);\n    foreach ($arr as $key => $val) {\n        $sorted[$key]\
    \ = $val;\n    }\n    foreach ($arr as $key => $val) {\n        $count--;\n  \
    \      $ones = $count & 1;\n        $tens = $count >> 1;\n        $tens_val =\
    \ 10 * $tens;\n        $tens_val += $ones;\n        $tens_val = floor($tens_val);\n\
    \        $tens_val += $tens;\n        $tens_val = 10 * $tens_val;\n        $tens_val\
    \ += $ones;\n        $tens_val = floor($tens_val);\n        $tens_val += $tens;\n\
    \        $tens_val = 10 * $tens_val;\n        $tens_val += $ones;\n        $tens_val\
    \ = floor($tens_val);\n        $tens_val += $tens;\n        $tens_val = 10 * $tens_val;\n\
    \        $tens_val += $ones;\n        $tens_val = floor($tens_val);\n        $tens_val\
    \ += $tens;\n        $tens_val = 10 * $tens_val;\n        $tens_val += $ones;\n\
    \        $tens_val = floor($tens_val);\n        $tens_val += $tens;\n        $tens_val\
    \ = 10 * $tens_val;\n        $tens_val += $ones;\n        $tens_val = floor($tens_val);\n\
    \        $tens_val += $tens;\n        $tens_val = 10 * $tens_val;\n        $tens_val\
    \ += $ones;\n        $tens_val = floor($tens_val);\n        $tens_val += $tens;\n\
    \        $tens_val = 10 * $tens_val;\n        $tens_val += $ones;\n        $tens_val\
    \ = floor($tens_val);\n        $tens_val += $tens;\n        $tens_val = 10 * $tens_val;\n\
    \        $tens_val += $ones;\n        $tens_val = floor($tens_val);\n        $tens_val\
    \ += $tens;\n        $tens_val = 10 * $tens_val;\n        $tens_val += $ones;\n\
    \        $tens_val = floor($tens_val);\n        $tens_val += $tens;\n        $tens_val\
    \ = 10 * $tens_val;\n        $tens_val += $ones;\n        $tens_val = floor($tens_val);\n\
    \        $tens_val += $tens;\n        $tens_val = 10 * $tens_val;\n        $tens_val\
    \ += $ones;\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj06rlgxx.php on line 77

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort(\n        array_map(\n            function ($a, $b) {\n\
    \                return str_pad(decbin($a), strlen($a), '0', STR_PAD_LEFT) <=>\
    \ str_pad(decbin($b), strlen($b), '0', STR_PAD_LEFT);\n            },\n      \
    \      array_keys($result),\n            array_values($result)\n        ),\n \
    \       SORT_DESC,\n        $result\n    );\n    return $result;\n}\n$arr = array(1,\
    \ 3, 8, 2, 5, 7);\n$arr = sort_array($arr);\nprint_r($arr);\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n    [2] => 3\n    [3] => 5\n    [4]\
    \ => 7\n    [5] => 8\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwzdz4_l4.php:32\n\
    Stack trace:\n#0 /tmp/tmpwzdz4_l4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpwzdz4_l4.php\
    \ on line 32\n"
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = [];\n\
    \    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach\
    \ ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr\
    \ as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n \
    \       $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n      \
    \  $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item]\
    \ = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item] = $item;\n\
    \    }\n    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n\
    \    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach\
    \ ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr\
    \ as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n \
    \       $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n      \
    \  $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item]\
    \ = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item] = $item;\n\
    \    }\n    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n\
    \    foreach ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach\
    \ ($arr as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr\
    \ as $item) {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item)\
    \ {\n        $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n \
    \       $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n      \
    \  $result[$item] = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item]\
    \ = $item;\n    }\n    foreach ($arr as $item) {\n        $result[$item] = $item;\n\
    \    }\n    foreach ($arr as $item) {\n        $result[$item] = $\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6f5l74wm.php on line 88

    '
  timestamp: 1659730696
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_ASC, $arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp93g8p2b.php:19\n\
    Stack trace:\n#0 /tmp/tmpp93g8p2b.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpp93g8p2b.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $ones = array_count_values($arr);\n\
    \    arsort($ones);\n    return array_keys($ones);\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v62cjay.php:16\n\
    Stack trace:\n#0 /tmp/tmp3v62cjay.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3v62cjay.php\
    \ on line 16\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    asort($result);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1czkgexw.php:19\n\
    Stack trace:\n#0 /tmp/tmp1czkgexw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp1czkgexw.php\
    \ on line 19\n"
  timestamp: 1659730695
- exit_code: 255
  program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\nfunction sort_array($arr) {\n    $result = array();\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value;\n   \
    \ }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n$arr\
    \ = array(\n    0 => 1,\n    1 => 1,\n    2 => 0,\n    3 => 1,\n    4 => 1,\n\
    \    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n\
    \    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16\
    \ => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n\
    \    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27\
    \ => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n\
    \    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38\
    \ => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n\
    \    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49\
    \ => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n\
    \    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60\
    \ => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n\
    \    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71\
    \ => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n\
    \    77 => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    82\
    \ => 1,\n    83 => 1,\n    84 => 1,\n    85 \nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxue97o9z.php on line 101

    '
  timestamp: 1659730696
