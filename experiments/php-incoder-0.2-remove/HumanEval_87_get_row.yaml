name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested lists,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the list,\n\
  // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\nfunction get_row($lst, $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_filter($row, function($v) use ($x) {\n            return $v == $x;\n\
    \        });\n    }\n    array_multisort(array_column($result, '0'), SORT_DESC,\
    \ $result);\n    return $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n\
    \    [7, 8, 9],\n];\nprint_r(get_row($lst, 3));", "    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n   \
    \ array_multisort(array_column($result, 1), SORT_DESC, array_column($result, 0),\
    \ SORT_ASC, $result);\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3],\n  \
    \  [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x = 2;\nprint_r(get_row($lst, $x));\n</code>\n\
    Output:\n<code>\nArray\n(\n    [0] => Array\n        (\n            [0] => 7\n\
    \            [1] => 8\n        )\n\n    [1] => Array\n        (\n            [0]\
    \ => 4\n            [1] => 5\n        )\n\n)\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThank you for your answer. Your solution works perfectly for me. However\
    \ I cannot accept two answers so I accepted the one from Felix Kling because he\
    \ was the first to post his solution. Thank you very much for your help and your\
    \ time.\n<|/ c |>\n<| c |>\nNo problem. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts. He was the first to post his solution\
    \ and I gave him an upvote for his efforts.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x =\
    \ 2;\n\n$result = array_map(function($row) use ($x) {\n    return array_slice($row,\
    \ 0, $x);\n}, $lst);\n\nusort($result, function($a, $b) {\n    return array_search($a[0],\
    \ $b[0]) - array_search($a[0], $a[0]);\n});\n\nprint_r($result);\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| c |>\nThank you for your answer", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    arsort($rows);\n    $result = array();\n    foreach ($rows as\
    \ $row => $count) {\n        $result[] = array($row, $x - $row);\n    }\n    return\
    \ $result;\n}\n", "    $row = [];\n    foreach ($lst as $i => $row) {\n      \
    \  if ($row[$x] == $x) {\n            $row[$x] = $i;\n        }\n    }\n    array_multisort($row,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $lst;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    return\
    \ $result;\n}\n", "    $row = [];\n    foreach ($lst as $i => $row) {\n      \
    \  if ($row[$x] == $x) {\n            return $row;\n        }\n    }\n}\n", " \
    \   $rows = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) { return $v > 0; });\n    $rows = array_keys($rows);\n    $rows\
    \ = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows =\
    \ array_reverse($rows);\n    $rows = array_map(function($v) { return array_slice($lst,\
    \ $v); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'row'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'column'); }, $rows);\n    $rows = array_map(function($v) { return array_column($v,\
    \ 'value'); }, $rows);\n    $rows = array_map(function($v) { return ", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    sort($result);\n    array_multisort(array_column($result, '0'), SORT_DESC,\
    \ $result);\n    return $result;\n}\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n\
    \    [7, 8, 9],\n];\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);\n\
    </code>\n<|/ a tags=php,multidimensional-array,arrays,sorting |>\n<| a tags=php,multidimensional-array,arrays,sorting\
    \ |>\nI believe this should do what you want:\n<code>", "    $result = [];\n \
    \   foreach ($lst as $row) {\n        $result[] = array_filter($row, function($v)\
    \ use ($x) {\n            return $v == $x;\n        });\n    }\n    return $result;\n\
    }", "    $result = array();\n    foreach ($lst as $row) {\n        $result[] =\
    \ array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, array_column($result, 0), SORT_ASC, $result);\n    return $result;\n\
    }\n$lst = array(\n    array(\n        array(1, 2),\n        array(3, 4)\n    ),\n\
    \    array(\n        array(5, 6),\n        array(7, 8)\n    )\n);\nprint_r(get_row($lst,\
    \ 1));", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] =\
    \ array_filter($row, function ($v) use ($x) {\n            return $v === $x;\n\
    \        });\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_filter($row, function($v) use ($x)\
    \ {\n            return $v === $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $rows = array_count_values(array_column($lst));\n    $rows = array_filter($rows);\n\
    \    arsort($rows);\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) {\
    \ return array_slice($lst, $v); }, $rows);\n    return $rows;\n}\n", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) use ($x) {\n        return $v >= $x;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return ['row' => $row, 'col' => $col];\n        }, $row);\n \
    \   }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'];\n        }, $row);\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_map(function($col) {\n  \
    \          return $col['col'];\n        }, $row);\n    }, $rows);\n    $rows =\
    \ array_map(function($row) {\n        return array_map(function($col) {\n    \
    \        return $col['row'] . ',' . $col['col'];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col['row'] . ',' . $col['col'];\n        }, $row);\n\
    \    }, $rows);\n    $rows = array_map(function($", "    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_filter($row, function ($item) use\
    \ ($x) {\n            return $item == $x;\n        });\n    }\n    sort($result);\n\
    \    sort($result, SORT_NUMERIC);\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function($v)\
    \ use ($x) {\n            return $v === $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $row = [];\n    foreach ($lst as $i => $row) {\n        if ($row[$x]\
    \ == $x) {\n            $result = [$i];\n            foreach ($row as $j => $value)\
    \ {\n                if ($j != $x) {\n                    $result[] = [$i, $j];\n\
    \                }\n            }\n            return $result;\n        }\n  \
    \  }\n    return [];\n}\n", "    $row = [];\n    foreach ($lst as $i => $row)\
    \ {\n        if ($row[0] == $x) {\n            return $i;\n        }\n    }\n\
    \    return false;\n}\n", "    $result = array();\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_filter($row, function ($v) use ($x) {\n            return $v === $x;\n\
    \        });\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n  \
    \  return $result;\n}\n", "    $row = [];\n    foreach ($lst as $row) {\n    \
    \    $row[] = $x;\n    }\n    array_multisort($row, SORT_DESC, SORT_NUMERIC, $lst);\n\
    \    return $lst;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n\
    ];\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result =\
    \ [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    array_multisort(array_column($result,\
    \ 0), SORT_DESC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    array_multisort(array_reverse($result),\
    \ SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n}\n", "    $row = [];\n\
    \    foreach ($lst as $i => $row) {\n        if ($row[$x] == $x) {\n         \
    \   $row[$x] = $i;\n            $row[$x] = $row[$x];\n        }\n    }\n    array_multisort($row,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $lst;\n}\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);",
  "    $ret = [];\n    foreach ($lst as $row) {\n        $ret[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    return $ret;\n}\n", "    $result = array();\n    foreach ($lst as $row) {\n\
    \        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    return $result;\n}\n", "    $rows =\
    \ array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) use ($x) {\n        return $v > $x;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count(", "    $rows = array_count_values(array_column($lst, 'row'));\n    $rows\
    \ = array_filter($rows, function($v) use ($x) {\n        return $v > $x;\n   \
    \ });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n   \
    \ $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_flip($rows));\n\
    \    $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($rows, array_flip($rows));\n    $rows = array_merge($rows,\
    \ array_flip($rows));\n    $rows = array_merge($rows, array_flip($rows));\n  \
    \  $rows = array_merge($", "    $row = [];\n    foreach ($lst as $i => $row) {\n\
    \        if ($row[0] == $x) {\n            return $i;\n        }\n    }\n    return\
    \ false;\n}", "    $row = [];\n    foreach ($lst as $i => $row) {\n        if\
    \ ($row[0] == $x) {\n            return $i;\n        }\n    }\n    return false;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_DESC, $result);\n    return $result;\n}\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 8;\nprint_r(get_row($lst, $x));", " \
    \   $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($item) use ($x) {\n            return $item == $x;\n        });\n \
    \   }\n    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row = $rows[$x];\n    $columns = array_count_values(array_column($lst,\
    \ 'column'));\n    $columns = array_reverse($columns);\n    $coords = array();\n\
    \    foreach ($row as $row) {\n        foreach ($columns as $column) {\n     \
    \       $coords[] = array('row' => $row, 'column' => $column);\n        }\n  \
    \  }\n    array_multisort($coords, SORT_DESC, SORT_NUMERIC, $coords);\n    return\
    \ $coords;\n}\n$lst = array(\n    array('row' => array(2, 3), 'column' => array(2,\
    \ 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row'\
    \ => array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n\
    \    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row' =>\
    \ array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n\
    \    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row' =>\
    \ array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n\
    \    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row' =>\
    \ array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n\
    \    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row' =>\
    \ array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => array(2, 3)),\n\
    \    array('row' => array(2, 3), 'column' => array(2, 3)),\n    array('row' =>\
    \ array(2, 3), 'column' => array(2, 3)),\n    array('row' => array(2, 3), 'column'\
    \ => array(2, 3)),\n    array('row' => array(2, 3), 'column' => ", "    $rows\
    \ = array_count_values(array_map(function($row) {\n        return array_sum($row);\n\
    \    }, $lst));\n    arsort($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_keys($rows);\n    $rows = array_map(function($row) {\n        return\
    \ array_sum($row);\n    }, $rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_fli", "    $result = [];\n    foreach ($lst as $row) {\n  \
    \      $result[] = array_filter($row, function ($v) use ($x) {\n            return\
    \ $v === $x;\n        });\n    }\n    array_multisort(array_column($result, '0'),\
    \ SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return $result;\n\
    }\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\nprint_r(get_row($lst,\
    \ 3));", "    $rows = array_count_values(array_column($lst, 'row'));\n    $rows\
    \ = array_filter($rows, function($v) use ($x) {\n        return $v > $x;\n   \
    \ });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n   \
    \ $columns = array_count_values(array_column($lst, 'column'));\n    $columns =\
    \ array_filter($columns, function($v) use ($x) {\n        return $v > $x;\n  \
    \  });\n    $columns = array_keys($columns);\n    $columns = array_reverse($columns);\n\
    \    $coords = array_combine($rows, $columns);\n    asort($coords);\n    asort($rows);\n\
    \    asort($columns);\n    $coords = array_combine($rows, $columns);\n    $coords\
    \ = array_filter($coords, function($v) use ($x) {\n        return $v > $x;\n \
    \   });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $coords = array_keys($coords);\n    $coords = array_reverse($coords);\n\
    \    $coords = array_combine($coords, array_fill(0, count($coords), 0));\n   \
    \ $coords = array_filter($coords, function($v) use ($x) {\n        return $",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($item) use ($x) {\n            return $item == $x;\n        });\n \
    \   }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_filter($row, function($v) use ($x) {\n        \
    \    return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($item) use ($x) {\n            return $item == $x;\n        });\n \
    \   }\n    return $result;\n}\n", "    $result = array();\n    foreach ($lst as\
    \ $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_filter($row, function ($v) use ($x) {\n            return $v === $x;\n\
    \        });\n    }\n    array_multisort(array_column($result, 0), SORT_DESC,\
    \ array_column($result, 1), SORT_DESC, $result);\n    return $result;\n}\n$lst\
    \ = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 4;\nprint_r(get_row($lst,\
    \ $x));", "    $result = array();\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ 0), SORT_DESC, array_column($result, 1), SORT_DESC, $result);\n    return $result;\n\
    }\n", "    $row = [];\n    foreach ($lst as $row) {\n        if ($row[0] == $x)\
    \ {\n            return $row;\n        }\n    }\n}\n", "    $row = [];\n    foreach\
    \ ($lst as $i => $row) {\n        if ($row[0] == $x) {\n            $result =\
    \ [];\n            foreach ($row as $j => $val) {\n                $result[] =\
    \ [$i, $j];\n            }\n            return $result;\n        }\n    }\n}\n",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    array_multisort(array_column($result, 0), SORT_DESC, SORT_NUMERIC, $result);\n\
    \    return $result;\n}\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8,\
    \ 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $row = array_search($x,\
    \ array_keys($rows));\n    $cols = array_count_values(array_column($lst, 'col'));\n\
    \    $coords = array_map(function($row) use ($cols) {\n        return array_map(function($col)\
    \ use ($cols) {\n            return $col + ($rows[$row] * $cols[$col]);\n    \
    \    }, $row);\n    }, $row);\n    asort($coords);\n    arsort($coords);\n   \
    \ return $coords;\n}\n\n$lst = [\n    ['row' => 1, 'col' => 1, 'val' => 1],\n\
    \    ['row' => 1, 'col' => 2, 'val' => 2],\n    ['row' => 2, 'col' => 1, 'val'\
    \ => 3],\n    ['row' => 2, 'col' => 2, 'val' => 4],\n];\n\n$x = 2;\n$coords =\
    \ get_row($lst, $x);\nprint_r($coords);\n</code>\nOutput:\n<code>\nArray\n(\n\
    \    [0] => Array\n        (\n            [0] => 1\n            [1] => 2\n   \
    \     )\n\n    [1] => Array\n        (\n            [0] => 2\n            [1]\
    \ => 1\n        )\n\n)\n</code>\n<|/ a tags=php,multidimensional-array,arrays,sorting\
    \ |>\n<| c |>\nThanks for your answer. I'm sorry I didn't explain my question\
    \ properly. I've edited my question to make it more clear. Your answer works perfectly\
    \ for my original question, but I forgot to mention that the array is actually\
    \ a 2D array and each row may contain a different number of columns. I've edited\
    \ my question to reflect this. Sorry about that.\n<|/ c |>\n<| c |>\n, I've updated\
    \ my answer to reflect your new requirements.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I'm sorry I didn't explain my question properly. I've edited my question\
    \ to make it more clear. Your answer works perfectly for my original question,\
    \ but I forgot to mention that the array is actually a 2D array and each row may\
    \ contain a different number of columns. I've edited my question to reflect this.\
    \ Sorry about that.\n<|/ c |>\n<| c |>\n, I've updated my answer to reflect your\
    \ new requirements.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ explain my question properly. I've edited my question to make it more clear.\
    \ Your answer works perfectly for my original question, but I forgot to mention\
    \ that the array is actually a ", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_filter($row, function ($v) use ($x) {\n       \
    \     return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $row\
    \ = [];\n    foreach ($lst as $i => $row) {\n        if ($row[$x]) {\n       \
    \     $result[] = [$i, $x];\n        }\n    }\n    sort($result);\n    sort($row,\
    \ SORT_NUMERIC);\n    return $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5,\
    \ 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8,\
    \ 9],\n];\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result\
    \ = array();\n    foreach($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($result, '0'), SORT_DESC, $result);\n\
    \    return $result;\n}\n$lst = array(\n    array(\n        array(\n         \
    \   array(\n                1,\n                2,\n                3,\n     \
    \           4,\n                5,\n                6,\n                7,\n \
    \               8,\n                9\n            ),\n            array(\n  \
    \              10,\n                11,\n                12,\n               \
    \ 13,\n                14,\n                15,\n                16,\n       \
    \         17,\n                18,\n                19\n            ),\n     \
    \       array(\n                20,\n                21,\n                22,\n\
    \                23,\n                24,\n                25,\n             \
    \   26,\n                27,\n                28,\n                29\n      \
    \      )\n        ),\n        array(\n            array(\n                30,\n\
    \                31,\n                32,\n                33,\n             \
    \   34,\n                35,\n                36,\n                37,\n     \
    \           38,\n                39\n            ),\n            array(\n    \
    \            40,\n                41,\n                42,\n                43,\n\
    \                44,\n                45,\n                46,\n             \
    \   47,\n                48,\n                49\n            ),\n           \
    \ array(\n                50,\n                51,\n                52,\n    \
    \            53,\n                54,\n                55,\n                56,\n\
    \                57,\n                58,\n                59\n            )\n\
    \        )\n    )\n);\n$x = 2;\nprint_r(get_row($lst, $x));\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't seem to work. I've added\
    \ some more examples to the question to show what I'm looking for.\n<|/ c |>\n\
    <| c |>\nI've added more examples to the question to show what I'm looking for.\n\
    <|/ c |>\n<| c |>\nI've added more examples to the question to show what I'm looking\
    \ for.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$lst = array(\n    array(\n        array(\n\
    \            array(\n                1,\n                2,\n                3,\n\
    \                4,\n                5,\n                6,\n                7,\n\
    \                8,\n                9\n            ),\n            array(\n \
    \               10,\n                11,\n                12,\n              \
    \  13,\n                14,\n                15,\n                16,\n      \
    \          17,\n                18,\n                19\n            ),\n    \
    \        array(\n                20,\n                21,\n                22,\n\
    \                23,\n                24,\n                25,\n             \
    \   ", "    $result = array();\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, array_column($result, 0), SORT_ASC, $result);\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($item) use ($x) {\n            return $item == $x;\n        });\n \
    \   }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_filter($row, function ($v) use ($x) {\n       \
    \     return $v == $x;\n        });\n    }\n    sort($result);\n    sort($result,\
    \ SORT_NUMERIC);\n    return $result;\n}", "    $result = array();\n    foreach\
    \ ($lst as $row) {\n        foreach ($row as $column) {\n            if ($column\
    \ == $x) {\n                $result[] = array($row, $column);\n            }\n\
    \        }\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($lst as $row) {\n    \
    \    $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, array_column($result, 0), SORT_ASC, $result);\n    return $result;\n\
    }\n$lst = array(\n    array(\n        array(2, 1),\n        array(3, 2),\n   \
    \     array(4, 3),\n        array(5, 4),\n        array(6, 5),\n        array(7,\
    \ 6),\n        array(8, 7),\n        array(9, 8),\n        array(10, 9),\n   \
    \     array(11, 10),\n        array(12, 11),\n        array(13, 12),\n       \
    \ array(14, 13),\n        array(15, 14),\n        array(16, 15),\n        array(17,\
    \ 16),\n        array(18, 17),\n        array(19, 18),\n        array(20, 19),\n\
    \        array(21, 20),\n        array(22, 21),\n        array(23, 22),\n    \
    \    array(24, 23),\n        array(25, 24),\n        array(26, 25),\n        array(27,\
    \ 26),\n        array(28, 27),\n        array(29, 28),\n        array(30, 29),\n\
    \        array(31, 30),\n        array(32, 31),\n        array(33, 32),\n    \
    \    array(34, 33),\n        array(35, 34),\n        array(36, 35),\n        array(37,\
    \ 36),\n        array(38, 37),\n        array(39, 38),\n        array(40, 39),\n\
    \        array(41, 40),\n        array(42, 41),\n        array(43, 42)\n    ),\n\
    \    array(\n        array(2, 1),\n        array(3, 2),\n        array(4, 3),\n\
    \        array(5, 4),\n        array(6, 5),\n        array(7, 6),\n        array(8,\
    \ 7),\n        array(9, 8),\n        array(10, 9),\n        array(11, 10),\n \
    \       array(12, 11),\n        array(13, 12),\n        array(14, 13),\n     \
    \   array(15, 14),\n        array(16, 15),\n        array(17, 16),\n        array(18,\
    \ 17),\n        array(19, 18),\n        array(20, 19),\n        array(21, 20),\n\
    \        array(22, 21),\n        array(23, 22),\n        array(24, 23),\n    \
    \    array(25, 24),\n        array(26, 25),\n        array(27, 26),\n        array(28,\
    \ 27),\n        array(29, 28),\n        array(30, 29),\n        array(31, 30),\n\
    \        array(32, 31),\n        array(33, 32),\n        array(34, 33),\n    \
    \    array(35, 34),\n        array(", "    $result = array();\n    foreach ($lst\
    \ as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    sort($result);\n\
    \    foreach ($result as $row) {\n        sort($row);\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($lst as $row) {\n        $row_result\
    \ = array();\n        foreach ($row as $column) {\n            if ($column ==\
    \ $x) {\n                $row_result[] = array($row, $column);\n            }\n\
    \        }\n        sort($row_result);\n        $result[] = $row_result;\n   \
    \ }\n    sort($result);\n    return $result;\n}\n$lst = array(\n    array(\n \
    \       array(2, 1),\n        array(3, 2),\n        array(4, 3),\n        array(5,\
    \ 4),\n        array(6, 5),\n        array(7, 6),\n        array(8, 7),\n    \
    \    array(9, 8),\n        array(10, 9),\n        array(11, 10),\n        array(12,\
    \ 11),\n        array(13, 12),\n        array(14, 13),\n        array(15, 14),\n\
    \        array(16, 15),\n        array(17, 16),\n        array(18, 17),\n    \
    \    array(19, 18),\n        array(20, 19),\n        array(21, 20),\n        array(22,\
    \ 21),\n        array(23, 22),\n        array(24, 23),\n        array(25, 24),\n\
    \        array(26, 25),\n        array(27, 26),\n        array(28, 27),\n    \
    \    array(29, 28),\n        array(30, 29),\n        array(31, 30),\n        array(32,\
    \ 31),\n        array(33, 32),\n        array(34, 33),\n        array(35, 34),\n\
    \        array(36, 35),\n        array(37, 36),\n        array(38, 37),\n    \
    \    array(39, 38),\n        array(40, 39),\n        array(41, 40),\n        array(42,\
    \ 41),\n        array(43, 42)\n    ),\n    array(\n        array(2, 1),\n    \
    \    array(3, 2),\n        array(4, 3),\n        array(5, 4),\n        array(6,\
    \ 5),\n        array(7, 6),\n        array(8, 7),\n        array(9, 8),\n    \
    \    array(10, 9),\n        array(11, 10),\n        array(12, 11),\n        array(13,\
    \ 12),\n        array(14, 13),\n        array(15, 14),\n        array(16, 15),\n\
    \        array(17, 16),\n        array(18, 17),\n        array(19, 18),\n    \
    \    array(20, 19),\n        array(21, 20),\n        array(22, 21),\n        array(23,\
    \ 22),\n        array(24, 23),\n        array(25, 24),\n        array(26, 25),\n\
    \        array(27, 26),\n        array(28, 27),\n        array(29, 28),\n    \
    \    array(30, 29),\n        array(31, 30),\n        array(32, 31),", "    $row\
    \ = [];\n    foreach ($lst as $i => $row) {\n        if ($row[$x] !== null) {\n\
    \            $row[$x] = $i;\n            break;\n        }\n    }\n    return\
    \ $row;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    return array_map(function ($row) {\n\
    \        return array_reverse($row);\n    }, $result);\n}\n\n$lst = [\n    [1,\
    \ 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$lst = get_row($lst, 2);\nprint_r($lst);",
  "    $result = array();\n    foreach ($lst as $row) {\n        foreach ($row as\
    \ $column) {\n            if ($column == $x) {\n                $result[] = array($row,\
    \ array_reverse($row));\n            }\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$lst = array(\n    array(\n        array(\n         \
    \   1,\n            2,\n            3,\n            4,\n            5,\n     \
    \       6,\n            7,\n            8,\n            9\n        ),\n      \
    \  array(\n            10,\n            11,\n            12,\n            13,\n\
    \            14,\n            15,\n            16,\n            17,\n        \
    \    18,\n            19\n        )\n    ),\n    array(\n        array(\n    \
    \        20,\n            21,\n            22,\n            23,\n            24,\n\
    \            25,\n            26,\n            27,\n            28,\n        \
    \    29\n        ),\n        array(\n            30,\n            31,\n      \
    \      32,\n            33,\n            34,\n            35,\n            36,\n\
    \            37,\n            38,\n            39\n        )\n    )\n);\n$x =\
    \ 9;\n$result = get_row($lst, $x);\nprint_r($result);", "    $row = [];\n    foreach\
    \ ($lst as $i => $row) {\n        if ($row[$x] == $x) {\n            $row[$x]\
    \ = $i;\n        }\n    }\n    asort($row);\n    arsort($row);\n    return $row;\n\
    }", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row = array_search($x, array_keys($rows));\n    $columns = array_count_values(array_column($lst,\
    \ 'column'));\n    $column = array_search($x, array_keys($columns));\n    return\
    \ array(\n        array('row' => $row, 'column' => $column),\n        array('row'\
    \ => $row - 1, 'column' => $column),\n        array('row' => $row, 'column' =>\
    \ $column + 1),\n        array('row' => $row + 1, 'column' => $column),\n    );\n\
    }\n", "    $row = [];\n    foreach ($lst as $row) {\n        $row[] = $x;\n  \
    \  }\n    return $row;\n}\n", "    $ret = [];\n    foreach ($lst as $row) {\n\
    \        $ret[] = array_slice($row, 0, $x);\n    }\n    return $ret;\n}\n", " \
    \   $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return\
    \ $result;\n}", "    $rows = array_count_values(array_column($lst, 'row'));\n\
    \    arsort($rows);\n    $rows = array_keys($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($row", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row = $rows[$x];\n    $cols = array_count_values(array_column($lst,\
    \ 'column'));\n    $col = $cols[$x];\n    $coords = array_column($lst, 'row');\n\
    \    asort($coords);\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'column'));\n    asort($coords);\n    $coords = array_combine($coords,\
    \ array_column($lst, 'row'));\n    asort($coords);\n    $coords = ", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) use ($x) {\n        return $v > $x;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_unique($rows);\n    $rows = array_map(function($row)\
    \ use ($lst) {\n        return array_column($lst, 'row', $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row[$col];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $col;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ use ($row) {\n            return $row;\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return ", "    $rows = array_count_values(array_map(function($v)\
    \ { return $v[0]; }, $lst));\n    $rows = array_filter($rows, function($v) { return\
    \ $v > 0; });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $columns = array_count_values(array_map(function($v) { return $v[1]; }, $lst));\n\
    \    $columns = array_filter($columns, function($v) { return $v > 0; });\n   \
    \ $columns = array_keys($columns);\n    $columns = array_reverse($columns);\n\
    \    $result = array();\n    foreach ($rows as $row) {\n        $result[] = array_intersect_key($lst,\
    \ array_flip(array($row, $x)));\n    }\n    foreach ($columns as $column) {\n\
    \        $result[] = array_intersect_key($lst, array_flip(array($x, $column)));\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        foreach ($row as $col) {\n            if ($col === $x) {\n      \
    \          $result[] = [$row, $col];\n            }\n        }\n    }\n    sort($result);\n\
    \    sort($result, SORT_NUMERIC);\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    return\
    \ $result;\n}\n", "    $row = [];\n    foreach ($lst as $row) {\n        $row[]\
    \ = $x;\n    }\n    array_multisort($row, SORT_DESC, SORT_NUMERIC, $lst);\n  \
    \  return $lst;\n}\n", "    $rows = array_count_values(array_column($lst, 'row'));\n\
    \    $rows = array_filter($rows, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    arsort($rows);\n    $rows = array_keys($rows);\n    $rows\
    \ = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows =\
    \ array_map(function($row) {\n        return array_map(function($col) use ($row)\
    \ {\n            return ['row' => $row, 'column' => $col];\n        }, $row);\n\
    \    }, $rows);\n    return $rows;\n}", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows, function($v) use ($x) {\n        return\
    \ $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows =\
    \ array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows)\
    \ - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows)\
    \ - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows)\
    \ - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows) - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows)\
    \ - 1, $x));\n    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows) - 1, $x));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows) - ", "    $ret = [];\n    foreach\
    \ ($lst as $row) {\n        $ret[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($ret,\
    \ '0'), SORT_DESC, $ret);\n    return $ret;\n}\n", "    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n   \
    \ array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_ASC, $result);\n    return $result;\n}\n", "    $result = [];\n \
    \   foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    sort($result,\
    \ SORT_NUMERIC);\n    sort($result, SORT_NUMERIC, SORT_DESC);\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($item) use ($x) {\n            return $item == $x;\n        });\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n", "    $row = [];\n    foreach ($lst as $row) {\n        if ($row[0]\
    \ == $x) {\n            return $row;\n        }\n    }\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    sort($result);\n\
    \    sort($result, SORT_NUMERIC);\n    return $result;\n}\n$lst = [\n    [1, 2,\
    \ 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\n\
    print_r($result);", "    $rows = array_count_values(array_column($lst, 'row'));\n\
    \    $rows = array_filter($rows, function($v) use ($x) {\n        return $v >\
    \ $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows =\
    \ array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count(", "    $ret = [];\n\
    \    foreach($lst as $row) {\n        foreach($row as $i => $val) {\n        \
    \    if($val == $x) {\n                $ret[] = [$i, $i];\n            }\n   \
    \     }\n    }\n    return $ret;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows, function($v) use ($x) {\n        return\
    \ $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'column')));\n    $rows = array_filter($rows, function($v) use ($x) {\n    \
    \    return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'row')));\n    $rows = array_filter($rows, function($v) use ($x) {\n       \
    \ return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'column')));\n    $rows = array_filter($rows, function($v) use ($x) {\n    \
    \    return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'row')));\n    $rows = array_filter($rows, function($v) use ($x) {\n       \
    \ return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'column')));\n    $rows = array_filter($rows, function($v) use ($x) {\n    \
    \    return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'row')));\n    $rows = array_filter($rows, function($v) use ($x) {\n       \
    \ return $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge([0 => []], $rows);\n    $rows = array_merge($rows, array_count_values(array_column($lst,\
    \ 'column')));\n    $rows = array_filter($rows, function($v", "    $ret = [];\n\
    \    foreach ($lst as $row) {\n        foreach ($row as $i => $val) {\n      \
    \      if ($val == $x) {\n                $ret[] = [$i, $row[$i]];\n         \
    \   }\n        }\n    }\n    sort($ret);\n    sort($ret, SORT_NUMERIC);\n    return\
    \ $ret;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x =\
    \ 4;\nprint_r(get_row($lst, $x));", "    $ret = [];\n    foreach ($lst as $row)\
    \ {\n        foreach ($row as $i => $val) {\n            if ($val == $x) {\n \
    \               $ret[] = [$i, $i];\n            }\n        }\n    }\n    sort($ret);\n\
    \    sort($ret, SORT_NUMERIC);\n    return $ret;\n}\n", "    $ret = [];\n    foreach\
    \ ($lst as $row) {\n        $ret[] = array_slice($row, 0, $x);\n    }\n    sort($ret);\n\
    \    sort($ret, SORT_NUMERIC);\n    return $ret;\n}\n\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x = 4;\n$rows = get_row($lst, $x);\nprint_r($rows);",
  "    $rows = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) use ($x) {\n        return $v > $x;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_merge([$x], $rows);\n  \
    \  $rows = array_unique($rows);\n    $rows = array_map(function($v) use ($lst)\
    \ {\n        return array_column($lst, 'row', $v);\n    }, $rows);\n    $rows\
    \ = array_map(function($v) use ($rows) {\n        return array_column($v, 'column');\n\
    \    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n        return\
    \ array_combine($rows, $v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v);\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_flip($v", "    $rows = array_count_values(array_map(function($v)\
    \ { return $v[0]; }, $lst));\n    $rows = array_filter($rows, function($v) { return\
    \ $v == $x; });\n    $rows = array_reverse($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 1); }, $lst);\n \
    \   $rows = array_map(function($v) { return array_slice($v, 0, -1); }, $rows);\n\
    \    return $rows;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n \
    \       $result[] = array_filter($row, function ($item) use ($x) {\n         \
    \   return $item == $x;\n        });\n    }\n    return $result;\n}\n", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $lst);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function($v) { return array_slice($v,\
    \ 0, 2); }, $rows);\n    $rows = array_map(function(", "    $result = [];\n  \
    \  foreach ($lst as $row) {\n        $result[] = array_filter($row, function ($v)\
    \ use ($x) {\n            return $v === $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function ($v) use ($x) {\n           \
    \ return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) use ($x) {\n        return $v > $x;\n    });\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, 1);\n  \
    \  $rows = array_map(function($v) use ($lst) {\n        return array_column($lst,\
    \ 'row', $v);\n    }, $rows);\n    $rows = array_map(function($v) use ($rows)\
    \ {\n        return array_column($v, 'column');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_column($v, 'row');\n    }, $rows);\n   \
    \ $rows = array_map(function($v) use ($rows) {\n        return array_column($v,\
    \ 'column');\n    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n\
    \        return array_column($v, 'row');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_column($v, 'column');\n    }, $rows);\n\
    \    $rows = array_map(function($v) use ($rows) {\n        return array_column($v,\
    \ 'row');\n    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n\
    \        return array_column($v, 'column');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_column($v, 'row');\n    }, $rows);\n   \
    \ $rows = array_map(function($v) use ($rows) {\n        return array_column($v,\
    \ 'column');\n    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n\
    \        return array_column($v, 'row');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_column($v, 'column');\n    }, $rows);\n\
    \    $rows = array_map(function($v) use ($rows) {\n        return array_column($v,\
    \ 'row');\n    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n\
    \        return array_column($v, 'column');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_column($v, 'row');\n    }, $rows);\n   \
    \ $rows = array_map(function($v) use ($rows) {\n        return array_column($v,\
    \ 'column');\n    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n\
    \        return array_column($", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row_keys = array_keys($rows);\n    $row_values = array_values($rows);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_values);\n\
    \    $row_keys = array_flip($row_keys);\n    $row_values = array_flip($row_",
  "    $ret = [];\n    foreach ($lst as $row) {\n        $ret[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($ret, '0'), SORT_DESC, $ret);\n\
    \    return $ret;\n}\n", "    $row = [];\n    foreach ($lst as $row) {\n     \
    \   $row[] = $row[$x];\n    }\n    return $row;\n}", "    $row = [];\n    foreach\
    \ ($lst as $i => $row) {\n        if ($row[$x] !== null) {\n            $row[$x]\
    \ = $i;\n            break;\n        }\n    }\n    return $row;\n}\n", "    $result\
    \ = array();\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    return $result;\n}\n$lst = array(\n    array(1, 2, 3, 4),\n    array(5, 6,\
    \ 7, 8),\n    array(9, 10, 11, 12),\n);\n$x = 4;\n$result = get_row($lst, $x);\n\
    print_r($result);", "    $rows = array_count_values(array_column($lst, 'row'));\n\
    \    $row = $rows[$x];\n    $cols = array_count_values(array_column($lst, 'column'));\n\
    \    $col = $cols[$x];\n    $coords = array();\n    foreach ($lst as $row) {\n\
    \        $coords[] = array(\n            array('row' => $row, 'column' => $col),\n\
    \        );\n    }\n    array_multisort($coords, SORT_DESC, SORT_NUMERIC, $lst);\n\
    \    return $lst;\n}\n\n$lst = array(\n    array('row' => 1, 'column' => 1),\n\
    \    array('row' => 1, 'column' => 2),\n    array('row' => 1, 'column' => 3),\n\
    \    array('row' => 2, 'column' => 1),\n    array('row' => 2, 'column' => 2),\n\
    \    array('row' => 2, 'column' => 3),\n    array('row' => 3, 'column' => 1),\n\
    \    array('row' => 3, 'column' => 2),\n    array('row' => 3, 'column' => 3),\n\
    );\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n<?php\n$arr = [\n\
    \    [\n        'row' => 1,\n        'column' => 1,\n    ],\n    [\n        'row'\
    \ => 1,\n        'column' => 2,\n    ],\n    [\n        'row' => 1,\n        'column'\
    \ => 3,\n    ],\n    [\n        'row' => 2,\n        'column' => 1,\n    ],\n\
    \    [\n        'row' => 2,\n        'column' => 2,\n    ],\n    [\n        'row'\
    \ => 2,\n        'column' => 3,\n    ],\n    [\n        'row' => 3,\n        'column'\
    \ => 1,\n    ],\n    [\n        'row' => 3,\n        'column' => 2,\n    ],\n\
    \    [\n        'row' => 3,\n        'column' => 3,\n    ],\n];\n\n$x = 2;\n$result\
    \ = array_filter($arr, function($v) use ($x) {\n    return $v['row'] == $x;\n\
    });\n$result = array_map(function($v) use ($x) {\n    return array_filter($v,\
    \ function($v1) use ($x) {\n        return $v1['column'] == $x;\n    });\n}, $result);\n\
    $result = array_map(function($v) use ($x) {\n    return array_filter($v, function($v1)\
    \ use ($x) {\n        return $v1['row'] == $x;\n    });\n}, $result);\n$result\
    \ = array_map(function($v) use ($x) {\n    return array_filter($v, function($",
  "    $ret = [];\n    foreach ($lst as $row) {\n        $ret[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($ret, '0'), SORT_DESC, $ret);\n\
    \    return $ret;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n  \
    \      $result[] = array_filter($row, function($v) use ($x) {\n            return\
    \ $v == $x;\n        });\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_DESC, $result);\n    return $result;\n}\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\nprint_r(get_row($lst, $x));", " \
    \   $result = array();\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_reverse($result), SORT_DESC, SORT_NUMERIC,\
    \ $result);\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $row) {\n        foreach ($row as $column) {\n            if ($column ==\
    \ $x) {\n                $result[] = [$row, $column];\n            }\n       \
    \ }\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n\
    \    return $result;\n}\n", "    $ret = [];\n    foreach ($lst as $row) {\n  \
    \      foreach ($row as $i => $val) {\n            if ($val == $x) {\n       \
    \         $ret[] = [$i, $i];\n            }\n        }\n    }\n    usort($ret,\
    \ 'cmp');\n    return $ret;\n}\n", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\
    \n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n\
    }\n$lst = array(\n    array(\n        array(1, 3, 2),\n        array(2, 5, 4),\n\
    \        array(3, 6, 7),\n        array(4, 8, 9)\n    ),\n    array(\n       \
    \ array(2, 4, 5),\n        array(3, 6, 8),\n        array(4, 7, 9)\n    ),\n \
    \   array(\n        array(2, 5, 6),\n        array(3, 7, 8),\n        array(4,\
    \ 8, 9)\n    )\n);\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);",
  "    $result = [];\n    foreach ($lst as $row) {\n        foreach ($row as $column)\
    \ {\n            if ($column == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n\
    \    return $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8,\
    \ 9],\n];\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);", "    $row\
    \ = [];\n    foreach ($lst as $row) {\n        $row[] = $x;\n    }\n    array_multisort($row,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $lst;\n}\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 4;\n$row = get_row($lst, $x);\nprint_r($row);",
  "    $rows = array_count_values(array_column($lst, 'row'));\n    arsort($rows);\n\
    \    $rows = array_reverse($rows);\n    $result = array();\n    foreach ($rows\
    \ as $row => $count) {\n        $result[] = array($x, $row);\n    }\n    return\
    \ $result;\n}\n", "    $rows = array_count_values(array_column($lst, 'row'));\n\
    \    arsort($rows);\n    $row = array_search($x, array_keys($rows));\n    $coords\
    \ = array_column($lst, $row);\n    arsort($coords);\n    return $coords;\n}\n",
  "    $rows = array_count_values(array_column($lst, 'row'));\n    arsort($rows);\n\
    \    $result = array();\n    foreach ($rows as $row => $count) {\n        $result[]\
    \ = array($row, $x - $count);\n    }\n    return $result;\n}", "    $result =\
    \ array();\n    foreach ($lst as $row) {\n        $row_result = array();\n   \
    \     foreach ($row as $col) {\n            if ($col == $x) {\n              \
    \  $row_result[] = array($row, $col);\n            }\n        }\n        sort($row_result);\n\
    \        sort($row_result, SORT_NUMERIC);\n        $result[] = $row_result;\n\
    \    }\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ $x));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n   \
    \ $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ 0));\n    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows\
    \ = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), 0));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), 0));\n    $rows = array_merge($rows, array_fill", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function ($v) use ($x) {\n           \
    \ return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $ret\
    \ = [];\n    foreach ($lst as $row) {\n        $ret[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($ret, '0'), SORT_DESC, $ret);\n    return\
    \ $ret;\n}\n", "    $result = array();\n    foreach($lst as $row) {\n        $result[]\
    \ = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n\n$lst = array(\n    array(\n        array(\n            array(1,\
    \ 2),\n            array(3, 4)\n        ),\n        array(\n            array(5,\
    \ 6),\n            array(7, 8)\n        )\n    ),\n    array(\n        array(\n\
    \            array(9, 10),\n            array(11, 12)\n        ),\n        array(\n\
    \            array(13, 14),\n            array(15, 16)\n        )\n    )\n);\n\
    \n$result = get_row($lst, 1);\nprint_r($result);\n</code>\n<|/ a tags=php,multidimensional-array,arrays,sorting\
    \ |>\n<| c |>\nI like your solution, however it only works if you know the exact\
    \ number of columns. If you don't know the number of columns, then this solution\
    \ will not work.\n<|/ c |>\n<| c |>\nI added a solution that will work for any\
    \ number of columns. Please let me know if that works for you.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\n$array = [\n    [\n        [\n            1,\n        \
    \    2,\n            3,\n            4,\n            5,\n            6,\n    \
    \        7,\n            8,\n            9,\n            10,\n            11,\n\
    \            12,\n            13,\n            14,\n            15,\n        \
    \    16,\n            17,\n            18,\n            19,\n            20,\n\
    \            21,\n            22,\n            23,\n            24,\n        \
    \    25,\n            26,\n            27,\n            28,\n            29,\n\
    \            30,\n            31,\n            32,\n            33,\n        \
    \    34,\n            35,\n            36,\n            37,\n            38,\n\
    \            39,\n            40,\n            41,\n            42,\n        \
    \    43,\n            44,\n            45,\n            46,\n            47,\n\
    \            48,\n            49,\n            50,\n            51,\n        \
    \    52,\n            53,\n            54,\n            55,\n            56,\n\
    \            57,\n            58,\n            59,\n            60,\n        \
    \    61,\n            62,\n            63,\n            64,\n            65,\n\
    \            66,\n            67,\n            68,\n            69,\n        \
    \    70,\n            71,\n            72,\n            73,\n            74,\n",
  "    $rows = array_count_values(array_map(function($row) {\n        return count($row);\n\
    \    }, $lst));\n    $rows = array_filter($rows, function($v) {\n        return\
    \ $v > 0;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows), 0));\n    $rows =\
    \ array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);", "    $result = [];\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, array_column($result, 0), SORT_ASC, $result);\n    return $result;\n\
    }\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result\
    \ = get_row($lst, $x);\nprint_r($result);", "    $result = [];\n    foreach ($lst\
    \ as $row) {\n        foreach ($row as $col) {\n            if ($col == $x) {\n\
    \                $result[] = [$row, $col];\n            }\n        }\n    }\n\
    \    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n",
  "    $rows = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows,\
    \ function($v) { return $v > 0; });\n    arsort($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $lst);\n\
    \    return $rows;\n}\n", "    $result = array();\n    foreach ($lst as $row)\
    \ {\n        $result[] = array_filter($row, function($e) use ($x) {\n        \
    \    return $e == $x;\n        });\n    }\n    sort($result);\n    sort($result,\
    \ SORT_NUMERIC);\n    return $result;\n}\n\n$lst = array(\n    array(1, 2, 3,\
    \ 4),\n    array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n    array(13, 14, 15,\
    \ 16)\n);\n\nprint_r(get_row($lst, 3));\nprint_r(get_row($lst, 4));\nprint_r(get_row($lst,\
    \ 5));\nprint_r(get_row($lst, 6));\nprint_r(get_row($lst, 7));\nprint_r(get_row($lst,\
    \ 8));\nprint_r(get_row($lst, 9));\nprint_r(get_row($lst, 10));\nprint_r(get_row($lst,\
    \ 11));\nprint_r(get_row($lst, 12));\nprint_r(get_row($lst, 13));\nprint_r(get_row($lst,\
    \ 14));\nprint_r(get_row($lst, 15));\nprint_r(get_row($lst, 16));\nprint_r(get_row($lst,\
    \ 17));\nprint_r(get_row($lst, 18));\nprint_r(get_row($lst, 19));\nprint_r(get_row($lst,\
    \ 20));\nprint_r(get_row($lst, 21));\nprint_r(get_row($lst, 22));\nprint_r(get_row($lst,\
    \ 23));\nprint_r(get_row($lst, 24));\nprint_r(get_row($lst, 25));\nprint_r(get_row($lst,\
    \ 26));\nprint_r(get_row($lst, 27));\nprint_r(get_row($lst, 28));\nprint_r(get_row($lst,\
    \ 29));\nprint_r(get_row($lst, 30));\nprint_r(get_row($lst, 31));\nprint_r(get_row($lst,\
    \ 32));\nprint_r(get_row($lst, 33));\nprint_r(get_row($lst, 34));\nprint_r(get_row($lst,\
    \ 35));\nprint_r(get_row($lst, 36));\nprint_r(get_row($lst, 37));\nprint_r(get_row($lst,\
    \ 38));\nprint_r(get_row($lst, 39));\nprint_r(get_row($lst, 40));\nprint_r(get_row($lst,\
    \ 41));\nprint_r(get_row($lst, 42));\nprint_r(get_row($lst, 43));\nprint_r(get_row",
  "    $rows = array_count_values(array_column($lst, 'row'));\n    arsort($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $coords = array();\n    foreach ($rows as\
    \ $row) {\n        $coords[] = array_column($lst, $row);\n    }\n    return $coords;\n\
    }\n\n$lst = array(\n    array('row' => 1, 'col' => 1, 'val' => 1),\n    array('row'\
    \ => 1, 'col' => 2, 'val' => 2),\n    array('row' => 2, 'col' => 1, 'val' => 3),\n\
    \    array('row' => 2, 'col' => 2, 'val' => 4),\n    array('row' => 3, 'col' =>\
    \ 1, 'val' => 5),\n    array('row' => 3, 'col' => 2, 'val' => 6),\n    array('row'\
    \ => 4, 'col' => 1, 'val' => 7),\n    array('row' => 4, 'col' => 2, 'val' => 8),\n\
    \    array('row' => 5, 'col' => 1, 'val' => 9),\n    array('row' => 5, 'col' =>\
    \ 2, 'val' => 10),\n    array('row' => 6, 'col' => 1, 'val' => 11),\n    array('row'\
    \ => 6, 'col' => 2, 'val' => 12),\n    array('row' => 7, 'col' => 1, 'val' =>\
    \ 13),\n    array('row' => 7, 'col' => 2, 'val' => 14),\n    array('row' => 8,\
    \ 'col' => 1, 'val' => 15),\n    array('row' => 8, 'col' => 2, 'val' => 16),\n\
    \    array('row' => 9, 'col' => 1, 'val' => 17),\n    array('row' => 9, 'col'\
    \ => 2, 'val' => 18),\n    array('row' => 10, 'col' => 1, 'val' => 19),\n    array('row'\
    \ => 10, 'col' => 2, 'val' => 20),\n    array('row' => 11, 'col' => 1, 'val' =>\
    \ 21),\n    array('row' => 11, 'col' => 2, 'val' => 22),\n    array('row' => 12,\
    \ 'col' => 1, 'val' => 23),\n    array('row' => 12, 'col' => 2, 'val' => 24),\n\
    \    array('row' => 13, 'col' => 1, 'val' => 25),\n    array('row' => 13, 'col'\
    \ => 2, 'val' => 26),\n    array('row' => 14, 'col' => 1, 'val' => 27),\n    array('row'\
    \ => 14, 'col' => 2, 'val' => 28),\n    array('row' => 15, 'col' => 1, 'val' =>\
    \ 29),\n    array('row' => 15, 'col' => 2, 'val", "    $result = [];\n    foreach\
    \ ($lst as $row) {\n        $result[] = array_filter($row, function ($item) use\
    \ ($x) {\n            return $item == $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    arsort($rows);\n    $rows = array_keys($rows);\n    $row = $rows[$x];\n\
    \    $cols = array_count_values(array_column($lst, 'col'));\n    arsort($cols);\n\
    \    $cols = array_keys($cols);\n    $coords = array();\n    foreach ($lst as\
    \ $row) {\n        $coords[] = array($row, $cols[$row]);\n    }\n    arsort($coords);\n\
    \    return $coords;\n}\n$lst = array(\n    array('row' => 1, 'col' => 1, 'val'\
    \ => 1),\n    array('row' => 1, 'col' => 2, 'val' => 2),\n    array('row' => 1,\
    \ 'col' => 3, 'val' => 3),\n    array('row' => 2, 'col' => 1, 'val' => 4),\n \
    \   array('row' => 2, 'col' => 2, 'val' => 5),\n    array('row' => 2, 'col' =>\
    \ 3, 'val' => 6),\n    array('row' => 3, 'col' => 1, 'val' => 7),\n    array('row'\
    \ => 3, 'col' => 2, 'val' => 8),\n    array('row' => 3, 'col' => 3, 'val' => 9),\n\
    );\nprint_r(get_row($lst, 1));\nprint_r(get_row($lst, 2));\nprint_r(get_row($lst,\
    \ 3));\nprint_r(get_row($lst, 4));\nprint_r(get_row($lst, 5));\nprint_r(get_row($lst,\
    \ 6));\nprint_r(get_row($lst, 7));\nprint_r(get_row($lst, 8));\nprint_r(get_row($lst,\
    \ 9));", "    $result = [];\n    foreach ($lst as $row) {\n        foreach ($row\
    \ as $i => $val) {\n            if ($val === $x) {\n                $result[]\
    \ = [$i, $i];\n            }\n        }\n    }\n    sort($result);\n    sort($result,\
    \ SORT_NUMERIC);\n    return $result;\n}\n", "    $result = [];\n    foreach ($lst\
    \ as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_DESC, $result);\n    return\
    \ $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\
    $x = 4;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function($item)\
    \ use ($x) {\n            return $item == $x;\n        });\n    }\n    return\
    \ $result;\n}\n", "    $ret = [];\n    foreach ($lst as $row) {\n        $ret[]\
    \ = array_slice($row, 0, $x);\n    }\n    return $ret;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v == $x;\n        });\n    }\n    return\
    \ $result;\n}\n", "    $row = [];\n    foreach ($lst as $row) {\n        if (in_array($x,\
    \ $row)) {\n            return $row;\n        }\n    }\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n    sort($result,\
    \ SORT_NUMERIC);\n    sort($result, SORT_NUMERIC, SORT_DESC);\n    return $result;\n\
    }\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x = 4;\n\
    \nprint_r(get_row($lst, $x));\n</code>\n<|/ a tags=php,multidimensional-array,arrays,sorting\
    \ |>\n<| a |>\n<code>\n<?php\n$arr = [\n    [\n        1 => [\n            1 =>\
    \ 1,\n            2 => 2,\n            3 => 3,\n        ],\n        2 => [\n \
    \           1 => 4,\n            2 => 5,\n            3 => 6,\n        ],\n  \
    \      3 => [\n            1 => 7,\n            2 => 8,\n            3 => 9,\n\
    \        ],\n    ],\n    [\n        1 => [\n            1 => 10,\n           \
    \ 2 => 11,\n            3 => 12,\n        ],\n        2 => [\n            1 =>\
    \ 13,\n            2 => 14,\n            3 => 15,\n        ],\n        3 => [\n\
    \            1 => 16,\n            2 => 17,\n            3 => 18,\n        ],\n\
    \    ],\n];\n\n$search = [\n    1 => [\n        1 => 1,\n        2 => 2,\n   \
    \     3 => 3,\n    ],\n    2 => [\n        1 => 4,\n        2 => 5,\n        3\
    \ => 6,\n    ],\n    3 => [\n        1 => 7,\n        2 => 8,\n        3 => 9,\n\
    \    ],\n];\n\n$result = [];\nforeach ($arr as $key => $row) {\n    foreach ($row\
    \ as $column => $value) {\n        if ($search[$column] === $value) {\n      \
    \      $result[] = [$key, $column];\n        }\n    }\n}\n\nvar_dump($result);\n\
    </code>\n<|/ a tags=php,multidimensional-array,arrays,sorting dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n$arr = [\n    [\n        1 => [\n            1 => 1,\n\
    \            2 => 2,\n            3 => 3,\n        ],\n        2 => [\n      \
    \      1 => 4,\n            2 => 5,\n            3 => 6,\n        ],\n       \
    \ 3 => [\n            1 => 7,\n            2 => 8,\n            3 => 9,\n    \
    \    ],\n    ],\n    [", "    $ret = [];\n    foreach ($lst as $row) {\n     \
    \   $ret[] = array_filter($row, function($v) use ($x) {\n            return $v\
    \ == $x;\n        });\n    }\n    array_multisort(array_column($ret, '0'), SORT_DESC,\
    \ array_column($ret, '1'), SORT_DESC, $ret);\n    return $ret;\n}\n\n$lst = [\n\
    \    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x = 8;\nprint_r(get_row($lst,\
    \ $x));", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_filter($row, function ($item) use ($x) {\n            return $item ==\
    \ $x;\n        });\n    }\n    return $result;\n}\n", "    $result = [];\n   \
    \ foreach ($lst as $row) {\n        $result[] = array_filter($row, function($v)\
    \ use ($x) {\n            return $v === $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $rows = array_count_values(array_column($lst, 'row'));\n    $rows =\
    \ array_filter($rows, function($v) use ($x) {\n        return $v === $x;\n   \
    \ });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n   \
    \ $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_unique($rows);\n\
    \    $rows = array_map(function($v) use ($lst) {\n        return array_column($lst,\
    \ 'row', $v);\n    }, $rows);\n    $rows = array_map(function($v) use ($rows)\
    \ {\n        return array_column($v, 'column');\n    }, $rows);\n    $rows = array_map(function($v)\
    \ use ($rows) {\n        return array_combine($rows, $v);\n    }, $rows);\n  \
    \  $rows = array_map(function($v) use ($rows) {\n        return array_map(function($v)\
    \ use ($rows) {\n            return array_combine($rows, $v);\n        }, $v);\n\
    \    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n        return\
    \ array_map(function($v) use ($rows) {\n            return array_combine($rows,\
    \ $v);\n        }, $v);\n    }, $rows);\n    $rows = array_map(function($v) use\
    \ ($rows) {\n        return array_map(function($v) use ($rows) {\n           \
    \ return array_combine($rows, $v);\n        }, $v);\n    }, $rows);\n    $rows\
    \ = array_map(function($v) use ($rows) {\n        return array_map(function($v)\
    \ use ($rows) {\n            return array_combine($rows, $v);\n        }, $v);\n\
    \    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n        return\
    \ array_map(function($v) use ($rows) {\n            return array_combine($rows,\
    \ $v);\n        }, $v);\n    }, $rows);\n    $rows = array_map(function($v) use\
    \ ($rows) {\n        return array_map(function($v) use ($rows) {\n           \
    \ return array_combine($rows, $v);\n        }, $v);\n    }, $rows);\n    $rows\
    \ = array_map(function($v) use ($rows) {\n        return array_map(function($v)\
    \ use ($rows) {\n            return array_combine($rows, $v);\n        }, $v);\n\
    \    }, $rows);\n    $rows = array_map(function($v) use ($rows) {\n        return\
    \ array_map(function($v) use ($rows) {\n            return array_combine($rows,\
    \ $v);\n        }, $v);\n    }, $rows);\n    $rows = ", "    $result = [];\n \
    \   foreach ($lst as $row) {\n        $result[] = array_filter($row, function($v)\
    \ use ($x) {\n            return $v == $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $rows = array_count_values(array_map(function($v) { return $v[0]; },\
    \ $lst));\n    $rows = array_filter($rows, function($v) { return $v > 0; });\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $cols\
    \ = array_count_values(array_map(function($v) { return $v[1]; }, $lst));\n   \
    \ $cols = array_filter($cols, function($v) { return $v > 0; });\n    $cols = array_keys($cols);\n\
    \    $cols = array_reverse($cols);\n    $coords = [];\n    foreach ($rows as $row)\
    \ {\n        $coords[] = array_map(function($v) use ($x, $row, $cols) {\n    \
    \        return $v[0] + ($v[1] * ($x - $row));\n        }, $lst);\n    }\n   \
    \ array_multisort($coords, SORT_DESC, $coords);\n    return $coords;\n}\n", " \
    \   $ret = [];\n    foreach ($lst as $row) {\n        $ret[] = array_search($x,\
    \ $row);\n    }\n    sort($ret);\n    sort($ret, SORT_NUMERIC);\n    return $ret;\n\
    }\n", "    $row = [];\n    foreach ($lst as $row) {\n        $row[] = $row[$x];\n\
    \    }\n    sort($row);\n    sort($row, SORT_NUMERIC);\n    return $row;\n}",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($item) use ($x) {\n            return $item == $x;\n        });\n\
    \    }\n    return $result;\n}\n", "    $result = array();\n    foreach ($lst\
    \ as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    sort($result);\n\
    \    foreach ($result as $row) {\n        sort($row);\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function ($v) use ($x) {\n           \
    \ return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $ret\
    \ = [];\n    foreach ($lst as $row) {\n        $ret[] = array_slice($row, 0, $x);\n\
    \    }\n    sort($ret);\n    foreach ($ret as $row) {\n        sort($row);\n \
    \   }\n    return $ret;\n}\n", "    $rows = array_count_values($lst);\n    $sorted_rows\
    \ = array_keys($rows);\n    $sorted_rows = array_reverse($sorted_rows);\n    $rows\
    \ = array_intersect_key($rows, array_flip($sorted_rows));\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n\
    \    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n    $rows = array_flip($rows);\n",
  "    $result = array();\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_DESC, $result);\n    return $result;\n}\n", "    $rows = array_count_values(array_map(function($v)\
    \ { return $v[0]; }, $lst));\n    arsort($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_map(function($v) { return array_slice($v, 1); }, $lst);\n    return\
    \ $rows;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n        $result[]\
    \ = array_filter($row, function ($v) use ($x) {\n            return $v === $x;\n\
    \        });\n    }\n    return $result;\n}\n", "    $rows = array_count_values(array_map(function($row)\
    \ {\n        return array_count_values($row);\n    }, $lst));\n    $rows = array_filter($rows,\
    \ function($row) {\n        return $row[$x] > 0;\n    });\n    asort($rows);\n\
    \    arsort($rows);\n    $rows = array_map(function($row) {\n        return array_keys($row);\n\
    \    }, $rows);\n    return $rows;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $lst);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function($v) { return array_slice($v, 0, 2); }, $rows);\n\
    \    $rows = array_map(function(", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row = $rows[$x];\n    $columns = array_count_values(array_column($lst,\
    \ 'column'));\n    $columns = array_reverse($columns);\n    $coords = [];\n  \
    \  foreach ($row as $i => $row) {\n        foreach ($columns as $j => $col) {\n\
    \            $coords[] = [$i, $j];\n        }\n    }\n    array_multisort($coords,\
    \ SORT_DESC, SORT_NUMERIC, $lst);\n    return $coords;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function($e)\
    \ use ($x) {\n            return $e == $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $rows = array_count_values(array_column($lst, 'row'));\n    $row =\
    \ $rows[$x];\n    $cols = array_count_values(array_column($lst, 'col'));\n   \
    \ $col = $cols[$x];\n    $coords = array();\n    foreach ($lst as $row) {\n  \
    \      $coords[] = array(\n            array('row' => $row, 'col' => $col),\n\
    \        );\n    }\n    array_multisort($coords);\n    return $coords;\n}\n$lst\
    \ = array(\n    array('row' => 1, 'col' => 1),\n    array('row' => 1, 'col' =>\
    \ 2),\n    array('row' => 1, 'col' => 3),\n    array('row' => 2, 'col' => 1),\n\
    \    array('row' => 2, 'col' => 2),\n    array('row' => 2, 'col' => 3),\n    array('row'\
    \ => 3, 'col' => 1),\n    array('row' => 3, 'col' => 2),\n    array('row' => 3,\
    \ 'col' => 3),\n);\nprint_r(get_row($lst, 1));\nprint_r(get_row($lst, 2));\nprint_r(get_row($lst,\
    \ 3));\nprint_r(get_row($lst, 4));\nprint_r(get_row($lst, 5));\nprint_r(get_row($lst,\
    \ 6));\nprint_r(get_row($lst, 7));\nprint_r(get_row($lst, 8));\nprint_r(get_row($lst,\
    \ 9));\nprint_r(get_row($lst, 10));\nprint_r(get_row($lst, 11));\nprint_r(get_row($lst,\
    \ 12));\nprint_r(get_row($lst, 13));\nprint_r(get_row($lst, 14));\nprint_r(get_row($lst,\
    \ 15));\nprint_r(get_row($lst, 16));\nprint_r(get_row($lst, 17));\nprint_r(get_row($lst,\
    \ 18));\nprint_r(get_row($lst, 19));\nprint_r(get_row($lst, 20));\nprint_r(get_row($lst,\
    \ 21));\nprint_r(get_row($lst, 22));\nprint_r(get_row($lst, 23));\nprint_r(get_row($lst,\
    \ 24));\nprint_r(get_row($lst, 25));\nprint_r(get_row($lst, 26));\nprint_r(get_row($lst,\
    \ 27));\nprint_r(get_row($lst, 28));\nprint_r(get_row($lst, 29));\nprint_r(get_row($lst,\
    \ 30));\nprint_r(get_row($lst, 31));\nprint_r(get_row($lst, 32", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $rows = array_count_values($lst);\n    $rows\
    \ = array_filter($rows);\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_map(function($row) {\n        return array_slice($row, 0, 2);\n\
    \    }, $rows);\n    $rows = array_map(function($row) {\n        return array_slice($row,\
    \ 2);\n    }, $rows);\n    return $rows;\n}\n$lst = [\n    [1, 2, 3],\n    [4,\
    \ 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$rows = get_row($lst, $x);\nprint_r($rows);",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($result, 1), SORT_DESC, array_column($result,\
    \ 0), SORT_ASC, $result);\n    return $result;\n}\n$lst = [\n    [1, 2, 3],\n\
    \    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($item) use ($x) {\n            return $item == $x;\n        });\n \
    \   }\n    return $result;\n}\n", "    $row = [];\n    foreach ($lst as $i =>\
    \ $row) {\n        if ($row[$x] !== null) {\n            $row[$x] = $i;\n    \
    \        break;\n        }\n    }\n    return $row;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, 1), SORT_DESC, array_column($result,\
    \ 0), SORT_ASC, $result);\n    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_slice($rows, 0, $x);\n    $rows = array_map(function($row) {\n\
    \        return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n    $rows = array_map(function($row) {\n \
    \       return array_map(function($col) {\n            return array($row, $col);\n\
    \        }, $row);\n    }, $rows);\n", "    $result = [];\n    foreach ($lst as\
    \ $row) {\n        $result[] = array_filter($row, function($v) use ($x) {\n  \
    \          return $v === $x;\n        });\n    }\n    return $result;\n}\n", " \
    \   $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n\
    \n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result\
    \ = get_row($lst, $x);\nprint_r($result);", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows, function($v) use ($x) {\n        return\
    \ $v > $x;\n    });\n    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n\
    \    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows =\
    \ array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count($rows), ''));\n  \
    \  $rows = array_merge($rows, array_fill(0, count($rows), ''));\n    $rows = array_merge($rows,\
    \ array_fill(0, count($rows), ''));\n    $rows = array_merge($rows, array_fill(0,\
    \ count($rows), ''));\n    $rows = array_merge($rows, array_fill(0, count($rows),\
    \ ''));\n    $rows = array_merge($rows, array_fill(0, count(", "    $result =\
    \ array();\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($result, '0'), SORT_DESC, SORT_NUMERIC,\
    \ $result);\n    return $result;\n}\n$lst = array(\n    array(1, 2, 3, 4),\n \
    \   array(5, 6, 7, 8),\n    array(9, 10, 11, 12),\n);\n$x = 2;\n$result = get_row($lst,\
    \ $x);\nprint_r($result);", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function ($v) use ($x) {\n           \
    \ return $v === $x;\n        });\n    }\n    array_multisort(array_column($result,\
    \ 1), SORT_DESC, array_column($result, 0), SORT_ASC, SORT_NUMERIC, $result);\n\
    \    return $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8,\
    \ 9],\n];\n$x = 4;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v == $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_slice($row, 0, $x);\n    }\n    sort($result);\n  \
    \  sort($result, SORT_NUMERIC);\n    return $result;\n}\n$lst = [\n    [1, 2,\
    \ 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n$x = 2;\n$result = get_row($lst, $x);\n\
    print_r($result);", "    $result = [];\n    foreach ($lst as $row) {\n       \
    \ $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, array_column($result, '1'), SORT_ASC, $result);\n    return\
    \ $result;\n}\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\
    $x = 2;\nprint_r(get_row($lst, $x));", "    $result = array();\n    foreach ($lst\
    \ as $row) {\n        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_reverse($result),\
    \ SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n}\n", "    $result\
    \ = array();\n    foreach($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    array_multisort(array_column($result, '0'), SORT_DESC, array_column($result,\
    \ '1'), SORT_DESC, $result);\n    return $result;\n}\n$lst = array(\n    array(\n\
    \        array(\n            1,\n            2,\n            3,\n            4,\n\
    \            5,\n            6,\n            7,\n            8,\n            9\n\
    \        ),\n        array(\n            10,\n            11,\n            12,\n\
    \            13,\n            14,\n            15,\n            16,\n        \
    \    17,\n            18,\n            19\n        )\n    ),\n    array(\n   \
    \     array(\n            20,\n            21,\n            22,\n            23,\n\
    \            24,\n            25,\n            26,\n            27,\n        \
    \    28,\n            29\n        ),\n        array(\n            30,\n      \
    \      31,\n            32,\n            33,\n            34,\n            35,\n\
    \            36,\n            37,\n            38,\n            39\n        )\n\
    \    )\n);\n$x = 8;\n$result = get_row($lst, $x);\nprint_r($result);", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        foreach ($row as $column) {\n            if ($column == $x) {\n     \
    \           $result[] = [$row, $column];\n            }\n        }\n    }\n  \
    \  sort($result);\n    sort($result, SORT_NUMERIC);\n    return $result;\n}\n",
  "    $result = [];\n    foreach ($lst as $row) {\n        $result[] = array_slice($row,\
    \ 0, $x);\n    }\n    return $result;\n}\n", "    $ret = [];\n    foreach ($lst\
    \ as $row) {\n        $ret[] = array_slice($row, 0, $x);\n    }\n    array_multisort($ret,\
    \ SORT_DESC, SORT_NUMERIC, $ret);\n    return $ret;\n}\n", "    $result = [];\n\
    \    foreach ($lst as $row) {\n        $result[] = array_filter($row, function\
    \ ($item) use ($x) {\n            return $item == $x;\n        });\n    }\n  \
    \  return $result;\n}\n\n$lst = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8,\
    \ 9],\n];\n\n$x = 2;\n$result = get_row($lst, $x);\nprint_r($result);\n</code>\n\
    Output:\n<code>\nArray\n(\n    [0] => Array\n        (\n            [0] => 2\n\
    \            [1] => 3\n        )\n\n    [1] => Array\n        (\n            [0]\
    \ => 7\n            [1] => 8\n        )\n\n)\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThanks for your answer. Your code works well but i need it to be done in\
    \ O(n) time complexity. Can you help me with that?\n<|/ c |>\n<| c |>\nI added\
    \ a solution that is O(n) time complexity\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works well but i need it to be done in O(n) time complexity.\
    \ Can you help me with that?\n<|/ c |>\n<| c |>\nI added a solution that is O(n)\
    \ time complexity\n<|/ c |>\n<| a tags=php,multidimensional-array,arrays |>\n\
    <code>\n<?php\n$arr = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n\
    $x = 2;\n$result = [];\nforeach ($arr as $row) {\n    $result[] = array_filter($row,\
    \ function ($item) use ($x) {\n        return $item == $x;\n    });\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works well\
    \ but i need it to be done in O(n) time complexity. Can you help me with that?\n\
    <|/ c |>\n<| a tags=php,multidimensional-array,arrays |>\n<code>\n$arr = [\n \
    \   [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n];\n\n$x = 2;\n$result = [];\n\
    foreach ($arr as $row) {\n    $result[] = array_filter($row, function ($item)\
    \ use ($x) {\n        return $item == $x;\n    });\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for your answer. ", "    $result = [];\n  \
    \  foreach ($lst as $row) {\n        $result[] = array_filter($row, function($v)\
    \ use ($x) {\n            return $v == $x;\n        });\n    }\n    return $result;\n\
    }\n", "    $rows = array_count_values(array_column($lst));\n    $rows = array_filter($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_keys($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, ", "    $rows\
    \ = array_count_values(array_column($lst, 'row'));\n    $rows = array_filter($rows);\n\
    \    $rows = array_keys($rows);\n    $rows = array_reverse($rows);\n    $rows\
    \ = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n    $rows\
    \ = array_map(function($row) {\n        return array_map(function($col) {\n  \
    \          return $col . '-' . $row;\n        }, $row);\n    }, $rows);\n    $rows\
    \ = array_map(function($row) {\n        return array_map(function($col) {\n  \
    \          return explode('-', $col);\n        }, $row);\n    }, $rows);\n   \
    \ $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_map(function($row) {\n        return array_map(function($col)\
    \ {\n            return $col[0] . '-' . $col[1];\n        }, $row);\n    }, $rows);\n\
    \    $rows = array_", "    $result = array();\n    foreach ($lst as $row) {\n\
    \        $result[] = array_slice($row, 0, $x);\n    }\n    array_multisort(array_column($result,\
    \ '0'), SORT_DESC, SORT_NUMERIC, $result);\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $row = array_search($x, array_keys($rows));\n    $coords = array_column($lst,\
    \ $row);\n    arsort($coords);\n    return $coords;\n}\n", "    $ret = [];\n \
    \   foreach ($lst as $row) {\n        $ret[] = array_slice($row, 0, $x);\n   \
    \ }\n    return $ret;\n}\n", "    $rows = array_count_values(array_column($lst,\
    \ 'row'));\n    $rows = array_filter($rows);\n    $rows = array_keys($rows);\n\
    \    $rows = array_reverse($rows);\n    $rows = array_slice($rows, 0, $x);\n \
    \   $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($rows, 0, $x);\n    $rows = array_slice($rows, 0, $x);\n\
    \    $rows = array_slice($", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function($v) use ($x) {\n            return\
    \ $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $result = array();\n\
    \    foreach ($lst as $row) {\n        $result[] = array_slice($row, 0, $x);\n\
    \    }\n    array_multisort(array_column($result, 1), SORT_DESC, array_column($result,\
    \ 0), SORT_ASC, SORT_NUMERIC, $result);\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        $result[] = array_filter($row,\
    \ function ($v) use ($x) {\n            return $v === $x;\n        });\n    }\n\
    \    return $result;\n}\n", "    $result = [];\n    foreach ($lst as $row) {\n\
    \        $result[] = array_filter($row, function ($v) use ($x) {\n           \
    \ return $v === $x;\n        });\n    }\n    return $result;\n}\n", "    $result\
    \ = [];\n    foreach ($lst as $row) {\n        foreach ($row as $column) {\n \
    \           if ($column == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    sort($result);\n    sort($result, SORT_NUMERIC);\n\
    \    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
