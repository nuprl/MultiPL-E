name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $digits = strlen($x);\n    if ($shift > $digits) {\n        $shift\
    \ = $digits;\n    }\n    $digits = strlen($x);\n    $result = \"\";\n    for ($i\
    \ = 0; $i < $shift; $i++) {\n        $result = $result . $x[$i];\n    }\n    return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return\
    \ $x;\n  }\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result\
    \ = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x,\
    \ $i, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = $shift\
    \ - 1; $i >= 0; $i--) {\n    $result = $result . substr($x, $i, 1);\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = str_repeat('0', $shift)\n\
    \    .str_repeat('1', $digits);\n  return $x . $reversed;\n}\n", "  $digits =\
    \ strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits\
    \ - $shift;\n  $x = str_pad($x, $shift, '0', STR_PAD_LEFT);\n  $x = substr($x,\
    \ 0, -$digits);\n  return $x;\n}\n", "  $digits = strlen($x);\n  if ($shift >\
    \ $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = str_repeat('0', $digits);\n\
    \  $reversed = substr($reversed, 0, $digits);\n  return $x . $reversed;\n}\n",
  "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits\
    \ = $digits - $shift;\n  $reversed = strrev($x);\n  return $reversed . str_pad('',\
    \ $digits, '0');\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n\
    \    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++)\
    \ {\n    $result .= substr($x, $digits - $shift - $i, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = str_split($x);\n  $result = \"\";\n  for ($i = count($digits)\
    \ - $shift - 1; $i >= 0; $i--) {\n    $result .= $digits[$i];\n  }\n  return $result;\n\
    }\n", "    $digits = strlen($x);\n    if ($shift > $digits) {\n        $shift\
    \ = $digits;\n    }\n    $x = str_pad($x, $shift, '0', STR_PAD_LEFT);\n    $x\
    \ = substr($x, 0, -$shift);\n    return $x;\n}\n", "    $digits = str_split($x);\n\
    \    if ($shift > count($digits)) {\n        return strrev($digits);\n    }\n\
    \    $digits = array_slice($digits, 0, $shift);\n    $digits[] = array_shift($digits);\n\
    \    return implode('', $digits);\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0;\
    \ $i < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n\
    \  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n\
    \    return strrev($x);\n  }\n  $digits = strlen($x);\n  $result = '';\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n\
    \    $digits--;\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if\
    \ ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = strrev($x);\n  return\
    \ $reversed . str_pad('', $digits, '0');\n}\n", "  $digits = str_split($x);\n\
    \  $shift = str_pad('', $shift, '0', STR_PAD_LEFT);\n  $digits = array_reverse($digits);\n\
    \  return implode('', array_slice($digits, 0, $shift));\n}", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $digits = $digits > 0 ? $digits : 0;\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $digits; $i++) {\n    $result = $result . $x[$i];\n  }\n  return $result;\n\
    }\n", "  $digits = str_split($x);\n  $result = \"\";\n  for ($i = count($digits)\
    \ - $shift; $i >= 0; $i--) {\n    $result .= $digits[$i];\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n \
    \ }\n  $digits = $digits - $shift;\n  $digits_reversed = strrev($x);\n  return\
    \ $digits_reversed[$digits];\n}\n", "  $digits = str_split($x);\n  $reversed =\
    \ array_reverse($digits);\n  $reversed = array_slice($reversed, $shift);\n  return\
    \ implode('', $reversed);\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift)\
    \ {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $digits_reversed =\
    \ strrev($digits);\n  return $x . $digits_reversed;\n}\n", "    $digits = str_split($x);\n\
    \    if ($shift > count($digits)) {\n        return implode('', array_reverse(array_slice($digits,\
    \ $shift)));\n    }\n    return implode('', array_slice($digits, 0, $shift));\n\
    }\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return '';\n  }\n \
    \ $shift = abs($shift);\n  if ($shift > $digits) {\n    $shift = $digits;\n  }\n\
    \  $digits = strlen($x);\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++)\
    \ {\n    $result .= $x[$digits-$i-1];\n  }\n  return $result;\n}\n", "  $digits\
    \ = str_split($x);\n  $shift = $shift % strlen($digits);\n  return implode('',\
    \ array_slice($digits, $shift, $shift));\n}\n", "  $digits = strlen($x);\n  if\
    \ ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for\
    \ ($i = $shift - 1; $i >= 0; $i--) {\n    $result = $x[$i] . $result;\n  }\n \
    \ return $result;\n}\n", "  $digits = str_split($x);\n  $shift = abs($shift);\n\
    \  $reversed_digits = array();\n  foreach ($digits as $digit) {\n    $reversed_digits[]\
    \ = $digit;\n    if ($shift > 0) {\n      $reversed_digits[] = $digits[$shift\
    \ - 1];\n    }\n    $shift -= strlen($digit);\n  }\n  return implode('', $reversed_digits);\n\
    }\n", "  $digits = str_split($x);\n  $shift = str_pad('', $shift, '0', STR_PAD_LEFT);\n\
    \  $digits = array_merge(array_slice($digits, 0, $shift), array_slice($digits,\
    \ $shift));\n  return implode('', $digits);\n}", "  $digits = str_split($x);\n\
    \  if ($shift > count($digits)) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  return implode('', array_slice($digits, 0, $shift));\n}\n", "  $digits\
    \ = str_split($x);\n  $digits_count = count($digits);\n  $shift = ($shift > $digits_count)\
    \ ? $digits_count : $shift;\n  $digits_shift = array_slice($digits, 0, $shift);\n\
    \  $digits_shift = array_merge($digits_shift, array_slice($digits, $shift));\n\
    \  return implode('', $digits_shift);\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}", "  $digits = str_split($x);\n  $shift = abs($shift);\n  foreach\
    \ ($digits as $key => $digit) {\n    if ($shift > strlen($digit)) {\n      $digits[$key]\
    \ = array_shift($digits);\n      $shift = $shift - strlen($digit);\n    }\n  }\n\
    \  return implode('', $digits);\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $digits_shift = strlen($x) - $shift;\n\
    \  return substr($x, 0, $digits_shift) . str_repeat('0', $shift - $digits_shift)\
    \ . substr($x, -$digits_shift);\n}\n", "    $digits = strlen($x);\n    if ($shift\
    \ > $digits) {\n        $shift = $digits;\n    }\n    $digits = strlen($x);\n\
    \    $result = \"\";\n    for ($i = 0; $i < $shift; $i++) {\n        $result =\
    \ $result . $x[$i];\n    }\n    return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = strrev($x);\n  return $reversed . str_pad('', $shift, '0');\n}\n",
  "  $digits = str_split($x);\n  array_shift($digits);\n  return implode('', array_merge(array_slice($digits,\
    \ 0, $shift), array_slice($digits, $shift)));\n}", "  $digits = str_split($x);\n\
    \  $reversed = array_reverse($digits);\n  return implode('', array_slice($reversed,\
    \ $shift, $shift));\n}\n", "  $digits = str_split($x);\n  if ($shift > count($digits))\
    \ {\n    return implode('', array_reverse($digits));\n  }\n  $digits = array_slice($digits,\
    \ 0, $shift);\n  return implode('', $digits);\n}", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = strrev($x);\n  return $reversed . str_pad('', $digits, '0');\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result\
    \ = $result . $x[$i];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $x = substr($x, 0, $digits);\n  $x = $x . substr($x, $digits);\n  return $x;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result\
    \ = $x[$i] . $result;\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $x = substr($x, 0, $digits);\n  $x = $x . substr($x, $digits);\n  return $x;\n\
    }", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return $x;\n  }\n  if\
    \ ($shift > $digits) {\n    return $x . str_repeat('9', $digits - $shift);\n \
    \ }\n  $result = $x;\n  for ($i = 0; $i < $shift; $i++) {\n    $result = substr($result,\
    \ 0, 1) . substr($result, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits,\
    \ 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits ==\
    \ 0) {\n    return $x;\n  }\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x{0};\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift)\
    \ {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = strrev($x);\n\
    \  return $reversed . str_pad('', $digits, '0');\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $digits = $digits > 0 ? $digits : 0;\n  $reversed = strrev($x);\n  return $reversed\
    \ . str_pad('', $digits, '0');\n}\n", "  $digits = strlen($x);\n  if ($shift >\
    \ $digits) {\n    return strrev($x);\n  }\n  $digits_shift = $digits - $shift;\n\
    \  $x_reversed = strrev($x);\n  return substr($x_reversed, 0, $digits_shift) .\
    \ str_pad(substr($x_reversed, $digits_shift), $shift, '0');\n}\n", "  $digits\
    \ = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result\
    \ = \"\";\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result = $result . substr($x,\
    \ $i, 1);\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  if ($shift\
    \ > count($digits)) {\n    return implode('', array_reverse($digits));\n  }\n\
    \  $digits = array_slice($digits, 0, $shift);\n  return implode('', $digits);\n\
    }\n", "  $digits = str_split($x);\n  if ($shift > count($digits)) {\n    return\
    \ implode('', array_reverse($digits));\n  }\n  $digits = array_slice($digits,\
    \ 0, $shift);\n  return implode('', $digits);\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $x = str_pad($x, $shift, '0', STR_PAD_LEFT);\n  $x = substr($x, 0, -$digits);\n\
    \  return $x;\n}", "    $digits = strlen($x);\n    if ($shift > $digits) {\n \
    \       return strrev($x);\n    }\n    $result = \"\";\n    for ($i = 0; $i <\
    \ $shift; $i++) {\n        $result .= $x[$digits-$i-1];\n    }\n    return $result;\n\
    }", "  $digits = str_split($x);\n  $result = \"\";\n  foreach ($digits as $key\
    \ => $digit) {\n    $result .= $digits[$key] . $digits[$key + $shift];\n  }\n\
    \  return $result;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits)\
    \ {\n        $shift = $digits;\n    }\n    $digits = $digits - $shift;\n    $x\
    \ = substr($x, 0, $digits);\n    $x = $x . substr($x, $digits);\n    return $x;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $digits = $digits - $shift;\n  $x = '';\n  for ($i = 0; $i < $digits;\
    \ $i++) {\n    $x = $x . substr($x, $i + 1);\n  }\n  return $x;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $reversed = str_repeat('0', $digits);\n  $reversed = substr($reversed,\
    \ 0, $digits);\n  return $x . $reversed;\n}\n", "  $digits = strlen($x);\n  if\
    \ ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = str_repeat('0', $shift);\n  $reversed = substr_replace($reversed,\
    \ $x, $digits, 0);\n  return $reversed;\n}\n", "  $digits = strlen($x);\n  if\
    \ ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = str_repeat('0', $digits);\n  $reversed = substr($reversed, 0, $digits);\n\
    \  return $x . $reversed;\n}\n", "  $digits = str_split($x);\n  $result = \"\"\
    ;\n  for ($i = count($digits) - $shift; $i >= 0; $i--) {\n    $result .= $digits[$i];\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $result .= substr($x, $i, 1);\n  }\n  return $result;\n}", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $x = substr($x, 0, $digits);\n  $x = $x . substr($x, $digits);\n\
    \  return $x;\n}\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return\
    \ $x;\n  }\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result\
    \ = '';\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result = $x[$i] . $result;\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result\
    \ = $x[$i] . $result;\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $digits = $digits > 0 ? $digits : 0;\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $digits; $i++) {\n    $result = $result . $x[$i];\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result\
    \ . substr($x, $digits, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = strrev($x);\n  return $reversed . str_repeat('0', $digits);\n}\n",
  "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n\
    \  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits\
    \ - $i - 1];\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  $reversed\
    \ = array_reverse($digits);\n  return implode('', array_slice($reversed, $shift,\
    \ $shift));\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = str_repeat('0', $digits);\n\
    \  $reversed = substr($reversed, 0, $digits);\n  return $x . $reversed;\n}\n",
  "  $digits = str_split($x);\n  if ($shift > count($digits)) {\n    return implode('',\
    \ array_reverse($digits));\n  }\n  return implode('', array_slice($digits, 0,\
    \ $shift));\n}", "  $digits = str_split($x);\n  $shift = str_pad('', $shift, '0',\
    \ STR_PAD_LEFT);\n  $digits = array_reverse($digits);\n  return implode('', array_slice($digits,\
    \ 0, $shift));\n}", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n   \
    \ return $x;\n  }\n  $digits = $digits - $shift;\n  $digits = $digits > 0 ? $digits\
    \ : 0;\n  $result = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n    $result =\
    \ $result . $x[$i];\n  }\n  return $result;\n}", "    $digits = str_split($x);\n\
    \    if ($shift > count($digits)) {\n        $digits = array_reverse($digits);\n\
    \    }\n    return implode('', array_slice($digits, $shift));\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $reversed = strrev($x);\n  return $reversed . str_repeat('0',\
    \ $digits);\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = strrev($x);\n  return\
    \ $reversed . str_pad('', $shift, '0');\n}\n", "    $digits = strlen($x);\n  \
    \  if ($digits <= $shift) {\n        return $x;\n    }\n    $result = \"\";\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $result .= $x[$i];\n    }\n  \
    \  for ($i = $shift; $i < $digits; $i++) {\n        $result .= $x[$i - $shift];\n\
    \    }\n    return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $digits = $shift - $digits;\n  $x = str_pad($x,\
    \ $shift, '0', STR_PAD_LEFT);\n  $x = substr($x, 0, -$digits);\n  return $x;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result\
    \ .= $x[$i];\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  if\
    \ ($shift > count($digits)) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  $digits = array_slice($digits, 0, $shift);\n  return implode('', $digits);\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result\
    \ . substr($x, $digits, 1);\n  }\n  return $result;\n}", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $x = str_pad('', $digits, '0', STR_PAD_LEFT);\n  $x = $x . str_repeat('0',\
    \ $shift);\n  return $x;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = $shift - 1; $i\
    \ >= 0; $i--) {\n    $result = $x[$i] . $result;\n  }\n  return $result;\n}",
  "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n\
    \  $digits = $digits - $shift;\n  $digits = $digits < 0 ? 0 : $digits;\n  $result\
    \ = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n    $result = $result . $x[$i\
    \ + $shift];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = $shift\
    \ - 1; $i >= 0; $i--) {\n    $result = $result . $x[$i];\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $digits_shift = strlen($x) - $shift;\n  return substr($x, 0, $digits_shift)\
    \ . substr($x, -$digits_shift);\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0;\
    \ $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result\
    \ . substr($x, $digits, 1);\n  }\n  return $result;\n}\n", "    $digits = strlen($x);\n\
    \    if ($digits <= $shift) {\n        return $x;\n    }\n    $result = \"\";\n\
    \    for ($i = $shift; $i >= $digits; $i--) {\n        $result .= $x[$i];\n  \
    \  }\n    return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift)\
    \ {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $x = str_pad($x, $digits,\
    \ 0, STR_PAD_LEFT);\n  $x = substr($x, 0, -$digits);\n  return $x;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $reversed = strrev($x);\n  return $reversed . str_pad('',\
    \ $shift, '0');\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits) {\n\
    \        return strrev($x);\n    }\n    $digits = $digits - $shift;\n    $x =\
    \ substr($x, 0, $digits);\n    $x = $x . str_repeat('0', $shift);\n    return\
    \ $x;\n}", "  $digits = str_split($x);\n  $reversed = array_reverse($digits);\n\
    \  return implode('', array_slice($reversed, $shift));\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= substr($x, $digits - $shift\
    \ - $i, 1);\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  if ($shift\
    \ > count($digits)) {\n    return implode('', array_reverse($digits));\n  }\n\
    \  $digits = array_slice($digits, 0, $shift);\n  return implode('', $digits);\n\
    }\n", "    $digits = strlen($x);\n    if ($shift > $digits) {\n        return\
    \ strrev($x);\n    }\n    $result = \"\";\n    for ($i = 0; $i < $shift; $i++)\
    \ {\n        $result .= $x[$digits-$i-1];\n    }\n    return $result;\n}\n", " \
    \ $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits\
    \ = $digits - $shift;\n  $reversed = str_repeat('0', $digits);\n  $reversed =\
    \ substr($reversed, 0, $digits);\n  return $x . $reversed;\n}\n", "    $digits\
    \ = strlen($x);\n    if ($shift > $digits) {\n        return strrev($x);\n   \
    \ }\n    $result = '';\n    for ($i = 0; $i < $shift; $i++) {\n        $result\
    \ = $result . substr($x, $digits, 1);\n    }\n    return $result;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $reversed = str_repeat('0', $digits);\n  $reversed = substr($reversed,\
    \ 0, $digits);\n  return $reversed . $x;\n}\n", "  $digits = strlen($x);\n  if\
    \ ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = str_repeat('0', $digits);\n  $reversed = substr($reversed, 0, $digits);\n\
    \  return $x . $reversed;\n}", "  $digits = strlen($x);\n  if ($digits <= $shift)\
    \ {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $x = str_pad('', $digits,\
    \ '0', STR_PAD_LEFT);\n  $x = substr($x, 0, $shift + 1);\n  $x = $x . substr($x,\
    \ $shift, $digits);\n  return $x;\n}\n", "  $digits = strlen($x);\n  if ($digits\
    \ <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $digits\
    \ = $digits > 0 ? $digits : -$digits;\n  $x = str_pad($x, $shift, '0', STR_PAD_LEFT);\n\
    \  $x = substr($x, 0, $digits);\n  return $x;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $reversed = strrev($x);\n  return $reversed . str_pad('', $digits, '0');\n\
    }\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return '';\n  }\n \
    \ if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return\
    \ strrev($x);\n  }\n  $result = '';\n  for ($i = $shift - 1; $i >= 0; $i--) {\n\
    \    $result = $x[$i] . $result;\n  }\n  return $result;\n}", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits - $shift - $i];\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = $shift - 1; $i\
    \ >= 0; $i--) {\n    $result = $x[$i] . $result;\n  }\n  return $result;\n}",
  "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits\
    \ = $digits - $shift;\n  $x = substr($x, 0, $digits);\n  $x = $x . substr($x,\
    \ $digits);\n  return $x;\n}\n", "  $digits = str_split($x);\n  $result = \"\"\
    ;\n  for ($i = count($digits) - $shift; $i >= 0; $i--) {\n    $result .= $digits[$i];\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n\
    \    return $x;\n  }\n  $shift = abs($shift);\n  if ($shift > $digits) {\n   \
    \ $shift = $digits;\n  }\n  $digits = strlen($x);\n  $result = '';\n  for ($i\
    \ = 0; $i < $digits; $i++) {\n    $result = $result . substr($x, $i, 1);\n   \
    \ if ($shift > 0) {\n      $result = substr($result, 0, $shift - 1) . $result;\n\
    \    }\n    $shift -= 1;\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n\
    \  $shift = abs($shift);\n  if ($shift > count($digits)) {\n    $shift = count($digits)\
    \ - $shift;\n  }\n  $digits = array_slice($digits, $shift);\n  $digits = array_reverse($digits);\n\
    \  return implode('', $digits);\n}\n", "  $digits = str_split($x);\n  $shift =\
    \ abs($shift);\n  $reversed = array();\n  foreach ($digits as $key => $digit)\
    \ {\n    if ($shift > $key) {\n      $reversed[] = $digit;\n      $shift -= $key;\n\
    \    }\n  }\n  return implode('', $reversed);\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits_shift = $digits -\
    \ $shift;\n  $digits_shift %= $digits;\n  return substr($x, 0, $digits_shift)\
    \ . substr($x, $digits_shift);\n}\n", "  $digits = strlen($x);\n  if ($digits\
    \ <= $shift) {\n    return $x;\n  }\n  $digits_shift = $digits - $shift;\n  $x_reversed\
    \ = strrev($x);\n  $x_reversed = substr($x_reversed, 0, $digits_shift) . substr($x_reversed,\
    \ $digits_shift);\n  return $x_reversed;\n}\n", "    $digits = strlen($x);\n \
    \   if ($shift > $digits) {\n        return strrev($x);\n    }\n    $result =\
    \ '';\n    for ($i = 0; $i < $shift; $i++) {\n        $result = $result . substr($x,\
    \ $digits, 1);\n    }\n    return $result;\n}\n", "  $digits = strlen($x);\n \
    \ if ($digits <= $shift) {\n    return $x;\n  }\n  $digits_shift = $digits - $shift;\n\
    \  $x_reversed = strrev($x);\n  return $x_reversed[$digits_shift % strlen($x_reversed)];\n\
    }", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits\
    \ - $i - 1];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $digits = strlen($x);\n  $result\
    \ = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n    $result .= $x[$digits - $i\
    \ - $shift];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $i, 1);\n  }\n  return\
    \ $result;\n}", "    $digits = strlen($x);\n    if ($shift > $digits) {\n    \
    \    return strrev($x);\n    }\n    $result = \"\";\n    for ($i = $shift - 1;\
    \ $i >= 0; $i--) {\n        $result .= $x[$i];\n    }\n    return $result;\n}\n",
  "  $digits = strlen($x);\n  if ($digits == 0) {\n    return $x;\n  }\n  $shift %=\
    \ $digits;\n  return $x . substr($x, $shift, $digits);\n}\n", "    $digits = str_split($x);\n\
    \    $result = \"\";\n    foreach ($digits as $k => $digit) {\n        if ($k\
    \ > $shift) {\n            $result .= $digit;\n        } else {\n            $result\
    \ .= $digits[$k - $shift];\n        }\n    }\n    return $result;\n}\n", "   \
    \ $digits = strlen($x);\n    if ($shift > $digits) {\n        $shift = $digits;\n\
    \    }\n    $digits = strlen($x);\n    $result = \"\";\n    for ($i = 0; $i <\
    \ $shift; $i++) {\n        $result .= $x[$digits-$i-1];\n    }\n    return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = '';\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result =\
    \ $x[$i] . $result;\n  }\n  return $result;\n}\n", "    $digits = str_split($x);\n\
    \    $result = \"\";\n    foreach ($digits as $key => $digit) {\n        $result\
    \ .= $digits[$key] . $digits[$key + $shift];\n    }\n    return $result;\n}\n\
    </code>\n<|/ a tags=php,algorithm,math |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any libraries other than PHP's native ones. I guess I should rephrase\
    \ my question to make it more clear.\n<|/ c |>\n<| c |>\nI added a PHP solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot\
    \ use any libraries other than PHP's native ones. I guess I should rephrase my\
    \ question to make it more clear.\n<|/ c |>\n<| c |>\nI added a PHP solution to\
    \ my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately I cannot\
    \ use any libraries other than PHP's native ones. I guess I should rephrase my\
    \ question to make it more clear.\n<|/ c |>\n<| a dscore=1 |>\nI believe that\
    \ what you are looking for is called a circular shift.\nHere is a simple implementation\
    \ in PHP:\n<code>", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return\
    \ strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n \
    \   $result .= $x[$digits-$i-1];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $digits = strlen($x);\n\
    \  $result = '';\n  for ($i = 0; $i < $digits; $i++) {\n    $result = $result\
    \ . substr($x, $i, 1) . substr($x, $i + $shift, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $digits = strlen($x);\n  $result = '';\n  for ($i = 0; $i < $digits; $i++)\
    \ {\n    $result = $result . substr($x, $i, 1) . substr($x, $i + $shift, 1);\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n \
    \ }\n  $digits = $digits - $shift;\n  $x = str_pad('', $digits, '0', STR_PAD_LEFT);\n\
    \  $x = $x . str_repeat('1', $shift);\n  return $x;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n\
    \  $digits = $digits > 0 ? $digits : 0;\n  $result = \"\";\n  for ($i = 0; $i\
    \ < $digits; $i++) {\n    $result = $result . $x[$i];\n  }\n  return $result;\n\
    }", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= substr($x,\
    \ $digits - $shift - $i, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= substr($x, $digits - $shift\
    \ - $i, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n    return\
    \ '';\n  }\n  $digits = $digits - $shift;\n  if ($digits < 0) {\n    $digits =\
    \ $digits + $shift;\n  }\n  $result = \"\";\n  for ($i = 0; $i < $digits; $i++)\
    \ {\n    $result = $result . $x[$i];\n  }\n  return $result;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result\
    \ = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x,\
    \ $digits, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits\
    \ <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $x = substr($x,\
    \ 0, $digits);\n  $x = $x . substr($x, $digits);\n  return $x;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $digits =\
    \ $digits - $shift;\n  $reversed = strrev($x);\n  return $reversed . str_pad('',\
    \ $digits, '0');\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n\
    \    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++)\
    \ {\n    $result .= substr($x, $digits - $shift - $i, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = str_split($x);\n  array_shift($digits);\n  return implode('',\
    \ array_merge(array_slice($digits, 0, $shift), array_slice($digits, $shift)));\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits\
    \ - $shift - $i];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if\
    \ ($digits <= $shift) {\n    return $x;\n  }\n  $result = \"\";\n  for ($i = $shift\
    \ - 1; $i >= 0; $i--) {\n    $result = $x[$i] . $result;\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n \
    \ }\n  $digits = $digits - $shift;\n  $digits = $digits > 0 ? $digits : 0;\n \
    \ $result = \"\";\n  for ($i = 0; $i < $digits; $i++) {\n    $result = $result\
    \ . $x[$i];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits\
    \ == 0) {\n    return '';\n  }\n  $shift = $digits - $shift;\n  $x = str_pad($x,\
    \ $shift, '0', STR_PAD_LEFT);\n  $x = substr($x, 0, -$shift);\n  return $x;\n\
    }\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n \
    \ }\n  $digits_shift = $digits - $shift;\n  $digits_remainder = $digits % $shift;\n\
    \  $digits_shift = $shift - $digits_remainder;\n  $digits_shift = $digits_shift\
    \ < 0 ? $digits_shift + $shift : $digits_shift;\n  $digits_shift = $digits_shift\
    \ > $digits ? $digits : $digits_shift;\n  $digits_remainder = strlen($x) % $shift;\n\
    \  $digits_remainder = $shift - $digits_remainder;\n  $digits_remainder = $digits_remainder\
    \ < 0 ? $digits_remainder + $shift : $digits_remainder;\n  $digits_remainder =\
    \ $digits_remainder > $shift ? $shift : $digits_remainder;\n  $digits_shift =\
    \ $digits_shift > $digits_remainder ? $digits_shift - $digits_remainder : $digits_shift;\n\
    \  $digits = strlen($x);\n  $result = \"\";\n  for ($i = 0; $i < $digits_shift;\
    \ $i++) {\n    $result .= $x[$i];\n  }\n  for ($i = 0; $i < $digits_remainder;\
    \ $i++) {\n    $result .= $x[$digits - $shift - $i];\n  }\n  return $result;\n\
    }\n", "  $digits = str_split($x);\n  $result = '';\n  for ($i = count($digits)\
    \ - $shift, $j = 0; $i < count($digits); $i++, $j++) {\n    $result .= $digits[$i]\
    \ . $digits[$j];\n  }\n  return $result;\n}", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = $shift\
    \ - 1; $i >= 0; $i--) {\n    $result = $x[$i] . $result;\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n \
    \ }\n  $digits = $digits - $shift;\n  $x = str_pad('', $digits, '0', STR_PAD_LEFT);\n\
    \  $x = $x . str_repeat('1', $shift);\n  return $x;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return $result;\n\
    }", "  $digits = str_split($x);\n  $result = \"\";\n  foreach ($digits as $key\
    \ => $digit) {\n    $result .= $digit . $digits[$key + $shift];\n  }\n  return\
    \ $result;\n}\n", "  $digits = str_split($x);\n  if ($shift > count($digits))\
    \ {\n    return implode('', array_reverse($digits));\n  }\n  $digits = array_slice($digits,\
    \ 0, $shift);\n  return implode('', $digits);\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits\
    \ - $shift - $i, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n\
    \  }\n  return $result;\n}\n", "    $digits = str_split($x);\n    $result = \"\
    \";\n    foreach ($digits as $digit) {\n        $result .= $digit;\n        if\
    \ ($shift > 0) {\n            $result .= $digits[$shift - 1];\n        }\n   \
    \     $shift -= strlen($digit);\n    }\n    return $result;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result\
    \ = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n\
    \  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits)\
    \ {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $result = $result . substr($x, $i, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n\
    \  }\n  return $result;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits)\
    \ {\n        return strrev($x);\n    }\n    $result = \"\";\n    for ($i = 0;\
    \ $i < $shift; $i++) {\n        $result .= $x[$digits-$i-1];\n    }\n    return\
    \ $result;\n}\n", "  $digits = str_split($x);\n  if ($shift > count($digits))\
    \ {\n    return strrev($digits);\n  }\n  $result = \"\";\n  for ($i = count($digits)\
    \ - $shift; $i >= 0; $i--) {\n    $result .= $digits[$i];\n  }\n  return $result;\n\
    }", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n\
    \  $digits = $digits - $shift;\n  $digits_reversed = str_repeat('0', $digits);\n\
    \  $reversed = strrev($digits_reversed);\n  return $x . $reversed;\n}\n", "  $digits\
    \ = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $digits_left\
    \ = strlen($x) - $shift;\n  $digits_right = strlen($x) - $digits_left;\n  $digits_left_digits\
    \ = strlen($x) - $digits_left - 1;\n  $digits_right_digits = strlen($x) - $digits_right\
    \ - 1;\n  $digits_left_digits_reversed = strrev($digits_left_digits);\n  $digits_right_digits_reversed\
    \ = strrev($digits_right_digits);\n  $x = str_pad($x, $digits_left + $digits_right,\
    \ $digits_left_digits . $digits_right_digits, STR_PAD_RIGHT);\n  return substr($x,\
    \ $digits_left, $digits_left + $digits_right);\n}", "  $digits = str_split($x);\n\
    \  $result = \"\";\n  foreach ($digits as $key => $digit) {\n    $result .= $digit\
    \ . $digits[$key + $shift];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n\
    \  }\n  return $result;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits)\
    \ {\n        $shift = $digits;\n    }\n    $x = str_pad('', $shift, '0', STR_PAD_LEFT);\n\
    \    for ($i = $shift - 1; $i >= 0; $i--) {\n        $x = $x[$i] . $x[$i + $digits];\n\
    \    }\n    return $x;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits)\
    \ {\n        $shift = $digits;\n    }\n    $digits = strlen($x);\n    $result\
    \ = '';\n    for ($i = 0; $i < $shift; $i++) {\n        $result = $result . substr($x,\
    \ $i, 1);\n    }\n    return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return\
    \ strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i < $shift; $i++) {\n   \
    \ $result = $result . substr($x, $digits, 1);\n    $digits--;\n  }\n  return $result;\n\
    }\n", "    $digits = str_split($x);\n    if ($shift > count($digits)) {\n    \
    \    $digits = array_reverse($digits);\n    }\n    return implode('', array_slice($digits,\
    \ 0, $shift));\n}\n", "  $digits = str_split($x);\n  $result = \"\";\n  foreach\
    \ ($digits as $key => $digit) {\n    $result .= $digits[$key] . $digits[$key +\
    \ $shift];\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  $shift\
    \ = abs($shift);\n  $shifts = array_fill(0, $shift, 0);\n  $shifts[$shift - 1]++;\n\
    \  $shifts[$shift]--;\n  $result = \"\";\n  foreach ($digits as $digit) {\n  \
    \  $result .= $digit * $shifts[strlen($digits) - 1 - strlen($digit)];\n  }\n \
    \ return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits == 0) {\n   \
    \ return '';\n  }\n  $shift = $shift % $digits;\n  if ($shift == 0) {\n    return\
    \ $x;\n  }\n  $result = substr($x, 0, $shift);\n  $result = circular_shift($result,\
    \ $shift - 1);\n  return $result . $x;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n    return\
    \ $x;\n  }\n  $digits = $digits - $shift;\n  $reversed = strrev($x);\n  return\
    \ $reversed . str_pad('', $shift, '0');\n}\n", "  $digits = strlen($x);\n  if\
    \ ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n  return\
    \ $result;\n}\n", "  $digits = str_split($x);\n  if ($shift > count($digits))\
    \ {\n    return implode('', array_reverse($digits));\n  }\n  $digits = array_slice($digits,\
    \ 0, $shift);\n  return implode('', $digits);\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n \
    \ return $result;\n}\n", "  $digits = str_split($x);\n  array_splice($digits,\
    \ $shift, 0, array_slice($digits, 0, $shift));\n  return implode('', $digits);\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = '';\n  for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits\
    \ - $i - 1];\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits\
    \ <= $shift) {\n    return $x;\n  }\n  $digits = $digits - $shift;\n  $reversed\
    \ = strrev($x);\n  return $reversed . str_pad('', $digits, '0');\n}\n", "  $digits\
    \ = strlen($x);\n  if ($digits <= $shift) {\n    return $x;\n  }\n  $result =\
    \ \"\";\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result . substr($x,\
    \ $i, 1);\n  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  $result\
    \ = \"\";\n  for ($i = count($digits) - $shift, $j = 0; $i < count($digits); $i++,\
    \ $j++) {\n    $result .= $digits[$i] . $digits[$j];\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = '';\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $x[$i]\
    \ . $result;\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = '';\n  for ($i = 0; $i\
    \ < $shift; $i++) {\n    $result = $result . substr($x, $digits, 1);\n  }\n  return\
    \ $result;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits) {\n  \
    \      $shift = $digits;\n    }\n    $digits = strlen($x);\n    $result = '';\n\
    \    for ($i = 0; $i < $digits; $i++) {\n        $result .= $x[$digits-$i-1];\n\
    \    }\n    for ($i = 0; $i < $shift; $i++) {\n        $result .= $x[$digits-$shift+$i];\n\
    \    }\n    return $result;\n}\n", "    $digits = strlen($x);\n    if ($shift\
    \ > $digits) {\n        return strrev($x);\n    }\n    $result = \"\";\n    for\
    \ ($i = 0; $i < $shift; $i++) {\n        $result .= $x[$digits - $i - 1];\n  \
    \  }\n    return $result;\n}\n", "    $digits = str_split($x);\n    $result =\
    \ \"\";\n    foreach ($digits as $digit) {\n        $result .= $digit;\n     \
    \   if ($shift > 0) {\n            $result .= $digits[$shift - 1];\n        }\n\
    \        $shift--;\n    }\n    return $result;\n}\n", "  $digits = str_split($x);\n\
    \  if ($shift > count($digits)) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  $result = array();\n  for ($i = count($digits) - 1; $i >= $shift; $i--)\
    \ {\n    $result[] = $digits[$i];\n  }\n  return implode('', $result);\n}\n",
  "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n\
    \  $result = '';\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $result .\
    \ substr($x, $digits, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= $x[$digits-$i-1];\n  }\n \
    \ return $result;\n}\n", "  $digits = strlen($x);\n  if ($digits <= $shift) {\n\
    \    return $x;\n  }\n  $digits = $digits - $shift;\n  $x = substr($x, 0, $digits);\n\
    \  $x = $x . substr($x, $digits);\n  return $x;\n}\n", "  $digits = strlen($x);\n\
    \  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n \
    \ for ($i = 0; $i < $shift; $i++) {\n    $result .= substr($x, $digits - $shift\
    \ - $i, 1);\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n  if ($shift\
    \ > $digits) {\n    return strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0;\
    \ $i < $shift; $i++) {\n    $result .= $x[$digits - $shift - $i];\n  }\n  return\
    \ $result;\n}\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return\
    \ strrev($x);\n  }\n  $result = \"\";\n  for ($i = 0; $i < $shift; $i++) {\n \
    \   $result .= substr($x, $digits - $shift - $i, 1);\n  }\n  return $result;\n\
    }\n", "  $digits = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n\
    \  }\n  $result = '';\n  for ($i = $shift - 1; $i >= 0; $i--) {\n    $result =\
    \ $x[$i] . $result;\n  }\n  return $result;\n}\n", "  $digits = strlen($x);\n\
    \  if ($digits == 0) {\n    return '';\n  }\n  $shift = abs($shift);\n  if ($shift\
    \ > $digits) {\n    $shift = $digits;\n  }\n  $digits = strlen($x);\n  $result\
    \ = '';\n  for ($i = 0; $i < $shift; $i++) {\n    $result = $x[$i] . $result;\n\
    \  }\n  for ($i = $shift; $i < $digits; $i++) {\n    $result = $result . $x[$i];\n\
    \  }\n  return $result;\n}\n", "  $digits = str_split($x);\n  $digits_count =\
    \ count($digits);\n  if ($shift > $digits_count) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  $digits_shift = array_slice($digits, 0, $shift);\n  return implode('',\
    \ array_merge(array_slice($digits, $shift), $digits_shift));\n}\n", "  $digits\
    \ = strlen($x);\n  if ($shift > $digits) {\n    return strrev($x);\n  }\n  $digits_shift\
    \ = strlen($x) - $shift;\n  $x_reversed = strrev($x);\n  $x_reversed = substr($x_reversed,\
    \ 0, $digits_shift) . substr($x_reversed, $digits_shift);\n  return $x_reversed;\n\
    }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
