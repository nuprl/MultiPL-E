name: HumanEval_105_by_length
language: php
prompt: "<?php\n// Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2,\
  \ 1, 1, 4, 5, 8, 2, 3])   \n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n\
  // If the array has any strange number ignore it:\n// >>> by_length([1, -1 , 55])\
  \ \n// ['One']\nfunction by_length($arr) {\n"
tests: "function candidate(...$args) {\n    return by_length(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(2, 1, 1, 4, 5, 8, 2, 3)) !== array(\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\")) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, -1, 55))\
  \ !== array(\"One\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ -1, 3, 2)) !== array(\"Three\", \"Two\", \"One\")) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(9, 4, 8)) !== array(\"Nine\", \"Eight\"\
  , \"Four\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $result = array();\n  foreach ($arr as $key => $value) {\n    if\
    \ ($value >= 1 && $value <= 9) {\n      $result[$value] = $key;\n    }\n  }\n\
    \  if (count($result) == 0) {\n    return array();\n  }\n  krsort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $names[$value];\n\
    \  }\n  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n\
    \  $result = array();\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[] = array_key_exists($i, $arr) ? $arr[$i] : \"\";\n  }\n  sort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $key < 9 ? $value\
    \ : substr($value, 0, 1) . substr($value, 1);\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(\n    1 =>\
    \ 'One',\n    2 => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n\
    \    6 => 'Six',\n    7 => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine',\n   \
    \ 10 => 'Ten',\n    11 => 'Eleven',\n    12 => 'Twelve',\n    13 => 'Thirteen',\n\
    \    14 => 'Fourteen',\n    15 => 'Fifteen',\n    16 => 'Sixteen',\n    17 =>\
    \ 'Seventeen',\n    18 => 'Eighteen',\n    19 => 'Nineteen',\n    20 => 'Twenty',\n\
    \    30 => 'Thirty',\n    40 => 'Forty',\n    50 => 'Fifty',\n    60 => 'Sixty',\n\
    \    70 => 'Seventy',\n    80 => 'Eighty',\n    90 => 'Ninety',\n    100 => 'Hundred',\n\
    \    1000 => 'Thousand',\n    10000 => 'Million',\n    100000 => 'Billion',\n\
    \    1000000 => 'Trillion',\n    10000000 => 'Quadrillion',\n    100000000 =>\
    \ 'Quintillion',\n    1000000000 => 'Sextillion',\n    10000000000 => 'Septetillion',\n\
    \    100000000000 => 'Octillion',\n    1000000000000 => 'Novetillion',\n    10000000000000\
    \ => 'Decetillion',\n    100000000000000 => 'Undecillion',\n    1000000000000000\
    \ => 'Duodecillion',\n    10000000000000000 => 'Tredecillion',\n    100000000000000000\
    \ => 'Quattuordecillion',\n    1000000000000000000 => 'Cicillion',\n    10000000000000000000\
    \ => 'Uncicillion',\n    100000000000000000000 => 'Duo", "  $result = array();\n\
    \  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[]\
    \ = str_replace(array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $num);\n \
    \   }\n  }\n  return empty($arr) ? array() : array_reverse($result);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array is empty. `array_reverse`\
    \ returns an empty array.\n<|/ c |>\n<| c |>\nI added a version that handles empty\
    \ arrays. I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array has any strange numbers. `str_replace` returns an empty string.\n<|/ c\
    \ |>\n<| c |>\nI added a version that handles strange numbers. I tested it and\
    \ it works.\n<|/ c |>\n<| c |>\nThis doesn't work if the array has any strange\
    \ numbers. `str_replace` returns an empty string.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n\
    \    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8\
    \ => 'Eight',\n    9 => 'Nine',\n);\n\n$array = array_reverse($array);\n$array\
    \ = array_map(function($v){\n    return $array[$v];\n}, array_keys($array));\n\
    \nprint_r($array);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ the array is empty. `array_reverse` returns an empty array.\n<|/ c |>\n<| c\
    \ |>\nI added a version that handles empty arrays. I tested it and it works.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    1 => 'One',\n\
    \    2 => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n    6\
    \ => 'Six',\n    7 => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine',\n);\n\n$array\
    \ = array_reverse($array);\n$array = array_map(function($v){\n    return $array",
  "  $len = count($arr);\n  if ($len === 0) {\n    return [];\n  }\n  if ($len ===\
    \ 1) {\n    return ['One'];\n  }\n  if ($len === 2) {\n    return ['One', 'Two'];\n\
    \  }\n  if ($len === 3) {\n    return ['One', 'Two', 'Three'];\n  }\n  if ($len\
    \ === 4) {\n    return ['One', 'Two', 'Three', 'Four'];\n  }\n  if ($len === 5)\
    \ {\n    return ['One', 'Two', 'Three', 'Four', 'Five'];\n  }\n  if ($len ===\
    \ 6) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six'];\n  }\n  if\
    \ ($len === 7) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven'];\n\
    \  }\n  if ($len === 8) {\n    return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight'];\n  }\n  if ($len === 9) {\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  }\n  return [];\n\
    }\n", "    $len = count($arr);\n    if ($len == 0) {\n        return [];\n   \
    \ }\n    if ($len == 1) {\n        return ['One'];\n    }\n    $min = min($arr);\n\
    \    $max = max($arr);\n    $result = [];\n    for ($i = $min; $i <= $max; $i++)\
    \ {\n        $result[] = str_pad($i, $len - 1, chr($i + 1));\n    }\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$array = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n \
    \   5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9\n);\n$array = array_flip($array);\n\
    $array = array_values($array);\n$array = array_map(function($v){\n    return str_pad($v,\
    \ 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n    return\
    \ str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 9, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, ", "  $result = [];\n  foreach ($arr as $num) {\n    if\
    \ ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(\n        array_keys(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        array_values(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        array_search($num, range(1, 9))\n      );\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($numbers\
    \ as $number) {\n    if ($number >= 1 && $number <= 9) {\n        $result[] =\
    \ str_replace(\n            array_keys(\n                array_flip(\n       \
    \             range(\n                        1,\n                        9\n\
    \                    )\n                )\n            ),\n            array_values(\n\
    \                array_flip(\n                    range(\n                   \
    \     1,\n                        9\n                    )\n                )\n\
    \            ),\n            array_search($number, range(1, 9))\n        );\n\
    \    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result = array();\n\
    foreach ($numbers as $number) {\n    if ($number >= 1 && $number <= 9) {\n   \
    \     $result[] = str_replace(\n            array_keys(\n                array_flip(\n\
    \                    range(\n                        1,\n                    \
    \    9\n                    )\n                )\n            ),\n           \
    \ array_values(\n                array_flip(\n                    range(\n   \
    \                     1,\n                        9\n                    )\n \
    \               )\n            ),\n            array_search($number, range(1,\
    \ 9))\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $result = array();\nforeach ($numbers as $number) {\n    if ($number >= 1 && $number\
    \ <= 9) {\n        $result[] = str_replace(\n            array_keys(\n       \
    \         array_flip(\n                    range(\n                        1,\n\
    \                        9\n                    )\n                )\n       \
    \     ),\n            array_values(\n                array_flip(\n           \
    \         range(\n                        1,\n                        9\n    \
    \                )\n                )\n            ),\n            array_search($number,\
    \ range(1, 9))\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tag", "  $len = count($arr);\n  if ($len == 0) {\n    return [];\n\
    \  }\n  if ($len == 1) {\n    return ['One'];\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $arr2 = [];\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i]\
    \ == $min) {\n      $arr2[] = 'One';\n    } else if ($arr[$i] == $max) {\n   \
    \   $arr2[] = 'Nine';\n    } else {\n      $arr2[] = str_pad($arr[$i], 3, '0',\
    \ STR_PAD_LEFT);\n    }\n  }\n  return $arr2;\n}\n", "    $result = array();\n\
    \    foreach ($arr as $num) {\n        if ($num >= 1 && $num <= 9) {\n       \
    \     $result[] = array('name' => $num, 'value' => $num);\n        }\n    }\n\
    \    return empty($arr) ? array() : array_reverse($result);\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n        $arr2[$value] = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n\
    $arr2 = array_map(function($v){\n    return $v['name'];\n}, $arr2);\nprint_r($arr2);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n        $arr2[$value] = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n\
    $arr2 = array_map(function($v){\n    return $v['name'];\n}, $arr2);\nprint_r($arr2);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n\
    \    if ($value >= 1 && $value <= 9) {\n        $arr2[$value] = $value;\n    }\n\
    }\n$arr2 = array_reverse($arr2);\n$arr2 = array_map(function($v){\n    return\
    \ $v['name'];\n}, $arr2);\nprint_r($arr2);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $arr2[$value] = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n\
    $arr2 = array_map(function($v){\n    return $v['name'];\n}, $arr2);\nprint_r($arr2);\n\
    </code>\n<|/ a dscore=0 ", "  $result = array();\n  foreach ($arr as $item) {\n\
    \    if ($item > 9 || $item < 0) {\n      continue;\n    }\n    $result[] = array(\n\
    \      'name' => $names[$item],\n      'value' => $item\n    );\n  }\n  return\
    \ $result;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) {\n    return [];\n  }\n  if ($len == 1) {\n    return ['One'];\n\
    \  }\n  if ($len == 2) {\n    return ['One', 'Two'];\n  }\n  if ($len == 3) {\n\
    \    return ['One', 'Two', 'Three'];\n  }\n  if ($len == 4) {\n    return ['One',\
    \ 'Two', 'Three', 'Four'];\n  }\n  if ($len == 5) {\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five'];\n  }\n  if ($len == 6) {\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six'];\n  }\n  if ($len == 7) {\n    return ['One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven'];\n  }\n  if ($len == 8) {\n\
    \    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n\
    \  }\n  if ($len == 9) {\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n  }\n}\n", "  if (!$arr) {\n    return [];\n  }\n\
    \  $result = [];\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n \
    \   if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_replace(\n  \
    \      array_keys($names),\n        array_values($names),\n        array_slice($arr,\
    \ $i, 1)\n      );\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work. `by_length([2, 1, 1, 4, 5, 8, 2, 3])`\
    \ returns `[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"]`\n<|/ c |>\n<| c |>\nI added a comment to the code explaining why it\
    \ doesn't work.\n<|/ c |>\n<| c |>\nI added a comment to the code explaining why\
    \ it doesn't work.\n<|/ c |>\n<| c |>\nI added a comment to the code explaining\
    \ why it doesn't work.\n<|/ c |>\n<| c |>\nI added a comment to the code explaining\
    \ why it doesn't work.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5 = [];\n\
    $arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10 = [];\n$arr11 = [];\n\
    $arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n$arr16 = [];\n$arr17 =\
    \ [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 = [];\n$arr22 = [];\n\
    $arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n$arr27 = [];\n$arr28 =\
    \ [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 = [];\n$arr33 = [];\n\
    $arr34 = [];\n$arr35 = [];\n$arr36 = [];\n$arr37 = [];\n$arr38 = [];\n$arr39 =\
    \ [];\n$arr40 = [];\n$arr41 = [];\n$arr42 = [];\n$arr43 = [];\n$arr44 = [];\n\
    $arr45 = [];\n$arr46 = [];\n$arr47 = [];\n$arr48 = [];\n$arr49 = [];\n$arr50 =\
    \ [];", "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value]\
    \ = $key;\n    }\n  }\n  ksort($result);\n  foreach ($result as $key => $value)\
    \ {\n    $result[$key] = $names[$value];\n  }\n  return $result;\n}\n", "  $result\
    \ = array();\n  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n\
    \      $result[] = array($num, $names[$num]);\n    }\n  }\n  return $result;\n\
    }\n", "  $result = [];\n  foreach ($arr as $num) {\n    if ($num >= 1 && $num\
    \ <= 9) {\n      $result[] = str_replace(\n        array_keys(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        array_values(\n          array_flip(\n           \
    \ range(\n              1,\n              9\n            )\n          )\n    \
    \    ),\n        sprintf('%u', $num)\n      );\n    }\n  }\n  return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly but i need it to be more dynamic. Because i don't\
    \ know how many numbers are in the array. Also i need to sort them by their length.\
    \ Thanks again.\n<|/ c |>\n<| c |>\nI updated my answer to include a function\
    \ that sorts by the length of the numbers. I tested it and it seems to work.\n\
    <|/ c |>\n<| c |>\nThanks again for your answer. Your code works perfectly but\
    \ i need it to be more dynamic. Because i don't know how many numbers are in the\
    \ array. Also i need to sort them by their length. Thanks again.\n<|/ c |>\n<|\
    \ c |>\nI updated my answer to include a function that sorts by the length of\
    \ the numbers. I tested it and it seems to work.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$numbers = array(\n    array(\n        1 => 1,\n        2 => 2,\n\
    \        3 => 3,\n        4 => 4,\n        5 => 5,\n        6 => 6,\n        7\
    \ => 7,\n        8 => 8,\n        9 => 9\n    ),\n    array(\n        1 => 10,\n\
    \        2 => 11,\n        3 => 12,\n        4 => 13,\n        5 => 14,\n    \
    \    6 => 15,\n        7 => 16,\n        8 => 17,\n        9 => 18\n    ),\n \
    \   array(\n        1 => 19,\n        2 => 20,\n        3 => 21,\n        4 =>\
    \ 22,\n        5 => 23,\n        6 => 24,\n        7 => 25,\n        8 => 26,\n\
    \        9 => 27\n    ),\n    array(\n        1 => 28,\n        2 => 29,\n   \
    \     3 => 30,\n        4 => 31,\n        5 => 32,\n        6 => 33,\n       \
    \ 7 => 34,\n        8 => 35,\n        9 => 36\n    ),\n    array(\n        1 =>\
    \ 37,\n        2 => 38,\n", "    $result = array();\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value >= 1 && $value <= 9) {\n            $result[]\
    \ = array($value, $key);\n        }\n    }\n    array_multisort($result, SORT_DESC,\
    \ $arr);\n    $result = array_map(function ($item) {\n        return $item[1];\n\
    \    }, $result);\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$arr = array(\n    1 => \"One\",\n    2 => \"Two\",\n   \
    \ 3 => \"Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n\
    \    7 => \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n);\n$arr2 = array();\n\
    foreach ($arr as $key => $value) {\n    if ($key >= 1 && $key <= 9) {\n      \
    \  $arr2[$key] = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n$arr2 = array_map(function\
    \ ($value) {\n    return $arr2[$value];\n}, $arr2);\nprint_r($arr2);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$arr = array(\n    1 => \"\
    One\",\n    2 => \"Two\",\n    3 => \"Three\",\n    4 => \"Four\",\n    5 => \"\
    Five\",\n    6 => \"Six\",\n    7 => \"Seven\",\n    8 => \"Eight\",\n    9 =>\
    \ \"Nine\",\n);\n$arr2 = array();\nforeach ($arr as $key => $value) {\n    if\
    \ ($key >= 1 && $key <= 9) {\n        $arr2[$key] = $value;\n    }\n}\n$arr2 =\
    \ array_reverse($arr2);\n$arr2 = array_map(function ($value) {\n    return $arr2[$value];\n\
    }, $arr2);\nprint_r($arr2);\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$arr = array(\n    1 => \"One\",\n    2 => \"Two\",\n    3 => \"\
    Three\",\n    4 => \"Four\",\n    5 => \"Five\",\n    6 => \"Six\",\n    7 =>\
    \ \"Seven\",\n    8 => \"Eight\",\n    9 => \"Nine\",\n);\n$arr2 = array();\n\
    foreach ($arr as $key => $value) {\n    if ($key >= 1 && ", "  $result = array();\n\
    \  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[]\
    \ = array($num, $names[$num]);\n    }\n  }\n  if (count($result) == 0) {\n   \
    \ return array();\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach\
    \ ($arr as $num) {\n    $result[] = array($names[$num], $num);\n  }\n  return\
    \ $result;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $result[] = array(\n      'name' => $reversed[$i],\n\
    \      'value' => $arr[$i],\n      'min' => $min,\n      'max' => $max,\n    );\n\
    \  }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $num) {\n\
    \    if ($num > 0 && $num < 9) {\n      $result[] = str_replace(\n        array_keys($names),\
    \ \n        array_values($names), \n        array_fill(0, $num, 'One')\n     \
    \ );\n    }\n  }\n  return $result ? array_reverse($result) : [];\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks so much! This works perfectly! I appreciate\
    \ your help and explanation!\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n<?php\n\
    $names = [\n    'One',\n    'Two',\n    'Three',\n    'Four',\n    'Five',\n \
    \   'Six',\n    'Seven',\n    'Eight',\n    'Nine',\n];\n\n$arr = [\n    2,\n\
    \    1,\n    1,\n    4,\n    5,\n    8,\n    2,\n    3,\n];\n\n$result = array_map(function($v)\
    \ use ($names) {\n    return str_replace($names, array_flip($names), $v);\n},\
    \ $arr);\n\nvar_dump($result);\n</code>\nOutput:\n<code>\narray(8) {\n  [0]=>\n\
    \  string(5) \"Eight\"\n  [1]=>\n  string(5) \"Five\"\n  [2]=>\n  string(5) \"\
    Four\"\n  [3]=>\n  string(5) \"Three\"\n  [4]=>\n  string(5) \"Two\"\n  [5]=>\n\
    \  string(5) \"Two\"\n  [6]=>\n  string(5) \"One\"\n  [7]=>\n  string(5) \"One\"\
    \n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$names = [\n    'One',\n\
    \    'Two',\n    'Three',\n    'Four',\n    'Five',\n    'Six',\n    'Seven',\n\
    \    'Eight',\n    'Nine',\n];\n\n$arr = [\n    2,\n    1,\n    1,\n    4,\n \
    \   5,\n    8,\n    2,\n    3,\n];\n\n$result = [];\nforeach ($arr as $key =>\
    \ $value) {\n    $result[] = str_replace($names, $names, $value);\n}\n\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $names = [\n    'One',\n    '", "  $result = array();\n  foreach ($arr as $num)\
    \ {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $num);\n    }\n  }\n  return empty($arr)\
    \ ? array() : array_reverse($result);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if the array has negative numbers. Try it with `[-1,\
    \ 1, -55]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code\
    \ by adding an `if` statement to check if the array has negative numbers. I also\
    \ added a comment to the code explaining what each line does.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n$array = array(\n    array(\n        'name' => 'One',\n\
    \        'value' => 1\n    ),\n    array(\n        'name' => 'Two',\n        'value'\
    \ => 2\n    ),\n    array(\n        'name' => 'Three',\n        'value' => 3\n\
    \    ),\n    array(\n        'name' => 'Four',\n        'value' => 4\n    ),\n\
    \    array(\n        'name' => 'Five',\n        'value' => 5\n    ),\n    array(\n\
    \        'name' => 'Six',\n        'value' => 6\n    ),\n    array(\n        'name'\
    \ => 'Seven',\n        'value' => 7\n    ),\n    array(\n        'name' => 'Eight',\n\
    \        'value' => 8\n    ),\n    array(\n        'name' => 'Nine',\n       \
    \ 'value' => 9\n    ),\n    array(\n        'name' => 'Ten',\n        'value'\
    \ => 10\n    ),\n    array(\n        'name' => 'Eleven',\n        'value' => 11\n\
    \    ),\n    array(\n        'name' => 'Twelve',\n        'value' => 12\n    ),\n\
    \    array(\n        'name' => 'Thirteen',\n        'value' => 13\n    ),\n  \
    \  array(\n        'name' => 'Fourteen',\n        'value' => 14\n    ),\n    array(\n\
    \        'name' => 'Fifteen',\n        'value' => 15\n    ),\n    array(\n   \
    \     'name' => 'Sixteen',\n        'value' => 16\n    ),\n    array(\n      \
    \  'name' => 'Seventeen',\n        'value' => 17\n    ),\n    array(\n       \
    \ 'name' => 'Eighteen',\n        'value' => 18\n    ),\n    array(\n        'name'\
    \ => 'Nineteen',\n        '", "  $len = count($arr);\n  if ($len === 0) {\n  \
    \  return [];\n  }\n  if ($len === 1) {\n    return ['One'];\n  }\n  $result =\
    \ [];\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = str_replace(\n     \
    \ range(1,9),\n      array_map(function($v){\n        return $v == $i ? 'One'\
    \ : $v;\n      }, range(1,9)),\n      array_keys($arr)[$i]\n    );\n  }\n  return\
    \ $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $result =\
    \ array();\n  $length = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n \
    \   $result[] = array_key_exists($i, $arr) ? $arr[$i] : \"\";\n  }\n  $result\
    \ = array_reverse($result);\n  for ($i = 0; $i < $length; $i++) {\n    $result[$i]\
    \ = str_replace(\n      array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n      array(\"0\", \"1\", \"2\",\
    \ \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"),\n      $result[$i]\n    );\n\
    \  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n  \
    \  return array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i]\
    \ && $arr[$i] <= $max) {\n      $result[] = name_by_number($arr[$i]);\n    }\n\
    \  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n  \
    \  return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min\
    \ == $max) {\n    return array($min);\n  }\n  $range = range($min, $max);\n  $reversed\
    \ = array_reverse($range);\n  $result = array();\n  foreach ($reversed as $val)\
    \ {\n    $result[] = array_search($val, $arr);\n  }\n  return $result;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n  $result = array();\n  $length\
    \ = count($arr);\n  for ($i = 0; $i < $length; $i++) {\n    $result[] = array(\n\
    \      'name' => $arr[$i],\n      'index' => $i,\n      'length' => $arr[$i],\n\
    \    );\n  }\n  usort($result, function($a, $b) {\n    if ($a['length'] == $b['length'])\
    \ {\n      return 0;\n    }\n    return ($a['length'] < $b['length']) ? -1 : 1;\n\
    \  });\n  foreach ($result as $key => $value) {\n    $result[$key]['name'] = $names[$value['index']];\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = array(\n    array('name' => 'One', 'length' => 2),\n    array('name'\
    \ => 'Two', 'length' => 1),\n    array('name' => 'Three', 'length' => 1),\n  \
    \  array('name' => 'Four', 'length' => 4),\n    array('name' => 'Five', 'length'\
    \ => 5),\n    array('name' => 'Six', 'length' => 6),\n    array('name' => 'Seven',\
    \ 'length' => 7),\n    array('name' => 'Eight', 'length' => 8),\n    array('name'\
    \ => 'Nine', 'length' => 9),\n    array('name' => 'Ten', 'length' => 10),\n);\n\
    \n$names = array(\n    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n    4\
    \ => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8 => 'Eight',\n\
    \    9 => 'Nine',\n    10 => 'Ten',\n);\n\n$result = array();\nforeach ($arr as\
    \ $key => $value) {\n    $result[$value['length']] = $value['name'];\n}\n\n$result\
    \ = array_flip($result);\n$result = array_intersect_key($result, array_flip($names));\n\
    $result = array_values($result);\n\nprint_r($result);\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = array(\n    array('name'\
    \ => 'One', 'length' => 2),\n    array('name' => 'Two', 'length' => 1),\n    array('name'\
    \ => 'Three', 'length' => 1),\n    array('name' => 'Four', 'length' => 4),\n \
    \   array('name' => 'Five', 'length' => ", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n\
    \  }\n  if ($len > 9) {\n    return array();\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    if ($min <= $arr[$i] && $arr[$i] <= $max) {\n\
    \      $result[] = name_by_number($arr[$i]);\n    }\n  }\n  return $result;\n\
    }\n", "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $result[] = str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $value);\n    }\n  }\n  return empty($arr)\
    \ ? array() : array_reverse($result);\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if the array has negative numbers. `by_length([-1,\
    \ -1, 1, -5, -8, 2, 3])` returns `['One']`\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't have negative numbers. I tested it and it works.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work if the array has negative numbers. `by_length([-1, -1,\
    \ 1, -5, -8, 2, 3])` returns `['One']`\n<|/ c |>\n<| c |>\nI added a version that\
    \ doesn't have negative numbers. I tested it and it works.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 =>\
    \ 4,\n    4 => 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 =>\
    \ 10,\n    10 => 11,\n    11 => 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n\
    \    15 => 16,\n    16 => 17,\n    17 => 18,\n    18 => 19,\n    19 => 20,\n \
    \   20 => 21,\n    21 => 22,\n    22 => 23,\n    23 => 24,\n    24 => 25,\n  \
    \  25 => 26,\n    26 => 27,\n    27 => 28,\n    28 => 29,\n    29 => 30,\n   \
    \ 30 => 31,\n    31 => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n    35\
    \ => 36,\n    36 => 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n    40 =>\
    \ 41,\n    41 => 42,\n    42 => 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n\
    \    46 => 47,\n    47 => 48,\n    48 ", "  $result = [];\n  foreach ($arr as\
    \ $item) {\n    if ($item > 0 && $item <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys($names),\n        array_values($names),\n        array_fill(0,\
    \ $item, $item)\n      );\n    }\n  }\n  return empty($arr) ? [] : $result;\n\
    }\n", "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach ($arr\
    \ as $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = array_search($item,\
    \ $ones);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$ones = array(\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$tens = array(\"Ten\",\
    \ \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\");\n$hundreds = array(\"Hundred\",\
    \ \"Thousand\", \"Million\", \"Billion\", \"Trillion\", \"Quadrillion\", \"Quintillion\"\
    , \"Sextillion\", \"Septillion\", \"Octillion\", \"Nonillion\");\n\n$ones = array_merge($ones,\
    \ $tens, $hundreds);\n$ones = array_flip($ones);\n\n$tens = array_merge($tens,\
    \ $hundreds);\n$tens = array_flip($tens);\n\n$hundreds = array_merge($hundreds,\
    \ $ones);\n$hundreds = array_flip($hundreds);\n\n$ones = array_merge($ones, $tens,\
    \ $hundreds);\n$ones = array_flip($ones);\n\n$tens = array_merge($tens, $hundreds);\n\
    $tens = array_flip($tens);\n\n$hundreds = array_merge($hundreds, $ones);\n$hundreds\
    \ = array_flip($hundreds);\n\n$ones = array_merge($ones, $tens, $hundreds);\n\
    $ones = array_flip($ones);\n\n$tens = array_merge($tens, $hundreds);\n$tens =\
    \ array_flip($tens);\n\n$hundreds = array_merge($hundreds, $ones);\n$hundreds\
    \ = array_flip($hundreds);\n\n$ones = array_merge($ones, $tens, $hundreds);\n\
    $ones = array_flip($ones);\n\n$tens = array_merge($tens, $hundreds);\n$tens =\
    \ array_flip($tens);\n\n$hundreds = array_merge($hundreds, $ones);\n$hundreds\
    \ = array_flip($hundreds);\n\n$ones = array_merge($ones, $tens, ", "    if (empty($arr))\
    \ {\n        return [];\n    }\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $result = [];\n    foreach ($arr as $n) {\n        if ($n < $min || $n >\
    \ $max) {\n            continue;\n        }\n        $result[] = str_pad($n, 3,\
    \ '0', STR_PAD_LEFT);\n    }\n    return $result;\n}\n", "  $result = [];\n  foreach\
    \ ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys(\n          array_flip(\n            range(\n            \
    \  1,\n              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        sprintf('%u', $num)\n      );\n\
    \    }\n  }\n  return empty($arr) ? [] : $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    1 => 'One',\n    2\
    \ => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n\
    \    7 => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine',\n    10 => 'Ten',\n  \
    \  11 => 'Eleven',\n    12 => 'Twelve',\n    13 => 'Thirteen',\n    14 => 'Fourteen',\n\
    \    15 => 'Fifteen',\n    16 => 'Sixteen',\n    17 => 'Seventeen',\n    18 =>\
    \ 'Eighteen',\n    19 => 'Nineteen',\n    20 => 'Twenty',\n    30 => 'Thirty',\n\
    \    40 => 'Forty',\n    50 => 'Fifty',\n    60 => 'Sixty',\n    70 => 'Seventy',\n\
    \    80 => 'Eighty',\n    90 => 'Ninety',\n    100 => 'Hundred',\n    1000 =>\
    \ 'Thousand',\n    10000 => 'Lakh',\n    100000 => 'Crore',\n    1000000 => 'Million',\n\
    \    10000000 => 'Billion',\n    100000000 => 'Trillion',\n    1000000000 => 'Quadrillion',\n\
    \    10000000000 => 'Quintillion',\n    100000000000 => 'Sextillion',\n    1000000000000\
    \ => 'Septillion',\n    10000000000000 => 'Octillion',\n    100000000000000 =>\
    \ 'Nonillion',\n    1000000000000000 => 'Decillion',\n    10000000000000000 =>\
    \ 'Undecillion',\n    1000000000000000000 => 'Duodecillion',\n    10000000000000000000\
    \ => 'Tredecillion',\n    100000000000000000000 => 'Quattuordecillion',\n    1000000000000000000000\
    \ => 'Quindecillion',", "  $result = array();\n  if (empty($arr)) {\n    return\
    \ $result;\n  }\n  $length = array_reduce($arr, function($carry, $item) {\n  \
    \  return max($carry, $item);\n  });\n  foreach ($arr as $key => $value) {\n \
    \   if ($value >= 1 && $value <= 9) {\n      $result[$value] = $arr[$key];\n \
    \   }\n  }\n  foreach ($result as $key => $value) {\n    $result[$key] = $length[$key]\
    \ ? $length[$key] : $value;\n  }\n  return $result;\n}\n", "  if (empty($arr))\
    \ {\n    return [];\n  }\n  $len = count($arr);\n  if ($len < 2) {\n    return\
    \ $arr;\n  }\n  $sorted = array_slice($arr, 0, $len);\n  array_multisort($sorted,\
    \ SORT_DESC, $arr);\n  $reversed = array_slice($arr, 0, $len);\n  foreach ($reversed\
    \ as $key => $value) {\n    $reversed[$key] = $names[$value];\n  }\n  return $reversed;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers, e.g. `[-1, 1, -3]`.\n<|/ c |>\n<| c |>\nThanks for pointing that out.\
    \ I've fixed the code so it works correctly now.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n<?php\n$numbers = array(\n    1 => array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    2 => array('Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten'),\n    3 => array('Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven'),\n    4 => array('Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve'),\n    5\
    \ => array('Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve',\
    \ 'Thirteen'),\n    6 => array('Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven',\
    \ 'Twelve', 'Thirteen', 'Fourteen'),\n    7 => array('Seven', 'Eight', 'Nine',\
    \ 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen'),\n    8 => array('Eight',\
    \ 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen'),\n\
    \    9 => array('Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen',\
    \ 'Sixteen', 'Seventeen'),\n    10 => array('Ten', 'Eleven', 'Twelve', 'Thirteen',\
    \ 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen'),\n    11 => array('Eleven',\
    \ 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen',\
    \ 'N", "    $len = count($arr);\n    if ($len === 0) {\n        return [];\n \
    \   }\n    $min = min($arr);\n    $max = max($arr);\n    if ($min === $max) {\n\
    \        return ['One'];\n    }\n    $result = [];\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($arr[$i] === $min) {\n            $result[] = 'One';\n\
    \        } elseif ($arr[$i] === $max) {\n            $result[] = 'Nine';\n   \
    \     } else {\n            $result[] = sprintf('%u', ($arr[$i] - $min));\n  \
    \      }\n    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n          \
    \  $result[$value] = $key;\n        }\n    }\n    return $result;\n}\n", "   \
    \ $result = array();\n    foreach ($arr as $value) {\n        if ($value >= 1\
    \ && $value <= 9) {\n            $result[] = array($value, $name[$value]);\n \
    \       }\n    }\n    return empty($arr) ? array() : array_reverse($result);\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers = array(2, 1,\
    \ 1, 4, 5, 8, 2, 3);\n$result = array();\n$result[] = array($numbers[0], 'One');\n\
    $result[] = array($numbers[1], 'Two');\n$result[] = array($numbers[2], 'Three');\n\
    $result[] = array($numbers[3], 'Four');\n$result[] = array($numbers[4], 'Five');\n\
    $result[] = array($numbers[5], 'Six');\n$result[] = array($numbers[6], 'Seven');\n\
    $result[] = array($numbers[7], 'Eight');\n$result[] = array($numbers[8], 'Nine');\n\
    $result[] = array($numbers[9], 'Ten');\n$result[] = array($numbers[10], 'Eleven');\n\
    $result[] = array($numbers[11], 'Twelve');\n$result[] = array($numbers[12], 'Thirteen');\n\
    $result[] = array($numbers[13], 'Fourteen');\n$result[] = array($numbers[14],\
    \ 'Fifteen');\n$result[] = array($numbers[15], 'Sixteen');\n$result[] = array($numbers[16],\
    \ 'Seventeen');\n$result[] = array($numbers[17], 'Eighteen');\n$result[] = array($numbers[18],\
    \ 'Nineteen');\n$result[] = array($numbers[19], 'Twenty');\n$result[] = array($numbers[20],\
    \ 'Twenty One');\n$result[] = array($numbers[21], 'Twenty Two');\n$result[] =\
    \ array($numbers[22], 'Twenty Three');\n$result[] = array($numbers[23], 'Twenty\
    \ Four');\n$result[] = array($numbers[24], 'Twenty Five');\n$result[] = array($numbers[25],\
    \ 'Twenty Six');\n$result[] = array($numbers[26], 'Twenty Seven');\n$result[]\
    \ = array($numbers[27], 'Twenty Eight');\n$result[] = array($numbers[28], 'Twent",
  "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  if ($len\
    \ == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    $result[] = str_replace(\n      array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n      array('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'),\n      array_slice($reversed, $i, 1)\n \
    \   );\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $result = [];\n    foreach ($arr as $item) {\n        if ($item\
    \ >= 1 && $item <= 9) {\n            $result[] = str_replace(\n              \
    \  array_keys(\n                    array_flip(\n                        range(\n\
    \                            1,\n                            9\n             \
    \           )\n                    )\n                ),\n                array_values(\n\
    \                    array_flip(\n                        range(\n           \
    \                 1,\n                            9\n                        )\n\
    \                    )\n                ),\n                strval($item)\n  \
    \          );\n        }\n    }\n    return empty($result) ? [] : $result;\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $arr2[] = str_replace(['1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'], range(1, 9), $value);\n    }\n}\nprint_r($arr2);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $arr2[] = str_replace(['1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'], range(1, 9), $value);\n    }\n}\nprint_r($arr2);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $arr2[] = str_replace(['1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'], range(1, 9), $value);\n    }\n}\nprint_r($arr2);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $arr2[] = str_replace(['1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9'], range(1, 9), $value);\n    }\n}\nprint_r($arr2);\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\
    $arr", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n\
    \  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[]\
    \ = strval($i);\n  }\n  $result = array_reverse($result);\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    $result[$i] = $arr[$i];\n  }\n  return $result;\n}\n", " \
    \ $len = count($arr);\n  if ($len === 0) {\n    return [];\n  }\n  if ($len ===\
    \ 1) {\n    return ['One'];\n  }\n  $min = min($arr);\n  $max = max($arr);\n \
    \ if ($min === $max) {\n    return ['One'];\n  }\n  $result = [];\n  for ($i =\
    \ $min; $i <= $max; $i++) {\n    $result[] = name_by_length($i, $len);\n  }\n\
    \  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $item) {\n    if\
    \ ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n        array_keys(\n\
    \          array_flip(\n            array_slice(\n              str_split(\n \
    \               str_pad(\n                  $item,\n                  3,\n   \
    \               STR_PAD_LEFT\n                )\n              ),\n          \
    \    0,\n              3\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            array_slice(\n              str_split(\n \
    \               str_pad(\n                  $item,\n                  3,\n   \
    \               STR_PAD_LEFT\n                )\n              ),\n          \
    \    0,\n              3\n            )\n          )\n        ),\n        array_slice(\n\
    \          str_split(\n            str_pad(\n              $item,\n          \
    \    3,\n              STR_PAD_LEFT\n            )\n          ),\n          0,\n\
    \          3\n        )\n      );\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n$arr2 = [];\n$arr3 = [];\n$arr4 = array_filter($arr, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr5 = array_filter($arr4, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr6 = array_filter($arr5, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr7 = array_filter($arr6, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr8 = array_filter($arr7, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr9 = array_filter($arr8, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr10 = array_filter($arr9, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr11 = array_filter($arr10, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr12 = array_filter($arr11, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr13 = array_filter($arr12, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr14 = array_filter($arr13, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$arr15 = ", "  $result = [];\n  foreach\
    \ ($arr as $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys(\n          array_flip(\n            range(\n            \
    \  1,\n              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        sprintf('%u', $item)\n      );\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't work for negative numbers, e.g. `by_length([-1, -1, 1, -9, -5, -8,\
    \ -2, -3])` returns `['One']` instead of `['One', 'One']`\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting my answer. `by_length([-1, -1, 1, -9,\
    \ -5, -8, -2, -3])` returns `['One', 'One']` as expected.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting my answer. `by_length([-1, -1, 1, -9,\
    \ -5, -8, -2, -3])` returns `['One', 'One']` as expected.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting my answer. `by_length([-1, -1, 1, -9,\
    \ -5, -8, -2, -3])` returns `['One', 'One']` as expected.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting my answer. `by_length([-1, -1, 1, -9,\
    \ -5, -8, -2, -3])` returns `['One', 'One']` as expected.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    $result = array();\n    foreach ($arr as $key => $value) {\n\
    \        if ($value >= 1 && $value <= 9) {\n            $result[] = str_replace(\n\
    \                array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),\n  \
    \              array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'),\n                $value\n            );\n        }\n    }\n    return\
    \ empty($arr) ? array() : array_reverse($result);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $numbers = array_filter($numbers, function($number) {\n    return $number >= 1\
    \ && $number <= 9;\n});\n$numbers = array_map(function($number) {\n    return\
    \ str_replace(\n        array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),\n\
    \        array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'),\n        $number\n    );\n}, $numbers);\n$numbers = array_reverse($numbers);\n\
    print_r($numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$numbers = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return $number >= 1 && $number <= 9;\n});\n$numbers\
    \ = array_map(function($number) {\n    return str_replace(\n        array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'),\n        array('One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n        $number\n    );\n\
    }, $numbers);\n$numbers = array_reverse($numbers);\nprint_r($numbers);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a |>\n<code>\n<?php\n$numbers = array(2, 1, 1, 4,\
    \ 5, 8, 2, 3);\n$numbers = array_filter($numbers, function($number) {\n    return\
    \ $number >= 1 && $number <= 9;\n});\n$numbers = array_map(function($number) {\n\
    \    return str_replace(\n        array('0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9'),\n        array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'),\n        $number\n    );\n}, $numbers);\n$numbers = array_reverse($numbers);",
  "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  if ($len\
    \ == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $min = min($min, $max);\n  $max = max($max, $min);\n  $range = range($min,\
    \ $max);\n  $reversed = array_reverse($range);\n  $result = array();\n  foreach\
    \ ($reversed as $val) {\n    $result[] = name_by_length($val);\n  }\n  return\
    \ $result;\n}\n", "  $result = array();\n  foreach ($arr as $num) {\n    if ($num\
    \ >= 1 && $num <= 9) {\n      $result[] = str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $num);\n    }\n  }\n  return $result;\n}\n",
  "  if (empty($arr)) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $length = count($arr);\n  if ($min == $max) {\n    return array($min);\n  }\n\
    \  $result = array();\n  for ($i = 0; $i < $length; $i++) {\n    if ($min <= $arr[$i]\
    \ && $arr[$i] <= $max) {\n      $result[] = name_by_number($arr[$i]);\n    }\n\
    \  }\n  return $result;\n}\n", "  $result = array();\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[$value] =\
    \ $key;\n    }\n  }\n  return array_reverse($result);\n}\n", "  $result = [];\n\
    \  if (empty($arr)) {\n    return $result;\n  }\n  $min = min($arr);\n  $max =\
    \ max($arr);\n  foreach ($arr as $key => $value) {\n    if ($value < $min || $value\
    \ > $max) {\n      unset($arr[$key]);\n    } else {\n      $result[] = name_by_length($value);\n\
    \    }\n  }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $num)\
    \ {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(\n     \
    \   array_keys(\n          array_flip(\n            range(\n              1,\n\
    \              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        array_search($num, range(1, 9))\n\
    \      );\n    }\n  }\n  return empty($result) ? [] : $result;\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there are any negative\
    \ numbers in the array\n<|/ c |>\n<| c |>\nI added a fix for negative numbers.\
    \ I didn't test it thoroughly, so there may be some edge cases that I missed.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$arr\
    \ = array_map(function($v){\n    return $v >= 1 && $v <= 9 ? $v : '';\n}, $arr);\n\
    $arr = array_filter($arr, function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n\
    \    return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n \
    \   return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n \
    \   return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n \
    \   return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n \
    \   return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function($v){\n    return $v != '';\n});\n$arr = array_map(function($v){\n \
    \   return str_replace(range(1, 9), $v, $v);\n}, $arr);\n$arr = array_filter($arr,\
    \ function(", "    $len = count($arr);\n    if ($len == 0) {\n        return array();\n\
    \    }\n    $min = min($arr);\n    $max = max($arr);\n    if ($min == $max) {\n\
    \        return array($min);\n    }\n    $result = array();\n    for ($i = $min;\
    \ $i <= $max; $i++) {\n        $result[] = strval($i);\n    }\n    return array_reverse($result);\n\
    }\n", "    if (empty($arr)) {\n        return [];\n    }\n    $result = [];\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i]\
    \ = $arr[$i];\n    }\n    array_multisort($result, SORT_DESC, $arr);\n    $result\
    \ = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $arr[$i];\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$arr = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\");\n$arr = array_reverse($arr);\n$arr = array_combine(range(1,\
    \ 9), $arr);\nprint_r($arr);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a\
    \ tags=php,arrays,sorting |>\n<code>\n$arr = array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$arr = array_reverse($arr);\n\
    $arr = array_combine(range(1, 9), $arr);\nprint_r($arr);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$arr\
    \ = array_reverse($arr);\n$arr = array_combine(range(1, 9), $arr);\nprint_r($arr);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$arr = array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n$arr = array_reverse($arr);\n$arr = array_combine(range(1, 9), $arr);\nprint_r($arr);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n<code>\n$arr = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$arr = array_reverse($arr);\n$arr = array_combine(range(1, 9), $arr);\n\
    print_r($arr);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=1 |>\n\
    <code>\n$arr = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"", "  $result = [];\n  foreach ($arr as $num) {\n    if ($num >= 1 && $num\
    \ <= 9) {\n      $result[] = str_replace(\n        range(1, 9),\n        array_map(function\
    \ ($n) { return \"One\"; }, range(1, 9)),\n        array_search($num, range(1,\
    \ 9))\n      );\n    }\n  }\n  return $result ? array_reverse($result) : [];\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array\
    \ is empty or has strange numbers. Try `by_length([-1, 55])`\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've updated the answer to handle that case.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result\
    \ = [];\nforeach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n       \
    \ $result[] = str_replace(\n            range(1, 9),\n            array_map(function\
    \ ($n) { return \"One\"; }, range(1, 9)),\n            array_search($num, range(1,\
    \ 9))\n        );\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    $arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $num) {\n  \
    \  if ($num >= 1 && $num <= 9) {\n        $result[] = str_replace(\n         \
    \   range(1, 9),\n            array_map(function ($n) { return \"One\"; }, range(1,\
    \ 9)),\n            array_search($num, range(1, 9))\n        );\n    }\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $num) {\n  \
    \  if ($num >= 1 && $num <= 9) {\n        $result[] = str_replace(\n         \
    \   range(1, 9),\n            array_map(function ($n) { return \"One\"; }, range(1,\
    \ 9)),\n            array_search($num, range(1, 9))\n        );\n    }\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$result = [];\nforeach ($arr as $num) {\n    if ($num >= 1 && $num <=\
    \ 9) {\n", "  if (empty($arr)) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return array();\n  }\n  $min = array_shift($arr);\n  $max\
    \ = array_pop($arr);\n  $len = count($arr);\n  $result = array();\n  for ($i =\
    \ 0; $i < $len; $i++) {\n    if ($arr[$i] >= $min && $arr[$i] <= $max) {\n   \
    \   $result[] = name_by_length($arr[$i]);\n    }\n  }\n  return $result;\n}\n",
  "  $result = array();\n  foreach ($arr as $num) {\n    if ($num < 1 || $num > 9)\
    \ {\n      continue;\n    }\n    $result[] = array(\n      'name' => $nums[$num\
    \ - 1],\n      'num' => $num\n    );\n  }\n  return $result;\n}\n", "  if (empty($arr))\
    \ {\n    return [];\n  }\n  $len = array_sum($arr);\n  if ($len < 1 || $len >\
    \ 9) {\n    return [];\n  }\n  $result = [];\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys($names),\n        array_values($names),\n        array_slice($arr,\
    \ $i, 1)\n      );\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for small arrays.\
    \ But for big arrays it takes too much time to execute. Can you please suggest\
    \ me a faster solution?\n<|/ c |>\n<| c |>\nI added a faster solution\n<|/ c |>\n\
    <| c |>\nThanks for your answer. Your code works perfectly for small arrays. But\
    \ for big arrays it takes too much time to execute. Can you please suggest me\
    \ a faster solution?\n<|/ c |>\n<| c |>\nI added a faster solution\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\n\
    $arr3 = [];\n$arr4 = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n\
    $arr9 = [];\n$arr10 = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 =\
    \ [];\n$arr15 = [];\n$arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n\
    $arr20 = [];\n$arr21 = [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 =\
    \ [];\n$arr26 = [];\n$arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n\
    $arr31 = [];\n$arr32 = [];\n$arr33 = [];\n$arr34 = [];\n$arr35 = [];\n$arr36 =\
    \ [];\n$arr37 = [];\n$arr38 = [];\n$arr39 = [];\n$arr40 = [];\n$arr41 = [];\n\
    $arr42 = [];\n$arr43 = [];\n$arr44 = [];\n$arr45 = [];\n$arr46 = [];\n$arr47 =\
    \ [];\n$arr48 = [];\n$arr49 = [];", "    $result = [];\n    foreach ($arr as $num)\
    \ {\n        if ($num >= 1 && $num <= 9) {\n            $result[] = str_replace(\n\
    \                array_keys(\n                    array_flip(\n              \
    \          range(\n                            1,\n                          \
    \  9\n                        )\n                    )\n                ),\n \
    \               array_values(\n                    array_flip(\n             \
    \           range(\n                            1,\n                         \
    \   9\n                        )\n                    )\n                ),\n\
    \                strval($num)\n            );\n        }\n    }\n    return empty($arr)\
    \ ? [] : $result;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", "  $result = array();\n\
    \  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[]\
    \ = str_replace(array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $num);\n \
    \   }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code is working fine but i want to know how can i use\
    \ array_map function with my code because i want to learn how to use array_map\
    \ function.\n<|/ c |>\n<| c |>\nI added an example for array_map. I hope it helps.\n\
    <|/ c |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array = array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n$array = array_map(function($v){\n    return str_replace(array('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $v);\n}, $array);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=arrays,php,sorting |>\n<code>\n$array = array(\"One\", \"Two\"\
    , \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array\
    \ = array_map(function($v){\n    return str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $v);\n}, $array);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array = array_map(function($v){\n\
    \    return str_replace(array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),\
    \ array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\
    \ $v);\n}, $array);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n$array = array(\"", "    $len = count($arr);\n    if ($len == 0)\
    \ {\n        return array();\n    }\n    $min = min($arr);\n    $max = max($arr);\n\
    \    if ($min == $max) {\n        return array($min);\n    }\n    $result = array();\n\
    \    for ($i = $min; $i <= $max; $i++) {\n        $result[] = str_pad($i, $len\
    \ - 1, $arr[$i]);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\n    1 => 1,\n    2 => 2,\n\
    \    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n\
    \    9 => 9\n);\n\n$numbers = array_filter($numbers, function($number) {\n   \
    \ return $number > 0 && $number < 10;\n});\n\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n\n$numbers\
    \ = array_reverse($numbers);\n\n$numbers = array_map(function($number) {\n   \
    \ return $numbers[$number];\n}, $numbers);\n\nprint_r($numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers = array(\n    1 =>\
    \ 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 =>\
    \ 7,\n    8 => 8,\n    9 => 9\n);\n\n$numbers = array_filter($numbers, function($number)\
    \ {\n    return $number > 0 && $number < 10;\n});\n\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n\n$numbers\
    \ = array_reverse($numbers);\n\n$numbers = array_map(function($number) {\n   \
    \ return $numbers[$number];\n}, $numbers);\n\nprint_r($numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n    1 =>\
    \ 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n    7 =>\
    \ 7,\n    8 => 8,\n    9 => 9\n);\n\n$numbers = array_filter($numbers, function($number)\
    \ {\n    return $number > 0 && $", "  $result = [];\n  foreach ($arr as $num)\
    \ {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_repeat('One', count($arr)\
    \ - $num);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty\n<|/ c |>\n<| c |>\nThis doesn't work if the array\
    \ is empty\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty\n<|/ c\
    \ |>\n<| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(1, 4, 6, 8, 2, 9, 3, 7, 5, 10);\n$array = array_filter($array,\
    \ function($v){\n    return $v >= 1 && $v <= 9;\n});\n$array = array_map(function($v){\n\
    \    return str_repeat('One', count($array) - $v);\n}, $array);\n$array = array_reverse($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array is\
    \ empty\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty\n<|/ c |>\n<| c |>\nThis doesn't work if the array\
    \ is empty\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(1, 4, 6,\
    \ 8, 2, 9, 3, 7, 5, 10);\n$array = array_filter($array, function($v){\n    return\
    \ $v >= 1 && $v <= 9;\n});\n$array = array_map(function($v){\n    return str_repeat('One',\
    \ count($array) - $v);\n}, $array);\n$array = array_reverse($array);\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n\
    <| c |>\nThis doesn't work if the array is empty\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array is empty\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(1, 4, 6, 8, 2, 9, 3, 7, 5, 10);\n", "    $result = array();\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n    \
    \        $result[$value] = $key;\n        }\n    }\n    if (empty($result)) {\n\
    \        return array();\n    }\n    foreach ($result as $key => $value) {\n \
    \       $result[$key] = $names[$value];\n    }\n    return $result;\n}", "  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return [];\n  }\n  if ($len == 1) {\n\
    \    return [\"One\"];\n  }\n  $result = [];\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[$i] = $arr[$i];\n  }\n  sort($result);\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n  return $result;\n}\n",
  "    $len = count($arr);\n    if ($len === 0) {\n        return [];\n    }\n   \
    \ if ($len > 9) {\n        return $arr;\n    }\n    $result = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $result[$i] = $arr[$i];\n    }\n    sort($result);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $names[$result[$i]];\n\
    \    }\n    return $result;\n}", "  $result = array();\n  foreach ($arr as $num)\
    \ {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = array($num, $names[$num]);\n\
    \    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len == 0)\
    \ {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $result\
    \ = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[] = str_pad($i, $len\
    \ - 1, $i);\n  }\n  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n\
    \  }\n  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n\
    \  array_multisort($result, SORT_DESC, array_keys($result));\n  foreach ($result\
    \ as $key => $value) {\n    $result[$key] = $names[$value[0]];\n  }\n  return\
    \ $result;\n}\n", "    $result = array();\n    foreach ($arr as $value) {\n  \
    \      if ($value >= 1 && $value <= 9) {\n            $result[] = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $value);\n        }\n    }\n    return\
    \ empty($arr) ? array() : array_reverse($result);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = array(2, 1, 1, 4, 5, 8, 2,\
    \ 3);\n$result = array();\nforeach ($arr as $value) {\n    if ($value >= 1 &&\
    \ $value <= 9) {\n        $result[] = str_replace(array('0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'), $value);\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = array(2, 1,\
    \ 1, 4, 5, 8, 2, 3);\n$result = array();\nforeach ($arr as $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n        $result[] = str_replace(array('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $value);\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\n$result = array();\nforeach ($arr as $value) {\n    if ($value >=\
    \ 1 && $value <= 9) {\n        $result[] = str_replace(array('0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $value);\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$result\
    \ = array();\nforeach ($arr as $value) {\n    if ($value >= 1 && $value <= 9)\
    \ {\n        $result[] = str_replace(array('", "  $result = [];\n  foreach ($arr\
    \ as $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_repeat($item,\
    \ $item);\n    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return [];\n  }\n  if ($len == 1) {\n    return ['One'];\n  }\n\
    \  $min = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = $min;\
    \ $i <= $max; $i++) {\n    $result[] = sprintf('%d', $i);\n  }\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $names[$value];\n\
    \  }\n  return $result;\n}", "  $result = [];\n  if (empty($arr)) {\n    return\
    \ $result;\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $len = count($arr);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[]\
    \ = 'One';\n    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n\
    \    }\n    elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n\
    \    elseif ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif\
    \ ($arr[$i] == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i]\
    \ == $max - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min\
    \ + 3) {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n\
    \      $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n    \
    \  $result[] = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[]\
    \ = 'Nine';\n    }\n  }\n  return $result;\n}\n", "  $result = array();\n  foreach\
    \ ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_pad($num,\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n", "    if (empty($arr))\
    \ {\n        return [];\n    }\n    $result = [];\n    $len = count($arr);\n \
    \   for ($i = 0; $i < $len; $i++) {\n        $result[$i] = $arr[$i];\n    }\n\
    \    array_multisort($result, SORT_DESC, $arr);\n    foreach ($arr as $key =>\
    \ $val) {\n        $result[$key] = $names[$val];\n    }\n    return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) return array();\n  if ($len ==\
    \ 1) return array($arr[0]);\n  $min = min($arr);\n  $max = max($arr);\n  $range\
    \ = range($min, $max);\n  $reversed = array_reverse($range);\n  $names = array();\n\
    \  foreach ($reversed as $num) {\n    $names[] = $names[count($names) - 1] . ($num\
    \ == $min ? ' One' : $num == $max ? ' Nine' : $num == 1 ? 'Two' : $num == 2 ?\
    \ 'Three' : $num == 3 ? 'Four' : $num == 4 ? 'Five' : $num == 5 ? 'Six' : $num\
    \ == 6 ? 'Seven' : $num == 7 ? 'Eight' : 'Nine');\n  }\n  return $names;\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n\
    \    array(\n        'name' => 'One',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'Two',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'Three',\n        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n       \
    \ 'value' => 5\n    ),\n    array(\n        'name' => 'Six',\n        'value'\
    \ => 6\n    ),\n    array(\n        'name' => 'Seven',\n        'value' => 7\n\
    \    ),\n    array(\n        'name' => 'Eight',\n        'value' => 8\n    ),\n\
    \    array(\n        'name' => 'Nine',\n        'value' => 9\n    )\n);\n\n$result\
    \ = array();\nforeach($array as $key => $value) {\n    $result[] = $value['name'];\n\
    }\n\n$result = array_reverse($result);\n\nforeach($result as $key => $value) {\n\
    \    $result[$key] = $array[$value]['name'];\n}\n\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    array(\n\
    \        'name' => 'One',\n        'value' => 1\n    ),\n    array(\n        'name'\
    \ => 'Two',\n        'value' => 2\n    ),\n    array(\n        'name' => 'Three',\n\
    \        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n       \
    \ 'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n        'value'\
    \ => 5\n    ),\n    array(\n", "  $result = [];\n  foreach ($arr as $item) {\n\
    \    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n       \
    \ array_keys(\n          array_flip(\n            range(\n              1,\n \
    \             9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        sprintf('%u', $item)\n      );\n\
    \    }\n  }\n  return $result ? array_reverse($result) : [];\n}\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n$array = array(\n  \
    \  array(\n        'name' => 'One',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'Two',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'Three',\n        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n       \
    \ 'value' => 5\n    ),\n    array(\n        'name' => 'Six',\n        'value'\
    \ => 6\n    ),\n    array(\n        'name' => 'Seven',\n        'value' => 7\n\
    \    ),\n    array(\n        'name' => 'Eight',\n        'value' => 8\n    ),\n\
    \    array(\n        'name' => 'Nine',\n        'value' => 9\n    ),\n);\n\n$array\
    \ = array_map(function($item) {\n    return $item['name'];\n}, $array);\n\nusort($array,\
    \ function($a, $b) {\n    return $a['value'] - $b['value'];\n});\n\n$array = array_map(function($item)\
    \ {\n    return $item['name'];\n}, $array);\n\nprint_r($array);\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = array(\n\
    \    array(\n        'name' => 'One',\n        'value' => 1\n    ),\n    array(\n\
    \        'name' => 'Two',\n        'value' => 2\n    ),\n    array(\n        'name'\
    \ => 'Three',\n        'value' => 3\n    ),\n    array(\n        'name' => 'Four',\n\
    \        'value' => 4\n    ),\n    array(\n        'name' => 'Five',\n       \
    \ 'value' => 5\n    ),\n    array(\n        'name' => 'Six',\n        'value'\
    \ => 6\n    ),\n    array(\n        'name' => 'Seven',\n        'value' => 7\n\
    \    ),\n    array(\n        'name' => 'Eight',\n        'value' => 8", "  if\
    \ (empty($arr)) {\n    return array();\n  }\n  $result = array();\n  $length =\
    \ count($arr);\n  for ($i = 0; $i < $length; $i++) {\n    $result[] = array_key_exists($i,\
    \ $arr) ? $arr[$i] : '';\n  }\n  sort($result);\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $names[$value];\n\
    \  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len === 0) {\n \
    \   return [];\n  }\n  if ($len === 1) {\n    return ['One'];\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n\
    \    $result[] = str_pad($i, $len, '0', STR_PAD_LEFT);\n  }\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $names[$value];\n\
    \  }\n  return $result;\n}\n", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $len = count($arr);\n    if ($len < 2) {\n        return $arr;\n \
    \   }\n    $min = min($arr);\n    $max = max($arr);\n    $result = array();\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i] == $min) {\n      \
    \      $result[] = 'One';\n        } elseif ($arr[$i] == $max) {\n           \
    \ $result[] = 'Nine';\n        } elseif ($arr[$i] >= 1 && $arr[$i] <= 9) {\n \
    \           $result[] = strval($arr[$i]);\n        }\n    }\n    return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n \
    \ if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i]\
    \ <= $max) {\n      $result[] = array($reversed[$i], $i);\n    }\n  }\n  return\
    \ $result;\n}\n", "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n\
    \  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i] = $arr[$i];\n\
    \  }\n  sort($result);\n  $result2 = [];\n  for ($i = 0; $i < $len; $i++) {\n\
    \    $result2[$i] = $result[$i];\n  }\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ $result[$i] = $names[$result[$i]];\n  }\n  return $result2;\n}", "    $result\
    \ = [];\n    foreach ($arr as $num) {\n        if ($num > 0 && $num < 10) {\n\
    \            $result[] = str_replace(\n                array_keys(\n         \
    \           array_filter(\n                        range(1, 9),\n            \
    \            function ($num) use ($num) {\n                            return\
    \ $num == $num;\n                        }\n                    )\n          \
    \      ),\n                array_values(\n                    array_filter(\n\
    \                        range(1, 9),\n                        function ($num)\
    \ use ($num) {\n                            return $num == $num;\n           \
    \             }\n                    )\n                ),\n                ucfirst($num)\n\
    \            );\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\n\
    $i = 0;\nforeach ($arr as $num) {\n    if ($num > 0 && $num < 10) {\n        $result[$i]\
    \ = str_replace(\n            array_keys(\n                array_filter(\n   \
    \                 range(1, 9),\n                    function ($num) use ($num)\
    \ {\n                        return $num == $num;\n                    }\n   \
    \             )\n            ),\n            array_values(\n                array_filter(\n\
    \                    range(1, 9),\n                    function ($num) use ($num)\
    \ {\n                        return $num == $num;\n                    }\n   \
    \             )\n            ),\n            ucfirst($num)\n        );\n    }\n\
    \    $i++;\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\n$i = 0;\n\
    foreach ($arr as $num) {\n    if ($num > 0 && $num < 10) {\n        $result[$i]\
    \ = str_replace(\n            array_keys(\n                array_filter(\n   \
    \                 range(1, 9),\n                    function ($num) use ($num)\
    \ {\n                        return $num == $num;\n                    }\n   \
    \             )\n            ),\n            array_values(\n                array_filter(\n\
    \                    range(1, 9),\n                    function ($num) use ($num)\
    \ {\n                        return $num == $num;\n                    }\n   \
    \             )\n            ),\n            ucfirst($num)\n        );\n    }\n\
    \    $i++;\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\n$i = 0;\n\
    foreach ($arr as $num) {\n    if ($num > 0 && $num < 10) {\n        $result[$i]\
    \ = ", "  $result = array();\n  foreach ($arr as $item) {\n    if ($item >= 1\
    \ && $item <= 9) {\n      $result[] = array($item, \"One\");\n    }\n    elseif\
    \ ($item >= 10 && $item <= 99) {\n      $result[] = array($item, \"Two\");\n \
    \   }\n    elseif ($item >= 100 && $item <= 999) {\n      $result[] = array($item,\
    \ \"Three\");\n    }\n    elseif ($item >= 1000 && $item <= 9999) {\n      $result[]\
    \ = array($item, \"Four\");\n    }\n    elseif ($item >= 10000 && $item <= 99999)\
    \ {\n      $result[] = array($item, \"Five\");\n    }\n    elseif ($item >= 100000\
    \ && $item <= 999999) {\n      $result[] = array($item, \"Six\");\n    }\n   \
    \ elseif ($item >= 1000000 && $item <= 9999999) {\n      $result[] = array($item,\
    \ \"Seven\");\n    }\n    elseif ($item >= 10000000 && $item <= 99999999) {\n\
    \      $result[] = array($item, \"Eight\");\n    }\n    elseif ($item >= 100000000\
    \ && $item <= 999999999) {\n      $result[] = array($item, \"Nine\");\n    }\n\
    \  }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $num) {\n\
    \    if ($num >= 1 && $num <= 9) {\n      $result[] = str_pad($num, 2, \"0\",\
    \ STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n    array(\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ),\n    array(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"\
    Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"),\n    array(\"\
    Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\"\
    , \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"Ten\", \"Eleven\", \"Twelve\"\
    , \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"\
    , \"Nineteen\"),\n    array(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\"\
    , \"Seventy\", \"Eighty\", \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"\
    Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\"\
    , \"Seventeen\", \"Eighteen\", \"Nineteen\"),\n    array(\"Twenty\", \"Thirty\"\
    , \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"),\n   \
    \ array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"\
    Eight\", \"Nine\"),\n    array(\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\",\
    \ \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"\
    ),\n    array(\"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\"\
    , \"Eighty\", \"Ninety\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"Ten\", \"Eleven\"\
    , \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\"\
    , \"Eighteen\", \"N", "  if (empty($arr)) {\n    return array();\n  }\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n      $result[] = array($value, $key);\n    }\n  }\n  sort($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $value[1];\n  }\n\
    \  foreach ($arr as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $result[$key] = $value;\n    }\n  }\n  return $result;\n}\n", "  $result\
    \ = array();\n  foreach ($arr as $num) {\n    if ($num >= 1 && $num <= 9) {\n\
    \      $result[] = array($num, 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine');\n    }\n  }\n  if (count($result)) {\n    array_multisort($result,\
    \ SORT_DESC, $arr);\n    foreach ($arr as $num) {\n      $result[] = array($num,\
    \ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine');\n \
    \   }\n  }\n  return $result;\n}\n", "    $len = count($arr);\n    if ($len ===\
    \ 0) {\n        return [];\n    }\n    if ($len === 1) {\n        return $arr;\n\
    \    }\n    $sorted = array_slice($arr, 0, $len);\n    array_multisort($sorted,\
    \ $arr);\n    $reversed = array_reverse($arr);\n    $result = [];\n    foreach\
    \ ($reversed as $key => $value) {\n        $result[$key] = $arr[$key];\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n\
    <code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n        $arr2[$value]\
    \ = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n$arr2 = array_map(function($v){\n\
    \    return $v == 1 ? $v : $v - 1;\n}, $arr2);\n$arr2 = array_combine(range(1,\
    \ 10), $arr2);\nprint_r($arr2);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n        $arr2[$value]\
    \ = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n$arr2 = array_map(function($v){\n\
    \    return $v == 1 ? $v : $v - 1;\n}, $arr2);\n$arr2 = array_combine(range(1,\
    \ 10), $arr2);\nprint_r($arr2);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\nforeach ($arr as\
    \ $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n        $arr2[$value]\
    \ = $value;\n    }\n}\n$arr2 = array_reverse($arr2);\n$arr2 = array_map(function($v){\n\
    \    return $v == 1 ? $v : $v - 1;\n}, $arr2);\n$arr2 = array_combine(range(1,\
    \ 10), $arr2);\nprint_r($arr2);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];", "  if (empty($arr)) {\n\
    \    return array();\n  }\n  $len = count($arr);\n  if ($len < 2) {\n    return\
    \ array();\n  }\n  $min = array_shift($arr);\n  $max = array_pop($arr);\n  $min\
    \ = max($min, $max);\n  $max = min($max, $len);\n  $arr = array_reverse($arr);\n\
    \  $arr = array_map(function($v) use ($min, $max) {\n    return $min <= $v ? $min\
    \ <= $v ? $min : $max : $max;\n  }, $arr);\n  return array_map(function($v) use\
    \ ($min, $max) {\n    return $min <= $v ? $min <= $v ? $min : $max : $max;\n \
    \ }, $arr);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n\
    <code>\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n$arr2 = array();\n$arr3 = array();\n\
    $arr4 = array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n$arr8\
    \ = array();\n$arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12 =\
    \ array();\n$arr13 = array();\n$arr14 = array();\n$arr15 = array();\n$arr16 =\
    \ array();\n$arr17 = array();\n$arr18 = array();\n$arr19 = array();\n$arr20 =\
    \ array();\n$arr21 = array();\n$arr22 = array();\n$arr23 = array();\n$arr24 =\
    \ array();\n$arr25 = array();\n$arr26 = array();\n$arr27 = array();\n$arr28 =\
    \ array();\n$arr29 = array();\n$arr30 = array();\n$arr31 = array();\n$arr32 =\
    \ array();\n$arr33 = array();\n$arr34 = array();\n$arr35 = array();\n$arr36 =\
    \ array();\n$arr37 = array();\n$arr38 = array();\n$arr39 = array();\n$arr40 =\
    \ array();\n$arr41 = array();\n$arr42 = array();\n$arr43 = array();\n$arr44 =\
    \ array();\n$arr45 = array();\n$arr46 = array();\n$arr47 = array();\n$arr48 =\
    \ array();\n$arr49 = array();", "  if (empty($arr)) {\n    return array();\n \
    \ }\n  $len = count($arr);\n  if ($len < 2) {\n    return array();\n  }\n  $min\
    \ = min($arr);\n  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result\
    \ = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = array(\n    \
    \  'name' => $reversed[$i],\n      'value' => $arr[$i],\n    );\n  }\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = array(\n\
    \        'name' => 'One',\n        'value' => 1,\n      );\n    }\n    if ($arr[$i]\
    \ == $max) {\n      $result[] = array(\n        'name' => 'Nine',\n        'value'\
    \ => 9,\n      );\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = ", "  $result = array();\n  if (empty($arr)) {\n    return $result;\n\
    \  }\n  $length = array_sum($arr);\n  if ($length < 1) {\n    return $result;\n\
    \  }\n  $result[] = 'One';\n  $result[] = 'Two';\n  $result[] = 'Three';\n  $result[]\
    \ = 'Four';\n  $result[] = 'Five';\n  $result[] = 'Six';\n  $result[] = 'Seven';\n\
    \  $result[] = 'Eight';\n  $result[] = 'Nine';\n  $result[] = 'Ten';\n  $result[]\
    \ = 'Eleven';\n  $result[] = 'Twelve';\n  $result[] = 'Thirteen';\n  $result[]\
    \ = 'Fourteen';\n  $result[] = 'Fifteen';\n  $result[] = 'Sixteen';\n  $result[]\
    \ = 'Seventeen';\n  $result[] = 'Eighteen';\n  $result[] = 'Nineteen';\n  $result[]\
    \ = 'Twenty';\n  $result[] = 'Twenty-one';\n  $result[] = 'Twenty-two';\n  $result[]\
    \ = 'Twenty-three';\n  $result[] = 'Twenty-four';\n  $result[] = 'Twenty-five';\n\
    \  $result[] = 'Twenty-six';\n  $result[] = 'Twenty-seven';\n  $result[] = 'Twenty-eight';\n\
    \  $result[] = 'Twenty-nine';\n  $result[] = 'Thirty';\n  $result[] = 'Thirty-one';\n\
    \  $result[] = 'Thirty-two';\n  $result[] = 'Thirty-three';\n  $result[] = 'Thirty-four';\n\
    \  $result[] = 'Thirty-five';\n  $result[] = 'Thirty-six';\n  $result[] = 'Thirty-seven';\n\
    \  $result[] = 'Thirty-eight';\n  $result[] = 'Thirty-nine';\n  $result[] = 'Forty';\n\
    \  $result[] = 'Forty-one';\n  $result[] = 'Forty-two';\n  $result[] = 'Forty-three';\n\
    \  $result[] = 'Forty-four';\n  $result[] = 'Forty-five';\n  $result[] = 'Forty-six';\n\
    \  $result[] = 'Forty-seven';\n  $result[] = 'Forty-eight';\n  $result[] = 'Forty-nine';\n\
    \  $result[] = 'Fifty';\n  $result[] = 'Fifty-one';", "  $result = array();\n\
    \  foreach ($arr as $num) {\n    if ($num < 1 || $num > 9) {\n      continue;\n\
    \    }\n    $result[] = array('name' => $nums[$num], 'length' => $num);\n  }\n\
    \  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as $num) {\n  \
    \  $result[] = $nums[$num];\n  }\n  return $result;\n}", "  $result = array();\n\
    \  foreach ($arr as $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[]\
    \ = array($value, $arr[$value]);\n    }\n  }\n  array_multisort($result, SORT_DESC,\
    \ $arr);\n  foreach ($arr as $value) {\n    if ($value >= 1 && $value <= 9) {\n\
    \      $result[] = array($value, $arr[$value]);\n    }\n  }\n  return $result;\n\
    }", "  $len = count($arr);\n  if ($len == 0) {\n    return [];\n  }\n  if ($len\
    \ == 1) {\n    return ['One'];\n  }\n  if ($len > 9) {\n    return ['One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'];\n  }\n  $result =\
    \ [];\n  for ($i = 0; $i < $len; $i++) {\n    $result[] = str_replace(\n     \
    \ array_keys($arr),\n      array_values($arr),\n      str_pad($i, $len, '0', STR_PAD_LEFT)\n\
    \    );\n  }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $item)\
    \ {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n   \
    \     array_keys(\n          array_flip(\n            range(\n              1,\n\
    \              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        sprintf('%u', $item)\n      );\n\
    \    }\n  }\n  return $result;\n}\n", "  $result = array();\n  if (empty($arr))\
    \ {\n    return $result;\n  }\n  $length = count($arr);\n  if ($length < 2) {\n\
    \    return $result;\n  }\n  $min = min($arr);\n  $max = max($arr);\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n    elseif\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max\
    \ - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3)\
    \ {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n  \
    \    $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    This doesn't work if the array is `[2,1,-1,55]`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. The OP didn't specify what to do with negative\
    \ numbers. I assumed they were to be ignored.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't test it before posting it.  I did\
    \ test it before posting it, and it didn't work.  I tested it again just now and\
    \ it works.  I tested it on `[2,1,-1,55]` and it works.  I tested it on `[2,1,-1,55,2,3]`\
    \ and it works.  I tested it on `[2,1,-1,55,2,3,4]` and it works.  I tested it\
    \ on `[2,1,-1,55,2,3,4,5]` and it works.  I tested it on `[2,1,-1,55,2,3,4,5,6]`\
    \ and it works.  I tested it on `[2,1,-1,55,2,3,4,5,6,7]` and it ", "  $len =\
    \ count($arr);\n  if ($len == 0) {\n    return [];\n  }\n  if ($len == 1) {\n\
    \    return ['One'];\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $arr2 =\
    \ [];\n  for ($i = $min; $i <= $max; $i++) {\n    $arr2[] = str_pad($i, strlen($i)\
    \ + 1, '0', STR_PAD_LEFT);\n  }\n  return array_reverse($arr2);\n}\n", "  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  if ($len ==\
    \ 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = sprintf('One',\
    \ $i);\n    }\n    elseif ($arr[$i] == $max) {\n      $result[] = sprintf('Nine',\
    \ $i);\n    }\n    elseif ($arr[$i] == $reversed[$i]) {\n      $result[] = sprintf('Eight',\
    \ $i);\n    }\n    elseif ($arr[$i] == $reversed[$i - 1]) {\n      $result[] =\
    \ sprintf('Seven', $i);\n    }\n    elseif ($arr[$i] == $reversed[$i - 2]) {\n\
    \      $result[] = sprintf('Six', $i);\n    }\n    elseif ($arr[$i] == $reversed[$i\
    \ - 3]) {\n      $result[] = sprintf('Five', $i);\n    }\n    elseif ($arr[$i]\
    \ == $reversed[$i - 4]) {\n      $result[] = sprintf('Four', $i);\n    }\n   \
    \ elseif ($arr[$i] == $reversed[$i - 5]) {\n      $result[] = sprintf('Three',\
    \ $i);\n    }\n    elseif ($arr[$i] == $reversed[$i - 6]) {\n      $result[] =\
    \ sprintf('Two', $i);\n    }\n    elseif ($arr[$i] == $reversed[$i - 7]) {\n \
    \     $result[] = sprintf('One', $i);\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. Try it with `by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])`\n<|/ c |>\n<| c |>\nIt does work, try it with `by_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])`\n<|/ c |>\n<| c |>\nI see it now. Thanks for your help.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(2, 1, 1, 4, 5, 8, 2, 3);\n\
    $arr = array_reverse($arr);\n$arr = array_map(function($v){\n    return $v ==\
    \ 1 ? $v : $v == 9 ? $v : $v == 8 ? $v : $v == 7 ? $v : ", "  if (!$arr) {\n \
    \   return [];\n  }\n  $len = count($arr);\n  if ($len === 0) {\n    return [];\n\
    \  }\n  if ($len > 9) {\n    return [];\n  }\n  $result = [];\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    $result[$i] = $arr[$i];\n  }\n  sort($result);\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n \
    \ return $result;\n}", "    $len = count($arr);\n    if ($len == 0) {\n      \
    \  return array();\n    }\n    if ($len == 1) {\n        return array($arr[0]);\n\
    \    }\n    $min = min($arr);\n    $max = max($arr);\n    $reversed = array_reverse($arr);\n\
    \    $result = array();\n    for ($i = 0; $i < $len; $i++) {\n        if ($min\
    \ <= $arr[$i] && $arr[$i] <= $max) {\n            $result[] = name_by_number($arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min)\
    \ {\n      $result[] = 'One';\n    }\n    elseif ($arr[$i] == $max) {\n      $result[]\
    \ = 'Nine';\n    }\n    elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n\
    \    }\n    elseif ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n\
    \    elseif ($arr[$i] == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif\
    \ ($arr[$i] == $max - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i]\
    \ == $min + 3) {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max\
    \ - 3) {\n      $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4)\
    \ {\n      $result[] = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n\
    \      $result[] = 'Nine';\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8,\
    \ 2, 3];\n$arr2 = array_filter($arr, function($v){\n    return $v > 0 && $v <\
    \ 10;\n});\n$arr3 = array_map(function($v){\n    return $v < 10 ? 'One' : $v <\
    \ 20 ? 'Two' : $v < 30 ? 'Three' : $v < 40 ? 'Four' : $v < 50 ? 'Five' : $v <\
    \ 60 ? 'Six' : $v < 70 ? 'Seven' : $v < 80 ? 'Eight' : $v < 90 ? 'Nine' : '';\n\
    }, $arr2);\n$arr4 = array_map(function($v){\n    return $v < 10 ? 'One' : $v <\
    \ 20 ? 'Two' : $v < 30 ? 'Three' : $v < 40 ? 'Four' : $v < 50 ? 'Five' : $v <\
    \ 60 ? 'Six' : $v < 70 ? 'Seven' : $v < 80 ? 'Eight' : $v < 90 ? 'Nine' : '';\n\
    }, $arr3);\n$arr5 = array_map(function($v){\n    return ", "  if (!$arr) return\
    \ [];\n  $len = count($arr);\n  if ($len < 2) return $arr;\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len; $i++) {\n   \
    \ if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i] ==\
    \ $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 2, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$array\
    \ = array_filter($array, function($v){\n    return $v >= 1 && $v <= 9;\n});\n\
    $array = array_map(function($v){\n    return str_pad($v, 2, '0', STR_PAD_LEFT);\n\
    }, $array);\n$array = array_reverse($array);\n$array = array_combine(range(1,\
    \ 9), $array);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $array = array(1,2,3,4,5,6,7,8,9,10);\n$array = array_filter($array, function($v){\n\
    \    return $v >= 1 && $v <= 9;\n});\n$array = array_map(function($v){\n    return\
    \ str_pad($v, 2, '0', STR_PAD_LEFT);\n}, $array);\n$array = array_reverse($array);\n\
    $array = array_combine(range(1, 9), $array);\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nPlease add some explanation to your answer such that others can learn from\
    \ it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $array = array_filter($array, function($v){\n    return $v >= 1 && $v <= 9;\n\
    });\n$array = array_map(function($v){\n    return str_pad($v, 2, '0', STR_PAD_LEFT);\n\
    }, $array);\n$array = array_reverse($array);\n$array = array_combine(range(1,\
    \ 9), $array);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n", "    $len = count($arr);\n \
    \   if ($len == 0) {\n        return array();\n    }\n    if ($len == 1) {\n \
    \       return array($arr[0]);\n    }\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $result = array();\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $result[] = 'One';\n        } else if ($arr[$i] == $max)\
    \ {\n            $result[] = 'Nine';\n        } else {\n            $result[]\
    \ = str_pad($arr[$i], 2, '0', STR_PAD_LEFT);\n        }\n    }\n    return array_reverse($result);\n\
    }\n", "    if (empty($arr)) {\n        return array();\n    }\n    $arr = array_filter($arr);\n\
    \    $arr = array_map('intval', $arr);\n    $arr = array_filter($arr);\n    $arr\
    \ = array_map('strval', $arr);\n    $arr = array_reverse($arr);\n    $arr = array_map(function($v)\
    \ {\n        return strval($v);\n    }, $arr);\n    return $arr;\n}\n", "    if\
    \ (empty($arr)) {\n        return [];\n    }\n    $result = [];\n    $length =\
    \ count($arr);\n    for ($i = 0; $i < $length; $i++) {\n        $result[] = array_key_exists($i,\
    \ $arr) ? $arr[$i] : '';\n    }\n    array_multisort($result, SORT_DESC, $arr);\n\
    \    foreach ($arr as $key => $value) {\n        $result[$key] = $value === ''\
    \ ? $value : $result[$key];\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't work for me. I've tried\
    \ it on http://sandbox.onlinephpfunctions.com/code/e3efd18bce9c1ef8e437f54b80b709dcae3afb78\
    \ but it doesn't work. Can you please check it again?\n<|/ c |>\n<| c |>\nI tested\
    \ it on sandbox and it works. Can you please check your array again?\n<|/ c |>\n\
    <| c |>\nI checked it again and it doesn't work. Can you please check it again?\n\
    <|/ c |>\n<| c |>\nI checked it again and it doesn't work. Can you please check\
    \ it again?\n<|/ c |>\n<| c |>\nI checked it again and it doesn't work. Can you\
    \ please check it again?\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    <?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\n$arr3 = [];\n$arr4 = [];\n\
    $arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10 = [];\n\
    $arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n$arr16 =\
    \ [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 = [];\n\
    $arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n$arr27 =\
    \ [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 = [];\n\
    $arr33 = [];\n$arr34 = [];\n$arr35 = [];\n$arr36 = [];\n$arr37 = [];\n$arr38 =\
    \ [];\n$arr", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n\
    \  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $reversed = array_reverse($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $result[] = array(\n      'name' => $reversed[$i],\n\
    \      'value' => $arr[$i]\n    );\n  }\n  $result[] = array(\n    'name' => $min,\n\
    \    'value' => $min\n  );\n  $result[] = array(\n    'name' => $max,\n    'value'\
    \ => $max\n  );\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len ==\
    \ 0) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n \
    \ if ($min == $max) {\n    return array($min);\n  }\n  $result = [];\n  for ($i\
    \ = $min; $i <= $max; $i++) {\n    $result[] = name_by_length($i, $len);\n  }\n\
    \  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $len\
    \ = count($arr);\n  if ($len < 2) {\n    return array();\n  }\n  $min = min($arr);\n\
    \  $max = max($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n\
    \    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return array_reverse($result);\n}\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| c |>\nThis doesn't seem to work. `array_reverse`\
    \ doesn't seem to work on an array of strings.\n<|/ c |>\n<| c |>\nIt does work.\
    \ `array_reverse` reverses the order of the array and returns the reversed array.\
    \ `array_reverse` doesn't change the original array. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it and it doesn't work. `array_reverse` doesn't seem to work\
    \ on an array of strings.\n<|/ c |>\n<| c |>\nI tested it and it does work. `array_reverse`\
    \ reverses the order of the array and returns the reversed array. `array_reverse`\
    \ doesn't change the original array. Try it yourself.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it does work. `array_reverse` reverses the order of the array and returns\
    \ the reversed array. `array_reverse` doesn't change the original array. Try it\
    \ yourself.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$array = array(\n    1\
    \ => array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n\
    \    2 => array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'),\n    3 => array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven',\
    \ 'Eight', 'Nine'),\n    4 => array('One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'),\n    5 => array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'),\n    6 => array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    7 => ", "    $len = count($arr);\n\
    \    if ($len == 0) {\n        return [];\n    }\n    if ($len == 1) {\n     \
    \   return ['One'];\n    }\n    if ($len == 2) {\n        return ['One', 'Two'];\n\
    \    }\n    if ($len == 3) {\n        return ['One', 'Two', 'Three'];\n    }\n\
    \    if ($len == 4) {\n        return ['One', 'Two', 'Three', 'Four'];\n    }\n\
    \    if ($len == 5) {\n        return ['One', 'Two', 'Three', 'Four', 'Five'];\n\
    \    }\n    if ($len == 6) {\n        return ['One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six'];\n    }\n    if ($len == 7) {\n        return ['One', 'Two', 'Three',\
    \ 'Four', 'Five', 'Six', 'Seven'];\n    }\n    if ($len == 8) {\n        return\
    \ ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight'];\n    }\n \
    \   if ($len == 9) {\n        return ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'];\n    }\n}\n", "    $result = [];\n    foreach ($arr\
    \ as $item) {\n        if ($item >= 1 && $item <= 9) {\n            $result[]\
    \ = str_pad($item, 2, \"0\", STR_PAD_LEFT);\n        }\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($arr as $key => $value) {\n      \
    \  if ($value >= 1 && $value <= 9) {\n            $result[] = str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $value);\n        }\n    }\n    return\
    \ empty($arr) ? array() : array_reverse($result);\n}\n", "  $result = [];\n  foreach\
    \ ($arr as $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys(\n          array_flip(\n            range(\n            \
    \  1,\n              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        sprintf('%u', $item)\n      );\n\
    \    }\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach ($arr as\
    \ $num) {\n        if ($num >= 1 && $num <= 9) {\n            $result[] = str_replace(\"\
    0\", \"One\", str_replace(\"1\", \"Two\", str_replace(\"2\", \"Three\", str_replace(\"\
    3\", \"Four\", str_replace(\"4\", \"Five\", str_replace(\"5\", \"Six\", str_replace(\"\
    6\", \"Seven\", str_replace(\"7\", \"Eight\", str_replace(\"8\", \"Nine\", $num))))))));\n\
    \        }\n    }\n    return empty($result) ? [] : $result;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2,\
    \ 3];\n$result = [];\nforeach ($arr as $num) {\n    if ($num >= 1 && $num <= 9)\
    \ {\n        $result[] = str_replace(\"0\", \"One\", str_replace(\"1\", \"Two\"\
    , str_replace(\"2\", \"Three\", str_replace(\"3\", \"Four\", str_replace(\"4\"\
    , \"Five\", str_replace(\"5\", \"Six\", str_replace(\"6\", \"Seven\", str_replace(\"\
    7\", \"Eight\", str_replace(\"8\", \"Nine\", $num))))))));\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2,\
    \ 1, 1, 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $num) {\n    if ($num\
    \ >= 1 && $num <= 9) {\n        $result[] = str_replace(\"0\", \"One\", str_replace(\"\
    1\", \"Two\", str_replace(\"2\", \"Three\", str_replace(\"3\", \"Four\", str_replace(\"\
    4\", \"Five\", str_replace(\"5\", \"Six\", str_replace(\"6\", \"Seven\", str_replace(\"\
    7\", \"Eight\", str_replace(\"8\", \"Nine\", $num))))))));\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $num) {\n    if ($num >= 1\
    \ && $num <= 9) {\n        $result[] = str_replace(\"0\", \"One\", str_replace(\"\
    1\", \"Two\", str_replace(\"2\", \"Three\", str_replace(\"3\", \"Four\", str_replace(\"\
    4\", \"Five\", str_replace(\"5\", \"Six\", str_replace(\"6\", \"Seven\", str_replace(\"\
    7\", \"Eight\", str_replace(\"8\", \"Nine\", ", "  $result = array();\n  foreach\
    \ ($arr as $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[] =\
    \ array('name' => \"One\", 'value' => $value);\n    } else if ($value >= 10 &&\
    \ $value <= 99) {\n      $result[] = array('name' => \"Two\", 'value' => $value);\n\
    \    } else if ($value >= 100 && $value <= 999) {\n      $result[] = array('name'\
    \ => \"Three\", 'value' => $value);\n    } else if ($value >= 1000 && $value <=\
    \ 9999) {\n      $result[] = array('name' => \"Four\", 'value' => $value);\n \
    \   } else if ($value >= 10000 && $value <= 99999) {\n      $result[] = array('name'\
    \ => \"Five\", 'value' => $value);\n    } else if ($value >= 100000 && $value\
    \ <= 999999) {\n      $result[] = array('name' => \"Six\", 'value' => $value);\n\
    \    } else if ($value >= 1000000 && $value <= 999999999) {\n      $result[] =\
    \ array('name' => \"Seven\", 'value' => $value);\n    } else if ($value >= 10000000\
    \ && $value <= 99999999) {\n      $result[] = array('name' => \"Eight\", 'value'\
    \ => $value);\n    } else if ($value >= 100000000 && $value <= 99999999999) {\n\
    \      $result[] = array('name' => \"Nine\", 'value' => $value);\n    }\n  }\n\
    \  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n  }\n  $len\
    \ = count($arr);\n  if ($len < 2) {\n    return array();\n  }\n  $min = array_shift($arr);\n\
    \  $max = array_shift($arr);\n  if ($min > $max) {\n    return array();\n  }\n\
    \  $min = max($min, 1);\n  $max = min($max, 9);\n  $reversed = array();\n  for\
    \ ($i = $min; $i <= $max; $i++) {\n    $reversed[$i] = $names[$i];\n  }\n  return\
    \ array_reverse($reversed);\n}", "  $result = [];\n  foreach ($arr as $num) {\n\
    \    if ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(\n        range(1,\
    \ 9),\n        array_map(function ($n) {\n          return \"One\";\n        },\
    \ $num),\n        range(1, 9)\n      );\n    }\n  }\n  return empty($arr) ? []\
    \ : $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nI like your\
    \ solution, but I cannot get it to work. Can you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n$array = array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return str_replace(\"One\", \"1\", $v);\n\
    }, $array);\n$array = array_map(function($v){\n    return str_replace(\"Two\"\
    , \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n    return str_replace(\"\
    Three\", \"3\", $v);\n}, $array);\n$array = array_map(function($v){\n    return\
    \ str_replace(\"Four\", \"4\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Five\", \"5\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Six\", \"6\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Seven\", \"7\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Eight\", \"8\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"Nine\", \"9\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"0\", \"0\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"1\", \"1\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"2\", \"2\", $v);\n}, $array);\n$array = array_map(function($v){\n\
    \    return str_replace(\"3\", \"", "  $len = count($arr);\n  if ($len == 0) return\
    \ array();\n  if ($len == 1) return array($arr[0]);\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if\
    \ ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i] == $max)\
    \ {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_pad($arr[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $len = count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if ($arr[$i]\
    \ == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[] = str_replace(array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'), array('',\
    \ '', '', '', '', '', '', ''), $arr[$i]);\n    }\n  }\n  return $result;\n}\n",
  "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  if ($len\
    \ == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = sprintf('One',\
    \ $i);\n    }\n    if ($arr[$i] == $max) {\n      $result[] = sprintf('Nine',\
    \ $len - $i);\n    }\n    if ($arr[$i] == $reversed[$i]) {\n      $result[] =\
    \ sprintf('Ten', $len - $i - 1);\n    }\n  }\n  return $result;\n}\n", "  if (empty($arr))\
    \ {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as $num) {\n    if\
    \ ($num < 1 || $num > 9) {\n      continue;\n    }\n    $result[] = str_replace(\n\
    \      array_keys($names),\n      array_values($names),\n      str_pad($num, 2,\
    \ '0', STR_PAD_LEFT)\n    );\n  }\n  return $result;\n}\n", "  $result = [];\n\
    \  foreach ($arr as $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[]\
    \ = str_replace(\n        array_keys(\n          array_flip(\n            array_slice(\n\
    \              str_split(\n                str_pad($item, 9, STR_PAD_LEFT),\n\
    \                9\n              )\n            )\n          )\n        ),\n\
    \        array_values(\n          array_flip(\n            array_slice(\n    \
    \          str_split(\n                str_pad($item, 9, STR_PAD_LEFT),\n    \
    \            9\n              )\n            )\n          )\n        ),\n    \
    \    One\n      );\n    }\n  }\n  return empty($result) ? [] : $result;\n}\n",
  "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  if (empty($result))\
    \ {\n    return array();\n  }\n  ksort($result);\n  foreach ($result as $key =>\
    \ $value) {\n    $result[$key] = $names[$value];\n  }\n  return $result;\n}\n",
  "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as\
    \ $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys(\n          array_flip(\n            range(\n            \
    \  1,\n              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        array_search($num, range(1, 9))\
    \ + ''\n      );\n    }\n  }\n  return $result;\n}\n", "  if (!$arr) return [];\n\
    \  $len = count($arr);\n  if ($len < 2) return $arr;\n  $sorted = array_merge(array_slice($arr,\
    \ 0, $len - 1), array_slice($arr, $len - 1, $len));\n  foreach ($sorted as $key\
    \ => $value) {\n    if ($value < 1 || $value > 9) unset($sorted[$key]);\n  }\n\
    \  $sorted = array_reverse($sorted);\n  $result = [];\n  foreach ($sorted as $key\
    \ => $value) {\n    $result[] = str_pad($value, 2, \"0\", STR_PAD_LEFT);\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however\
    \ it only works with arrays of length 2 or less. If you try it with arrays of\
    \ length 3 or more, it returns an empty array. I've updated my question to include\
    \ an example with arrays of length 3 and more.\n<|/ c |>\n<| c |>\nI updated my\
    \ answer to include a solution for arrays of length 3 or more.\n<|/ c |>\n<| a\
    \ dscore=1 |>\n<code>\n<?php\n\n$numbers = array(\n    array(\n        1 => 1,\n\
    \        2 => 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n        6\
    \ => 6,\n        7 => 7,\n        8 => 8,\n        9 => 9,\n    ),\n    array(\n\
    \        1 => 1,\n        2 => 2,\n        3 => 3,\n        4 => 4,\n        5\
    \ => 5,\n        6 => 6,\n        7 => 7,\n        8 => 8,\n        9 => 9,\n\
    \    ),\n    array(\n        1 => 1,\n        2 => 2,\n        3 => 3,\n     \
    \   4 => 4,\n        5 => 5,\n        6 => 6,\n        7 => 7,\n        8 => 8,\n\
    \        9 => 9,\n    ),\n    array(\n        1 => 1,\n        2 => 2,\n     \
    \   3 => 3,\n        4 => 4,\n        5 => 5,\n        6 => 6,\n        7 => 7,\n\
    \        8 => 8,\n        9 => 9,\n    ),\n    array(\n        1 => 1,\n     \
    \   2 => 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n        6 => 6,\n\
    \        7 => 7,\n        8 => 8,\n        9 => 9,\n    ),\n    array(\n     \
    \   1 => 1,\n        2 => 2,\n        3 => 3,\n        4 => 4,\n        5 => 5,\n\
    \        6 => ", "  if (empty($arr)) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return $arr;\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    $result[] = str_replace(\n      array_keys($arr),\n     \
    \ array_values($arr),\n      str_pad($reversed[$i], $max - $min + 1, '0', STR_PAD_LEFT)\n\
    \    );\n  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis doesn't work for negative numbers. `by_length([-1, -1, 1, -5, -8,\
    \ -1, -3]);` returns `['One', 'One', 'One', 'One', 'One', 'One', 'One', 'One']`\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nI added a fix for negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = array(\n    array('One', 'Two',\
    \ 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One',\
    \ 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'),\n    array('One",
  "  $result = array();\n  foreach ($arr as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[$value] = $key;\n    }\n  }\n  return $result;\n\
    }\n", "    $result = [];\n    foreach ($arr as $value) {\n        if ($value >=\
    \ 1 && $value <= 9) {\n            $result[] = str_replace(\n                array_keys(\n\
    \                    array_flip(\n                        range(\n           \
    \                 1,\n                            9\n                        )\n\
    \                    )\n                ),\n                array_values(\n  \
    \                  array_flip(\n                        range(\n             \
    \               1,\n                            9\n                        )\n\
    \                    )\n                ),\n                strval($value)\n \
    \           );\n        }\n    }\n    return empty($result) ? [] : $result;\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n$arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3];\n\n$result = array();\nforeach ($arr as $value) {\n\
    \    if ($value >= 1 && $value <= 9) {\n        $result[] = str_replace(\n   \
    \         array_keys(\n                array_flip(\n                    range(\n\
    \                        1,\n                        9\n                    )\n\
    \                )\n            ),\n            array_values(\n              \
    \  array_flip(\n                    range(\n                        1,\n     \
    \                   9\n                    )\n                )\n            ),\n\
    \            strval($value)\n        );\n    }\n}\n\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr\
    \ = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = array();\nforeach ($arr as $value) {\n\
    \    if ($value >= 1 && $value <= 9) {\n        $result[] = str_replace(\n   \
    \         array_keys(\n                array_flip(\n                    range(\n\
    \                        1,\n                        9\n                    )\n\
    \                )\n            ),\n            array_values(\n              \
    \  array_flip(\n                    range(\n                        1,\n     \
    \                   9\n                    )\n                )\n            ),\n\
    \            strval($value)\n        );\n    }\n}\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n$result = array();\nforeach ($arr as $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n        $result[] = str_replace(\n            array_keys(\n\
    \                array_flip(\n                    range(\n                   \
    \     1,\n                        9\n                    )\n                )\n\
    \            ),\n            array_values(\n                array_flip(\n    \
    \                range(\n                        1,\n                        9\n\
    \                    )\n                )\n            ),\n            strval($value)\n\
    \        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 ",
  "    $result = array();\n    $len = count($arr);\n    if ($len == 0) {\n       \
    \ return $result;\n    }\n    $min = min($arr);\n    $max = max($arr);\n    if\
    \ ($min == $max) {\n        $result[] = $min;\n        return $result;\n    }\n\
    \    $result[] = $min;\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $result[] = $i;\n        }\n    }\n    for ($i = 1;\
    \ $i < $len; $i++) {\n        if ($arr[$i] == $max) {\n            $result[] =\
    \ $i;\n        }\n    }\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min && $arr[$i - 1] == $max) {\n            $result[] = $i;\n        }\n\
    \    }\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i] == $max && $arr[$i\
    \ - 1] == $min) {\n            $result[] = $i;\n        }\n    }\n    return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) {\n    return [];\n  }\n  if ($len\
    \ == 1) {\n    return ['One'];\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[] = str_pad($i,\
    \ 2, '0', STR_PAD_LEFT);\n  }\n  $result = array_reverse($result);\n  $result\
    \ = array_map(function($v){\n    return $v == '0' ? 'One' : $v;\n  }, $result);\n\
    \  return $result;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n<?php\n$arr\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n$arr2 = array();\n$arr3 = array();\n$arr4\
    \ = array();\n$arr5 = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n\
    $arr9 = array();\n$arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13\
    \ = array();\n$arr14 = array();\n$arr15 = array();\n$arr16 = array();\n$arr17\
    \ = array();\n$arr18 = array();\n$arr19 = array();\n$arr20 = array();\n$arr21\
    \ = array();\n$arr22 = array();\n$arr23 = array();\n$arr24 = array();\n$arr25\
    \ = array();\n$arr26 = array();\n$arr27 = array();\n$arr28 = array();\n$arr29\
    \ = array();\n$arr30 = array();\n$arr31 = array();\n$arr32 = array();\n$arr33\
    \ = array();\n$arr34 = array();\n$arr35 = array();\n$arr36 = array();\n$arr37\
    \ = array();\n$arr38 = array();\n$arr39 = array();\n$arr40 = array();\n$arr41\
    \ = array();\n$arr42 = array();\n$arr43 = array();\n$arr44 = array();\n$arr45\
    \ = array();\n$arr46 = array();\n$arr47 = array();\n$arr48 = array();\n$arr49\
    \ = array();\n$arr50 = array();\n$arr51 = array();\n$arr52 = array();\n$arr53\
    \ = array();\n$arr54 = array();\n$arr55 = array();", "    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n    \
    \        $result[] = str_replace(\n                array_keys(\n             \
    \       array_flip(\n                        range(\n                        \
    \    1,\n                            9\n                        )\n          \
    \          )\n                ),\n                array_values(\n            \
    \        array_flip(\n                        range(\n                       \
    \     1,\n                            9\n                        )\n         \
    \           )\n                ),\n                strval($value)\n          \
    \  );\n        }\n    }\n    return empty($result) ? [] : $result;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers or numbers that are not between 1 and 9\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers or numbers that are not between 1 and 9\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(1, 5, 2, 6, 3, 7, 4, 8, 9);\n\
    $result = array();\nforeach ($array as $key => $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n        $result[] = str_replace(\n            array_keys(\n\
    \                array_flip(\n                    range(\n                   \
    \     1,\n                        9\n                    )\n                )\n\
    \            ),\n            array_values(\n                array_flip(\n    \
    \                range(\n                        1,\n                        9\n\
    \                    )\n                )\n            ),\n            strval($value)\n\
    \        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(1, 5, 2, 6, 3, 7, 4, 8, 9);\n$result\
    \ = array();\nforeach ($array as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n        $result[] = str_replace(\n            array_keys(\n       \
    \         array_flip(\n                    range(\n                        1,\n\
    \                        9\n                    )\n                )\n       \
    \     ),\n            array_values(\n                array_flip(\n           \
    \         range(\n                        1,\n                        9\n    \
    \                )\n                )\n            ),\n            strval($value)\n\
    \        );\n    }\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(1, 5, 2, 6, 3, 7, 4, 8, 9);\n$result\
    \ = array();\nforeach ($array as $key => $value) {\n    if ($value >= 1 && $value\
    \ <= 9) {\n        $result[] = str_replace(\n            array_keys(\n       \
    \         array_flip(\n                    range(\n                        1,\n\
    \                        ", "    if (empty($arr)) {\n        return array();\n\
    \    }\n    $result = array();\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value >= 1 && $value <= 9) {\n            $result[] = array($value, $key);\n\
    \        }\n    }\n    usort($result, function($a, $b) {\n        return $a[0]\
    \ - $b[0];\n    });\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value[1];\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    1 => 2,\n    2 =>\
    \ 1,\n    3 => 1,\n    4 => 5,\n    5 => 8,\n    6 => 2,\n    7 => 3,\n    8 =>\
    \ 1,\n    9 => 1,\n);\n\n$array = array_filter($array, function($value) {\n  \
    \  return $value >= 1 && $value <= 9;\n});\n\n$array = array_map(function($value)\
    \ {\n    return $value >= 1 && $value <= 9 ? 'One' : 'Two';\n}, $array);\n\n$array\
    \ = array_combine($array, $array);\n\n$array = array_flip($array);\n\n$array =\
    \ array_map(function($value) {\n    return $value >= 1 && $value <= 9 ? 'One'\
    \ : 'Two';\n}, $array);\n\n$array = array_flip($array);\n\nprint_r($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\n    1 =>\
    \ 2,\n    2 => 1,\n    3 => 1,\n    4 => 5,\n    5 => 8,\n    6 => 2,\n    7 =>\
    \ 3,\n    8 => 1,\n    9 => 1,\n);\n\n$array = array_filter($array, function($value)\
    \ {\n    return $value >= 1 && $value <= 9;\n});\n\n$array = array_map(function($value)\
    \ {\n    return $value >= 1 && $value <= 9 ? 'One' : 'Two';\n}, $array);\n\n$array\
    \ = array_combine($array, $array);\n\n$array = array_flip($array);\n\n$array =\
    \ array_map(function($value) {\n    return $value >= 1 && $value <= 9 ? 'One'\
    \ : 'Two';\n}, $array);\n\n$array = array_flip($array);\n\nprint_r($array);\n\
    </code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n\
    $array = array(\n    1 => 2,\n    2 => 1,\n    3 => ", "  $len = count($arr);\n\
    \  if ($len === 0) {\n    return [];\n  }\n  if ($len === 1) {\n    return ['One'];\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  if ($min === $max) {\n    return\
    \ ['One'];\n  }\n  $result = [];\n  for ($i = $min; $i <= $max; $i++) {\n    $result[]\
    \ = str_pad($i, $len - 1, '0', STR_PAD_LEFT);\n  }\n  return array_reverse($result);\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n \
    \ $min = min($arr);\n  $max = max($arr);\n  if ($min == $max) {\n    return array($min);\n\
    \  }\n  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i]\
    \ == $min) {\n      $result[] = 'One';\n    }\n    elseif ($arr[$i] == $max) {\n\
    \      $result[] = 'Nine';\n    }\n    else {\n      $result[] = str_pad($arr[$i],\
    \ 3, '0', STR_PAD_LEFT);\n    }\n  }\n  return array_reverse($result);\n}\n",
  "    $len = count($arr);\n    if ($len === 0) {\n        return [];\n    }\n   \
    \ if ($len > 9) {\n        return $arr;\n    }\n    $sorted = array_slice($arr,\
    \ 0, 9);\n    sort($sorted);\n    $reversed = array_reverse($sorted);\n    foreach\
    \ ($reversed as $key => $value) {\n        if ($value < 1) {\n            unset($reversed[$key]);\n\
    \        }\n    }\n    $result = [];\n    foreach ($reversed as $key => $value)\
    \ {\n        $result[] = str_replace(range(1, 9), $value, $arr[$key]);\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ work if you have negative numbers in the array. `by_length([-1, -1, 1, -5, 8,\
    \ 2, 3])` returns `['One', 'One', 'One', 'One', 'One', 'One', 'One', 'One']`\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't have negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$result = array_map(function($v){\n    return str_replace(range(1,\
    \ 9), $v, $v);\n}, $arr);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3];\n$result = array_map(function($v){\n    return str_replace(range(1,\
    \ 9), $v, $v);\n}, $arr);\n</code>\n<|/ a tags=php,arrays dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = array_map(function($v){\n\
    \    return str_replace(range(1, 9), $v, $v);\n}, $arr);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result\
    \ = array_map(function($v){\n    return str_replace(range(1, 9), $v, $v);\n},\
    \ $arr);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$arr =\
    \ [2, 1, 1, 4, 5, 8, 2, 3];\n$result = array_map(function($v){\n    return str_replace(range(1,\
    \ 9), $v, $v);\n}, $arr);\n</code>\n<|/ a dscore=", "    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value >= 1 && $value <= 9) {\n    \
    \        $result[$value] = $key;\n        }\n    }\n    return $result;\n}\n",
  "    $len = count($arr);\n    if ($len == 0) {\n        return array();\n    }\n\
    \    $min = min($arr);\n    $max = max($arr);\n    if ($min == $max) {\n     \
    \   return array($min);\n    }\n    $result = array();\n    for ($i = 0; $i <\
    \ $len; $i++) {\n        if ($arr[$i] == $min) {\n            $result[] = 'One';\n\
    \        } else if ($arr[$i] == $max) {\n            $result[] = 'Nine';\n   \
    \     } else {\n            $result[] = str_replace(array('0', '1'), '', $arr[$i]);\n\
    \        }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. I tried your solution and it works fine for small arrays.\
    \ But when I tried it with larger arrays, it didn't work. Can you please check\
    \ my updated question and let me know what I am doing wrong?\n<|/ c |>\n<| c |>\n\
    I updated my answer with a new solution that should work for larger arrays.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I tried your solution and it works\
    \ fine for small arrays. But when I tried it with larger arrays, it didn't work.\
    \ Can you please check my updated question and let me know what I am doing wrong?\n\
    <|/ c |>\n<| c |>\nI updated my answer with a new solution that should work for\
    \ larger arrays.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried your solution\
    \ and it works fine for small arrays. But when I tried it with larger arrays,\
    \ it didn't work. Can you please check my updated question and let me know what\
    \ I am doing wrong?\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\n\
    \    array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"),\n    array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\"),\n    array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"),\n    array(\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"", "  $result = [];\n  foreach ($arr as\
    \ $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys(\n          array_flip(\n            range(\n            \
    \  1,\n              9\n            )\n          )\n        ),\n        array_values(\n\
    \          array_flip(\n            range(\n              1,\n              9\n\
    \            )\n          )\n        ),\n        array_search($item, range(1,\
    \ 9))\n      );\n    }\n  }\n  return empty($result) ? [] : $result;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't seem to work. `array_search`\
    \ returns `0` when searching for `1` and the array is empty so `array_search`\
    \ returns `0` and the `if` statement is never true.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works fine. `array_search` returns `0` when searching for `1` and\
    \ the array is empty so `array_search` returns `0` and the `if` statement is never\
    \ true.\n<|/ c |>\n<| c |>\nI tested it and it works fine. `array_search` returns\
    \ `0` when searching for `1` and the array is empty so `array_search` returns\
    \ `0` and the `if` statement is never true.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works fine. `array_search` returns `0` when searching for `1` and the array\
    \ is empty so `array_search` returns `0` and the `if` statement is never true.\n\
    <|/ c |>\n<| c |>\nI tested it and it works fine. `array_search` returns `0` when\
    \ searching for `1` and the array is empty so `array_search` returns `0` and the\
    \ `if` statement is never true.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array =\
    \ array(\n    array(\n        'name' => 'One',\n        'value' => 1\n    ),\n\
    \    array(\n        'name' => 'Two',\n        'value' => 2\n    ),\n    array(\n\
    \        'name' => 'Three',\n        'value' => 3\n    ),\n    array(\n      \
    \  'name' => 'Four',\n        'value' => 4\n    ),\n    array(\n        'name'\
    \ => 'Five',\n        'value' => 5\n    ),\n    array(\n        'name' => 'Six',\n\
    \        'value' => 6\n    ),\n    array(\n        'name' => 'Seven',\n      \
    \  '", "  if (empty($arr)) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] ==\
    \ $min) {\n      $result[] = 'One';\n    }\n    if ($arr[$i] == $max) {\n    \
    \  $result[] = 'Nine';\n    }\n    if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n   \
    \   $result[] = str_replace(array('0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9'), array('One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'), $arr[$i]);\n    }\n  }\n  return $result;\n}\n", "    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value >= 1 && $value <=\
    \ 9) {\n            $result[$value] = $key;\n        }\n    }\n    return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n \
    \ if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $arr = array_reverse($arr);\n  $arr = array_map(function($v)\
    \ use ($min, $max) {\n    return $min <= $v ? $v : $max;\n  }, $arr);\n  return\
    \ array_map(function($v) use ($arr) {\n    return $arr[$v];\n  }, $arr);\n}\n",
  "  $result = [];\n  foreach ($arr as $value) {\n    if ($value >= 1 && $value <=\
    \ 9) {\n      $result[] = str_replace(\n        array_keys(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        array_values(\n          array_flip(\n           \
    \ range(\n              1,\n              9\n            )\n          )\n    \
    \    ),\n        array_search($value, range(1, 9))\n      );\n    }\n  }\n  return\
    \ empty($arr) ? [] : $result;\n}\n", "    $result = [];\n    foreach ($arr as\
    \ $num) {\n        if ($num >= 1 && $num <= 9) {\n            $result[] = str_replace(\n\
    \                array_keys(\n                    array_flip(\n              \
    \          range(\n                            1,\n                          \
    \  9\n                        )\n                    )\n                ),\n \
    \               array_values(\n                    array_flip(\n             \
    \           range(\n                            1,\n                         \
    \   9\n                        )\n                    )\n                ),\n\
    \                strval($num)\n            );\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$array\
    \ = array();\n$array[] = array('name' => 'One', 'length' => 1);\n$array[] = array('name'\
    \ => 'Two', 'length' => 2);\n$array[] = array('name' => 'Three', 'length' => 3);\n\
    $array[] = array('name' => 'Four', 'length' => 4);\n$array[] = array('name' =>\
    \ 'Five', 'length' => 5);\n$array[] = array('name' => 'Six', 'length' => 6);\n\
    $array[] = array('name' => 'Seven', 'length' => 7);\n$array[] = array('name' =>\
    \ 'Eight', 'length' => 8);\n$array[] = array('name' => 'Nine', 'length' => 9);\n\
    $array[] = array('name' => 'Ten', 'length' => 10);\n$array[] = array('name' =>\
    \ 'Eleven', 'length' => 11);\n$array[] = array('name' => 'Twelve', 'length' =>\
    \ 12);\n$array[] = array('name' => 'Thirteen', 'length' => 13);\n$array[] = array('name'\
    \ => 'Fourteen', 'length' => 14);\n$array[] = array('name' => 'Fifteen', 'length'\
    \ => 15);\n$array[] = array('name' => 'Sixteen', 'length' => 16);\n$array[] =\
    \ array('name' => 'Seventeen', 'length' => 17);\n$array[] = array('name' => 'Eighteen',\
    \ 'length' => 18);\n$array[] = array('name' => 'Nineteen', 'length' => 19);\n\
    $array[] = array('name' => 'Twenty', 'length' => 20);\n$array[] = array('name'\
    \ => 'Twenty-one', 'length' => 21);\n$array[] = array('name' => 'Twenty-two',\
    \ 'length' => 22);\n$array[] = array('name' => 'Twenty-three', 'length' => 23);\n\
    $array[] = array('name' => 'Twenty-four', 'length' => 24);\n$array[] = array('name'\
    \ => 'Twenty-", "    if (empty($arr)) {\n        return array();\n    }\n    $result\
    \ = array();\n    foreach ($arr as $key => $value) {\n        if ($value >= 1\
    \ && $value <= 9) {\n            $result[] = str_replace(array('0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four', 'Five',\
    \ 'Six', 'Seven', 'Eight', 'Nine'), $value);\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$arr = array_filter($arr, function($v){\n    return $v\
    \ >= 1 && $v <= 9;\n});\n$arr = array_map(function($v){\n    return str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $v);\n}, $arr);\nprint_r($arr);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$arr = array(2, 1,\
    \ 1, 4, 5, 8, 2, 3);\n$arr = array_filter($arr, function($v){\n    return $v >=\
    \ 1 && $v <= 9;\n});\n$arr = array_map(function($v){\n    return str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $v);\n}, $arr);\nprint_r($arr);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(2,\
    \ 1, 1, 4, 5, 8, 2, 3);\n$arr = array_filter($arr, function($v){\n    return $v\
    \ >= 1 && $v <= 9;\n});\n$arr = array_map(function($v){\n    return str_replace(array('0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'), array('One', 'Two', 'Three', 'Four',\
    \ 'Five', 'Six', 'Seven', 'Eight', 'Nine'), $v);\n}, $arr);\nprint_r($arr);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a |>\n<code>\n$arr = array(2, 1, 1, 4, 5,\
    \ 8, 2, 3);\n$arr = array_filter($arr, function($v){\n    return $v >= 1 && $v\
    \ <= 9;\n", "  $result = [];\n  foreach ($arr as $item) {\n    if ($item >= 1\
    \ && $item <= 9) {\n      $result[] = str_replace(\n        array_keys(\n    \
    \      array_flip(\n            range(\n              1,\n              9\n  \
    \          )\n          )\n        ),\n        array_values(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        sprintf('%u', $item)\n      );\n    }\n  }\n  return\
    \ empty($result) ? [] : $result;\n}\n", "  $len = count($arr);\n  if ($len ==\
    \ 0) {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n \
    \ $range = range($min, $max);\n  $reversed = array_reverse($range);\n  $result\
    \ = array();\n  foreach ($reversed as $val) {\n    $result[] = str_pad($val, count($range),\
    \ \"0\", STR_PAD_LEFT);\n  }\n  return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_reverse($numbers);\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$numbers = array_map('str_pad',$numbers,strlen($numbers));\n\
    $numbers = array_map('str_pad',$numbers,strlen($numbers));\n$number", "  if (empty($arr))\
    \ {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as $num) {\n    if\
    \ ($num >= 1 && $num <= 9) {\n      $result[] = strval($num);\n    }\n  }\n  return\
    \ array_reverse($result);\n}\n", "    $result = [];\n    foreach ($arr as $value)\
    \ {\n        if ($value >= 1 && $value <= 9) {\n            $result[] = str_replace(\n\
    \                array_keys(\n                    array_flip(\n              \
    \          range(\n                            1,\n                          \
    \  9\n                        )\n                    )\n                ),\n \
    \               array_values(\n                    array_flip(\n             \
    \           range(\n                            1,\n                         \
    \   9\n                        )\n                    )\n                ),\n\
    \                strval($value)\n            );\n        }\n    }\n    return\
    \ empty($result) ? [] : $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\n$arr = [2,1,1,4,5,8,2,3];\n$arr2 = [];\n$arr3 = [];\n$arr4\
    \ = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10\
    \ = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n\
    $arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 =\
    \ [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n\
    $arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 =\
    \ [];\n$arr33 = [];\n$arr34 = [];\n$arr35 = [];\n$arr36 = [];\n$arr37 = [];\n\
    $arr38 = [];\n$arr39 = [];\n$arr40 = [];\n$arr41 = [];\n$arr42 = [];\n$arr43 =\
    \ [];\n$arr44 = [];\n$arr45 = [];\n$arr46 = [];\n$arr47 = [];\n$arr48 = [];\n\
    $arr49 = [];\n$arr50 = [];\n$arr51 = [];\n$arr52 = [];\n$arr53 = [];\n$arr54 =\
    \ [];\n$arr55 = [];\n$arr56 = [];\n$arr57 = [];\n$arr58 = [];\n$arr59 = [];\n\
    $arr60 = [];\n$arr61 = [];\n$arr62 = [];\n$arr63 = [];\n$arr64 = [];\n$arr65 =\
    \ [];\n$arr66 = [];\n$arr67 = [];\n$arr68 = [];\n$arr69 = [];\n$arr70 = [];\n\
    $arr71 = [];\n$arr72 = [];\n$arr", "  if (!is_array($arr)) {\n    return [];\n\
    \  }\n  $result = [];\n  $len = count($arr);\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys($names),\n        array_values($names),\n        array_slice($arr,\
    \ $i, 1)\n      );\n    }\n  }\n  return $result;\n}\n", "  if (empty($arr)) {\n\
    \    return array();\n  }\n  $result = array();\n  $length = count($arr);\n  for\
    \ ($i = 0; $i < $length; $i++) {\n    $result[$i] = $arr[$i];\n  }\n  sort($result);\n\
    \  $length = count($result);\n  for ($i = 0; $i < $length; $i++) {\n    $result[$i]\
    \ = $names[$result[$i]];\n  }\n  return $result;\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return\
    \ array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $reversed\
    \ = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[] = str_replace(\n      array_keys($reversed),\n      array_values($reversed),\n\
    \      str_pad($reversed[$i], $max - $min + 1, '0', STR_PAD_LEFT)\n    );\n  }\n\
    \  return $result;\n}\n", "    $len = count($arr);\n    if ($len === 0) {\n  \
    \      return [];\n    }\n    if ($len > 9) {\n        return $arr;\n    }\n \
    \   $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        $result[$i] =\
    \ $arr[$i];\n    }\n    sort($result);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        $result[$i] = $names[$result[$i]];\n    }\n    return $result;\n}", " \
    \ if (!$arr) return [];\n  $result = [];\n  foreach ($arr as $num) {\n    if ($num\
    \ < 1 || $num > 9) continue;\n    $result[] = str_replace(\n      array_fill(1,\
    \ 9, 'One'), \n      array_fill(1, $num, 'One'), \n      array_fill(1, 9, 'One')\n\
    \    );\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your code works well for small arrays but for large arrays\
    \ it takes too much time. Is there any way to optimize it?\n<|/ c |>\n<| c |>\n\
    I added a version that doesn't use recursion.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works well for small arrays but for large arrays it takes\
    \ too much time. Is there any way to optimize it?\n<|/ c |>\n<| c |>\nI added\
    \ a version that doesn't use recursion.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [2,1,1,4,5,8,2,3];\n$result = [];\n$i = 0;\nforeach($arr as $num){\n\
    \    if($num < 1 || $num > 9){\n        continue;\n    }\n    $result[$i] = str_replace(\n\
    \        array_fill(1, 9, 'One'), \n        array_fill(1, $num, 'One'), \n   \
    \     array_fill(1, 9, 'One')\n    );\n    $i++;\n}\nprint_r($result);\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Your code works well\
    \ for small arrays but for large arrays it takes too much time. Is there any way\
    \ to optimize it?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2,1,1,4,5,8,2,3];\n\
    $result = [];\n$i = 0;\nforeach($arr as $num){\n    if($num < 1 || $num > 9){\n\
    \        continue;\n    }\n    $result[$i] = str_replace(\n        array_fill(1,\
    \ 9, 'One'), \n        array_fill(1, $num, 'One'), \n        array_fill(1, 9,\
    \ 'One')\n    );\n    $i++;\n}\nprint_r($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks for your answer. Your code works well for small arrays but\
    \ for large arrays it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c ", "    $result = [];\n    foreach ($arr as $item) {\n        if\
    \ ($item >= 1 && $item <= 9) {\n            $result[] = str_replace(\n       \
    \         array_keys(\n                    array_flip(\n                     \
    \   range('1', '9')\n                    )\n                ),\n             \
    \   array_values(\n                    array_flip(\n                        range('1',\
    \ '9')\n                    )\n                ),\n                strval($item)\n\
    \            );\n        }\n    }\n    return empty($arr) ? [] : $result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $item) {\n    if ($item >=\
    \ 1 && $item <= 9) {\n        $result[] = str_replace(\n            array_keys(\n\
    \                array_flip(\n                    range('1', '9')\n          \
    \      )\n            ),\n            array_values(\n                array_flip(\n\
    \                    range('1', '9')\n                )\n            ),\n    \
    \        strval($item)\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $item) {\n \
    \   if ($item >= 1 && $item <= 9) {\n        $result[] = str_replace(\n      \
    \      array_keys(\n                array_flip(\n                    range('1',\
    \ '9')\n                )\n            ),\n            array_values(\n       \
    \         array_flip(\n                    range('1', '9')\n                )\n\
    \            ),\n            strval($item)\n        );\n    }\n}\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2, 1, 1,\
    \ 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $item) {\n    if ($item >=\
    \ 1 && $item <= 9) {\n        $result[] = str_replace(\n            array_keys(\n\
    \                array_flip(\n                    range('1', '9')\n          \
    \      )\n            ),\n            array_values(\n                array_flip(\n\
    \                    range('1', '9')\n                )\n            ),\n    \
    \        strval($item)\n        );\n    }\n}\nprint_r($result);\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n\
    $arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$result = [];\nforeach ($arr as $item) {\n \
    \   if (", "  $result = [];\n  foreach ($arr as $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[] = str_replace(\n        array_keys(\n   \
    \       array_flip(\n            range(\n              1,\n              9\n \
    \           )\n          )\n        ),\n        array_values(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        array_search($value, range(1, 9))\n      );\n    }\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks\
    \ for your answer. I've tried your solution and it works fine. However I cannot\
    \ understand why my code doesn't work. Could you please explain it to me?\n<|/\
    \ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation. Now I understand why my code doesn't work.\
    \ However I cannot understand why my code doesn't work. Could you please explain\
    \ it to me?\n<|/ c |>\n<| c |>\nI added some comments to my answer, hope it helps.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$arr = array(\n    array(\n     \
    \   0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n\
    \        5 => 6,\n        6 => 7,\n        7 => 8,\n        8 => 9,\n        9\
    \ => 10\n    ),\n    array(\n        0 => 11,\n        1 => 12,\n        2 =>\
    \ 13,\n        3 => 14,\n        4 => 15,\n        5 => 16,\n        6 => 17,\n\
    \        7 => 18,\n        8 => 19,\n        9 => 20\n    ),\n    array(\n   \
    \     0 => 21,\n        1 => 22,\n        2 => 23,\n        3 => 24,\n       \
    \ 4 => 25,\n        5 => 26,\n        6 => 27,\n        7 => 28,\n        8 =>\
    \ 29,\n        9 => 30\n    )\n);\n\n$result = array();\nforeach ($arr as $key\
    \ => $value) {\n    foreach ($value as $k => $v) {\n        if ($v >= 1 && $v\
    \ <= 9) {\n            $result[$k][$key] = str_replace(\n                array_keys(\n\
    \                    array_flip(\n                        range(\n           \
    \                 1,\n                            9\n                        )\n\
    \                    )\n                ),\n                array_values(\n  \
    \                  array_flip(\n                        range(\n", "    $len =\
    \ count($arr);\n    if ($len === 0) {\n        return [];\n    }\n    if ($len\
    \ > 9) {\n        return $arr;\n    }\n    $result = [];\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $result[] = str_replace(\n            range(1,9),\n\
    \            range(10,99),\n            strval($arr[$i])\n        );\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    <?php\n$numbers = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$numbers = array_filter($numbers,\
    \ function($number) {\n    return $number > 0 && $number < 10;\n});\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_reverse($numbers);\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers\
    \ = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_combine($numbers,\
    \ $numbers);\n$numbers = array_flip($numbers);\n$numbers = array_map(function($number)\
    \ {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_combine($numbers, $numbers);\n$numbers\
    \ = array_flip($numbers);\n$numbers = array_map(function($number) {\n    return\
    \ str_pad($number, 3, '0', STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n\
    $numbers = array_map(function($number) {\n    return str_pad($number, 3, '0',\
    \ STR_PAD_LEFT);\n}, $numbers);\n$numbers = array_flip($numbers);\n$numbers =\
    \ array_combine($numbers, $numbers);\n$numbers = array_flip($numbers);\n$numbers\
    \ = array_map(function($number) {\n    return str_pad($number, 3, '0', STR_PAD_LEFT);\n\
    }, $numbers);\n$numbers = array_flip($numbers);", "  if (!$arr) return [];\n \
    \ $len = count($arr);\n  if ($len < 2) return $arr;\n  $sorted = array_slice($arr,\
    \ 0, $len);\n  array_multisort($sorted, $arr);\n  $reversed = array_reverse($arr);\n\
    \  $result = array_map(function($v) use ($reversed) {\n    return $reversed[$v];\n\
    \  }, $arr);\n  return $result;\n}\n", "  if (empty($arr)) {\n    return [];\n\
    \  }\n  $result = [];\n  foreach ($arr as $key => $value) {\n    if ($value >=\
    \ 1 && $value <= 9) {\n      $result[] = str_replace(\n        array_keys($names),\n\
    \        array_values($names),\n        array_keys($names)[$value]\n      );\n\
    \    }\n  }\n  return $result;\n}\n", "  $result = array();\n  foreach ($arr as\
    \ $num) {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = array($num, $names[$num]);\n\
    \    }\n  }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $num)\
    \ {\n    if ($num >= 1 && $num <= 9) {\n      $result[] = str_pad($num, 2, \"\
    0\", STR_PAD_LEFT);\n    }\n  }\n  return $result ? array_reverse($result) : [];\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array\
    \ has negative numbers. Try `by_length([-1, -1, 1, -4, -5, -8, -2, -3])`\n<|/\
    \ c |>\n<| c |>\nI added a version that works with negative numbers. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$array = array(\"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    );\n$array = array_reverse($array);\n$array = array_map(function($v){\n    return\
    \ str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_reverse($array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_reverse($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_reverse($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $array);\n$array = array_reverse($array);\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n", "  if (empty($arr))\
    \ {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $result\
    \ = array();\n  foreach ($arr as $key => $value) {\n    if ($min <= $value &&\
    \ $value <= $max) {\n      $result[$key] = $value;\n    }\n  }\n  return $result;\n\
    }\n", "  $result = array();\n  foreach ($arr as $item) {\n    if ($item >= 1 &&\
    \ $item <= 9) {\n      $result[] = array('name' => \"One\", 'value' => $item);\n\
    \    } else if ($item >= 10 && $item <= 99) {\n      $result[] = array('name'\
    \ => \"Two\", 'value' => $item);\n    } else if ($item >= 100 && $item <= 999)\
    \ {\n      $result[] = array('name' => \"Three\", 'value' => $item);\n    } else\
    \ if ($item >= 1000 && $item <= 9999) {\n      $result[] = array('name' => \"\
    Four\", 'value' => $item);\n    } else if ($item >= 10000 && $item <= 99999) {\n\
    \      $result[] = array('name' => \"Five\", 'value' => $item);\n    } else if\
    \ ($item >= 100000 && $item <= 999999) {\n      $result[] = array('name' => \"\
    Six\", 'value' => $item);\n    } else if ($item >= 1000000 && $item <= 9999999)\
    \ {\n      $result[] = array('name' => \"Seven\", 'value' => $item);\n    } else\
    \ if ($item >= 10000000 && $item <= 99999999) {\n      $result[] = array('name'\
    \ => \"Eight\", 'value' => $item);\n    } else if ($item >= 100000000 && $item\
    \ <= 999999999) {\n      $result[] = array('name' => \"Nine\", 'value' => $item);\n\
    \    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array = array_reverse($array);\n\
    $array = array_map(function($v){\n    return $array[$v];\n}, array_flip($array));\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$array = array(\"One\", \"Two\",\
    \ \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\");\n$array\
    \ = array_reverse($array);\n$array = array_map(function($v){\n    return $array[$v];\n\
    }, array_flip($array));\n</code>\n<|/ a tags=php,arrays,sorting dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"", "  $result = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $key);\n\
    \    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n  $result = array_map(function\
    \ ($value) {\n    return $value[1];\n  }, $arr);\n  return $result;\n}\n", " \
    \ if (empty($arr)) {\n    return [];\n  }\n  $len = count($arr);\n  $result =\
    \ [];\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i] = $arr[$i];\n  }\n \
    \ sort($result);\n  foreach ($result as $key => $value) {\n    if ($value < 1\
    \ || $value > 9) {\n      unset($result[$key]);\n    }\n  }\n  foreach ($result\
    \ as $key => $value) {\n    $result[$key] = $names[$value];\n  }\n  return $result;\n\
    }\n", "  if (!is_array($arr)) {\n    return [];\n  }\n  $result = [];\n  $len\
    \ = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] >= 1 &&\
    \ $arr[$i] <= 9) {\n      $result[] = str_replace(\n        array_keys(\n    \
    \      array_flip(\n            range(\n              1,\n              9\n  \
    \          )\n          )\n        ),\n        array_values(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        sprintf('%u', $arr[$i])\n      );\n    }\n  }\n  return\
    \ $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = array_map(function($v){\n   \
    \ return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr);\n$arr3 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr2);\n$arr4 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr3);\n$arr5 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr4);\n$arr6 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr5);\n$arr7 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr6);\n$arr8 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr7);\n$arr9 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr8);\n$arr10 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr9);\n$arr11 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr10);\n$arr12 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);\n}, $arr11);\n$arr13 = array_map(function($v){\n\
    \    return str_pad($v, 2, \"0\", STR_PAD_LEFT);", "  $len = count($arr);\n  if\
    \ ($len == 0) return array();\n  if ($len == 1) return array($arr[0]);\n  $min\
    \ = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = $min; $i <=\
    \ $max; $i++) {\n    $result[] = name_by_length($i, $len);\n  }\n  return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n \
    \ if ($len == 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $arr = array_reverse($arr);\n  $arr = array_map(function($v)\
    \ use ($min, $max) {\n    return $min <= $v ? $v : $max;\n  }, $arr);\n  return\
    \ array_map(function($v) use ($min, $max) {\n    return $min <= $v ? $min <= $v\
    \ ? $min : $max : $max;\n  }, $arr);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>", "    $len = count($arr);\n    if ($len == 0) {\n        return\
    \ array();\n    }\n    if ($len == 1) {\n        return array($arr[0]);\n    }\n\
    \    $min = min($arr);\n    $max = max($arr);\n    $result = [];\n    for ($i\
    \ = $min; $i <= $max; $i++) {\n        $result[] = str_pad($i, $len - 1, chr($i\
    \ + ord('0')));\n    }\n    return $result;\n}\n", "  if (empty($arr)) {\n   \
    \ return array();\n  }\n  $len = count($arr);\n  if ($len < 2) {\n    return $arr;\n\
    \  }\n  $sorted = array();\n  foreach ($arr as $key => $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $sorted[$key] = $value;\n    }\n  }\n  asort($sorted);\n\
    \  $reversed = array_reverse($sorted);\n  foreach ($reversed as $key => $value)\
    \ {\n    $sorted[$key] = $names[$value];\n  }\n  return $sorted;\n}", "  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return array();\n  }\n  if ($len ==\
    \ 1) {\n    return array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $reversed = array_reverse($arr);\n  $result = array();\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($min <= $reversed[$i] && $reversed[$i] <= $max) {\n \
    \     $result[] = name_by_number($reversed[$i]);\n    }\n  }\n  return $result;\n\
    }\n", "    $result = array();\n    $len = count($arr);\n    if ($len > 0) {\n\
    \        sort($arr);\n        for ($i = 0; $i < $len; $i++) {\n            if\
    \ ($arr[$i] >= 1 && $arr[$i] <= 9) {\n                $result[] = str_replace($arr[$i],\
    \ $arr[$i], $arr[$i]);\n            }\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_replace($v, '', $v);\n}, $array);\n$array = array_combine($array,\
    \ $array);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_replace($v, '', $v);\n}, $array);\n$array = array_combine($array,\
    \ $array);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_replace($v, '', $v);\n}, $array);\n$array = array_combine($array,\
    \ $array);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n$array = array(\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\",\
    \ \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str_replace($v, '', $v);\n}, $array);\n$array = array_combine($array,\
    \ $array);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\");\n$array = array_reverse($array);\n$array = array_map(function($v){\n\
    \    return str", "    if (empty($arr)) {\n        return [];\n    }\n    $result\
    \ = [];\n    foreach ($arr as $num) {\n        if ($num >= 1 && $num <= 9) {\n\
    \            $result[] = str_replace(\n                array_keys(\n         \
    \           array_flip(\n                        range(\n                    \
    \        1,\n                            9\n                        )\n      \
    \              )\n                ),\n                array_values(\n        \
    \            array_flip(\n                        range(\n                   \
    \         1,\n                            9\n                        )\n     \
    \               )\n                ),\n                strval($num)\n        \
    \    );\n        }\n    }\n    return $result;\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return\
    \ array($arr[0]);\n  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min,\
    \ $max);\n  $reversed = array_reverse($range);\n  $result = array();\n  foreach\
    \ ($reversed as $digit) {\n    $result[] = array_search($digit, range(1, 9));\n\
    \  }\n  return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work if the array has negative numbers. I tested it on `[-1, 1, -55]`\
    \ and it returned `['One']`\n<|/ c |>\n<| c |>\nI tested it on `[-1, 1, -55]`\
    \ and it returned `['One']`\n<|/ c |>\n<| c |>\nI tested it on `[-1, 1, -55]`\
    \ and it returned `['One']`\n<|/ c |>\n<| c |>\nI tested it on `[-1, 1, -55]`\
    \ and it returned `['One']`\n<|/ c |>\n<| c |>\nI tested it on `[-1, 1, -55]`\
    \ and it returned `['One']`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$array\
    \ = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n\
    \    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 =>\
    \ 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n\
    \    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n \
    \   22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n  \
    \  27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n   \
    \ 32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37\
    \ => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 =>\
    \ 42,\n    43 => 43,\n    44 => 44,\n    45 ", "  $result = [];\n  foreach ($arr\
    \ as $n) {\n    if ($n < 1 || $n > 9) {\n      continue;\n    }\n    $result[]\
    \ = str_pad($n, 3, '0', STR_PAD_LEFT);\n  }\n  return array_reverse($result);\n\
    }\n", "  $result = [];\n  foreach ($arr as $num) {\n    if ($num > 0 && $num <\
    \ 10) {\n      $result[] = str_replace(\n        array_keys(\n          array_flip(\n\
    \            range(\n              1,\n              9\n            )\n      \
    \    )\n        ),\n        array_values(\n          array_flip(\n           \
    \ range(\n              1,\n              9\n            )\n          )\n    \
    \    ),\n        sprintf('%u', $num)\n      );\n    }\n  }\n  return $result;\n\
    }\n", "  $len = count($arr);\n  if ($len === 0) {\n    return [];\n  }\n  if ($len\
    \ === 1) {\n    return ['One'];\n  }\n  $min = min($arr);\n  $max = max($arr);\n\
    \  $range = $max - $min;\n  $result = [];\n  for ($i = $min; $i <= $max; $i++)\
    \ {\n    $result[$i] = $names[$i];\n  }\n  return array_reverse($result);\n}\n",
  "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as\
    \ $num) {\n    if ($num < 1 || $num > 9) {\n      continue;\n    }\n    $result[]\
    \ = str_replace(\n      array_fill(1, 9, 'One'), \n      array_fill(1, $num, 'One'),\
    \ \n      array_fill(0, 9, 'Zero')\n    );\n  }\n  return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem to work. `array_fill` returns\
    \ an array with 9 elements, not 10. `array_fill(0, 9, 'Zero')` returns an array\
    \ with 10 elements, not 9.\n<|/ c |>\n<| c |>\nYou're right, I missed that detail.\
    \ I've updated my answer to fix it.\n<|/ c |>\n<| a |>\n<code>\n$arr = [2, 1,\
    \ 1, 4, 5, 8, 2, 3];\n$arr2 = [];\n$arr3 = [];\n$arr4 = array_fill(0, 9, 'Zero');\n\
    $arr5 = array_fill(0, 9, 'Zero');\n$arr6 = array_fill(0, 9, 'Zero');\n$arr7 =\
    \ array_fill(0, 9, 'Zero');\n$arr8 = array_fill(0, 9, 'Zero');\n$arr9 = array_fill(0,\
    \ 9, 'Zero');\n$arr10 = array_fill(0, 9, 'Zero');\n$arr11 = array_fill(0, 9, 'Zero');\n\
    $arr12 = array_fill(0, 9, 'Zero');\n$arr13 = array_fill(0, 9, 'Zero');\n$arr14\
    \ = array_fill(0, 9, 'Zero');\n$arr15 = array_fill(0, 9, 'Zero');\n$arr16 = array_fill(0,\
    \ 9, 'Zero');\n$arr17 = array_fill(0, 9, 'Zero');\n$arr18 = array_fill(0, 9, 'Zero');\n\
    $arr19 = array_fill(0, 9, 'Zero');\n$arr20 = array_fill(0, 9, 'Zero');\n$arr21\
    \ = array_fill(0, 9, 'Zero');\n$arr22 = array_fill(0, 9, 'Zero');\n$arr23 = array_fill(0,\
    \ 9, 'Zero');\n$arr24 = array_fill(0, 9, 'Zero');\n$arr25 = array_fill(0, 9, 'Zero');\n\
    $arr26 = array_fill(0, 9, 'Zero');\n$arr27 = array_fill(0, 9, 'Zero');\n$arr28\
    \ = array_fill(0, 9, 'Zero');\n$arr29 = array_fill(0, 9, 'Zero');\n$arr30 = array_fill(0,\
    \ 9, 'Zero');\n$arr3", "  $len = count($arr);\n  if ($len == 0) {\n    return\
    \ array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  $sorted\
    \ = array();\n  for ($i = 0; $i < $len; $i++) {\n    $sorted[$i] = $arr[$i];\n\
    \  }\n  sort($sorted);\n  $reversed = array_reverse($sorted);\n  foreach ($reversed\
    \ as $key => $value) {\n    $reversed[$key] = $names[$value];\n  }\n  return $reversed;\n\
    }\n", "  $result = array();\n  foreach ($arr as $value) {\n    if ($value >= 1\
    \ && $value <= 9) {\n      $result[] = array($value, $arr[$value]);\n    }\n \
    \ }\n  array_multisort($result, SORT_DESC, $arr);\n  foreach ($arr as $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $result[] = array($value, $arr[$value]);\n\
    \    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n  if ($len == 0)\
    \ {\n    return array();\n  }\n  $min = min($arr);\n  $max = max($arr);\n  if\
    \ ($min == $max) {\n    return array($min);\n  }\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $num) {\n    $result[] = name_by_length($num, $len);\n  }\n  return $result;\n\
    }\n", "  if (empty($arr)) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  $result = array();\n  for ($i = 0; $i < $len; $i++) {\n    $result[$i] = $arr[$i];\n\
    \  }\n  sort($result);\n  $result = array_reverse($result);\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $result[$i] = $names[$result[$i]];\n  }\n  return $result;\n\
    }", "  if (empty($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach ($arr\
    \ as $key => $value) {\n    if ($value >= 1 && $value <= 9) {\n      $result[]\
    \ = str_replace(\n        array_keys($names),\n        array_values($names),\n\
    \        array_reverse($names)\n      );\n    }\n  }\n  return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php,sorting |>\n<code>\n<?php\n$names = [\n\
    \    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n    4 => 'Four',\n    5\
    \ => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8 => 'Eight',\n    9 =>\
    \ 'Nine',\n];\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\n$result = array_map(function($v)\
    \ use ($names) {\n    return str_replace(array_keys($names), array_values($names),\
    \ $v);\n}, $arr);\n\nprint_r($result);\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\n<?php\n$names = [\n    1 => 'One',\n    2 => 'Two',\n    3 => 'Three',\n\
    \    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7 => 'Seven',\n    8\
    \ => 'Eight',\n    9 => 'Nine',\n];\n\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n\n$result\
    \ = array_map(function($v) use ($names) {\n    return str_replace(array_keys($names),\
    \ array_values($names), $v);\n}, $arr);\n\nprint_r($result);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$names = [\n    1 => 'One',\n    2 => 'Two',\n\
    \    3 => 'Three',\n    4 => 'Four',\n    5 => 'Five',\n    6 => 'Six',\n    7\
    \ => 'Seven',\n    8 => 'Eight',\n    9 => 'Nine',\n];\n\n$arr = [2, 1, 1, 4,\
    \ 5, 8, 2, 3];\n\n$result = array_map(function($v) use ($names) {\n    return\
    \ str_replace(array_keys($names), array_values($names), $v);\n}, $arr);\n\nprint_r($result);\n\
    </code>\n<|/ a tags=arrays,php,sorting |>\n<|", "  $len = count($arr);\n  if ($len\
    \ == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $range = range($min, $max);\n\
    \  $reversed = array_reverse($range);\n  $result = array();\n  foreach ($reversed\
    \ as $val) {\n    $result[] = name_by_length($val, $len);\n  }\n  return $result;\n\
    }\n", "    if (empty($arr)) {\n        return [];\n    }\n    $result = [];\n\
    \    foreach ($arr as $item) {\n        if ($item >= 1 && $item <= 9) {\n    \
    \        $result[] = str_replace(\n                array_keys(\n             \
    \       array_flip(\n                        range(\n                        \
    \    1,\n                            9\n                        )\n          \
    \          )\n                ),\n                array_values(\n            \
    \        array_flip(\n                        range(\n                       \
    \     1,\n                            9\n                        )\n         \
    \           )\n                ),\n                strval($item)\n           \
    \ );\n        }\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$newArr\
    \ = array_map(function($item){\n    return str_replace(\n        array_keys(\n\
    \            array_flip(\n                range(\n                    1,\n   \
    \                 9\n                )\n            )\n        ),\n        array_values(\n\
    \            array_flip(\n                range(\n                    1,\n   \
    \                 9\n                )\n            )\n        ),\n        strval($item)\n\
    \    );\n}, $arr);\nprint_r($newArr);\n</code>\n<|/ a tags=php,arrays |>\n<| a\
    \ tags=php,arrays |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$newArr\
    \ = array_map(function($item){\n    return str_replace(\n        array_keys(\n\
    \            array_flip(\n                range(\n                    1,\n   \
    \                 9\n                )\n            )\n        ),\n        array_values(\n\
    \            array_flip(\n                range(\n                    1,\n   \
    \                 9\n                )\n            )\n        ),\n        strval($item)\n\
    \    );\n}, $arr);\nprint_r($newArr);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$newArr = array_map(function($item){\n\
    \    return str_replace(\n        array_keys(\n            array_flip(\n     \
    \           range(\n                    1,\n                    9\n          \
    \      )\n            )\n        ),\n        array_values(\n            array_flip(\n\
    \                range(\n                    1,\n                    9\n     \
    \           )\n            )\n        ),\n        strval($item)\n    );\n}, $arr);\n\
    print_r($newArr);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$newArr = array_map(function($item){\n    return\
    \ str_replace(\n        array_keys(\n            ", "  $len = count($arr);\n \
    \ if ($len == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = $min; $i <= $max; $i++) {\n    $result[] = strval($i);\n  }\n  return $result;\n\
    }\n", "  if (empty($arr)) {\n    return array();\n  }\n  $len = count($arr);\n\
    \  if ($len < 2) {\n    return array();\n  }\n  $min = array_shift($arr);\n  $max\
    \ = array_pop($arr);\n  if ($min < 1 || $max > 9) {\n    return array();\n  }\n\
    \  $result = array();\n  for ($i = $min; $i <= $max; $i++) {\n    $result[] =\
    \ str_pad($i, 2, '0', STR_PAD_LEFT);\n  }\n  return array_reverse($result);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array\
    \ = array(\n    array(\"One\", 1),\n    array(\"Two\", 2),\n    array(\"Three\"\
    , 3),\n    array(\"Four\", 4),\n    array(\"Five\", 5),\n    array(\"Six\", 6),\n\
    \    array(\"Seven\", 7),\n    array(\"Eight\", 8),\n    array(\"Nine\", 9)\n\
    );\n\n$array = array_map(function($v){\n    return $v[1] . str_pad($v[0], 2, '0',\
    \ STR_PAD_LEFT);\n}, $array);\n\n$array = array_map(function($v){\n    return\
    \ $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array = array_map(function($v){\n\
    \    return $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array\
    \ = array_map(function($v){\n    return $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n\
    }, $array);\n\n$array = array_map(function($v){\n    return $v[0] . str_pad($v[1],\
    \ 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array = array_map(function($v){\n  \
    \  return $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array\
    \ = array_map(function($v){\n    return $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n\
    }, $array);\n\n$array = array_map(function($v){\n    return $v[0] . str_pad($v[1],\
    \ 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array = array_map(function($v){\n  \
    \  return $v[0] . str_pad($v[1], 2, '0', STR_PAD_LEFT);\n}, $array);\n\n$array\
    \ = array_map(function($v", "    $len = count($arr);\n    if ($len == 0) {\n \
    \       return array();\n    }\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $arr2 = array();\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $arr2[] = 'One';\n        } else if ($arr[$i] == $max)\
    \ {\n            $arr2[] = 'Nine';\n        } else {\n            $arr2[] = str_pad(\n\
    \                strval($arr[$i]),\n                3,\n                '0',\n\
    \                STR_PAD_LEFT\n            );\n        }\n    }\n    return $arr2;\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `by_length([-1, -55])` returns `['One']` instead of `['Nine', 'One']`.\n<|/\
    \ c |>\n<| c |>\nI added a version that works for negative numbers, too.\n<|/\
    \ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(2, 1, 1, 4, 5, 8,\
    \ 2, 3);\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5 = array();\n\
    $arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n$arr10\
    \ = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array();\n$arr29 = array();\n$arr30\
    \ = array();\n$arr31 = array();\n$arr32 = array();\n$arr33 = array();\n$arr34\
    \ = array();\n$arr35 = array();\n$arr36 = array();\n$arr37 = array();\n$arr38\
    \ = array();\n$arr39 = array();\n$arr40 = array();\n$arr41 = array();\n$arr42\
    \ = array();\n$arr43 = array();\n$", "  if (empty($arr)) {\n    return array();\n\
    \  }\n  $len = count($arr);\n  if ($len < 2) {\n    return $arr;\n  }\n  $min\
    \ = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n    } else if\
    \ ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    } else {\n      $result[]\
    \ = str_pad(base_convert($arr[$i], 10, 2), 2, '0', STR_PAD_LEFT);\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = array_filter($arr, function($v){\n\
    \    return $v > 0 && $v < 10;\n});\n$arr3 = array_map(function($v){\n    return\
    \ str_pad(base_convert($v, 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n$arr4 =\
    \ array_map(function($v){\n    return str_pad(base_convert($v, 10, 2), 2, '0',\
    \ STR_PAD_LEFT);\n}, $arr2);\n$arr5 = array_map(function($v){\n    return str_pad(base_convert($v,\
    \ 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n$arr6 = array_map(function($v){\n\
    \    return str_pad(base_convert($v, 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n\
    $arr7 = array_map(function($v){\n    return str_pad(base_convert($v, 10, 2), 2,\
    \ '0', STR_PAD_LEFT);\n}, $arr2);\n$arr8 = array_map(function($v){\n    return\
    \ str_pad(base_convert($v, 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n$arr9 =\
    \ array_map(function($v){\n    return str_pad(base_convert($v, 10, 2), 2, '0',\
    \ STR_PAD_LEFT);\n}, $arr2);\n$arr10 = array_map(function($v){\n    return str_pad(base_convert($v,\
    \ 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n$arr11 = array_map(function($v){\n\
    \    return str_pad(base_convert($v, 10, 2), 2, '0', STR_PAD_LEFT);\n}, $arr2);\n\
    $arr12 = array_map(function($v){\n    return str_pad(base_", "  if (empty($arr))\
    \ {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as $num) {\n    if\
    \ ($num > 0 && $num < 10) {\n      $result[] = str_replace(range(1,9), $num, $names);\n\
    \    }\n  }\n  return $result;\n}\n", "  if (empty($arr)) {\n    return array();\n\
    \  }\n  $len = count($arr);\n  $result = array();\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $result[$i] = $arr[$i];\n  }\n  sort($result);\n  $result = array_reverse($result);\n\
    \  foreach ($result as $key => $value) {\n    $result[$key] = $names[$value];\n\
    \  }\n  return $result;\n}", "    $result = [];\n    $len = count($arr);\n   \
    \ if ($len == 0) return $result;\n    for ($i = 0; $i < $len; $i++) {\n      \
    \  if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n            $result[] = str_replace(\n\
    \                array_keys(\n                    array_flip(\n              \
    \          range(\n                            1, 9\n                        )\n\
    \                    )\n                ),\n                array_values(\n  \
    \                  array_flip(\n                        range(\n             \
    \               1, 9\n                        )\n                    )\n     \
    \           ),\n                strval($arr[$i])\n            );\n        }\n\
    \    }\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10697674)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He wants to sort an\
    \ array by length and then replace each digit by its corresponding name from 1\
    \ to 9. He also stated that he wants to ignore strange numbers. I believe my answer\
    \ does exactly what he wants. I tested it and it works.\n<|/ c |>\n<| c |>\nI\
    \ believe it does answer the question. He wants to sort an array by length and\
    \ then replace each digit by its corresponding name from 1 to 9. He also stated\
    \ that he wants to ignore strange numbers. I believe my answer does exactly what\
    \ he wants. I tested it and it works.\n<|/ c |>\n<| c |>\nI believe it does answer\
    \ the question. He wants to sort an array by length and then replace each digit\
    \ by its corresponding name from 1 to 9. He also stated that he wants to ignore\
    \ strange numbers. I believe my answer does exactly what he wants. I tested it\
    \ and it works.\n<|/ c |>\n<| c |>\nI believe it does answer the question. He\
    \ wants to sort an array by length and then replace each digit by its corresponding\
    \ name from 1 to 9. He also stated that he wants to ignore strange numbers. I\
    \ believe my answer does exactly what he wants. I tested it and it works.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2\
    \ = [];\nforeach ($arr as $key => $value) {\n    if ($value >= 1 && $", "  if\
    \ (!is_array($arr)) {\n    return [];\n  }\n  $result = [];\n  foreach ($arr as\
    \ $item) {\n    if ($item >= 1 && $item <= 9) {\n      $result[] = str_replace(\n\
    \        array_keys($names),\n        array_values($names),\n        array_search($item,\
    \ $names)\n      );\n    }\n  }\n  return $result;\n}\n", "  $len = count($arr);\n\
    \  if ($len == 0) {\n    return array();\n  }\n  if ($len == 1) {\n    return\
    \ array($arr[0]);\n  }\n  $sorted = array();\n  foreach ($arr as $key => $value)\
    \ {\n    if ($value >= 1 && $value <= 9) {\n      $sorted[$key] = $value;\n  \
    \  }\n  }\n  array_multisort($sorted, SORT_DESC, $arr);\n  $result = array();\n\
    \  foreach ($arr as $key => $value) {\n    $result[] = array('name' => $key, 'value'\
    \ => $value);\n  }\n  return $result;\n}\n", "  if (empty($arr)) {\n    return\
    \ array();\n  }\n  $result = array();\n  $len = count($arr);\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    if ($arr[$i] >= 1 && $arr[$i] <= 9) {\n      $result[]\
    \ = array($arr[$i], $i);\n    }\n  }\n  array_multisort($result, SORT_DESC, $arr);\n\
    \  $len = count($arr);\n  for ($i = 0; $i < $len; $i++) {\n    if ($arr[$i] >=\
    \ 1 && $arr[$i] <= 9) {\n      $result[$i] = $arr[$i];\n    }\n  }\n  return $result;\n\
    }\n", "    if (empty($arr)) {\n        return [];\n    }\n    $result = [];\n\
    \    $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ >= 1 && $arr[$i] <= 9) {\n            $result[] = sprintf('%2d', $arr[$i]);\n\
    \        }\n    }\n    return array_reverse($result);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php", "  $len = count($arr);\n  if ($len ==\
    \ 0) {\n    return [];\n  }\n  if ($len == 1) {\n    return ['One'];\n  }\n  $min\
    \ = min($arr);\n  $max = max($arr);\n  $result = [];\n  for ($i = $min; $i <=\
    \ $max; $i++) {\n    $result[] = str_pad($i, $len - 1, chr($i + 1));\n  }\n  return\
    \ $result;\n}", "  $result = [];\n  foreach ($arr as $value) {\n    if ($value\
    \ >= 1 && $value <= 9) {\n      $result[] = str_replace(\n        array_keys($one,\
    \ $value, $two, $three, $four, $five, $six, $seven, $eight, $nine),\n        array_values($one,\
    \ $value, $two, $three, $four, $five, $six, $seven, $eight, $nine),\n        $value\n\
    \      );\n    }\n  }\n  return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays |>\n<code>\n$arr = [2,1,1,4,5,8,2,3];\n$arr2 = [];\n$arr3 =\
    \ [];\n$arr4 = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9\
    \ = [];\n$arr10 = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n\
    $arr15 = [];\n$arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 =\
    \ [];\n$arr21 = [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n\
    $arr26 = [];\n$arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 =\
    \ [];\n$arr32 = [];\n$arr33 = [];\n$arr34 = [];\n$arr35 = [];\n$arr36 = [];\n\
    $arr37 = [];\n$arr38 = [];\n$arr39 = [];\n$arr40 = [];\n$arr41 = [];\n$arr42 =\
    \ [];\n$arr43 = [];\n$arr44 = [];\n$arr45 = [];\n$arr46 = [];\n$arr47 = [];\n\
    $arr48 = [];\n$arr49 = [];\n$arr50 = [];\n$arr51 = [];\n$arr52 = [];\n$arr53 =\
    \ [];\n$arr54 = [];\n$arr55 = [];\n$arr56 = [];\n$arr57 = [];\n$arr58 = [];\n\
    $arr59 = [];\n$arr60 = [];\n$arr61 = [];\n$arr62 = [];\n$arr63 = [];\n$arr64 =\
    \ [];\n$arr65 = [];\n$arr66 = [];\n$arr67 = [];\n$arr68 = [];\n$arr69 = [];\n\
    $arr70 = [];\n$arr71 = [];\n$arr72 = [];\n$arr7", "    $result = [];\n    foreach\
    \ ($arr as $num) {\n        if ($num >= 1 && $num <= 9) {\n            $result[]\
    \ = str_replace(\n                array_keys(\n                    array_flip(\n\
    \                        range(\n                            1,\n            \
    \                9\n                        )\n                    )\n       \
    \         ),\n                array_values(\n                    array_flip(\n\
    \                        range(\n                            1,\n            \
    \                9\n                        )\n                    )\n       \
    \         ),\n                strval($num)\n            );\n        }\n    }\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\n\
    This doesn't seem to work. `by_length([2, 1, 1, 4, 5, 8, 2, 3])` returns `[\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]`\n\
    <|/ c |>\n<| c |>\n, thanks for pointing that out. I fixed the code so it now\
    \ works.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>", "    $len = count($arr);\n\
    \    if ($len === 0) {\n        return [];\n    }\n    $min = min($arr);\n   \
    \ $max = max($arr);\n    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if ($min <= $arr[$i] && $arr[$i] <= $max) {\n            $result[] =\
    \ name_by_length($arr[$i]);\n        }\n    }\n    return $result;\n}\n", "  \
    \  $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value >=\
    \ 1 && $value <= 9) {\n            $result[] = str_replace(\n                array_search($value,\
    \ range(1, 9)),\n                array_search($value, range(1, 9)),\n        \
    \        array_search($value, range(1, 9))\n            );\n        }\n    }\n\
    \    return empty($result) ? [] : $result;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=php,arrays,sorting |>\n<code>\n<?php\n$array = [2, 1, 1, 4, 5, 8, 2,\
    \ 3];\n$result = [];\n$one = array_fill(0, 9, 'One');\n$two = array_fill(0, 9,\
    \ 'Two');\n$three = array_fill(0, 9, 'Three');\n$four = array_fill(0, 9, 'Four');\n\
    $five = array_fill(0, 9, 'Five');\n$six = array_fill(0, 9, 'Six');\n$seven = array_fill(0,\
    \ 9, 'Seven');\n$eight = array_fill(0, 9, 'Eight');\n$nine = array_fill(0, 9,\
    \ 'Nine');\n$ten = array_fill(0, 9, 'Ten');\n$eleven = array_fill(0, 9, 'Eleven');\n\
    $twelve = array_fill(0, 9, 'Twelve');\n$thirteen = array_fill(0, 9, 'Thirteen');\n\
    $fourteen = array_fill(0, 9, 'Fourteen');\n$fifteen = array_fill(0, 9, 'Fifteen');\n\
    $sixteen = array_fill(0, 9, 'Sixteen');\n$seventeen = array_fill(0, 9, 'Seventeen');\n\
    $eighteen = array_fill(0, 9, 'Eighteen');\n$nineteen = array_fill(0, 9, 'Nineteen');\n\
    $twenty = array_fill(0, 9, 'Twenty');\n$twentyone = array_fill(0, 9, 'TwentyOne');\n\
    $twentytwo = array_fill(0, 9, 'TwentyTwo');\n$twentythree = array_fill(0, 9, 'TwentyThree');\n\
    $twentyfour = array_fill(0, 9, 'TwentyFour');\n$twentyfive = array_fill(0, 9,\
    \ 'TwentyFive');\n$twentysix = array_fill(0, 9, 'TwentySix');\n$twentyseven =\
    \ array_fill(0, 9, 'TwentySeven');\n$twentyeight = array_fill(0, 9", "  $len =\
    \ count($arr);\n  if ($len == 0) return array();\n  if ($len == 1) return array($arr[0]);\n\
    \  if ($len == 2) return array($arr[0], $arr[1]);\n  $min = min($arr);\n  $max\
    \ = max($arr);\n  $arr2 = array();\n  for ($i = $min; $i <= $max; $i++) {\n  \
    \  $arr2[] = str_pad($i, 2, \"0\", STR_PAD_LEFT);\n  }\n  $arr2 = array_reverse($arr2);\n\
    \  $arr2 = array_map(function($v) { return $v == \"00\" ? \"One\" : $v; }, $arr2);\n\
    \  return $arr2;\n}\n", "  $len = count($arr);\n  if ($len == 0) {\n    return\
    \ array();\n  }\n  if ($len == 1) {\n    return array($arr[0]);\n  }\n  if ($len\
    \ > 9) {\n    return array();\n  }\n  $sorted = array_slice($arr, 0, 9);\n  array_reverse($sorted);\n\
    \  $result = array();\n  foreach ($sorted as $num) {\n    $result[] = array($num,\
    \ $names[$num]);\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($arr as $item) {\n        if ($item >= 1 && $item <= 9) {\n            $result[]\
    \ = str_replace(\n                array_keys(\n                    array_flip(\n\
    \                        range(\n                            1,\n            \
    \                9\n                        )\n                    )\n       \
    \         ),\n                array_values(\n                    array_flip(\n\
    \                        range(\n                            1,\n            \
    \                9\n                        )\n                    )\n       \
    \         ),\n                strval($item)\n            );\n        }\n    }\n\
    \    return empty($arr) ? [] : $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n<?php\n$arr = [2, 1, 1, 4, 5, 8, 2, 3];\n$arr2 = [];\n$arr3 = [];\n\
    $arr4 = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n\
    $arr10 = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 =\
    \ [];\n$arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n\
    $arr21 = [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 =\
    \ [];\n$arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n\
    $arr32 = [];\n$arr33 = [];\n$arr34 = [];\n$arr35 = [];\n$arr36 = [];\n$arr37 =\
    \ [];\n$arr38 = [];\n$arr39 = [];\n$arr40 = [];\n$arr41 = [];\n$arr42 = [];\n\
    $arr43 = [];\n$arr44 = [];\n$arr45 = [];\n$arr46 = [];\n$arr47 = [];\n$arr48 =\
    \ [];\n$arr49 = [];\n$arr50 = [];\n$arr51 = [];\n$arr52 = [];\n$arr53 = [];\n\
    $arr54 = [];\n$arr55 = [];\n$arr56 = [];\n$arr57 = [];\n$arr58 = [];\n$arr59 =\
    \ [];\n$arr60 = [];\n$arr61 = [];\n$arr62 = [];\n$arr63 = [];\n$arr64 = [];\n\
    $arr65 = [];\n$arr66 = [];\n$arr67 = [];\n$arr68 = [];\n$arr69 = [];\n$arr70 =\
    \ [];\n$arr71 = [];\n$arr72 = [];\n$arr73 = [];", "    $len = count($arr);\n \
    \   if ($len == 0) {\n        return array();\n    }\n    if ($len == 1) {\n \
    \       return array($arr[0]);\n    }\n    $min = min($arr);\n    $max = max($arr);\n\
    \    $result = [];\n    for ($i = 0; $i < $len; $i++) {\n        if ($arr[$i]\
    \ == $min) {\n            $result[] = 'One';\n        } else if ($arr[$i] == $max)\
    \ {\n            $result[] = 'Nine';\n        } else {\n            $result[]\
    \ = sprintf('%u', ($arr[$i] - $min));\n        }\n    }\n    return array_reverse($result);\n\
    }\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. Try it with `[-1, 1, -55]`.\n<|/ c |>\n<| c\
    \ |>\nI added a version that handles negative numbers. I tested it and it works.\n\
    <|/ c |>\n<| c |>\nI added a version that handles negative numbers. I tested it\
    \ and it works.\n<|/ c |>\n<| c |>\nI added a version that handles negative numbers.\
    \ I tested it and it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$numbers\
    \ = array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers, function($number)\
    \ {\n    return $number > 0 && $number < 10;\n});\nsort($numbers);\n$numbers =\
    \ array_map(function($number) {\n    return sprintf('%u', $number);\n}, $numbers);\n\
    $numbers = array_reverse($numbers);\n$numbers = array_combine(range(1, 9), $numbers);\n\
    print_r($numbers);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. Try it with `[-1, 1, -55]`.\n<|/\
    \ c |>\n<| c |>\nI added a version that handles negative numbers. I tested it\
    \ and it works.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n$numbers =\
    \ array(2, 1, 1, 4, 5, 8, 2, 3);\n$numbers = array_filter($numbers, function($number)\
    \ {\n    return $number > 0 && $number < 10;\n});\nsort($numbers);\n$numbers =\
    \ array_map(function($number) {\n    return sprintf('%u', $number);\n}, $numbers);\n\
    $numbers = array_reverse($numbers);\n$number", "  if (empty($arr)) {\n    return\
    \ array();\n  }\n  $len = count($arr);\n  if ($len < 2) {\n    return array();\n\
    \  }\n  $min = min($arr);\n  $max = max($arr);\n  $result = array();\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($arr[$i] == $min) {\n      $result[] = 'One';\n\
    \    }\n    elseif ($arr[$i] == $max) {\n      $result[] = 'Nine';\n    }\n  \
    \  elseif ($arr[$i] == $min + 1) {\n      $result[] = 'Two';\n    }\n    elseif\
    \ ($arr[$i] == $max - 1) {\n      $result[] = 'Three';\n    }\n    elseif ($arr[$i]\
    \ == $min + 2) {\n      $result[] = 'Four';\n    }\n    elseif ($arr[$i] == $max\
    \ - 2) {\n      $result[] = 'Five';\n    }\n    elseif ($arr[$i] == $min + 3)\
    \ {\n      $result[] = 'Six';\n    }\n    elseif ($arr[$i] == $max - 3) {\n  \
    \    $result[] = 'Seven';\n    }\n    elseif ($arr[$i] == $min + 4) {\n      $result[]\
    \ = 'Eight';\n    }\n    elseif ($arr[$i] == $max - 4) {\n      $result[] = 'Nine';\n\
    \    }\n  }\n  return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
