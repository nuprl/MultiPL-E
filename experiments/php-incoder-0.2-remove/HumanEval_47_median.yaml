name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\nfunction median($l) {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  sort($l);\n  return $l[count($l)/2];\n}", "    sort($l);\n    return\
    \ $l[floor(count($l)/2)];\n}\n", "  $n = count($l);\n  if ($n & 1) {\n    return\
    \ $l[(count($l) / 2)];\n  }\n  else {\n    $m = $n / 2;\n    return ($l[$m] +\
    \ $l[$n - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 ==\
    \ 0) {\n    return $l[($n - 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "  $n = count($l);\n  if ($n % 2 ===\
    \ 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] - $l[($n - 1) / 2])\
    \ / 2;\n  }\n  return $l[($n - 1) / 2];\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2) {\n        return $l[($n + 1) / 2];\n    } else {\n        return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[$n\
    \ / 2] + $l[($n - 1) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  $n = count($l);\n  if\
    \ ($n % 2 == 0) {\n    return ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2--]) / 2;\n\
    \  }\n  else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n + 1) / 2];\n  } else {\n\
    \    return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[($n + 1) / 2 - 1] + $l[($n + 1) /\
    \ 2]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}", "    sort($l);\n    $n =\
    \ count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    } else\
    \ {\n        return ($l[$n / 2] + $l[($n - 1) / 2];\n    }\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  } else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $n =\
    \ count($l);\n    if ($n % 2 === 0) {\n        return $l[($n + 1) / 2];\n    }\n\
    \    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n \
    \ return $l[count($l)/2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}",
  "  sort($l);\n  return $l[floor(count($l)/2)];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n + 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}", "    $n = count($l);\n    if ($n %\
    \ 2 == 0) {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n \
    \   }\n    return $l[($n - 1) / 2];\n}\n", "  $n = count($l);\n  if ($n % 2 ==\
    \ 0) {\n    $m = $l[($n - 1) / 2];\n  } else {\n    $m = ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1]) / 2;\n  }\n  return $m;\n}", "    $n = count($l);\n    if ($n\
    \ % 2 === 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n -\
    \ 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ + 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}\n", "  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    $i = $n / 2;\n    return ($l[$i]\
    \ + $l[$n - 1]) / 2;\n  } else {\n    $i = $n / 2 - 1;\n    return ($l[$i] + $l[$i\
    \ + 1]) / 2;\n  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 + 1]) / 2;\n  } else {\n    return $l[($n - 1) /\
    \ 2];\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[floor(count($l) / 2)];\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  } else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "    $l = array_values($l);\n    $n = count($l);\n    if ($n % 2) {\n    \
    \    return $l[($n + 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n -\
    \ 2) / 2]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}", "  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n  return\
    \ $l[count($l)/2];\n}", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return\
    \ $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2)\
    \ / 2]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "    $n\
    \ = count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    } else\
    \ {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}",
  "    $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n - 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median = (n + 1) / 2;\n  }\n\
    \  else {\n    $m = $l[($n - 1) / 2];\n    for ($i = $n - 2; $i >= 0; $i--) {\n\
    \      if ($l[$i] < $m) {\n        $m = $l[$i];\n      }\n    }\n    return $m;\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n + 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    \  }\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    \  }\n}", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}", "  $n = count($l);\n  if ($n\
    \ % 2) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2) {\n    return $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] +\
    \ $l[($n - 1) / 2]) / 2;\n  }\n}", "    $n = count($l);\n    if ($n % 2) {\n \
    \       return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n}\n", "    $n = count($l);\n    if ($n % 2) {\n        return\
    \ $l[($n - 1) / 2]; // median = (l[n-1] + l[n]) / 2;\n    } else {\n        return\
    \ $l[($n - 1) / 2];\n    }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n",
  "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n - 1) / 2] +\
    \ $l[($n - 1) / 2 + 1]) / 2;\n    } else {\n        return $l[($n - 1) / 2];\n\
    \    }\n}\n", "  $n = count($l);\n  if ($n % 2) {\n    return $l[(count($l) /\
    \ 2) - 1];\n  }\n  else {\n    $m = $l[($n - 1) / 2];\n    $l[($n - 1) / 2] =\
    \ 0;\n    return $m;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        return ($l[($n + 1) / 2] - $l[($n - 1) / 2]) /\
    \ 2;\n    } else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[($n + 1) / 2 - 1] + $l[($n + 2) / 2- 1])\
    \ / 2;\n  }\n  else {\n    return $l[($n + 1) / 2];\n  }\n}", "  sort($l);\n \
    \ return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2)\
    \ {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[$n / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n\
    \    return $l[(count($l) / 2) - 1];\n  } else {\n    return ($l[count($l) / 2]\
    \ + $l[count($l) / 2 - 1]) / 2;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", "    $n = count($l);\n  \
    \  if ($n % 2 == 0) {\n        $m = $l[$n/2];\n        for ($i = $n/2; $i > 0;\
    \ $i--) {\n            if ($l[$i] > $m) {\n                $m = $l[$i];\n    \
    \        }\n        }\n        return $m;\n    } else {\n        $m = $l[$n/2];\n\
    \        for ($i = $n/2; $i > 0; $i--) {\n            if ($l[$i] < $m) {\n   \
    \             $m = $l[$i];\n            }\n        }\n        return $m;\n   \
    \ }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}", "    $n = count($l);\n\
    \    if ($n % 2 === 0) {\n        return $l[($n - 1) / 2];\n    }\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n \
    \ if ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    $m = $l[($n\
    \ - 1) / 2];\n    for ($i = 0; $i < $n; $i++) {\n      if ($l[$i] < $m) {\n  \
    \      $m = $l[$i];\n      }\n    }\n    return $m;\n  }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  } else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "   \
    \ $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n - 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $n =\
    \ count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    } else\
    \ {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}\n",
  "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n/2)-1] + $l[($n/2)])\
    \ / 2;\n    } else {\n        return $l[($n/2)];\n    }\n}", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return ($l[($n/2)-1] + $l[($n/2)]) / 2;\n  } else {\n\
    \    return $l[($n/2)];\n  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2) {\n    return $l[($n + 1) / 2];\n  } else {\n    return $l[($n - 1) / 2];\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[($n + 1) /\
    \ 2 - 1] + $l[($n + 1) / 2]) / 2;\n  }\n  else {\n    return $l[($n - 1) / 2];\n\
    \  }\n}", "    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1)\
    \ / 2];\n    } else {\n        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) /\
    \ 2;\n    }\n}", "    sort($l);\n    return $l[count($l)/2];\n}", "  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "  $n = count($l);\n  if ($n\
    \ % 2) {\n    return $l[($n - 1) / 2];\n  } else {\n    $m = $l[($n - 1) / 2];\n\
    \    for ($i = 1; $i < $n; $i++) {\n      if ($l[$i] < $m) {\n        $m = $l[$i];\n\
    \      }\n    }\n    return $m;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[$n/2];\n \
    \ } else {\n    return ($l[$n/2-1] + $l[$n/2])/2;\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return ($l[($n + 1) / 2 - 1] + $l[($n + 1) /\
    \ 2]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2--]) / 2;\n \
    \ }\n  else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "    $n = count($l);\n\
    \    if ($n % 2 === 0) {\n        return $l[($n + 1) / 2];\n    }\n    return\
    \ ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l = array_values($l);\n\
    \    $n = count($l);\n    if ($n % 2 === 0) {\n        return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 + 1]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}\n", " \
    \ sort($l);\n  return $l[count($l)/2];\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2 === 0) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n -\
    \ 1) / 2] +\n        $l[($n - 2) / 2] +\n        $l[($n - 3) / 2] +\n        $l[($n\
    \ - 4) / 2]) / 4;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1]) / 2;\n  }\n}\n", "  $n = count($l);\n  if ($n % 2 == 0) {\n \
    \   return ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2];\n  }\n}", "  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ ($l[($n + 1) / 2 - 1] + $l[($n + 1) / 2]) / 2;\n  } else {\n    return $l[($n\
    \ - 1) / 2];\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n}\n", "    $n\
    \ = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n \
    \   $m = $l[($n - 1) / 2];\n    for ($i = ($n - 1) / 2; $i >= 0; $i--) {\n   \
    \     if ($l[$i] > $m) {\n            $m = $l[$i];\n        }\n    }\n    return\
    \ $m;\n}\n", "    sort($l);\n    $n = count($l);\n    if ($n % 2) {\n        return\
    \ $l[$n / 2];\n    }\n    return ($l[$n / 2 - 1] + $l[$n / 2]) / 2;\n}\n", " \
    \ sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[$n/2];\n  }\n \
    \ else {\n    return ($l[$n/2] + $l[$n/2 - 1]) / 2;\n  }\n}", "    sort($l);\n\
    \    return $l[floor(count($l) / 2)];\n}\n", "  $n = count($l);\n  if ($n % 2)\
    \ {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    $m = floor($n / 2);\n  \
    \  return ($l[$m] + $l[$n - 1]) / 2;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n - 1)\
    \ / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return ($l[($n + 1) / 2-1] + $l[($n + 1) / 2])/2;\n  } else {\n\
    \    return $l[($n - 1) / 2];\n  }\n}", "    $n = count($l);\n    if ($n % 2)\
    \ {\n        return $l[($n - 1) / 2];\n    } else {\n        return ($l[($n -\
    \ 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "    $n = count($l);\n    if\
    \ ($n % 2 === 0) {\n        $m = $l[$n-1];\n        for ($i = $n/2; $i >= 0; $i--)\
    \ {\n            if ($l[$i] > $m) {\n                $m = $l[$i];\n          \
    \  }\n        }\n        return $m;\n    }\n    else {\n        $m = $l[$n-1];\n\
    \        for ($i = $n/2; $i >= 0; $i--) {\n            if ($l[$i] < $m) {\n  \
    \              $m = $l[$i];\n            }\n        }\n        return $m;\n  \
    \  }\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ + 1) / 2];\n  }\n  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", " \
    \ $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  } else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "   \
    \ $n = count($l);\n    if ($n % 2) {\n        return $l[($n + 1) / 2];\n    }\
    \ else {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1)\
    \ / 2];\n  }\n  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", "  $n =\
    \ count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[$n/2];\n  } else {\n    return\
    \ ($l[$n/2-1] + $l[$n/2]) / 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  $n = count($l);\n  if ($n % 2 == 0) {\n    $m = $l[($n + 1) / 2];\n  }\
    \ else {\n    $m = ($l[($n - 1) / 2] +\n          $l[($n - 1) / 2]) / 2;\n  }\n\
    \  return $m;\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 + 1]) / 2;\n    }\n    return $l[($n - 1)\
    \ / 2];\n}", "    $l = array_values($l);\n    $n = count($l);\n    if ($n % 2)\
    \ {\n        return $l[($n - 1) / 2];\n    } else {\n        return ($l[($n -\
    \ 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}\n", "    $n = count($l);\n  \
    \  if ($n % 2) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", "  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2) {\n    return $l[($n + 1) / 2];\n  } else {\n    return ($l[$n / 2]\
    \ + $l[($n - 1) / 2) / 2];\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "    $n = count($l);\n    if ($n % 2 === 0) {\n        $m = $l[$n-1];\n  \
    \      for ($i = $n/2; $i >= 0; $i--) {\n            if ($l[$i] > $m) {\n    \
    \            $m = $l[$i];\n            }\n        }\n        return $m;\n    }\n\
    \    else {\n        $m = $l[$n-1];\n        for ($i = $n/2; $i >= 0; $i--) {\n\
    \            if ($l[$i] < $m) {\n                $m = $l[$i];\n            }\n\
    \        }\n        return $m;\n    }\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 + 1]) / 2;\n\
    \    }\n    return $l[($n - 1) / 2];\n}\n", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "    $n = count($l);\n    if ($n % 2 === 0) {\n        return ($l[($n +\
    \ 1) / 2 - 1] + $l[($n - 1) / 2];\n    } else {\n        return $l[($n - 1) /\
    \ 2];\n    }\n}\n", "    $n = count($l);\n    if ($n % 2) {\n        return $l[($n\
    \ - 1) / 2];\n    } else {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2\
    \ - 1]) / 2;\n    }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2\n    ]) / 2;\n  }\n  else {\n    return\
    \ $l[($n - 1) / 2];\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "    sort($l);\n    return $l[floor(count($l)/2)];\n\
    }", "    $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n - 1)\
    \ / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n",
  "  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 + 1]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}", "  sort($l);\n\
    \  return $l[count($l)/2];\n}", "  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    $m = $l[($n - 1) / 2];\n    for ($i =\
    \ 1; $i < $n; $i++) {\n      if ($l[$i] < $m) {\n        $m = $l[$i];\n      }\n\
    \    }\n    return $m;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}",
  "  sort($l);\n  return $l[count($l)/2];\n}\n", "    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return ($l[($n + 1) / 2 - 1] + $l[($n + 1) / 2]) / 2;\n\
    \    }\n    return $l[($n + 1) / 2];\n}", "    $n = count($l);\n    if ($n % 2\
    \ === 0) {\n        return ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2];\n    }\n\
    \    return $l[($n - 1) / 2];\n}", "  sort($l);\n  return $l[count($l)/2];\n}",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) /\
    \ 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    \  }\n}", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n\
    \ + 1) / 2 - 1] + $l[($n - 1) / 2\n            - 1]) / 2;\n    } else {\n    \
    \    return $l[($n - 1) / 2];\n    }\n}\n", "    $n = count($l);\n    if ($n %\
    \ 2) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n - 1) / 2]\
    \ + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) /\
    \ 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n -\
    \ 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[($n + 1) /\
    \ 2 - 1] + $l[($n - 1) / 2--]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) /\
    \ 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    \  }\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return ($l[($n/2)-1]\
    \ + $l[($n/2)]) / 2;\n  }\n  else {\n    return $l[($n/2)];\n  }\n}\n", "  sort($l);\n\
    \  return $l[count($l)/2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n %\
    \ 2) {\n    return $l[$n/2];\n  } else {\n    return ($l[$n/2-1] + $l[$n/2])/2;\n\
    \  }\n}", "    $n = count($l);\n    if ($n % 2 === 0) {\n        return $l[($n\
    \ - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n\
    }", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ + 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[($n + 1) /\
    \ 2] - $l[$n / 2]) / $n;\n  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n\
    \ - 1) / 2 - 1] + $l[$n / 2]) / $n;\n  }\n}\n", "  $n = count($l);\n  if ($n %\
    \ 2 == 0) {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 + 1]) / 2;\n  }\n\
    \  else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] +\n            $l[($n\
    \ - 1) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0)\
    \ {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ +\n            $l[($n - 1) / 2 + 1]) / 2;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n - 1)\
    \ / 2] + $l[($n - 1) / 2 + 1]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}",
  "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", " \
    \ $n = count($l);\n  if ($n % 2 === 0) {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 + 1]) / 2;\n  }\n  else {\n    return $l[($n - 1) / 2];\n  }\n}", " \
    \ sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[$n / 2];\n  } else\
    \ {\n    return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n  }\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n-1] + $l[$n/2]) / 2;\n\
    \  } else {\n    return $l[$n/2];\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n +\
    \ 1) / 2];\n  } else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) /\
    \ 2;\n  }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}", "  sort($l);\n \
    \ $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  } else {\n\
    \    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  $n =\
    \ count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", " \
    \ sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $n = count($l);\n    if ($n % 2 === 0) {\n        $m = $l[($n - 1)\
    \ / 2];\n    } else {\n        $m = ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n    }\n    return $m;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  return $l[count($l)/2];\n}", "    sort($l);\n    return\
    \ $l[count($l)/2];\n}", "  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ - 1) / 2]; // median = (l[n-1] + l[n]) / 2;\n  } else {\n    return ($l[($n\
    \ - 1) / 2] - $l[($n - 2) / 2]) / 2;\n  }\n}", "  $n = count($l);\n  if ($n %\
    \ 2 === 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  } else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  return $l[floor(count($l)/2)];\n\
    }", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n\
    \  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n\
    }", "    sort($l);\n    return $l[count($l)/2];\n}\n", "  sort($l);\n  return\
    \ $l[floor(count($l) / 2)];\n}\n", "    $n = count($l);\n    if ($n % 2 === 0)\
    \ {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n}", "  sort($l);\n\
    \  return $l[count($l)/2];\n}", "    $n = count($l);\n    if ($n % 2 === 0) {\n\
    \        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 1) / 2 - 1]) / 2;\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return\
    \ ($l[($n + 1) / 2 - 1] + $l[($n - 1) / 2];\n  }\n  return ($l[($n - 1) / 2 -\
    \ 1] + $l[($n + 1) / 2];\n}", "  sort($l);\n  return $l[count($l)/2];\n}", " \
    \ sort($l);\n  return $l[count($l)/2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "  sort($l);\n  return $l[count($l)/2];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
