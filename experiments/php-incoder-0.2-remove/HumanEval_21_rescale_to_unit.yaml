name: HumanEval_21_rescale_to_unit
language: php
prompt: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n// such that the smallest number will become 0 and the\
  \ largest will become 1\nfunction rescale_to_unit($numbers) {\n"
tests: "function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
  \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
  \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $min = min($numbers);\n    $max = max($numbers);\n    $scale =\
    \ 1 / ($max - $min);\n    foreach ($numbers as &$number) {\n        $number *=\
    \ $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n\
    \  foreach ($numbers as $number) {\n    $number *= $scale;\n  }\n  return $numbers;\n\
    }", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $new_min = round($min / $range);\n    $new_max = round($max /\
    \ $range);\n    $new_range = max($max - $min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = round(($number\
    \ - $new_min) / $new_range);\n    }\n    return $new_numbers;\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n  return\
    \ $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = max($max - $min);\n    return array_map(function ($value) use ($min, $max,\
    \ $range) {\n        return $value / $range * $max - $min;\n    }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ ($max - $min);\n    foreach ($numbers as &$number) {\n        $number *= $scale;\n\
    \    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $key => $number) {\n\
    \        $numbers[$key] = $number * $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, array_values($numbers));\n}\n", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = max($max - $min);\n    $new_min = floor($min / $range) * $range;\n    $new_max\
    \ = ceil($max / $range) * $range;\n    $new_range = max($new_max - $new_min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = round(($number - $new_min) / $new_range) * $new_range;\n    }\n    return\
    \ $new_numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = max($max - $min);\n  return array_map(function ($number) use ($min, $max)\
    \ {\n    return $number - $min / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` doesn't seem to accept a\
    \ callback that returns an array (it only accepts a callback that returns one\
    \ value).\n<|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `array_map` doesn't seem to accept\
    \ a callback that returns an array (it only accepts a callback that returns one\
    \ value).\n<|/ c |>\n<| c |>\nI fixed the typo. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work. `array_map` doesn't seem to accept\
    \ a callback that returns an array (it only accepts a callback that returns one\
    \ value).\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($value) use ($min, $max) {\n        return ($value - $min) / $range;\n    },\
    \ $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n  \
    \  $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ {\n    return $number - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) use ($min, $max, $range) {\n        return $number - ($range * floor(($number\
    \ - $min) / $range));\n    }, $numbers);\n}\n", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($max - $min);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range);\n    }\n    return $new_numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function($number)\
    \ { return $number * $scale; }, $numbers);\n}", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $range = max($max - $min);\n    return $min + ($numbers\
    \ - $min) / $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    $new_range = max($max - $min);\n    $new_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = round($number\
    \ / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($number) {\n        return $number / $range;\n\
    \    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return ($num - $min) / $range;\n    }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers\
    \ as $number) {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers[$min]\
    \ = 0;\n    $numbers[$max] = 1;\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    return $min + ($numbers - $min) / $range;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ ($max - $min);\n    foreach ($numbers as $number) {\n        $number *= $scale;\n\
    \    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as $key => $value) {\n \
    \       $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as\
    \ $number) {\n        $numbers[$number] = $number - $min;\n    }\n    $numbers\
    \ = array_map(function ($number) { return $number / $max; }, $numbers);\n    return\
    \ $numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1 / ($max - $min);\n  foreach ($numbers as $number) {\n    $number *= $scale;\n\
    \  }\n  return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    foreach ($numbers as $number) {\n        $numbers[$number]\
    \ = $number - $min;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, array_values($numbers));\n}\n", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range * 2 - 1;\n    }\n    return $new_numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function($n) use ($min, $max, $range) {\n        return\
    \ ($n - $min) / $range;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($number) {\n      \
    \  return $number - $min;\n    }, array_values($numbers));\n}\n", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as\
    \ $key => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n\
    \  foreach ($numbers as $key => $value) {\n    $numbers[$key] = $value * $scale;\n\
    \  }\n  return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range = array_map('abs', $range);\n    $range\
    \ = array_sum($range);\n    $range = array_map('sqrt', $range);\n    $range =\
    \ array_map('round', $range);\n    $range = array_map('ceil', $range);\n    $range\
    \ = array_map('floor', $range);\n    $range = array_map('round', $range);\n  \
    \  $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_map('round', $range);\n    $range = array_map('round', $range);\n\
    \    $range = array_", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as &$number) {\n       \
    \ $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n   \
    \ return $numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = range($min, $max);\n  $new_range = array_map('round', $range);\n \
    \ $new_range = array_combine($new_range, $range);\n  return $new_range;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max -\
    \ $min);\n    foreach ($numbers as $number) {\n        $number *= $scale;\n  \
    \  }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    return array_map(function ($num) use ($new_min,\
    \ $new_max) {\n        return ($num - $new_min) / ($new_max - $new_min);\n   \
    \ }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $i => $number) {\n        $numbers[$i] = $number - $min;\n\
    \    }\n    $numbers[0] = $min - 1;\n    $numbers[count($numbers) - 1] = $max\
    \ - 1;\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = range($min, $max);\n    $scale = ($max - $min) / count($range);\n\
    \    foreach ($numbers as $number) {\n        $numbers[$number] = $range * $number\
    \ / $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max -\
    \ $min);\n    foreach ($numbers as $key => $number) {\n        $numbers[$key]\
    \ = $number * $scale;\n    }\n    return $numbers;\n}", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max -\
    \ $min);\n    foreach ($numbers as $number) {\n        $number *= $scale;\n  \
    \  }\n    return $numbers;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. I tried your code, but I got this error: `Fatal error: Call to\
    \ undefined function array_map()`. Any idea?\n<|/ c |>\n<| c |>\nOh, sorry, I\
    \ forgot that `array_map` was a PHP 5.3 function. I updated my answer with a PHP\
    \ 5.2 compatible version.\n<|/ c |>\n<| c |>\nThanks for your answer. I tried\
    \ your code, but I got this error: `Fatal error: Call to undefined function array_map()`.\
    \ Any idea?\n<|/ c |>\n<| c |>\nOh, sorry, I forgot that `array_map` was a PHP\
    \ 5.3 function. I updated my answer with a PHP 5.2 compatible version.\n<|/ c\
    \ |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map('round', $numbers);\n$numbers = array_map('ceil', $numbers);\n\
    $numbers = array_map('floor', $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,math\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map('round',\
    \ $numbers);\n$numbers = array_map('ceil', $numbers);\n$numbers = array_map('floor',\
    \ $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,math |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map('round', $numbers);\n\
    $numbers = array_map('ceil', $numbers);\n$numbers = array_map('floor', $numbers);\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map('round', $numbers);\n$numbers = array_map('ceil', $numbers);\n\
    $numbers = array_map('floor', $numbers);\n</code>\n<|/ a dscore=0 tags=php,arrays,math\
    \ |>\n<| a dscore=0 |>\n<code>\n$numbers = array(1,2,3,4,5,", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ return array_map(function ($num) use ($min, $max) {\n        return $num - $min;\n\
    \    }, array_values($numbers));\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = max($max - $min);\n  return $min + ($numbers - $min) / $range;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = floor($min / $range) * $range;\n    $new_max = ceil($max / $range)\
    \ * $range;\n    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = round(($number\
    \ - $new_min) / $new_range) * $new_range + $new_min;\n    }\n    return $new_numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ $max - $min;\n    return array_map(function ($number) use ($scale) {\n     \
    \   return $number * $scale;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max, $range) {\n        return\
    \ ($num - $min) / $range;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=php,math,algorithm |>\nI came up with this solution:\n<code>", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    return array_map(function ($number) use ($scale) {\n        return $number\
    \ * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately this does not work. `array_map` returns a new\
    \ array and does not modify the original array. `array_map` also does not allow\
    \ you to specify an arbitrary number of arguments. I ended up writing my own `array_map`\
    \ function which allows me to specify an arbitrary number of arguments.\n<|/ c\
    \ |>\n<| a dscore=0 |>\nI ended up writing my own array_map function which allows\
    \ me to specify an arbitrary number of arguments. I used the code from this answer:\
    \ https://stackoverflow.com/a/4709644/1067003\n<code>", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_numbers =\
    \ array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = $number\
    \ / $range;\n    }\n    return $new_numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min;\n    }, array_values($numbers));\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n  \
    \  foreach ($numbers as $i => $number) {\n        $numbers[$i] = $number * $scale;\n\
    \    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) use ($min, $max, $range) {\n        return $number - ($min - $range)\
    \ / 2;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as &$number) {\n     \
    \   $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = round($min\
    \ / $range);\n    $new_max = round($max / $range);\n    $new_range = max($max\
    \ - $min);\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n\
    \        $new_numbers[] = round($number / $new_range) * $new_range;\n    }\n \
    \   return $new_numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $n) {\n        $range[] = $n\
    \ - $min;\n    }\n    return $range;\n}\n", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers as\
    \ &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max -\
    \ $min);\n    foreach ($numbers as $number) {\n        $number *= $scale;\n  \
    \  }\n    return $numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / $max - $min;\n  foreach ($numbers as $number) {\n    $number *=\
    \ $scale;\n  }\n  return $numbers;\n}", "    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    $range = max($max - $min);\n    $new_min = floor($min /\
    \ $range) * $range;\n    $new_max = ceil($max / $range) * $range;\n    return\
    \ array_map(function ($num) use ($new_min, $new_max) {\n        return ($num -\
    \ $new_min) / ($new_max - $new_min);\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    return array_map(function ($number) use ($scale) {\n        return $number\
    \ * $scale;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  $range = array_map('sqrt', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('round', $range);\n\
    \  return array_combine($range, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return $min +\
    \ ($numbers - $min) / $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $scale = ($range == 0) ? 0 : (1 / $range);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = range($min, $max);\n    $rescaled = [];\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = $number / $range[$min];\n\
    \    }\n    return $rescaled;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    return array_map(function ($number) use ($min, $max) {\n        return ($number\
    \ - $min) / ($max - $min);\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) use ($min, $max) {\n        return $min + ($number - $min) / $range;\n\
    \    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math |>\n<| c |>\nThanks\
    \ for your answer, but this doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've also tried it on several examples and\
    \ it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it just doesn't seem to work. I've tried it on several examples\
    \ and it just doesn't seem to work. I've tried it on several examples and it just\
    \ doesn't seem to work. I've tried it on several examples and it just doesn't\
    \ seem to work. I've tried it on several examples and it just doesn't seem to\
    \ work. I've tried it on several examples and it just doesn't seem to work. I've\
    \ tried it on several examples and it just doesn't seem to work. I've tried it\
    \ on several examples and it just doesn't seem to work. I've tried it on several\
    \ examples and it ", "    $min = min($numbers);\n    $max = max($numbers);\n \
    \   $range = max($max - $min);\n    $scale = 1 / $range;\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return ($number - $min) / ($max - $min);\n    }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $new_range = 1 / $range;\n    $new_min = $min * $new_range;\n\
    \    $new_max = $max * $new_range;\n    $new_numbers = array();\n    foreach ($numbers\
    \ as $number) {\n        $new_numbers[] = round($number / $new_range) * $new_range;\n\
    \    }\n    return $new_numbers;\n}", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $i => $number) {\n        $numbers[$i] = (float) $number\
    \ / $max * ($max - $min) + $min;\n    }\n    return $numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = ($max - $min);\n  foreach ($numbers as $key\
    \ => $value) {\n    $numbers[$key] = $value / $scale;\n  }\n  return $numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ $max - $min;\n    foreach ($numbers as $key => $value) {\n        $numbers[$key]\
    \ = $value * $scale;\n    }\n    return $numbers;\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90])` returns `[-10, -20, -30, -40, -50, -60, -70, -80,\
    \ -90]`\n<|/ c |>\n<| c |>\nI tested it and it works. I used `rescale_to_unit([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90])` as the input array and got `[-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90]` as the output. Maybe you used it incorrectly?\
    \ I used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70, -80, -90])` as the\
    \ input array and got `[-10, -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\n\
    <|/ c |>\n<| c |>\nI used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90])` as the input array and got `[-10, -20, -30, -40, -50, -60, -70,\
    \ -80, -90]` as the output. Maybe you used it incorrectly? I used `rescale_to_unit([-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90])` as the input array and got `[-10,\
    \ -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\n<|/ c |>\n<| c |>\n\
    I used `rescale_to_unit([-10, -20, -30, -40, -50, -60, -70, -80, -90])` as the\
    \ input array and got `[-10, -20, -30, -40, -50, -60, -70, -80, -90]` as the output.\
    \ Maybe you used it incorrectly? I used `rescale_to_unit([-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90])` as the input array and got `[-10, -20, -30, -40,\
    \ -50, -60, -70, -80, -90]` as the output.\n<|/ ", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as &$number) {\n        $number *= $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    return array_map(function ($num) use ($min,\
    \ $max, $range) {\n        return $num - $min / $range;\n    }, $numbers);\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = range($min,\
    \ $max);\n    $rescaled = array();\n    foreach ($numbers as $number) {\n    \
    \    $rescaled[] = ($number - $min) / ($max - $min);\n    }\n    return $rescaled;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $new_range = 1 / $range;\n    $new_min = round($min * $new_range);\n\
    \    $new_max = round($max * $new_range);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round($number * $new_range);\n\
    \    }\n    return $new_numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  foreach ($numbers as $key => $value) {\n   \
    \ $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return\
    \ array_map(function ($number) { return $number * $scale; }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays,math |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ this doesn't seem to work. I've added an example of the array I'm working with\
    \ in the original question.\n<|/ c |>\n<| c |>\n: I added a solution that should\
    \ work. Let me know if it doesn't.\n<|/ c |>\n<| c |>\nThanks for your help. Unfortunately\
    \ this doesn't seem to work. I've added an example of the array I'm working with\
    \ in the original question.\n<|/ c |>\n<| c |>\n: I added a solution that should\
    \ work. Let me know if it doesn't.\n<|/ c |>\n<| c |>\nThanks for your help. Unfortunately\
    \ this doesn't seem to work. I've added an example of the array I'm working with\
    \ in the original question.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n\
    \    array(\n        'id' => 1,\n        'name' => 'Test 1',\n        'price'\
    \ => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity' =>\
    \ 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n     \
    \   'quantity' => 1,\n        'price' => 1,\n        'quantity' => 1,\n      \
    \  'price' => 1,\n        'quantity' => 1,\n        'price' => 1,\n        'quantity'\
    \ => 1,\n        'price' => 1,\n        'quantity' => ", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = floor($min\
    \ / $range) * $range;\n    $new_max = ceil($max / $range) * $range;\n    return\
    \ array_map(function ($number) {\n        return ($number - $new_min) / ($new_max\
    \ - $new_min);\n    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) use ($min, $max, $range) {\n        return $number - ($range * $min\
    \ / $max);\n    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as &$number) {\n     \
    \   $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = round($min\
    \ / $range);\n    $new_max = round($max / $range);\n    $new_range = max($new_max\
    \ - $new_min);\n    $new_numbers = array();\n    foreach ($numbers as $number)\
    \ {\n        $new_numbers[] = round($number / $new_range) * $new_range;\n    }\n\
    \    return $new_numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    return $numbers / $range;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($num) use ($range) {\n    return $num / $range;\n  }, $numbers);\n}\n", " \
    \   $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max -\
    \ $min);\n    return array_map(function ($num) use ($min, $max, $range) {\n  \
    \      return ($num - $min) / $range;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = round($min\
    \ / $range);\n    $new_max = round($max / $range);\n    $new_range = max($max\
    \ - $min);\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n\
    \        $new_numbers[] = round($number / $new_range) * $new_range;\n    }\n \
    \   return $new_numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    $new_range = max($new_max - $new_min);\n    $new_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = round($number\
    \ / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = max($max - $min);\n  return\
    \ array_map(function ($number) use ($min, $max) {\n    return $number - $min /\
    \ $range;\n  }, $numbers);\n}", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as $key => $value) {\n \
    \       $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return $min +\
    \ ($numbers - $min) / $range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = ($max - $min);\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = $number / $scale;\n\
    \    }\n    return $new_numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  foreach ($numbers as $number) {\n    $number\
    \ *= $scale;\n  }\n  return $numbers;\n}\n", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n    foreach\
    \ ($numbers as $key => $value) {\n        $numbers[$key] = $value * $scale;\n\
    \    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $number) {\n        $number *= $max / $min;\n    }\n\
    \    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as $key => $value) {\n \
    \       $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min / $range;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = max($max - $min);\n  return array_map(function($num)\
    \ use ($min, $max, $range) {\n    return $num - $min / $range;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $new_min = floor($min / $range) * $range;\n\
    \    $new_max = ceil($max / $range) * $range;\n    $new_range = max($max - $min);\n\
    \    $new_range = min($new_range, $range);\n    $new_numbers = array();\n    foreach\
    \ ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $value *\
    \ $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min;\n    }, array_values($numbers));\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $scale = 1 / $range;\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ return array_map(function($number) { return $number - $min; }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = max($max -\
    \ $min);\n  return array_map(function ($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $scale = 1 / $range;\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = max($max - $min);\n  return array_map(function ($value) use ($min, $max) {\n\
    \    return $min + ($value - $min) / $range;\n  }, $numbers);\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    return array_map(function ($num) use ($new_min,\
    \ $new_max) {\n        return round($num / $range) * $new_max - $new_min;\n  \
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    $new_range = max($max - $min);\n    $new_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = round($number\
    \ / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min / max($numbers) - $min / max($numbers);\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = max($max - $min);\n    return array_map(function ($number) use ($min,\
    \ $max, $range) {\n        return $number - ($range * $min / $max);\n    }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max -\
    \ $min;\n  return array_map(function ($number) {\n    return $number * $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't work\
    \ if there are negative numbers in the array. For example, `[-1,-2,-3]` becomes\
    \ `[0,0,0]`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it and it doesn't work. Try it with `[-1,-2,-3]`.\n<|/ c |>\n\
    <| c |>\n: It works perfectly for me. Try it yourself.\n<|/ c |>\n<| c |>\n: It\
    \ works perfectly for me. Try it yourself.\n<|/ c |>\n<| a tags=php,math |>\n\
    <code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map(function($n){\n\
    \    return $n*0.5;\n}, $numbers);\nprint_r($numbers);", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) {\n        return $number / $range;\n    }, $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\nI wrote a PHP function which does this for\
    \ you. \n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale\
    \ = 1 / $max - $min;\n    foreach ($numbers as $number) {\n        $number *=\
    \ $scale;\n    }\n    return $numbers;\n}", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = max($max - $min);\n    return $numbers / $range;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return ($num - $min) / ($max - $min);\n \
    \   }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = ($max - $min);\n    foreach ($numbers as $number) {\n        $numbers[$number]\
    \ = $number / $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return array_map(function ($num) use ($min, $max) {\n        return $num\
    \ - $min / $range;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $scale = 1 / ($max - $min);\n  foreach ($numbers as $key\
    \ => $value) {\n    $numbers[$key] = $value * $scale;\n  }\n  return $numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $new_range = 1.0;\n    if ($range > $new_range) {\n        $new_range\
    \ = $range;\n    }\n    $new_numbers = array();\n    foreach ($numbers as $number)\
    \ {\n        $new_numbers[] = $new_range * $number / $range;\n    }\n    return\
    \ $new_numbers;\n}", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1 / ($max - $min);\n  return array_map(function($number) { return $number\
    \ * $scale; }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $number) {\n        $number *= $max / $min;\n    }\n\
    \    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    $range = array_map('abs', $range);\n    $range\
    \ = array_sum($range);\n    $scale = 1 / $range;\n    foreach ($numbers as $number)\
    \ {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    return array_map(function ($num)\
    \ use ($new_range) {\n        return round(($num - $new_min) / $new_range) * $new_range;\n\
    \    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) { return $number / $max - $min; }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001]`\n<|/ c |>\n<| c |>\n: It does work. `[1,2,3,4,5,6,7,8,9,10]`\
    \ becomes `[-0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001,\
    \ -0.001, -0.001]` because `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[-0.001, -0.001,\
    \ -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001, -0.001]` after\
    \ applying the linear transform. `[1,2,3,4,5,6,7,8,9,10]` becomes `[", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $scale = 1 / $range;\n    foreach ($numbers as $key => $value) {\n      \
    \  $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n}\n", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    foreach ($numbers as $number)\
    \ {\n        $number *= $max / $min;\n    }\n    return $numbers;\n}", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function ($value)\
    \ use ($min, $max) {\n        return $value - $min;\n    }, array_values($numbers));\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = max($max -\
    \ $min);\n  return array_map(function($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    foreach ($numbers as $number) {\n        $number\
    \ *= $scale;\n    }\n    return $numbers;\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = max($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThanks for your answer. I'm afraid that your solution\
    \ doesn't work as expected. I've added some more info to my question. Thanks again!\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a function that will rescale\
    \ your numbers to between 0 and 1.\n<|/ c |>\n<| c |>\nThanks for your answer.\
    \ I've added some more info to my question. Thanks again!\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a function that will rescale your numbers to between\
    \ 0 and 1.\n<|/ c |>\n<| c |>\nThanks for your answer. I've added some more info\
    \ to my question. Thanks again!\n<|/ c |>\n<| a |>\nI believe this should work:\n\
    <code>\n$numbers = array(\n  array(1, 2),\n  array(3, 4),\n  array(5, 6),\n  array(7,\
    \ 8),\n  array(9, 10),\n  array(11, 12),\n  array(13, 14),\n  array(15, 16),\n\
    \  array(17, 18),\n  array(19, 20),\n  array(21, 22),\n  array(23, 24),\n  array(25,\
    \ 26),\n  array(27, 28),\n  array(29, 30),\n  array(31, 32),\n  array(33, 34),\n\
    \  array(35, 36),\n  array(37, 38),\n  array(39, 40),\n  array(41, 42),\n  array(43,\
    \ 44),\n  array(45, 46),\n  array(47, 48),\n  array(49, 50),\n  array(51, 52),\n\
    \  array(53, 54),\n  array(55, 56),\n  array(57, 58),\n  array(59, 60),\n  array(61,\
    \ 62),\n  array(63, 64),\n  array(65, 66),\n  array(67, 68),\n  array(69, 70),\n\
    \  array(71, 72),\n  array(73, 74),\n  array(75, 76),\n  array(77, 78),\n  array(79,\
    \ 80),\n  array(81, 82),\n  array(83, 84),\n  array(85, 86),\n  array(87, 88),\n\
    \  array(89, 90),\n  array(91, 92),\n  array(", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = round($min\
    \ / $range);\n    $new_max = round($max / $range);\n    $new_range = max($max\
    \ - $min);\n    $new_numbers = array();\n    foreach ($numbers as $number) {\n\
    \        $new_numbers[] = round($number / $new_range) * $new_range;\n    }\n \
    \   return $new_numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = range($min, $max);\n    $new_range = array();\n    foreach ($range\
    \ as $value) {\n        $new_range[$value] = $value / $max;\n    }\n    return\
    \ $new_range;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n \
    \   $range = max($max - $min);\n    return array_map(function ($number) use ($min,\
    \ $max, $range) {\n        return ($number - $min) / $range;\n    }, $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I believe it only works\
    \ if you know that the numbers are all positive. Otherwise the largest number\
    \ will always be 1 and the smallest number will always be 0.\n<|/ c |>\n<| c |>\n\
    Yes, that's true. That's why I said \"such that the smallest number will become\
    \ 0 and the largest will become 1\". I'll add that to the answer.\n<|/ c |>\n\
    <| c |>\nI added a solution that works with negative numbers as well.\n<|/ c |>\n\
    <| c |>\nI like the idea of using array_map to rescale each number individually,\
    \ but this doesn't work for me because I need the numbers to stay in the same\
    \ order. For example, if I have an array with values [1,2,3,4,5] and I apply your\
    \ function I get [-0.5, -0.5, -0.5, -0.5, -0.5]. Is there a way to do this that\
    \ preserves the original order?\n<|/ c |>\n<| c |>\nI added a solution that preserves\
    \ the original order.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$numbers = array_map(function($n){return $n/(count($numbers)-1);},$numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work if\
    \ there are negative numbers in the array. Try it with `array(1,2,-3,4,-5,6,7,8,9,10)`\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it with `array(1,2,-3,4,-5,6,7,8,9,10)`\n\
    <|/ c |>\n<| c |>\nI added a solution that works with negative numbers as well.\n\
    <|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){return $n/(count($numbers)-1);},$numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $numbers = array_map(function($n){", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = ($max - $min) / count($numbers);\n    foreach ($numbers as $key\
    \ => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n    return $numbers;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify this in my\
    \ question, but I do need to keep the original array keys. I edited my question\
    \ to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer to preserve the original\
    \ keys.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't specify\
    \ this in my question, but I do need to keep the original array keys. I edited\
    \ my question to reflect this.\n<|/ c |>\n<| c |>\nI updated my answer to preserve\
    \ the original keys.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm sorry I didn't\
    \ specify this in my question, but I do need to keep the original array keys.\
    \ I edited my question to reflect this.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n\
    $numbers = array(\n    0 => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 =>\
    \ 5,\n    5 => 6,\n    6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10\
    \ => 11,\n    11 => 12,\n    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 =>\
    \ 16,\n    16 => 17,\n    17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n\
    \    21 => 22,\n    22 => 23,\n    23 => 24,\n    24 => 25,\n    25 => 26,\n \
    \   26 => 27,\n    27 => 28,\n    28 => 29,\n    29 => 30,\n    30 => 31,\n  \
    \  31 => 32,\n    32 => 33,\n    33 => 34,\n    34 => 35,\n    35 => 36,\n   \
    \ 36 => 37,\n    37 => 38,\n    38 => 39,\n    39 => 40,\n    40 => 41,\n    41\
    \ => 42,\n    42 => 43,\n    43 => 44,\n    44 => 45,\n    45 => 46,\n    46 =>\
    \ 47,\n    47 => 48,\n    48 => 49,\n    49 => 50,\n    50 => 51,\n    51 => 5",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 / $max - $min;\n\
    \    return array_map(function($num) use ($scale) {\n        return $num * $scale;\n\
    \    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = ($max - $min);\n    foreach ($numbers as $key => $value) {\n   \
    \     $numbers[$key] = ($value - $min) / $scale;\n    }\n    return $numbers;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function($x) { return $x * $scale; }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max\
    \ - $min);\n    $scale = 1 / $range;\n    foreach ($numbers as $number) {\n  \
    \      $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as $number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = $number / $range;\n    }\n    return $new_numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n\
    \  return array_map(function ($number) use ($scale) {\n    return $scale * $number;\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    foreach ($numbers as $number) {\n        $numbers[$number] = $number - $min;\n\
    \    }\n    $numbers[$min] = 0;\n    $numbers[$max] = 1;\n    return $numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    $range[] = 1;\n    $range[] = $max - $min;\n    return $range;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n\
    \    foreach ($numbers as $number) {\n        $number *= $scale;\n    }\n    return\
    \ $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n   \
    \ $range = max($max - $min);\n    $new_min = round($min / $range);\n    $new_max\
    \ = round($max / $range);\n    $new_range = max($max - $min);\n    $new_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        $new_numbers[] = round($number\
    \ / $new_range) * $new_range;\n    }\n    return $new_numbers;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / $max - $min;\n  return\
    \ array_map(function($number) { return $number * $scale; }, $numbers);\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round($number / $new_range)\
    \ * $new_range;\n    }\n    return $new_numbers;\n}", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    foreach ($numbers as $number) {\n        $numbers[$number]\
    \ = $number - $min;\n    }\n    $numbers = array_map(function ($number) {\n  \
    \      return $number / $max - $min;\n    }, $numbers);\n    return $numbers;\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ ($max - $min);\n    foreach ($numbers as $number) {\n        $number *= $scale;\n\
    \    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number) {\n      \
    \  $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, array_values($numbers));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Unfortunately I cannot use\
    \ any external libraries. I edited my question to make it clearer.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a pure PHP solution that doesn't use any\
    \ external libraries.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any external libraries. I edited my question to make it clearer.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a pure PHP solution that doesn't\
    \ use any external libraries.\n<|/ c |>\n<| a tags=php,math,arrays |>\n<code>\n\
    <?php\n$numbers = [\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n\
    \    8,\n    9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n\
    \    17,\n    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n\
    \    26,\n    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n\
    \    35,\n    36,\n    37,\n    38,\n    39,\n    40,\n    41,\n    42,\n    43,\n\
    \    44,\n    45,\n    46,\n    47,\n    48,\n    49,\n    51,\n    52,\n    53,\n\
    \    54,\n    55,\n    56,\n    57,\n    58,\n    59,\n    60,\n    61,\n    62,\n\
    \    63,\n    64,\n    65,\n    66,\n    67,\n    68,\n    69,\n    70,\n    71,\n\
    \    72,\n    73,\n    74,\n    75,\n    76,\n    77,\n    78,\n    79,\n    80,\n\
    \    81,\n    82,\n    83,\n    84,\n    85,\n    86,\n    87,\n    88,\n    89,\n\
    \    90,\n    91,", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('sqrt', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = array_map('ceil', $range);\n\
    \  $range = array_map('floor', $range);\n  $range = array_map('round', $range);\n\
    \  $range = array_map('ceil', $range);\n  $range = array_map('floor', $range);\n\
    \  $range = array_map('round', $range);\n  $range = ", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / $max - $min;\n    foreach ($numbers\
    \ as $key => $value) {\n        $numbers[$key] = $value * $scale;\n    }\n   \
    \ return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = range($min, $max);\n    $rescaled = array();\n    foreach ($numbers\
    \ as $number) {\n        $rescaled[] = $number / $range[1] - $min;\n    }\n  \
    \  return $rescaled;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  $range = array_map('sqrt', $range);\n  $range[] = 1;\n  $range\
    \ = array_map('sqrt', $range);\n  foreach ($numbers as $number) {\n    $numbers[$number]\
    \ = $range[$number];\n  }\n  return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    $new_min = round($min / $range);\n    $new_max = round($max / $range);\n\
    \    $new_range = max($new_max - $new_min);\n    $new_numbers = array();\n   \
    \ foreach ($numbers as $number) {\n        $new_numbers[] = round(($number - $new_min)\
    \ / $new_range) * $new_range + $new_min;\n    }\n    return $new_numbers;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n\
    \  return array_map(function ($number) use ($scale) {\n    return $scale * $number;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1 / $max - $min;\n  foreach ($numbers as $key => $value) {\n    $numbers[$key]\
    \ = $value * $scale;\n  }\n  return $numbers;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers\
    \ as &$number) {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = max($max - $min);\n\
    \    return $min + ($numbers - $min) / $range;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    $new_min = floor($min\
    \ / $range) * $range;\n    $new_max = ceil($max / $range) * $range;\n    $new_range\
    \ = max($max - $min);\n    $new_numbers = array();\n    foreach ($numbers as $number)\
    \ {\n        $new_numbers[] = round(($number - $new_min) / $new_range) * $new_range;\n\
    \    }\n    return $new_numbers;\n}\n", "    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    $scale = 1 / ($max - $min);\n    foreach ($numbers as $number)\
    \ {\n        $number *= $scale;\n    }\n    return $numbers;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range[]\
    \ = 1;\n    $range[] = $max - $min;\n    return $range;\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = max($max - $min);\n    return array_map(function\
    \ ($number) use ($min, $max, $range) {\n        return ($number - $min) / $range;\n\
    \    }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis looks very promising,\
    \ but I'm getting a syntax error on the first line of the function definition:\
    \ `Parse error: syntax error, unexpected '[' in /Applications/MAMP/htdocs/index.php\
    \ on line 6`\n<|/ c |>\n<| c |>\nSorry, I forgot that `array_map` doesn't exist\
    \ in PHP < 5.3. I've updated my answer to include a version that works in PHP\
    \ < 5.3.\n<|/ c |>\n<| c |>\nThanks for your help. Unfortunately, I'm still getting\
    \ a syntax error on the first line of the function definition: `Parse error: syntax\
    \ error, unexpected '[' in /Applications/MAMP/htdocs/index.php on line 6`\n<|/\
    \ c |>\n<| c |>\nSorry, I forgot that `array_map` doesn't exist in PHP < 5.3.\
    \ I've updated my answer to include a version that works in PHP < 5.3.\n<|/ c\
    \ |>\n<| c |>\nThanks for your help. Unfortunately, I'm still getting a syntax\
    \ error on the first line of the function definition: `Parse error: syntax error,\
    \ unexpected '[' in /Applications/MAMP/htdocs/index.php on line 6`\n<|/ c |>\n\
    <| a tags=arrays,php,math |>\nI came up with this solution:\n<code>"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
