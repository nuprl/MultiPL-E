name: HumanEval_12_longest
language: php
prompt: "<?php\n// Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n// strings of the same length. Return None in case the\
  \ input list is empty.\nfunction longest($strings) {\n"
tests: "function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"\
  zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length   = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: $strings[0];\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ I am not very familiar with PHP and I do not understand your code. Could you\
    \ please explain it a little bit more? Thanks.\n<|/ c |>\n<| c |>\nI added some\
    \ comments to my answer. Hope that helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. I am not very familiar with PHP and I do not understand your code. Could\
    \ you please explain it a little bit more? Thanks.\n<|/ c |>\n<| c |>\nI added\
    \ some comments to my answer. Hope that helps.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. I am not very familiar with PHP and I do not understand your code.\
    \ Could you please explain it a little bit more? Thanks.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$strings = array(\"string1\", \"string2\", \"string3\", \"\
    string4\", \"string5\", \"string6\", \"string7\", \"string8\", \"string9\", \"\
    string10\", \"string11\", \"string12\", \"string13\", \"string14\", \"string15\"\
    , \"string16\", \"string17\", \"string18\", \"string19\", \"string20\", \"string21\"\
    , \"string22\", \"string23\", \"string24\", \"string25\", \"string26\", \"string27\"\
    , \"string28\", \"string29\", \"string30\", \"string31\", \"string32\", \"string33\"\
    , \"string34\", \"string35\", \"string36\", \"string37\", \"string38\", \"string39\"\
    , \"string40\", \"string41\", \"string42\", \"string43\", \"string44\", \"string45\"\
    , \"string46\", \"string47\", \"string48\", \"string49\", \"string50\", \"string51\"\
    , \"string52\", \"string53\", \"string54\", \"string55\", \"string56\", \"string57\"\
    , \"string58\", \"string59\", \"string60\", \"string61\", \"string62\", \"string63\"\
    , \"string64\", \"string65\", \"string66\", \"string67\", \"string68\", \"string69\"\
    , \"string70\", \"string71\", \"string72\", \"string73\", \"string74\", \"string75\"\
    , \"string76\", \"string77\", \"string78\", \"string79\", \"string80\", \"string81\"\
    , \"string82\", \"string83\", \"string84\", \"string85\", \"string86\", \"", " \
    \   $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > $length) {\n      \
    \      $longest = $string;\n        }\n    }\n    return $longest ?: null;\n}",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n", "    $longest = null;\n\
    \    $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the longest string\
    \ is longer than the shortest string.\n<|/ c |>\n<| c |>\n: It does, but only\
    \ if the longest string is longer than the shortest string. I've added a test\
    \ case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| a tags=php,string |>\n<code>\n\
    $strings = array('hello', 'world', 'hello', 'world', 'hello', 'world');\n$longest\
    \ = array_reduce($strings, function($a, $b) {\n    return strlen($a) > strlen($b)\
    \ ? $a : $b;\n});\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the\
    \ longest string is longer than the shortest string.\n<|/ c |>\n<| c |>\n: It\
    \ does, but only if the longest string is longer than the shortest string. I've\
    \ added a test case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$strings\
    \ = array('hello', 'world', 'hello', 'world', 'hello', 'world');\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\n$strings = array('hello',\
    \ 'world', 'hello', 'world', 'hello', 'world');\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,string |>\n<code>\n$strings = array('hello',\
    \ 'world', 'hello', 'world', 'hello', 'world');\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $", "    $longest =\
    \ null;\n    foreach ($strings as $string) {\n        if ($longest === null ||\
    \ strlen($string) > strlen($longest)) {\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($length > $length) {\n       \
    \     $longest = $string;\n        }\n    }\n    return $longest ?: null;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($longest === null || $length >\
    \ $longest) {\n            $longest = $length;\n        }\n    }\n    return $longest\
    \ === null ? null : $strings[$longest];\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $length) {\n        \
    \    $longest = $string;\n            $length = strlen($string);\n        }\n\
    \    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longest) {\n            $longest = $length;\n        }\n\
    \    }\n    return $longest ? $strings[$longest] : null;\n}\n", "    $longest\
    \ = array();\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if (array_key_exists($length, $longest)) {\n            if ($longest[$length]\
    \ < $length) {\n                $longest[$length] = $string;\n            } else\
    \ {\n                $longest[$length] = $longest[$longest[$length]];\n      \
    \      }\n        } else {\n            $longest[$length] = $string;\n       \
    \ }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = array();\n    $longestLength = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest ?: null;\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > count($longest)) {\n            $longest = $string;\n    \
    \    } else if ($length == count($longest)) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest : false;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($length > $length) {\n       \
    \     $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "   \
    \ $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n  \
    \      $length = strlen($string);\n        if ($length > $longest) {\n       \
    \     $longest = $length;\n        }\n    }\n    return $longest ? $strings[$longest]\
    \ : null;\n}\n", "    $longest = array();\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > count($longest)) {\n\
    \            $longest = $string;\n        } elseif ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return $longest\
    \ ? $longest : count($strings) ? $strings[0] : null;\n}\n", "    $longest = array();\n\
    \    $longestLength = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your answer, but I\
    \ think it would be better to return `null` instead of an empty string in case\
    \ the list is empty.\n<|/ c |>\n<| c |>\n: Yes, you are right. I was thinking\
    \ about that and I edited my answer.\n<|/ c |>\n<| a tags=php,arrays,string |>\n\
    <code>\n$strings = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\"\
    , \"stu\", \"vwx\", \"yz\");\n$longest = array_reduce($strings, function($a, $b)\
    \ {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n$strings = array(\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\");\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n\
    <|/ a tags=php,arrays,string |>\n<| a tags=php,arrays,string |>\n<code>\n$strings\
    \ = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\"\
    , \"yz\");\n$longest = array_reduce($strings, function($a, $b) {\n    return strlen($a)\
    \ > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,arrays,string\
    \ |>\n<code>\n$strings = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"\
    pqr\", \"stu\", \"vwx\", \"yz\");\n$longest = array_reduce($strings, function($a,\
    \ $b) {\n    return strlen($a) > strlen($b) ? $a : $b;\n});\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n$strings = array(\"abc\", \"def\", \"ghi\", \"\
    jkl\", \"mno\", \"pqr\", \"stu\", \"vwx\", \"yz\");\n$longest = array_reduce($strings,\
    \ function($a, $b) {\n", "    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            if ($longest[$length] < $length) {\n             \
    \   $longest[$length] = $string;\n            }\n        } else {\n          \
    \  $longest[$length] = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $length)\
    \ {\n            $longest = $string;\n            $length = strlen($string);\n\
    \        } elseif (strlen($string) == $length) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $length) {\n        \
    \    $longest = $string;\n            $length = strlen($string);\n        }\n\
    \    }\n    return $longest ?: null;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nI like this solution. Very clean and easy to understand.\n<|/ c\
    \ |>\n<| c |>\nThis solution doesn't work for me. I'm getting this error `Warning:\
    \ array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/test/test.php\
    \ on line 16`\n<|/ c |>\n<| c |>\n: It works for me. Are you sure you copied the\
    \ code correctly? It works for me on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\n\
    : I added a version that works on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\n:\
    \ I added a version that works on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\n$array = array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\n$array = array_unique($array);\n\
    sort($array);\n$array = array_slice($array, 0, 5);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis solution doesn't work for me. I'm getting this error `Warning:\
    \ array_slice() expects parameter 1 to be array, null given in /Applications/MAMP/htdocs/test/test.php\
    \ on line 16`\n<|/ c |>\n<| c |>\n: It works for me. Are you sure you copied the\
    \ code correctly? It works for me on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\n\
    : I added a version that works on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\n:\
    \ I added a version that works on PHP 5.3.10 and 5.4.4.\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work for me. I'm getting this error `Warning: array_slice()\
    \ expects parameter 1 to be array, null given in /Applications/MAMP/htdocs/test/test.php\
    \ on line 16`\n<|/ c |>\n<| a tags=php,arrays,", "    $longest = array();\n  \
    \  $longestLength = 0;\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest ? $longest : false;\n}\n", "    $longest = null;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest ?:\
    \ null;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $strings = array(\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqr\", \"stu\"\
    , \"vwx\", \"yz\");\n$longest = longest($strings);\necho $longest;\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        }\n    }\n    return $longest\
    \ ?: null;\n}\n", "    $longest = array();\n    $longestLength = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest ?: null;\n}\n", "    $longest\
    \ = null;\n    $longestLength = 0;\n    foreach ($strings as $string) {\n    \
    \    $length = strlen($string);\n        if ($length > $longestLength) {\n   \
    \         $longest = $string;\n            $longestLength = $length;\n       \
    \ }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = null;\n    $length = 0;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $length) {\n            $longest = $string;\n            $length = strlen($string);\n\
    \        } elseif (strlen($string) == $length) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > count($longest)) {\n            $longest = $string;\n        } elseif ($length\
    \ == count($longest)) {\n            $longest[] = $string;\n        }\n    }\n\
    \    return count($longest) ? $longest : false;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if (array_key_exists($length, $longest)) {\n   \
    \         if ($length < $longest[$length]) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return count($longest) > 1 ? $longest[0] : $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = array();\n    $longestLength = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n\
    \    $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } elseif ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return count($longest) ? $longest : false;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longest) {\n \
    \           $longest = $length;\n        }\n    }\n    return $longest ? $strings[$longest]\
    \ : null;\n}\n", "    $longest = -1;\n    $longestString = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $longest) {\n       \
    \     $longest = strlen($string);\n            $longestString = $string;\n   \
    \     }\n    }\n    return $longestString;\n}", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    $lengths = [];\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($lengths[$length]\
    \ === null || $lengths[$length] > $length) {\n            $lengths[$length] =\
    \ $string;\n        }\n    }\n    if (count($lengths) === 0) {\n        return\
    \ null;\n    }\n    $longest = array_pop($lengths);\n    foreach ($lengths as\
    \ $length) {\n        if ($longest === $length) {\n            return $longest;\n\
    \        }\n    }\n    return null;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > count($longest)) {\n            $longest = $string;\n        } else if ($length\
    \ == count($longest)) {\n            $longest[] = $string;\n        }\n    }\n\
    \    return count($longest) ? $longest : false;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($length > $length) {\n       \
    \     $longest = $string;\n        }\n    }\n    return $longest;\n}\n", "   \
    \ $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if (isset($longest[$length])) {\n            if ($longest[$length]\
    \ < $length) {\n                $longest[$length] = $string;\n            }\n\
    \        } else {\n            $longest[$length] = $string;\n        }\n    }\n\
    \    return $longest ? $longest[0] : null;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : count($strings)\
    \ ? $strings[0] : null;\n}\n", "    $longest = null;\n    $longestLength = 0;\n\
    \    foreach ($strings as $string) {\n        if (strlen($string) > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = strlen($string);\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $length) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer, but I\
    \ think it would be better to use a `foreach` instead of a `for` loop. Also, you\
    \ should probably use `strlen` instead of `mb_strlen` since `mb_strlen` doesn't\
    \ handle multibyte characters.\n<|/ c |>\n<| c |>\nThanks for your comment. I\
    \ agree with you that `foreach` would be better. I just wanted to show a way to\
    \ do it with loops. I added a note about `mb_strlen`.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it works great. Just one question: why do\
    \ you use \"mb_strlen\" instead of \"strlen\"?\n<|/ c |>\n<| c |>\nBecause `mb_strlen`\
    \ doesn't handle multibyte characters. `strlen` does.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it works great. Just one question: why do\
    \ you use \"mb_strlen\" instead of \"strlen\"?\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$strings = array(\"string1\", \"string2\", \"string3\");\n\
    $longest = longest($strings);\necho \"Longest string: \" . $longest;\n", "   \
    \ $longest = array();\n    $lengths = array();\n    foreach ($strings as $string)\
    \ {\n        $lengths[] = strlen($string);\n    }\n    sort($lengths);\n    foreach\
    \ ($lengths as $length) {\n        if ($length == 1) {\n            $longest[]\
    \ = $strings[0];\n        } else {\n            if ($lengths[$length - 1] == $lengths[$length\
    \ - 2]) {\n                $longest[] = $strings[$length - 1];\n            }\
    \ else {\n                $longest[] = $strings[$length - 1];\n            }\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $lengths\
    \ = [];\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if (!isset($lengths[$length])) {\n            $lengths[$length] = 1;\n\
    \        } else {\n            $lengths[$length] += 1;\n        }\n        if\
    \ ($longest === null || $lengths[$length] > $lengths[$longest]) {\n          \
    \  $longest = $length;\n        }\n    }\n    return $longest === null ? null\
    \ : $strings[$longest];\n}\n", "    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if (empty($longest)\
    \ || $length > strlen($longest[0])) {\n            $longest = array($string);\n\
    \        } else if ($length == strlen($longest[0])) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return empty($longest) ? None : $longest[0];\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       if (strlen($string) > $length) {\n            $longest = $string;\n  \
    \          $length = strlen($string);\n        }\n    }\n    return $longest ?:\
    \ $strings[0];\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       if (strlen($string) > $length) {\n            $longest = $string;\n  \
    \          $length = strlen($string);\n        } elseif (strlen($string) == $length)\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest[0])) {\n            $longest = array($string);\n        }\
    \ else if ($length == strlen($longest[0])) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest[0] : null;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n</code>\n<|/ a tags=php,arrays,string\
    \ |>\n<| c |>\nThis doesn't work if you have multiple strings of the same length\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it out with `$strings = array(\"foo\",\
    \ \"foo\", \"bar\", \"bar\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\"\
    , \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz\", \"baz", "    $longest\
    \ = null;\n    $longestLength = 0;\n    foreach ($strings as $string) {\n    \
    \    $length = strlen($string);\n        if ($length > $longestLength) {\n   \
    \         $longest = $string;\n            $longestLength = $length;\n       \
    \ }\n    }\n    return $longest;\n}\n", "    $longest = array_reduce($strings,\
    \ function ($carry, $item) {\n        return $carry > strlen($item) ? $carry :\
    \ strlen($item);\n    });\n    return $longest === 1 ? $strings[0] : $longest;\n\
    }\n", "    $longest = -1;\n    $longestString = null;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $longest) {\n            $longest\
    \ = strlen($string);\n            $longestString = $string;\n        }\n    }\n\
    \    return $longestString;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } elseif ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : false;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest[0])) {\n            $longest\
    \ = array($string);\n        } else if (strlen($string) == strlen($longest[0]))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return $longest\
    \ ? $longest[0] : null;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $length) {\n            $longest = $string;\n        }\n    }\n    return\
    \ $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string) {\n\
    \        if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \        $longest = $string;\n        }\n    }\n    return $longest;\n}\n", " \
    \   $longest = -1;\n    $longestString = null;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longest) {\n \
    \           $longest = $length;\n            $longestString = $string;\n     \
    \   }\n    }\n    return $longestString;\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if you have multiple strings of the same length. Try\
    \ it with `array('a', 'ab', 'abc', 'abcd')`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I've updated the answer to take that into account.\n<|/ c |>\n<| c\
    \ |>\nThanks, this works great. One thing I noticed is that it returns \"abcd\"\
    \ instead of \"abc\" when there are multiple strings of the same length. Is there\
    \ a way to fix that?\n<|/ c |>\n<| c |>\nYes, just change the line `$longest =\
    \ -1;` to `$longest = 0;`.\n<|/ c |>\n<| c |>\nThanks, that fixed it.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n$array = array('a', 'ab', 'abc', 'abcd');\n$longest\
    \ = -1;\n$longestString = null;\nforeach ($array as $string) {\n    $length =\
    \ strlen($string);\n    if ($length > $longest) {\n        $longest = $length;\n\
    \        $longestString = $string;\n    }\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a dscore=1 |>\n<code>\n$array = array('a', 'ab', 'abc', 'abcd');\n$longest\
    \ = -1;\n$longestString = null;\nforeach ($array as $string) {\n    $length =\
    \ strlen($string);\n    if ($length > $longest) {\n        $longest = $length;\n\
    \        $longestString = $string;\n    }\n}\n</code>\n<|/ a tags=php,arrays |>\n\
    <| a tags=php,arrays |>\n<code>\n$array = array('a', 'ab', 'abc', 'abcd');\n$longest\
    \ = -1;\n$longestString = null;\nforeach ($array as $string) {\n    $length =\
    \ strlen($string);\n    if ($length > $longest) {\n        $longest = $length;\n\
    \        $longestString = $string;\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\n<code>\n$array = array('a', 'ab', 'abc', 'abcd');\n$longest = -1;\n$longestString\
    \ = null;\nforeach ($array as $string) {\n    $length = strlen($string);\n   \
    \ if ($length > $longest) {\n        $longest = $length;", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if (array_key_exists($length, $longest)) {\n            if ($longest[$length]\
    \ < $length) {\n                $longest[$length] = $string;\n            }\n\
    \        } else {\n            $longest[$length] = $string;\n        }\n    }\n\
    \    return $longest ? $longest[0] : null;\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks for your answer. I'm going to try this out and see how it\
    \ goes. I appreciate your help.\n<|/ c |>\n<| c |>\nI added a function that will\
    \ return the longest string in the array (I used the longest function from your\
    \ question).\n<|/ c |>\n<| c |>\nThanks for your help. I appreciate it.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\"\
    ,\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"\
    ,\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_unique($array);\n\
    $array = array_values($array);\n$array = array_filter($array);\n$array = array_count_values($array);\n\
    $array = array_keys($array);\n$array = array_slice($array, 0, count($array)/2);\n\
    $array = array_slice($array, count($array)/2, count($array));\n$array = array_slice($array,\
    \ 0, count($array)/2);\n$array = array_slice($array, count($array)/2, count($array));\n\
    $array = array_slice($array, 0, count($array)/2);\n$array = array_slice($array,\
    \ count($array)/2, count($array));\n$array = array_slice($array, 0, count($array)/2);\n\
    $array = array_slice($array, count($array)/2, count($array));\n$array = array_slice($array,\
    \ 0, count($array)/2);\n$array = array_slice($array, count($array)/2, count($array));\n\
    $array = array_slice($array, 0, count($array)/2);\n$array = array_slice($array,\
    \ count($array)/2, count($array));\n$array = array_slice($array, 0, count($array)/2);\n\
    $array = array_slice($array, count($array)/2, count($array));\n$array = array_slice($array,\
    \ 0, count($array)/2);\n$array = array_slice($array, count($array)/2, ", "   \
    \ $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if (array_key_exists($length, $longest)) {\n     \
    \       if ($length < $longest[$length]) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest ? $longest[0] : null;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($longest === null || $length >\
    \ $longest) {\n            $longest = $length;\n        }\n    }\n    return $longest\
    \ === null ? null : $strings[$longest];\n}", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = array_shift($strings);\n    foreach ($strings as $string) {\n  \
    \      if (strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $length)\
    \ {\n            $longest = $string;\n            $length  = strlen($string);\n\
    \        }\n    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n\
    \    $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            $longest[$length] = $string;\n        } else {\n \
    \           $longest[$length] = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longest) {\n \
    \           $longest = $length;\n        }\n    }\n    return $longest ? $strings[$longest]\
    \ : null;\n}\n", "    $longest = null;\n    foreach ($strings as $string) {\n\
    \        if ($longest === null || strlen($string) > strlen($longest)) {\n    \
    \        $longest = $string;\n        }\n    }\n    return $longest;\n}\n", " \
    \   $longest = array_reduce($strings, function ($carry, $item) {\n        return\
    \ max($carry, strlen($item));\n    });\n    return $longest ? $strings[array_search($longest,\
    \ $strings)] : null;\n}\n", "    $longest = array();\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if (isset($longest[$length]))\
    \ {\n            if ($longest[$length] < $length) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n\
    \    $longestLength = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $longestLength) {\n            $longest\
    \ = $string;\n            $longestLength = $length;\n        }\n    }\n    return\
    \ $longest ?: null;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $lengths = [];\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if (!isset($lengths[$length])) {\n\
    \            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]\
    \ += 1;\n        }\n        if ($longest === null || $lengths[$length] > $longest)\
    \ {\n            $longest = $lengths[$length];\n        }\n    }\n    return $longest\
    \ === 1 ? $strings[0] : $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : false;\n}\n",
  "    $longest = array();\n    $lengths = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 0;\n        }\n        $lengths[$length]\
    \ += 1;\n        if (!isset($longest[$length])) {\n            $longest[$length]\
    \ = $string;\n        }\n    }\n    arsort($lengths);\n    foreach ($lengths as\
    \ $length => $count) {\n        if ($count == 1) {\n            return $longest[$length];\n\
    \        }\n    }\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $length) {\n        \
    \    $longest = $string;\n            $length = strlen($string);\n        }\n\
    \    }\n    return $longest ?: $strings[0];\n}\n", "    $longest = null;\n   \
    \ $length = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest[0])) {\n            $longest = array($string);\n        }\
    \ else if ($length == strlen($longest[0])) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest[0] : null;\n}\n", "    $longest\
    \ = null;\n    $length = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > $longest) {\n\
    \            $longest = $length;\n        }\n    }\n    return $longest === null\
    \ ? null : $strings[$longest];\n}\n", "    $longest = array();\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = array();\n    $longestLength = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest ? $longest : false;\n}", "    $longest\
    \ = array();\n    $longestLength = -1;\n    foreach ($strings as $string) {\n\
    \        $length = strlen($string);\n        if ($length > $longestLength) {\n\
    \            $longest = $string;\n            $longestLength = $length;\n    \
    \    }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array();\n    $longestLength = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longestLength) {\n            $longest = $string;\n     \
    \       $longestLength = $length;\n        }\n    }\n    return $longest ?: null;\n\
    }\n", "    $longest = array();\n    $longestLength = 0;\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        } elseif ($length == $longestLength) {\n            $longest = $string\
    \ . ' ' . $longest;\n        }\n    }\n    return $longest;\n}\n", "    $longest\
    \ = array();\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > count($longest)) {\n            $longest = $string;\n \
    \       } else if ($length == count($longest)) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest : false;\n}\n", "    $longest\
    \ = null;\n    $length = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > $length) {\n            $longest =\
    \ $string;\n        } else if ($length == $length) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $length) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($longest === null || $length >\
    \ $longest) {\n            $longest = $length;\n        }\n    }\n    return $longest\
    \ === null ? null : $strings[$longest];\n}\n", "    $longest = array();\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest ?:\
    \ null;\n}\n", "    $longest = array();\n    $longestLength = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > $longestLength) {\n            $longest = $string;\n            $longestLength\
    \ = $length;\n        }\n    }\n    return $longest ?: null;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if ($longest === null\
    \ || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array();\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if (isset($longest[$length]))\
    \ {\n            if ($longest[$length] < $length) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > count($longest)) {\n            $longest = $string;\n    \
    \    } elseif ($length == count($longest)) {\n            if (strlen($string)\
    \ > strlen($longest)) {\n                $longest = $string;\n            }\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > count($longest)) {\n            $longest = $string;\n        } else if ($length\
    \ == count($longest)) {\n            $longest[] = $string;\n        }\n    }\n\
    \    return count($longest) ? $longest : false;\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > count($longest)) {\n            $longest = $string;\n    \
    \    } elseif ($length == count($longest)) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return count($longest) > 1 ? $longest : null;\n}", "  \
    \  $longest = null;\n    $length = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($longest === null || $length >\
    \ $longest) {\n            $longest = $length;\n        }\n    }\n    return $longest\
    \ === null ? null : $strings[$longest];\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array_reduce($strings, function($carry,\
    \ $item) {\n        return $carry > strlen($item) ? $carry : strlen($item);\n\
    \    });\n    return $longest === 1 ? $strings[0] : $longest;\n}\n", "    $longest\
    \ = null;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if ($longest === null || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n    return $longest;\n}",
  "    $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } elseif ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return count($longest) ? $longest : false;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : false;\n}\n",
  "    $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } elseif ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return count($longest) > 1 ? $longest : reset($longest);\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($longest === null || $length\
    \ > $longest) {\n            $longest = $length;\n        }\n    }\n    return\
    \ $longest === null ? null : $strings[$longest];\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = array();\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        } elseif ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return count($longest)\
    \ ? $longest : false;\n}\n", "    $longest = array();\n    $longestLength = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longestLength) {\n            $longest = $string;\n     \
    \       $longestLength = $length;\n        }\n    }\n    return $longest ?: null;\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : false;\n}\n",
  "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($length\
    \ > strlen($longest[0])) {\n            $longest = array($string);\n        }\
    \ else if ($length == strlen($longest[0])) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest[0] : null;\n}\n", "    $longest\
    \ = null;\n    $length = 0;\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($longest === null || $length > $longest) {\n\
    \            $longest = $length;\n        }\n    }\n    return $longest === null\
    \ ? null : $strings[$longest];\n}\n", "    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = -1;\n    $longestString = null;\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > $longest) {\n            $longest\
    \ = strlen($string);\n            $longestString = $string;\n        }\n    }\n\
    \    return $longestString;\n}\n", "    $longest = null;\n    $length = 0;\n \
    \   foreach ($strings as $string) {\n        $length = strlen($string);\n    \
    \    if ($longest === null || $length > $longest) {\n            $longest = $length;\n\
    \        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return $longest ? $longest : count($strings)\
    \ ? $strings[0] : null;\n}\n", "    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            if ($longest[$length] < $length) {\n             \
    \   $longest[$length] = $string;\n            } else {\n                $longest[$length]\
    \ = $longest[$longest[$length]];\n            }\n        } else {\n          \
    \  $longest[$length] = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = array();\n    $longestLength = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n\
    \    $lengths = [];\n    foreach ($strings as $string) {\n        $length = mb_strlen($string,\
    \ 'UTF-8');\n        if (isset($lengths[$length])) {\n            $lengths[$length]\
    \ = max($lengths[$length], $length);\n        } else {\n            $lengths[$length]\
    \ = $length;\n        }\n    }\n    foreach ($lengths as $length => $count) {\n\
    \        if ($count > 1) {\n            $longest = mb_substr($string, 0, $length,\
    \ 'UTF-8');\n            break;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if (array_key_exists($length, $longest)) {\n     \
    \       $longest[$length] = max($longest[$length], $string);\n        } else {\n\
    \            $longest[$length] = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    $length = 0;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > $length) {\n            $longest = $string;\n\
    \            $length = strlen($string);\n        } elseif (strlen($string) ==\
    \ $length) {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer but i think it would\
    \ be better to return an array instead of an object\n<|/ c |>\n<| c |>\nI agree,\
    \ I've edited my answer to return an array instead. Thanks for pointing that out.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if ($length > count($longest))\
    \ {\n            $longest = $string;\n        } else if ($length == count($longest))\
    \ {\n            $longest[] = $string;\n        }\n    }\n    return $longest\
    \ ? $longest : count($strings) ? $strings[0] : null;\n}", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if (array_key_exists($length, $longest)) {\n            if ($longest[$length]\
    \ < $length) {\n                $longest[$length] = $string;\n            }\n\
    \        } else {\n            $longest[$length] = $string;\n        }\n    }\n\
    \    return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($longest\
    \ === null || $length > $longest) {\n            $longest = $length;\n       \
    \ }\n    }\n    return $longest === null ? null : $strings[$longest];\n}\n", " \
    \   $longest = array();\n    $longestLength = -1;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if (array_key_exists($length, $longest)) {\n            if ($length < $longest[$length])\
    \ {\n                $longest[$length] = $string;\n            }\n        } else\
    \ {\n            $longest[$length] = $string;\n        }\n    }\n    return $longest\
    \ ? $longest[0] : null;\n}\n", "    $longest = array();\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if (isset($longest[$length]))\
    \ {\n            if ($longest[$length] < $length) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest ? $longest[0] : null;\n}\n",
  "    $longest = null;\n    $longestLength = 0;\n    foreach ($strings as $string)\
    \ {\n        $length = strlen($string);\n        if ($length > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = $length;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $length) {\n            $longest = $string;\n        }\n\
    \    }\n    return $longest;\n}\n", "    $longest = array();\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest ?:\
    \ null;\n}\n", "    $longest = null;\n    $lengths = [];\n    foreach ($strings\
    \ as $string) {\n        $length = strlen($string);\n        if (!isset($lengths[$length]))\
    \ {\n            $lengths[$length] = 1;\n        } else {\n            $lengths[$length]++;\n\
    \        }\n        if ($longest === null || $lengths[$length] > $lengths[$longest])\
    \ {\n            $longest = $length;\n        }\n    }\n    return $longest ===\
    \ null ? null : $strings[$longest];\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array();\n    $longestLength = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longestLength) {\n            $longest = $string;\n     \
    \       $longestLength = $length;\n        }\n    }\n    return $longest ?: null;\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if (array_key_exists($length, $longest)) {\n   \
    \         if ($longest[$length] < $length) {\n                $longest[$length]\
    \ = $string;\n            }\n        } else {\n            $longest[$length] =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = array_reduce($strings,\
    \ function ($carry, $string) {\n        return strlen($carry) > strlen($string)\
    \ ? $carry : $string;\n    });\n    return $longest ? $longest : reset($strings);\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if (array_key_exists($length, $longest)) {\n   \
    \         $longest[$length] = $string;\n        } else {\n            $longest[$length]\
    \ = $string;\n        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n\
    \    foreach ($strings as $string) {\n        if ($longest === null || strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\n", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        if (strlen($string) > $length) {\n        \
    \    $longest = $string;\n            $length = strlen($string);\n        }\n\
    \    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n    foreach\
    \ ($strings as $string) {\n        if ($longest === null || strlen($string) >\
    \ strlen($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}\n", "    $longest = array();\n    $longestLength = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $longestLength) {\n            $longest = $string;\n     \
    \       $longestLength = $length;\n        } elseif ($length == $longestLength)\
    \ {\n            $longest = $string . ' ' . $longest;\n        }\n    }\n    return\
    \ $longest ? $longest : false;\n}", "    $longest = null;\n    $length = 0;\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > $length) {\n            $longest = $string;\n        } else\
    \ if ($length == $length) {\n            $longest = $string;\n        }\n    }\n\
    \    return $longest;\n}\n", "    $longest = array();\n    foreach ($strings as\
    \ $string) {\n        $length = strlen($string);\n        if (array_key_exists($length,\
    \ $longest)) {\n            if ($longest[$length] < $length) {\n             \
    \   $longest[$length] = $string;\n            }\n        } else {\n          \
    \  $longest[$length] = $string;\n        }\n    }\n    return $longest;\n}\n",
  "    $longest = array();\n    foreach ($strings as $string) {\n        $length =\
    \ strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } elseif ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return count($longest) > 1 ? $longest : null;\n\
    }", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if ($length > count($longest)) {\n            $longest\
    \ = $string;\n        } else if ($length == count($longest)) {\n            $longest[]\
    \ = $string;\n        }\n    }\n    return count($longest) ? $longest : false;\n\
    }\n", "    $longest = array();\n    foreach ($strings as $string) {\n        $length\
    \ = strlen($string);\n        if (isset($longest[$length])) {\n            if\
    \ ($longest[$length] < $length) {\n                $longest[$length] = $string;\n\
    \            }\n        } else {\n            $longest[$length] = $string;\n \
    \       }\n    }\n    return $longest ? $longest[0] : null;\n}\n", "    if (empty($strings))\
    \ {\n        return;\n    }\n    $longest = array_reduce($strings, function ($carry,\
    \ $string) {\n        return max($carry, strlen($string));\n    });\n    return\
    \ $longest === 1 ? $strings[0] : $longest;\n}\n", "    $longest = array();\n \
    \   foreach ($strings as $string) {\n        $length = strlen($string);\n    \
    \    if ($length > count($longest)) {\n            $longest = $string;\n     \
    \   } else if ($length == count($longest)) {\n            $longest[] = $string;\n\
    \        }\n    }\n    return $longest ? $longest : false;\n}\n", "    $longest\
    \ = null;\n    $length = 0;\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > $length) {\n            $longest = $string;\n            $length = strlen($string);\n\
    \        } elseif (strlen($string) == $length) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = array();\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $longestLength) {\n            $longest = $string;\n  \
    \          $longestLength = $length;\n        }\n    }\n    return $longest;\n\
    }\n", "    $longest = null;\n    foreach ($strings as $string) {\n        if ($longest\
    \ === null || strlen($string) > strlen($longest)) {\n            $longest = $string;\n\
    \        }\n    }\n    return $longest;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n$strings = array(\n\
    \    'string1',\n    'string2',\n    'string3',\n    'string4',\n    'string5',\n\
    \    'string6',\n    'string7',\n    'string8',\n    'string9',\n    'string10',\n\
    \    'string11',\n    'string12',\n    'string13',\n    'string14',\n    'string15',\n\
    \    'string16',\n    'string17',\n    'string18',\n    'string19',\n    'string20',\n\
    \    'string21',\n    'string22',\n    'string23',\n    'string24',\n    'string25',\n\
    \    'string26',\n    'string27',\n    'string28',\n    'string29',\n    'string30',\n\
    \    'string31',\n    'string32',\n    'string33',\n    'string34',\n    'string35',\n\
    \    'string36',\n    'string37',\n    'string38',\n    'string39',\n    'string40',\n\
    \    'string41',\n    'string42',\n    'string43',\n    'string44',\n    'string45',\n\
    \    'string46',\n    'string47',\n    'string48',\n    'string49',\n    'string50',\n\
    \    'string51',\n    'string52',\n    'string53',\n    'string54',\n    'string55',\n\
    \    'string56',\n    'string57',\n    'string58',\n    'string59',\n    'string60',\n\
    \    'string61',\n    'string62',\n    'string63',\n    'string64',\n    'string65',\n\
    \    'string66',\n    'string67',\n    'string68',\n    'string69',\n    'string70',\n\
    \    'string71',\n    'string72',\n    'string73',\n    'string74',\n    'string75',\n\
    \    'string76',\n    'string77',\n    'string78',\n    'string79',\n    'string80',\n\
    \    'string81',\n    'string82',\n    'string83',\n    'string84',\n    'string85',\n\
    \    'string86',\n    'string", "    $longest = null;\n    $length = 0;\n    foreach\
    \ ($strings as $string) {\n        $length = strlen($string);\n        if ($longest\
    \ === null || $length > $longest) {\n            $longest = $length;\n       \
    \ }\n    }\n    return $longest ? $strings[$longest] : null;\n}\n", "    $longest\
    \ = array();\n    $longestLength = 0;\n    foreach ($strings as $string) {\n \
    \       $length = strlen($string);\n        if ($length > $longestLength) {\n\
    \            $longest = $string;\n            $longestLength = $length;\n    \
    \    }\n    }\n    return $longest ?: null;\n}\n", "    $longest = array();\n\
    \    foreach ($strings as $string) {\n        $length = strlen($string);\n   \
    \     if ($length > count($longest)) {\n            $longest = $string;\n    \
    \    } else if ($length < count($longest)) {\n            $longest = array();\n\
    \        }\n    }\n    return $longest ? $longest : false;\n}\n", "    $longest\
    \ = null;\n    $longestLength = 0;\n    foreach ($strings as $string) {\n    \
    \    $length = strlen($string);\n        if ($length > $longestLength) {\n   \
    \         $longest = $string;\n            $longestLength = $length;\n       \
    \ }\n    }\n    return $longest ?: null;\n}\n", "    $longest = null;\n    $length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($longest === null || $length > $longest) {\n            $longest\
    \ = $length;\n        }\n    }\n    return $longest === null ? null : $strings[$longest];\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
