language: php
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        throw new Exception('Invalid parenthesis string');\n\
    \      }\n      if ($max_level > $max_level_paren) {\n        $max_level_paren\
    \ = $max_level;\n      }\n    }\n  }\n  return $max_level_paren;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ajihdth.php:30\n\
    Stack trace:\n#0 /tmp/tmp3ajihdth.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3ajihdth.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \ } else if ($paren == ')') {\n      $paren_stack = array_pop($paren_stack);\n\
    \    } else {\n      $paren_stack[] = $paren;\n    }\n    if ($paren_stack) {\n\
    \      $level++;\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnoakl8pi.php:28\n\
    Stack trace:\n#0 /tmp/tmpnoakl8pi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnoakl8pi.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ $paren_stack[0][] = $paren_string;\n  while ($paren_stack) {\n    $level++;\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_stack = array();\n \
    \   foreach (explode(' ', $paren_string) as $paren) {\n      if ($paren == '(')\
    \ {\n        $paren_stack[] = array();\n        $paren_stack[0][] = $paren;\n\
    \      } else if ($paren == ')') {\n        $paren_string = implode('', $paren_stack);\n\
    \        $paren_stack = array();\n      }\n    }\n  }\n  return $level;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpwhdt9ax9.php\
    \ on line 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwhdt9ax9.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhdt9ax9.php:32\n\
    Stack trace:\n#0 /tmp/tmpwhdt9ax9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwhdt9ax9.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === \"(\") {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === \")\") {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ght2c96.php:24\n\
    Stack trace:\n#0 /tmp/tmp9ght2c96.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9ght2c96.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytxtkyzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpytxtkyzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpytxtkyzx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        break;\n      }\n    }\n    if ($max_level >\
    \ $max_level_parens) {\n      $max_level_parens = $max_level;\n    }\n  }\n  return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ngx0glu.php:30\n\
    Stack trace:\n#0 /tmp/tmp4ngx0glu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4ngx0glu.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } elseif ($max_level > 0) {\n   \
    \         $max_level_parens .= $paren;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n0knn6s.php:29\n\
    Stack trace:\n#0 /tmp/tmp8n0knn6s.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8n0knn6s.php\
    \ on line 29\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $level++;\n      $paren_stack[$level][] = array();\n    } else if ($char\
    \ == ')') {\n      $level--;\n      $paren_stack[$level] = array_pop($paren_stack[$level]);\n\
    \    } else if ($char == ' ') {\n      $level = 0;\n    }\n  }\n  return $paren_stack;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp858mlk5o.php:28\n\
    Stack trace:\n#0 /tmp/tmp858mlk5o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp858mlk5o.php\
    \ on line 28\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count_max = array();\n  $paren_levels_count_max[0]\
    \ = 0;\n  $paren_levels_count_max[1] = 0;\n  $paren_levels_count_max[2] = 0;\n\
    \  foreach ($paren_array as $paren_string) {\n    $paren_levels[] = array();\n\
    \    $paren_levels_count[] = 0;\n    $paren_levels_count_max[0] = 0;\n    $paren_levels_count_max[1]\
    \ = 0;\n    $paren_levels_count_max[2] = 0;\n    $paren_levels_count_max[0]++;\n\
    \    $paren_levels_count_max[1]++;\n    $paren_levels_count_max[2]++;\n    $paren_levels[count($paren_levels)\
    \ - 1][] = str_replace(array('(', ')'), '', $paren_string);\n  }\n  $paren_levels_count\
    \ = array_count_values($paren_levels_count);\n  foreach ($paren_levels_count as\
    \ $key => $value) {\n    if ($value == 1) {\n      $paren_levels_count_max[$key]\
    \ = $value;\n    }\n  }\n  foreach ($paren_levels as $key => $value) {\n    if\
    \ ($paren_levels_count_max[$key] == 0) {\n      $paren_levels[$key] = array();\n\
    \    }\n  }\n  foreach ($paren_levels as $key => $value) {\n    $paren_levels[$key]\
    \ = array_reverse($value);\n  }\n  return $paren_levels;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ygg1bvz.php:46\n\
    Stack trace:\n#0 /tmp/tmp6ygg1bvz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6ygg1bvz.php\
    \ on line 46\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  for ($i = 0; $i < $paren_array_length; $i++) {\n    $level\
    \ = 0;\n    for ($j = 0; $j < $i; $j++) {\n      if ($paren_array[$j] === '(')\
    \ {\n        $level++;\n      } else if ($paren_array[$j] === ')') {\n       \
    \ $level--;\n      }\n    }\n    if ($level > $max_level) {\n      $max_level\
    \ = $level;\n    }\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgpnwsvsu.php:30\n\
    Stack trace:\n#0 /tmp/tmpgpnwsvsu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgpnwsvsu.php\
    \ on line 30\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5scj8jtd.php:27\n\
    Stack trace:\n#0 /tmp/tmp5scj8jtd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5scj8jtd.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_stack = array();\n  $paren_stack_count = array();\n  $paren_stack_count[0]\
    \ = 0;\n  $paren_stack[0] = '';\n  foreach (explode(' ', $paren_string) as $char)\
    \ {\n    if ($char == '(') {\n      $paren_stack_count[$paren_stack_count[0]]\
    \ = $paren_stack_count[$paren_stack_count[0]] + 1;\n      $paren_stack[$paren_stack_count[0]]\
    \ = $paren_stack[$paren_stack_count[0]] . $char;\n    } else if ($char == ')')\
    \ {\n      $paren_stack_count[$paren_stack_count[0]] = $paren_stack_count[$paren_stack_count[0]]\
    \ - 1;\n      if ($paren_stack_count[$paren_stack_count[0]] == 0) {\n        $paren_stack[$paren_stack_count[0]]\
    \ = $paren_stack[$paren_stack_count[0]] . $char;\n      }\n    }\n  }\n  return\
    \ $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqh3g7erd.php:29\n\
    Stack trace:\n#0 /tmp/tmpqh3g7erd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqh3g7erd.php\
    \ on line 29\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren = '';\n  for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n      if\
    \ ($max_level > $max_level_paren) {\n        $max_level_paren = $max_level;\n\
    \      }\n    } else if ($paren_array[$i] === ')') {\n      $max_level--;\n  \
    \  }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbua4mpz.php:28\n\
    Stack trace:\n#0 /tmp/tmpmbua4mpz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmbua4mpz.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ === '(') {\n            $max_level++;\n            $max_level_paren_array[$i]\
    \ = $max_level;\n        } elseif ($paren_array[$i] === ')') {\n            $max_level--;\n\
    \        }\n    }\n    for ($i = 0; $i < $paren_array_length; $i++) {\n      \
    \  if ($paren_array[$i] === '(') {\n            $paren_array[$i] = $max_level_paren_array[$i];\n\
    \        }\n    }\n    return implode(' ', $paren_array);\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyibkz2w.php:31\n\
    Stack trace:\n#0 /tmp/tmpgyibkz2w.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgyibkz2w.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        throw new Exception('Invalid parenthesis string\
    \ provided');\n      }\n      if ($max_level > $max_level_paren) {\n        $max_level_paren\
    \ = $max_level;\n      }\n    }\n  }\n  return $max_level_paren;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4rf1b90.php:30\n\
    Stack trace:\n#0 /tmp/tmpe4rf1b90.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe4rf1b90.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyxeuh2o.php:24\n\
    Stack trace:\n#0 /tmp/tmplyxeuh2o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplyxeuh2o.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren_array\
    \ = [];\n  foreach ($paren_array as $paren_string) {\n    $paren_array = explode(')',\
    \ $paren_string);\n    $level = 0;\n    foreach ($paren_array as $paren_string)\
    \ {\n      $paren_array = explode('(', $paren_string);\n      $level++;\n    }\n\
    \    if ($level > $max_level) {\n      $max_level = $level;\n      $max_level_paren_array\
    \ = $paren_array;\n    }\n  }\n  return $max_level_paren_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp507yms5u.php:29\n\
    Stack trace:\n#0 /tmp/tmp507yms5u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp507yms5u.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    } elseif ($paren == ')') {\n      $level--;\n    }\n  }\n  return\
    \ $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7y7mrrx.php:27\n\
    Stack trace:\n#0 /tmp/tmp_7y7mrrx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp_7y7mrrx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == '(') {\n            $max_level++;\n        } else if ($level == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0n69zkk.php:27\n\
    Stack trace:\n#0 /tmp/tmpm0n69zkk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm0n69zkk.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq33qmpib.php:27\n\
    Stack trace:\n#0 /tmp/tmpq33qmpib.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq33qmpib.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    $paren_levels_count_max = array();\n\
    \    foreach ($paren_array as $paren_string) {\n        $paren_levels[] = $paren_string;\n\
    \        $paren_levels_count[] = substr_count($paren_string, '(');\n        $paren_levels_count_max[]\
    \ = max($paren_levels_count_max);\n    }\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_array);\n    $paren_levels_count_max[]\
    \ = count($paren_array);\n    $paren_levels_count_max[] = count($paren_array);\n\
    \    $paren_levels_count_max[] = count($paren_\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpggj2mbtu.php on line 41

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $paren_array_length\
    \ = count($paren_array);\n  for ($i = 0; $i < $paren_array_length; $i++) {\n \
    \   if ($paren_array[$i] === '(') {\n      $level++;\n    } else if ($paren_array[$i]\
    \ === ')') {\n      $level--;\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8ck9lhj.php:24\n\
    Stack trace:\n#0 /tmp/tmpg8ck9lhj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg8ck9lhj.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  $paren_stack = array();\n  foreach ($paren_array as $paren) {\n    if\
    \ ($paren == '(') {\n      $level++;\n      $paren_stack[] = $level;\n    } elseif\
    \ ($paren == ')') {\n      $level--;\n      if ($level < 0) {\n        throw new\
    \ Exception('Unbalanced parenthesis');\n      }\n      $paren_stack[] = $level;\n\
    \    } else {\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    }\n  }\n  $max_level++;\n  $paren_stack[] = $max_level;\n  $paren_stack\
    \ = array_reverse($paren_stack);\n  $output_string = '';\n  foreach ($paren_stack\
    \ as $level) {\n    if ($level > 0) {\n      $output_string .= ' (';\n    }\n\
    \    for ($i = 0; $i < $level; $i++) {\n      $output_string .= ')';\n    }\n\
    \  }\n  return $output_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wexk9eu.php:46\n\
    Stack trace:\n#0 /tmp/tmp0wexk9eu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0wexk9eu.php\
    \ on line 46\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_level = 0;\n  $paren_max_level\
    \ = 0;\n  foreach ($paren_array as $paren_string) {\n    if ($paren_string ==\
    \ '(') {\n      $paren_level++;\n      if ($paren_level > $paren_max_level) {\n\
    \        $paren_max_level = $paren_level;\n      }\n    } else if ($paren_string\
    \ == ')') {\n      $paren_level--;\n    }\n  }\n  return $paren_max_level;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d_xwfq_.php:27\n\
    Stack trace:\n#0 /tmp/tmp3d_xwfq_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3d_xwfq_.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n    }\n    if ($level\
    \ > $max_level) {\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2knk0xks.php:27\n\
    Stack trace:\n#0 /tmp/tmp2knk0xks.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2knk0xks.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_level = 0;\n  $paren_array_deepest_level = 0;\n  foreach ($paren_array\
    \ as $paren_string) {\n    if ($paren_array_level == 0) {\n      $paren_array_level++;\n\
    \    }\n    if ($paren_array_level > $paren_array_deepest_level) {\n      $paren_array_deepest_level\
    \ = $paren_array_level;\n    }\n    if ($paren_array_level == $paren_array_deepest_level)\
    \ {\n      $paren_array_level++;\n    }\n  }\n  return $paren_array_deepest_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxv3ipsaf.php:29\n\
    Stack trace:\n#0 /tmp/tmpxv3ipsaf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxv3ipsaf.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \   $level++;\n    } else if ($paren == ')') {\n      $paren = array_pop($paren_stack);\n\
    \      $level--;\n      if ($level < 0) {\n        throw new Exception('Unbalanced\
    \ parenthesis');\n      }\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptngscy9k.php:28\n\
    Stack trace:\n#0 /tmp/tmptngscy9k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptngscy9k.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    }\n    if ($paren == ')') {\n      $max_level--;\n    }\n\
    \    if ($max_level > $max_level_array[0]) {\n      $max_level_array[0] = $max_level;\n\
    \    }\n  }\n  return $max_level_array[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnayeuen.php:28\n\
    Stack trace:\n#0 /tmp/tmpjnayeuen.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjnayeuen.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count_max = array();\n  $paren_levels_count_max[0]\
    \ = 0;\n  $paren_levels_count_max[1] = 0;\n  $paren_levels_count_max[2] = 0;\n\
    \  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n      $paren_levels[]\
    \ = 1;\n      $paren_levels_count[] = 1;\n      $paren_levels_count_max[1]++;\n\
    \    } else if ($paren == ')') {\n      $paren_levels[] = $paren_levels[count($paren_levels)\
    \ - 1];\n      $paren_levels_count[] = $paren_levels_count[count($paren_levels)\
    \ - 1];\n      $paren_levels_count_max[max($paren_levels_count_max)]++;\n    }\n\
    \  }\n  $paren_levels_count_max[max($paren_levels_count_max)] = max($paren_levels_count_max);\n\
    \  foreach ($paren_levels_count_max as $i => $level) {\n    if ($level == 1) {\n\
    \      $paren_levels_count_max[$i] = $paren_levels_count_max[$i] - 1;\n    }\n\
    \  }\n  foreach ($paren_levels_count_max as $i => $level) {\n    if ($level >\
    \ 1) {\n      $paren_levels_count_max[$i] = $paren_levels_count_max[$i] - 1;\n\
    \    }\n  }\n  return $paren_levels_count_max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5pfqiix.php:43\n\
    Stack trace:\n#0 /tmp/tmpa5pfqiix.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpa5pfqiix.php\
    \ on line 43\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren_group) {\n    $paren_group_array =\
    \ explode(')', $paren_group);\n    $current_level = 0;\n    foreach ($paren_group_array\
    \ as $paren_group_element) {\n      if ($paren_group_element == '(') {\n     \
    \   $current_level++;\n      } else if ($paren_group_element == ')') {\n     \
    \   $current_level--;\n      }\n      if ($current_level > $max_level) {\n   \
    \     $max_level = $current_level;\n        $max_level_array = $paren_group_array;\n\
    \      }\n    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps25nn5un.php:32\n\
    Stack trace:\n#0 /tmp/tmps25nn5un.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps25nn5un.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_string = '';\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    $level = 0;\n    $paren_string = $paren_array[$i];\n    for ($j\
    \ = 0; $j < strlen($paren_string); $j++) {\n      if ($paren_string[$j] == '(')\
    \ {\n        $level++;\n      } else if ($paren_string[$j] == ')') {\n       \
    \ $level--;\n      }\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \        $max_level_paren_string = $paren_string;\n      }\n    }\n  }\n  return\
    \ $max_level_paren_string;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8adpk4_n.php:33\n\
    Stack trace:\n#0 /tmp/tmp8adpk4_n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8adpk4_n.php\
    \ on line 33\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_array = [];\n  \
    \  for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ === '(') {\n            $max_level++;\n            $max_level_array[$i] = $max_level;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \           $max_level_array[$i] = $max_level;\n        }\n    }\n    $max_level_array_length\
    \ = count($max_level_array);\n    for ($i = 0; $i < $max_level_array_length; $i++)\
    \ {\n        if ($max_level_array[$i] === 0) {\n            return $i;\n     \
    \   }\n    }\n    return -1;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_3pv44p.php:33\n\
    Stack trace:\n#0 /tmp/tmpv_3pv44p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv_3pv44p.php\
    \ on line 33\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n \
    \     if ($max_level < 0) {\n        return $max_level_parens;\n      }\n    }\n\
    \    $max_level_parens[] = $max_level;\n  }\n  return $max_level_parens;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrpp7vx7.php:28\n\
    Stack trace:\n#0 /tmp/tmpgrpp7vx7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgrpp7vx7.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n      $paren_levels[$level] = $level;\n    }\n    if ($paren\
    \ == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n    }\n \
    \ }\n  $max_level = max($paren_levels);\n  foreach ($paren_levels as $level =>\
    \ $paren_level) {\n    if ($paren_level == $max_level) {\n      return $level;\n\
    \    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpjivc6i69.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjivc6i69.php:33\n\
    Stack trace:\n#0 /tmp/tmpjivc6i69.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjivc6i69.php\
    \ on line 33\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = -1;\n  $paren_stack_string\
    \ = array();\n  $paren_stack_string[] = '';\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $level++;\n      $paren_stack_string[]\
    \ = $char;\n      $paren_stack[] = $level;\n    } else if ($char == ')') {\n \
    \     $level--;\n      $paren_stack_string[] = $char;\n      $paren_stack[] =\
    \ $level;\n    }\n  }\n  $paren_stack_string = array_reverse($paren_stack_string);\n\
    \  $paren_stack_string = array_map(function ($char) {\n    return str_repeat($char,\
    \ $level);\n  }, $paren_stack_string);\n  $paren_stack_string = implode('', $paren_stack_string);\n\
    \  return $paren_stack_string;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_simu5y.php:35\n\
    Stack trace:\n#0 /tmp/tmpt_simu5y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpt_simu5y.php\
    \ on line 35\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        if ($max_level > $max_level_parens) {\n  \
    \          $max_level_parens = $max_level;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r36eq2y.php:27\n\
    Stack trace:\n#0 /tmp/tmp2r36eq2y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2r36eq2y.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ $paren_stack[0][] = $paren_string;\n  while ($paren_stack) {\n    $level++;\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_stack = array();\n \
    \   foreach (explode(' ', $paren_string) as $paren) {\n      if ($paren == '(')\
    \ {\n        $paren_stack[] = array();\n        $paren_stack[0][] = $paren;\n\
    \      } else if ($paren == ')') {\n        $paren_string = implode('', $paren_stack);\n\
    \        $paren_stack = array();\n      }\n    }\n  }\n  return $level;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: explode() expects parameter 2 to be string, array given in /tmp/tmpwhdt9ax9.php\
    \ on line 14\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpwhdt9ax9.php\
    \ on line 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhdt9ax9.php:32\n\
    Stack trace:\n#0 /tmp/tmpwhdt9ax9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwhdt9ax9.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren_array\
    \ = [];\n  foreach ($paren_array as $paren_item) {\n    if ($paren_item == '(')\
    \ {\n      $max_level++;\n      $max_level_paren_array[] = $paren_item;\n    }\n\
    \    if ($paren_item == ')') {\n      $max_level--;\n      if ($max_level < 0)\
    \ {\n        throw new Exception('Too many closing parentheses.');\n      }\n\
    \      $max_level_paren_array[] = $paren_item;\n    }\n  }\n  return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxxha1s7.php:30\n\
    Stack trace:\n#0 /tmp/tmpbxxha1s7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbxxha1s7.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n    }\n    if ($level\
    \ > $max_level) {\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2knk0xks.php:27\n\
    Stack trace:\n#0 /tmp/tmp2knk0xks.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2knk0xks.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $paren_levels_count = array();\n  $paren_levels_count_max = array();\n  foreach\
    \ ($paren_array as $paren_string) {\n    $paren_levels[] = $paren_string;\n  \
    \  $paren_levels_count[] = substr_count($paren_string, '(');\n    $paren_levels_count_max[]\
    \ = max($paren_levels_count);\n  }\n  $max_level = max($paren_levels_count);\n\
    \  $paren_levels_count = array_fill(0, $max_level, $max_level);\n  $paren_levels_count_max\
    \ = array_fill(0, $max_level, $max_level);\n  foreach ($paren_array as $paren_string)\
    \ {\n    $paren_levels_count[$paren_levels_count_max[$paren_string]] += substr_count($paren_string,\
    \ '(');\n    $paren_levels_count_max[$paren_string] = max($paren_levels_count_max[$paren_string]);\n\
    \  }\n  $paren_levels_count_max = array_values($paren_levels_count_max);\n  $paren_levels_count\
    \ = array_values($paren_levels_count);\n  return $paren_levels_count;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): When only one parameter is given, it must be an array\
    \ in /tmp/tmp4gt_3qw2.php on line 20\n\nWarning: max(): When only one parameter\
    \ is given, it must be an array in /tmp/tmp4gt_3qw2.php on line 20\n\nWarning:\
    \ max(): When only one parameter is given, it must be an array in /tmp/tmp4gt_3qw2.php\
    \ on line 20\n\nWarning: max(): When only one parameter is given, it must be an\
    \ array in /tmp/tmp4gt_3qw2.php on line 20\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4gt_3qw2.php:32\nStack trace:\n#0 /tmp/tmp4gt_3qw2.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4gt_3qw2.php on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] === '(') {\n                $level++;\n          \
    \  } elseif ($paren_array[$j] === ')') {\n                $level--;\n        \
    \    }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl7elx360.php:30\n\
    Stack trace:\n#0 /tmp/tmpl7elx360.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl7elx360.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        if ($max_level > $max_level_parens) {\n  \
    \          $max_level_parens = $max_level;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r36eq2y.php:27\n\
    Stack trace:\n#0 /tmp/tmp2r36eq2y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2r36eq2y.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        break;\n      }\n      if ($max_level > $max_level_paren)\
    \ {\n        $max_level_paren = $max_level;\n      }\n    }\n  }\n  return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc33yhd0u.php:30\n\
    Stack trace:\n#0 /tmp/tmpc33yhd0u.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc33yhd0u.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_string = preg_replace('/\\s+/', ' ', $paren_string);\n\
    \  foreach (explode(' ', $paren_string) as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n    } else if ($paren == ')') {\n      $level--;\n    }\n  }\n\
    \  return $level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2i6os8y.php:23\n\
    Stack trace:\n#0 /tmp/tmpf2i6os8y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf2i6os8y.php\
    \ on line 23\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ $paren_stack = array_reverse($paren_stack);\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $level++;\n      $paren_stack[]\
    \ = array();\n      $paren_stack = array_reverse($paren_stack);\n    } elseif\
    \ ($char == ')') {\n      $level--;\n      $paren_stack = array_reverse($paren_stack);\n\
    \    }\n    if ($level > 0) {\n      $paren_stack = array_reverse($paren_stack);\n\
    \    }\n  }\n  return $paren_stack;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84aert_y.php:31\n\
    Stack trace:\n#0 /tmp/tmp84aert_y.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp84aert_y.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyxeuh2o.php:24\n\
    Stack trace:\n#0 /tmp/tmplyxeuh2o.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplyxeuh2o.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        $level\
    \ = 0;\n        $paren_array = explode(')', $paren);\n        foreach ($paren_array\
    \ as $paren_item) {\n            $paren_array = explode('(', $paren_item);\n \
    \           $level++;\n        }\n        if ($level > $max_level) {\n       \
    \     $max_level = $level;\n            $max_level_parens = $paren;\n        }\n\
    \    }\n    return $max_level_parens;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdtnt3mbl.php:29\n\
    Stack trace:\n#0 /tmp/tmpdtnt3mbl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdtnt3mbl.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = -1;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqyfpq39.php:30\n\
    Stack trace:\n#0 /tmp/tmpvqyfpq39.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvqyfpq39.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ $paren_stack[0][] = $paren_string;\n  while ($paren_stack) {\n    $level++;\n\
    \    $paren_string = $paren_stack[count($paren_stack) - 1][count($paren_stack[count($paren_stack)\
    \ - 1]) - 1];\n    $paren_stack = array_pop($paren_stack);\n    if ($paren_string\
    \ == ')') {\n      $level--;\n    }\n    if ($level > 0) {\n      $paren_stack[]\
    \ = array();\n      $paren_stack[0][] = $paren_string;\n    }\n  }\n  return $level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: [] operator not supported for strings in\
    \ /tmp/tmpxlv7tauj.php:19\nStack trace:\n#0 /tmp/tmpxlv7tauj.php(26): parse_nested_parens('(()())\
    \ ((())) (...')\n#1 /tmp/tmpxlv7tauj.php(30): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpxlv7tauj.php(35): test()\n#3 {main}\n  thrown in /tmp/tmpxlv7tauj.php\
    \ on line 19\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        return $max_level_paren;\n      }\n    }\n  \
    \  $max_level_paren .= $paren;\n  }\n  return $max_level_paren;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwm4i3a6.php:28\n\
    Stack trace:\n#0 /tmp/tmptwm4i3a6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptwm4i3a6.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$level][] = array();\n      $level++;\n    } else if ($char\
    \ == ')') {\n      $level--;\n      if ($level == 0) {\n        $paren_stack[$level][]\
    \ = array();\n      }\n    } else {\n      $paren_stack[$level][] = $char;\n \
    \   }\n  }\n  $paren_stack[$level] = array();\n  return $paren_stack;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgw8v1ppf.php:31\n\
    Stack trace:\n#0 /tmp/tmpgw8v1ppf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgw8v1ppf.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_paren = -1;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == \"(\") {\n            $max_level++;\n        } else if ($paren ==\
    \ \")\") {\n            $max_level--;\n            if ($max_level < 0) {\n   \
    \             return -1;\n            }\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnchkjd4x.php:30\n\
    Stack trace:\n#0 /tmp/tmpnchkjd4x.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnchkjd4x.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n      if ($max_level > $max_level_paren) {\n        $max_level_paren\
    \ = $max_level;\n      }\n    } else if ($paren == ')') {\n      $max_level--;\n\
    \    }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj84gsilg.php:27\n\
    Stack trace:\n#0 /tmp/tmpj84gsilg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj84gsilg.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq33qmpib.php:27\n\
    Stack trace:\n#0 /tmp/tmpq33qmpib.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq33qmpib.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_paren = \"\";\n    foreach ($paren_array as $paren) {\n      \
    \  if ($paren == \"(\") {\n            $max_level++;\n        } else if ($paren\
    \ == \")\") {\n            $max_level--;\n        }\n        if ($max_level >\
    \ $max_level_paren) {\n            $max_level_paren = $max_level;\n        }\n\
    \    }\n    return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodatwn0_.php:27\n\
    Stack trace:\n#0 /tmp/tmpodatwn0_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpodatwn0_.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_level = 0;\n\
    \    $paren_stack = array();\n    foreach ($paren_array as $paren) {\n       \
    \ if ($paren == '(') {\n            $paren_level++;\n        } else if ($paren\
    \ == ')') {\n            $paren_level--;\n        }\n        if ($paren_level\
    \ == 0 && count($paren_stack) > 0) {\n            $paren_stack[count($paren_stack)\
    \ - 1]++;\n        } else {\n            $paren_stack[] = 0;\n        }\n    }\n\
    \    return $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77ha5r0k.php:29\n\
    Stack trace:\n#0 /tmp/tmp77ha5r0k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp77ha5r0k.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_lk9ihv.php:27\n\
    Stack trace:\n#0 /tmp/tmpk_lk9ihv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk_lk9ihv.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n      $max_level_array[] = $max_level;\n    }\n    if ($paren\
    \ == ')') {\n      $max_level--;\n      $max_level_array[] = $max_level;\n   \
    \ }\n  }\n  $max_level_array = array_reverse($max_level_array);\n  $max_level_array_length\
    \ = count($max_level_array);\n  for ($i = 0; $i < $max_level_array_length; $i++)\
    \ {\n    if ($max_level_array[$i] == 0) {\n      return $i;\n    }\n  }\n  return\
    \ -1;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i9z_6ei.php:34\n\
    Stack trace:\n#0 /tmp/tmp0i9z_6ei.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0i9z_6ei.php\
    \ on line 34\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $paren_stack[] = $char;\n    } else\
    \ if ($char == ')') {\n      $level--;\n      if ($level == 0) {\n        $paren_stack\
    \ = array_reverse($paren_stack);\n        break;\n      }\n    }\n  }\n  return\
    \ $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5p5ghat.php:27\n\
    Stack trace:\n#0 /tmp/tmpq5p5ghat.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq5p5ghat.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_array = [];\n    foreach ($paren_array as $level) {\n        if\
    \ ($level == '(') {\n            $max_level++;\n        } else if ($level == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array = $max_level;\n        }\n    }\n    return\
    \ $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0n69zkk.php:27\n\
    Stack trace:\n#0 /tmp/tmpm0n69zkk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpm0n69zkk.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } elseif ($max_level > 0) {\n   \
    \         $max_level_parens .= $paren;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n0knn6s.php:29\n\
    Stack trace:\n#0 /tmp/tmp8n0knn6s.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8n0knn6s.php\
    \ on line 29\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n        break;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hnr5ph9.php:28\n\
    Stack trace:\n#0 /tmp/tmp6hnr5ph9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6hnr5ph9.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        throw new Exception('Maximum level of nesting\
    \ exceeded');\n      }\n      if ($max_level_array[$max_level] == 0) {\n     \
    \   $max_level_array[$max_level] = 1;\n      } else {\n        $max_level_array[$max_level]++;\n\
    \      }\n    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v_oxi93.php:32\n\
    Stack trace:\n#0 /tmp/tmp4v_oxi93.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4v_oxi93.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $max_level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n      if ($level > $max_level) {\n        $max_level = $level;\n\
    \      }\n    } else if ($paren == ')') {\n      $level--;\n    }\n  }\n  return\
    \ $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1m4k8dm.php:27\n\
    Stack trace:\n#0 /tmp/tmpl1m4k8dm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl1m4k8dm.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === '(') {\n            $max_level++;\n        } else if ($paren_array[$i] ===\
    \ ')') {\n            $max_level--;\n        }\n    }\n    return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt70cafab.php:25\n\
    Stack trace:\n#0 /tmp/tmpt70cafab.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpt70cafab.php\
    \ on line 25\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $nested_parens = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n    }\n    if ($level > 0) {\n      $nested_parens[]\
    \ = $level;\n    }\n  }\n  return $nested_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeg4rsdmr.php:26\n\
    Stack trace:\n#0 /tmp/tmpeg4rsdmr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpeg4rsdmr.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $level = 0;\n    $paren_stack = array();\n    $paren_stack[] = array();\n\
    \    $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[] = array();\n \
    \   $paren_stack[] = array();\n    $paren_stack[] = array();\n    $paren_stack[]\
    \ = array();\n    $paren_stack[] = array();\n    $paren_stack[]\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8o7prful.php on line 64

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8r26m57.php:24\n\
    Stack trace:\n#0 /tmp/tmpr8r26m57.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpr8r26m57.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n    }\n    if ($level\
    \ > $max_level) {\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2knk0xks.php:27\n\
    Stack trace:\n#0 /tmp/tmp2knk0xks.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2knk0xks.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    }\n    if ($paren == ')') {\n      $max_level--;\n    }\n\
    \    if ($max_level > $max_level_parens) {\n      $max_level_parens = $max_level;\n\
    \    }\n  }\n  return $max_level_parens;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_1g2m5o.php:28\n\
    Stack trace:\n#0 /tmp/tmpz_1g2m5o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpz_1g2m5o.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n      $paren_levels[$level] = $level;\n    } elseif ($paren\
    \ == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n    }\n \
    \ }\n  $max_level = max($paren_levels);\n  foreach ($paren_levels as $level =>\
    \ $paren_level) {\n    if ($paren_level == $max_level) {\n      return $level;\n\
    \    }\n  }\n  return -1;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: max(): Array must contain at least one element in /tmp/tmpg1awimez.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1awimez.php:32\n\
    Stack trace:\n#0 /tmp/tmpg1awimez.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg1awimez.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren_array = [];\n    foreach ($paren_array as $paren_item) {\n\
    \        if ($paren_item == '(') {\n            $max_level++;\n            $max_level_paren_array[$max_level]\
    \ = $paren_item;\n        } elseif ($paren_item == ')') {\n            $max_level--;\n\
    \            if ($max_level < 0) {\n                return false;\n          \
    \  }\n            $max_level_paren_array[$max_level] = $paren_item;\n        }\n\
    \    }\n    $max_level_paren_array[$max_level] = $paren_array[$max_level];\n \
    \   return $max_level_paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6d4ucw5.php:30\n\
    Stack trace:\n#0 /tmp/tmph6d4ucw5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph6d4ucw5.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8r26m57.php:24\n\
    Stack trace:\n#0 /tmp/tmpr8r26m57.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpr8r26m57.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_array = [];\n  for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n    $paren_array[$i] = trim($paren_array[$i]);\n    if ($paren_array[$i]\
    \ === '(') {\n      $max_level++;\n      $max_level_paren_array[$i] = $max_level;\n\
    \    }\n    if ($paren_array[$i] === ')') {\n      $max_level--;\n    }\n  }\n\
    \  $max_level_paren_array_count = count($max_level_paren_array);\n  for ($i =\
    \ 0; $i < $max_level_paren_array_count; $i++) {\n    $max_level = $max_level_paren_array[$i];\n\
    \  }\n  return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pr93dmr.php:32\n\
    Stack trace:\n#0 /tmp/tmp_pr93dmr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_pr93dmr.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        throw new Exception('Invalid parenthesis string');\n\
    \      }\n      if ($max_level == 0) {\n        $max_level_paren = $paren;\n \
    \     }\n    }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoc5cd31v.php:30\n\
    Stack trace:\n#0 /tmp/tmpoc5cd31v.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpoc5cd31v.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren_array = [];\n    foreach ($paren_array as $paren) {\n    \
    \    if ($paren == '(') {\n            $max_level++;\n            $max_level_paren_array[]\
    \ = $paren;\n        } elseif ($paren == ')') {\n            $max_level--;\n \
    \           $max_level_paren_array[] = $paren;\n        }\n    }\n    return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0n9_l4s.php:26\n\
    Stack trace:\n#0 /tmp/tmpz0n9_l4s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz0n9_l4s.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        if ($max_level > $max_level_parens) {\n  \
    \          $max_level_parens = $max_level;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r36eq2y.php:27\n\
    Stack trace:\n#0 /tmp/tmp2r36eq2y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2r36eq2y.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    }\n    if ($paren == ')') {\n      $max_level--;\n    }\n\
    \    if ($max_level > $max_level_paren) {\n      $max_level_paren = $max_level;\n\
    \    }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22uw1a5c.php:28\n\
    Stack trace:\n#0 /tmp/tmp22uw1a5c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp22uw1a5c.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        return $max_level_array;\n      }\n    }\n  \
    \  $max_level_array[] = $max_level;\n  }\n  return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe29l4qpu.php:28\n\
    Stack trace:\n#0 /tmp/tmpe29l4qpu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe29l4qpu.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytxtkyzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpytxtkyzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpytxtkyzx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren_string) {\n        $paren_levels[]\
    \ = $paren_string;\n        $max_level = max($max_level, count($paren_levels));\n\
    \    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsij7sa4z.php:21\n\
    Stack trace:\n#0 /tmp/tmpsij7sa4z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpsij7sa4z.php\
    \ on line 21\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $paren_levels[] = $level;\n      }\n    }\n  }\n  return $paren_levels;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbrxyds4.php:27\n\
    Stack trace:\n#0 /tmp/tmpwbrxyds4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwbrxyds4.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        $level = 0;\n        for ($j = $i; $j < $paren_array_count;\
    \ $j++) {\n            if ($paren_array[$i] == $paren_array[$j]) {\n         \
    \       $level++;\n            } else {\n                break;\n            }\n\
    \        }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79fe_kmu.php:30\n\
    Stack trace:\n#0 /tmp/tmp79fe_kmu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp79fe_kmu.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $max_level = 0;\n  foreach ($paren_array as $paren_string) {\n    $paren_levels[]\
    \ = $paren_level;\n    $paren_level = count($paren_levels);\n    if ($paren_level\
    \ > $max_level) {\n      $max_level = $paren_level;\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztgav982.php:24\n\
    Stack trace:\n#0 /tmp/tmpztgav982.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpztgav982.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $paren_array_max = 0;\n    $paren_array_index = 0;\n\
    \    foreach ($paren_array as $paren_array_value) {\n        if ($paren_array_index\
    \ > $paren_array_max) {\n            $paren_array_max = $paren_array_index;\n\
    \        }\n        $paren_array_index++;\n    }\n    return $paren_array_max;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfoz2tq03.php:24\n\
    Stack trace:\n#0 /tmp/tmpfoz2tq03.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpfoz2tq03.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n      $max_level_array[$i]\
    \ = $max_level;\n    }\n    if ($paren_array[$i] === ')') {\n      $max_level--;\n\
    \    }\n  }\n  $max_level_length = count($max_level_array);\n  for ($i = 0; $i\
    \ < $max_level_length; $i++) {\n    $max_level_array[$i] = $max_level_array[$i]\
    \ + 1;\n  }\n  $max_level_length = array_sum($max_level_array);\n  for ($i = 0;\
    \ $i < $max_level_length; $i++) {\n    $paren_array[$i] = $max_level_array[$i];\n\
    \  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprj87ctis.php:35\n\
    Stack trace:\n#0 /tmp/tmprj87ctis.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprj87ctis.php\
    \ on line 35\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === '(') {\n            $max_level++;\n        } else if ($paren_array[$i] ===\
    \ ')') {\n            $max_level--;\n        }\n    }\n    return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp506a97oo.php:25\n\
    Stack trace:\n#0 /tmp/tmp506a97oo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp506a97oo.php\
    \ on line 25\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n    }\n    if ($level\
    \ > $max_level) {\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2knk0xks.php:27\n\
    Stack trace:\n#0 /tmp/tmp2knk0xks.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2knk0xks.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    $max_level_paren_array = [];\n    foreach ($paren_array as $paren_item) {\n\
    \        if ($paren_item == \"(\") {\n            $max_level++;\n            $max_level_paren_array[]\
    \ = $paren_item;\n        } elseif ($paren_item == \")\") {\n            $max_level--;\n\
    \            if ($max_level == 0) {\n                $max_level_paren_array[]\
    \ = $paren_item;\n            }\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5d88mxn3.php:28\n\
    Stack trace:\n#0 /tmp/tmp5d88mxn3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5d88mxn3.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack_size = count($paren_string);\n\
    \  for ($i = 0; $i < $paren_stack_size; ++$i) {\n    if ($paren_string[$i] ==\
    \ ')') {\n      ++$level;\n    } else {\n      --$level;\n    }\n    if ($level\
    \ < 0) {\n      return $paren_stack;\n    }\n    $paren_stack[] = $paren_string[$i];\n\
    \  }\n  return $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpo45khvix.php on line 8\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo45khvix.php:28\nStack trace:\n#0 /tmp/tmpo45khvix.php(33):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo45khvix.php on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        $level\
    \ = 0;\n        $paren_array = explode(')', $paren);\n        foreach ($paren_array\
    \ as $nested_paren) {\n            $level++;\n            $nested_paren_array\
    \ = explode('(', $nested_paren);\n            if ($level > $max_level) {\n   \
    \             $max_level = $level;\n                $max_level_parens = $nested_paren;\n\
    \            }\n        }\n    }\n    return $max_level_parens;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bbqutub.php:29\n\
    Stack trace:\n#0 /tmp/tmp8bbqutub.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8bbqutub.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \ } else {\n      if ($paren == ')') {\n        $paren = array_pop($paren_stack);\n\
    \      }\n      if ($paren) {\n        $level++;\n      }\n    }\n  }\n  return\
    \ $level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3c5xs3em.php:28\n\
    Stack trace:\n#0 /tmp/tmp3c5xs3em.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3c5xs3em.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        // This paren string has too many levels of nesting.\n\
    \        return FALSE;\n      }\n    }\n    if ($max_level > $max_level_parens)\
    \ {\n      $max_level_parens = $max_level;\n    }\n  }\n  return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlezn95a.php:31\n\
    Stack trace:\n#0 /tmp/tmpdlezn95a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdlezn95a.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $paren_array_level = 0;\n    $paren_array_output =\
    \ '';\n    foreach ($paren_array as $paren_item) {\n        if ($paren_item ==\
    \ '(') {\n            $paren_array_level++;\n        } elseif ($paren_item ==\
    \ ')') {\n            $paren_array_level--;\n        }\n        if ($paren_array_level\
    \ == 0) {\n            $paren_array_output .= $paren_item;\n        }\n    }\n\
    \    return $paren_array_output;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xvk_1v8.php:27\n\
    Stack trace:\n#0 /tmp/tmp9xvk_1v8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9xvk_1v8.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren_array\
    \ = [];\n  foreach ($paren_array as $paren) {\n    $paren_array_copy = array_slice($paren_array,\
    \ 0, $paren);\n    $max_level_paren_array[$paren] = max($max_level_paren_array[$paren],\
    \ count($paren_array_copy));\n  }\n  foreach ($max_level_paren_array as $level\
    \ => $level_paren_array) {\n    if ($level == count($paren_array) - 1) {\n   \
    \   $max_level = max($max_level, $level);\n    }\n  }\n  return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvado1mm0.php:26\n\
    Stack trace:\n#0 /tmp/tmpvado1mm0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvado1mm0.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_levels = array();\n  $paren_levels_count = array();\n\
    \  $paren_levels_count = explode(' ', $paren_string);\n  foreach ($paren_levels_count\
    \ as $paren_level) {\n    $paren_levels[$level] = $paren_level;\n    $level++;\n\
    \  }\n  $paren_levels_count = array_reverse($paren_levels_count);\n  foreach ($paren_levels_count\
    \ as $paren_level) {\n    if ($paren_level > 0) {\n      $paren_level--;\n   \
    \ }\n    $paren_levels[$level] = $paren_level;\n    $level++;\n  }\n  $paren_levels\
    \ = array_reverse($paren_levels);\n  $max_level = 0;\n  foreach ($paren_levels\
    \ as $level) {\n    if ($level > $max_level) {\n      $max_level = $level;\n \
    \   }\n  }\n  $max_level++;\n  $paren_levels = array_reverse($paren_levels);\n\
    \  $paren_levels = array_slice($paren_levels, 0, $max_level);\n  $paren_levels_count\
    \ = array_slice($paren_levels_count, 0, $max_level);\n  $paren_levels_count =\
    \ array_reverse($paren_levels_count);\n  $paren_levels_count = array_slice($paren_levels_count,\
    \ 0, $max_level);\n  $paren_levels_count = array_reverse($paren_levels_count);\n\
    \  $paren_levels_count = array_slice($paren_levels_count, 0, $max_level);\n  $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n  $paren_levels_count = array_slice($paren_levels_count,\
    \ 0, $max_level);\n  $paren_levels_count = array_reverse($paren_levels_count);\n\
    \  $paren_levels_count = array_slice($paren_levels_count, 0, $max_level);\n  $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n  $paren_levels_count = array_slice($paren_levels_count,\
    \ 0, $max_level);\n  $paren_levels_count = array_reverse($paren_levels_count);\n\
    \  $paren_levels_count = array_slice($paren_levels_count, 0, $max_level);\n  $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n  $paren_levels_count = array_slice($paren_levels_count,\
    \ 0, $max_level);\n  $paren_levels_count = array_reverse($paren_levels_count);\n\
    \  $paren_levels_count = array_slice($paren_levels_count, 0, $max_level);\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp33x2l1zk.php on line 60

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  foreach ($paren_array as $paren_string) {\n    $paren_levels[] = count($paren_string);\n\
    \  }\n  $max_level = max($paren_levels);\n  $nested_parens = array();\n  for ($i\
    \ = 0; $i < $max_level; $i++) {\n    $nested_parens[] = '';\n  }\n  for ($i =\
    \ 0; $i < $max_level; $i++) {\n    for ($j = 0; $j < $i; $j++) {\n      $nested_parens[$j]\
    \ = $nested_parens[$j] . $paren_array[$i];\n    }\n  }\n  return $nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsxt5v3fu.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpsxt5v3fu.php on\
    \ line 9\n\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpsxt5v3fu.php on line 9\n\nWarning: count(): Parameter must\
    \ be an array or an object that implements Countable in /tmp/tmpsxt5v3fu.php on\
    \ line 9\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxt5v3fu.php:29\n\
    Stack trace:\n#0 /tmp/tmpsxt5v3fu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsxt5v3fu.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n      if ($max_level > $max_level_parens) {\n        $max_level_parens\
    \ = $max_level;\n      }\n    } else if ($paren == ')') {\n      $max_level--;\n\
    \    }\n  }\n  return $max_level_parens;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0tdkz07.php:27\n\
    Stack trace:\n#0 /tmp/tmpz0tdkz07.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz0tdkz07.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytxtkyzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpytxtkyzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpytxtkyzx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = -1;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } else if ($max_level > 0) {\n  \
    \          $max_level_paren = $paren;\n        }\n    }\n    return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg0vr0dm.php:29\n\
    Stack trace:\n#0 /tmp/tmpkg0vr0dm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkg0vr0dm.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren = '';\n  for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n      if\
    \ ($max_level > $max_level_paren) {\n        $max_level_paren = $max_level;\n\
    \      }\n    } else if ($paren_array[$i] === ')') {\n      $max_level--;\n  \
    \  }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbua4mpz.php:28\n\
    Stack trace:\n#0 /tmp/tmpmbua4mpz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmbua4mpz.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5scj8jtd.php:27\n\
    Stack trace:\n#0 /tmp/tmp5scj8jtd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5scj8jtd.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$i] == $paren_array[$j]) {\n                $level++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if ($level > $max_level) {\n            $max_level = $level;\n        }\n\
    \    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3iwgvzd.php:30\n\
    Stack trace:\n#0 /tmp/tmpx3iwgvzd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx3iwgvzd.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } elseif ($max_level > 0) {\n   \
    \         $max_level_paren .= $paren;\n        }\n    }\n    return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq529n6mr.php:29\n\
    Stack trace:\n#0 /tmp/tmpq529n6mr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq529n6mr.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren_array = [];\n    foreach ($paren_array as $paren_string) {\n\
    \        $paren_array = explode(')', $paren_string);\n        $level = 0;\n  \
    \      foreach ($paren_array as $paren_string) {\n            $paren_array = explode('(',\
    \ $paren_string);\n            $level++;\n        }\n        if ($level > $max_level)\
    \ {\n            $max_level = $level;\n            $max_level_paren_array = $paren_array;\n\
    \        }\n    }\n    return $max_level_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddqmx181.php:29\n\
    Stack trace:\n#0 /tmp/tmpddqmx181.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpddqmx181.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_level = 0;\n  $paren_array_output = '';\n  foreach ($paren_array\
    \ as $paren_string) {\n    if ($paren_array_level == 0) {\n      $paren_array_output\
    \ .= $paren_string;\n    } else {\n      $paren_array_output .= ' ' . $paren_string;\n\
    \    }\n    if ($paren_array_level == $paren_array_count - 1) {\n      $paren_array_output\
    \ .= ')';\n    } else {\n      $paren_array_output .= ')';\n    }\n    $paren_array_level++;\n\
    \  }\n  return $paren_array_output;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8x5pji9.php:31\n\
    Stack trace:\n#0 /tmp/tmpg8x5pji9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpg8x5pji9.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        if ($max_level > $max_level_parens) {\n  \
    \          $max_level_parens = $max_level;\n        }\n    }\n    return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2r36eq2y.php:27\n\
    Stack trace:\n#0 /tmp/tmp2r36eq2y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2r36eq2y.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_len = count($paren_array);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_array[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_levels[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_levels[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_levels[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_levels[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $paren_levels[$i];\n    }\n    $paren_levels_len\
    \ = count($paren_levels);\n    $paren_levels_len = max($paren_levels_len);\n \
    \   $paren_levels_len = min($paren_levels_len, 2);\n    for ($i = 0; $i < $paren_levels_len;\
    \ $i++) {\n        $paren_levels[$i] = $\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp8i7m7v2u.php on line 47

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        $current_level =\
    \ 0;\n        for ($j = 0; $j < $i; $j++) {\n            if ($paren_array[$j]\
    \ === '(') {\n                $current_level++;\n            } else if ($paren_array[$j]\
    \ === ')') {\n                $current_level--;\n            }\n        }\n  \
    \      if ($current_level > $max_level) {\n            $max_level = $current_level;\n\
    \            $max_level_paren_array = $paren_array;\n        }\n    }\n    return\
    \ $max_level_paren_array;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfalbsgdg.php:32\n\
    Stack trace:\n#0 /tmp/tmpfalbsgdg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfalbsgdg.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $paren_stack[] = $char;\n    } else\
    \ if ($char == ')') {\n      $paren_stack = array_reverse($paren_stack);\n   \
    \   $level--;\n      if ($level < 0) {\n        return $paren_stack;\n      }\n\
    \    }\n  }\n  return $paren_stack;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxlwffkq.php:27\n\
    Stack trace:\n#0 /tmp/tmptxlwffkq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptxlwffkq.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $level = 0;\n    $nested_parens = array();\n    foreach (explode(' ',\
    \ $paren_string) as $paren) {\n        if ($paren == '(') {\n            $level++;\n\
    \        } else if ($paren == ')') {\n            $level--;\n        }\n     \
    \   if ($level == 0 && count($nested_parens) == 0) {\n            $nested_parens[]\
    \ = $paren;\n        }\n    }\n    return $nested_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxm6t3kmz.php:26\n\
    Stack trace:\n#0 /tmp/tmpxm6t3kmz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxm6t3kmz.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $level++;\n      $paren_stack[] = array();\n    } else if ($char == ')')\
    \ {\n      $level--;\n      $paren_stack = array_pop($paren_stack);\n    }\n \
    \   if ($level > 0) {\n      $paren_stack[$level][] = $char;\n    }\n  }\n  return\
    \ $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph41pl8n1.php:29\n\
    Stack trace:\n#0 /tmp/tmph41pl8n1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph41pl8n1.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    $paren_levels_count_total = 0;\n    foreach\
    \ ($paren_array as $paren_item) {\n        if ($paren_item == '(') {\n       \
    \     $paren_levels[] = $paren_item;\n            $paren_levels_count[] = 1;\n\
    \        } else {\n            $paren_levels_count_total++;\n            $paren_levels_count_total\
    \ = $paren_levels_count_total + 1;\n            $paren_levels_count[$paren_levels_count_total]\
    \ = $paren_levels_count[$paren_levels_count_total] + 1;\n        }\n    }\n  \
    \  $max_level = 0;\n    $max_level_found = false;\n    foreach ($paren_levels\
    \ as $paren_item) {\n        if ($paren_levels_count[$paren_item] > $max_level)\
    \ {\n            $max_level = $paren_levels_count[$paren_item];\n            $max_level_found\
    \ = true;\n        }\n    }\n    if ($max_level_found == false) {\n        $max_level\
    \ = 0;\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_jwxg8l.php:39\n\
    Stack trace:\n#0 /tmp/tmpg_jwxg8l.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg_jwxg8l.php\
    \ on line 39\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytxtkyzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpytxtkyzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpytxtkyzx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $nested_parens = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n      if ($level < 0) {\n        throw new Exception('Unbalanced\
    \ parenthesis');\n      }\n    }\n    $nested_parens[] = $level;\n  }\n  return\
    \ $nested_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4cvlfd0.php:27\n\
    Stack trace:\n#0 /tmp/tmpt4cvlfd0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpt4cvlfd0.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ === \"(\") {\n            $max_level++;\n        } else {\n            $max_level--;\n\
    \        }\n        if ($max_level > $max_level_paren_array[$i]) {\n         \
    \   $max_level_paren_array[$i] = $max_level;\n        }\n    }\n    return $max_level_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsqosqx68.php:28\n\
    Stack trace:\n#0 /tmp/tmpsqosqx68.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsqosqx68.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $paren_array_level = 0;\n    $paren_array_output =\
    \ '';\n    foreach ($paren_array as $paren_item) {\n        if ($paren_item ==\
    \ '(') {\n            $paren_array_level++;\n        } elseif ($paren_item ==\
    \ ')') {\n            $paren_array_level--;\n        }\n        if ($paren_array_level\
    \ > 0) {\n            $paren_array_output .= $paren_item;\n        }\n    }\n\
    \    return $paren_array_output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4f0m32y5.php:28\n\
    Stack trace:\n#0 /tmp/tmp4f0m32y5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4f0m32y5.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cqvqioh.php:27\n\
    Stack trace:\n#0 /tmp/tmp5cqvqioh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5cqvqioh.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $paren_stack[$level][] = array();\n      $level++;\n    } else if ($char\
    \ == ')') {\n      $level--;\n      if ($level == 0) {\n        $paren_stack[$level][]\
    \ = array();\n      }\n    } else {\n      $paren_stack[$level][] = $char;\n \
    \   }\n  }\n  $paren_stack[$level] = array();\n  return $paren_stack;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgw8v1ppf.php:31\n\
    Stack trace:\n#0 /tmp/tmpgw8v1ppf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgw8v1ppf.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n      $max_level_parens .= '(';\n    } elseif ($paren == ')')\
    \ {\n      $max_level--;\n      $max_level_parens .= ')';\n    } else {\n    \
    \  $max_level_parens .= $paren;\n    }\n  }\n  return $max_level;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp814a5mu8.php:28\n\
    Stack trace:\n#0 /tmp/tmp814a5mu8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp814a5mu8.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_size =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_size;\
    \ $i++) {\n        $level = 0;\n        for ($j = $i; $j < $paren_array_size;\
    \ $j++) {\n            if ($paren_array[$i] == $paren_array[$j]) {\n         \
    \       $level++;\n            } else {\n                break;\n            }\n\
    \        }\n        if ($level > $max_level) {\n            $max_level = $level;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp035n6p3.php:30\n\
    Stack trace:\n#0 /tmp/tmpp035n6p3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp035n6p3.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    $paren_levels_count = array_fill(0, count($paren_array),\
    \ 0);\n    $paren_levels_count = array_sum($paren_levels_count);\n    foreach\
    \ ($paren_array as $paren_level) {\n        $paren_levels[] = $paren_level;\n\
    \    }\n    $paren_levels = array_reverse($paren_levels);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count, 0, -1);\n    $paren_levels_count\
    \ = array_reverse($paren_levels_count);\n    $paren_levels_count = array_sum($paren_levels_count);\n\
    \    $paren_levels_count = array_slice($paren_levels_count\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp9z8r8ru2.php on line 42

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_array = [];\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_array[0])\
    \ {\n            $max_level_array[0] = $max_level;\n        }\n    }\n    foreach\
    \ ($paren_array as $paren) {\n        if ($paren == '(') {\n            $max_level++;\n\
    \        } else if ($paren == ')') {\n            $max_level--;\n        }\n \
    \       if ($max_level > $max_level_array[1]) {\n            $max_level_array[1]\
    \ = $max_level;\n        }\n    }\n    return $max_level_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4uiw3bl.php:37\n\
    Stack trace:\n#0 /tmp/tmpa4uiw3bl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa4uiw3bl.php\
    \ on line 37\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \ } else if ($paren == ')') {\n      $paren_stack = array_pop($paren_stack);\n\
    \    } else {\n      $paren_stack[] = $paren;\n    }\n    if ($paren_stack) {\n\
    \      $level++;\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnoakl8pi.php:28\n\
    Stack trace:\n#0 /tmp/tmpnoakl8pi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnoakl8pi.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  $level = 0;\n  foreach ($paren_array as $paren_string) {\n\
    \    if ($level == 0 && $paren_string == '(') {\n      $level++;\n    } else if\
    \ ($level == $max_level && $paren_string == ')') {\n      $level--;\n    } else\
    \ {\n      $max_level = $level;\n    }\n  }\n  return $max_level;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnqa9ik6.php:27\n\
    Stack trace:\n#0 /tmp/tmprnqa9ik6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprnqa9ik6.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_level = 0;\n  $paren_array_output = '';\n  foreach ($paren_array\
    \ as $paren_array_value) {\n    if ($paren_array_level == 0) {\n      $paren_array_output\
    \ .= $paren_array_value;\n    } else {\n      if ($paren_array_level == $paren_array_count\
    \ - 1) {\n        $paren_array_output .= $paren_array_value . '(';\n      } else\
    \ {\n        $paren_array_output .= $paren_array_value . ')';\n      }\n    }\n\
    \    $paren_array_level++;\n  }\n  return $paren_array_output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9gw7228.php:30\n\
    Stack trace:\n#0 /tmp/tmpw9gw7228.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw9gw7228.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $level = 0;\n  $paren_levels\
    \ = array();\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n\
    \      $level++;\n      $paren_levels[$level] = $level;\n    } elseif ($paren\
    \ == ')') {\n      $level--;\n      $paren_levels[$level] = $level;\n    }\n \
    \ }\n  $max_level = max($paren_levels);\n  $max_level_key = max(array_keys($paren_levels));\n\
    \  $max_level_key_index = array_search($max_level_key, $paren_levels);\n  $max_level_key_index\
    \ += 1;\n  $max_level_key_index = array_search($max_level_key_index, array_keys($paren_levels));\n\
    \  $max_level_key_index += 1;\n  $max_level_key_index = array_search($max_level_key_index,\
    \ array_keys($paren_levels));\n  $max_level_key_index += 1;\n  $max_level_key_index\
    \ = array_search($max_level_key_index, array_keys($paren_levels));\n  $max_level_key_index\
    \ += 1;\n  $max_level_key_index = array_search($max_level_key_index, array_keys($paren_levels));\n\
    \  $max_level_key_index += 1;\n  $max_level_key_index = array_search($max_level_key_index,\
    \ array_keys($paren_levels));\n  $max_level_key_index += 1;\n  $max_level_key_index\
    \ = array_search($max_level_key_index, array_keys($paren_levels));\n  $max_level_key_index\
    \ += 1;\n  $max_level_key_index = array_search($max_level_key_index, array_keys($paren_levels));\n\
    \  $max_level_key_index += 1;\n  $max_level_key_index = array_search($max_level_key_index,\
    \ array_keys($paren_levels));\n  $max_level_key_index += 1;\n  $max_level_key_index\
    \ = array_search($max_level_key_index, array_keys($paren_levels));\n  $max_level_key_index\
    \ += 1;\n  $max_level_key_index = array_search($max_level_key_index, array_keys($paren_levels));\n\
    \  $max_level_key_index += 1;\n  $max_level_key_index = array_search($max_level_key_index,\
    \ array_keys($paren_levels));\n  $max_level_key_index += 1;\n  $max_level_key_index\
    \ = array_search($max_level_key_index, array_keys($paren_levels));\n  $max_level_key_index\
    \ += 1;\n  $max_level_key_index = array_search($max_level_key_index, array_keys($paren_levels));\n\
    \  $max_level_key_index += 1;\n  $max_level_key_index = array_search($max_level_key_index,\
    \ array_\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpad8w90to.php on line 49

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren_array = [];\n    foreach ($paren_array as $paren) {\n    \
    \    $paren_array = explode(')', $paren);\n        $level = 0;\n        foreach\
    \ ($paren_array as $paren_item) {\n            if ($paren_item == '(') {\n   \
    \             $level++;\n            } else {\n                $level--;\n   \
    \         }\n            if ($level > $max_level) {\n                $max_level\
    \ = $level;\n                $max_level_paren_array = $paren_array;\n        \
    \    }\n        }\n    }\n    return $max_level_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdpo0ce6.php:32\n\
    Stack trace:\n#0 /tmp/tmprdpo0ce6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprdpo0ce6.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_count;\
    \ $i++) {\n        $paren_array[$i] = trim($paren_array[$i]);\n        if ($paren_array[$i]\
    \ === '(') {\n            $max_level++;\n        } else if ($paren_array[$i] ===\
    \ ')') {\n            $max_level--;\n        }\n    }\n    return $max_level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp506a97oo.php:25\n\
    Stack trace:\n#0 /tmp/tmp506a97oo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp506a97oo.php\
    \ on line 25\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === \"(\") {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === \")\") {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ght2c96.php:24\n\
    Stack trace:\n#0 /tmp/tmp9ght2c96.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp9ght2c96.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $paren_levels_count = array();\n    foreach ($paren_array as $paren_string)\
    \ {\n        $paren_levels[] = $paren_string;\n        $paren_levels_count[$paren_string]\
    \ = 0;\n    }\n    $paren_levels_count = array_count_values($paren_levels_count);\n\
    \    foreach ($paren_levels_count as $key => $value) {\n        if ($value ==\
    \ 1) {\n            $paren_levels[$key] = '(';\n        } else {\n           \
    \ $paren_levels[$key] = ')';\n        }\n    }\n    return $paren_levels;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp944fy1vz.php:29\n\
    Stack trace:\n#0 /tmp/tmp944fy1vz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp944fy1vz.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = -1;\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else {\n           \
    \ $max_level--;\n        }\n        if ($max_level > $max_level_paren) {\n   \
    \         $max_level_paren = $max_level;\n        }\n    }\n    return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xoqju7p.php:27\n\
    Stack trace:\n#0 /tmp/tmp5xoqju7p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5xoqju7p.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] == ')') {\n                $level--;\n           \
    \ } else {\n                $level++;\n            }\n        }\n        if ($level\
    \ > $max_level) {\n            $max_level = $level;\n        }\n    }\n    return\
    \ $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dlftq5e.php:30\n\
    Stack trace:\n#0 /tmp/tmp0dlftq5e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0dlftq5e.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $nested_parens = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $level++;\n    } else if ($paren\
    \ == ')') {\n      $level--;\n    }\n    if ($level < 0) {\n      $nested_parens[]\
    \ = $paren;\n    }\n  }\n  return $nested_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bife7t1.php:26\n\
    Stack trace:\n#0 /tmp/tmp0bife7t1.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0bife7t1.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $level) {\n    if ($level == '(') {\n    \
    \  $max_level++;\n    } else if ($level == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        throw new Exception('Invalid parenthesis string');\n\
    \      }\n      if ($max_level > count($max_level_array)) {\n        $max_level_array\
    \ = array_fill(0, $max_level, $max_level);\n      }\n      $max_level_array[$max_level]++;\n\
    \    }\n  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigp5wtug.php:31\n\
    Stack trace:\n#0 /tmp/tmpigp5wtug.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpigp5wtug.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_lk9ihv.php:27\n\
    Stack trace:\n#0 /tmp/tmpk_lk9ihv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk_lk9ihv.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5scj8jtd.php:27\n\
    Stack trace:\n#0 /tmp/tmp5scj8jtd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5scj8jtd.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $level++;\n      $paren_stack[] = array();\n    } else if ($char == ')')\
    \ {\n      $level--;\n      if ($level == 0) {\n        $paren_stack = array_reverse($paren_stack);\n\
    \        break;\n      }\n    }\n    $paren_stack[$level][] = $char;\n  }\n  return\
    \ $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusqao8go.php:30\n\
    Stack trace:\n#0 /tmp/tmpusqao8go.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpusqao8go.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        $level = 0;\n        for ($j = 0; $j < $i; $j++) {\n      \
    \      if ($paren_array[$j] === '(') {\n                $level++;\n          \
    \  } elseif ($paren_array[$j] === ')') {\n                $level--;\n        \
    \    }\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2waui7tm.php:30\n\
    Stack trace:\n#0 /tmp/tmp2waui7tm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2waui7tm.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5scj8jtd.php:27\n\
    Stack trace:\n#0 /tmp/tmp5scj8jtd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5scj8jtd.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ $paren_stack[0][] = $paren_string;\n  while ($paren_stack) {\n    $level++;\n\
    \    $paren_string = array_pop($paren_stack);\n    $paren_string = str_replace(')',\
    \ '', $paren_string);\n    $paren_string = str_replace('(', '', $paren_string);\n\
    \    $paren_string = str_replace('(', ' (', $paren_string);\n    $paren_stack[]\
    \ = array();\n    $paren_stack[$level][] = $paren_string;\n  }\n  return $level;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    20480 bytes) in /tmp/tmp3l8xspjs.php on line 13

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n            if ($level < 0) {\n                $max_level = 0;\n\
    \                break;\n            }\n        }\n        $max_level = max($max_level,\
    \ $level);\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ukaaju5.php:29\n\
    Stack trace:\n#0 /tmp/tmp9ukaaju5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9ukaaju5.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $char) {\n    if ($char == '(') {\n      $paren_stack[$level] = $char;\n\
    \      $level++;\n    } else if ($char == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        return $paren_stack;\n      }\n    }\n  }\n  return $paren_stack;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_n5r_um.php:27\n\
    Stack trace:\n#0 /tmp/tmpy_n5r_um.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy_n5r_um.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren_group) {\n        $paren_levels[]\
    \ = count($paren_group);\n        if ($paren_levels[count($paren_levels) - 1]\
    \ > $max_level) {\n            $max_level = count($paren_levels) - 1;\n      \
    \  }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n   \
    \ return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp0v64sxbi.php on line 10\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp0v64sxbi.php\
    \ on line 10\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmp0v64sxbi.php on line 10\n\nWarning: count():\
    \ Parameter must be an array or an object that implements Countable in /tmp/tmp0v64sxbi.php\
    \ on line 10\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0v64sxbi.php:23\n\
    Stack trace:\n#0 /tmp/tmp0v64sxbi.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0v64sxbi.php\
    \ on line 23\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        $max_level = 0;\n      }\n    }\n    if ($max_level\
    \ > $max_level_parens) {\n      $max_level_parens = $max_level;\n    }\n  }\n\
    \  return $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5wyct2y.php:30\n\
    Stack trace:\n#0 /tmp/tmpq5wyct2y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq5wyct2y.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_lk9ihv.php:27\n\
    Stack trace:\n#0 /tmp/tmpk_lk9ihv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk_lk9ihv.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $paren_array_level = 0;\n  $paren_array_output = '';\n  foreach ($paren_array\
    \ as $paren_array_item) {\n    if ($paren_array_item == '(') {\n      $paren_array_level++;\n\
    \    } else if ($paren_array_item == ')') {\n      $paren_array_level--;\n   \
    \ }\n    if ($paren_array_level > $paren_array_count) {\n      $paren_array_output\
    \ .= $paren_array_item;\n    }\n  }\n  return $paren_array_output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3ospem_.php:28\n\
    Stack trace:\n#0 /tmp/tmpr3ospem_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr3ospem_.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_array\
    \ = [];\n  foreach ($paren_array as $level) {\n    $level_array = explode(')',\
    \ $level);\n    if (count($level_array) > $max_level) {\n      $max_level = count($level_array);\n\
    \      $max_level_array = $level_array;\n    }\n  }\n  return $max_level_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbfz4po64.php:24\n\
    Stack trace:\n#0 /tmp/tmpbfz4po64.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbfz4po64.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_array = [];\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    $current_level = 0;\n    $current_level_paren_array = [];\n   \
    \ for ($j = 0; $j < $paren_array_length; $j++) {\n      if ($paren_array[$i] ==\
    \ $paren_array[$j]) {\n        $current_level++;\n      }\n      if ($current_level\
    \ > $max_level) {\n        $max_level = $current_level;\n        $max_level_paren_array\
    \ = $current_level_paren_array;\n      }\n      if ($j == $paren_array_length\
    \ - 1) {\n        $current_level_paren_array[] = $paren_array[$j];\n      }\n\
    \    }\n  }\n  return $max_level_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hd0onzk.php:34\n\
    Stack trace:\n#0 /tmp/tmp3hd0onzk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3hd0onzk.php\
    \ on line 34\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } elseif ($max_level < 0 && $paren\
    \ != '') {\n            return false;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkhdkqlh.php:32\n\
    Stack trace:\n#0 /tmp/tmppkhdkqlh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppkhdkqlh.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_string = '';\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n      if\
    \ ($max_level > $max_level_paren_string) {\n        $max_level_paren_string =\
    \ $max_level;\n      }\n    } else if ($paren_array[$i] === ')') {\n      $max_level--;\n\
    \    }\n  }\n  return $max_level_paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzu41j8bd.php:28\n\
    Stack trace:\n#0 /tmp/tmpzu41j8bd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzu41j8bd.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  foreach (explode(' ', $paren_string)\
    \ as $paren) {\n    if ($paren == '(') {\n      $paren_stack[] = $paren;\n   \
    \ } else if ($paren == ')') {\n      $paren_stack = array_pop($paren_stack);\n\
    \    } else if ($paren == '') {\n      // Empty string means we reached a leaf\
    \ level.\n      $level--;\n    }\n  }\n  return $level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsbe3llt.php:26\n\
    Stack trace:\n#0 /tmp/tmpzsbe3llt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzsbe3llt.php\
    \ on line 26\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_string = trim($paren_string);\n  $paren_string =\
    \ preg_replace('/\\s+/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\\
    )\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string\
    \ = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)/', '',\
    \ $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\\
    )\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n  $paren_string = preg_replace('/\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)/',\
    \ '', $paren_string);\n  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)\\)/', '', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\
    (\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\(\\\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp2lwge72f.php on line 24

    '
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_string = \"\
    \";\n    for ($i = 0; $i < $paren_array_length; $i++) {\n        if ($paren_array[$i]\
    \ === \"(\") {\n            $max_level++;\n            if ($max_level > $max_level_paren_string)\
    \ {\n                $max_level_paren_string = $max_level;\n            }\n  \
    \      } elseif ($paren_array[$i] === \")\") {\n            $max_level--;\n  \
    \      }\n    }\n    return $max_level_paren_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8zxq0_n.php:28\n\
    Stack trace:\n#0 /tmp/tmph8zxq0_n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph8zxq0_n.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq33qmpib.php:27\n\
    Stack trace:\n#0 /tmp/tmpq33qmpib.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq33qmpib.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        $level = 0;\n   \
    \     for ($j = 0; $j < $i; $j++) {\n            if ($paren_array[$j] == ')')\
    \ {\n                $level--;\n            }\n        }\n        if ($level >\
    \ $max_level) {\n            $max_level = $level;\n            $max_level_paren_array\
    \ = $paren_array;\n        }\n    }\n    return $max_level_paren_array;\n}\n\n\
    function candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\")\
    \ !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5kp_4vxn.php:30\n\
    Stack trace:\n#0 /tmp/tmp5kp_4vxn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5kp_4vxn.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n            $max_level_parens\
    \ .= '(';\n        } elseif ($paren == ')') {\n            $max_level--;\n   \
    \         $max_level_parens .= ')';\n        } else {\n            $max_level_parens\
    \ .= $paren;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysceijrf.php:28\n\
    Stack trace:\n#0 /tmp/tmpysceijrf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpysceijrf.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        $level = 0;\n   \
    \     $paren_array[$i] = '(' . $paren_array[$i] . ')';\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\[[^()]*\\]/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\[[^()]*\\]/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\([^()]*\\)/', '', $paren_array[$i]);\n        $paren_array[$i]\
    \ = preg_replace('/\\\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpdk0i1ayb.php on line 30

    '
  timestamp: 1659730813
- exit_code: -1
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  for ($i = 0; $i < $paren_array_count; $i++) {\n    $level\
    \ = 0;\n    $paren_char = $paren_array[$i];\n    while ($paren_char != '(') {\n\
    \      $paren_char = $paren_array[$i + $level];\n      $level++;\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730818
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_array = [];\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n    }\n \
    \   if ($paren_array[$i] === ')') {\n      $max_level--;\n    }\n    if ($max_level\
    \ > $max_level_array[$i]) {\n      $max_level_array[$i] = $max_level;\n    }\n\
    \  }\n  return $max_level_array;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpce2np57a.php:29\n\
    Stack trace:\n#0 /tmp/tmpce2np57a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpce2np57a.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $level++;\n      $paren_stack[$level][] = array();\n    } else if ($char\
    \ == ')') {\n      $level--;\n      $paren_stack[$level][] = array();\n    } else\
    \ {\n      $paren_stack[$level][] = $char;\n    }\n  }\n  return $paren_stack;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwh1r9pql.php:28\n\
    Stack trace:\n#0 /tmp/tmpwh1r9pql.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwh1r9pql.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n        if ($paren_array[$i] === '(') {\n            $max_level++;\n\
    \        } else if ($paren_array[$i] === ')') {\n            $max_level--;\n \
    \       }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn49ai6v_.php:24\n\
    Stack trace:\n#0 /tmp/tmpn49ai6v_.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn49ai6v_.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_length = count($paren_array);\n\
    \  $max_level = 0;\n  $max_level_paren_array = [];\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $max_level++;\n      if\
    \ ($max_level > $max_level_paren_array[0]) {\n        $max_level_paren_array[0]\
    \ = $max_level;\n      }\n    } else if ($paren_array[$i] === ')') {\n      $max_level--;\n\
    \      if ($max_level < $max_level_paren_array[0]) {\n        $max_level_paren_array[0]\
    \ = $max_level;\n      }\n    }\n  }\n  for ($i = 0; $i < $paren_array_length;\
    \ $i++) {\n    if ($paren_array[$i] === '(') {\n      $paren_array[$i] = '';\n\
    \    }\n  }\n  $paren_string = implode(' ', $paren_array);\n  return $paren_string;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqarrhu0s.php:37\n\
    Stack trace:\n#0 /tmp/tmpqarrhu0s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqarrhu0s.php\
    \ on line 37\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_count =\
    \ count($paren_array);\n    $paren_array_level = 0;\n    $paren_array_output =\
    \ '';\n    foreach ($paren_array as $paren_array_item) {\n        if ($paren_array_item\
    \ == '(') {\n            $paren_array_level++;\n        } elseif ($paren_array_item\
    \ == ')') {\n            $paren_array_level--;\n        }\n        if ($paren_array_level\
    \ == $paren_array_count) {\n            $paren_array_output .= $paren_array_item;\n\
    \        }\n    }\n    return $paren_array_output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4mk0goy.php:28\n\
    Stack trace:\n#0 /tmp/tmps4mk0goy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps4mk0goy.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren ==\
    \ '(') {\n            $level++;\n        } else if ($paren == ')') {\n       \
    \     $level--;\n        }\n        if ($level > $max_level) {\n            $max_level\
    \ = $level;\n        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytxtkyzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpytxtkyzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpytxtkyzx.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_levels = array();\n\
    \  $max_level = 0;\n  foreach ($paren_array as $paren_string) {\n    $paren_levels[]\
    \ = $paren_level;\n    $paren_level = count($paren_levels);\n    if ($paren_level\
    \ > $max_level) {\n      $max_level = $paren_level;\n    }\n  }\n  return $max_level;\n\
    }\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi7vl5g7.php:23\n\
    Stack trace:\n#0 /tmp/tmpfi7vl5g7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfi7vl5g7.php\
    \ on line 23\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_parens\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        // This paren string has too many levels of nesting.\n\
    \        return FALSE;\n      }\n    }\n    if ($max_level > $max_level_parens)\
    \ {\n      $max_level_parens = $max_level;\n    }\n  }\n  return $max_level_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlezn95a.php:31\n\
    Stack trace:\n#0 /tmp/tmpdlezn95a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdlezn95a.php\
    \ on line 31\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_levels = array();\n\
    \    $max_level = 0;\n    foreach ($paren_array as $paren) {\n        if ($paren\
    \ == '(') {\n            $paren_levels[] = 1;\n        } elseif ($paren == ')')\
    \ {\n            $paren_levels[] = count($paren_levels) - 1;\n        } else {\n\
    \            $paren_levels[] = count($paren_levels);\n        }\n        if (count($paren_levels)\
    \ > $max_level) {\n            $max_level = count($paren_levels);\n        }\n\
    \    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\"\
    ) !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76m_m09w.php:29\n\
    Stack trace:\n#0 /tmp/tmp76m_m09w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp76m_m09w.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $paren_array_count = count($paren_array);\n\
    \  $max_level = 0;\n  for ($i = 0; $i < $paren_array_count; $i++) {\n    if ($paren_array[$i]\
    \ === '(') {\n      $max_level++;\n    } else if ($paren_array[$i] === ')') {\n\
    \      $max_level--;\n    }\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlm8ugl9.php:24\n\
    Stack trace:\n#0 /tmp/tmpwlm8ugl9.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwlm8ugl9.php\
    \ on line 24\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_paren)\
    \ {\n            $max_level_paren = $max_level;\n        }\n    }\n    return\
    \ $max_level_paren;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cqvqioh.php:27\n\
    Stack trace:\n#0 /tmp/tmp5cqvqioh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5cqvqioh.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(\" \", $paren_string);\n    $max_level = 0;\n\
    \    foreach ($paren_array as $level) {\n        if ($level == \"(\") {\n    \
    \        $max_level++;\n        } else if ($level == \")\") {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhz9878k.php:23\n\
    Stack trace:\n#0 /tmp/tmpbhz9878k.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbhz9878k.php\
    \ on line 23\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_paren = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } elseif ($paren == ')')\
    \ {\n            $max_level--;\n            if ($max_level < 0) {\n          \
    \      return false;\n            }\n        } elseif ($max_level > 0) {\n   \
    \         $max_level_paren .= $paren;\n        }\n    }\n    return $max_level_paren;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq529n6mr.php:29\n\
    Stack trace:\n#0 /tmp/tmpq529n6mr.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq529n6mr.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = $level;\n        break;\n      }\n    }\n  }\n\
    \  return $max_level;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hnr5ph9.php:28\n\
    Stack trace:\n#0 /tmp/tmp6hnr5ph9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6hnr5ph9.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        if\
    \ ($paren == '(') {\n            $max_level++;\n        } else if ($paren == ')')\
    \ {\n            $max_level--;\n        }\n        if ($max_level > $max_level_parens)\
    \ {\n            $max_level_parens = $max_level;\n        }\n    }\n    return\
    \ $max_level_parens;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5scj8jtd.php:27\n\
    Stack trace:\n#0 /tmp/tmp5scj8jtd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5scj8jtd.php\
    \ on line 27\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $paren_array_length\
    \ = count($paren_array);\n    $max_level = 0;\n    $max_level_paren_array = [];\n\
    \    for ($i = 0; $i < $paren_array_length; $i++) {\n        $current_level =\
    \ 0;\n        $current_level_paren_array = [];\n        for ($j = 0; $j < $i;\
    \ $j++) {\n            if ($paren_array[$j] === '(') {\n                $current_level++;\n\
    \                $current_level_paren_array[] = $paren_array[$j];\n          \
    \  } elseif ($paren_array[$j] === ')') {\n                $current_level--;\n\
    \            }\n        }\n        if ($current_level > $max_level) {\n      \
    \      $max_level = $current_level;\n            $max_level_paren_array = $current_level_paren_array;\n\
    \        }\n    }\n    return $max_level_paren_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3ymgy5b.php:34\n\
    Stack trace:\n#0 /tmp/tmpx3ymgy5b.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx3ymgy5b.php\
    \ on line 34\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = -1;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n      if ($max_level_paren == -1) {\n        $max_level_paren\
    \ = $paren;\n      }\n    } else if ($paren == ')') {\n      $max_level--;\n \
    \     if ($max_level == 0) {\n        $max_level_paren = $paren;\n      }\n  \
    \  }\n  }\n  return $max_level_paren;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawrcc2hp.php:30\n\
    Stack trace:\n#0 /tmp/tmpawrcc2hp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpawrcc2hp.php\
    \ on line 30\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $level = 0;\n  $paren_stack = array();\n  $paren_stack[] = array();\n \
    \ foreach (explode(' ', $paren_string) as $char) {\n    if ($char == '(') {\n\
    \      $level++;\n      $paren_stack[] = array();\n    }\n    else if ($char ==\
    \ ')') {\n      $level--;\n      if ($level == 0) {\n        $paren_stack = array_reverse($paren_stack);\n\
    \      }\n    }\n    else {\n      $paren_stack[$level][] = $char;\n    }\n  }\n\
    \  return $paren_stack;\n}\n\nfunction candidate(...$args) {\n    return parse_nested_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(2, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    () (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn4p66j6.php:32\n\
    Stack trace:\n#0 /tmp/tmpvn4p66j6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvn4p66j6.php\
    \ on line 32\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  foreach ($paren_array as $level) {\n        if ($level == '(') {\n        \
    \    $max_level++;\n        } else if ($level == ')') {\n            $max_level--;\n\
    \        }\n    }\n    return $max_level;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuznsowkm.php:23\n\
    Stack trace:\n#0 /tmp/tmpuznsowkm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuznsowkm.php\
    \ on line 23\n"
  timestamp: 1659730812
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $level\
    \ = 0;\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n     \
    \ $level++;\n    } else if ($paren == ')') {\n      $level--;\n      if ($level\
    \ < 0) {\n        $max_level = 0;\n        break;\n      }\n    }\n    $max_level\
    \ = max($max_level, $level);\n  }\n  return $max_level;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2uvow92.php:29\n\
    Stack trace:\n#0 /tmp/tmpp2uvow92.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp2uvow92.php\
    \ on line 29\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n  $paren_array = explode(' ', $paren_string);\n  $max_level = 0;\n  $max_level_paren\
    \ = '';\n  foreach ($paren_array as $paren) {\n    if ($paren == '(') {\n    \
    \  $max_level++;\n    } else if ($paren == ')') {\n      $max_level--;\n     \
    \ if ($max_level < 0) {\n        return $max_level_paren;\n      }\n    }\n  \
    \  $max_level_paren .= $paren;\n  }\n  return $max_level_paren;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_nested_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2,\
    \ 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()\
    \ (()) ((())) (((())))\") !== array(1, 2, 3, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(4)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwm4i3a6.php:28\n\
    Stack trace:\n#0 /tmp/tmptwm4i3a6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptwm4i3a6.php\
    \ on line 28\n"
  timestamp: 1659730813
- exit_code: 255
  program: "<?php\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\nfunction parse_nested_parens($paren_string)\
    \ {\n    $paren_array = explode(' ', $paren_string);\n    $max_level = 0;\n  \
    \  $max_level_parens = '';\n    foreach ($paren_array as $paren) {\n        $paren_level\
    \ = 0;\n        $paren_array = explode(')', $paren);\n        foreach ($paren_array\
    \ as $nested_paren) {\n            $paren_level++;\n            $nested_paren_array\
    \ = explode('(', $nested_paren);\n            $nested_paren_level = 0;\n     \
    \       foreach ($nested_paren_array as $nested_paren_item) {\n              \
    \  $nested_paren_level++;\n            }\n            if ($nested_paren_level\
    \ > $paren_level) {\n                $paren_level = $nested_paren_level;\n   \
    \         }\n        }\n        if ($paren_level > $max_level) {\n           \
    \ $max_level = $paren_level;\n            $max_level_parens = $paren;\n      \
    \  }\n    }\n    return $max_level_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_nested_parens(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(2, 3, 1, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\"\
    ) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(4)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxv0us7k.php:36\n\
    Stack trace:\n#0 /tmp/tmpkxv0us7k.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkxv0us7k.php\
    \ on line 36\n"
  timestamp: 1659730813
