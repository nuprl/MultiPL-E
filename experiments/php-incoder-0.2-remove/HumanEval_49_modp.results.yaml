language: php
name: HumanEval_49_modp
results:
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p ==\
    \ 0) {\n    return 0;\n  }\n  if ($n == $p) {\n    return 1;\n  }\n  if ($n %\
    \ $p == 0) {\n    return $p;\n  }\n  return modp($n / $p, $p);\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5igad1fl.php:29\n\
    Stack trace:\n#0 /tmp/tmp5igad1fl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5igad1fl.php\
    \ on line 29\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $r = $n % $p;\n    if ($r == 0) {\n        return\
    \ $p;\n    }\n    return modp($n, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpov0a5bd3.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  if ($p < $n) {\n\
    \    return $n;\n  }\n  $m = (int) ($n / $p);\n  $r = $n % $p;\n  return $p *\
    \ modp($m, $p) + $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp631unand.php:31\n\
    Stack trace:\n#0 /tmp/tmp631unand.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp631unand.php\
    \ on line 31\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $p; $i++) {\n    $r *= $n;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r6qr3et.php:18\n\
    Stack trace:\n#0 /tmp/tmp0r6qr3et.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0r6qr3et.php\
    \ on line 18\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $r = 1;\n    while ($n > 0) {\n        $r = $r * $p % $n;\n     \
    \   $n = ($n - $r) / $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught DivisionByZeroError: Modulo by zero in /tmp/tmpqmusyr_z.php:6\n\
    Stack trace:\n#0 /tmp/tmpqmusyr_z.php(13): modp(0.2, 5)\n#1 /tmp/tmpqmusyr_z.php(17):\
    \ candidate(3, 5)\n#2 /tmp/tmpqmusyr_z.php(26): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpqmusyr_z.php on line 6\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n & ($p-1)) == 0 ? $n : $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylkf3vu5.php:13\n\
    Stack trace:\n#0 /tmp/tmpylkf3vu5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpylkf3vu5.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $r = $n % $p;\n \
    \ if ($r == 0) {\n    return $p;\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zmwcpcr.php:30\n\
    Stack trace:\n#0 /tmp/tmp1zmwcpcr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1zmwcpcr.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p, MATH_BIGINTEGER_MODE);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MODE - assumed 'MATH_BIGINTEGER_MODE'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn8jtl73.php:12\n\
    Stack trace:\n#0 /tmp/tmppn8jtl73.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppn8jtl73.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14trr4h1.php:12\n\
    Stack trace:\n#0 /tmp/tmp14trr4h1.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp14trr4h1.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p < 0) {\n    return $modp($n, $p);\n  }\n  $r = $n\
    \ % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return $modp($n, $p) - $p;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpetfrewoo.php:22\n\
    Stack trace:\n#0 /tmp/tmpetfrewoo.php(26): modp(3, 5)\n#1 /tmp/tmpetfrewoo.php(30):\
    \ candidate(3, 5)\n#2 /tmp/tmpetfrewoo.php(39): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpetfrewoo.php on line 22\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    if ($p < $n) {\n        return modp($p, $n);\n   \
    \ }\n    $r = 1;\n    $m = $n;\n    while ($m & 1) {\n        $r *= $p;\n    \
    \    $m >>= 1;\n    }\n    while ($m > 0) {\n        $r *= $p;\n        $m >>=\
    \ 1;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmppxbszux1.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  if ($n >= $p) {\n    return $p;\n  }\n  if ($n === 0) {\n\
    \    return 1;\n  }\n  if ($p === 1) {\n    return $n;\n  }\n  if ($p === 2) {\n\
    \    return $n % 2 ? $n : $n + 1;\n  }\n  if ($p === 3) {\n    return $n % 3 ?\
    \ $n : $n + 1;\n  }\n  if ($p === 4) {\n    return $n % 4 ? $n : $n + 1;\n  }\n\
    \  if ($p === 5) {\n    return $n % 5 ? $n : $n + 1;\n  }\n  if ($p === 6) {\n\
    \    return $n % 6 ? $n : $n + 1;\n  }\n  if ($p === 7) {\n    return $n % 7 ?\
    \ $n : $n + 1;\n  }\n  if ($p === 8) {\n    return $n % 8 ? $n : $n + 1;\n  }\n\
    \  if ($p === 9) {\n    return $n % 9 ? $n : $n + 1;\n  }\n  if ($p === 10) {\n\
    \    return $n % 10 ? $n : $n + 1;\n  }\n  if ($p === 11) {\n    return $n % 11\
    \ ? $n : $n + 1;\n  }\n  if ($p === 12) {\n    return $n % 12 ? $n : $n + 1;\n\
    \  }\n  if ($p === 13) {\n    return $n % 13 ? $n : $n + 1;\n  }\n  if ($p ===\
    \ 14) {\n    return $n % 14 ? $n : $n + 1;\n  }\n  if ($p === 15) {\n    return\
    \ $n % 15 ? $n : $n + 1;\n  }\n  if ($p === 16) {\n    return $n % 16 ? $n : $n\
    \ + 1;\n  }\n  if ($p === 17) {\n    return $n % 17 ? $n : $n + 1;\n  }\n  if\
    \ ($p === 18) {\n    return $n % 18 ? $n : $n + 1;\n  }\n  if ($p === 19) {\n\
    \    return $n % 19 ? $n : $n + 1;\n  }\n  if ($p === 20) {\n    return $n % 20\
    \ ? $n : $n + 1;\n  }\n  if ($p === 21) {\n    return $n % 21 ? $n : $n + 1;\n\
    \  }\n  if ($p === 22) {\n    return $n % 22 ? $n : $n + 1;\n  }\n  if ($p ===\
    \ 23) {\n    return $n % 23 ? $n : $n + 1;\n  }\n  if ($p === 24) {\n    return\
    \ $n % \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpqbkipqvp.php on line 86

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p +\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n  }\n  $r = $n\
    \ % $p;\n  return $r == 0 ? $p : $r;\n}\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpe3oacg.php:32\n\
    Stack trace:\n#0 /tmp/tmpjpe3oacg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjpe3oacg.php\
    \ on line 32\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  $m = (int) ($p / $n);\n  return ($n % $p == 0) ? $m\
    \ : modp($n, $p);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjaxe9dyf.php:30\n\
    Stack trace:\n#0 /tmp/tmpjaxe9dyf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjaxe9dyf.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p % $p, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmp6dlt_yqc.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dlt_yqc.php:12\n\
    Stack trace:\n#0 /tmp/tmp6dlt_yqc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6dlt_yqc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p ===\
    \ 0) {\n    return 1;\n  }\n  if ($p === 1) {\n    return $n;\n  }\n  if ($p ===\
    \ 2) {\n    return $n * $n;\n  }\n  if ($p === 3) {\n    return $n * $n * $n;\n\
    \  }\n  if ($p === 4) {\n    return $n * $n * $n * $n;\n  }\n  if ($p === 5) {\n\
    \    return $n * $n * $n * $n * $n;\n  }\n  if ($p === 6) {\n    return $n * $n\
    \ * $n * $n * $n * $n;\n  }\n  if ($p === 7) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n;\n  }\n  if ($p === 8) {\n    return $n * $n * $n * $n * $n * $n\
    \ * $n * $n;\n  }\n  if ($p === 9) {\n    return $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n;\n  }\n  if ($p === 10) {\n    return $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n;\n  }\n  if ($p === 11) {\n    return $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p === 12) {\n    return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p ===\
    \ 13) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n;\n  }\n  if ($p === 14) {\n    return $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p === 15) {\n    return $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if\
    \ ($p === 16) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n;\n  }\n  if ($p === 17) {\n    return $n * $n * $n *\
    \ \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjv6j581j.php on line 65

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) return\
    \ 0;\n  if ($n == 1) return 1;\n  if ($p == 1) return $n;\n  if ($p < $n) return\
    \ $p;\n  if ($p > $n) return $n;\n  $m = (int) ($n / $p);\n  return ($n % $p)\
    \ * modp($m, $p);\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxu57onz.php:21\n\
    Stack trace:\n#0 /tmp/tmpoxu57onz.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxu57onz.php\
    \ on line 21\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = modp($n % $p, $p);\n  return ($r * $m) % $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpc2g8g5ma.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  $r = $n\
    \ % $p;\n  if ($r == 0) {\n    return $p;\n  }\n  return modp($n, $p);\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpibba3nag.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n\
    \  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 0) {\n    return $n;\n\
    \  }\n  if ($p == 1) {\n    return $n % 2 ? $n : $n - 1;\n  }\n  $r = $n % $p;\n\
    \  if ($r == 0) {\n    return $n;\n  }\n  return $p - $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4hfmehs.php:30\n\
    Stack trace:\n#0 /tmp/tmpi4hfmehs.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi4hfmehs.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p, MATH_BIGINTEGER_MODE);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MODE - assumed 'MATH_BIGINTEGER_MODE'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn8jtl73.php:12\n\
    Stack trace:\n#0 /tmp/tmppn8jtl73.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppn8jtl73.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $r = $n % $p;\n \
    \ if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgdx31dm.php:30\n\
    Stack trace:\n#0 /tmp/tmpjgdx31dm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjgdx31dm.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $m = (int) ($n / $p);\n    $r = modp($n % $p, $p);\n\
    \    return ($m == $r) ? $m : $m + pow($r, $p - $m, $p);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpp7r4ob28.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p == 1) {\n   \
    \ return $n;\n  }\n  if ($p > $n) {\n    return $n % $p;\n  }\n  $r = $n % $p;\n\
    \  return $r == 0 ? $p : $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfwz99c4.php:28\n\
    Stack trace:\n#0 /tmp/tmppfwz99c4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppfwz99c4.php\
    \ on line 28\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p == 0) {\n        return 1;\n  \
    \  }\n    if ($p == 1) {\n        return $n;\n    }\n    if ($p == 2) {\n    \
    \    return $n % 2 ? $n : $n + 1;\n    }\n    if ($p < 2 * $n) {\n        return\
    \ $n % $p ? $n : $n + modp($n / $p, $p);\n    }\n    return $n % $p ? modp($n\
    \ / $p, $p) : $n;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qp61yk_.php:30\n\
    Stack trace:\n#0 /tmp/tmp_qp61yk_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_qp61yk_.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p < 0) {\n   \
    \ return $modp($n, -$p);\n  }\n  $r = 1;\n  for ($i = 0; $i < $p; $i++) {\n  \
    \  $r *= $n;\n    $r %= $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpe43lto.php:29\n\
    Stack trace:\n#0 /tmp/tmpqpe43lto.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqpe43lto.php\
    \ on line 29\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p % $p, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmp6dlt_yqc.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dlt_yqc.php:12\n\
    Stack trace:\n#0 /tmp/tmp6dlt_yqc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6dlt_yqc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1 && $p == 1) {\n    return 1;\n  }\n  if ($n ==\
    \ $p) {\n    return 1;\n  }\n  if ($n == ($p - 1)) {\n    return $n;\n  }\n  $t\
    \ = $n;\n  $n = $p - 1;\n  for ($i = 0; $i < $p; $i++) {\n    $t = $t * $n + $i;\n\
    \  }\n  return $t;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi07_o6qm.php:31\n\
    Stack trace:\n#0 /tmp/tmpi07_o6qm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi07_o6qm.php\
    \ on line 31\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2l5x59y.php:13\n\
    Stack trace:\n#0 /tmp/tmpa2l5x59y.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpa2l5x59y.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  if ($p\
    \ < $n) {\n    return modp($p, $n);\n  }\n  $m = (int) ($n / $p);\n  $r = modp($n\
    \ % $p, $p);\n  return $m * $r + $p;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpzoie0g08.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n & ($p - 1)) == 0 ? $n : $n + modp($n >> $p, $p);\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps73cedop.php:13\n\
    Stack trace:\n#0 /tmp/tmps73cedop.php(21): test()\n#1 {main}\n  thrown in /tmp/tmps73cedop.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $r = 1;\n    $m = 1;\n    while ($n != 0) {\n    \
    \    $r = $r * $m % $p;\n        $m = ($m / $p) % $n;\n        $n = ($n / $p)\
    \ % $p;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpups4hm9c.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n < 0) {\n    return -modp($n, $p);\n  }\n  if ($p <\
    \ 0) {\n    return modp($n, $p);\n  }\n  if ($p == 1) {\n    return 1;\n  }\n\
    \  if ($p == 2) {\n    return $n;\n  }\n  if ($p == 3) {\n    return $n * $n;\n\
    \  }\n  if ($p == 6) {\n    return $n * $n * $n;\n  }\n  if ($p == 8) {\n    return\
    \ $n * $n * $n * $n;\n  }\n  if ($p == 2) {\n    return $n * $n;\n  }\n  if ($p\
    \ == 4) {\n    return $n * $n * $n;\n  }\n  if ($p == 6) {\n    return $n * $n\
    \ * $n * $n;\n  }\n  if ($p == 8) {\n    return $n * $n * $n * $n * $n;\n  }\n\
    \  if ($p == 9) {\n    return $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 10)\
    \ {\n    return $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 11) {\n  \
    \  return $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 12) {\n   \
    \ return $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 13) {\n\
    \    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p ==\
    \ 14) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n\
    \  if ($p == 15) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n;\n  }\n  if ($p == 16) {\n    return $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p == 17) {\n    return $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($p\
    \ == 18) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n;\n  }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpgzsra_o4.php on line 87

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n  }\n  $m = (int)\
    \ ($n / $p);\n  return $m * modp($n, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8xh3bu6.php:33\n\
    Stack trace:\n#0 /tmp/tmpy8xh3bu6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpy8xh3bu6.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  if ($n >= $p) {\n    return $p;\n  }\n  if ($p % 4 == 0) {\n\
    \    return pow($n, $p - 2);\n  }\n  if ($p % 3 == 0) {\n    return pow($n, $p\
    \ - 3);\n  }\n  return pow($n, $p - 4);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhicl2kk.php:27\n\
    Stack trace:\n#0 /tmp/tmpvhicl2kk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvhicl2kk.php\
    \ on line 27\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  if ($n >= $p) {\n    return 1;\n  }\n  if ($n == 1) {\n  \
    \  return $p;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p % 2 == 0)\
    \ {\n    return modp($n / 2, $p) * modp($n, $p) % $p;\n  }\n  return modp($n /\
    \ 2, $p) * modp($n, $p) + modp($n / 2, $p - 1) * modp($n, $p - 1);\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp_ajlv6cy.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ modp($n, $p);\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n == 0) {\n\
    \    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n) {\n\
    \    return $p - modp($n, $p);\n  }\n  $m = $n % $p;\n  if ($m == 0) {\n    return\
    \ $p;\n  }\n  return modp($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp6xkeefq9.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n < 0) {\n    return -modp($n, $p);\n  }\n  if ($p <\
    \ 0) {\n    return modp($n, $p);\n  }\n  if ($n == 1) {\n    return $p;\n  }\n\
    \  if ($p == 1) {\n    return $n;\n  }\n  if ($p > $n) {\n    return modp($n,\
    \ $p);\n  }\n  $m = (int) ($p * log($n) / log($p));\n  return $n % $p ? modp($n,\
    \ $p) - $m : $m;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpgohiuq8a.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $m = (int) ($p *\
    \ log($n) / log($p));\n  return $n % $p ? $m : $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyjnf_w7.php:27\n\
    Stack trace:\n#0 /tmp/tmpuyjnf_w7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuyjnf_w7.php\
    \ on line 27\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $r = 1;\n    $t = $n;\n    while ($t != 0) {\n   \
    \     if ($t % $p == 0) {\n            $r *= $p;\n        }\n        $t /= $p;\n\
    \    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpqt57g03y.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  if ($p < $n) {\n\
    \    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j12r_2x.php:33\n\
    Stack trace:\n#0 /tmp/tmp3j12r_2x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3j12r_2x.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14trr4h1.php:12\n\
    Stack trace:\n#0 /tmp/tmp14trr4h1.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp14trr4h1.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n  }\n  $m = (int)\
    \ ($p / $n);\n  if ($m == 0) {\n    return $n;\n  }\n  if ($m == $n) {\n    return\
    \ $p;\n  }\n  return ($n % $p + $m) % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax0oxkua.php:39\n\
    Stack trace:\n#0 /tmp/tmpax0oxkua.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpax0oxkua.php\
    \ on line 39\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $r = 1;\n    while ($p > 1) {\n        $r *= $p;\n\
    \        $p -= 1;\n    }\n    return $r % $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpd9izhh6z.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $m = ($p + $n) %\
    \ $p;\n  if ($m == 0) {\n    return $p;\n  }\n  return $m;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4p4l0hlw.php:30\n\
    Stack trace:\n#0 /tmp/tmp4p4l0hlw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4p4l0hlw.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  $x = 1;\n  for ($i = 0; $i < $p; $i++) {\n    $x = ($x * $n)\
    \ % $p;\n  }\n  return $x;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkieuu8r.php:22\n\
    Stack trace:\n#0 /tmp/tmpwkieuu8r.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwkieuu8r.php\
    \ on line 22\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p == 1) {\n   \
    \ return $n;\n  }\n  if ($p < 0) {\n    return modp($n, $p - 1);\n  }\n  $r =\
    \ 1;\n  for ($i = 0; $i < $p; $i++) {\n    $r *= $n;\n    $r %= $p;\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp759zdcae.php:32\n\
    Stack trace:\n#0 /tmp/tmp759zdcae.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp759zdcae.php\
    \ on line 32\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $r = $n % $p;\n \
    \ if ($r == 0) {\n    return $p;\n  }\n  return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgdx31dm.php:30\n\
    Stack trace:\n#0 /tmp/tmpjgdx31dm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjgdx31dm.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n\
    \  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p < 0) {\n    return $modp($n,\
    \ -$p);\n  }\n  $x = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $x = $x * $p % $n;\n\
    \  }\n  return $x;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp560sqp2h.php:27\n\
    Stack trace:\n#0 /tmp/tmp560sqp2h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp560sqp2h.php\
    \ on line 27\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($n < 0) {\n        return\
    \ modp($n * -$p, $p);\n    }\n    if ($p < 0) {\n        return modp($n, $p *\
    \ -$n);\n    }\n    if ($p > $n) {\n        return modp($n, $p);\n    }\n    $r\
    \ = 1;\n    $t = $n;\n    while ($t > 0) {\n        if ($t % 2 == 1) {\n     \
    \       $r += $p;\n        }\n        $t /= 2;\n        $p *= $p;\n    }\n   \
    \ return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpb_4rfgsu.php on line 5

    '
  timestamp: 1659730925
- exit_code: -1
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n\
    \    $p = -$p;\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n\
    \    return $n;\n  }\n  $x = 1;\n  while ($p > 0) {\n    if ($n & $p) {\n    \
    \  $x = ($x * $x) % $p;\n    }\n    $p = ($p * $p) % $n;\n  }\n  return $x;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659730930
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $p; ++$i) {\n    $r *= $n;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bll10if.php:18\n\
    Stack trace:\n#0 /tmp/tmp3bll10if.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3bll10if.php\
    \ on line 18\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n\
    \    $p = -$p;\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n\
    \    return $p;\n  }\n  if ($n == $p) {\n    return 0;\n  }\n  if ($n == 0) {\n\
    \    return 1;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($n == 2) {\n\
    \    return $p + modp($p - 1, $p);\n  }\n  if ($n == 3) {\n    return $p + modp($p\
    \ - 2, $p) + modp($p - 1, $p);\n  }\n  if ($n == 4) {\n    return $p + modp($p\
    \ - 3, $p) + modp($p - 2, $p) + modp($p - 1, $p);\n  }\n  if ($n == 5) {\n   \
    \ return $p + modp($p - 4, $p) + modp($p - 3, $p) + modp($p - 2, $p) + modp($p\
    \ - 1, $p);\n  }\n  if ($n == 6) {\n    return $p + modp($p - 5, $p) + modp($p\
    \ - 4, $p) + modp($p - 3, $p) + modp($p - 2, $p) + modp($p - 1, $p);\n  }\n  if\
    \ ($n == 7) {\n    return $p + modp($p - 6, $p) + modp($p - 5, $p) + modp($p -\
    \ 4, $p) + modp($p - 3, $p) + modp($p - 2, $p) + modp($p - 1, $p);\n  }\n  if\
    \ ($n == 8) {\n    return $p + modp($p - 7, $p) + modp($p - 6, $p) + modp($p -\
    \ 5, $p) + modp($p - 4, $p) + modp($p - 3, $p) + modp($p - 2, $p) + modp($p -\
    \ 1, $p);\n  }\n  if ($n == 9) {\n    return $p + modp($p - 8, $p) + modp($p -\
    \ 7, $p) + modp($p - 6, $p) + modp($p - 5, $p) + modp($p - 4, $p) + modp($p -\
    \ 3, $p) + modp($p - 2, $p) + modp($p - 1, $p);\n  }\n  if ($n == 10) {\n    return\
    \ $p + modp($p - 9, $p) + modp($p - 8, $p) + modp($p - 7, $p) + modp($p - 6, \n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpeqyxaepl.php on line 51

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p < 0) {\n        return -modp($n,\
    \ $p);\n    }\n    if ($p === 0) {\n        return 1;\n    }\n    if ($p === 1)\
    \ {\n        return $n;\n    }\n    if ($p === 2) {\n        return $n * $n;\n\
    \    }\n    if ($p === 3) {\n        return $n * $n * $n;\n    }\n    if ($p ===\
    \ 4) {\n        return $n * $n * $n * $n;\n    }\n    if ($p === 5) {\n      \
    \  return $n * $n * $n * $n * $n;\n    }\n    if ($p === 6) {\n        return\
    \ $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 7) {\n        return $n\
    \ * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 8) {\n        return $n\
    \ * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 9) {\n        return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 10) {\n \
    \       return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if\
    \ ($p === 11) {\n        return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n;\n    }\n    if ($p === 12) {\n        return $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 13) {\n      \
    \  return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  \
    \  }\n    if ($p === 14) {\n        return $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p === 15) {\n        return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n\
    \    }\n    if ($p === 16) {\n        return $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p \nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph5dlxchf.php on line 65

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n\
    \  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p < 0) {\n    return $modp($n,\
    \ -$p);\n  }\n  if ($p > $n) {\n    return $modp($n, $p);\n  }\n  $r = 1;\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %= $p;\n  }\n  return $r;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpgexw0yvz.php:16\n\
    Stack trace:\n#0 /tmp/tmpgexw0yvz.php(27): modp(3, 5)\n#1 /tmp/tmpgexw0yvz.php(31):\
    \ candidate(3, 5)\n#2 /tmp/tmpgexw0yvz.php(40): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgexw0yvz.php on line 16\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n \
    \   return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd6_x0a5.php:13\n\
    Stack trace:\n#0 /tmp/tmpkd6_x0a5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpkd6_x0a5.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p, MATH_BIGINTEGER_MODE);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MODE - assumed 'MATH_BIGINTEGER_MODE'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn8jtl73.php:12\n\
    Stack trace:\n#0 /tmp/tmppn8jtl73.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppn8jtl73.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p % $p, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmp6dlt_yqc.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dlt_yqc.php:12\n\
    Stack trace:\n#0 /tmp/tmp6dlt_yqc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6dlt_yqc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = (-$n) %\
    \ $p;\n    if ($n < 0)\n      $n = (-$n) + $p;\n  }\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsyhb1y_.php:20\n\
    Stack trace:\n#0 /tmp/tmpzsyhb1y_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpzsyhb1y_.php\
    \ on line 20\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = modp($n % $p, $p);\n  return $m * $r + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpppc4v5n5.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n\
    \    $p = -$p;\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p > $n) {\n\
    \    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n\
    \  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2rkct19b.php:29\n\
    Stack trace:\n#0 /tmp/tmp2rkct19b.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2rkct19b.php\
    \ on line 29\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p < 0) {\n        return $n;\n  \
    \  }\n    if ($p == 0) {\n        return 1;\n    }\n    if ($p == 1) {\n     \
    \   return $n;\n    }\n    if ($p == 2) {\n        return ($n % 2) ? $n : $n +\
    \ 1;\n    }\n    $res = 1;\n    $p2 = $p >> 1;\n    $p4 = $p2 >> 2;\n    $p8 =\
    \ $p4 >> 3;\n    $p16 = $p8 >> 4;\n    $p32 = $p16 >> 5;\n    $p64 = $p32 >> 6;\n\
    \    while ($n > 0) {\n        if ($n & 1) {\n            $res = (2 * $res) %\
    \ $p;\n        }\n        $n = ($n >> 1) & $p2;\n        $p = ($p >> 1) & $p4;\n\
    \        $p2 = ($p2 >> 1) & $p8;\n        $p4 = ($p4 >> 1) & $p16;\n        $p8\
    \ = ($p8 >> 1) & $p32;\n        $p16 = ($p16 >> 1) & $p64;\n        $p32 = ($p32\
    \ >> 1) & $p128;\n        $p64 = ($p64 >> 1) & $p256;\n    }\n    return $res;\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2ostsbq.php:50\n\
    Stack trace:\n#0 /tmp/tmpb2ostsbq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpb2ostsbq.php\
    \ on line 50\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return bcmod($n, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpzb012kf0.php:4\n\
    Stack trace:\n#0 /tmp/tmpzb012kf0.php(8): modp(3, 5)\n#1 /tmp/tmpzb012kf0.php(12):\
    \ candidate(3, 5)\n#2 /tmp/tmpzb012kf0.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzb012kf0.php on line 4\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  if ($p < $n) {\n\
    \    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j12r_2x.php:33\n\
    Stack trace:\n#0 /tmp/tmp3j12r_2x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3j12r_2x.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return pow($n, $p, MATH_BIGINTEGER_MODE);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MODE - assumed 'MATH_BIGINTEGER_MODE'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmphld4mlgs.php\
    \ on line 4\n\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmphld4mlgs.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphld4mlgs.php:12\n\
    Stack trace:\n#0 /tmp/tmphld4mlgs.php(21): test()\n#1 {main}\n  thrown in /tmp/tmphld4mlgs.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p % $p, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmp6dlt_yqc.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dlt_yqc.php:12\n\
    Stack trace:\n#0 /tmp/tmp6dlt_yqc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp6dlt_yqc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $m = (int)\
    \ ($p / $n);\n  $r = $n % $p;\n  return $m * modp($n, $p) + $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5aqdwhoo.php:34\n\
    Stack trace:\n#0 /tmp/tmp5aqdwhoo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp5aqdwhoo.php\
    \ on line 34\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0) {\n    return 0;\n\
    \  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p < 0) {\n    return $n % $p;\n\
    \  }\n  if ($p > 0) {\n    return ($n % $p) + $p;\n  }\n  return $n % $p;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3tx5zum.php:26\n\
    Stack trace:\n#0 /tmp/tmpm3tx5zum.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm3tx5zum.php\
    \ on line 26\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0)\n    return\
    \ 0;\n  if ($n == 1)\n    return 1;\n  if ($p == 1)\n    return $n;\n  if ($p\
    \ > $n)\n    return modp($n, $p);\n  $r = 1;\n  for ($i = 0; $i < $n; $i++)\n\
    \    $r *= $p;\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp26v8xgur.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ modp($n, $p);\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n == 0) {\n\
    \    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n) {\n\
    \    return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $m = (int) ($n\
    \ / $p);\n  $r = $n % $p;\n  return $p * modp($m, $p) + $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0ukpe_z.php:34\n\
    Stack trace:\n#0 /tmp/tmpc0ukpe_z.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpc0ukpe_z.php\
    \ on line 34\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p < 0) {\n        return $n;\n  \
    \  }\n    if ($p > $n) {\n        return $p;\n    }\n    if ($n == $p) {\n   \
    \     return $n;\n    }\n    if ($n == 0) {\n        return 1;\n    }\n    if\
    \ ($n == 1) {\n        return $p;\n    }\n    if ($p == 1) {\n        return $n;\n\
    \    }\n    if ($p == 2) {\n        return $n * $n;\n    }\n    if ($p == 3) {\n\
    \        return $n * $n * $n;\n    }\n    if ($p == 4) {\n        return $n *\
    \ $n * $n * $n;\n    }\n    if ($p == 6) {\n        return $n * $n * $n * $n *\
    \ $n;\n    }\n    if ($p == 8) {\n        return $n * $n * $n * $n * $n * $n;\n\
    \    }\n    if ($p == $p - 1) {\n        return $n * $n * $n * $n * $n * $n;\n\
    \    }\n    if ($p == $p - 2) {\n        return $n * $n * $n * $n * $n * $n *\
    \ $n;\n    }\n    if ($p == $p - 3) {\n        return $n * $n * $n * $n * $n *\
    \ $n * $n * $n;\n    }\n    if ($p == $p - 4) {\n        return $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n;\n    }\n    if ($p == $p - 5) {\n        return\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p == $p -\
    \ 6) {\n        return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n\
    \    }\n    if ($p == $p - 7) {\n        return $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n * $n;\n    }\n    if ($p == $p - 8) {\n        return $n *\
    \ $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n    }\n    if ($p ==\
    \ $p - 9) {\n        return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n;\n    }\n    if ($p == $p - 10) {\n        return $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * \nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp70msvpc_.php on line 72

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p == 1) {\n   \
    \ return $n;\n  }\n  if ($p < 0) {\n    return $modp($n, $p - 1);\n  }\n  $x =\
    \ $modp($n, $p);\n  if ($x < $p) {\n    return $x;\n  }\n  return $modp($n, $p\
    \ - $x);\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpbqzzgmkw.php:18\n\
    Stack trace:\n#0 /tmp/tmpbqzzgmkw.php(25): modp(3, 5)\n#1 /tmp/tmpbqzzgmkw.php(29):\
    \ candidate(3, 5)\n#2 /tmp/tmpbqzzgmkw.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpbqzzgmkw.php on line 18\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return $n;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n \
    \   return $n;\n  }\n  if ($n == $p) {\n    return $n;\n  }\n  if ($n % 2 == 0)\
    \ {\n    return $n % $p;\n  }\n  return modp($n / 2, $p) * $p + $n % $p;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6wqa43x.php:29\n\
    Stack trace:\n#0 /tmp/tmpk6wqa43x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk6wqa43x.php\
    \ on line 29\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p, MATH_BIGINTEGER_MODE);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Use of undefined constant MATH_BIGINTEGER_MODE - assumed 'MATH_BIGINTEGER_MODE'\
    \ (this will throw an Error in a future version of PHP) in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmppn8jtl73.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn8jtl73.php:12\n\
    Stack trace:\n#0 /tmp/tmppn8jtl73.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppn8jtl73.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n % $p;\n  }\n  $r = $n\
    \ % $p;\n  return $r == 0 ? $p : $r;\n}\n\nfunction candidate(...$args) {\n  \
    \  return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpng0steoa.php:33\n\
    Stack trace:\n#0 /tmp/tmpng0steoa.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpng0steoa.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p < 0) {\n    return\
    \ $modp($n, $p - 1);\n  }\n  if ($p > 0) {\n    return $modp($n, $p + 1);\n  }\n\
    \  if ($n == $p) {\n    return 1;\n  }\n  if ($n == ($p << 1)) {\n    return $n;\n\
    \  }\n  if ($n == ($p << 2)) {\n    return $n + ($p << 1);\n  }\n  if ($n == ($p\
    \ << 3)) {\n    return $n + ($p << 1) + 1;\n  }\n  if ($n == ($p << 4)) {\n  \
    \  return $n + ($p << 1) + 2;\n  }\n  if ($n == ($p << 5)) {\n    return $n +\
    \ ($p << 1) + 3;\n  }\n  if ($n == ($p << 6)) {\n    return $n + ($p << 1) + 4;\n\
    \  }\n  if ($n == ($p << 7)) {\n    return $n + ($p << 1) + 5;\n  }\n  if ($n\
    \ == ($p << 8)) {\n    return $n + ($p << 1) + 6;\n  }\n  if ($n == ($p << 9))\
    \ {\n    return $n + ($p << 1) + 7;\n  }\n  if ($n == ($p << 10)) {\n    return\
    \ $n + ($p << 1) + 8;\n  }\n  if ($n == ($p << 11)) {\n    return $n + ($p <<\
    \ 1) + 9;\n  }\n  if ($n == ($p << 12)) {\n    return $n + ($p << 1) + 10;\n \
    \ }\n  if ($n == ($p << 13)) {\n    return $n + ($p << 1) + 11;\n  }\n  if ($n\
    \ == ($p << 14)) {\n    return $n + ($p << 1) + 12;\n  }\n  if ($n == ($p << 15))\
    \ {\n    return $n + ($p << 1) + 13;\n  }\n  if ($n == ($p << 16)) {\n    return\
    \ $n + ($p << 1) + 14;\n  }\n  if ($n == ($p << 17)) {\n    return $n + ($p <<\
    \ 1) + 15;\n  }\n  if ($n == ($p << 18)) {\n    return $n + ($p << 1) + 16;\n\
    \  }\n  if ($n == ($p << 19)) {\n    return $n + ($p << 1) + 17;\n  }\n  if ($n\
    \ == ($p << 20)) {\n    return $n + ($p << 1) + 18;\n  }\n  if ($n == ($p << 21))\
    \ {\n    return $n + ($p << \nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjgm6ydgl.php on line 83

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n & ($p-1)) == 0 ? $n : $n % $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylkf3vu5.php:13\n\
    Stack trace:\n#0 /tmp/tmpylkf3vu5.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpylkf3vu5.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p - 2, $p);\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: pow() expects exactly 2 parameters, 3 given in /tmp/tmpeq9bqead.php\
    \ on line 4\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeq9bqead.php:12\n\
    Stack trace:\n#0 /tmp/tmpeq9bqead.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpeq9bqead.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($p > $n) {\n    return $n % $p;\n  }\n  return ($n % $p)\
    \ + $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsi81dkhr.php:21\n\
    Stack trace:\n#0 /tmp/tmpsi81dkhr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpsi81dkhr.php\
    \ on line 21\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2l5x59y.php:13\n\
    Stack trace:\n#0 /tmp/tmpa2l5x59y.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpa2l5x59y.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($p ==\
    \ 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($n ==\
    \ 0) {\n    return $p;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  if ($p <\
    \ $n) {\n    return $n;\n  }\n  $m = (int) ($p / $n);\n  $r = $n % $p;\n  return\
    \ $p * modp($m, $p) + $r;\n}\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ns7rod9.php:36\n\
    Stack trace:\n#0 /tmp/tmp7ns7rod9.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7ns7rod9.php\
    \ on line 36\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    $m = ($p + $n) % $p;\n    if ($m == 0) {\n       \
    \ return $p;\n    }\n    return modp($m, $p);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmph6v6ry8e.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ $p) {\n    return 0;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n  if ($p ==\
    \ 0) {\n    return $n;\n  }\n  if ($p == 1) {\n    return $n;\n  }\n  if ($p ==\
    \ 2) {\n    return $n % 2 ? $n : $n + 1;\n  }\n  if ($p % 2 == 0) {\n    return\
    \ $n + ($p / 2);\n  }\n  return $n + ($p / 2) + ($p % 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecc88c0a.php:38\n\
    Stack trace:\n#0 /tmp/tmpecc88c0a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpecc88c0a.php\
    \ on line 38\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p < 0) {\n    return $modp($n, $p);\n  }\n  $t = $modp($n,\
    \ $p);\n  if ($t < 0) {\n    return $t;\n  }\n  return $modp($t, $p);\n}\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Function name must be a string in /tmp/tmpj3th0lv1.php:18\n\
    Stack trace:\n#0 /tmp/tmpj3th0lv1.php(25): modp(3, 5)\n#1 /tmp/tmpj3th0lv1.php(29):\
    \ candidate(3, 5)\n#2 /tmp/tmpj3th0lv1.php(38): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpj3th0lv1.php on line 18\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  $r = $n % $p;\n \
    \ return $r == 0 ? $p : $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdx6mz5t.php:27\n\
    Stack trace:\n#0 /tmp/tmpkdx6mz5t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpkdx6mz5t.php\
    \ on line 27\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n == 1) {\n        return $p;\n    }\n   \
    \ if ($p == 1) {\n        return $n;\n    }\n    if ($p > $n) {\n        return\
    \ modp($n, $p);\n    }\n    if ($p < $n) {\n        return modp($n, $p);\n   \
    \ }\n    $r = 1;\n    while ($p > 1) {\n        $r = $r * $p;\n        $p = $p\
    \ / 2;\n    }\n    return $r;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp1uk9rfqm.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return bcmod($n, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpzb012kf0.php:4\n\
    Stack trace:\n#0 /tmp/tmpzb012kf0.php(8): modp(3, 5)\n#1 /tmp/tmpzb012kf0.php(12):\
    \ candidate(3, 5)\n#2 /tmp/tmpzb012kf0.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzb012kf0.php on line 4\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p == 0) {\n        return 1;\n  \
    \  }\n    if ($p == 1) {\n        return $n;\n    }\n    $res = 1;\n    while\
    \ ($n > 0) {\n        if ($n & 1) {\n            $res *= $p;\n        }\n    \
    \    $n >>= 1;\n        $p *= $p;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc2ldbex.php:32\n\
    Stack trace:\n#0 /tmp/tmpzc2ldbex.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzc2ldbex.php\
    \ on line 32\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  while ($n > 0) {\n    if ($n % $p == 0) {\n      $r *= $p;\n\
    \      $r %= $p;\n    }\n    $n = (int) ($n / $p);\n  }\n  return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvq6bcufn.php:20\n\
    Stack trace:\n#0 /tmp/tmpvq6bcufn.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvq6bcufn.php\
    \ on line 20\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p < 0) {\n    return modp($n, $p - 1);\n  }\n  if ($p\
    \ > $n) {\n    return modp($n, $p + 1);\n  }\n  $m = (int) ($p * log($n) / log($p));\n\
    \  return $n % $p ? modp($n, $p + $m) : modp($n, $p);\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmp_b2l1vl9.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0)\n    return\
    \ 0;\n  if ($n == 1)\n    return 1;\n  if ($p == 1)\n    return $n;\n  if ($p\
    \ > $n)\n    return modp($n, $p);\n  if ($p < -$n)\n    return modp($n, $p);\n\
    \  $r = 1;\n  for ($i = 0; $i < $n; $i++)\n    $r *= $p;\n  return $r;\n}\n\n\
    function candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpx7lshu7e.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = modp($n % $p, $p);\n  return $m * $r + $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpppc4v5n5.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ modp($n * -$p, $p);\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0 || $p == 0) {\n    return 0;\n  }\n  if ($n == 1 && $p == 1) {\n    return\
    \ 1;\n  }\n  if ($n == $p) {\n    return 1;\n  }\n  if ($n == ($p << 1)) {\n \
    \   return $n;\n  }\n  if ($n == ($p << 2)) {\n    return $n * $n;\n  }\n  if\
    \ ($n == ($p << 3)) {\n    return $n * $n * $n;\n  }\n  if ($n == ($p << 4)) {\n\
    \    return $n * $n * $n * $n;\n  }\n  if ($n == ($p << 5)) {\n    return $n *\
    \ $n * $n * $n * $n;\n  }\n  if ($n == ($p << 6)) {\n    return $n * $n * $n *\
    \ $n * $n * $n;\n  }\n  if ($n == ($p << 7)) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n;\n  }\n  if ($n == ($p << 8)) {\n    return $n * $n * $n * $n *\
    \ $n * $n * $n * $n;\n  }\n  if ($n == ($p << 9)) {\n    return $n * $n * $n *\
    \ $n * $n * $n * $n * $n * $n;\n  }\n  if ($n == ($p << 10)) {\n    return $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($n == ($p << 11))\
    \ {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n \
    \ if ($n == ($p << 12)) {\n    return $n * $n * $n * $n * $n * $n * $n * $n *\
    \ $n * $n * $n * $n;\n  }\n  if ($n == ($p << 13)) {\n    return $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n;\n  }\n  if ($n == ($p <<\
    \ 14)) {\n    return $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n * $n\
    \ * $n * $n;\n  }\n  if ($n == ($p << 15)) {\n    return $n * $n * $n * $n * $n\
    \ * $n * $n * $n * $n * $n * $n * $n * $n * $\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpzs17pfiv.php on line 65

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return bcmod($n, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpzb012kf0.php:4\n\
    Stack trace:\n#0 /tmp/tmpzb012kf0.php(8): modp(3, 5)\n#1 /tmp/tmpzb012kf0.php(12):\
    \ candidate(3, 5)\n#2 /tmp/tmpzb012kf0.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzb012kf0.php on line 4\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfgo9cwa.php:13\n\
    Stack trace:\n#0 /tmp/tmpdfgo9cwa.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpdfgo9cwa.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n <= 0 || $p <= 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return modp($n, $p);\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = $n % $p;\n  return modp($m, $p) + $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpuvstuvos.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return $p;\n  }\n  if ($p == 1) {\n  \
    \  return $n;\n  }\n  if ($p > $n) {\n    return $p;\n  }\n  if ($p < $n) {\n\
    \    return $n;\n  }\n  $r = $n % $p;\n  if ($r == 0) {\n    return $p;\n  }\n\
    \  return $n;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j12r_2x.php:33\n\
    Stack trace:\n#0 /tmp/tmp3j12r_2x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3j12r_2x.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n == 0 || $p == 0) {\n\
    \        return 0;\n    }\n    if ($n < 0) {\n        $n = -$n;\n        $p =\
    \ -$p;\n    }\n    if ($p < 0) {\n        $p = -$p;\n    }\n    if ($p > $n) {\n\
    \        return 0;\n    }\n    if ($p < $n) {\n        return $n;\n    }\n   \
    \ if ($n == 1) {\n        return 1;\n    }\n    $m = $n;\n    $r = 1;\n    while\
    \ ($m > 0) {\n        $r = $r * $m % $p;\n        $m = (int) ($m / $p);\n    }\n\
    \    return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_476iorf.php:39\n\
    Stack trace:\n#0 /tmp/tmp_476iorf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_476iorf.php\
    \ on line 39\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return bcmod($n, $p);\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmod() in /tmp/tmpzb012kf0.php:4\n\
    Stack trace:\n#0 /tmp/tmpzb012kf0.php(8): modp(3, 5)\n#1 /tmp/tmpzb012kf0.php(12):\
    \ candidate(3, 5)\n#2 /tmp/tmpzb012kf0.php(21): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpzb012kf0.php on line 4\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p + $p) % $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2l5x59y.php:13\n\
    Stack trace:\n#0 /tmp/tmpa2l5x59y.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpa2l5x59y.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $n; $i++) {\n    $r *= $p;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0szitq7.php:17\n\
    Stack trace:\n#0 /tmp/tmpa0szitq7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpa0szitq7.php\
    \ on line 17\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ modp($n, $p);\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n == $p) {\n\
    \    return 0;\n  }\n  if ($n == 0) {\n    return 1;\n  }\n  if ($p == 0) {\n\
    \    return $n;\n  }\n  if ($p > $n) {\n    return $p - modp($n, $p);\n  }\n \
    \ $m = (int) ($p / $n);\n  $r = $p % $n;\n  return $m * modp($n, $m) + $r;\n}\n\
    \nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpjap7ox8t.php on line 5

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  if ($p < $n) {\n    return $n;\n  }\n  $m = (int)\
    \ ($n / $p);\n  $r = $n % $p;\n  return $p * modp($m, $p) + $r;\n}\nfunction candidate(...$args)\
    \ {\n    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qvmiseh.php:33\n\
    Stack trace:\n#0 /tmp/tmp0qvmiseh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0qvmiseh.php\
    \ on line 33\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p < 0) {\n        return -modp($n,\
    \ $p);\n    }\n    if ($p == 0) {\n        return 1;\n    }\n    if ($p == 1)\
    \ {\n        return $n;\n    }\n    if ($n == $p) {\n        return $n;\n    }\n\
    \    if ($n == ($p << 1)) {\n        return $n;\n    }\n    $n1 = $n & -p;\n \
    \   $n2 = $n >> $p;\n    $n3 = $n1 >> 1;\n    $n4 = ($n1 & 1) << 1;\n    $n5 =\
    \ ($n2 & 1) << 1;\n    $n6 = ($n3 & 1) << 1;\n    $n7 = ($n4 & 1) << 1;\n    $n8\
    \ = ($n5 & 1) << 1;\n    $n9 = ($n6 & 1) << 1;\n    $n10 = ($n7 & 1) << 1;\n \
    \   $n11 = ($n8 & 1) << 1;\n    $n12 = ($n9 & 1) << 1;\n    $n13 = ($n10 & 1)\
    \ << 1;\n    $n14 = ($n11 & 1) << 1;\n    $n15 = ($n12 & 1) << 1;\n    $n16 =\
    \ ($n13 & 1) << 1;\n    $n17 = ($n14 & 1) << 1;\n    $n18 = ($n15 & 1) << 1;\n\
    \    $n19 = ($n16 & 1) << 1;\n    $n20 = ($n17 & 1) << 1;\n    $n21 = ($n18 &\
    \ 1) << 1;\n    $n22 = ($n19 & 1) << 1;\n    $n23 = ($n20 & 1) << 1;\n    $n24\
    \ = ($n21 & 1) << 1;\n    $n25 = ($n22 & 1) << 1;\n    $n26 = ($n23 & 1) << 1;\n\
    \    $n27 = ($n24 & 1) << 1;\n    $n28 = ($n25 & 1) << 1;\n    $n29 = ($n26 &\
    \ 1) << 1;\n    $n30 = ($n27 & 1) << 1;\n    $n31 = ($n28 & 1) << 1;\n    $n32\
    \ = ($n29 & 1) << 1;\n    $n33 = ($n30 & 1) << 1;\n    $n34 = ($n31 & 1) << 1;\n\
    \    $n35 = ($n32 & 1) << 1;\n    $n36\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpaa330pe4.php on line 61

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $r = 1;\n  for ($i = 0; $i < $p; $i++) {\n    $r *= $n;\n    $r %=\
    \ $p;\n  }\n  return $r;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r6qr3et.php:18\n\
    Stack trace:\n#0 /tmp/tmp0r6qr3et.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp0r6qr3et.php\
    \ on line 18\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return $n % $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppui7ohfy.php:13\n\
    Stack trace:\n#0 /tmp/tmppui7ohfy.php(21): test()\n#1 {main}\n  thrown in /tmp/tmppui7ohfy.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p < 0) {\n    return\
    \ $n % $p;\n  }\n  return ($n % $p) / $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101,\
    \ 101) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3,\
    \ 11) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100,\
    \ 101) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30,\
    \ 5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31,\
    \ 5) !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujt_ho47.php:23\n\
    Stack trace:\n#0 /tmp/tmpujt_ho47.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpujt_ho47.php\
    \ on line 23\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n == 0 || $p == 0) {\n   \
    \ return 0;\n  }\n  if ($n == 1) {\n    return 1;\n  }\n  if ($p == 1) {\n   \
    \ return $n;\n  }\n  if ($p < 0) {\n    return $n % $p;\n  }\n  return ($n % $p)\
    \ / $p;\n}\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8wypg99.php:26\n\
    Stack trace:\n#0 /tmp/tmpm8wypg99.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm8wypg99.php\
    \ on line 26\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    $n = (int) $n;\n    $p = (int) $p;\n    if ($n < 0) {\n        $n\
    \ = -$n;\n        $p = -$p;\n    }\n    if ($p < 0) {\n        $p = -$p;\n   \
    \ }\n    if ($n == 0 || $p == 0) {\n        return 0;\n    }\n    if ($n == 1)\
    \ {\n        return $p;\n    }\n    if ($p == 1) {\n        return $n;\n    }\n\
    \    if ($p == 2) {\n        return $n % $n;\n    }\n    if ($p == 3) {\n    \
    \    return ($n % $n) * $n;\n    }\n    if ($p == 4) {\n        return ($n % $n)\
    \ * ($n % $n);\n    }\n    if ($p == 6) {\n        return ($n % $n) * (($n % $n)\
    \ * ($n % $n));\n    }\n    if ($p == 8) {\n        return ($n % $n) * (($n %\
    \ $n) * (($n % $n) * ($n % $n)));\n    }\n    if ($p == 9) {\n        return ($n\
    \ % $n) * (($n % $n) * (($n % $n) * (($n % $n) * ($n % $n))));\n    }\n    if\
    \ ($p == 16) {\n        return ($n % $n) * (($n % $n) * (($n % $n) * (($n % $n)\
    \ * (($n % $n) * ($n % $n)))));\n    }\n    if ($p == 25) {\n        return ($n\
    \ % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * ($n\
    \ % $n))))));\n    }\n    if ($p == 64) {\n        return ($n % $n) * (($n % $n)\
    \ * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * ($n % $n))))));\n\
    \    }\n    if ($p == 128) {\n        return ($n % $n) * (($n % $n) * (($n % $n)\
    \ * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * ($n % $n))))));\n\
    \    }\n    if ($p == 256) {\n        return ($n % $n) * (($n % $n) * (($n % $n)\
    \ * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n) * (($n % $n)\
    \ * ($n % $n))))));\n    }\n    if ($p == 512) {\n        return ($n % $n) * (($n\
    \ % $n) * (($n % $n) * (($n % $n\nfunction candidate(...$args) {\n    return modp(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpj4vrlm5_.php on line 47

    '
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    return $p -\
    \ ($n * modp($n, $p));\n  }\n  if ($p < 0) {\n    return $n;\n  }\n  if ($n ==\
    \ 0) {\n    return 0;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p > $n)\
    \ {\n    return $p;\n  }\n  $m = (int) ($n / $p);\n  return $n * modp($m, $p);\n\
    }\n\nfunction candidate(...$args) {\n    return modp(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1101, 101) !== 2) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 101) !== 1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3, 11) !== 8) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(100, 101) !== 1) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(30, 5) !== 4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(31, 5) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_0e2v4l.php:30\n\
    Stack trace:\n#0 /tmp/tmpr_0e2v4l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr_0e2v4l.php\
    \ on line 30\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return pow($n, $p) % $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0c1f295.php:13\n\
    Stack trace:\n#0 /tmp/tmpz0c1f295.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpz0c1f295.php\
    \ on line 13\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n    return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n   \
    \ return modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101)\
    \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11)\
    \ !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplvj0g6sc.php:12\n\
    Stack trace:\n#0 /tmp/tmplvj0g6sc.php(21): test()\n#1 {main}\n  thrown in /tmp/tmplvj0g6sc.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  return ($n % $p) + $p;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14trr4h1.php:12\n\
    Stack trace:\n#0 /tmp/tmp14trr4h1.php(21): test()\n#1 {main}\n  thrown in /tmp/tmp14trr4h1.php\
    \ on line 12\n"
  timestamp: 1659730925
- exit_code: 255
  program: "<?php\n// Return 2^n modulo p (be aware of numerics).\nfunction modp($n,\
    \ $p) {\n  $n = (int) $n;\n  $p = (int) $p;\n  if ($n < 0) {\n    $n = -$n;\n\
    \    $p = -$p;\n  }\n  if ($p == 0) {\n    return 1;\n  }\n  if ($p == 1) {\n\
    \    return $n;\n  }\n  if ($p == 2) {\n    return $n % 2 ? $n : $n + 1;\n  }\n\
    \  $res = $n;\n  for ($i = 3; $i >= 0; $i--) {\n    $res = ($n % $p) * $p + ($res\
    \ / $p);\n  }\n  return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ modp(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3, 5) !== 3)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1101, 101) !==\
    \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3, 11) !==\
    \ 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(100, 101) !==\
    \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(30, 5) !==\
    \ 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(31, 5) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fy_xeqm.php:31\n\
    Stack trace:\n#0 /tmp/tmp3fy_xeqm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3fy_xeqm.php\
    \ on line 31\n"
  timestamp: 1659730925
