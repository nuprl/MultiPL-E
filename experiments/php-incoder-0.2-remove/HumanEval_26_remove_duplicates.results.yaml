language: php
name: HumanEval_26_remove_duplicates
results:
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = count($numbers);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if (!in_array($numbers[$i], $unique))\
    \ {\n      $unique[] = $numbers[$i];\n    }\n  }\n  return $unique;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper1uc9wv.php:21\n\
    Stack trace:\n#0 /tmp/tmper1uc9wv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmper1uc9wv.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/17770394)\n<|/ c |>\n<| c |>\n\
    I believe it does. I provided a solution that removes duplicates from a list.\
    \ OP asked for a way to remove duplicates from a list while preserving the order\
    \ of the elements. I provided a solution that does that. OP did not ask for an\
    \ algorithm to remove duplicates from a list. OP asked for a way to remove duplicates\
    \ from a list while preserving the order of the elements. I provided a solution\
    \ that does that. OP did not ask for an algorithm to remove duplicates from a\
    \ list. OP asked for a way to remove duplicates from a list while preserving the\
    \ order of the elements. I provided a solution that does that. OP did not ask\
    \ for an algorithm to remove duplicates from a list. OP asked for a way to remove\
    \ duplicates from a list while preserving the order of the elements. I provided\
    \ a solution that does that. OP did not ask for an algorithm to remove duplicates\
    \ from a list. OP asked for a way to remove duplicates from a list while preserving\
    \ the order of the elements.\n<|/ c |>\n<| c |>\nI believe it does. I provided\
    \ a solution that removes duplicates from a list. OP asked for a way to remove\
    \ duplicates from a list while preserving the order of the elements. I provided\
    \ a solution that does that. OP did not ask for an algorithm to remove duplicates\
    \ from a list. OP asked for a way to remove duplicates from a list while preserving\
    \ the order of the elements. I provided a solution that does that. OP did not\
    \ ask for an algorithm to remove duplicates from a list. OP asked for a way to\
    \ remove duplicates from a list while preserving the order of the elements. I\
    \ provided a solution that does that. OP did not ask for an algorithm to remove\
    \ duplicates from a list. OP asked for a way to remove duplicates from a list\
    \ while preserving the order of the elements.\n<|/ c |>\n<| c |>\nI believe it\
    \ does. I provided a solution that removes duplicates from a list. OP asked for\
    \ a way to remove duplicates from a list \nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp4kulcehq.php on line 15

    '
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  $counts = [];\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($counts[$number])) {\n      $unique[] = $number;\n\
    \      $counts[$number] = 1;\n    } else {\n      $counts[$number]++;\n    }\n\
    \  }\n  return $unique;\n}\n\n$numbers = [1, 2, 3, 4, 4, 5];\n$unique = remove_duplicates($numbers);\n\
    print_r($unique);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwn1ru3km.php:28\n\
    Stack trace:\n#0 /tmp/tmpwn1ru3km.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwn1ru3km.php\
    \ on line 28\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  $seen = [];\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number] = true;\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq49qtcg2.php:22\n\
    Stack trace:\n#0 /tmp/tmpq49qtcg2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpq49qtcg2.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = true;\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb50jihga.php:22\n\
    Stack trace:\n#0 /tmp/tmpb50jihga.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb50jihga.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzvx6fpv.php:22\n\
    Stack trace:\n#0 /tmp/tmpjzvx6fpv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjzvx6fpv.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  $numbers = array_unique($numbers);\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    unset($numbers[$number]);\n    } else {\n      $unique[] = $number;\n   \
    \ }\n  }\n  return $numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6sqrasf.php:23\n\
    Stack trace:\n#0 /tmp/tmpu6sqrasf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpu6sqrasf.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $key => $value) {\n    if (!in_array($value, $unique))\
    \ {\n      $unique[] = $value;\n    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkscc3zxu.php:22\n\
    Stack trace:\n#0 /tmp/tmpkscc3zxu.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpkscc3zxu.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $unique[$number]\
    \ = $number;\n      $count[$number] = 1;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07m8ew3s.php:24\n\
    Stack trace:\n#0 /tmp/tmp07m8ew3s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp07m8ew3s.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\n$numbers = range(1, 100);\n$numbers = remove_duplicates($numbers);\n\
    sort($numbers);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2fsskjj.php:24\n\
    Stack trace:\n#0 /tmp/tmpi2fsskjj.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpi2fsskjj.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4252k5pt.php:20\n\
    Stack trace:\n#0 /tmp/tmp4252k5pt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4252k5pt.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    \n$numbers = array(1, 2, 3, 4, 4, 5);\n$result = remove_duplicates($numbers);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n    [4]\
    \ => 5\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpir2cx2ha.php:26\n\
    Stack trace:\n#0 /tmp/tmpir2cx2ha.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpir2cx2ha.php\
    \ on line 26\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisk_53yu.php:22\n\
    Stack trace:\n#0 /tmp/tmpisk_53yu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisk_53yu.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $unique)) {\n      continue;\n    }\n    $unique[]\
    \ = $number;\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwvebs46.php:21\n\
    Stack trace:\n#0 /tmp/tmpiwvebs46.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpiwvebs46.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisk_53yu.php:22\n\
    Stack trace:\n#0 /tmp/tmpisk_53yu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisk_53yu.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4252k5pt.php:20\n\
    Stack trace:\n#0 /tmp/tmp4252k5pt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4252k5pt.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n$array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmlpv7hgw.php on line 15

    '
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisk_53yu.php:22\n\
    Stack trace:\n#0 /tmp/tmpisk_53yu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisk_53yu.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgovqnz1.php:20\n\
    Stack trace:\n#0 /tmp/tmpwgovqnz1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwgovqnz1.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  $counts = [];\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($counts[$number])) {\n      $counts[$number] =\
    \ 1;\n    } else {\n      $counts[$number]++;\n    }\n  }\n  foreach ($counts\
    \ as $number => $count) {\n    if ($count > 1) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5h5yglms.php:27\n\
    Stack trace:\n#0 /tmp/tmp5h5yglms.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5h5yglms.php\
    \ on line 27\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (in_array($number, $unique)) {\n      unset($numbers[array_search($number,\
    \ $unique)]);\n    } else {\n      $unique[] = $number;\n    }\n  }\n  return\
    \ $numbers;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcqw81hc.php:22\n\
    Stack trace:\n#0 /tmp/tmppcqw81hc.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppcqw81hc.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb_cx9ff.php:20\n\
    Stack trace:\n#0 /tmp/tmpkb_cx9ff.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkb_cx9ff.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv9in1rs.php:24\n\
    Stack trace:\n#0 /tmp/tmptv9in1rs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptv9in1rs.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgovqnz1.php:20\n\
    Stack trace:\n#0 /tmp/tmpwgovqnz1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwgovqnz1.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $unique)) {\n      continue;\n    }\n    $unique[]\
    \ = $number;\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppufed8ce.php:22\n\
    Stack trace:\n#0 /tmp/tmppufed8ce.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppufed8ce.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    </code>\n<|/ a |>\n<| a tags=php,arrays,multidimensional-array |>\n<code>\n$arr\
    \ = [\n    0 => [\n        'id' => 1,\n        'name' => 'John',\n        'age'\
    \ => 30,\n        'sex' => 'male'\n    ],\n    1 => [\n        'id' => 2,\n  \
    \      'name' => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n\
    \    2 => [\n        'id' => 3,\n        'name' => 'Jane',\n        'age' => 30,\n\
    \        'sex' => 'male'\n    ],\n    3 => [\n        'id' => 4,\n        'name'\
    \ => 'John',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    4 =>\
    \ [\n        'id' => 5,\n        'name' => 'Jane',\n        'age' => 30,\n   \
    \     'sex' => 'male'\n    ],\n    5 => [\n        'id' => 6,\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    6 =>\
    \ [\n        'id' => 7,\n        'name' => 'Jane',\n        'age' => 30,\n   \
    \     'sex' => 'male'\n    ],\n    7 => [\n        'id' => 8,\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    8 =>\
    \ [\n        'id' => 9,\n        'name' => 'Jane',\n        'age' => 30,\n   \
    \     'sex' => 'male'\n    ],\n    9 => [\n        'id' => 10,\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    10 =>\
    \ [\n        'id' => 11,\n        'name' => 'Jane',\n        'age' => 30,\n  \
    \      'sex' => 'male'\n    ],\n    11 => [\n        'id' => 12,\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    12 =>\
    \ [\n        'id' => 13,\n        'name' => 'Jane',\n        'age' => 30,\n  \
    \      'sex' => 'male'\n    ],\n    13 => [\n        'id' => 14,\n        'name'\
    \ => 'Jane',\n        'age' => 30,\n        'sex' => 'male'\n    ],\n    14 =>\
    \ [\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptfhbfm4h.php on line 15

    '
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpisk_53yu.php:22\n\
    Stack trace:\n#0 /tmp/tmpisk_53yu.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpisk_53yu.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    } else {\n      unset($result[$number]);\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp669ol65c.php:21\n\
    Stack trace:\n#0 /tmp/tmp669ol65c.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp669ol65c.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $unique[$number]\
    \ = $number;\n      $count[$number] = 1;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07m8ew3s.php:24\n\
    Stack trace:\n#0 /tmp/tmp07m8ew3s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp07m8ew3s.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $unique[]\
    \ = $number;\n      $seen[$number] = true;\n    }\n  }\n  return $unique;\n}\n\
    \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygelvfbs.php:23\n\
    Stack trace:\n#0 /tmp/tmpygelvfbs.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpygelvfbs.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $count[$number]\
    \ = 1;\n      $unique[$number] = $number;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayonwa92.php:24\n\
    Stack trace:\n#0 /tmp/tmpayonwa92.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpayonwa92.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpd2vc13na.php on line 15

    '
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $unique)) {\n      continue;\n    }\n    $unique[]\
    \ = $number;\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n  \
    \  return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppufed8ce.php:22\n\
    Stack trace:\n#0 /tmp/tmppufed8ce.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppufed8ce.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u1qzy0n.php:23\n\
    Stack trace:\n#0 /tmp/tmp4u1qzy0n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4u1qzy0n.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z1vcxlu.php:23\n\
    Stack trace:\n#0 /tmp/tmp7z1vcxlu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7z1vcxlu.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $count[$number]\
    \ = 1;\n      $unique[$number] = $number;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkky4x8xs.php:23\n\
    Stack trace:\n#0 /tmp/tmpkky4x8xs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkky4x8xs.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_duc904e.php:19\n\
    Stack trace:\n#0 /tmp/tmp_duc904e.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_duc904e.php\
    \ on line 19\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv9in1rs.php:24\n\
    Stack trace:\n#0 /tmp/tmptv9in1rs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptv9in1rs.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    }\n  }\n  return $unique;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmrf9m7i.php:21\n\
    Stack trace:\n#0 /tmp/tmprmrf9m7i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprmrf9m7i.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  $seen = [];\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number] = true;\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb3xyabl.php:23\n\
    Stack trace:\n#0 /tmp/tmptb3xyabl.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptb3xyabl.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n   \
    \   $dupes[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtszq7ds.php:23\n\
    Stack trace:\n#0 /tmp/tmpxtszq7ds.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxtszq7ds.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    }\n  }\n  return $unique;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmrf9m7i.php:21\n\
    Stack trace:\n#0 /tmp/tmprmrf9m7i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprmrf9m7i.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgovqnz1.php:20\n\
    Stack trace:\n#0 /tmp/tmpwgovqnz1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwgovqnz1.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs4ypkjy.php:21\n\
    Stack trace:\n#0 /tmp/tmpgs4ypkjy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgs4ypkjy.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    }\n  }\n  return $unique;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmrf9m7i.php:21\n\
    Stack trace:\n#0 /tmp/tmprmrf9m7i.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprmrf9m7i.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmqcq1z.php:20\n\
    Stack trace:\n#0 /tmp/tmpxjmqcq1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxjmqcq1z.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z1vcxlu.php:23\n\
    Stack trace:\n#0 /tmp/tmp7z1vcxlu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7z1vcxlu.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n   \
    \   $dupes[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtszq7ds.php:23\n\
    Stack trace:\n#0 /tmp/tmpxtszq7ds.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxtszq7ds.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $unique[]\
    \ = $number;\n      $count[$number] = 1;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt5a3p9c.php:24\n\
    Stack trace:\n#0 /tmp/tmpxt5a3p9c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxt5a3p9c.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4u1qzy0n.php:23\n\
    Stack trace:\n#0 /tmp/tmp4u1qzy0n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4u1qzy0n.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgovqnz1.php:20\n\
    Stack trace:\n#0 /tmp/tmpwgovqnz1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpwgovqnz1.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv9in1rs.php:24\n\
    Stack trace:\n#0 /tmp/tmptv9in1rs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptv9in1rs.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzvx6fpv.php:22\n\
    Stack trace:\n#0 /tmp/tmpjzvx6fpv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjzvx6fpv.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzvx6fpv.php:22\n\
    Stack trace:\n#0 /tmp/tmpjzvx6fpv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjzvx6fpv.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $unique_count = array();\n\
    \  foreach ($numbers as $number) {\n    if (!isset($unique[$number])) {\n    \
    \  $unique[$number] = $number;\n      $unique_count[$number] = 1;\n    } else\
    \ {\n      $unique_count[$number]++;\n    }\n  }\n  foreach ($unique_count as\
    \ $number => $count) {\n    if ($count > 1) {\n      unset($unique[$number]);\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pldqecv.php:28\n\
    Stack trace:\n#0 /tmp/tmp4pldqecv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4pldqecv.php\
    \ on line 28\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $dupes = array();\n \
    \ foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n  \
    \    $unique[] = $number;\n    } else {\n      $dupes[] = $number;\n    }\n  }\n\
    \  return $dupes;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z1vcxlu.php:23\n\
    Stack trace:\n#0 /tmp/tmp7z1vcxlu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp7z1vcxlu.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $unique[]\
    \ = $number;\n      $count[$number] = 1;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt5a3p9c.php:24\n\
    Stack trace:\n#0 /tmp/tmpxt5a3p9c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxt5a3p9c.php\
    \ on line 24\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp66qoahkq.php:21\n\
    Stack trace:\n#0 /tmp/tmp66qoahkq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp66qoahkq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    \n$numbers = [1, 2, 3, 1, 2, 3, 1, 2, 3];\n$result = remove_duplicates($numbers);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1qeyci5e.php:26\nStack trace:\n#0 /tmp/tmp1qeyci5e.php(29):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1qeyci5e.php on line 26\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = true;\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb50jihga.php:22\n\
    Stack trace:\n#0 /tmp/tmpb50jihga.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb50jihga.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  $seen = [];\n  foreach ($numbers\
    \ as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number] = true;\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq49qtcg2.php:22\n\
    Stack trace:\n#0 /tmp/tmpq49qtcg2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpq49qtcg2.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4252k5pt.php:20\n\
    Stack trace:\n#0 /tmp/tmp4252k5pt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4252k5pt.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = array();\n \
    \ foreach ($numbers as $number) {\n    if (!isset($count[$number])) {\n      $count[$number]\
    \ = 1;\n      $unique[$number] = $number;\n    } else {\n      $count[$number]++;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkky4x8xs.php:23\n\
    Stack trace:\n#0 /tmp/tmpkky4x8xs.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkky4x8xs.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2juxalk.php:20\n\
    Stack trace:\n#0 /tmp/tmpg2juxalk.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg2juxalk.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $count = count($numbers);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    if (!in_array($numbers[$i], $unique))\
    \ {\n      $unique[] = $numbers[$i];\n    }\n  }\n  return $unique;\n}\n\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3zc8p76.php:22\n\
    Stack trace:\n#0 /tmp/tmp_3zc8p76.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_3zc8p76.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!in_array($number, $seen)) {\n      $unique[]\
    \ = $number;\n      $seen[] = $number;\n    }\n  }\n  return $unique;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr4lxuzs.php:22\n\
    Stack trace:\n#0 /tmp/tmppr4lxuzs.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppr4lxuzs.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs4ypkjy.php:21\n\
    Stack trace:\n#0 /tmp/tmpgs4ypkjy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgs4ypkjy.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = array();\n  $seen = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!isset($seen[$number])) {\n      $seen[$number]\
    \ = true;\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb50jihga.php:22\n\
    Stack trace:\n#0 /tmp/tmpb50jihga.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb50jihga.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_h5kdtzq.php:21\n\
    Stack trace:\n#0 /tmp/tmp_h5kdtzq.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_h5kdtzq.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $key => $value) {\n    if (!in_array($value, $unique))\
    \ {\n      $unique[] = $value;\n    }\n  }\n  return $unique;\n}\nfunction candidate(...$args)\
    \ {\n    return remove_duplicates(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 2, 4, 3, 5))\
    \ !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16twp3_5.php:21\n\
    Stack trace:\n#0 /tmp/tmp16twp3_5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp16twp3_5.php\
    \ on line 21\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $numbers = array_values($numbers);\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n$numbers = array(\n\
    \  1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 11,\
    \ 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ \nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxdxb3vgh.php on line 17

    '
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7hdh883.php:22\n\
    Stack trace:\n#0 /tmp/tmpp7hdh883.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp7hdh883.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4252k5pt.php:20\n\
    Stack trace:\n#0 /tmp/tmp4252k5pt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4252k5pt.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    } else {\n      $duplicates[] = $number;\n   \
    \ }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepfa4jh4.php:23\n\
    Stack trace:\n#0 /tmp/tmpepfa4jh4.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpepfa4jh4.php\
    \ on line 23\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  $duplicates = array();\n\
    \  foreach ($numbers as $number) {\n    if (in_array($number, $unique)) {\n  \
    \    $duplicates[] = $number;\n    } else {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $duplicates;\n}\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjzvx6fpv.php:22\n\
    Stack trace:\n#0 /tmp/tmpjzvx6fpv.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjzvx6fpv.php\
    \ on line 22\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\nfunction candidate(...$args) {\n    return\
    \ remove_duplicates(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphfiwuj4k.php:20\n\
    Stack trace:\n#0 /tmp/tmphfiwuj4k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmphfiwuj4k.php\
    \ on line 20\n"
  timestamp: 1659730574
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $unique = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n\
    \  }\n  return $unique;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp52_uycd1.php:21\n\
    Stack trace:\n#0 /tmp/tmp52_uycd1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp52_uycd1.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return remove_duplicates(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ array(1, 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgs4ypkjy.php:21\n\
    Stack trace:\n#0 /tmp/tmpgs4ypkjy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpgs4ypkjy.php\
    \ on line 21\n"
  timestamp: 1659730476
- exit_code: 255
  program: "<?php\n// From a list of integers, remove all elements that occur more\
    \ than once.\n// Keep order of elements left the same as in the input.\nfunction\
    \ remove_duplicates($numbers) {\n  $result = [];\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($result[$number])) {\n      $result[$number] = 1;\n    } else\
    \ {\n      $result[$number]++;\n    }\n  }\n  return array_keys($result);\n}\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are duplicate\
    \ numbers in the array (like `[1,2,2,3]`). You would get `[2,3]` instead of `[1,3]`.\n\
    <|/ c |>\n<| c |>\nI added a solution that doesn't require a loop\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n$array = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,\n\
    function candidate(...$args) {\n    return remove_duplicates(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3,\
    \ 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmprthh8oks.php on line 15

    '
  timestamp: 1659730574
