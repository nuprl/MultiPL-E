language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n \
    \ // If the given value is zero, return zero.\n  if ($value == 0) {\n    return\
    \ 0;\n  }\n  // If the given value is positive, return the closest integer.\n\
    \  return round($value);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl9nqwwh.php:29\n\
    Stack trace:\n#0 /tmp/tmpcl9nqwwh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcl9nqwwh.php\
    \ on line 29\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff < 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfij3lm_c.php:25\n\
    Stack trace:\n#0 /tmp/tmpfij3lm_c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfij3lm_c.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $difference = abs($value - $value);\n    $closest_integer\
    \ = $value;\n    if ($difference == 0) {\n        return $value;\n    }\n    $closest_integer\
    \ = $value + round($difference/2);\n    if ($closest_integer == 0) {\n       \
    \ return $value;\n    }\n    return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgit6c8b3.php:30\n\
    Stack trace:\n#0 /tmp/tmpgit6c8b3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgit6c8b3.php\
    \ on line 30\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps5g8olmm.php on line 42

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycol4sgj.php:25\n\
    Stack trace:\n#0 /tmp/tmpycol4sgj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpycol4sgj.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjun98x1.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjun98x1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjun98x1.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ + round($closest_integer / 2);\n    $closest_integer = $closest_integer - round($closest_integer\
    \ / 2);\n    return $closest_integer;\n}\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd43qd7or.php:23\n\
    Stack trace:\n#0 /tmp/tmpd43qd7or.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd43qd7or.php\
    \ on line 23\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ + 1;\n    $closest_integer = $closest_integer % 10;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftqix153.php:24\n\
    Stack trace:\n#0 /tmp/tmpftqix153.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpftqix153.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n\n\
    \  // If the given value is positive, return the absolute value of the number.\n\
    \  if ($value > 0) {\n    return abs($value);\n  }\n\n  // If the given value\
    \ is zero, return zero.\n  return 0;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rfb0m_i.php:32\n\
    Stack trace:\n#0 /tmp/tmp5rfb0m_i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5rfb0m_i.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer, 0);\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = round($closest_integer,\
    \ 0);\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n  // If the value is positive,\
    \ return the absolute value of the number\n  else {\n    return abs($value);\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbdl8ov_d.php:29\n\
    Stack trace:\n#0 /tmp/tmpbdl8ov_d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbdl8ov_d.php\
    \ on line 29\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ + 1;\n    $closest_integer = $closest_integer % 10;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftqix153.php:24\n\
    Stack trace:\n#0 /tmp/tmpftqix153.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpftqix153.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd4jwkrp.php:25\n\
    Stack trace:\n#0 /tmp/tmpzd4jwkrp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzd4jwkrp.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptllll91r.php:26\n\
    Stack trace:\n#0 /tmp/tmptllll91r.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptllll91r.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbic9_aqc.php:25\n\
    Stack trace:\n#0 /tmp/tmpbic9_aqc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbic9_aqc.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \  // If the value is negative, return the closest integer.\n  if ($value < 0)\
    \ {\n    return round($value + 0.5, 0);\n  }\n  // If the value is positive, return\
    \ the closest integer.\n  return round($value - 0.5, 0);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gz9t26h.php:28\n\
    Stack trace:\n#0 /tmp/tmp4gz9t26h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4gz9t26h.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149qq6ih.php:26\n\
    Stack trace:\n#0 /tmp/tmp149qq6ih.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149qq6ih.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = $value;\n  $closest_integer_abs = abs($closest_integer);\n\
    \  foreach ($GLOBALS['hooks']['Filter_Plugin_Admin_Filter_Closest_integer'] as\
    \ $fpname => $fp) {\n    $fpvalue = $fp->$fpname($value);\n    if ($fpvalue !=\
    \ $closest_integer_abs) {\n      $closest_integer = $fpvalue;\n      $closest_integer_abs\
    \ = abs($closest_integer);\n    }\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp808pd_wf.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp808pd_wf.php:30\n\
    Stack trace:\n#0 /tmp/tmp808pd_wf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp808pd_wf.php\
    \ on line 30\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff < 0) {\n\
    \        $diff += 1;\n    }\n    return floor($value) + $diff;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26g0faeh.php:25\n\
    Stack trace:\n#0 /tmp/tmp26g0faeh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp26g0faeh.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr38w3mw1.php:26\n\
    Stack trace:\n#0 /tmp/tmpr38w3mw1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr38w3mw1.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_t2bpwt.php:24\n\
    Stack trace:\n#0 /tmp/tmp8_t2bpwt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8_t2bpwt.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2_ae1ky.php:25\n\
    Stack trace:\n#0 /tmp/tmpb2_ae1ky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb2_ae1ky.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ - 1;\n    if ($closest_integer < 0) {\n        $closest_integer = $closest_integer\
    \ + 1;\n    }\n    return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn0gkkk4.php:26\n\
    Stack trace:\n#0 /tmp/tmpgn0gkkk4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgn0gkkk4.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ == 0 ? 1 : $closest_integer;\n    $closest_integer = $closest_integer == 1 ?\
    \ $value : $closest_integer;\n    $closest_integer = $closest_integer == 2 ? $value\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 3 ? $value :\
    \ $closest_integer;\n    $closest_integer = $closest_integer == 4 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 5 ? $value : $closest_integer;\n \
    \   $closest_integer = $closest_integer == 6 ? $value : $closest_integer;\n  \
    \  $closest_integer = $closest_integer == 7 ? $value : $closest_integer;\n   \
    \ $closest_integer = $closest_integer == 8 ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 9 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 10 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 11 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 12 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 13 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 14 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 15 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 16 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 17 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 18 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 19 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 20 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 21 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 22 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 23 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 24 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 25 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 26 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 27 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 28 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 29\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvxugpyvg.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach (range(0, 9) as $digit)\
    \ {\n    $digitDiff = abs($value - $digit);\n    if ($closestDiff === null ||\
    \ $digitDiff < $closestDiff) {\n      $closestDiff = $digitDiff;\n      $closest\
    \ = $digit;\n    }\n  }\n  return $closest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kwrlyo3.php:30\n\
    Stack trace:\n#0 /tmp/tmp0kwrlyo3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0kwrlyo3.php\
    \ on line 30\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, parse it to a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is not a string, return\
    \ null.\n  if (!is_numeric($value)) {\n    return null;\n  }\n\n  // If the given\
    \ value is negative, return null.\n  if ($value < 0) {\n    return null;\n  }\n\
    \n  // If the given value is equidistant from two integers, round it away\n  //\
    \ from zero.\n  if ($value == round($value)) {\n    return round($value);\n  }\n\
    \n  // If the given value is equidistant from two integers, return the one that\n\
    \  // is farthest from zero.\n  $difference = abs($value - round($value));\n \
    \ if ($difference == round($difference)) {\n    return round($value);\n  }\n\n\
    \  // If the given value is equidistant from two integers, return the one that\n\
    \  // is closest to zero.\n  return round($value - $difference);\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47reelfh.php:49\n\
    Stack trace:\n#0 /tmp/tmp47reelfh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp47reelfh.php\
    \ on line 49\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return 0.\n  if ($value < 0) {\n    return 0;\n  }\n\n  //\
    \ If the given value is zero, return 0.\n  if ($value == 0) {\n    return 0;\n\
    \  }\n\n  // If the given value is positive, return the closest integer greater\n\
    \  // than or equal to the given value.\n  return round($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vq0e7jl.php:32\n\
    Stack trace:\n#0 /tmp/tmp9vq0e7jl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9vq0e7jl.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMin = null;\n  $closestDiffAbsMinAbs\
    \ = null;\n  $closestDiffAbsMinMax = null;\n  $closestDiffAbsMinMaxAbs = null;\n\
    \  $closestDiffAbsMaxMin = null;\n  $closestDiffAbsMaxMinAbs = null;\n  $closestDiffAbsMinMin\
    \ = null;\n  $closestDiffAbsMinMinAbs = null;\n  $closestDiffAbsMaxMax = null;\n\
    \  $closestDiffAbsMaxMaxAbs = null;\n  $closestDiffAbsMinMax = null;\n  $closestDiffAbsMinMaxAbs\
    \ = null;\n  $closestDiffAbsMaxMin = null;\n  $closestDiffAbsMaxMinAbs = null;\n\
    \  $closestDiffAbsMinMin = null;\n  $closestDiffAbsMinMinAbs = null;\n  $closestDiffAbsMaxMax\
    \ = null;\n  $closestDiffAbsMaxMaxAbs = null;\n  $closestDiffAbsMinMax = null;\n\
    \  $closestDiffAbsMinMaxAbs = null;\n  $closestDiffAbsMaxMin = null;\n  $closestDiffAbsMaxMinAbs\
    \ = null;\n  $closestDiffAbsMinMin = null;\n  $closestDiffAbsMinMinAbs = null;\n\
    \  $closestDiffAbsMaxMax = null;\n  $closestDiffAbsMaxMaxAbs = null;\n  $closestDiffAbsMinMax\
    \ = null;\n  $closestDiffAbsMinMaxAbs = null;\n  $closestDiffAbsMaxMin = null;\n\
    \  $closestDiffAbsMaxMinAbs = null;\n  $closestDiffAbsMinMin = null;\n  $closestDiffAbsMinMinAbs\
    \ = null;\n  $closestDiffAbsMaxMax = null;\n  $closestDiffAbsMaxMaxAbs = null;\n\
    \  $closestDiffAbsMinMax = null;\n  $closestDiffAbsMinMaxAbs = null;\n  $closestDiffAbsMaxMin\
    \ = null;\n  $closestDiffAbsMaxMinAbs = null;\n  $closestDiffAbsMinMin = null;\n\
    \  $closestDiffAbsMinMinAbs = null;\n  $closestDiffAbsMaxMax = null;\n  $closestDiffAbsMaxMaxAbs\
    \ = null;\n  $closestDiffAbsMinMax = null;\n  $closestDiffAbsMinMaxAbs = null;\n\
    \  $closestDiffAbsMaxMin = null;\n  $closestDiffAbsMaxMinAbs = null;\n  $closestDiffAbsMinMin\
    \ = null;\n  $closestDiffAbsMinMinAbs = null;\n  $closestDiffAbsMaxMax = null;\n\
    \  $closestDiffAbsMaxMaxAbs = null;\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpew3vho94.php on line 81

    '
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = round($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpje0b0_5l.php on line 40

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwruns7tx.php:25\n\
    Stack trace:\n#0 /tmp/tmpwruns7tx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwruns7tx.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  if ($closest_integer == $value) {\n    $closest_integer = $closest_integer\
    \ + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqd17auu.php:26\n\
    Stack trace:\n#0 /tmp/tmpaqd17auu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpaqd17auu.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  while ($closest_integer == $value) {\n    $closest_integer = round($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ > 0 ? $closest_integer : 0;\n    return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmmzinfi.php:25\n\
    Stack trace:\n#0 /tmp/tmpqmmzinfi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqmmzinfi.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n  // If\
    \ the number is positive, find the closest integer to the positive\n  // number\
    \ by rounding away from zero.\n  $closest_integer = round($value);\n  // If the\
    \ number is equidistant from two integers, round it away from\n  // zero.\n  if\
    \ ($closest_integer == $value) {\n    $closest_integer = round($closest_integer);\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vp7pzng.php:32\n\
    Stack trace:\n#0 /tmp/tmp3vp7pzng.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3vp7pzng.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6k06nmg.php:25\n\
    Stack trace:\n#0 /tmp/tmpy6k06nmg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy6k06nmg.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoaha98xw.php:24\n\
    Stack trace:\n#0 /tmp/tmpoaha98xw.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpoaha98xw.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8nk26hz.php:24\n\
    Stack trace:\n#0 /tmp/tmpt8nk26hz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpt8nk26hz.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2_ae1ky.php:25\n\
    Stack trace:\n#0 /tmp/tmpb2_ae1ky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb2_ae1ky.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDiff = null;\n    $closestDiffAbs\
    \ = null;\n    $closestDiffAbsMax = null;\n    $closestDiffAbsMaxAbs = null;\n\
    \    $closestDiffAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbs = null;\n\
    \    $closestDiffAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax =\
    \ null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps2vf5f76.php on line 36

    '
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2_ae1ky.php:25\n\
    Stack trace:\n#0 /tmp/tmpb2_ae1ky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb2_ae1ky.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return 0 because negative numbers\n  // are closest to 0\
    \ as well.\n  if ($value < 0)\n    return 0;\n\n  // If the given value is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if (abs($value - round($value))\
    \ < abs($value - round($value + 1)))\n    return round($value);\n\n  // If the\
    \ given value is equidistant from three integers, round it away\n  // from zero.\n\
    \  if (abs($value - round($value)) < abs($value - round($value + 1))\n      &&\
    \ abs($value - round($value + 1)) < abs($value - round($value + 2)))\n    return\
    \ round($value);\n\n  // If the given value is equidistant from four integers,\
    \ round it away\n  // from zero.\n  if (abs($value - round($value)) < abs($value\
    \ - round($value + 1))\n      && abs($value - round($value + 1)) < abs($value\
    \ - round($value + 2))\n      && abs($value - round($value + 2)) < abs($value\
    \ - round($value + 3)))\n    return round($value);\n\n  // If the given value\
    \ is equidistant from five integers, round it away\n  // from zero.\n  if (abs($value\
    \ - round($value)) < abs($value - round($value + 1))\n      && abs($value - round($value\
    \ + 1)) < abs($value - round($value + 2))\n      && abs($value - round($value\
    \ + 2)) < abs($value - round($value + 3))\n      && abs($value - round($value\
    \ + 3)) < abs($value - round($value + 4)))\n    return round($value);\n\n  //\
    \ If the given value is equidistant from six integers, round it away\n  // from\
    \ zero.\n  if (abs($value - round($value)) < abs($value - round($value + 1))\n\
    \      && abs($value - round($value + 1)) < abs($value - round($value + 2))\n\
    \      && abs($value - round($value + 2)) < abs($value - round($value + 3))\n\
    \      && abs($value - round($value + 3)) < abs($value - round($value + 4))\n\
    \      && abs($value - round($value + 4)) < abs($value - round($value + 5)))\n\
    \    return round($value);\n\n  // If the given value is equidistant from seven\
    \ integers, round it away\n  // from zero.\n  if (abs($value - round($value))\
    \ < abs($value - round($value + 1))\n      && abs($value - round($value + 1))\
    \ < abs($value - round($value + 2))\n      && abs(\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6ezfj4mo.php on line 57

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ - $closest_integer % 1;\n    $closest_integer = $closest_integer + $closest_integer\
    \ % 1;\n    return $closest_integer;\n}\n\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyli85onm.php:25\n\
    Stack trace:\n#0 /tmp/tmpyli85onm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyli85onm.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n\n\
    \  // If the given value is zero, return one.\n  if ($value == 0) {\n    return\
    \ 1;\n  }\n\n  // If the given value is positive, return the next integer after\
    \ it.\n  $next_integer = ceil($value);\n\n  // If the given value is equidistant\
    \ from two integers, round it away\n  // from zero.\n  if ($next_integer == $value)\
    \ {\n    return $next_integer;\n  }\n\n  // If the given value is equidistant\
    \ from two integers, return the one\n  // that is farthest from zero.\n  return\
    \ $next_integer - 1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pso3om2.php:40\n\
    Stack trace:\n#0 /tmp/tmp5pso3om2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5pso3om2.php\
    \ on line 40\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr = null;\n\
    \  $closestDistanceSqr_prev = null;\n  $closestDistanceSqr_next = null;\n  $closestDistanceSqr_nextprev\
    \ = null;\n  $closestDistanceSqr_prevnext = null;\n  $closestDistanceSqr_nextnext\
    \ = null;\n  $closestDistanceSqr_prevprev = null;\n  $closestDistanceSqr_prevnextprev\
    \ = null;\n  $closestDistanceSqr_nextnextprev = null;\n  $closestDistanceSqr_nextprevnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnext = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnext\nfunction candidate(...$args) {\n  \
    \  return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpyf1tznpi.php on line 66

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, convert it to an integer.\n  // If it isn't an integer, return\
    \ 0.\n  $value = intval($value);\n  // If the given value is negative, return\
    \ 0.\n  if ($value < 0) {\n    return 0;\n  }\n  // If the given value is zero,\
    \ return 0.\n  if ($value == 0) {\n    return 0;\n  }\n  // If the given value\
    \ is positive, return it.\n  return $value;\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4d37zrp.php:32\n\
    Stack trace:\n#0 /tmp/tmpe4d37zrp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpe4d37zrp.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return 0\n  if ($value < 0) {\n    return 0;\n  }\n  // If\
    \ the given value is equidistant from two integers, round it away from zero\n\
    \  elseif ($value == round($value)) {\n    return round($value);\n  }\n  // If\
    \ the given value is equidistant from two integers, return the one that is farthest\
    \ from zero\n  elseif ($value == abs($value - round($value))) {\n    return round($value);\n\
    \  }\n  // If the given value is equidistant from two integers, return the one\
    \ that is closest to zero\n  else {\n    return round($value);\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh87z2mt.php:35\n\
    Stack trace:\n#0 /tmp/tmpbh87z2mt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbh87z2mt.php\
    \ on line 35\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ == 0 ? 1 : $closest_integer;\n    $closest_integer = $closest_integer == 1 ?\
    \ $value : $closest_integer;\n    $closest_integer = $closest_integer == 2 ? $value\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 3 ? $value :\
    \ $closest_integer;\n    $closest_integer = $closest_integer == 4 ? $value : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 5 ? $value : $closest_integer;\n \
    \   $closest_integer = $closest_integer == 6 ? $value : $closest_integer;\n  \
    \  $closest_integer = $closest_integer == 7 ? $value : $closest_integer;\n   \
    \ $closest_integer = $closest_integer == 8 ? $value : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 9 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 10 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 11 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 12 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 13 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 14 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 15 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 16 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 17 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 18 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 19 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 20 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 21 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 22 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 23 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 24 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 25 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 26 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 27 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 28 ? $value : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 29\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpvxugpyvg.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMin = null;\n  $closestDiffAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxMin = null;\n  $closestDiffAbsMaxMinAbs = null;\n\
    \  $closestDiffAbsMinMax = null;\n  $closestDiffAbsMinMaxAbs = null;\n  $closestDiffAbsMaxAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMinAbsMax =\
    \ null;\n  $closestDiffAbsMinAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinMax\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbs = null;\n  $closestDiffAbsMinAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbs = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMinMaxAbsMax\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp_5ntmtke.php on line 50

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if (abs($value\
    \ - $i) < $closest_integer) {\n      $closest_integer = $i;\n    }\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeikq1ib9.php:28\n\
    Stack trace:\n#0 /tmp/tmpeikq1ib9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpeikq1ib9.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqcj86cx.php:25\n\
    Stack trace:\n#0 /tmp/tmpoqcj86cx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoqcj86cx.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDistance = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n\
    \    $closestDistanceSqr = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr\
    \ = null;\n    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n\
    \    $closestDistanceAbs = null;\n    $closestDistanceSqr = null;\n    $closestDistanceAbs\
    \ = null;\n    $closest\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6sp_t6yq.php on line 92

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = ($closest_integer == $value) ? $value :\
    \ $closest_integer;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwwbt9mh.php:27\n\
    Stack trace:\n#0 /tmp/tmplwwbt9mh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplwwbt9mh.php\
    \ on line 27\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = null;\n\
    \  $closestDistanceAbsSq = null;\n  $closestDistanceSq = null;\n  $closestDistanceSqAbs\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceSqMin = null;\n\
    \  $closestDistanceSqMinAbs = null;\n  $closestDistanceSqMinAbsSq = null;\n  $closestDistanceSqMax\
    \ = null;\n  $closestDistanceSqMaxAbs = null;\n  $closestDistanceSqMaxAbsSq =\
    \ null;\n  $closestDistanceSqMinMax = null;\n  $closestDistanceSqMinMaxAbs = null;\n\
    \  $closestDistanceSqMinMaxAbsSq = null;\n  $closestDistanceSqMinMaxAbsSqMin =\
    \ null;\n  $closestDistanceSqMinMaxAbsSqMinAbs = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbs = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSq = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSq = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSq = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSq = null;\n\
    \  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSq = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSqSq = null;\n\
    \  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSqSq = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSqSq\
    \ = null;\n  $closestDistanceSqMinMaxAbsSqMinAbsSqAbsSqSqSqSqSqSqSqSqSqSqSq =\
    \ null;\n  $\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpns3b0r8e.php on line 48

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  if ($closest_integer == 0) {\n    $closest_integer = 1;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps0lscm78.php:25\n\
    Stack trace:\n#0 /tmp/tmps0lscm78.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps0lscm78.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is not an integer, return null.\n  if (!is_numeric($value)) {\n    return\
    \ null;\n  }\n\n  // If the given number is less than zero, return null.\n  if\
    \ ($value < 0) {\n    return null;\n  }\n\n  // If the given number is equal to\
    \ zero, return zero.\n  if ($value == 0) {\n    return 0;\n  }\n\n  // If the\
    \ given number is greater than zero, return null.\n  if ($value > 0) {\n    return\
    \ null;\n  }\n\n  // If the given number is less than or equal to zero, return\
    \ null.\n  if ($value <= 0) {\n    return null;\n  }\n\n  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  $closest_integer\
    \ = round($value);\n\n  // If the given number is equidistant from two integers,\
    \ round it away\n  // from zero.\n  $closest_integer = round($value);\n\n  //\
    \ If the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  $closest_integer = round($value);\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $closest_integer = round($value);\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $closest_integer = round($value);\n\n  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  $closest_integer\
    \ = round($value);\n\n  // If the given number is equidistant from two integers,\
    \ round it away\n  // from zero.\n  $closest_integer = round($value);\n\n  //\
    \ If the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  $closest_integer = round($value);\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $closest_integer = round($value);\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $closest_integer = round($value);\n\n  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  $closest_integer\
    \ = round($value);\n\n  // If the given number is equidistant from two integers,\
    \ round it away\n  // from zero.\n  $closest_integer = round($value);\n\n  //\
    \ If the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  $closest_integer = round($value);\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $closest_integer = round($\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps8q0gq4z.php on line 92

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2_ae1ky.php:25\n\
    Stack trace:\n#0 /tmp/tmpb2_ae1ky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb2_ae1ky.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer + 1 : $closest_integer - 1;\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7haxj2k.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7haxj2k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpu7haxj2k.php\
    \ on line 23\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoqcj86cx.php:25\n\
    Stack trace:\n#0 /tmp/tmpoqcj86cx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoqcj86cx.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n0z677g.php:24\n\
    Stack trace:\n#0 /tmp/tmp1n0z677g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1n0z677g.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjun98x1.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjun98x1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjun98x1.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ add 1 to make it positive\n  if ($value < 0) {\n    $value += 1;\n  }\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == floor($value)) {\n    return $value;\n  }\n  // If the value is equidistant\
    \ from two integers, round it toward the nearest integer\n  if ($value == round($value))\
    \ {\n    return floor($value);\n  }\n  // If the value is equidistant from two\
    \ integers, round it toward the nearest integer\n  if ($value == ceil($value))\
    \ {\n    return ceil($value);\n  }\n  // If the value is equidistant from two\
    \ integers, round it to the nearest integer\n  return round($value);\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyu4apmr.php:38\n\
    Stack trace:\n#0 /tmp/tmpmyu4apmr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmyu4apmr.php\
    \ on line 38\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n0z677g.php:24\n\
    Stack trace:\n#0 /tmp/tmp1n0z677g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1n0z677g.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDiff = null;\n    $diff\
    \ = null;\n    $diffAbs = null;\n    $diffAbsMax = null;\n    $diffAbsMaxAbs =\
    \ null;\n    $diffAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbs = null;\n   \
    \ $diffAbsMaxAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n   \
    \ $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \    $diffAb\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbs4ev1u1.php on line 42

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAb\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp71mvg1_4.php on line 40

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == floor($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == floor($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == floor($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == floor($value)) {\n    return floor($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  // If the given\
    \ number is equidistant \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp25wy6t0m.php on line 109

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $value <= $closest_integer\
    \ ? $value : $closest_integer;\n  $closest_integer = $value >= $closest_integer\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sz4b5bq.php:24\n\
    Stack trace:\n#0 /tmp/tmp1sz4b5bq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1sz4b5bq.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['hooks']['Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Admin_Filter_Plugin_Ad\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpu31z1gw8.php on line 14

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjun98x1.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjun98x1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjun98x1.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n0z677g.php:24\n\
    Stack trace:\n#0 /tmp/tmp1n0z677g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1n0z677g.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMin = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbs =\
    \ null;\n  $closestDiffAbsMaxAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbsMinAb\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpjxaicrz8.php on line 48

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Your code\
    \ here\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprahs6d5o.php:20\n\
    Stack trace:\n#0 /tmp/tmprahs6d5o.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprahs6d5o.php\
    \ on line 20\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwruns7tx.php:25\n\
    Stack trace:\n#0 /tmp/tmpwruns7tx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwruns7tx.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value < $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69z5881c.php:24\n\
    Stack trace:\n#0 /tmp/tmp69z5881c.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp69z5881c.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, convert it to a float.\n  $value = floatval($value);\n  //\
    \ If the given value is negative, make it positive.\n  if ($value < 0) {\n   \
    \ $value = abs($value);\n  }\n  // If the given value is equidistant from two\
    \ integers, round it away\n  // from zero.\n  if ($value % 1 == 0) {\n    $value\
    \ = round($value);\n  }\n  // Return the given value.\n  return $value;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9d81rba.php:31\n\
    Stack trace:\n#0 /tmp/tmpi9d81rba.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi9d81rba.php\
    \ on line 31\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if ($closest_integer\
    \ - $i == $value) {\n      $closest_integer = $i;\n    }\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bpcw6xs.php:28\n\
    Stack trace:\n#0 /tmp/tmp4bpcw6xs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4bpcw6xs.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value && $closest_integer\
    \ > 0) {\n    $closest_integer = ($closest_integer + $value) / 2;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpujfjzq.php:26\n\
    Stack trace:\n#0 /tmp/tmpvpujfjzq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvpujfjzq.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149qq6ih.php:26\n\
    Stack trace:\n#0 /tmp/tmp149qq6ih.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149qq6ih.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpwwl7c6t0.php on line 42

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  $difference = abs($value - $closest_integer);\n  if ($difference < 1) {\n \
    \   $closest_integer = $value + 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2xeg_78.php:27\n\
    Stack trace:\n#0 /tmp/tmp_2xeg_78.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_2xeg_78.php\
    \ on line 27\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n  // If the value is zero,\
    \ return it\n  if ($value == 0) {\n    return $value;\n  }\n  // If the value\
    \ is positive, find the closest integer\n  $closest = $value;\n  for ($i = $value;\
    \ $i >= 1; $i--) {\n    $closest = $i;\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbq10t11g.php:34\n\
    Stack trace:\n#0 /tmp/tmpbq10t11g.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbq10t11g.php\
    \ on line 34\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = null;\n\
    \  $closestDistanceAbsAbs = null;\n  $closestDistanceAbsDiff = null;\n  $closestDistanceAbsDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiff = null;\n  $closestDistanceAbsDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff = null;\n\
    \  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiff\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs = null;\n\
    \  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffAbs\
    \ = null;\n  $closestDistanceAbsDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = null;\n\
    \  $\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp98bdfg67.php on line 53

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $value\
    \ % $closest_integer;\n    if ($closest_integer == 0) {\n        $closest_integer\
    \ = 1;\n    }\n    return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzxknwyp.php:26\n\
    Stack trace:\n#0 /tmp/tmpvzxknwyp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvzxknwyp.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ > 0 ? $closest_integer : 0;\n    return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcni9ik0.php:24\n\
    Stack trace:\n#0 /tmp/tmpjcni9ik0.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjcni9ik0.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer - $value >= 1) {\n    $closest_integer\
    \ -= 1;\n    $value = $closest_integer;\n  }\n  return $value;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi6lf4uj8.php:28\n\
    Stack trace:\n#0 /tmp/tmpi6lf4uj8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi6lf4uj8.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is a string, convert it to a float.\n  $value = floatval($value);\n \
    \ // If the given number is negative, return zero.\n  if ($value < 0) {\n    return\
    \ 0;\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value)) {\n    return round($value);\n\
    \  }\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  if ($value == round($value, 2)) {\n    return round($value,\
    \ 2);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 3)) {\n    return round($value,\
    \ 3);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 4)) {\n    return round($value,\
    \ 4);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 5)) {\n    return round($value,\
    \ 5);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 6)) {\n    return round($value,\
    \ 6);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 7)) {\n    return round($value,\
    \ 7);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 8)) {\n    return round($value,\
    \ 8);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 9)) {\n    return round($value,\
    \ 9);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 10)) {\n    return round($value,\
    \ 10);\n  }\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 11)) {\n    return round($value,\
    \ 11);\n  }\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 12)) {\n    return round($value,\
    \ 12);\n  }\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpiacbjaj2.php on line 93

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n\n\
    \  // If the given value is equidistant from two integers, round it away\n  //\
    \ from zero.\n  if (abs($value - round($value)) < abs($value - round($value +\
    \ 1))) {\n    return round($value);\n  }\n\n  // Otherwise, return the value that\
    \ is closest to zero.\n  return round($value + 1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6uqtwmc.php:32\n\
    Stack trace:\n#0 /tmp/tmpj6uqtwmc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpj6uqtwmc.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  if ($closest_integer == 0) {\n    $closest_integer = 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26ddo7w1.php:26\n\
    Stack trace:\n#0 /tmp/tmp26ddo7w1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp26ddo7w1.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $value\
    \ <= $closest_integer ? $value : $closest_integer;\n    $closest_integer = $value\
    \ >= $closest_integer ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8lbhrcn.php:25\n\
    Stack trace:\n#0 /tmp/tmpc8lbhrcn.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc8lbhrcn.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return zero.\n  if ($value < 0)\n    return 0;\n\n  // If\
    \ the given value is equidistant from two integers, round it away\n  // from zero.\n\
    \  if (abs($value) == abs(round($value)))\n    return round($value);\n\n  // If\
    \ the given value is equidistant from three integers, round it\n  // away from\
    \ zero.\n  if (abs($value) == abs(round($value) + round($value)))\n    return\
    \ round($value);\n\n  // If the given value is equidistant from four integers,\
    \ round it\n  // away from zero.\n  if (abs($value) == abs(round($value) + round($value)\
    \ + round($value)))\n    return round($value);\n\n  // If the given value is equidistant\
    \ from five integers, round it\n  // away from zero.\n  if (abs($value) == abs(round($value)\
    \ + round($value) + round($value) + round($value)))\n    return round($value);\n\
    \n  // If the given value is equidistant from six integers, round it\n  // away\
    \ from zero.\n  if (abs($value) == abs(round($value) + round($value) + round($value)\
    \ + round($value) + round($value)))\n    return round($value);\n\n  // If the\
    \ given value is equidistant from seven integers, round it\n  // away from zero.\n\
    \  if (abs($value) == abs(round($value) + round($value) + round($value) + round($value)\
    \ + round($value) + round($value)))\n    return round($value);\n\n  // If the\
    \ given value is equidistant from eight integers, round it\n  // away from zero.\n\
    \  if (abs($value) == abs(round($value) + round($value) + round($value) + round($value)\
    \ + round($value) + round($value) + round($value)))\n    return round($value);\n\
    \n  // If the given value is equidistant from nine integers, round it\n  // away\
    \ from zero.\n  if (abs($value) == abs(round($value) + round($value) + round($value)\
    \ + round($value) + round($value) + round($value) + round($value) + round($value)))\n\
    \    return round($value);\n\n  // If the given value is equidistant from ten\
    \ integers, round it\n  // away from zero.\n  if (abs($value) == abs(round($value)\
    \ + round($value) + round($value) + round($value) + round($value) + round($value)\
    \ + round($value) + round($value) + round($value)))\n    return round($value);\n\
    \n  // If the given value is equidistant from eleven integers, round it\n  //\
    \ away from zero.\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmps8uicp8m.php on line 76

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff < 0) {\n\
    \        $diff += 1;\n    }\n    return floor($value) + $diff;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26g0faeh.php:25\n\
    Stack trace:\n#0 /tmp/tmp26g0faeh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp26g0faeh.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value >=\
    \ $value2) {\n    return round($value - $value2);\n  }\n  return round($value\
    \ + $value2);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxojh89n.php:24\n\
    Stack trace:\n#0 /tmp/tmpzxojh89n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzxojh89n.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest_integer = $value;\n    $closest_integer = round($closest_integer);\n\
    \    $difference = $value - $closest_integer;\n    if ($difference > 0) {\n  \
    \      $closest_integer = $value + 1;\n    }\n    return $closest_integer;\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi88dgld.php:27\n\
    Stack trace:\n#0 /tmp/tmpgi88dgld.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgi88dgld.php\
    \ on line 27\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9iywsdyy.php:28\n\
    Stack trace:\n#0 /tmp/tmp9iywsdyy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9iywsdyy.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDiff = null;\n    $closestDiffAbs\
    \ = null;\n    $closestDiffAbsMax = null;\n    $closestDiffAbsMaxAbs = null;\n\
    \    $closestDiffAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbs = null;\n\
    \    $closestDiffAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n    $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6salzj4c.php on line 37

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr = null;\n\
    \  $closestDistanceSqr_prev = null;\n  $closestDistanceSqr_next = null;\n  $closestDistanceSqr_nextprev\
    \ = null;\n  $closestDistanceSqr_prevnext = null;\n  $closestDistanceSqr_prevprev\
    \ = null;\n  $closestDistanceSqr_nextnext = null;\n  $closestDistanceSqr_nextnextprev\
    \ = null;\n  $closestDistanceSqr_prevprevnext = null;\n  $closestDistanceSqr_prevnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_nextnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnextprev = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_nextnextnextnext = null;\n  $closestDistanceSqr_nextnextnextprev\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_nextnextnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnextprev = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_nextnextnextnext = null;\n  $closestDistanceSqr_nextnextnextprev\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_nextnextnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnextprev = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_nextnextnextnext = null;\n  $closestDistanceSqr_nextnextnextprev\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_prevnextnextnext\
    \ = null;\n  $closestDistanceSqr_prevprevprev = null;\n  $closestDistanceSqr_nextnextnextnext\
    \ = null;\n  $closestDistanceSqr_nextnextnextprev = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_prevnextnextnext = null;\n  $closestDistanceSqr_prevprevprev\
    \ = null;\n  $closestDistanceSqr_nextnextnextnext = null;\n  $closestDistanceSqr_nextnextnextprev\
    \ = null;\n  $closestDistanceSqr_\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuagm4l2d.php on line 64

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  foreach\
    \ ($GLOBALS['hooks']['Filter_Plugin_Admin_Admin_Menu'] as $fpname => $fpname_return)\
    \ {\n    $fpname_return = $fpname_return();\n    if ($fpname_return !== null &&\
    \ !is_null($fpname_return)) {\n      $fpname = $fpname;\n      break;\n    }\n\
    \  }\n  if ($fpname === null) {\n    return null;\n  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu')\
    \ {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin';\n  }\n  if ($fpname\
    \ === 'Filter_Plugin_Admin_Admin_Menu_Admin') {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin') {\n    $fpname\
    \ = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin';\n  }\n  if ($fpname ===\
    \ 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin') {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin')\
    \ {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin')\
    \ {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin')\
    \ {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin_Admin')\
    \ {\n    $fpname = 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin_Admin';\n\
    \  }\n  if ($fpname === 'Filter_Plugin_Admin_Admin_Menu_Admin_Admin_Admin_Admin_Admin_Admin_Admin_Admin\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpxlny5r1u.php on line 50

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gg2vui3.php:24\n\
    Stack trace:\n#0 /tmp/tmp4gg2vui3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp4gg2vui3.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpm420vyfc.php on line 36

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n0z677g.php:24\n\
    Stack trace:\n#0 /tmp/tmp1n0z677g.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp1n0z677g.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($value / PHP_INT_MAX);\n    $value\
    \ = $closest_integer * PHP_INT_MAX;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6nxfz_1.php:26\n\
    Stack trace:\n#0 /tmp/tmpq6nxfz_1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpq6nxfz_1.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n  // If\
    \ the number is positive, return the next integer that is greater\n  // than the\
    \ given number.\n  $next_integer = $value + 1;\n  if ($next_integer > $value)\
    \ {\n    return $next_integer;\n  }\n  // If the number is equidistant from two\
    \ integers, round it away from\n  // zero.\n  return round($next_integer);\n}\n\
    \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5inbbcv.php:32\n\
    Stack trace:\n#0 /tmp/tmpp5inbbcv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp5inbbcv.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149qq6ih.php:26\n\
    Stack trace:\n#0 /tmp/tmp149qq6ih.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149qq6ih.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is not equidistant from two integers, return the\n  // closest integer\
    \ to the given number.\n  return $value - round($value);\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2toe2zz.php:28\n\
    Stack trace:\n#0 /tmp/tmpy2toe2zz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpy2toe2zz.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9jiowg3b.php:24\n\
    Stack trace:\n#0 /tmp/tmp9jiowg3b.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9jiowg3b.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinqt7_8k.php:26\n\
    Stack trace:\n#0 /tmp/tmpinqt7_8k.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpinqt7_8k.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ == 0 ? 1 : $closest_integer;\n    $closest_integer = $closest_integer == 1 ?\
    \ $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 2 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 3 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 4 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 5 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 6 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 7 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 8 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 9 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 10 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 11 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 12 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 13 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 14 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 15 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 16 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 17 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 18 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 19 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 20 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 21 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 22 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 23 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 24 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 25 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 26 ? $closest_integer : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 27 ? $closest_integer : $closest_integer;\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpbjl0yjg2.php on line 54

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest_integer = $value;\n    $closest_integer = round($closest_integer);\n\
    \    $difference = $value - $closest_integer;\n    if ($difference < 0) {\n  \
    \      $closest_integer = $closest_integer + 1;\n    }\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpao51wb0e.php:26\n\
    Stack trace:\n#0 /tmp/tmpao51wb0e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpao51wb0e.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgj42v3s.php:25\n\
    Stack trace:\n#0 /tmp/tmpwgj42v3s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwgj42v3s.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer);\n\
    \  if ($closest_integer == $value) {\n    $closest_integer = $closest_integer\
    \ - 1;\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7qjtf36.php:25\n\
    Stack trace:\n#0 /tmp/tmph7qjtf36.php(32): test()\n#1 {main}\n  thrown in /tmp/tmph7qjtf36.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $closest_integer + 1 : $closest_integer - 1;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7erjhxls.php:24\n\
    Stack trace:\n#0 /tmp/tmp7erjhxls.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7erjhxls.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = round($closest_integer, 0);\n\
    \  if ($closest_integer == $value) {\n    return $value;\n  }\n  foreach (range(1,\
    \ $value) as $i) {\n    if (abs($value - $i) < $closest_integer) {\n      $closest_integer\
    \ = $i;\n    }\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41lxebv6.php:32\n\
    Stack trace:\n#0 /tmp/tmp41lxebv6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp41lxebv6.php\
    \ on line 32\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ == 0 ? '0' : $closest_integer;\n    $closest_integer = $closest_integer == 1\
    \ ? '1' : $closest_integer;\n    $closest_integer = $closest_integer == 2 ? '2'\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 3 ? '3' : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 4 ? '4' : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 5 ? '5' : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 6 ? '6' : $closest_integer;\n    $closest_integer = $closest_integer == 7\
    \ ? '7' : $closest_integer;\n    $closest_integer = $closest_integer == 8 ? '8'\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 9 ? '9' : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 10 ? '10' : $closest_integer;\n  \
    \  $closest_integer = $closest_integer == 11 ? '11' : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 12 ? '12' : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 13 ? '13' : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 14 ? '14' : $closest_integer;\n    $closest_integer = $closest_integer ==\
    \ 15 ? '15' : $closest_integer;\n    $closest_integer = $closest_integer == 16\
    \ ? '16' : $closest_integer;\n    $closest_integer = $closest_integer == 17 ?\
    \ '17' : $closest_integer;\n    $closest_integer = $closest_integer == 18 ? '18'\
    \ : $closest_integer;\n    $closest_integer = $closest_integer == 19 ? '19' :\
    \ $closest_integer;\n    $closest_integer = $closest_integer == 20 ? '20' : $closest_integer;\n\
    \    $closest_integer = $closest_integer == 21 ? '21' : $closest_integer;\n  \
    \  $closest_integer = $closest_integer == 22 ? '22' : $closest_integer;\n    $closest_integer\
    \ = $closest_integer == 23 ? '23' : $closest_integer;\n    $closest_integer =\
    \ $closest_integer == 24 ? '24' : $closest_integer;\n    $closest_integer = $closest_integer\
    \ == 25 ? '25' : $closest_integer;\n    $closest_integer = $closest_integer ==\
    \ 26 ? '26' : $closest_integer;\n    $closest_integer = $closest_integer == 27\
    \ ? '27' : $closest_integer;\n    $closest_integer = $closest_integer == 28 ?\
    \ '28' : $closest_integer;\n    $closest_integer = $closest_integer \nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmplhkbr1jt.php on line 44

    '
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n    $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmporw2k8u2.php:22\n\
    Stack trace:\n#0 /tmp/tmporw2k8u2.php(29): test()\n#1 {main}\n  thrown in /tmp/tmporw2k8u2.php\
    \ on line 22\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp7kzp8o.php:25\n\
    Stack trace:\n#0 /tmp/tmpmp7kzp8o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmp7kzp8o.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is negative, return negative closest integer.\n  if ($value < 0) {\n \
    \   return -closest_integer(abs($value));\n  }\n\n  // If the given value is zero,\
    \ return zero.\n  if ($value == 0) {\n    return 0;\n  }\n\n  // If the given\
    \ value is positive, return positive closest integer.\n  if ($value > 0) {\n \
    \   return closest_integer($value - 1);\n  }\n\n  // If the given value is equidistant\
    \ from two integers, round it away from\n  // zero.\n  $closest_integer = round($value);\n\
    \n  // If the given value is equidistant from two integers, round it away from\n\
    \  // zero.\n  if ($closest_integer == $value) {\n    return $closest_integer;\n\
    \  }\n\n  // If the given value is equidistant from two integers, round it away\
    \ from\n  // zero.\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptna76qkn.php:47\n\
    Stack trace:\n#0 /tmp/tmptna76qkn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmptna76qkn.php\
    \ on line 47\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it to the nearest integer.\n  $value = floatval($value);\n\
    \  $value = round($value);\n  // If the value is equidistant from two integers,\
    \ round it away from\n  // zero.\n  if ($value == $value + 1) {\n    $value--;\n\
    \  }\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_7ps1rm.php:28\n\
    Stack trace:\n#0 /tmp/tmpt_7ps1rm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpt_7ps1rm.php\
    \ on line 28\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n\n  // If the value is zero,\
    \ return it\n  if ($value == 0) {\n    return $value;\n  }\n\n  // If the value\
    \ is positive, find the closest integer\n  $closest = $value;\n  for ($i = 1;\
    \ $i <= 100; $i++) {\n    $closest = ($closest + $i) / 2;\n    if ($closest ==\
    \ $value) {\n      return $closest;\n    }\n  }\n\n  // If the value is not close\
    \ to any integers, return it\n  return $value;\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| c |>\nThanks for your answer. Your code works perfectly for positive\
    \ numbers but for negative numbers it is returning 0 instead of -7.\n<|/ c |>\n\
    <| c |>\nI edited the answer to include a fix for negative numbers. I tested it\
    \ and it works perfectly for me. Let me know if you have any questions.\n<|/ c\
    \ |>\n<| c |>\nThanks again for your answer. Your code works perfectly for positive\
    \ numbers but for negative numbers it is returning 0 instead of -7.\n<|/ c |>\n\
    <| c |>\nI edited the answer to include a fix for negative numbers. I tested it\
    \ and it works perfectly for me. Let me know if you have any questions.\n<|/ c\
    \ |>\n<| c |>\nThanks again for your answer. Your code works perfectly for positive\
    \ numbers but for negative numbers it is returning 0 instead of -7.\n<|/ c |>\n\
    <| a tags=php,rounding |>\n<code>\n<?php\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmph0dn7wg1.php on line 37

    '
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp6fgh8yt9.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ > $value) ? $value : $closest_integer;\n    return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgq161nq.php:25\n\
    Stack trace:\n#0 /tmp/tmpwgq161nq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwgq161nq.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  while ($closest_integer < 1) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  $closest_integer = ($closest_integer == 0)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer > 9) {\n    $closest_integer\
    \ = $closest_integer / 10;\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp34b34xt.php:29\n\
    Stack trace:\n#0 /tmp/tmpp34b34xt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp34b34xt.php\
    \ on line 29\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpg6hdwria.php on line 49

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycol4sgj.php:25\n\
    Stack trace:\n#0 /tmp/tmpycol4sgj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpycol4sgj.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n\
    \  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMax\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpuunh9ffx.php on line 38

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer - $value >= 1) {\n\
    \    $closest_integer = ($closest_integer - $value) + $value;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkvh8ygi.php:27\n\
    Stack trace:\n#0 /tmp/tmpzkvh8ygi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzkvh8ygi.php\
    \ on line 27\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpsgmfjaaf.php on line 44

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value ? $value : $closest_integer);\n    $closest_integer = ($closest_integer\
    \ < $value ? $closest_integer : $value);\n    return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mzk7j9v.php:25\n\
    Stack trace:\n#0 /tmp/tmp9mzk7j9v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9mzk7j9v.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ > $value ? $value : $closest_integer;\n    return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmchopcxb.php:24\n\
    Stack trace:\n#0 /tmp/tmpmchopcxb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmchopcxb.php\
    \ on line 24\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the value\
    \ is an integer, return it\n  if (is_int($value)) {\n    return $value;\n  }\n\
    \  // If the value is negative, add 1 to it\n  if ($value < 0) {\n    $value =\
    \ $value + 1;\n  }\n  // If the value is positive, subtract 1 from it\n  if ($value\
    \ > 0) {\n    $value = $value - 1;\n  }\n  // If the value is equidistant from\
    \ two integers, round it away from zero\n  if ($value == floor($value)) {\n  \
    \  return $value;\n  }\n  // If the value is equidistant from two integers, round\
    \ it toward the nearest integer\n  return ceil($value);\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwjh6d0b.php:37\n\
    Stack trace:\n#0 /tmp/tmpnwjh6d0b.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpnwjh6d0b.php\
    \ on line 37\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjun98x1.php:25\n\
    Stack trace:\n#0 /tmp/tmpwjun98x1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwjun98x1.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  $closestDiffAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbs = null;\n  $closestDiffAbsMin = null;\n  $closestDiffAbsMinAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMin = null;\n  $closestDiffAbsMaxAbsMinAbs =\
    \ null;\n  $closestDiffAbsMinAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbs = null;\n\
    \  $closestDiffAbsMaxAbsMinAbsMax = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMax = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  $closestDiffAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  $closestDiffAbsMaxAbsMinAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  $closestDiff\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmp38mmwb1b.php on line 46

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $diff = $value - floor($value);\n    if ($diff > 0) {\n\
    \        return floor($value);\n    }\n    return ceil($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2_ae1ky.php:25\n\
    Stack trace:\n#0 /tmp/tmpb2_ae1ky.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpb2_ae1ky.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp7kzp8o.php:25\n\
    Stack trace:\n#0 /tmp/tmpmp7kzp8o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmp7kzp8o.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $closestDiffAbs = null;\n  foreach\
    \ ($numbers as $number) {\n    $diffAbs = abs($number - $value);\n    if ($diffAbs\
    \ < $closestDiffAbs) {\n      $closestDiff = $diffAbs;\n      $closest = $number;\n\
    \    }\n  }\n  return $closest;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpoa9ulmo3.php\
    \ on line 16\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoa9ulmo3.php:30\n\
    Stack trace:\n#0 /tmp/tmpoa9ulmo3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoa9ulmo3.php\
    \ on line 30\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = null;\n\
    \  $closestDistanceAbsSq = null;\n  $closestDistanceSq = null;\n  $closestDistanceSqAbs\
    \ = null;\n  $closestDistanceSqAbsSq = null;\n  $closestDistanceAbsSqMinusSq =\
    \ null;\n  $closestDistanceSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n \
    \ $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n\
    \  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n\
    \  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSqMinusSq\
    \ = null;\n  $closestDistanceSqMinusSqMinusSqMinusSqMin\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpmsjh19g8.php on line 42

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149qq6ih.php:26\n\
    Stack trace:\n#0 /tmp/tmp149qq6ih.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149qq6ih.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwgj42v3s.php:25\n\
    Stack trace:\n#0 /tmp/tmpwgj42v3s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwgj42v3s.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  $diff = null;\n  $diffAbs = null;\n\
    \  $diffAbsSq = null;\n  $diffAbsSqMin = null;\n  $diffAbsSqMax = null;\n  $diffAbsSqMinMax\
    \ = null;\n  $diffAbsSqMinMaxSq = null;\n  $diffAbsSqMinMaxSqMin = null;\n  $diffAbsSqMinMaxSqMax\
    \ = null;\n  $diffAbsSqMinMaxSqMinMax = null;\n  $diffAbsSqMinMaxSqMinMaxSq =\
    \ null;\n  $diffAbsSqMinMaxSqMinMaxSqMin = null;\n  $diffAbsSqMinMaxSqMinMaxSqMax\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMax = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMin = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMax\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMax = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSq = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSqMinMaxSqSqSqSqSq\
    \ = null;\n  $diffAbsSqMinMaxSqMinMaxSqMinMaxSq\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmptx0zrgpk.php on line 47

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is negative, return zero.\n  if ($value < 0) {\n    return 0;\n  }\n  // If\
    \ the number is positive, return the next integer that is closest\n  // to zero.\n\
    \  $next_integer = ceil($value);\n  // If the number is equidistant from two integers,\
    \ round it away from\n  // zero.\n  if ($next_integer - $value > 0) {\n    return\
    \ $next_integer;\n  }\n  // If the number is equidistant from three integers,\
    \ round it away from\n  // zero.\n  if ($next_integer - $value * 2 > 0) {\n  \
    \  return $next_integer - 1;\n  }\n  // If the number is equidistant from four\
    \ integers, round it away from\n  // zero.\n  if ($next_integer - $value * 3 >\
    \ 0) {\n    return $next_integer - 2;\n  }\n  // If the number is equidistant\
    \ from five integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 4 > 0) {\n    return $next_integer - 3;\n  }\n  // If the number is equidistant\
    \ from six integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 5 > 0) {\n    return $next_integer - 4;\n  }\n  // If the number is equidistant\
    \ from seven integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 6 > 0) {\n    return $next_integer - 5;\n  }\n  // If the number is equidistant\
    \ from eight integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 7 > 0) {\n    return $next_integer - 6;\n  }\n  // If the number is equidistant\
    \ from nine integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 8 > 0) {\n    return $next_integer - 7;\n  }\n  // If the number is equidistant\
    \ from ten integers, round it away from\n  // zero.\n  if ($next_integer - $value\
    \ * 9 > 0) {\n    return $next_integer - 8;\n  }\n  // If the number is equidistant\
    \ from eleven integers, round it away from\n  // zero.\n  if ($next_integer -\
    \ $value * 10 > 0) {\n    return $next_integer - 9;\n  }\n  // If the number is\
    \ equidistant from twelve integers, round it away from\n  // zero.\n  if ($next_integer\
    \ - $value * 11 > 0) {\n    return $next_integer - 10;\n  }\n  // If the number\
    \ is equidistant from thirteen integers, round it away from\n  // zero.\n  if\
    \ ($next_integer - $value * 12 > 0) {\n    return $next_integer - 11;\n  }\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpkpmhq219.php on line 91

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ == 0 ? 1 : $closest_integer;\n    $closest_integer = $closest_integer == 1 ?\
    \ $closest_integer : $closest_integer - 1;\n    $closest_integer = $closest_integer\
    \ == $value ? $closest_integer : $closest_integer + 1;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2s142no.php:26\n\
    Stack trace:\n#0 /tmp/tmpc2s142no.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc2s142no.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphye2ajhs.php:25\n\
    Stack trace:\n#0 /tmp/tmphye2ajhs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphye2ajhs.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer - $value >= 1) {\n\
    \    $closest_integer = ($closest_integer - $value) + $value;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtsxjb81.php:26\n\
    Stack trace:\n#0 /tmp/tmpmtsxjb81.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmtsxjb81.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: -1
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659731106
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycol4sgj.php:25\n\
    Stack trace:\n#0 /tmp/tmpycol4sgj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpycol4sgj.php\
    \ on line 25\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp149qq6ih.php:26\n\
    Stack trace:\n#0 /tmp/tmp149qq6ih.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp149qq6ih.php\
    \ on line 26\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $difference = abs($value - $value);\n  $closest = $value;\n  if ($difference\
    \ < $smallest) {\n    $closest = $smallest;\n  }\n  elseif ($difference > $largest)\
    \ {\n    $closest = $largest;\n  }\n  else {\n    $closest = $value + round($difference\
    \ / $step) * $step;\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Division by zero in /tmp/tmpzu5a3i5u.php on line 22\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpzu5a3i5u.php:31\nStack trace:\n\
    #0 /tmp/tmpzu5a3i5u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzu5a3i5u.php\
    \ on line 31\n"
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $closestDiff = null;\n    $diff\
    \ = null;\n    $diffAbs = null;\n    $diffAbsMax = null;\n    $diffAbsMaxAbs =\
    \ null;\n    $diffAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbs = null;\n   \
    \ $diffAbsMaxAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \    $\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error in /tmp/tmpq0w9jgor.php on line 43

    '
  timestamp: 1659731101
- exit_code: 255
  program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// Note:\n// Rounding\
    \ away from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_zl69pt.php:25\n\
    Stack trace:\n#0 /tmp/tmpu_zl69pt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpu_zl69pt.php\
    \ on line 25\n"
  timestamp: 1659731101
