name: HumanEval_44_change_base
language: php
prompt: "<?php\n// Change numerical base of input number x to base.\n// return string\
  \ representation after the conversion.\n// base numbers are less than 10.\nfunction\
  \ change_base($x, $base) {\n"
tests: "function candidate(...$args) {\n    return change_base(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(8, 3) !== \"22\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(9, 3) !== \"100\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(234, 2) !== \"11101010\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(16, 2) !== \"10000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8, 2) !== \"1000\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 2) !== \"111\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(2, 3) !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3, 4) !== \"3\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4, 5) !== \"4\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5, 6) !== \"5\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 7) !== \"6\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(7, 8) !== \"7\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $r = \"\";\n  while ($x > 0) {\n    $r = base_convert($x, $base,\
    \ 10);\n    $x = floor($x / $base);\n  }\n  return $r;\n}", "  $r = \"\";\n  while\
    \ ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return\
    \ $r;\n}\n", "    $x = $x - intval($x / $base) * $base;\n    return $x;\n}", " \
    \   if ($base < 2 || $base > 36) {\n        die('Invalid base');\n    }\n    $digits\
    \ = strlen($x);\n    $result = '';\n    $i = 0;\n    while ($i < $digits) {\n\
    \        $result = $result . base_convert($x[$i], 10, $base);\n        $i++;\n\
    \    }\n    return $result;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n  \
    \  $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", " \
    \   $digits = strlen($x);\n    if ($digits == 0) {\n        return $x;\n    }\n\
    \    if ($base < 2 || $base > 10) {\n        die('Base must be between 2 and 10');\n\
    \    }\n    $base10 = 1;\n    $base2 = 1;\n    for ($i = 0; $i < $digits; $i++)\
    \ {\n        $base10 *= $base;\n        $base2 *= $base;\n        $base10 += $x[$i];\n\
    \        $base2 += $x[$i] * $base;\n    }\n    return $base10 / $base2;\n}\n",
  "    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n\
    \    return $x;\n}\n", "    $digits = strlen($x);\n    $result = '';\n    $sign\
    \ = '';\n    if ($x[0] == '-') {\n        $sign = '-';\n        $x = substr($x,\
    \ 1);\n    }\n    if ($digits == 0) {\n        return $sign;\n    }\n    if ($base\
    \ < 2 || $base > 10) {\n        return $sign;\n    }\n    $base = $base - 10;\n\
    \    while ($digits > 0) {\n        $mod = $x % $base;\n        $result = $base\
    \ . $mod . $result;\n        $x = floor($x / $base);\n        $digits--;\n   \
    \ }\n    return $sign . $result;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n\
    \    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n",
  "    $digits = strlen($x);\n    $res = '';\n    while ($digits > 0) {\n        $res\
    \ = $base[$digits % $base] + $res;\n        $digits = floor($digits / $base);\n\
    \    }\n    return $res;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r\
    \ = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    if\
    \ ($x < 1) {\n        return $x;\n    }\n    if ($base < 2 || $base > 10) {\n\
    \        return $x;\n    }\n    $base10 = 1;\n    $base2 = 2;\n    $base3 = 2;\n\
    \    $base4 = 3;\n    $base5 = 4;\n    $base6 = 6;\n    $base7 = 7;\n    $base8\
    \ = 8;\n    $base9 = 9;\n    $base10 = 10;\n    $base11 = 11;\n    $base12 = 12;\n\
    \    $base13 = 13;\n    $base14 = 14;\n    $base15 = 15;\n    $base16 = 16;\n\
    \    $base17 = 17;\n    $base18 = 18;\n    $base19 = 19;\n    $base20 = 20;\n\
    \    $base21 = 21;\n    $base22 = 22;\n    $base23 = 23;\n    $base24 = 24;\n\
    \    $base25 = 25;\n    $base26 = 26;\n    $base27 = 27;\n    $base28 = 28;\n\
    \    $base29 = 29;\n    $base30 = 30;\n    $base31 = 31;\n    $base32 = 32;\n\
    \    $base33 = 33;\n    $base34 = 34;\n    $base35 = 35;\n    $base36 = 36;\n\
    \    $base37 = 37;\n    $base38 = 38;\n    $base39 = 39;\n    $base40 = 40;\n\
    \    $base41 = 41;\n    $base42 = 42;\n    $base43 = 43;\n    $base44 = 44;\n\
    \    $base45 = 45;\n    $base46 = 46;\n    $base47 = 47;\n    $base48 = 48;\n\
    \    $base49 = 49;\n    $base50 = 50;\n    $base51 = 51;\n    $base52 = 52;\n\
    \    $base53 = 53;\n    $base54 = 54;\n    $base55 = 55;\n    $base56 = 56;\n\
    \    $base57 = 57;\n    $base58 = 58;\n    $base59 = 59;\n    $base60 = 60;\n\
    \    $base61 = 61;\n    $base62 = 62;\n    $base63 = 63;\n    $base64 = 64;\n\
    \    $base65 = 65;\n    $base66 = 66;\n    $base67 = 67;\n    $base68 = 68;\n\
    \    $base69 = 69;\n    $base70 = 70;\n    $base71 = 71;\n    $base72 = 72;\n\
    \    $base73 = 73;\n    $base74 = 74;\n    $base75 = 75;\n    $base76 = 76;\n\
    \    $base77 = ", "    $digits = strlen($x);\n    $baseLen = strlen($base);\n\
    \    $res = '';\n    while ($digits > 0) {\n        $res = substr($base, 0, $digits)\
    \ + $res;\n        $digits -= $baseLen;\n    }\n    return $res;\n}\n", "    $x\
    \ = $x / $base;\n    $x = $x * $base;\n    $x = $x + $base;\n    return $x;\n\
    }\n", "  $r = \"\";\n  $sign = ($x < 0) ? \"-\" : \"\";\n  $x = abs($x);\n  while\
    \ ($x >= $base) {\n    $r = $base ** $r + $sign;\n    $x -= $base;\n  }\n  return\
    \ $r;\n}\n", "  $str = strval($x);\n  $len = strlen($str);\n  $base10 = str_pad('',\
    \ $len, '0');\n  $base10[$len - 1] = $base;\n  $str = str_pad($str, strlen($base10),\
    \ '0');\n  return $str;\n}\n", "    if ($base < 2) {\n        return $x;\n   \
    \ }\n    $sign = ($x < 0) ? \"-\" : \"\";\n    $x = abs($x);\n    $digits = strlen($x);\n\
    \    $i = 0;\n    $res = \"\";\n    while ($i < $digits) {\n        $res = $res\
    \ * $base + intval($x[$i]);\n        $i++;\n    }\n    return $sign. $res;\n}",
  "  $str = strval($x);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str_replace('%',\
    \ '', $str);\n  $str = str_replace('.', '', $str);\n  $str = str_replace(',',\
    \ '', $str);\n  $str = str_replace('%', '', $str);\n  $str = str_replace('.',\
    \ '', $str);\n  $str = str_replace(',', '', $str);\n  $str = str", "  $r = \"\"\
    ;\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n\
    \    if ($base < 2 || $base > 36) {\n        throw new Exception('Invalid base');\n\
    \    }\n    if ($x < 0 || $x >= pow(10, $base)) {\n        throw new Exception('Invalid\
    \ value');\n    }\n    $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n    return\
    \ $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n  \
    \  $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $x = intval($x);\n \
    \   $base = intval($base);\n    if ($base < 2 || $base > 36) {\n        throw\
    \ new Exception('Base must be between 2 and 36');\n    }\n    if ($x < 0) {\n\
    \        $x = $x + $base;\n    }\n    $xstr = '';\n    while ($x >= $base) {\n\
    \        $xstr = $xstr . chr($x % $base);\n        $x = floor($x / $base);\n \
    \   }\n    return $xstr . chr($x);\n}\n", "    if ($x < 0 || $base < 1 || $base\
    \ > 10) {\n        throw new Exception('Base must be between 1 and 10');\n   \
    \ }\n    $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n    $x = str_pad($x, $base,\
    \ '0', STR_PAD_RIGHT);\n    return $x;\n}\n", "    $x = intval($x);\n    $base\
    \ = intval($base);\n    if ($base > 10) {\n        $base = strval($base);\n  \
    \  }\n    if ($base < 2) {\n        $base = '0'.$base;\n    }\n    if ($base >\
    \ strlen($base)) {\n        $base = strval($base);\n    }\n    $x = $x * pow(10,\
    \ $base - 1);\n    return $x;\n}\n", "  $digits = strlen($x) - 1;\n  $xx = str_repeat('0',\
    \ $digits);\n  $xx = str_pad($xx, $digits, '0', STR_PAD_LEFT);\n  $xx = base_convert($xx,\
    \ $base, $digits);\n  $xx = str_pad($xx, $digits, '0', STR_PAD_LEFT);\n  return\
    \ $xx;\n}\n", "    if ($x < 10) {\n        return $x;\n    }\n    $r = $x % $base;\n\
    \    return change_base($r, $base);\n}\n", "    $x = $x * $base;\n    $x = $x\
    \ / $base;\n    $x = $x * $base;\n    return $x;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base < 2 || $base > 36) {\n        throw\
    \ new Exception('Invalid base');\n    }\n    if ($x < 0) {\n        $x += $base;\n\
    \    }\n    $r = $x;\n    $digits = 1;\n    while ($digits < $base) {\n      \
    \  $r *= $base;\n        $digits++;\n    }\n    return $r;\n}\n", "  $r = \"\"\
    ;\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r;\n}\n", "  $bases = array('10', '11', '12', '13', '14', '15',\
    \ '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28',\
    \ '29', '30', '31');\n  if ($x < 0 || $base < 0 || $base > count($bases)) {\n\
    \    return null;\n  }\n  return $bases[$base] . str_pad(base_convert($x, 10,\
    \ $base), 8, '0', STR_PAD_LEFT);\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n\
    \    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", " \
    \   $x = $x / $base;\n    $x = $x * $base;\n    return $x;\n}\n", "    $digits\
    \ = strlen($x);\n    $i = 0;\n    $xx = \"\";\n    while ($i < $digits) {\n  \
    \      $xx .= $x[$i] * pow(10, $base - $digits);\n        $i++;\n    }\n    return\
    \ $xx;\n}\n", "  $r = $x;\n  while ($base > 10) {\n    $r = $r * 10 + ($x % 10);\n\
    \    $x = floor($x / 10);\n    $base--;\n  }\n  return $r;\n}\n", "  $r = \"\"\
    ;\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x\
    \ % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "    $str\
    \ = strval($x);\n    $len = strlen($str);\n    $baseLen = strlen($base);\n   \
    \ $res = '';\n    for ($i = 0; $i < $len; $i++) {\n        $res = $base[$i % $baseLen]\
    \ . $res;\n    }\n    return $res;\n}\n", "    $digits = strlen($x);\n    $basedigits\
    \ = strlen($base);\n    $quotient = $digits / $basedigits;\n    $remainder = $digits\
    \ % $basedigits;\n    $quotient = intval($quotient);\n    $remainder = intval($remainder);\n\
    \    $basedigits = strlen($base);\n    $base = $base[$remainder];\n    $result\
    \ = \"\";\n    for ($i = 0; $i < $basedigits; $i++) {\n        $result .= $base;\n\
    \    }\n    if ($quotient > 0) {\n        $result .= $quotient;\n    }\n    return\
    \ $result;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "  $r = \"\";\n  while\
    \ ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return\
    \ $r;\n}\n", "    if ($x < 10) {\n        return $x;\n    }\n    $r = $x % $base;\n\
    \    return change_base($r, $base);\n}\n", "    $x = intval($x);\n    $base =\
    \ intval($base);\n    if ($base > 10) {\n        die(\"Base must be less than\
    \ 10.\");\n    }\n    if ($base < 2) {\n        $base = 10;\n    }\n    if ($x\
    \ < 0) {\n        $x = abs($x);\n    }\n    if ($x == 0) {\n        return 0;\n\
    \    }\n    if ($x < pow(10, $base - 1)) {\n        return $x;\n    }\n    $x\
    \ *= pow(10, $base - 1);\n    $x = intval($x);\n    if ($x < pow(10, $base - 1))\
    \ {\n        return $x;\n    }\n    $x *= pow(10, $base - 1);\n    return $x;\n\
    }", "    $r = \"\";\n    while ($x >= $base) {\n        $r = $x % $base;\n   \
    \     $x = floor($x / $base);\n    }\n    return $r;\n}\n", "    $r = \"\";\n\
    \    while ($x >= $base) {\n        $r = $x % $base;\n        $x = floor($x /\
    \ $base);\n    }\n    return $r;\n}\n", "    $digits = strlen($x);\n    if ($digits\
    \ == 0) return $x;\n    $basedigits = strlen($base);\n    if ($basedigits == 0)\
    \ return $x;\n    if ($digits < $basedigits) return $x;\n    $basepower = strlen($base)\
    \ - 1;\n    $xdigits = strlen($x);\n    $basedigits = strlen($base);\n    $base\
    \ = $base * str_repeat('0', strlen($base) - $basedigits);\n    $x = $x * str_repeat('0',\
    \ strlen($base) - $xdigits);\n    $x = $x + $base;\n    $x = substr($x, 0, $basepower);\n\
    \    return $x;\n}\n", "    $x = $x * $base;\n    $x = $x / $base;\n    return\
    \ $x;\n}\n", "    $x = $x * $base;\n    $x = floor($x);\n    $x = $x / $base;\n\
    \    return $x;\n}", "    if ($x < 0 || $base < 0 || $base > 10) {\n        return\
    \ $x;\n    }\n    $sign = ($x < 0) ? '-' : '';\n    $x = abs($x);\n    $digits\
    \ = '';\n    while ($x >= $base) {\n        $digits .= $x % $base;\n        $x\
    \ = floor($x / $base);\n    }\n    return $digits . $sign . $x;\n}\n", "    if\
    \ ($x < 0) {\n        $x = abs($x);\n        $base = -$base;\n    }\n    if ($base\
    \ > strlen($x)) {\n        $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n    }\
    \ else {\n        $x = str_pad($x, $base, '0', STR_PAD_RIGHT);\n    }\n    return\
    \ $x;\n}\n", "    $digits = strlen($x);\n    if ($digits == 0) {\n        return\
    \ $x;\n    }\n    $baseLen = strlen($base);\n    if ($baseLen < $digits) {\n \
    \       $base = $base . str_repeat('0', $digits - $baseLen);\n    }\n    $x =\
    \ str_pad($x, $digits, $base, '0', STR_PAD_LEFT);\n    return $x;\n}\n", "   \
    \ $x = intval($x);\n    $base = intval($base);\n    if ($base < 2 || $base > 36)\
    \ {\n        throw new Exception('Invalid base');\n    }\n    if ($x < 0 || $x\
    \ >= pow(10, $base)) {\n        throw new Exception('Invalid number');\n    }\n\
    \    $r = $x; // $r = $x / $base;\n    $r = $r * pow(10, $base - 1);\n    $r =\
    \ round($r);\n    $r = $r / pow(10, $base);\n    return $r;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base > 10) {\n        $x = $x / $base;\n\
    \        $base = $base * 10;\n    }\n    $x = strval($x);\n    $base = strval($base);\n\
    \    if ($base > strlen($x)) {\n        $x = $x . '0';\n        $base = $base\
    \ * 10;\n    }\n    return $x . $base;\n}\n", "    $x = $x - intval($x / $base)\
    \ * $base;\n    return $x;\n}\n", "    if ($x < 0) {\n        $x = abs($x);\n\
    \        $base = -$base;\n    }\n    $x = $x / $base;\n    $x = floor($x);\n \
    \   $base *= $base;\n    $x = $x * $base;\n    return $x;\n}\n", "    if ($x <\
    \ 0) {\n        $x = abs($x);\n        $base = -$base;\n    }\n    if ($base <\
    \ 2 || $base > 36) {\n        throw new \\InvalidArgumentException(\"Base must\
    \ be between 2 and 36\");\n    }\n    if ($base == 10) {\n        return $x;\n\
    \    }\n    $sign = ($x < 0) ? '-' : '';\n    $x = abs($x);\n    $digits = strlen($x);\n\
    \    $rem = 0;\n    $i = 0;\n    while ($digits > 0) {\n        $i++;\n      \
    \  $rem = $rem * $base + intval($x[$i]);\n        $digits = $digits - 1;\n   \
    \ }\n    return $sign + $rem;\n}\n", "    $x = $x * $base;\n    $x = $x / $base;\n\
    \    $x = $x % $base;\n    return $x;\n}\n", "    $str = strval($x);\n    $len\
    \ = strlen($str);\n    $digits = array();\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $digits[$i] = $str[$i];\n        $i++;\n    }\n    $digits[$i] =\
    \ $base;\n    $digits = array_reverse($digits);\n    $i = 0;\n    $str = \"\"\
    ;\n    while ($i < $len) {\n        $str .= $digits[$i];\n        $i++;\n    }\n\
    \    return $str;\n}", "    $x = $x * $base;\n    $x = $x / $base;\n    return\
    \ $x;\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n        $r = $base %\
    \ $r + $x;\n        $x = floor($x / $base);\n        $base++;\n    }\n    return\
    \ $r;\n}\n", "  $r = \"\";\n  $sign = ($x < 0) ? \"-\" : \"\";\n  $x = abs($x);\n\
    \  while ($x >= $base) {\n    $r = $base ** $r + $sign;\n    $x -= $base;\n  }\n\
    \  return $r;\n}\n", "    $r = $x;\n    do {\n        $r = $r * $base;\n     \
    \   $base--;\n    } while ($base > 0);\n    return $r;\n}\n", "    $x = $x - intval($x\
    \ / $base) * $base;\n    $x = $x + intval($x / $base) * $base;\n    return $x;\n\
    }\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r + $x;\n}\n", "    $x = $x - intval($x / $base) *\
    \ $base;\n    $x = $x + intval($x / $base) * $base;\n    return $x;\n}\n", " \
    \ $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r;\n}\n", "  $x = $x * $base;\n  $x = $x - floor($x);\n\
    \  $x = $x / $base;\n  return $x;\n}", "    $x = $x / $base;\n    $x = $x * $base;\n\
    \    return $x;\n}\n", "    $x = $x * $base;\n    $x = $x / $base;\n    $x = $x\
    \ + $base;\n    return $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n   \
    \ $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "  $r\
    \ = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x /\
    \ $base);\n  }\n  return $r + $x;\n}\n", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r + $x;\n}\n", "    if ($x < 0 || $base < 0 || $base\
    \ > 10) {\n        return null;\n    }\n    $r = $x;\n    $digits = 1;\n    while\
    \ ($digits < $base) {\n        $r *= $base;\n        $digits++;\n    }\n    return\
    \ $r;\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n        $r = $x % $base;\n\
    \        $x = floor($x / $base);\n    }\n    return $r;\n}\n", "    $r = \"\"\
    ;\n    $i = 0;\n    while ($i < strlen($x)) {\n        $r = $r . base_convert($x[$i],\
    \ 10, $base);\n        $i++;\n    }\n    return $r;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base > 10) {\n        die(\"Base must be\
    \ less than 10.\");\n    }\n    if ($base < 2 || $base > 36) {\n        die(\"\
    Base must be between 2 and 36.\");\n    }\n    if ($x < 0) {\n        die(\"Invalid\
    \ input number.\");\n    }\n    if ($base == 10) {\n        return $x;\n    }\n\
    \    $r = $x;\n    $digits = 1;\n    while ($digits < $base) {\n        $r *=\
    \ $base;\n        $digits++;\n    }\n    $r = $r / $base;\n    return $r;\n}\n",
  "    $x = $x - ($x % $base);\n    $x = $x / $base;\n    return $x;\n}\n", "    $x\
    \ = $x - ($x % $base);\n    return $x;\n}\n", "    $xstr = strval($x);\n    $xlen\
    \ = strlen($xstr);\n    if ($xlen == 0) {\n        return 0;\n    }\n    $basestr\
    \ = strval($base);\n    $baselen = strlen($basestr);\n    if ($baselen == 0) {\n\
    \        return 0;\n    }\n    if ($baselen > $xlen) {\n        return 0;\n  \
    \  }\n    $xstrlen = strlen($xstr);\n    $basestrlen = strlen($basestr);\n   \
    \ $basepos = 0;\n    $xpos = 0;\n    $ret = 0;\n    while ($xpos < $xstrlen) {\n\
    \        $xdigit = substr($xstr, $xpos, 1);\n        $xpos += 1;\n        $xpow\
    \ = $xlen - $xpos;\n        $xpowstr = '';\n        for ($i = 0; $i < $xpow; $i++)\
    \ {\n            $xpowstr .= $xstr[$xpos + $i];\n        }\n        $xdigit =\
    \ base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit,\
    \ $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n\
    \        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit\
    \ = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit,\
    \ $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n\
    \        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit\
    \ = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit,\
    \ $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n\
    \        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit\
    \ = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit,\
    \ $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n\
    \        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit\
    \ = base_convert($xdigit, $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit,\
    \ $basestr, $basestrlen);\n        $xdigit = base_convert($xdigit, $basestr, $basestrlen);\n\
    \        $", "    if ($x < 10) {\n        return $x;\n    }\n    $r = $x % $base;\n\
    \    if ($r == 0) {\n        return $base;\n    }\n    return change_base($r,\
    \ $base);\n}\n", "    $x = $x - intval($x / $base) * $base;\n    return $x;\n\
    }\n", "    if ($x < 0) {\n        $x = abs($x);\n        $base = -$base;\n   \
    \ }\n    if ($base < 2 || $base > 36) {\n        throw new \\InvalidArgumentException('Base\
    \ must be between 2 and 36');\n    }\n    $digits = $base;\n    $result = '';\n\
    \    while ($x >= $digits) {\n        $x = floor($x / $digits);\n        $result\
    \ .= $digits;\n    }\n    $result .= $x;\n    return $result;\n}\n", "    $x *=\
    \ $base;\n    $x = intval($x);\n    $base = 10;\n    $x = $x - intval($x / $base)\
    \ * $base;\n    return $x;\n}\n", "    $str = strval($x);\n    $len = strlen($str);\n\
    \    $base2 = strval($base);\n    if ($len > 0 && $base2 < 10) {\n        $str\
    \ = str_pad($str, $base2, '0', STR_PAD_LEFT);\n    }\n    return $str;\n}\n",
  "    $str = strval($x);\n    $len = strlen($str);\n    $baseLen = strlen($base);\n\
    \    $res = \"\";\n    $i = 0;\n    while($i < $len) {\n        $res = $base[$i]\
    \ * $len + $res;\n        $i++;\n    }\n    return $res;\n}\n", "    if ($x <\
    \ 0) {\n        $x = abs($x);\n        $base = -$base;\n    }\n    $x = $x / $base;\n\
    \    $x = floor($x);\n    $x = $x * $base;\n    return $x;\n}\n", "    $x = $x\
    \ - intval($x / $base) * $base;\n    return $x;\n}\n", "  $r = \"\";\n  while\
    \ ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return\
    \ $r;\n}\n", "    $digits = strlen($x);\n    $res = '';\n    while ($digits >\
    \ 0) {\n        $res = $base[$digits % $base] + $res;\n        $digits = floor($digits\
    \ / $base);\n    }\n    return $res;\n}\n", "  $r = \"\";\n  $sign = ($x < 0);\n\
    \  $x = abs($x);\n  while ($x >= $base) {\n    $r = $base ** $sign;\n    $x -=\
    \ $base;\n    $sign = ($x < 0);\n  }\n  return $r;\n}\n", "    $x = $x - intval($x\
    \ / $base) * $base;\n    return $x;\n}", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "  $digits = strlen($x) - 1;\n  $sign = $x[0] == '-' ? -1 : 1;\n  $x = ltrim($x,\
    \ '+-');\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/', '$10$2', $x);\n  $x = preg_replace('/(0*)([1-9])/',\
    \ '$10$2', $x);\n  $x = ", "  $str = strval($x);\n  $len = strlen($str);\n  $base2\
    \ = strval($base);\n  $base10 = str_pad('', $len, '0');\n  $base10[$len] = $base2;\n\
    \  $base10 = strval($base10);\n  $base = $base10;\n  $result = '';\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    $result = $result . strval($str[$i] * $base);\n\
    \  }\n  return $result;\n}\n", "  $r = \"\";\n  $sign = ($x < 0);\n  $x = abs($x);\n\
    \  while ($x >= $base) {\n    $r = $base ** $sign;\n    $x -= $base;\n    $sign\
    \ = ($x < 0);\n  }\n  return $r;\n}\n", "    $x = $x - ($x % $base);\n    return\
    \ $x;\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n        $r = $x % $base;\n\
    \        $x = floor($x / $base);\n    }\n    return $r;\n}\n", "  $r = \"\";\n\
    \  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r + $x;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > strlen($x)) {\n    return $x;\n  }\n  $digits = strlen($x) - $base;\n\
    \  $digits = $digits < 0 ? 0 : floor($digits);\n  $x = substr($x, 0, $base) .\
    \ str_repeat('0', $digits - $base) . substr($x, $base);\n  return $x;\n}\n", " \
    \   $x = $x - ($x % $base);\n    $x = $x / $base;\n    return $x;\n}\n", "   \
    \ $x = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n      \
    \  die('Base must be less than 10.');\n    }\n    if ($base < 2 || $base > 36)\
    \ {\n        die('Base must be between 2 and 36.');\n    }\n    if ($x < 0) {\n\
    \        die('Negative numbers are not allowed.');\n    }\n    if ($base == 10)\
    \ {\n        $x = $x * 100;\n        $base = 16;\n    }\n    if ($base == 16)\
    \ {\n        $x = $x * 16;\n        $base = 10;\n    }\n    if ($base == 2) {\n\
    \        $x = $x * 2;\n        $base = 8;\n    }\n    if ($base == 8) {\n    \
    \    $x = $x * 8;\n        $base = 16;\n    }\n    if ($base == 16) {\n      \
    \  $x = $x * 16;\n        $base = 10;\n    }\n    if ($base == 8) {\n        $x\
    \ = $x * 8;\n        $base = 16;\n    }\n    if ($base == 10) {\n        $x =\
    \ $x * 10;\n        $base = 16;\n    }\n    if ($base == 16) {\n        $x = $x\
    \ * 16;\n        $base = 10;\n    }\n    if ($base == 8) {\n        $x = $x *\
    \ 8;\n        $base = 16;\n    }\n    if ($base == 10) {\n        $x = $x * 10;\n\
    \        $base = 16;\n    }\n    if ($base == 16) {\n        $x = $x * 16;\n \
    \       $base = 10;\n    }\n    if ($base == 8) {\n        $x = $x * 8;\n    \
    \    $base = 16;\n    }\n    if ($base == 10) {\n        $x = $x * 10;\n     \
    \   $base = 16;\n    }\n    if ($base == 16) {\n        $x = $x * 16;\n      \
    \  $base = 10;\n    }\n    if ($base == 8) {\n        $x = $x * 8;\n        $base\
    \ = 16;\n    }\n    if ($base == 10) {\n        $x = $x * 10;\n        $base =\
    \ 16;\n    }\n    if ($base == 16) {\n        $x = $x * 16;\n        $base = 10;\n\
    \    }\n    if ($base == 8) {\n        $x = $x * 8;\n        $base = 16;\n   \
    \ }\n    if ($base == 10) {\n        $x = $x * 10;\n        $base = 16;\n    }\n\
    \    if ($base == 16) {\n        $x = $x * 16;\n        $base = 10;\n    }\n \
    \   if ($base == 8) {\n        $x = $x * 8;\n        $base = 16;\n    }\n    if\
    \ ($base == 10) {\n        $x = $x * 10;\n        $base = 16;\n    }\n    if ($base\
    \ == 16) {\n        $x = $x * 16;\n        $base = 10;\n    }\n    if ($base ",
  "    $bases = array('10', '11', '12', '13', '14', '15', '16', '17', '18', '19',\
    \ '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31');\n \
    \   $base = $bases[$base];\n    $x = $x * $base;\n    $x = $x / $base;\n    return\
    \ $x;\n}\n", "    $digits = strlen($x);\n    $basedigits = strlen($base);\n  \
    \  $res = '';\n    for($i = 0; $i < $basedigits; $i++) {\n        $res .= $x%$base;\n\
    \        $x = floor($x/$base);\n    }\n    return $res;\n}\n", "    $digits =\
    \ str_split($x);\n    $result = '';\n    foreach ($digits as $digit) {\n     \
    \   $result .= $digit;\n        if ($digit == $base) {\n            break;\n \
    \       }\n    }\n    return $result;\n}", "    $r = $x;\n    $digits = strlen($r);\n\
    \    $basedigits = strlen($base);\n    while($digits > $basedigits) {\n      \
    \  $r = substr($r, 0, -1);\n        $digits--;\n    }\n    while($digits < $basedigits)\
    \ {\n        $r = $r . $base;\n        $digits++;\n    }\n    return $r;\n}\n",
  "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r;\n}\n", "    $x = $x * $base;\n    $x = $x / $base;\n\
    \    $x = $x * $base;\n    return $x;\n}", "    $x = $x * $base;\n    $x = $x\
    \ / $base;\n    $x = $x + $base;\n    return $x;\n}\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base > 10) {\n        return $x;\n    }\n\
    \    if ($base < 2) {\n        $base = 10;\n    }\n    $sign = ($x < 0) ? '-'\
    \ : '';\n    $x = abs($x);\n    $digits = '';\n    while ($x >= $base) {\n   \
    \     $digits = $baseToDec($base, $digits);\n        $x = $x / $base;\n    }\n\
    \    return $sign + $digits . $x;\n}\n", "    $r = \"\";\n    while ($x >= $base)\
    \ {\n        $r = $x % $base;\n        $x = floor($x / $base);\n    }\n    return\
    \ $r;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n  \
    \  $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "    $digits = strlen($x);\n\
    \    if ($digits == 0) {\n        return 0;\n    }\n    $baseLen = strlen($base);\n\
    \    if ($baseLen < $digits) {\n        return $x;\n    }\n    $xLen = strlen($x);\n\
    \    $baseX = str_repeat($base, $xLen - $digits);\n    $xX = str_repeat($x, $digits);\n\
    \    return $baseX + $xX;\n}\n", "    $digits = str_split($x);\n    $digits_count\
    \ = count($digits);\n    $digits_sum = 0;\n    $digits_carry = 0;\n    for ($i\
    \ = 0; $i < $digits_count; $i++) {\n        $digits_sum += $digits[$i] * pow(10,\
    \ $i);\n        $digits_carry = $digits_sum >> $base;\n        $digits_sum = $digits_sum\
    \ & $digits_base[$base];\n    }\n    return $digits_carry ? $digits_sum . base_convert($digits_sum,\
    \ $base, $digits_base[$base]) : $digits_sum;\n}\n", "  $r = \"\";\n  while ($x\
    \ >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return\
    \ $r + $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $r = \"\";\n    $len\
    \ = strlen($x);\n    for ($i = 0; $i < $len; $i++) {\n        $r = $r . base_convert($x[$i],\
    \ 10, $base);\n    }\n    return $r;\n}\n", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "  $x = $x * $base;\n  $x = $x / $base;\n  $x = $x + $base;\n  return $x;\n}\n",
  "    $x = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n     \
    \   $x = $x / $base;\n        $x = $x * $base;\n        $x = $x + $base;\n   \
    \ }\n    return $x;\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n      \
    \  $r = $x % $base;\n        $x = floor($x / $base);\n    }\n    return $r + $x;\n\
    }\n", "    $digits = strlen($x);\n    if ($digits == 0) {\n        return $x;\n\
    \    }\n    $baseLen = strlen($base);\n    if ($baseLen > $digits) {\n       \
    \ return $x;\n    }\n    $result = '';\n    while ($digits > 0) {\n        if\
    \ ($digits % $baseLen == 0) {\n            $result .= $base[$digits / $baseLen];\n\
    \            $digits %= $baseLen;\n        } else {\n            $result .= $x[$digits\
    \ - 1];\n            $digits = $baseLen;\n        }\n    }\n    return $result;\n\
    }\n", "    $digits = strlen($x);\n    $basedigits = strlen($base);\n    $quotient\
    \ = intdiv($x, $base);\n    $remainder = $x - $quotient * $base;\n    $quotient\
    \ = intdiv($quotient, $base);\n    $quotient = str_pad($quotient, $basedigits,\
    \ \"0\", STR_PAD_LEFT);\n    $remainder = str_pad($remainder, $basedigits, \"\
    0\", STR_PAD_LEFT);\n    return $quotient . $remainder;\n}\n", "    $str = strval($x);\n\
    \    $len = strlen($str);\n    $res = '';\n    $sign = '';\n    if ($len > 0)\
    \ {\n        if ($str[0] == '-') {\n            $sign = '-';\n            $str\
    \ = substr($str, 1);\n        }\n        if ($base > 0 && $base < $len) {\n  \
    \          $base = strlen($str) - $base;\n            $str = str_pad($str, $base,\
    \ '0', STR_PAD_LEFT);\n            $str = str_pad($str, $base, '0', STR_PAD_RIGHT);\n\
    \            $str = str_pad($str, $base, '0', STR_PAD_BOTH);\n        }\n    }\n\
    \    return $sign . $str;\n}\n", "    $x = $x * $base;\n    $x = $x / $base;\n\
    \    $x = $x * $base;\n    return $x;\n}\n", "    $x = intval($x);\n    $base\
    \ = intval($base);\n    if ($base < 2 || $base > 36) {\n        throw new Exception('Invalid\
    \ base');\n    }\n    if ($x < 0 || $x >= pow(10, $base)) {\n        throw new\
    \ Exception('Invalid number');\n    }\n    $x = str_pad((string)$x, $base, '0',\
    \ STR_PAD_LEFT);\n    return $x;\n}\n", "    if ($base < 2 || $base > 36) {\n\
    \        die('Base must be between 2 and 36');\n    }\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace('.', '', $x);\n    $x = str_replace('%', '',\
    \ $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace('%', '', $x);\n\
    \    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x\
    \ = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '',\
    \ $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n\
    \    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x\
    \ = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '',\
    \ $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n\
    \    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x\
    \ = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '',\
    \ $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n\
    \    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x\
    \ = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '',\
    \ $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n\
    \    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x\
    \ = str_replace(',', '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',',\
    \ '', $x);\n    $x = str_replace(',', '', $x);\n    $x = str_replace(',', '',\
    \ $x);\n    $x = str_replace(',', '', $x);", "    if ($base < 2) {\n        return\
    \ $x;\n    }\n    $sign = ($x < 0) ? '-' : '';\n    $x = abs($x);\n    $digits\
    \ = strlen($x);\n    $i = 0;\n    while ($i < $digits) {\n        $x[$i] = $x[$i]\
    \ / $base;\n        $i++;\n    }\n    $x = $sign;\n    $i = 0;\n    while ($i\
    \ < $digits) {\n        $x[$i] = $x[$i] * $base;\n        $i++;\n    }\n    return\
    \ $x;\n}\n", "    $digits = strlen($x);\n    if ($digits == 0) {\n        return\
    \ $x;\n    }\n    if ($base < 2 || $base > 10) {\n        die(\"Base must be between\
    \ 2 and 10\");\n    }\n    if ($base == 10) {\n        return $x;\n    }\n   \
    \ $remainder = 0;\n    $digits = strlen($x);\n    for ($i = 0; $i < $digits; $i++)\
    \ {\n        $remainder *= $base;\n        $remainder += $x[$i];\n    }\n    return\
    \ $remainder;\n}\n", "  $r = \"\";\n  $x_len = strlen($x);\n  $x_div = $x_len\
    \ % $base;\n  if ($x_div != 0) {\n    $r = substr($x, 0, $x_len - $x_div) . \"\
    0\";\n  } else {\n    $r = $x;\n  }\n  $r = $r . str_repeat($base, $x_len / $base);\n\
    \  return $r;\n}\n", "  $str = strval($x);\n  $len = strlen($str);\n  $base2 =\
    \ strval($base);\n  $base10 = str_pad('', $len, '0');\n  $base10[$len] = $base2;\n\
    \  $base10[$len + 1] = $base2;\n  $base10[$len + 2] = $base2;\n  $base10[$len\
    \ + 3] = $base2;\n  $base10[$len + 4] = $base2;\n  $base10[$len + 5] = $base2;\n\
    \  $base10[$len + 6] = $base2;\n  $base10[$len + 7] = $base2;\n  $base10[$len\
    \ + 8] = $base2;\n  $base10[$len + 9] = $base2;\n  $base10[$len + 10] = $base2;\n\
    \  $base10[$len + 11] = $base2;\n  $base10[$len + 12] = $base2;\n  $base10[$len\
    \ + 13] = $base2;\n  $base10[$len + 14] = $base2;\n  $base10[$len + 15] = $base2;\n\
    \  $base10[$len + 16] = $base2;\n  $base10[$len + 17] = $base2;\n  $base10[$len\
    \ + 18] = $base2;\n  $base10[$len + 19] = $base2;\n  $base10[$len + 20] = $base2;\n\
    \  $base10[$len + 21] = $base2;\n  $base10[$len + 22] = $base2;\n  $base10[$len\
    \ + 23] = $base2;\n  $base10[$len + 24] = $base2;\n  $base10[$len + 25] = $base2;\n\
    \  $base10[$len + 26] = $base2;\n  $base10[$len + 27] = $base2;\n  $base10[$len\
    \ + 28] = $base2;\n  $base10[$len + 29] = $base2;\n  $base10[$len + 30] = $base2;\n\
    \  $base10[$len + 31] = $base2;\n  $base10[$len + 32] = $base2;\n  $base10[$len\
    \ + 33] = $base2;\n  $base10[$len + 34] = $base2;\n  $base10[$len + 35] = $base2;\n\
    \  $base10[$len + 36] = $base2;\n  $base10[$len + 37] = $base2;\n  $base10[$len\
    \ + 38] = $base2;\n  $base10[$len + 39] = $base2;\n  $base", "    $r = \"\";\n\
    \    while ($x >= $base) {\n        $r = $base % $r + $x;\n        $x = floor($x\
    \ / $base);\n        $base = $base * 10;\n    }\n    return $r;\n}\n", "    $str\
    \ = strval($x);\n    $len = strlen($str);\n    if ($base > $len) {\n        return\
    \ $str;\n    }\n    $digits = str_split($str, $base);\n    $res = \"\";\n    foreach\
    \ ($digits as $digit) {\n        $res .= $digit;\n    }\n    return $res;\n}\n",
  "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r;\n}\n", "  $x = intval($x);\n  $base = intval($base);\n\
    \  if ($base > 10) {\n    return $x;\n  }\n  $sign = ($x < 0) ? '-' : '';\n  $x\
    \ = abs($x);\n  $digits = strlen($x);\n  $baseLen = strlen($base);\n  $res = '';\n\
    \  while ($digits > 0) {\n    $res = $base[$digits % $baseLen] . $res;\n    $digits\
    \ = floor($digits / $baseLen);\n  }\n  return $sign . $res;\n}\n", "  $r = $x;\n\
    \  while ($base > 1) {\n    $r = $r * $base;\n    $base--;\n  }\n  return $r;\n\
    }\n", "    $base10 = 10; // base 10\n    $base16 = 16; // base 16\n    $base2\
    \  = 2; // base 2\n    $base8  = 8; // base 8\n    $base10 = pow(10, $base);\n\
    \    $base16 = pow(16, $base);\n    $base2  = pow(10, $base2);\n    $base8  =\
    \ pow(8, $base);\n    $base10 = pow($base10, $base);\n    $base16 = pow($base16,\
    \ $base);\n    $base2  = pow($base2, $base);\n    $base8  = pow($base8, $base);\n\
    \    $base10 = pow($base10, $base);\n    $base16 = pow($base16, $base);\n    $base2\
    \  = pow($base2, $base);\n    $base8  = pow($base8, $base);\n    $base10 = pow($base10,\
    \ $base);\n    $base16 = pow($base16, $base);\n    $base2  = pow($base2, $base);\n\
    \    $base8  = pow($base8, $base);\n    $base10 = pow($base10, $base);\n    $base16\
    \ = pow($base16, $base);\n    $base2  = pow($base2, $base);\n    $base8  = pow($base8,\
    \ $base);\n    $base10 = pow($base10, $base);\n    $base16 = pow($base16, $base);\n\
    \    $base2  = pow($base2, $base);\n    $base8  = pow($base8, $base);\n    $base10\
    \ = pow($base10, $base);\n    $base16 = pow($base16, $base);\n    $base2  = pow($base2,\
    \ $base);\n    $base8  = pow($base8, $base);\n    $base10 = pow($base10, $base);\n\
    \    $base16 = pow($base16, $base);\n    $base2  = pow($base2, $base);\n    $base8\
    \  = pow($base8, $base);\n    $base10 = pow($base10, $base);\n    $base16 = pow($base16,\
    \ $base);\n    $base2  = pow($base2, $base);\n    $base8  = pow($base8, $base);\n\
    \    $base10 = pow($base10, $base);\n    $base16 = pow($base16, $base);\n    $base2\
    \  = pow($base2, $base);\n    $base8  = pow($base8, $base);\n    $base10 = pow($base10,\
    \ $base);\n    $base16 = pow", "  $r = \"\";\n  while ($x >= $base) {\n    $r\
    \ = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", " \
    \ $digits = strlen($x);\n  $baseLen = strlen($base);\n  $newBase = str_pad('',\
    \ $baseLen + $digits - 1, '0');\n  $newBase = substr($newBase, 0, $baseLen);\n\
    \  $newBase = substr($newBase, $baseLen, $digits);\n  $newBase = str_pad($newBase,\
    \ $baseLen, '0');\n  return $newBase . $x;\n}\n", "    $x = $x - intval($x / $base)\
    \ * $base;\n    return $x;\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n\
    \        $r = $x % $base;\n        $x = floor($x / $base);\n    }\n    return\
    \ $r + $x;\n}\n", "    if ($x < 0)\n        $x = abs($x);\n    if ($base > 10)\n\
    \        $base = abs($base);\n    if ($base == 10)\n        return $x;\n    if\
    \ ($base < 2)\n        return $x;\n    if ($base == 2)\n        return $x;\n \
    \   if ($base == 8)\n        return $x;\n    if ($base == 16)\n        return\
    \ $x;\n    if ($base == 256)\n        return $x;\n    if ($base == 65536)\n  \
    \      return $x;\n    if ($base == 16777216)\n        return $x;\n    if ($base\
    \ == 268435456)\n        return $x;\n    if ($base == 4294967296)\n        return\
    \ $x;\n    if ($base == 8589934592)\n        return $x;\n    if ($base == 17179869184)\n\
    \        return $x;\n    if ($base == 34359738368)\n        return $x;\n    if\
    \ ($base == 68719476736)\n        return $x;\n    if ($base == 137438953472)\n\
    \        return $x;\n    if ($base == 274877906944)\n        return $x;\n    if\
    \ ($base == 549755813888)\n        return $x;\n    if ($base == 1099511627776)\n\
    \        return $x;\n    if ($base == 2199023255552)\n        return $x;\n   \
    \ if ($base == 4398046511104)\n        return $x;\n    if ($base == 8796093022208)\n\
    \        return $x;\n    if ($base == 17592186044416)\n        return $x;\n  \
    \  if ($base == 35184372088832)\n        return $x;\n    if ($base == 70368744177664)\n\
    \        return $x;\n    if ($base == 140737488355328)\n        return $x;\n \
    \   if ($base == 281474976710656)\n        return $x;\n    if ($base == 562949953421312)\n\
    \        return $x;\n    if ($base == 1125899906842624)\n        return $x;\n\
    \    if ($base == 2251799813685248)\n        return $x;\n    if ($base == 4503599627370496)\n\
    \        return $x;\n    if ($base == 9007199254740992)\n        return $x;\n\
    \    if ($base == 18014398509481984)\n        return $x;\n    if ($base == 36028797018963968)\n\
    \        return $x;\n    if ($base == 72057594037927936)\n", "    $x = intval($x);\n\
    \    $base = intval($base);\n    if ($base < 2 || $base > 36) {\n        throw\
    \ new Exception('Invalid base');\n    }\n    if ($x < 0) {\n        $x += $base;\n\
    \    }\n    if ($x != $x) {\n        $x = '0';\n    }\n    $r = $x;\n    do {\n\
    \        $mod = $r % $base;\n        $r = $r;\n        $x = $base * $x + $mod;\n\
    \    } while ($r != $x);\n    return $x;\n}\n", "    $r = \"\";\n    while ($x\
    \ >= $base) {\n        $r = $x % $base;\n        $x = floor($x / $base);\n   \
    \ }\n    return $r . $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r\
    \ = $base % $r + $x;\n    $x = floor($x / $base);\n    $base = $base * 10;\n \
    \ }\n  return $r;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n \
    \   if ($base < 2 || $base > 36) {\n        throw new Exception('Base must be\
    \ between 2 and 36');\n    }\n    if ($x < 0) {\n        $x = $x + $base;\n  \
    \  }\n    $x = $x - $base;\n    $x *= $base;\n    $x = intval($x);\n    return\
    \ $x;\n}\n", "    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x\
    \ / $base) * $base;\n    return $x;\n}", "    $x = $x - intval($x / $base) * $base;\n\
    \    return $x;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n   \
    \ if ($base < 2 || $base > 36) {\n        throw new Exception('Invalid base');\n\
    \    }\n    if ($x < 0 || $x >= pow(10, $base)) {\n        throw new Exception('Invalid\
    \ number');\n    }\n    $x = str_pad($x, $base, '0', STR_PAD_LEFT);\n    $x =\
    \ ltrim($x, '0');\n    return $x;\n}\n", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "  $x = intval($x);\n  $base = intval($base);\n  if ($base > 10) {\n    return $x;\n\
    \  }\n  $sign = ($x < 0) ? '-' : '';\n  $x = abs($x);\n  $digits = strlen($x);\n\
    \  $rem = 0;\n  $x *= $base;\n  for ($i = 0; $i < $digits; $i++) {\n    $rem =\
    \ $rem * $base + intval($x[$i]);\n  }\n  return $sign + $rem;\n}\n", "    $x =\
    \ $x - intval($x / $base) * $base;\n    return $x;\n}\n", "    if ($x < 10) {\n\
    \        return $x;\n    }\n    $r = $x % $base;\n    if ($r == 0) {\n       \
    \ return $base;\n    }\n    return change_base($r, $base);\n}\n", "  $r = \"\"\
    ;\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n\
    \  }\n  return $r;\n}\n", "  $str = strval($x);\n  $len = strlen($str);\n  $baseLen\
    \ = strlen($base);\n  $newBase = array();\n  for ($i = 0; $i < $baseLen; $i++)\
    \ {\n    $newBase[] = ord($base[$i]) - ord('0');\n  }\n  $newBase = array_reverse($newBase);\n\
    \  $newBase = array_merge($newBase, array(0));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array(0));\n  $newBase\
    \ = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_reverse($base));\n\
    \  $newBase = array_merge($newBase, array_reverse($base));\n  $newBase = array_merge($newBase,\
    \ array_reverse($base));\n  $newBase = array_merge($newBase, array_", "  $str\
    \ = strval($x);\n  $len = strlen($str);\n  $base2 = strval($base);\n  $base10\
    \ = str_pad('', $len, '0');\n  $base10[$len] = $base2;\n  $base10 = str_pad($base10,\
    \ $len, '0');\n  $base10 = (int) $base10;\n  $base2 = (int) $base2;\n  $base =\
    \ $base10 - $base2;\n  $str = str_pad($str, $len, '0');\n  $str = str_pad($str,\
    \ $len, '0', STR_PAD_LEFT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n\
    \  $str = str_pad($str, $len, '0', STR_PAD_BOTH);\n  $str = str_pad($str, $len,\
    \ '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str\
    \ = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str =\
    \ str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str =\
    \ str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str =\
    \ str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str =\
    \ str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str =\
    \ str_pad($str, $len, '0', STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0',\
    \ STR_PAD_RIGHT);\n  $str = str_pad($str, $len, '0', STR_PAD_RIGHT", "    $x =\
    \ $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n\
    \    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) *\
    \ $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x /\
    \ $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x\
    \ / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x -\
    \ intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n   \
    \ $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n\
    \    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) *\
    \ $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x /\
    \ $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x\
    \ / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x -\
    \ intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n   \
    \ $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n\
    \    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x / $base) *\
    \ $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x /\
    \ $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x\
    \ / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n    $x = $x -\
    \ intval($x / $base) * $base;\n    $x = $x - intval($x / $base) * $base;\n   \
    \ $x = $x - intval($x / $base) * $base;\n    $x = ", "  $str = strval($x);\n \
    \ $str = str_replace(',', '', $str);\n  $str = str_replace('.', '', $str);\n \
    \ $str = str_replace(',', '.', $str);\n  $str = str_replace('.', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $str = str_replace(',', '', $str);\n  $str = str_replace(',', '', $str);\n\
    \  $", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x =\
    \ floor($x / $base);\n  }\n  return $r + $x;\n}\n", "    if ($x < 0) {\n     \
    \   $x = abs($x);\n        $base = -$base;\n    }\n    if ($base < 2 || $base\
    \ > 36) {\n        throw new Exception('Base must be between 2 and 36');\n   \
    \ }\n    if ($base == 10) {\n        return $x;\n    }\n    $sign = ($x < 0) ?\
    \ '-' : '';\n    $x = abs($x);\n    $digits = strlen($x);\n    $i = 0;\n    $xstr\
    \ = '';\n    while ($i < $digits) {\n        $xstr = $xstr + $x[$i] * pow(10,\
    \ $i);\n        $i++;\n    }\n    return $sign + $xstr / pow(10, $base);\n}\n",
  "  $r = \"\";\n  $sign = ($x < 0);\n  $x = abs($x);\n  while ($x >= $base) {\n \
    \   $r = $base ** $sign;\n    $x = $x / $base;\n    $sign = ($x < 0);\n  }\n \
    \ return $r;\n}\n", "  $r = \"\";\n  $sign = ($x < 0) ? \"-\" : \"\";\n  $x =\
    \ abs($x);\n  while ($x >= $base) {\n    $r = $base * $r + $x;\n    $x -= $base;\n\
    \  }\n  return $sign. $r;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r\
    \ = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $digits\
    \ = strlen($x);\n    if ($digits == 0) {\n        return 0;\n    }\n    $baseLen\
    \ = strlen($base);\n    if ($baseLen > $digits) {\n        return 0;\n    }\n\
    \    $result = 0;\n    for ($i = 0; $i < $baseLen; $i++) {\n        $result +=\
    \ (ord($base[$i]) - ord('0')) * pow(10, $digits - $baseLen - $i);\n    }\n   \
    \ return $result + $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r =\
    \ $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $x =\
    \ $x - intval($x / $base) * $base;\n    return $x;\n}\n", "    $x = $x * $base;\n\
    \    $x = $x / $base;\n    $x = $x % $base;\n    return $x;\n}", "    $x *= $base;\n\
    \    $x = intval($x);\n    $base = 10;\n    $digits = $base;\n    $result = '';\n\
    \    while ($x > 0) {\n        $digits = $base;\n        $x = $x % $base;\n  \
    \      $result = $x . $result;\n    }\n    return $result;\n}", "    $xstr = strval($x);\n\
    \    $basestr = strval($base);\n    if ($basestr == '0') {\n        return $xstr;\n\
    \    }\n    $baseint = (int) $basestr;\n    if ($baseint == 0) {\n        return\
    \ '0';\n    }\n    $xint = strlen($xstr) - 1;\n    $xstr[$xint] = $basestr[strlen($basestr)\
    \ - 1];\n    $xstr = implode('', $xstr);\n    return $xstr;\n}\n", "    $x = $x\
    \ - intval($x / $base) * $base;\n    return $x;\n}\n", "  $r = \"\";\n  while\
    \ ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return\
    \ $r;\n}\n", "    if ($x < 0 || $base < 0 || $base > 10) {\n        die('Invalid\
    \ base');\n    }\n    $digits = strlen($x);\n    $mod = $digits % $base;\n   \
    \ if ($mod > 0) {\n        $x = $x . str_repeat('0', $mod - 1);\n    }\n    return\
    \ $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n  \
    \  $x = floor($x / $base);\n  }\n  return $r + $x;\n}\n", "  $r = $x;\n  while\
    \ ($base > 10) {\n    $r = $r * 10 + ($x % 10);\n    $x = floor($x / 10);\n  \
    \  $base--;\n  }\n  return $r;\n}\n", "    $bases = array('10', '11', '12', '13',\
    \ '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26',\
    \ '27', '28', '29', '30', '31');\n    if ($x < 0 || $base < 0 || $base > count($bases))\
    \ {\n        return $x;\n    }\n    $x = abs($x);\n    $base = abs($base);\n \
    \   $res = '';\n    while ($x >= $base) {\n        $res .= $bases[$base--];\n\
    \        $x = floor($x / $base);\n    }\n    return $res . ($x < $base ? $bases[$base]\
    \ : $x);\n}\n", "    $x = $x / $base;\n    $x = round($x);\n    $x = $x * $base;\n\
    \    return $x;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $x = $x * $base;\n\
    \    $x = $x / $base;\n    $x = $x + $base;\n    return $x;\n}\n", "    $r = \"\
    \";\n    while ($x >= $base) {\n        $r = $x % $base;\n        $x = floor($x\
    \ / $base);\n    }\n    return $r;\n}\n", "  $r = \"\";\n  $sign = ($x < 0);\n\
    \  $x = abs($x);\n  if ($x < 10) {\n    $r = $x;\n  } else {\n    $r = $sign;\n\
    \    for ($i = 0; $i < strlen($x); $i++) {\n      $r = $base[$i] * $r + $x[$i];\n\
    \    }\n  }\n  return $r;\n}\n", "    $digits = strlen($x);\n    if ($digits ==\
    \ 0) {\n        return $x;\n    }\n    $baseLen = strlen($base);\n    if ($baseLen\
    \ > $digits) {\n        return $x;\n    }\n    $result = '';\n    for ($i = 0;\
    \ $i < $baseLen; $i++) {\n        $result .= $base[$i] * pow(10, $digits - $i\
    \ - 1);\n    }\n    return $result;\n}", "    if ($x < 10) {\n        return $x;\n\
    \    }\n    $r = $x % $base;\n    return change_base($r, $base);\n}\n", "  $r\
    \ = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x /\
    \ $base);\n  }\n  return $r;\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n \
    \   $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n", " \
    \ $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n    $x = floor($x\
    \ / $base);\n  }\n  return $r;\n}\n", "  $r = $x;\n  while ($base > 0 && $r >\
    \ 0) {\n    $r = $r / $base;\n    $base--;\n  }\n  return $r;\n}\n", "    if ($x\
    \ < 10) {\n        return $x;\n    }\n    $r = $x % $base;\n    return change_base($r,\
    \ $base);\n}\n", "  $r = \"\";\n  while ($x >= $base) {\n    $r = $x % $base;\n\
    \    $x = floor($x / $base);\n  }\n  return $r;\n}\n", "    $digits = strlen($x);\n\
    \    $basedigits = strlen($base);\n    if ($digits < $basedigits) {\n        return\
    \ $x;\n    }\n    $remainder = $digits % $basedigits;\n    $quotient = $digits\
    \ / $basedigits;\n    $quotient = intval($quotient);\n    $quotient = $quotient\
    \ * $base;\n    $quotient = base_convert($quotient, $base, $basedigits);\n   \
    \ $quotient = str_pad($quotient, $basedigits, '0', STR_PAD_LEFT);\n    return\
    \ $quotient . $remainder;\n}\n", "    $x = intval($x);\n    $base = intval($base);\n\
    \    if ($base > 10) {\n        return $x;\n    }\n    if ($base < 2) {\n    \
    \    return $x;\n    }\n    if ($base == 10) {\n        return $x;\n    }\n  \
    \  if ($x == 0) {\n        return 0;\n    }\n    if ($x < 0) {\n        $x = abs($x);\n\
    \    }\n    if ($x < 10) {\n        return $x;\n    }\n    if ($base == 2) {\n\
    \        if ($x % 2 == 0) {\n            return $x;\n        }\n        return\
    \ $x + 1;\n    }\n    $y = $x;\n    $baseMinusBase = 2;\n    while (true) {\n\
    \        if ($y % $baseMinusBase == 0) {\n            return $y;\n        }\n\
    \        $baseMinusBase--;\n    }\n}\n", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "    $r = \"\";\n    while ($x >= $base) {\n        $r = $x % $base;\n        $x\
    \ = floor($x / $base);\n    }\n    return $r;\n}\n", "    $r = \"\";\n    $sign\
    \ = $x<0 ? \"-\" : \"\";\n    $x = abs($x);\n    do {\n        $r = $base%10 +\
    \ $r;\n        $base = ($base*10)%10;\n    } while($base);\n    return $sign +\
    \ $r;\n}\n", "    $x = $x - intval($x / $base) * $base;\n    $x = $x - intval($x\
    \ / $base) * $base;\n    return $x;\n}\n", "  $r = \"\";\n  while ($x >= $base)\
    \ {\n    $r = $x % $base;\n    $x = floor($x / $base);\n  }\n  return $r;\n}\n",
  "    $bases = array('0','1','2','3','4','5','6','7','8','9');\n    $base = $bases[$base];\n\
    \    $x = $x - intval($x/$base)*$base;\n    return $x;\n}\n", "    $x = $x - intval($x\
    \ / $base) * $base;\n    $x = $x + intval($x % $base);\n    return $x;\n}\n",
  "    $x = intval($x);\n    $base = intval($base);\n    if ($base > 10) {\n     \
    \   $base = strval($base);\n    }\n    if ($base < 2) {\n        $base = \"0\"\
    ;\n    }\n    $x = $x / $base;\n    $x = $x * $base;\n    return $x;\n}\n", " \
    \   if ($x < 10) {\n        return $x;\n    }\n    $r = $x % $base;\n    return\
    \ change_base($r, $base);\n}\n", "    $r = \"\";\n    while ($x >= $base) {\n\
    \        $r = $x % $base;\n        $x = floor($x / $base);\n    }\n    return\
    \ $r;\n}\n", "    $x = $x - intval($x / $base) * $base;\n    $x = $x + intval($x\
    \ / $base) * $base;\n    return $x;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
