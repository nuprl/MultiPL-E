name: HumanEval_137_compare_one
language: php
prompt: "<?php\n// Create a function that takes integers, floats, or strings representing\n\
  // real numbers, and returns the larger variable in its given variable type.\n//\
  \ Return None if the values are equal.\n// Note: If a real number is represented\
  \ as a string, the floating point might be . or ,\nfunction compare_one($a, $b)\
  \ {\n"
tests: "function candidate(...$args) {\n    return compare_one(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1, 2) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1, 2.5) !== 2.5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2, 3) !== 3) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(5, 6) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(1, \"2,3\") !== \"2,3\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"5,1\", \"6\") !== \"6\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(\"1\", \"2\") !== \"2\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"1\", 1) !== null) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $a;\n        }\n \
    \       if (strcmp($a, $b) > 0) {\n            return $a;\n        }\n       \
    \ return $b;\n    }\n    if (is_string($a) && is_numeric($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $b;\n        }\n        if (strcmp($a, $b) <\
    \ 0) {\n            return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_string($b)) {\n        if (strcmp($a, $b) == 0) {\n            return\
    \ $b;\n        }\n        if (strcmp($a, $b) < 0) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_string($a) && is_numeric($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $a;\n        }\n \
    \       if (strcmp($a, $b) > 0) {\n            return $b;\n        }\n       \
    \ return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strcmp($a, $b) == 0) {\n            return\
    \ $a;\n        }\n        if (strcmp($a, $b) > 0) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_string($a) && is_numeric($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $b;\n        }\n \
    \       if (strcmp($a, $b) < 0) {\n            return $b;\n        }\n       \
    \ return $a;\n    }\n    if (is_numeric($a) && is_string($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $b;\n        }\n        if (strcmp($a, $b) <\
    \ 0) {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_numeric($b)) {\n        if (strcmp($a, $b) == 0) {\n            return\
    \ $a;\n        }\n        if (strcmp($a, $b) > 0) {\n            return $b;\n\
    \        }\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }", "  \
    \  if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n\
    \    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        if ($a < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n       \
    \ if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($b)) {\n        if\
    \ (is_string($a)) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_object($a) && is_object($b)) {\n        if\
    \ ($a->equals($b)) {\n            return $a;\n        }\n        if ($a->isGreater($b))\
    \ {\n            return $a;\n        }\n        if ($a->isLesser($b)) {\n    \
    \        return $b;\n        }\n    }\n    if (is_object($a)) {\n        if (is_object($b))\
    \ {\n            return $a->compare($b);\n        }\n        if ($a->isGreater($b))\
    \ {\n            return $a;\n        }\n        if ($a->isLesser($b)) {\n    \
    \        return $b;\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            return $a->compare($b);\n        }\n        if ($a->isGreater($b))\
    \ {\n            return $b;\n        }\n        if ($a->isLesser($b)) {\n    \
    \        return $a;\n        }\n    }\n    if (is_array($a)) {\n        if (is_array($b))\
    \ {\n            return array_map(array($this, 'compare_one'), $a, $b);\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($a < $b) {\n            return $b;\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            return array_map(array($this, 'compare_one'),\
    \ $a, $b);\n        }\n        if ($a > $b) {\n            return $b;\n      \
    \  }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n    if\
    \ (is_null($a)) {\n        if (is_null($b)) {\n            return 0;\n       \
    \ }", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) &&\
    \ is_float($b)) {\n        return max($a, $b);\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        return strcmp($a, $b) > 0;\n    }\n    if (is_string($a))\
    \ {\n        return 1;\n    }\n    if (is_string($b)) {\n        return -1;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        return $a > $b ?\
    \ 1 : -1;\n    }\n    if (is_object($a) && is_object($b)) {\n        return $a->compare($b)\
    \ > 0 ? 1 : -1;\n    }\n    if (is_object($a)) {\n        return 1;\n    }\n \
    \   if (is_object($b)) {\n        return -1;\n    }\n}", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return $a;\n\
    \        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n\
    \            return $b;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($b)) {\n        if (is_string($a)) {\n            return $b;\n\
    \        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if (get_class($a) == get_class($b)) {\n       \
    \     return $a;\n        }\n    }\n    if (is_object($a)) {\n        if (is_object($b))\
    \ {\n            return $b;\n        }\n    }\n    if (is_object($b)) {\n    \
    \    if (is_object($a)) {\n            return $a;\n        }\n    }\n    if ($a\
    \ === $b) {\n        return $a;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if (count($a) != count($b)) {\n            return $a;\n        }\n\
    \        foreach ($a as $k => $v) {\n            if ($v != $b[$k]) {\n       \
    \         return $a;\n            }\n        }\n        return $b;\n    }\n  \
    \  if (is_array($a)) {\n        return $b;\n    }\n    if (is_array($b)) {\n \
    \       return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n \
    \   if (is_object($a) && is_object($b)) {\n        if (get_class($a) == get_class($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_object($a)) {\n    \
    \    if (is_object($b)) {\n            return $b;\n        }\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            return $a;\n        }\n    }\n\
    \    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a", "    if ($a === $b) {\n        return 0;\n    }\n   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n          \
    \  return 1;\n        }\n        if ($a < $b) {\n            return -1;\n    \
    \    }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n    \
    \        if ($a > $b) {\n                return 1;\n            }\n          \
    \  if ($a < $b) {\n                return -1;\n            }\n        }\n    }\n\
    \    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            if ($a\
    \ > $b) {\n                return 1;\n            }\n            if ($a < $b)\
    \ {\n                return -1;\n            }\n        }\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a > $b) {\n            return 1;\n       \
    \ }\n        if ($a < $b) {\n            return -1;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            if ($a > $b) {\n\
    \                return 1;\n            }\n            if ($a < $b) {\n      \
    \          return -1;\n            }\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            if ($a > $b) {\n              \
    \  return 1;\n            }\n            if ($a < $b) {\n                return\
    \ -1;\n            }\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_object($a)) {\n\
    \        if (is_object($b)) {\n            if ($a > $b) {\n                return\
    \ 1;\n            }\n            if ($a < $b) {\n                return -1;\n\
    \            }\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            }\n  \
    \          if ($a < $b) {\n                return -1;\n            }\n       \
    \ }\n    }\n    if (is_array($a) && is_array($b)) {\n        if ($a > $b) {\n\
    \            return 1;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n\
    \            if ($a > $b) {\n                return 1;\n            }\n      \
    \      if ($a < $b) {\n                return -1;\n            }\n        }\n\
    \    }\n    if (is_array($b)) {\n        if (is_array($a)) {\n            if ($a\
    \ > $b) {\n                return 1;\n            }\n            if ($a < $b)\
    \ {\n                return -1;\n            }\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a ", "  if (is_numeric($a) && is_numeric($b))\
    \ {\n    if ($a == $b) {\n      return $a;\n    }\n  }\n  if (is_numeric($a))\
    \ {\n    if (is_numeric($b)) {\n      if ($a > $b) {\n        return $a;\n   \
    \   }\n      return $b;\n    }\n  }\n  if (is_numeric($b)) {\n    if (is_numeric($a))\
    \ {\n      if ($a < $b) {\n        return $a;\n      }\n      return $b;\n   \
    \ }\n  }\n  if ($a === $b) {\n    return $a;\n  }\n  return None;\n}\n", "   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n         \
    \   return $a;\n        }\n        if ($a > $b) {\n            return $a;\n  \
    \      }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n \
    \   if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n         \
    \   return $a;\n        }\n        if ($a > $b) {\n            return $b;\n  \
    \      }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n \
    \   if (is_string($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $b;\n \
    \       }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_numeric($a) && is_string($b)) {\n        if ($a == $b) {\n       \
    \     return $a;\n        }\n        if ($a > $b) {\n            return $b;\n\
    \        }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a) && is_numeric($b)) {\n        if ($a == $b) {\n       \
    \     return $a;\n        }\n        if ($a > $b) {\n            return $b;\n\
    \        }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n      \
    \      return $a;\n        }\n        if ($a > $b) {\n            return $b;\n\
    \        }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $b;\n \
    \       }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $b;\n \
    \       }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $b;\n \
    \       }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $b;\n \
    \       }\n        if ($a < $b) {\n", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            return $b;\n        }\n        if ($b > $a) {\n            return\
    \ $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ if (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n            return\
    \ $b;\n        }\n        if ($b > $a) {\n            return $b;\n        }\n\
    \    }\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return 1;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n\
    \            return 1;\n        }\n        if (strlen($a) < strlen($b)) {\n  \
    \          return -1;\n        }\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if (count($a) != count($b)) {\n            return 1;\n        }\n\
    \        foreach ($a as $key => $val) {\n            if ($val != $b[$key]) {\n\
    \                return 1;\n            }\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        $a = get_object_vars($a);\n        $b = get_object_vars($b);\n\
    \        foreach ($a as $key => $val) {\n            if ($val != $b[$key]) {\n\
    \                return 1;\n            }\n        }\n    }\n    return null;\n\
    }\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return 1;\n      \
    \  } elseif ($a < $b) {\n            return -1;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return 0;\n        }\n       \
    \ return -1;\n    }\n    if (is_numeric($b)) {\n        return 1;\n    }\n   \
    \ if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        } elseif ($a < $b)\
    \ {\n            return -1;\n        }\n    }\n    if (is_string($a)) {\n    \
    \    if (is_string($b)) {\n            return 0;\n        }\n        return -1;\n\
    \    }\n    if (is_string($b)) {\n        return 1;\n    }\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return $a;\n\
    \        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return $b;\n        }\n \
    \   }\n    if (is_string($a)) {\n        if (is_string($b)) {\n            return\
    \ $a;\n        }\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            return $b;\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a instanceof stdClass && $b instanceof stdClass) {\n       \
    \     return compare_one($a->value, $b->value);\n        }\n    }\n    if (is_object($a))\
    \ {\n        if (is_object($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            return $b;\n\
    \        }\n    }\n    if (is_array($a) && is_array($b)) {\n        if (count($a)\
    \ !== count($b)) {\n            return $a;\n        }\n        foreach ($a as\
    \ $k => $v) {\n            if ($k !== $k) {\n                return $a;\n    \
    \        }\n        }\n        foreach ($b as $k => $v) {\n            if ($k\
    \ !== $k) {\n                return $b;\n            }\n        }\n        return\
    \ $a;\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n         \
    \   return $a;\n        }\n    }\n    if (is_array($b)) {\n        if (is_array($a))\
    \ {\n            return $b;\n        }\n    }\n    if (is_resource($a) && is_resource($b))\
    \ {\n        return $a;\n    }\n    if (is_resource($a)) {\n        if (is_resource($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_resource($b)) {\n  \
    \      if (is_resource($a)) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a instanceof stdClass && $b instanceof stdClass) {\n       \
    \     return compare_one($a->value, $b->value);\n        }\n    }\n    if (is_object($a))\
    \ {\n        if (", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n    if ($a\
    \ > $b) {\n        return $a;\n    }\n    return $b;\n}", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n     \
    \   if ($a > $b) {\n            return $b;\n        }\n        return $a;\n  \
    \  }\n    if ($a === $b) {\n        return $a;\n    }\n    if ($a > $b) {\n  \
    \      return $b;\n    }\n    return $a;\n}", "    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_float($a) && is_float($b)) {\n        if ($a < $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strlen($a) < strlen($b)) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_bool($a) && is_bool($b)) {\n        if ($a === $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) != count($b)) {\n            return\
    \ $a;\n        }\n        foreach ($a as $k => $v) {\n            if ($v != $b[$k])\
    \ {\n                return $a;\n            }\n        }\n        return $b;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        if (get_class($a) !=\
    \ get_class($b)) {\n            return $a;\n        }\n        foreach ($a as\
    \ $k => $v) {\n            if ($v != $b->$k) {\n                return $a;\n \
    \           }\n        }\n        return $b;\n    }\n    if (is_resource($a) &&\
    \ is_resource($b)) {\n        return $a > $b ? $a : $b;\n    }\n    return $a\
    \ > $b ? $a : $b;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't\
    \ seem to work when comparing strings with different lengths.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine for me. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI tested it and it works fine for me. Can you give\
    \ an example where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works\
    \ fine for me. Can you give an example where it doesn't work?\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine for me. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| a tags=php,sorting |>\nI used the answer from and modified\
    \ it a little bit to make it more generic and to allow for different comparison\
    \ functions to be used.\n<code>", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if\
    \ (strcmp($a, $b) > 0) {\n            return $a;\n        }\n        if (strcmp($a,\
    \ $b) < 0) {\n            return $b;\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a instanceof stdClass && $b instanceof stdClass)\
    \ {\n            $a = get_object_vars($a);\n            $b = get_object_vars($b);\n\
    \            foreach ($a as $k => $v) {\n                if ($v != $b[$k]) {\n\
    \                    return $v;\n                }\n            }\n          \
    \  foreach ($b as $k => $v) {\n                if ($v != $a[$k]) {\n         \
    \           return $v;\n                }\n            }\n            return null;\n\
    \        }\n        if ($a instanceof stdClass && $b instanceof Object) {\n  \
    \          $a = get_object_vars($a);\n            $b = get_object_vars($b);\n\
    \            foreach ($a as $k => $v) {\n                if ($v != $b->$k) {\n\
    \                    return $v;\n                }\n            }\n          \
    \  return null;\n        }\n        if ($a instanceof Object && $b instanceof\
    \ stdClass) {\n            $a = get_object_vars($a);\n            $b = get_object_vars($b);\n\
    \            foreach ($a as $k => $v) {\n                if ($v != $b->$k) {\n\
    \                    return $v;\n                }\n            }\n          \
    \  return null;\n        }\n        if ($a instanceof Object && $b instanceof\
    \ Object) {\n            $a = get_object_vars($a);\n            $b = get_object_vars($b);\n\
    \            foreach ($a as $k => $v) {\n                if ($v != $b->$k) {\n\
    \                    return $v;\n                }\n            }\n          \
    \  return null;\n        }\n    }\n    if (is_array($a) && is_array($b)) {\n \
    \       if (count($a) != count($b)) {\n            return null;\n        }\n \
    \       foreach ($a as $k => $v) {\n            if ($v != $b[$k]) {\n        \
    \        return $v;\n            }\n        }\n        return null;\n    }\n \
    \   return null;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ 1;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \   }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return\
    \ 0;\n        }\n        if ($a > $b) {\n            return 1;\n        }\n  \
    \      if ($a < $b) {\n            return -1;\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            return 0;\n        }\n       \
    \ if ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n \
    \           return -1;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return 0;\n        }\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            return 0;\n        }\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        return $a->compare($b);\n    }\n    if (is_object($a))\
    \ {\n        return -1;\n    }\n    if (is_object($b)) {\n        return 1;\n\
    \    }\n}\n", "    if (is_string($a) && is_string($b)) {\n        $a = str_replace(',',\
    \ '.', $a);\n        $b = str_replace(',', '.', $b);\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        return $b;\n    }\n    if (is_numeric($b)) {\n \
    \       return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n}",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $a;\n            }\n     \
    \       return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        if (strcmp($a, $b) > 0) {\n            return 1;\n\
    \        }\n        if (strcmp($a, $b) < 0) {\n            return -1;\n      \
    \  }\n    }\n    if (is_array($a) && is_array($b)) {\n        $a_keys = array_keys($a);\n\
    \        $b_keys = array_keys($b);\n        if ($a_keys == $b_keys) {\n      \
    \      $a_values = array_values($a);\n            $b_values = array_values($b);\n\
    \            foreach ($a_keys as $k => $v) {\n                if ($v != $b_keys[$k])\
    \ {\n                    return compare_one($a[$v], $b[$v]);\n               \
    \ }\n            }\n            foreach ($b_keys as $k => $v) {\n            \
    \    if ($v != $a_keys[$k]) {\n                    return compare_one($a[$v],\
    \ $b[$v]);\n                }\n            }\n            foreach ($a_values as\
    \ $k => $v) {\n                if ($v != $b_values[$k]) {\n                  \
    \  return compare_one($a[$v], $b[$v]);\n                }\n            }\n   \
    \         foreach ($b_values as $k => $v) {\n                if ($v != $a_values[$k])\
    \ {\n                    return compare_one($a[$v], $b[$v]);\n               \
    \ }\n            }\n            return 0;\n        }\n    }\n    return null;\n\
    }", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n  \
    \          return $a;\n        }\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if (is_string($a) && is_string($b)) {\n      \
    \  $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.', $b);\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    if (is_numeric($a)) {\n        return $a;\n    }\n    if\
    \ (is_numeric($b)) {\n        return $b;\n    }\n    if ($a === $b) {\n      \
    \  return 0;\n    }\n    return $a > $b ? $a : $b;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($b > $a) {\n            return $b;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if ($b == $a) {\n            return $b;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n        if ($b > $a) {\n       \
    \     return $a;\n        }\n    }\n    if (is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        if ($b > $a) {\n            return $b;\n\
    \        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if ($a\
    \ > $b) {\n        return $a;\n    }\n    if ($b > $a) {\n        return $b;\n\
    \    }\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n        $a\
    \ = str_replace(',', '.', $a); // convert , to . for comparison\n        $b =\
    \ str_replace(',', '.', $b); // convert , to . for comparison\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n       \
    \     return $b;\n        }\n    }\n    if (is_float($a) && is_float($b)) {\n\
    \        if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $b;\n        }\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    return $a === $b ? $a\
    \ : None;\n}", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a == $b) {\n\
    \      return $a;\n    }\n    if ($a < $b) {\n      return $a;\n    }\n    return\
    \ $b;\n  }\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a < $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n  \
    \      if (strlen($a) < strlen($b)) {\n            return $a;\n        }\n   \
    \     return $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        return $a\
    \ > $b ? $a : $b;\n    }\n    if (is_bool($a) && is_bool($b)) {\n        return\
    \ $a === $b ? $a : $b;\n    }\n    if (is_null($a) && is_null($b)) {\n       \
    \ return $a === $b ? $a : $b;\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        return $a->compare($b);\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        return $a['compare']($b);\n    }\n    if (is_resource($a) && is_resource($b))\
    \ {\n        return $a['compare']($b);\n    }\n    if (is_object($a)) {\n    \
    \    if (is_object($b)) {\n            return $a->compare($b);\n        }\n  \
    \      return 0;\n    }\n    if (is_object($b)) {\n        return -1;\n    }\n\
    \    if (is_array($a)) {\n        return 1;\n    }\n    if (is_string($a)) {\n\
    \        return strlen($a);\n    }\n    if (is_string($b)) {\n        return strlen($b);\n\
    \    }\n    if (is_int($a)) {\n        return $a;\n    }\n    if (is_int($b))\
    \ {\n        return $b;\n    }\n    if (is_float($a)) {\n        return $a;\n\
    \    }\n    if (is_float($b)) {\n        return $b;\n    }\n    if (is_null($a))\
    \ {\n        return $b;\n    }\n    if (is_null($b)) {\n        return $a;\n \
    \   }\n    throw new Exception(\"Cannot compare values of different types: \"\
    \ . gettype($a) . \" \" . $a . \" \" . gettype($b) . \" \" . $b);\n}\n\n/**\n\
    \ * Compare two variables of different types.\n *\n * @param mixed $a First value\
    \ to compare\n * @param mixed $b Second value to compare\n * @return int <0 if\
    \ $a is less than $b, 0 if they are equal, and 1 if $a is greater than $b\n */",
  "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a\
    \ == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n       \
    \     return -1;\n        }\n        return 1;\n    }\n    if (is_bool($a) &&\
    \ is_bool($b)) {\n        if ($a == $b) {\n            return 0;\n        }\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        return 1;\n\
    \    }\n    if (is_null($a) && is_null($b)) {\n        return 0;\n    }\n    if\
    \ (is_null($a) || is_null($b)) {\n        return 1;\n    }\n}\n", "    if ($a\
    \ === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if (abs($a) > abs($b)) {\n            return $a;\n        }\n   \
    \     if ($a < $b) {\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return $a;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return $b;\n        }\n        if (strcasecmp($a, $b) > 0) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a instanceof DateTime && $b instanceof DateTime)\
    \ {\n            return $a->format('U') > $b->format('U');\n        }\n      \
    \  if ($a instanceof DateTime || $b instanceof DateTime) {\n            return\
    \ 1;\n        }\n        if ($a instanceof DateTime && $b === null) {\n      \
    \      return 1;\n        }\n        if ($a instanceof DateTime && $b instanceof\
    \ DateTime) {\n            return $a->format('U') > $b->format('U');\n       \
    \ }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n       \
    \     return 1;\n        }\n        if ($a instanceof DateTime && $b === null)\
    \ {\n            return 1;\n        }\n        if ($a instanceof DateTime && $b\
    \ instanceof DateTime) {\n            return $a->format('U') > $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') > $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') > $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') > $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return ", "  if (is_numeric($a) &&\
    \ is_numeric($b)) {\n    if ($a > $b) {\n      return $a;\n    }\n    if ($a <\
    \ $b) {\n      return $b;\n    }\n  }\n  if (is_numeric($a)) {\n    if (is_numeric($b))\
    \ {\n      return $a;\n    }\n  }\n  if (is_numeric($b)) {\n    if (is_numeric($a))\
    \ {\n      return $b;\n    }\n  }\n  if ($a === $b) {\n    return $a;\n  }\n \
    \ return None;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        if ($a > $b) {\n            return 1;\n        }\n \
    \   }\n    if (is_string($a) && is_string($b)) {\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        if ($a < $b) {\n            return -1;\n        }\n        if\
    \ ($a > $b) {\n            return 1;\n        }\n    }\n    return null;\n}\n",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a === $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $a;\n            }\n     \
    \       return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n        \
    \    return 1;\n        } elseif ($a < $b) {\n            return -1;\n       \
    \ }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n       \
    \     return 0;\n        }\n        return -1;\n    }\n    if (is_numeric($b))\
    \ {\n        return 1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return 1;\n        } elseif (strlen($a) < strlen($b)) {\n   \
    \         return -1;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            return 0;\n        }\n        return -1;\n    }\n    if (is_string($b))\
    \ {\n        return 1;\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a != $b) {\n            return $a;\n      \
    \  }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a !=\
    \ $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if ($a < $b) {\n        return\
    \ $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($a)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       if ($a == $b) {\n                return $a;\n            }\n         \
    \   if ($a > $b) {\n                return $a;\n            }\n            return\
    \ $b;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n     \
    \   return $a;\n    }\n    return $b;\n}", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        return $b;\n    }\n    if (is_numeric($b)) {\n \
    \       return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n \
    \   return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($b)) {\n      \
    \  if ($a > $b) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n}\n",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a < $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n      \
    \      return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if ($a < $b) {\n        return\
    \ $b;\n    }\n    return $a;\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n\
    \    }\n    if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n",
  "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a;\n        }\n    }\n   \
    \ if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return $b;\n\
    \        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ $a;\n        }\n        if (strlen($a) < strlen($b)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n  \
    \          return $a;\n        }\n    }\n    if (is_string($b)) {\n        if\
    \ (is_string($a)) {\n            return $b;\n        }\n    }\n    if ($a ===\
    \ $b) {\n        return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n\
    \        if (get_class($a) === get_class($b)) {\n            return $a;\n    \
    \    }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n      \
    \      return $b;\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            return $a;\n        }\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if (count($a) !== count($b)) {\n            return $a;\n        }\n\
    \        foreach ($a as $k => $v) {\n            if ($a[$k] !== $b[$k]) {\n  \
    \              return $a;\n            }\n        }\n        return $b;\n    }\n\
    \    if (is_array($a)) {\n        return $b;\n    }\n    if (is_array($b)) {\n\
    \        return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n      \
    \  if (get_class($a) === get_class($b)) {\n            return $a;\n        }\n\
    \    }\n    if (is_object($a)) {\n        return $b;\n    }\n    if (is_object($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return $a;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (is_string($b)) {\n            return ", "    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_numeric($b)) {\n   \
    \     if (is_numeric($a)) {\n            return $b;\n        }\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n            return\
    \ $a;\n        }\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            return $b;\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_object($a)) {\n\
    \        if (is_object($b)) {\n            return $a;\n        }\n    }\n    if\
    \ (is_object($b)) {\n        if (is_object($a)) {\n            return $b;\n  \
    \      }\n    }\n    if (is_array($a) && is_array($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n\
    \            return $a;\n        }\n    }\n    if (is_array($b)) {\n        if\
    \ (is_array($a)) {\n            return $b;\n        }\n    }\n    return null;\n\
    }", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a == $b) {\n      return\
    \ $a;\n    }\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n\
    \  if (is_numeric($a)) {\n    if ($a > $b) {\n      return $a;\n    }\n    return\
    \ $b;\n  }\n  if (is_numeric($b)) {\n    if ($a > $b) {\n      return $b;\n  \
    \  }\n    return $a;\n  }\n  if ($a === $b) {\n    return $a;\n  }\n  return $b;\n\
    }\n", "  if (is_numeric($a) && is_numeric($b)) {\n    if ($a > $b) {\n      return\
    \ $a;\n    }\n    if ($a < $b) {\n      return $b;\n    }\n  }\n  if (is_numeric($a))\
    \ {\n    return $b;\n  }\n  if (is_numeric($b)) {\n    return $a;\n  }\n  if ($a\
    \ === $b) {\n    return $a;\n  }\n  return None;\n}\n", "    if ($a === $b) {\n\
    \        return 0;\n    }\n    if (is_float($a) && is_float($b)) {\n        if\
    \ ($a < $b) {\n            return -1;\n        }\n        if ($a > $b) {\n   \
    \         return 1;\n        }\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        $a = preg_replace('/[^0-9\\.\\-]/', '', $a);\n        $b = preg_replace('/[^0-9\\\
    .\\-]/', '', $b);\n        if ($a < $b) {\n            return -1;\n        }\n\
    \        if ($a > $b) {\n            return 1;\n        }\n    }\n    if (is_string($a))\
    \ {\n        return -1;\n    }\n    if (is_string($b)) {\n        return 1;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        return $a > $b ?\
    \ 1 : -1;\n    }\n    if (is_object($a) && is_object($b)) {\n        return $a->compare($b);\n\
    \    }\n    if (is_object($a)) {\n        return -1;\n    }\n    if (is_object($b))\
    \ {\n        return 1;\n    }\n}", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n\
    \    }\n    if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($b)) {\n        if ($a > $b) {\n            return $b;\n       \
    \ }\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    if ($a > $b) {\n        return $b;\n    }\n    return $a;\n}\n", "  \
    \  if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a < $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a < $b) {\n                return $a;\n            }\n \
    \           return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($b > $a) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($b > $a) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n      \
    \      if ($a > $b) {\n                return $a;\n            }\n           \
    \ if ($b > $a) {\n                return $b;\n            }\n        }\n    }\n\
    \    if ($a === $b) {\n        return $a;\n    }\n    if ($a < $b) {\n       \
    \ return $a;\n    }\n    return $b;\n}", "    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n      \
    \      if ($a > $b) {\n                return $a;\n            }\n           \
    \ if ($a < $b) {\n                return $b;\n            }\n        }\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n         \
    \   return $a;\n        }\n        if ($a < $b) {\n            return $b;\n  \
    \      }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n    \
    \        if ($a > $b) {\n                return $a;\n            }\n         \
    \   if ($a < $b) {\n                return $b;\n            }\n        }\n   \
    \ }\n    if (is_string($b)) {\n        if (is_string($a)) {\n            if ($a\
    \ > $b) {\n                return $a;\n            }\n            if ($a < $b)\
    \ {\n                return $b;\n            }\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a > $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_object($a)) {\n        if (is_object($b)) {\n            if ($a > $b) {\n\
    \                return $a;\n            }\n            if ($a < $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            if ($a > $b) {\n              \
    \  return $a;\n            }\n            if ($a < $b) {\n                return\
    \ $b;\n            }\n        }\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_array($a)) {\n\
    \        if (is_array($b)) {\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            if ($a < $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_array($b)) {\n        if (is_array($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n", "    if (is_numeric($a) && is_numeric($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return $a;\n\
    \        }\n        if ($b > $a) {\n            return $b;\n        }\n      \
    \  return $a;\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n\
    \            return $b;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n    return $b;\n\
    }\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a) &&\
    \ is_float($b)) {\n        if ($a === $b) return 0;\n        $a = str_replace(',',\
    \ '.', $a); // convert , to .\n        $b = str_replace(',', '.', $b); // convert\
    \ , to .\n        $a = floatval($a);\n        $b = floatval($b);\n        if ($a\
    \ > $b) return $a;\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        $a = str_replace(',', '.', $a); // convert , to .\n        $b = str_replace(',',\
    \ '.', $b); // convert , to .\n        $a = floatval($a);\n        $b = floatval($b);\n\
    \        if ($a > $b) return $a;\n        return $b;\n    }\n    if (is_float($a))\
    \ {\n        if ($a === $b) return 0;\n        return $a;\n    }\n    if (is_string($a))\
    \ {\n        if ($a === $b) return 0;\n        return $a;\n    }\n    if (is_float($b))\
    \ {\n        if ($a === $b) return 0;\n        return $b;\n    }\n    if (is_string($b))\
    \ {\n        if ($a === $b) return 0;\n        return $b;\n    }\n    if ($a ===\
    \ $b) return 0;\n    return $a;\n}", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_float($a) && is_float($b)) {\n        return max($a, $b);\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        $a = str_replace(',',\
    \ '.', $a); // remove commas\n        $b = str_replace(',', '.', $b); // remove\
    \ commas\n        $a = floatval($a);\n        $b = floatval($b);\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        return $a > $b ? $a : $b;\n    }\n}", "    if (is_string($a) && is_string($b))\
    \ {\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.',\
    \ $b);\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        return $a\
    \ > $b ? $a : $b;\n    }\n    if (is_numeric($a)) {\n        return $a;\n    }\n\
    \    if (is_numeric($b)) {\n        return $b;\n    }\n    if (is_string($a))\
    \ {\n        return $a;\n    }\n    if (is_string($b)) {\n        return $b;\n\
    \    }\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        return $b;\n    }\n    if (is_numeric($b)) {\n \
    \       return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n \
    \   if ($a === null || $b === null) {\n        return $a === $b ? 0 : ($a < $b\
    \ ? -1 : 1);\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        $a = str_replace(',', '', $a); // remove commas\n\
    \        $b = str_replace(',', '', $b); // remove commas\n        $a = str_replace('.',\
    \ '', $a); // remove decimals\n        $b = str_replace('.', '', $b); // remove\
    \ decimals\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace(',', '', $b); // remove\
    \ commas\n        $a = str_replace(',', '', $a); // remove commas\n        $b\
    \ = str_replace(',', '', $b); // remove commas\n        $a = str_replace(',',\
    \ '', $a); // remove commas\n        $b = str_replace", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       if ($a == $b) {\n                return $a;\n            }\n         \
    \   if ($a > $b) {\n                return $a;\n            }\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b)) {\n     \
    \   return $b;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    return\
    \ $b;\n}", "    if (is_string($a) && is_string($b)) {\n        if (strpos($a,\
    \ ',') !== false || strpos($b, ',') !== false) {\n            return false;\n\
    \        }\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return 0;\n        }\n        if ($a > $b) {\n       \
    \     return 1;\n        }\n        return -1;\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            if (strpos($a, ',') !== false ||\
    \ strpos($b, ',') !== false) {\n                return false;\n            }\n\
    \        }\n        if (strpos($a, '.') !== false || strpos($b, '.') !== false)\
    \ {\n            return false;\n        }\n    }\n    if (is_string($b)) {\n \
    \       if (is_string($a)) {\n            if (strpos($a, ',') !== false || strpos($b,\
    \ ',') !== false) {\n                return false;\n            }\n        }\n\
    \        if (strpos($a, '.') !== false || strpos($b, '.') !== false) {\n     \
    \       return false;\n        }\n    }\n    if (is_numeric($a)) {\n        if\
    \ (is_numeric($b)) {\n            if ($a > $b) {\n                return 1;\n\
    \            }\n            return -1;\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            if ($a > $b) {\n             \
    \   return -1;\n            }\n            return 1;\n        }\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ 1;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 0;\n    }\n    if (is_string($a) && is_string($b)) {\n        if\
    \ (strpos($a, ',') !== false || strpos($b, ',') !== false) {\n            return\
    \ false;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if (strpos($a, ',') !== false || strpos($b, ',') !== false) {\n\
    \                return false;\n            }\n        }\n        if (strpos($a,\
    \ '.') !== false || strpos($b, '.') !== false) {\n            return false;\n\
    \        }\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n  \
    \          if (strpos($a, ',') !== false || strpos($b, ',') !== false) {\n   \
    \             return false;\n            }\n        }\n        if (strpos($a,\
    \ '.') !== false || strpos($b, '.') !== false) {\n            return false;\n\
    \        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n\
    \            if ($a > $b) {\n                return 1;\n            }\n      \
    \      return -1;\n", "    if ($a === $b) {\n        return $a;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        if (strcmp($a, $b)\
    \ > 0) {\n            return $a;\n        }\n        if (strcmp($a, $b) < 0) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (strcmp($a, '') > 0) {\n            return $a;\n        }\n        if (strcmp($a,\
    \ '') < 0) {\n            return $b;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > 0) {\n            return $a;\n        }\n        if ($a\
    \ < 0) {\n            return $b;\n        }\n    }\n    if (is_numeric($b)) {\n\
    \        if ($b > 0) {\n            return $a;\n        }\n        if ($b < 0)\
    \ {\n            return $b;\n        }\n    }\n    return $a;\n}", "    if ($a\
    \ === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a < $b) {\n                return\
    \ $a;\n            }\n            if ($a > $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a < $b) {\n                return $a;\n            }\n \
    \           if ($a > $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a < $b) {\n            return $a;\n      \
    \  }\n        if ($a > $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            if ($a < $b) {\n\
    \                return $a;\n            }\n            if ($a > $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            if ($a < $b) {\n              \
    \  return $a;\n            }\n            if ($a > $b) {\n                return\
    \ $b;\n            }\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n    }\n    if (is_object($a)) {\n\
    \        if (is_object($b)) {\n            if ($a < $b) {\n                return\
    \ $a;\n            }\n            if ($a > $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            if ($a < $b) {\n                return $a;\n            }\n \
    \           if ($a > $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_array($a) && is_array($b)) {\n        if ($a < $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n\
    \            if ($a < $b) {\n                return $a;\n            }\n     \
    \       if ($a > $b) {\n                return $b;\n            }\n        }\n\
    \    }\n    if (is_array($b)) {\n        if (is_array($a)) {\n            if ($a\
    \ < $b) {\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a < $b) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if ($a < $b) {\n        return\
    \ $a;\n    }\n    return $b;\n}\n", "    if ($a === $b) {\n        return 0;\n\
    \    }\n    if (is_float($a) && is_float($b)) {\n        if ($a < $b) {\n    \
    \        return -1;\n        }\n        if ($a > $b) {\n            return 1;\n\
    \        }\n    }\n    if (is_string($a) && is_string($b)) {\n        $a_array\
    \ = explode('.', $a);\n        $b_array = explode('.', $b); // explode the string\
    \ into an array with each number as an element\n        $a_count = count($a_array);\n\
    \        $b_count = count($b_array);\n        if ($a_count > $b_count) {\n   \
    \         return 1;\n        }\n        if ($a_count < $b_count) {\n         \
    \   return -1;\n        }\n        foreach ($a_array as $key => $a_element) {\n\
    \            if ($a_element != $b_array[$key]) {\n                return ($a_element\
    \ < $b_array[$key]) ? -1 : 1;\n            }\n        }\n    }\n    if (is_string($a))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_float($a)) {\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        if ($a > $b)\
    \ {\n            return 1;\n        }\n    }\n    if (is_int($a)) {\n        if\
    \ ($a < $b) {\n            return -1;\n        }\n        if ($a > $b) {\n   \
    \         return 1;\n        }\n    }\n    return null;\n}\n", "    if ($a ===\
    \ $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b)) {\n\
    \        return max($a, $b);\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        return strcmp($a, $b);\n    }\n    if (is_int($a) && is_int($b)) {\n\
    \        return $a > $b ? $a : $b;\n    }\n    if (is_bool($a) && is_bool($b))\
    \ {\n        return $a === $b ? $a : $b;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        return array_map(\n            function ($x, $y) {\n            \
    \    return compare_one($x, $y);\n            },\n            $a,\n          \
    \  $b\n        );\n    }\n    if (is_object($a) && is_object($b)) {\n        return\
    \ $a->compare($b);\n    }\n    return null;\n}\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\nI used the code from and modified it a little\
    \ bit. \n<code>", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        } elseif ($a < $b) {\n            return\
    \ $b;\n        } else {\n            return $a;\n        }\n    } else {\n   \
    \     if ($a === $b) {\n            return $a;\n        } else {\n           \
    \ return $b;\n        }\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if ($a == $b)\
    \ {\n                return $a;\n            }\n            if ($a > $b) {\n \
    \               return $a;\n            }\n            return $b;\n        }\n\
    \        if ($b > $a) {\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n           \
    \ if ($a == $b) {\n                return $a;\n            }\n            if ($a\
    \ > $b) {\n                return $a;\n            }\n            return $b;\n\
    \        }\n        if ($b > $a) {\n            return $b;\n        }\n      \
    \  return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if\
    \ ($a > $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($a) && is_numeric($b)) {\n     \
    \   if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n      \
    \  if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if (is_string($a)) {\n        if ($a < $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($b))\
    \ {\n        if ($a < $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_numeric($a)) {\n        if ($a < $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n     \
    \   if ($a < $b) {\n            return $b;\n        }\n        return $a;\n  \
    \  }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}", "   \
    \ if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if (abs($a) > abs($b)) {\n            return $a;\n        }\n   \
    \     return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n       \
    \ return $b;\n    }\n    if (is_string($b)) {\n        return $a;\n    }\n}\n",
  "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a < $b) {\n                return\
    \ -1;\n            }\n            if ($a > $b) {\n                return 1;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a < $b) {\n                return -1;\n            }\n \
    \           if ($a > $b) {\n                return 1;\n            }\n       \
    \ }\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a < $b) {\n\
    \            return -1;\n        }\n        if ($a > $b) {\n            return\
    \ 1;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n\
    \            if ($a < $b) {\n                return -1;\n            }\n     \
    \       if ($a > $b) {\n                return 1;\n            }\n        }\n\
    \    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n            if\
    \ ($a < $b) {\n                return -1;\n            }\n            if ($a >\
    \ $b) {\n                return 1;\n            }\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a < $b) {\n            return -1;\n      \
    \  }\n        if ($a > $b) {\n            return 1;\n        }\n    }\n    if\
    \ (is_object($a)) {\n        if (is_object($b)) {\n            if ($a < $b) {\n\
    \                return -1;\n            }\n            if ($a > $b) {\n     \
    \           return 1;\n            }\n        }\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            if ($a < $b) {\n              \
    \  return -1;\n            }\n            if ($a > $b) {\n                return\
    \ 1;\n            }\n        }\n    }\n    if (is_array($a) && is_array($b)) {\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        if ($a > $b)\
    \ {\n            return 1;\n        }\n    }\n    if (is_array($a)) {\n      \
    \  if (is_array($b)) {\n            if ($a < $b) {\n                return -1;\n\
    \            }\n            if ($a > $b) {\n                return 1;\n      \
    \      }\n        }\n    }\n    if (is_array($b)) {\n        if (is_array($a))\
    \ {\n            if ($a < $b) {\n                return -1;\n            }\n \
    \           if ($a > $b) {\n                return 1;\n            }\n       \
    \ }\n    }\n    return null;\n}", "    if (is_numeric($a) && is_numeric($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if ($a > $b)\
    \ {\n                return $a;\n            }\n            return $b;\n     \
    \   }\n        return $a;\n    }\n    if (is_numeric($b)) {\n        return $b;\n\
    \    }\n    if ($a === $b) {\n        return $a;\n    }\n    if ($a > $b) {\n\
    \        return $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if (strcmp($a, $b) == 0) {\n   \
    \         return $a;\n        }\n        if (strcmp($a, $b) > 0) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if (is_string($a) &&\
    \ is_numeric($b)) {\n        if (strcmp($a, $b) == 0) {\n            return $b;\n\
    \        }\n        if (strcmp($a, $b) < 0) {\n            return $b;\n      \
    \  }\n        return $a;\n    }\n    if (is_numeric($a) && is_string($b)) {\n\
    \        if (strcmp($a, $b) == 0) {\n            return $b;\n        }\n     \
    \   if (strcmp($a, $b) < 0) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_string($a) && is_numeric($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $a;\n        }\n        if (strcmp($a, $b) >\
    \ 0) {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $a;\n        }\n        if (strcmp($a, $b) >\
    \ 0) {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_numeric($b)) {\n        if (strcmp($a, $b) == 0) {\n            return\
    \ $b;\n        }\n        if (strcmp($a, $b) < 0) {\n            return $b;\n\
    \        }\n        return $a;\n    }\n    if (is_numeric($a) && is_string($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $b;\n        }\n \
    \       if (strcmp($a, $b) < 0) {\n            return $b;\n        }\n       \
    \ return $a;\n    }\n    if (is_string($a) && is_numeric($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $a;\n        }\n        if (strcmp($a, $b) >\
    \ 0) {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a === $b) {\n            return 0;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a === $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        if ($a === $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_bool($a) && is_bool($b)) {\n        if ($a === $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_null($a) && is_null($b)) {\n        return\
    \ 0;\n    }\n    if (is_object($a) && is_object($b)) {\n        if ($a === $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_resource($a) && is_resource($b))\
    \ {\n        if ($a === $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_array($a) && is_array($b)) {\n        if ($a === $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_string($a) || is_int($a) || is_float($a))\
    \ {\n        return -1;\n    }\n    if (is_string($b) || is_int($b) || is_float($b))\
    \ {\n        return 1;\n    }\n    if (is_bool($a) || is_bool($b)) {\n       \
    \ return 0;\n    }\n    if (is_null($a) || is_null($b)) {\n        return 0;\n\
    \    }\n    if (is_object($a) || is_object($b)) {\n        return -1;\n    }\n\
    \    if (is_resource($a) || is_resource($b)) {\n        return 1;\n    }\n   \
    \ if (is_array($a) || is_array($b)) {\n        return -1;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        return -1;\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        return -1;\n    }\n    if (is_float($a) && is_float($b)) {\n    \
    \    return -1;\n    }\n    if (is_null($a) && is_null($b)) {\n        return\
    \ 0;\n    }\n    if (is_object($a) && is_", "    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        return $a;\n    }\n    if (is_string($b)) {\n        return $b;\n\
    \    }\n    if (is_numeric($a)) {\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n}\n", "    if ($a === $b) {\n        return 0;\n\
    \    }\n    if (is_float($a) && is_float($b)) {\n        if ($a == $b) {\n   \
    \         return 0;\n        }\n        if ($a < $b) {\n            return -1;\n\
    \        }\n        return 1;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n            return 0;\n\
    \        }\n        if ($a < $b) {\n            return -1;\n        }\n      \
    \  return 1;\n    }\n    if (is_bool($a) && is_bool($b)) {\n        if ($a ==\
    \ $b) {\n            return 0;\n        }\n        if ($a < $b) {\n          \
    \  return -1;\n        }\n        return 1;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_object($a) && is_object($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    return null;\n}", "    if ($a == $b) {\n       \
    \ return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n       \
    \     return $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_numeric($b)) {\n   \
    \     if (is_numeric($a)) {\n            return $b;\n        }\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n\
    \            return $a;\n        }\n        if (strlen($a) < strlen($b)) {\n \
    \           return $b;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (is_string($b)) {\n            return $a;\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            return $b;\n        }\n    }\n\
    \    if (is_object($a) && is_object($b)) {\n        if ($a instanceof stdClass\
    \ && $b instanceof stdClass) {\n            return compare_one($a->value, $b->value);\n\
    \        }\n        if ($a instanceof stdClass) {\n            return $b;\n  \
    \      }\n        if ($b instanceof stdClass) {\n            return $a;\n    \
    \    }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n      \
    \      return $a;\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            return $b;\n        }\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if (count($a) != count($b)) {\n            return $a;\n        }\n\
    \        foreach ($a as $k => $v) {\n            if ($v != $b[$k]) {\n       \
    \         return $a;\n            }\n        }\n        return $b;\n    }\n  \
    \  if (is_array($a)) {\n        return $b;\n    }\n    if (is_array($b)) {\n \
    \       return $a;\n    }\n    return $a;\n}", "    if ($a === $b) {\n       \
    \ return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if (abs($a)\
    \ > abs($b)) {\n            return $a;\n        }\n        if ($a < $b) {\n  \
    \          return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $b;\n    }\n \
    \   return $a;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n    return $b;\n}",
  "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a === $b) return 0;\n        $a = str_replace(',', '.', $a);\
    \ // remove commas\n        $b = str_replace(',', '.', $b); // remove commas\n\
    \        $a_array = explode('.', $a); // split into array\n        $b_array =\
    \ explode('.', $b); // split into array\n        $a_length = count($a_array);\
    \ // count elements in array\n        $b_length = count($b_array); // count elements\
    \ in array\n        if ($a_length == $b_length) {\n            // same length,\
    \ so just compare the elements\n            for ($i = 0; $i < $a_length; $i++)\
    \ {\n                if ($a_array[$i] != $b_array[$i]) return $a_array[$i] - $b_array[$i];\n\
    \            }\n            return 0;\n        }\n        // not the same length,\
    \ so longer string wins\n        if ($a_length > $b_length) {\n            return\
    \ 1;\n        }\n        return -1;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        // if strings are different lengths, longer string wins\n       \
    \ if (strlen($a) != strlen($b)) return strlen($a) > strlen($b) ? 1 : -1;\n   \
    \     // if strings are equal, compare characters\n        $a_array = str_split($a);\n\
    \        $b_array = str_split($b);\n        $a_length = count($a_array);\n   \
    \     $b_length = count($b_array);\n        for ($i = 0; $i < $a_length; $i++)\
    \ {\n            if ($a_array[$i] != $b_array[$i]) return $a_array[$i] - $b_array[$i];\n\
    \        }\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a === $b) return 0;\n        if ($a > $b) return 1;\n      \
    \  return -1;\n    }\n    if (is_bool($a) && is_bool($b)) {\n        if ($a ===\
    \ $b) return 0;\n        if ($a > $b) return 1;\n        return -1;\n    }\n \
    \   if (is_object($a) && is_object($b)) {\n        if ($a === $b) return 0;\n\
    \        if ($a > $b) return 1;\n        return -1;\n    }\n    if (is_resource($a)\
    \ && is_resource($b)) {\n        if ($a === $b) return 0;\n        if ($a > $b)\
    \ return 1;\n        return -1;\n    }\n    // not comparable\n    return 1;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like this solution, but I wonder if\
    \ it would work well with arrays of objects. I mean, if you have an array of object",
  "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a;\n        }\n    }\n   \
    \ if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($b)) {\n        if (is_string($a)) {\n            return $b;\n\
    \        }\n    }\n    if (is_array($a) && is_array($b)) {\n        if (count($a)\
    \ !== count($b)) {\n            return $a;\n        }\n        foreach ($a as\
    \ $k => $v) {\n            if ($v === $b[$k]) {\n                continue;\n \
    \           }\n            $v = compare_one($v, $b[$k]);\n            if ($v !==\
    \ null) {\n                return $v;\n            }\n        }\n        return\
    \ $a;\n    }\n    if (is_object($a) && is_object($b)) {\n        if (get_class($a)\
    \ !== get_class($b)) {\n            return $a;\n        }\n        foreach (get_object_vars($a)\
    \ as $k => $v) {\n            if ($v === $b->$k) {\n                continue;\n\
    \            }\n            $v = compare_one($v, $b->$k);\n            if ($v\
    \ !== null) {\n                return $v;\n            }\n        }\n        return\
    \ $a;\n    }\n    return $a;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<|\
    \ c |>\nThis doesn't seem to work if you have an array with mixed types. For example,\
    \ `[ 'a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5 ]` will sort as `[ 'a' =>\
    \ 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5 ]` instead of `[ 'a' => 1, 'b' =>\
    \ 2, 'c' => 3, 'e' => 5, 'd' => 4 ]`.\n<|/ c |>\n<| c |>\nIt does work if you\
    \ use an associative array instead of an indexed one. Try it out and see for yourself.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me in PHP 5.", "    if ($a === $b) {\n\
    \        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if ($a > $b) {\n            return $b;\n        }\n        if ($a < $b) {\n\
    \            return $a;\n        }\n    }\n    if (is_numeric($b)) {\n       \
    \ if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return $b;\n        }\n \
    \   }\n    if (is_string($a)) {\n        if (strlen($a) > strlen($b)) {\n    \
    \        return $b;\n        }\n        if (strlen($a) < strlen($b)) {\n     \
    \       return $a;\n        }\n    }\n    if (is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) !== count($b)) {\n            return\
    \ $a;\n        }\n        foreach ($a as $k => $v) {\n            if ($v === $b)\
    \ {\n                return $k;\n            }\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if (get_class($a) !== get_class($b)) {\n      \
    \      return $a;\n        }\n        foreach ((array)$a as $k => $v) {\n    \
    \        if ($v === $b) {\n                return $k;\n            }\n       \
    \ }\n    }\n    if (is_object($a)) {\n        if (get_class($a) !== get_class($b))\
    \ {\n            return $a;\n        }\n        foreach ((array)$a as $k => $v)\
    \ {\n            if ($v === $b) {\n                return $k;\n            }\n\
    \        }\n    }\n    if (is_object($b)) {\n        if (get_class($a) !== get_class($b))\
    \ {\n            return $a;\n        }\n        foreach ((array)$a as $k => $v)\
    \ {\n            if ($v === $b) {\n                return $k;\n            }\n\
    \        }\n    }\n    if (is_array($a)) {\n        foreach ($a as $k => $v) {\n\
    \            if ($v === $b) {\n                return $k;\n            }\n", " \
    \   if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return 0;\n \
    \       }\n        if ($a < $b) {\n            return 1;\n        }\n        return\
    \ -1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a < $b) {\n            return -1;\n      \
    \  }\n        if ($a > $b) {\n            return 1;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            return 0;\n   \
    \     }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n        \
    \    return 0;\n        }\n        if ($a < $b) {\n            return 1;\n   \
    \     }\n        return -1;\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if (is_string($a) && is_numeric($b)) {\n     \
    \   if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_string($a) && is_numeric($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if (is_string($a) && is_string($b)) {\n      \
    \  if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $b;\n        }\n\
    \        return $", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            if ($a < $b) {\n                return $b;\n\
    \            }\n        }\n        if ($a > $b) {\n            return $a;\n  \
    \      }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n \
    \   if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            if ($a >\
    \ $b) {\n                return $a;\n            }\n            if ($a < $b) {\n\
    \                return $b;\n            }\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return $a;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (is_string($b)) {\n            if (strlen($a) > strlen($b)) {\n            \
    \    return $a;\n            }\n            if (strlen($a) < strlen($b)) {\n \
    \               return $b;\n            }\n        }\n        if (strlen($a) >\
    \ strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) < strlen($b))\
    \ {\n            return $b;\n        }\n    }\n    if (is_string($b)) {\n    \
    \    if (is_string($a)) {\n            if (strlen($a) > strlen($b)) {\n      \
    \          return $a;\n            }\n            if (strlen($a) < strlen($b))\
    \ {\n                return $b;\n            }\n        }\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ $a;\n        }\n        if (strlen($a) < strlen($b)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n  \
    \          if (strlen($a) > strlen($b)) {\n                return $a;\n      \
    \      }\n            if (strlen($a) < str", "    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_float($a) && is_float($b)) {\n        if ($a == $b) {\n\
    \            return 0;\n        }\n        return ($a > $b) ? 1 : -1;\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n        \
    \    return 0;\n        }\n        return ($a > $b) ? 1 : -1;\n    }\n    if (is_int($a)\
    \ && is_int($b)) {\n        return ($a > $b) ? 1 : -1;\n    }\n    if (is_bool($a)\
    \ && is_bool($b)) {\n        return ($a > $b) ? 1 : -1;\n    }\n    return null;\n\
    }\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return 1;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n\
    \            return 1;\n        }\n        if (strlen($a) < strlen($b)) {\n  \
    \          return -1;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a > $b) {\n             \
    \   return 1;\n            }\n            if ($a < $b) {\n                return\
    \ -1;\n            }\n        }\n    }\n    if (is_string($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a > $b) {\n                return 1;\n            }\n  \
    \          if ($a < $b) {\n                return -1;\n            }\n       \
    \ }\n    }\n    if (is_string($b)) {\n        if (is_numeric($a)) {\n        \
    \    if ($a > $b) {\n                return 1;\n            }\n            if\
    \ ($a < $b) {\n                return -1;\n            }\n        }\n    }\n \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n        \
    \    return 1;\n        }\n        if ($a < $b) {\n            return -1;\n  \
    \      }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return 1;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return -1;\n        }\n \
    \   }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if\
    \ ($a > $b) {\n                return 1;\n            }\n            if ($a <\
    \ $b) {\n                return -1;\n            }\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a > $b) {\n             \
    \   return 1;\n            }\n            if ($a < $b) {\n                return\
    \ -1;\n            }\n        }\n    }\n    if (is_string($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            }\n  \
    \          if ($a < $b) {\n                return -1;\n            }\n       \
    \ }\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return $b;\n        }\n \
    \   }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if\
    \ ($a > $b) {\n                return $a;\n            }\n            if ($a <\
    \ $b) {\n                return $b;\n            }\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            if ($a > $b) {\n             \
    \   return $a;\n            }\n            if ($a < $b) {\n                return\
    \ $b;\n            }\n        }\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ $a;\n        }\n        if (strlen($a) < strlen($b)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return $a;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if (is_numeric($b)) {\n            if ($a > $b) {\n                return $a;\n\
    \            }\n            if ($a < $b) {\n                return $b;\n     \
    \       }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($b)) {\n        return $a;\n    }\n    if ($a === $b) {\n      \
    \  return $a;\n    }\n    return $b;\n}\n", "    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_float($a) && is_float($b)) {\n        if ($a == $b) {\n\
    \            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_string($a) && is_numeric($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_numeric($a) && is_string($b)) {\n       \
    \ if ($a == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n\
    \            return -1;\n        }\n        return 1;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return 0;\n     \
    \   }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_numeric($a) && is_float($b)) {\n        if ($a == $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_float($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_string($a) && is_float($b)) {\n        if\
    \ ($a == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n   \
    \         return -1;\n        }\n        return 1;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a == $b) {\n            return 0;\n       \
    \ }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_string($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if (", "    if (is_numeric($a) && is_numeric($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a > $b)\
    \ {\n            return $b;\n        }\n        return $a;\n    }\n    if ($a\
    \ === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if ($a ===\
    \ $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a <\
    \ $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n            return $a;\n\
    \        }\n        if ($a < $b) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_bool($a) &&\
    \ is_bool($b)) {\n        if ($a == $b) {\n            return $a;\n        }\n\
    \        if ($a < $b) {\n            return $a;\n        }\n        return $b;\n\
    \    }\n    if (is_array($a) && is_array($b)) {\n        if ($a == $b) {\n   \
    \         return $a;\n        }\n        if ($a < $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n}", " \
    \   if (is_string($a) && is_string($b)) {\n        $a = floatval($a);\n      \
    \  $b = floatval($b);\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n  \
    \      if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $b;\n        }\n    }\n    if (is_string($a)) {\n    \
    \    if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_string($b)) {\n        if\
    \ ($a > $b) {\n            return $b;\n        }\n        if ($a < $b) {\n   \
    \         return $a;\n        }\n    }\n    if (is_numeric($a)) {\n        if\
    \ ($a > $b) {\n            return $b;\n        }\n        if ($a < $b) {\n   \
    \         return $a;\n        }\n    }\n    if (is_numeric($b)) {\n        if\
    \ ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n   \
    \         return $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        if ($a instanceof stdClass\
    \ && $b instanceof stdClass) {\n            $a = (array)$a;\n            $b =\
    \ (array)$b;\n        }\n        if ($a instanceof SimpleXMLElement && $b instanceof\
    \ SimpleXMLElement) {\n            $a = (array)$a;\n            $b = (array)$b;\n\
    \        }\n        if ($a instanceof SimpleXMLElement && $b instanceof SimpleXMLElement)\
    \ {\n            $a = (array)$a;\n            $b = (array)$b;\n        }\n   \
    \     if ($a instanceof SimpleXMLElement && $b instanceof SimpleXMLElement) {\n\
    \            $a = (array)$a;\n            $b = (array)$b;\n        }\n       \
    \ if ($a instanceof SimpleXMLElement && $b instanceof SimpleXMLElement) {\n  \
    \          $a = (array)$a;\n            $b = (array)$b;\n        }\n        if\
    \ ($a instanceof SimpleXMLElement && $b instanceof SimpleXMLElement) {\n     \
    \       $a = (array)$a;\n            $b = (array)$b;\n        }\n        if ($a\
    \ instanceof SimpleXMLElement && $b instanceof SimpleXMLElement) {\n         \
    \   $a = (array)$a;\n            $b = (array)$b;\n        }\n        if ($a instanceof\
    \ SimpleXMLElement && $b instanceof SimpleXMLElement) {\n            $a = (array)$a;\n\
    \            $b = (array)$b;\n        }\n        if ($a instanceof SimpleXMLElement\
    \ && $", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a < $b) {\n            return -1;\n     \
    \   }\n        if ($a > $b) {\n            return 1;\n        }\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if (strcmp($a, $b) < 0) {\n    \
    \        return -1;\n        }\n        if (strcmp($a, $b) > 0) {\n          \
    \  return 1;\n        }\n    }\n    if (is_string($a)) {\n        return 1;\n\
    \    }\n    if (is_string($b)) {\n        return -1;\n    }\n    if (is_numeric($a))\
    \ {\n        return 1;\n    }\n    if (is_numeric($b)) {\n        return -1;\n\
    \    }\n}\n", "    if (is_string($a) && is_string($b)) {\n        $a = str_replace(',',\
    \ '.', $a);\n        $b = str_replace(',', '.', $b);\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        return max($a, $b); // return largest value\n\
    \    }\n    if (is_numeric($a)) {\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n\
    \    return null;\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n  \
    \  if (is_float($a) && is_float($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n      \
    \  if (strcmp($a, $b) == 0) {\n            return $a;\n        }\n        if (strcasecmp($a,\
    \ $b) == 0) {\n            return $a;\n        }\n        if (strcasecmp($a, $b)\
    \ == 0) {\n            return $a;\n        }\n        if (strcasecmp($a, $b) ==\
    \ 0) {\n            return $a;\n        }\n        if (strcasecmp($a, $b) == 0)\
    \ {\n            return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n\
    \            return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n \
    \           return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n  \
    \          return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n   \
    \         return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n    \
    \        return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n     \
    \       return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n      \
    \      return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n       \
    \     return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n        \
    \    return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n         \
    \   return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n          \
    \  return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n           \
    \ return $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n            return\
    \ $a;\n        }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n\
    \        }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n \
    \       }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n  \
    \      }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n   \
    \     }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n    \
    \    }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n     \
    \   }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n      \
    \  }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n       \
    \ }\n        if (strcasecmp($a, $b) == 0) {\n            return $a;\n        }\n\
    \        if (strcasecmp($a, $b) == 0) {\n            return $a;\n", "    if ($a\
    \ === $b) {\n        return 0;\n    }\n    if (is_float($a) && is_float($b)) {\n\
    \        if ($a == $b) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return -1;\n        }\n        return 1;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return 0;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n  \
    \          return 0;\n        }\n        if ($a < $b) {\n            return -1;\n\
    \        }\n        return 1;\n    }\n    if (is_bool($a) && is_bool($b)) {\n\
    \        if ($a == $b) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return -1;\n        }\n        return 1;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) != count($b)) {\n            return\
    \ -1;\n        }\n        foreach ($a as $k => $v) {\n            if ($v != $b[$k])\
    \ {\n                return -1;\n            }\n        }\n        return 0;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        $a = get_object_vars($a);\n\
    \        $b = get_object_vars($b);\n        if (count($a) != count($b)) {\n  \
    \          return -1;\n        }\n        foreach ($a as $k => $v) {\n       \
    \     if ($v != $b[$k]) {\n                return -1;\n            }\n       \
    \ }\n        return 0;\n    }\n    return -1;\n}\n", "    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n       \
    \ }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n\
    \    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n       \
    \     return $a;\n        }\n        if ($a < $b) {\n            return $b;\n\
    \        }\n    }\n    if (is_numeric($a)) {\n        return $b;\n    }\n    if\
    \ (is_numeric($b)) {\n        return $a;\n    }\n    if ($a === $b) {\n      \
    \  return $a;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        return $b;\n    }\n    if (is_string($b)) {\n        return $a;\n\
    \    }\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a < $b) {\n            return -1;\n     \
    \   }\n        if ($a > $b) {\n            return 1;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return 0;\n \
    \       }\n        if ($a < $b) {\n            return -1;\n        }\n       \
    \ return 1;\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n\
    \            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ 1;\n        }\n        return -1;\n    }\n    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a < $b) {\n\
    \            return -1;\n        }\n        if ($a > $b) {\n            return\
    \ 1;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n\
    \            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_string($b)) {\n       \
    \ if (is_string($a)) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return 1;\n        }\n        return -1;\n    }\n    if ($a ===\
    \ $b) {\n        return 0;\n    }\n    if (is_object($a) && is_object($b)) {\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        if ($a > $b)\
    \ {\n            return 1;\n        }\n    }\n    if (is_object($a)) {\n     \
    \   if (is_object($b)) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return -1;\n        }\n        return 1;\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            return 0;\n        }\n        if\
    \ ($a < $b) {\n            return 1;\n        }\n        return -1;\n    }\n \
    \   if ($a === $b) {\n        return 0;\n    }\n    if (is_resource($a) && is_resource($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_resource($a)) {\n\
    \        if (is_resource($b)) {\n            return 0;\n        }\n        if\
    \ ($a < $b) {\n            return -1;\n        }\n        return 1;\n    }\n \
    \   if (is_resource($b)) {\n        if (is_resource($a)) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return 1;\n        }\n  \
    \      return -1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n   \
    \ if (is_callable($a) && is_callable($b)) {\n", "    if ($a === $b) {\n      \
    \  return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if\
    \ ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n   \
    \         return $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if\
    \ (is_numeric($b)) {\n            if ($a > $b) {\n                return $a;\n\
    \            }\n            if ($a < $b) {\n                return $b;\n     \
    \       }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n        \
    \    if ($a > $b) {\n                return $a;\n            }\n            if\
    \ ($a < $b) {\n                return $b;\n            }\n        }\n    }\n \
    \   if (is_object($a) && is_object($b)) {\n        if ($a > $b) {\n          \
    \  return $a;\n        }\n        if ($a < $b) {\n            return $b;\n   \
    \     }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n     \
    \       if ($a > $b) {\n                return $a;\n            }\n          \
    \  if ($a < $b) {\n                return $b;\n            }\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            if ($a >\
    \ $b) {\n                return $a;\n            }\n            if ($a < $b) {\n\
    \                return $b;\n            }\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_array($a)) {\n        if (is_array($b)) {\n            if ($a > $b) {\n\
    \                return $a;\n            }\n            if ($a < $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            if ($a > $b) {\n               \
    \ return $a;\n            }\n            if ($a < $b) {\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($b > $a) {\n            return $b;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($b\
    \ > $a) {\n            return $b;\n        }\n    }\n    if (is_numeric($b)) {\n\
    \        if ($a > $b) {\n            return $b;\n        }\n        if ($b > $a)\
    \ {\n            return $a;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}",
  "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if (abs($a) == abs($b)) {\n            if ($a < 0) {\n          \
    \      return $b;\n            }\n            return $a;\n        }\n        return\
    \ $a;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}", "    if (is_numeric($a) && is_numeric($b)) {\n      \
    \  if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if (is_numeric($b)) {\n            if ($a > $b) {\n                return $a;\n\
    \            }\n            if ($a < $b) {\n                return $b;\n     \
    \       }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a > $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            if ($a > $b) {\n\
    \                return $a;\n            }\n            if ($a < $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            if ($a > $b) {\n              \
    \  return $a;\n            }\n            if ($a < $b) {\n                return\
    \ $b;\n            }\n        }\n    }\n}", "    if (is_string($a)) {\n      \
    \  $a = floatval($a);\n    }\n    if (is_string($b)) {\n        $b = floatval($b);\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a)) {\n      \
    \  if ($a === $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($b))\
    \ {\n        if ($b === $a) {\n            return $a;\n        }\n        if ($b\
    \ > $a) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if ($a === $b)\
    \ {\n                return $a;\n            }\n            if ($a > $b) {\n \
    \               return $a;\n            }\n            return $b;\n        }\n\
    \        if ($b > $a) {\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n           \
    \ if ($b === $a) {\n                return $a;\n            }\n            if\
    \ ($b > $a) {\n                return $b;\n            }\n            return $a;\n\
    \        }\n        if ($a > $b) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n   \
    \     if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($b)) {\n      \
    \  if ($a > $b) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if ($a == $b) {\n      return $a;\n    }\n    if ($a\
    \ > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  if (is_numeric($a))\
    \ {\n    if ($a > $b) {\n      return $a;\n    }\n    return $b;\n  }\n  if (is_numeric($b))\
    \ {\n    if ($a > $b) {\n      return $b;\n    }\n    return $a;\n  }\n  if ($a\
    \ === $b) {\n    return $a;\n  }\n  return $b;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       if ($a == $b) {\n                return $a;\n            }\n         \
    \   if ($a > $b) {\n                return $a;\n            }\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b)) {\n     \
    \   return $b;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    return\
    \ $b;\n}", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $a;\n        }\n \
    \       if (strcmp($a, $b) > 0) {\n            return $a;\n        }\n       \
    \ return $b;\n    }\n    if (is_string($a) && is_numeric($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $b;\n        }\n        if (strcmp($a, $b) <\
    \ 0) {\n            return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_string($b)) {\n        if (strcmp($a, $b) == 0) {\n            return\
    \ $b;\n        }\n        if (strcmp($a, $b) < 0) {\n            return $b;\n\
    \        }\n        return $a;\n    }\n    if (is_string($a) && is_numeric($b))\
    \ {\n        if (strcmp($a, $b) == 0) {\n            return $a;\n        }\n \
    \       if (strcmp($a, $b) > 0) {\n            return $a;\n        }\n       \
    \ return $b;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n\
    \        return $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n  \
    \  return $b;\n}", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        return max($a, $b);\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        $a = str_replace(',', '', $a); // remove commas\n\
    \        $b = str_replace(',', '', $b); // remove commas\n        $a = str_replace('.',\
    \ '', $a); // remove decimals\n        $b = str_replace('.', '', $b); // remove\
    \ decimals\n        return strcmp($a, $b);\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        return $a > $b ? 1 : -1;\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        return $a->compare($b);\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        return $a['cmp']($b);\n    }\n    return null;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       return $a > $b ? $a : $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_numeric($b)) {\n        return $b;\n    }\n    if ($a === $b) {\n      \
    \  return $a;\n    }\n    return $b;\n}", "    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if (abs($a)\
    \ == abs($b)) {\n            return $a > $b ? $a : $b;\n        }\n        if\
    \ ($a < $b) {\n            return $a;\n        }\n        return $b;\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if (strlen($a) == strlen($b))\
    \ {\n            return strcmp($a, $b) > 0 ? $a : $b;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_object($a) && is_object($b)) {\n        if ($a instanceof stdClass\
    \ && $b instanceof stdClass) {\n            return $a->$a > $b->$b ? $a : $b;\n\
    \        }\n        if ($a instanceof stdClass) {\n            return $a;\n  \
    \      }\n        if ($b instanceof stdClass) {\n            return $b;\n    \
    \    }\n    }\n    if (is_object($a)) {\n        return $a;\n    }\n    if (is_object($b))\
    \ {\n        return $b;\n    }\n    if (is_array($a) && is_array($b)) {\n    \
    \    if (count($a) != count($b)) {\n            return $a > $b ? $a : $b;\n  \
    \      }\n        foreach ($a as $k => $v) {\n            if ($k != $b) {\n  \
    \              return $a > $b ? $a : $b;\n            }\n        }\n        return\
    \ $a;\n    }\n    return $a > $b ? $a : $b;\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=php,sorting,arrays |>\n<code>", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n\
    \    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}\n", " \
    \   if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return 0;\n        }\n        return\
    \ -1;\n    }\n    if (is_numeric($b)) {\n        return 1;\n    }\n    if ($a\
    \ === $b) {\n        return 0;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_string($a)) {\n\
    \        if (is_string($b)) {\n            return 0;\n        }\n        return\
    \ -1;\n    }\n    if (is_string($b)) {\n        return 1;\n    }\n    return null;\n\
    }\n", "  if ($a == $b) {\n    return $a;\n  }\n  else if (is_numeric($a) && is_numeric($b))\
    \ {\n    if ($a == 0) {\n      return 0;\n    }\n    else if ($a > 0) {\n    \
    \  return $b;\n    }\n    else {\n      return $a;\n    }\n  }\n  else if (is_numeric($a))\
    \ {\n    return $b;\n  }\n  else if (is_numeric($b)) {\n    return $a;\n  }\n\
    \  else if (is_string($a) && is_string($b)) {\n    if ($a == '.') {\n      return\
    \ $b;\n    }\n    else if ($b == '.') {\n      return $a;\n    }\n    else if\
    \ ($a > $b) {\n      return $a;\n    }\n    else {\n      return $b;\n    }\n\
    \  }\n  else {\n    return $a;\n  }\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a;\n        }\n    }\n   \
    \ if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($b)) {\n        if (is_string($a)) {\n            return $b;\n\
    \        }\n    }\n}\n", "  if ($a === $b) {\n    return $a;\n  }\n  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if ($a > $b) {\n      return $a;\n    }\n    if ($a\
    \ < $b) {\n      return $b;\n    }\n  }\n  if (is_numeric($a)) {\n    if (is_numeric($b))\
    \ {\n      return $a > $b ? $a : $b;\n    }\n    return $a;\n  }\n  if (is_numeric($b))\
    \ {\n    return $b;\n  }\n  return $a > $b ? $a : $b;\n}", "    if ($a === $b)\
    \ {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n \
    \       if ($a < $b) {\n            return -1;\n        } elseif ($a > $b) {\n\
    \            return 1;\n        } else {\n            return 0;\n        }\n \
    \   }\n    if (is_numeric($a)) {\n        if ($a < $b) {\n            return -1;\n\
    \        } elseif ($a > $b) {\n            return 1;\n        } else {\n     \
    \       return 0;\n        }\n    }\n    if (is_numeric($b)) {\n        if ($a\
    \ < $b) {\n            return -1;\n        } elseif ($a > $b) {\n            return\
    \ 1;\n        } else {\n            return 0;\n        }\n    }\n    if ($a <\
    \ $b) {\n        return -1;\n    } elseif ($a > $b) {\n        return 1;\n   \
    \ } else {\n        return 0;\n    }\n}\n", "    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_float($a) && is_float($b)) {\n        return max($a, $b);\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        return strcmp($a, $b)\
    \ > 0;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        return $a\
    \ > $b ? 1 : -1;\n    }\n    if (is_object($a) && is_object($b)) {\n        return\
    \ $a->compare($b) > 0 ? 1 : -1;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        return array_keys($a) > array_keys($b) ? 1 : -1;\n    }\n    return\
    \ null;\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a == $b) {\n            return $a;\n      \
    \  }\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.',\
    \ $b); // str_replace does not like commas\n        $a = floatval($a);\n     \
    \   $b = floatval($b);\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        $a = str_replace(',', '.', $a); // str_replace does not like commas\n\
    \        $b = str_replace(',', '.', $b); // str_replace does not like commas\n\
    \        $a = floatval($a);\n        $b = floatval($b);\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_object($a) && is_object($b)) {\n        if ($a === $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if ($a === $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    return\
    \ null;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work if\
    \ the values are strings. Try it with `'10'` and `'2'`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a string like `'10'` but `'2'` as a second value.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a string like `'10'` but `'2'`\
    \ as a second value.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like `'10'` but `'2'` as a second value.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have a string like `'10'` but `'2'` as a second value.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>", "    if (is_numeric($a) && is_numeric($b)) {\n     \
    \   if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "  if (is_numeric($a)\
    \ && is_numeric($b)) {\n    if ($a == $b) {\n      return $a;\n    }\n    return\
    \ $a > $b ? $a : $b;\n  }\n  if (is_string($a) && is_string($b)) {\n    if ($a\
    \ == $b) {\n      return $a;\n    }\n    if (strpos($a, ',') !== false && strpos($b,\
    \ ',') !== false) {\n      $a = explode(',', $a);\n      $b = explode(',', $b);\n\
    \      sort($a);\n      sort($b);\n      if ($a == $b) {\n        return $a;\n\
    \      }\n      return $a > $b ? $a : $b;\n    }\n  }\n  return null;\n}", " \
    \   if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ $a;\n        }\n        if (strlen($a) < strlen($b)) {\n            return $b;\n\
    \        }\n    }\n    if (is_object($a) && is_object($b)) {\n        if ($a instanceof\
    \ stdClass && $b instanceof stdClass) {\n            return compare_one($a->value,\
    \ $b->value);\n        }\n        if ($a instanceof \\stdClass || $b instanceof\
    \ \\stdClass) {\n            return compare_one($a->value, $b->value);\n     \
    \   }\n        if ($a instanceof \\DateTime || $b instanceof \\DateTime) {\n \
    \           return compare_one($a->format('U'), $b->format('U'));\n        }\n\
    \        if ($a instanceof \\DateTime || $b instanceof \\DateTime) {\n       \
    \     return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d H:i:s'));\n\
    \        }\n        if ($a instanceof \\DateTime || $b instanceof \\DateTime)\
    \ {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\DateTime) {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\DateTime) {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\DateTime) {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\DateTime) {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\DateTime) {\n            return compare_one($a->format('Y-m-d H:i:s'), $b->format('Y-m-d\
    \ H:i:s'));\n        }\n        if ($a instanceof \\DateTime || $b instanceof\
    \ \\", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n     \
    \   return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n\
    \    if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $a;\n            }\n     \
    \       return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n        \
    \    return 1;\n        }\n        if ($a < $b) {\n            return -1;\n  \
    \      }\n    }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n         \
    \   return 1;\n        }\n        if ($a < $b) {\n            return -1;\n   \
    \     }\n    }\n    if (is_numeric($b)) {\n        if ($a > $b) {\n          \
    \  return 1;\n        }\n        if ($a < $b) {\n            return -1;\n    \
    \    }\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ 1;\n        }\n        if (strlen($a) < strlen($b)) {\n            return -1;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return 1;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return -1;\n        }\n    }\n    if (is_string($b)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a instanceof stdClass && $b instanceof stdClass)\
    \ {\n            return compare_one($a->value, $b->value);\n        }\n      \
    \  if ($a instanceof SimpleXMLElement && $b instanceof SimpleXMLElement) {\n \
    \           return compare_one($a->asXML(), $b->asXML());\n        }\n       \
    \ if ($a instanceof DOMDocument && $b instanceof DOMDocument) {\n            return\
    \ compare_one($a->saveXML(), $b->saveXML());\n        }\n    }\n    if (is_object($a))\
    \ {\n        if ($a instanceof stdClass) {\n            return -1;\n        }\n\
    \        if ($a instanceof SimpleXMLElement) {\n            return -1;\n     \
    \   }\n        if ($a instanceof DOMDocument) {\n            return -1;\n    \
    \    }\n    }\n    if (is_object($b)) {\n        if ($b instanceof stdClass) {\n\
    \            return 1;\n        }\n        if ($b instanceof SimpleXMLElement)\
    \ {\n            return 1;\n        }\n        if ($b instanceof DOMDocument)\
    \ {\n            return 1;\n        }\n    }\n    if (is_array($a)) {\n      \
    \  if (is_array($b)) {\n            foreach ($a as $k => $v) {\n             \
    \   if ($k !== $b) {\n                    return -1;\n                }\n    \
    \        }\n            foreach ($b as $k => $v) {\n                if ($k ",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a < $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_string($a)) {\n        if ($a < $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($b)) {\n        if ($a < $b) {\n\
    \            return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    return $b;\n}\n", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_numeric($b)) {\n   \
    \     if (is_numeric($a)) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return $b;\n        }\n \
    \   }\n    if (is_string($a)) {\n        if (is_string($b)) {\n            return\
    \ $a;\n        }\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            return $b;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_object($a) && is_object($b)) {\n        if (get_class($a)\
    \ == get_class($b)) {\n            return $a;\n        }\n    }\n    if (is_object($a))\
    \ {\n        if (is_object($b)) {\n            return $b;\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            return $a;\n\
    \        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) != count($b)) {\n            return\
    \ $a;\n        }\n        foreach ($a as $k => $v) {\n            if ($v != $b[$k])\
    \ {\n                return $a;\n            }\n        }\n    }\n    if (is_array($a))\
    \ {\n        if (is_array($b)) {\n            return $a;\n        }\n    }\n \
    \   if (is_array($b)) {\n        return $b;\n    }\n    if ($a === $b) {\n   \
    \     return $a;\n    }\n    if (is_resource($a) && is_resource($b)) {\n     \
    \   return $a;\n    }\n    if (is_resource($a)) {\n        if (is_resource($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_resource($b)) {\n  \
    \      if (is_resource($a)) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_callable($a) && is_callable($b))\
    \ {\n        return $a;\n    }\n    if (is_callable($a)) {\n        if (is_callable($b))\
    \ {", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n     \
    \   if (is_numeric($b)) {\n            return $a > $b ? $a : $b;\n        }\n\
    \        return $a;\n    }\n    if (is_numeric($b)) {\n        return $b;\n  \
    \  }\n    if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", " \
    \   if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a < $b) {\n                return\
    \ $a;\n            }\n            if ($a > $b) {\n                return $b;\n\
    \            }\n        }\n        return $a;\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n  \
    \      if (strlen($a) < strlen($b)) {\n            return $a;\n        }\n   \
    \     if (strlen($a) > strlen($b)) {\n            return $b;\n        }\n    }\n\
    \    if (is_string($a)) {\n        return $b;\n    }\n    if (is_string($b)) {\n\
    \        return $a;\n    }\n    return $a;\n}", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if ($a == $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a == $b) {\n           \
    \ return $a;\n        }\n        if ($a < $b) {\n            return $a;\n    \
    \    }\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n\
    \    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}\n", " \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n       \
    \     return $a;\n        }\n        if ($a < $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a == $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_string($a)) {\n        return $a;\n    }\n    if (is_string($b))\
    \ {\n        return $b;\n    }\n    if (is_numeric($a)) {\n        return $b;\n\
    \    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   } else if ($a < $b) {\n            return $b;\n        } else {\n        \
    \    return $a;\n        }\n    } else {\n        if ($a === $b) {\n         \
    \   return $a;\n        } else {\n            return $b;\n        }\n    }\n}\n",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $a;\n            }\n     \
    \       return $b;\n        }\n        if ($b == '') {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $a;\n            }\n     \
    \       return $b;\n        }\n        if ($a == '') {\n            return $b;\n\
    \        }\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n\
    \    }\n    if ($a > $b) {\n        return $a;\n    }\n    return $b;\n}\n", " \
    \   if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            if ($a < $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n        \
    \    if ($a > $b) {\n                return $a;\n            }\n            if\
    \ ($a < $b) {\n                return $b;\n            }\n        }\n    }\n \
    \   if (is_object($a) && is_object($b)) {\n        if ($a > $b) {\n          \
    \  return $a;\n        }\n        if ($a < $b) {\n            return $b;\n   \
    \     }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n     \
    \       if ($a > $b) {\n                return $a;\n            }\n          \
    \  if ($a < $b) {\n                return $b;\n            }\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            if ($a >\
    \ $b) {\n                return $a;\n            }\n            if ($a < $b) {\n\
    \                return $b;\n            }\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_array($a)) {\n        if (is_array($b)) {\n            if ($a > $b) {\n\
    \                return $a;\n            }\n            if ($a < $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            if ($a > $b) {\n               \
    \ return $a;\n            }\n            if ($a < $b) {\n", "    if ($a === $b)\
    \ {\n        return 0;\n    }\n    if (is_float($a) && is_float($b)) {\n     \
    \   return max($a, $b) - min($a, $b);\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        $a = str_replace(',', '', $a); // remove commas\n        $b = str_replace(',',\
    \ '', $b); // remove commas\n        $a = preg_replace('/[^0-9\\.-]+/', '', $a);\
    \ // remove non-numeric characters\n        $b = preg_replace('/[^0-9\\.-]+/',\
    \ '', $b); // remove non-numeric characters\n        $a = preg_replace('/\\.$/',\
    \ '', $a); // remove trailing decimal\n        $b = preg_replace('/\\.$/', '',\
    \ $b); // remove trailing decimal\n        return strcmp($a, $b);\n    }\n   \
    \ if (is_string($a)) {\n        return -1;\n    }\n    if (is_string($b)) {\n\
    \        return 1;\n    }\n    if (is_float($a)) {\n        return -1;\n    }\n\
    \    if (is_float($b)) {\n        return 1;\n    }\n    if ($a === null && $b\
    \ === null) {\n        return 0;\n    }\n    if ($a === null) {\n        return\
    \ -1;\n    }\n    if ($b === null) {\n        return 1;\n    }\n    if ($a ===\
    \ $b) {\n        return 0;\n    }\n    if (is_object($a) && is_object($b)) {\n\
    \        if (get_class($a) === get_class($b)) {\n            return 0;\n     \
    \   }\n        $a = get_object_vars($a);\n        $b = get_object_vars($b);\n\
    \        $c = array_diff($a, $b);\n        if (count($c) > 0) {\n            return\
    \ -1;\n        }\n        $c = array_diff($b, $a);\n        if (count($c) > 0)\
    \ {\n            return 1;\n        }\n    }\n    if (is_object($a)) {\n     \
    \   return -1;\n    }\n    if (is_object($b)) {\n        return 1;\n    }\n  \
    \  if ($a === $b) {\n        return 0;\n    }\n    if (is_array($a)) {\n     \
    \   $c = array_diff($a, array_flip($b));\n        if (count($c) > 0) {\n     \
    \       return -1;\n        }\n        $c = array_diff($array_flip($a), $b);\n\
    \        if (count($c) > 0) {\n            return 1;\n        }\n    }\n    if\
    \ (is_array($b)) {\n        $c = array_diff($b, array_flip($a));\n        if (count($c)\
    \ > 0) {\n            return -1;\n        }\n        $c = array_diff($array_flip($b),\
    \ $a);\n        if (count($c) > 0) {\n            return 1;\n        }\n    }\n\
    \    return 1;\n}", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n           \
    \ return $a;\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            return $b;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return $a;\n        }\n        if (strlen($a) <\
    \ strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($b)) {\n        if (is_string($a)) {\n            return $b;\n\
    \        }\n    }\n    if (is_object($a) && is_object($b)) {\n        if (get_class($a)\
    \ === get_class($b)) {\n            return $a;\n        }\n    }\n    if (is_object($a))\
    \ {\n        if (is_object($b)) {\n            return $b;\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            return $a;\n\
    \        }\n    }\n    if (is_array($a) && is_array($b)) {\n        if (count($a)\
    \ !== count($b)) {\n            return $a;\n        }\n        foreach ($a as\
    \ $k => $v) {\n            if ($v != $b[$k]) {\n                return $a;\n \
    \           }\n        }\n        return $b;\n    }\n    if (is_array($a)) {\n\
    \        return $b;\n    }\n    if (is_array($b)) {\n        return $a;\n    }\n\
    \    return $a;\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like this solution,\
    \ it's very elegant and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, it's very elegant and easy to understand.\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, it's very elegant and easy to understand.\n<|/ c |>\n\
    <| c |>\nI like this solution as well, it's very elegant and easy to understand.\n\
    <|/ c |>\n<| c |>\nI like this solution as well, it's very elegant and easy to\
    \ understand.\n<|/ c |>\n<| a tags=php,comparison,arrays |>\n<code>\n$a = array('name",
  "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',',\
    \ '.', $b);\n        $a = floatval($a);\n        $b = floatval($b);\n        if\
    \ ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n    \
    \        return -1;\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        $a = $a->__toString();\n        $b = $b->__toString();\n    }\n \
    \   if (is_object($a)) {\n        if (is_object($b)) {\n            $a = $a->__toString();\n\
    \            $b = $b->__toString();\n        }\n        if (is_string($b)) {\n\
    \            $a = $a->__toString();\n        }\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            $b = $b->__toString();\n      \
    \  }\n        if (is_string($a)) {\n            $b = $b->__toString();\n     \
    \   }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n       \
    \     $a = floatval($a);\n            $b = floatval($b);\n        }\n    }\n \
    \   if (is_string($b)) {\n        if (is_string($a)) {\n            $b = floatval($b);\n\
    \        }\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n        \
    \    return -1;\n        }\n    }\n    if (is_object($a) && is_object($b)) {\n\
    \        $a = $a->__toString();\n        $b = $b->__toString();\n    }\n    if\
    \ (is_object($a)) {\n        if (is_object($b)) {\n            $a = $a->__toString();\n\
    \            $b = $b->__toString();\n        }\n        if (is_string($b)) {\n\
    \            $a = $a->__toString();\n        }\n    }\n    if (is_object($b))\
    \ {\n        if (is_object($a)) {\n            $b = $b->__toString();\n      \
    \  }\n        if (is_string($a)) {\n            $b = $b->__toString();\n     \
    \   }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n       \
    \     $a = floatval($a);\n            $b = floatval($b);\n        }\n    }\n \
    \   if (is_string($b)) {\n        if (is_string($a)) {\n            $b = floatval($b);\n\
    \        }\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a > $b) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}",
  "    if ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return 0;\n \
    \       }\n        if ($a < $b) {\n            return 1;\n        }\n        return\
    \ -1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if ($a < $b)\
    \ {\n        return -1;\n    }\n    return 1;\n}\n", "    if ($a === $b) {\n \
    \       return 0;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n      \
    \  if ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n\
    \            return -1;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n \
    \           return -1;\n        }\n    }\n    if (is_numeric($b)) {\n        if\
    \ ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n    \
    \        return -1;\n        }\n    }\n    if ($a === $b) {\n        return 0;\n\
    \    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return 1;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return -1;\n        }\n    }\n    if (is_string($a)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return 1;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return -1;\n        }\n \
    \   }\n    if (is_object($a) && is_object($b)) {\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') - $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return -1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') - $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return -1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') - $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return 1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return -1;\n        }\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('U') - $b->format('U');\n\
    \        }\n        if ($a instanceof DateTime || $b instanceof DateTime) {\n\
    \            return -1;\n        }\n        if ($a instanceof DateTime && $b ===\
    \ null) {\n            return 1;\n        }\n        if ($a instanceof ", "  \
    \  if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a;\n        }\n    }\n   \
    \ if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return $b;\n\
    \        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a > $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            return $a;\n  \
    \      }\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n    \
    \        return $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        if ($a > $b) {\n  \
    \          return $a;\n        }\n        if ($a < $b) {\n            return $b;\n\
    \        }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n  \
    \          return $a;\n        }\n    }\n    if (is_object($b)) {\n        if\
    \ (is_object($a)) {\n            return $b;\n        }\n    }\n    if ($a ===\
    \ $b) {\n        return $a;\n    }\n    if (is_array($a) && is_array($b)) {\n\
    \        if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $b;\n        }\n    }\n    if (is_array($a)) {\n     \
    \   if (is_array($b)) {\n            return $a;\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            return $b;\n        }\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    if (is_resource($a) && is_resource($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_resource($a))\
    \ {\n        if (is_resource($b)) {\n            return $a;\n        }\n    }\n\
    \    if (is_resource($b)) {\n        if (is_resource($a)) {\n            return\
    \ $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ if (is_callable($a) && is_callable($b)) {\n        if ($a > $", "    if ($a\
    \ === $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ < strlen($b)) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_int($a) && is_int($b)) {\n        return $a > $b ? $a : $b;\n\
    \    }\n    if (is_bool($a) && is_bool($b)) {\n        return $a === $b ? $a :\
    \ $b;\n    }\n    if (is_null($a) && is_null($b)) {\n        return $a === $b\
    \ ? $a : $b;\n    }\n    if (is_object($a) && is_object($b)) {\n        return\
    \ $a->compare($b);\n    }\n    if (is_array($a) && is_array($b)) {\n        return\
    \ $a['compare']($b);\n    }\n    return null;\n}", "    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n       \
    \ }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n     \
    \   if ($a > $b) {\n            return $b;\n        }\n        return $a;\n  \
    \  }\n    if ($a === $b) {\n        return $a;\n    }\n    if ($a > $b) {\n  \
    \      return $a;\n    }\n    return $b;\n}\n", "  if (is_numeric($a) && is_numeric($b))\
    \ {\n    if ($a == $b) {\n      return $a;\n    }\n  }\n  if (is_numeric($a))\
    \ {\n    if (is_numeric($b)) {\n      if ($a > $b) {\n        return $a;\n   \
    \   }\n      return $b;\n    }\n  }\n  if (is_numeric($b)) {\n    if (is_numeric($a))\
    \ {\n      if ($a < $b) {\n        return $a;\n      }\n      return $b;\n   \
    \ }\n  }\n  if ($a === $b) {\n    return $a;\n  }\n  return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a > $b) {\n                return\
    \ 1;\n            }\n            if ($a < $b) {\n                return -1;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            }\n  \
    \          if ($a < $b) {\n                return -1;\n            }\n       \
    \ }\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a > $b) {\n            return 1;\n       \
    \ }\n        if ($a < $b) {\n            return -1;\n        }\n    }\n    if\
    \ (is_string($a)) {\n        if (is_string($b)) {\n            if ($a > $b) {\n\
    \                return 1;\n            }\n            if ($a < $b) {\n      \
    \          return -1;\n            }\n        }\n    }\n    if (is_string($b))\
    \ {\n        if (is_string($a)) {\n            if ($a > $b) {\n              \
    \  return 1;\n            }\n            if ($a < $b) {\n                return\
    \ -1;\n            }\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_object($a)) {\n\
    \        if (is_object($b)) {\n            if ($a > $b) {\n                return\
    \ 1;\n            }\n            if ($a < $b) {\n                return -1;\n\
    \            }\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            }\n  \
    \          if ($a < $b) {\n                return -1;\n            }\n       \
    \ }\n    }\n    if (is_array($a) && is_array($b)) {\n        if ($a > $b) {\n\
    \            return 1;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n\
    \            if ($a > $b) {\n                return 1;\n            }\n      \
    \      if ($a < $b) {\n                return -1;\n            }\n        }\n\
    \    }\n    if (is_array($b)) {\n        if (is_array($a)) {\n            if ($a\
    \ > $b) {\n                return 1;\n            }\n            if ($a < $b)\
    \ {\n                return -1;\n            }\n        }\n    }\n    return null;\n",
  "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a < $b) {\n                return\
    \ $a;\n            }\n            if ($a > $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a < $b) {\n                return $a;\n            }\n \
    \           if ($a > $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a < $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if ($a < $b) {\n                return $a;\n            }\n \
    \           if ($a > $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_string($b)) {\n        if (is_string($a)) {\n        \
    \    if ($a < $b) {\n                return $a;\n            }\n            if\
    \ ($a > $b) {\n                return $b;\n            }\n        }\n    }\n \
    \   if (is_object($a) && is_object($b)) {\n        if ($a < $b) {\n          \
    \  return $a;\n        }\n        if ($a > $b) {\n            return $b;\n   \
    \     }\n    }\n    if (is_object($a)) {\n        if (is_object($b)) {\n     \
    \       if ($a < $b) {\n                return $a;\n            }\n          \
    \  if ($a > $b) {\n                return $b;\n            }\n        }\n    }\n\
    \    if (is_object($b)) {\n        if (is_object($a)) {\n            if ($a <\
    \ $b) {\n                return $a;\n            }\n            if ($a > $b) {\n\
    \                return $b;\n            }\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a < $b) {\n            return $a;\n       \
    \ }\n        if ($a > $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_array($a)) {\n        if (is_array($b)) {\n            if ($a < $b) {\n\
    \                return $a;\n            }\n            if ($a > $b) {\n     \
    \           return $b;\n            }\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            if ($a < $b) {\n               \
    \ return $a;\n            }\n            if ($a > $b) {\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($a < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $b;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a == $b) {\n                return\
    \ $a;\n            }\n            if ($a > $b) {\n                return $b;\n\
    \            }\n            if ($a < $b) {\n                return $a;\n     \
    \       }\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $b;\n            }\n     \
    \       if ($a < $b) {\n                return $a;\n            }\n        }\n\
    \    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n           \
    \ if ($a == $b) {\n                return $a;\n            }\n            if ($a\
    \ > $b) {\n                return $b;\n            }\n            if ($a < $b)\
    \ {\n                return $a;\n            }\n        }\n    }\n    if (is_string($a))\
    \ {\n        if (is_string($b)) {\n            if ($a == $b) {\n             \
    \   return $a;\n            }\n            if ($a > $b) {\n                return\
    \ $b;\n            }\n            if ($a < $b) {\n                return $a;\n\
    \            }\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            if ($a == $b) {\n                return $a;\n            }\n\
    \            if ($a > $b) {\n                return $b;\n            }\n     \
    \       if ($a < $b) {\n                return $a;\n            }\n        }\n\
    \    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n            if\
    \ ($a == $b) {\n                return $a;\n            }\n            if ($a\
    \ > $b) {\n                return $b;\n            }\n            if ($a < $b)\
    \ {\n                return $a;\n            }\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a == $b) {\n            \
    \    return $a;\n            }\n            if ($a > $b) {\n                return\
    \ $b;\n            }\n            if ($a < $b) {\n                return $a;\n\
    \            }\n        }\n    }\n    if (is_string($a)) {\n        if (is_string($b))\
    \ {\n            if ($", "    if ($a === $b) {\n        return 0;\n    }\n   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n          \
    \  return -1;\n        }\n        if ($a > $b) {\n            return 1;\n    \
    \    }\n    }\n    if (is_numeric($a)) {\n        return 1;\n    }\n    if (is_numeric($b))\
    \ {\n        return -1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if (strlen($a) < strlen($b))\
    \ {\n            return -1;\n        }\n        if (strlen($a) > strlen($b)) {\n\
    \            return 1;\n        }\n    }\n    if (is_string($a)) {\n        return\
    \ 1;\n    }\n    if (is_string($b)) {\n        return -1;\n    }\n}\n", "    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n      \
    \      return $b;\n        }\n        return $a;\n    }\n    if (is_bool($a) &&\
    \ is_bool($b)) {\n        if ($a == $b) {\n            return $a;\n        }\n\
    \        if ($a < $b) {\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_null($a) && is_null($b)) {\n        return $a;\n    }\n   \
    \ if (is_array($a) && is_array($b)) {\n        if (count($a) != count($b)) {\n\
    \            return $a;\n        }\n        foreach ($a as $k => $v) {\n     \
    \       if ($v != $b[$k]) {\n                return $a;\n            }\n     \
    \   }\n        return $b;\n    }\n    if (is_object($a) && is_object($b)) {\n\
    \        if (get_class($a) != get_class($b)) {\n            return $a;\n     \
    \   }\n        $aProps = get_object_vars($a);\n        $bProps = get_object_vars($b);\n\
    \        foreach ($aProps as $k => $v) {\n            if ($v != $bProps[$k]) {\n\
    \                return $a;\n            }\n        }\n        return $b;\n  \
    \  }\n    if (is_resource($a) && is_resource($b)) {\n        return $a > $b ?\
    \ $a : $b;\n    }\n    if (is_object($a)) {\n        if (get_class($a) != get_class($b))\
    \ {\n            return $a;\n        }\n        $aProps = get_object_vars($a);\n\
    \        foreach ($aProps as $k => $v) {\n            if ($v != $b->$k) {\n  \
    \              return $a;\n            }\n        }\n        return $b;\n    }\n\
    \    if (is_resource($b)) {\n        return $a > $b ? $a : $b;\n    }\n    if\
    \ (is_object($b)) {\n        if (get_class($b) != get_class($a)) {\n         \
    \   return $a;\n        }\n        $aProps = get_object_vars($b);\n        foreach\
    \ ($aProps as $k => $v) {\n            if ($v != $", "    if ($a === $b) {\n \
    \       return $a;\n    }\n    if (is_float($a) && is_float($b)) {\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n \
    \           return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n        return $a;\n    }\n    if (is_bool($a) && is_bool($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_array($a) && is_array($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n      \
    \  if ($a == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n        return $a;\n    }\n    return $a;\n\
    }", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        if ($a < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        $a = str_replace(',', '.', $a);\n        $b = str_replace(',',\
    \ '.', $b);\n        $a = str_replace('.', '', $a);\n        $b = str_replace('.',\
    \ '', $b);\n        if ($a === $b) {\n            return $a;\n        }\n    }\n\
    \    if (is_string($a)) {\n        if ($a > $b) {\n            return $a;\n  \
    \      }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n \
    \   if (is_numeric($a)) {\n        if ($a > $b) {\n            return $b;\n  \
    \      }\n        if ($a < $b) {\n            return $a;\n        }\n    }\n \
    \   if (is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n  \
    \      }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n}",
  "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a === $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a === $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a\
    \ === $b) {\n            return 0;\n        }\n        if ($a < $b) {\n      \
    \      return -1;\n        }\n        return 1;\n    }\n    if (is_bool($a) &&\
    \ is_bool($b)) {\n        if ($a === $b) {\n            return 0;\n        }\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        return 1;\n\
    \    }\n    if (is_null($a) && is_null($b)) {\n        return 0;\n    }\n    if\
    \ (is_object($a) && is_object($b)) {\n        if ($a === $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_resource($a) && is_resource($b)) {\n    \
    \    if ($a === $b) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return -1;\n        }\n        return 1;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a === $b) {\n            return 0;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a)) {\n        if (strlen($a) < strlen($b)) {\n\
    \            return -1;\n        }\n        if (strlen($a) > strlen($b)) {\n \
    \           return 1;\n        }\n        $aLen = strlen($a);\n        $bLen =\
    \ strlen($b);\n        $aPos = 0;\n        $bPos = 0;\n        while ($aPos <\
    \ $aLen && $bPos < $bLen) {\n            $aChar = substr($a, $aPos, 1);\n    \
    \        $bChar = substr($b, $bPos, 1);\n            if ($aChar !== $bChar) {\n\
    \                return strcmp($aChar, $bChar);\n            }\n            $aPos++;\n\
    \            $bPos++;\n        }\n        if ($aPos === $aLen) {\n           \
    \ return 1;\n        }\n        if ($bPos === $bLen) {\n            return -1;\n\
    \        }\n        return 0;\n    }\n    if (is_float($a)) {\n        if (is_float($b))\
    \ {\n            return $a > $b ? 1 : -1;\n        }\n", "    if ($a === $b) {\n\
    \        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n     \
    \   if ($a > $b) {\n            return 1;\n        }\n        if ($a < $b) {\n\
    \            return -1;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if (is_numeric($b)) {\n            return 0;\n        }\n        if ($a > $b)\
    \ {\n            return 1;\n        }\n        return -1;\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            return 0;\n        }\n       \
    \ if ($a < $b) {\n            return -1;\n        }\n        return 1;\n    }\n\
    \    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a > $b) {\n            return 1;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n    }\n    if (is_string($a)) {\n\
    \        if (is_string($b)) {\n            return 0;\n        }\n        if ($a\
    \ > $b) {\n            return 1;\n        }\n        return -1;\n    }\n    if\
    \ (is_string($b)) {\n        if (is_string($a)) {\n            return 0;\n   \
    \     }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n}\n", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a === $b) {\n            return 0;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a === $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_string($a)) {\n       \
    \ if (is_string($b)) {\n            return strcmp($a, $b);\n        }\n      \
    \  return strcmp($a, $b); // strings are equal\n    }\n    if (is_float($a)) {\n\
    \        if (is_float($b)) {\n            return $a > $b ? 1 : -1;\n        }\n\
    \        return $a > $b ? -1 : 1; // numbers are equal\n    }\n    if (is_int($a))\
    \ {\n        if (is_int($b)) {\n            return $a > $b ? 1 : -1;\n       \
    \ }\n        return $a > $b ? -1 : 1; // numbers are equal\n    }\n    return\
    \ null; // neither are numbers\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            if ($a < $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ $a;\n        }\n        if (strlen($a) < strlen($b)) {\n            return $b;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n  \
    \          if (strlen($a) > strlen($b)) {\n                return $a;\n      \
    \      }\n            if (strlen($a) < strlen($b)) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            if (strlen($a) > strlen($b)) {\n                return $a;\n\
    \            }\n            if (strlen($a) < strlen($b)) {\n                return\
    \ $b;\n            }\n        }\n    }\n    if (is_object($a) && is_object($b))\
    \ {\n        if ($a instanceof stdClass && $b instanceof stdClass) {\n       \
    \     $a = get_object_vars($a);\n            $b = get_object_vars($b);\n     \
    \       foreach ($a as $k => $v) {\n                if ($v === $b) {\n       \
    \             return $k;\n                }\n            }\n            foreach\
    \ ($b as $k => $v) {\n                if ($v === $a) {\n                    return\
    \ $k;\n                }\n            }\n        }\n        if ($a instanceof\
    \ SimpleXMLElement && $b instanceof SimpleXMLElement) {\n            $a = (array)\
    \ $a;\n            $b = (array) $b;\n            foreach ($a as $k => $v) {\n\
    \                if ($v === $b) {\n                    return $k;\n          \
    \      }\n            }\n            foreach ($b as $k => $v) {\n            \
    \    if ($v === $a) {\n                    return $k;\n                }\n   \
    \         }\n        }\n        if ($a instanceof SimpleXMLElement || $b instanceof\
    \ SimpleXMLElement) {\n            return false;\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if (", "    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_numeric($b)) {\n   \
    \     if (is_numeric($a)) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a)) {\n\
    \        if (is_string($b)) {\n            return $a;\n        }\n    }\n    if\
    \ (is_string($b)) {\n        if (is_string($a)) {\n            return $b;\n  \
    \      }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a > $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_object($a)) {\n        if (is_object($b)) {\n            return $a;\n  \
    \      }\n    }\n    if (is_object($b)) {\n        if (is_object($a)) {\n    \
    \        return $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n\
    \    }\n    if (is_array($a) && is_array($b)) {\n        if ($a > $b) {\n    \
    \        return $a;\n        }\n        if ($a < $b) {\n            return $b;\n\
    \        }\n    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n    \
    \        return $a;\n        }\n    }\n    if (is_array($b)) {\n        if (is_array($a))\
    \ {\n            return $b;\n        }\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if (is_resource($a) && is_resource($b)) {\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n        if ($a < $b) {\n         \
    \   return $b;\n        }\n    }\n    if (is_resource($a)) {\n        if (is_resource($b))\
    \ {\n            return $a;\n        }\n    }\n    if (is_resource($b)) {\n  \
    \      if (is_resource($a)) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_callable($a) && is_callable($b))\
    \ {\n        if ($a > $", "    if (is_string($a) && is_string($b)) {\n       \
    \ $a = str_replace(',', '.', $a);\n        $b = str_replace(',', '.', $b);\n \
    \   }\n    if (is_numeric($a) && is_numeric($b)) {\n        return max($a, $b);\
    \ // return $a if $a > $b\n    }\n    if (is_string($a)) {\n        return strcmp($a,\
    \ $b); // return $a if $a > $b\n    }\n    if (is_string($b)) {\n        return\
    \ strcmp($a, $b); // return $b if $b > $a\n    }\n    if (is_numeric($a)) {\n\
    \        return $a; // return $a if $a > $b\n    }\n    if (is_numeric($b)) {\n\
    \        return $b; // return $b if $b > $a\n    }\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       if ($a < $b) {\n                return $a;\n            }\n          \
    \  return $b;\n        }\n        return $a;\n    }\n    if (is_numeric($b)) {\n\
    \        return $b;\n    }\n    if ($a == $b) {\n        return $a;\n    }\n \
    \   return $b;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        if ($a > $b) {\n            return 1;\n        }\n \
    \   }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return\
    \ 0;\n        }\n        return -1;\n    }\n    if (is_numeric($b)) {\n      \
    \  return 1;\n    }\n    if ($a === $b) {\n        return 0;\n    }\n    if ($a\
    \ === null || $b === null) {\n        return 0;\n    }\n    if ($a === \"\" ||\
    \ $b === \"\") {\n        return 0;\n    }\n    if ($a === $b) {\n        return\
    \ 0;\n    }\n    if (is_array($a) && is_array($b)) {\n        $a_keys = array_keys($a);\n\
    \        $b_keys = array_keys($b);\n        if ($a_keys == $b_keys) {\n      \
    \      $a_count = count($a);\n            $b_count = count($b);\n            if\
    \ ($a_count != $b_count) {\n                return $a_count > $b_count ? 1 : -1;\n\
    \            }\n            foreach ($a as $key => $value) {\n               \
    \ $a_value = $a[$key];\n                $b_value = $b[$key];\n               \
    \ if ($a_value != $b_value) {\n                    return $a_value > $b_value\
    \ ? 1 : -1;\n                }\n            }\n            return 0;\n       \
    \ }\n        return $a_keys > $b_keys ? 1 : -1;\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if (get_class($a) == get_class($b)) {\n       \
    \     $a_keys = array_keys(get_object_vars($a));\n            $b_keys = array_keys(get_object_vars($b));\n\
    \            if ($a_keys == $b_keys) {\n                $a_count = count(get_object_vars($a));\n\
    \                $b_count = count(get_object_vars($b));\n                if ($a_count\
    \ != $b_count) {\n                    return $a_count > $b_count ? 1 : -1;\n \
    \               }\n                foreach (get_object_vars($a) as $key => $value)\
    \ {\n                    $a_value = $a->$key;\n                    $b_value =\
    \ $b->$key;\n                    if ($a_value != $b_value) {\n               \
    \         return $a_value > $b_value ? 1 : -1;\n                    }\n      \
    \          }\n                return 0;\n            }\n            return $a_keys\
    \ > $b_keys ? 1 : -1;\n        }\n    }\n    return 1;\n}", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strcmp($a,\
    \ $b) == 0) {\n            return $a;\n        }\n        if (strcmp($a, $b) <\
    \ 0) {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  if (is_numeric($a)) {\n            return $b;\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        return $b;\n    }\n    return $a;\n}", "    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n       \
    \ }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a)) {\n      \
    \  if ($a > $b) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_string($b)) {\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n       \
    \ }\n        return $b;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}", "    if ($a === $b) {\n        return 0;\n    }\n   \
    \ if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n          \
    \  return 1;\n        }\n        if ($a < $b) {\n            return -1;\n    \
    \    }\n    }\n    if (is_numeric($a)) {\n        if ($a > $b) {\n           \
    \ return 1;\n        }\n        if ($a < $b) {\n            return -1;\n     \
    \   }\n    }\n    if (is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ 1;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \   }\n    if ($a === $b) {\n        return 0;\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n        if (strlen($a) > strlen($b)) {\n            return\
    \ 1;\n        }\n        if (strlen($a) < strlen($b)) {\n            return -1;\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (strlen($a) > strlen($b))\
    \ {\n            return 1;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return -1;\n        }\n    }\n    if (is_string($b)) {\n        if\
    \ (strlen($a) > strlen($b)) {\n            return 1;\n        }\n        if (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) !== count($b)) {\n            return\
    \ 0;\n        }\n        foreach ($a as $k => $v) {\n            if ($v != $b[$k])\
    \ {\n                return 0;\n            }\n        }\n        return 1;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        if (!$a instanceof\
    \ $b) {\n            return 0;\n        }\n        $aProps = get_object_vars($a);\n\
    \        $bProps = get_object_vars($b);\n        foreach ($aProps as $k => $v)\
    \ {\n            if ($v != $bProps[$k]) {\n                return 0;\n       \
    \     }\n        }\n        return 1;\n    }\n    return null;\n}\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| c |>\nI like your solution, however it fails if you\
    \ have two strings that should be sorted alphabetically but are not.\n<|/ c |>\n\
    <| c |>\nI added a fix for that case\n<|/ c |>\n<| c |>\nI added a fix for that\
    \ case\n<|/ c |>\n<| c |>\nI added a fix for that case\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\nI wrote a small function which sorts arrays of objects by ", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a == $b) {\n           \
    \ return $a;\n        }\n        if ($a > $b) {\n            return $a;\n    \
    \    }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a > $b) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n \
    \       return $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n   \
    \ return $b;\n}", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a == $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n \
    \           return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_bool($a) && is_bool($b)) {\n        if ($a == $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_array($a) && is_array($b)) {\n        if\
    \ ($a == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_resource($a) && is_resource($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a < $b) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if (is_null($a) && is_null($b))\
    \ {\n        return $a;\n    }\n    if (is_null($a) || is_null($b)) {\n      \
    \  return $b;\n    }\n}", "    if ($a === $b) {\n        return $a;\n    }\n \
    \   if (is_float($a) && is_float($b)) {\n        return max($a, $b);\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        return strcmp($a, $b) > 0;\n\
    \    }\n    if (is_string($a)) {\n        return 1;\n    }\n    if (is_string($b))\
    \ {\n        return -1;\n    }\n    if (is_float($a)) {\n        return 1;\n \
    \   }\n    if (is_float($b)) {\n        return -1;\n    }\n    if ($a === null\
    \ || $b === null) {\n        return 0;\n    }\n    if ($a instanceof Traversable)\
    \ {\n        return iterator_count($a) > iterator_count($b);\n    }\n    if ($b\
    \ instanceof Traversable) {\n        return iterator_count($b) > iterator_count($a);\n\
    \    }\n    if (is_object($a)) {\n        if (!is_object($b)) {\n            return\
    \ 0;\n        }\n        $a = get_object_vars($a);\n        $b = get_object_vars($b);\n\
    \        ksort($a);\n        ksort($b);\n        foreach ($a as $k => $v) {\n\
    \            if ($v != $b[$k]) {\n                return $v > $b[$k] ? 1 : -1;\n\
    \            }\n        }\n    } else {\n        $a = serialize($a);\n       \
    \ $b = serialize($b);\n    }\n    return strcmp($a, $b) > 0 ? 1 : -1;\n}\n\n/**\n\
    \ * Returns true if two variables are equal (including types)\n * or are both\
    \ null.\n */", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a > $b) {\n         \
    \   return $a;\n        }\n        if ($b > $a) {\n            return $b;\n  \
    \      }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n  \
    \          if ($a == $b) {\n                return $a;\n            }\n      \
    \      if ($a > $b) {\n                return $a;\n            }\n           \
    \ if ($b > $a) {\n                return $b;\n            }\n        }\n    }\n\
    \    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            if ($a\
    \ == $b) {\n                return $a;\n            }\n            if ($a > $b)\
    \ {\n                return $a;\n            }\n            if ($b > $a) {\n \
    \               return $b;\n            }\n        }\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n\
    \    if ($b > $a) {\n        return $b;\n    }\n}", "    if ($a === $b) {\n  \
    \      return $a;\n    }\n    if (is_float($a) && is_float($b)) {\n        if\
    \ ($a == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n   \
    \         return -1;\n        }\n        return 1;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return 0;\n      \
    \  }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a) || is_float($a)) {\n        if ($a < $b) {\n\
    \            return -1;\n        }\n        return 1;\n    }\n    if (is_float($a)\
    \ || is_string($b)) {\n        if ($a < $b) {\n            return -1;\n      \
    \  }\n        return 1;\n    }\n    if (is_int($a) && is_int($b)) {\n        if\
    \ ($a == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n   \
    \         return -1;\n        }\n        return 1;\n    }\n    if (is_int($a)\
    \ || is_int($b)) {\n        if ($a < $b) {\n            return -1;\n        }\n\
    \        return 1;\n    }\n}\n", "    if ($a === $b) {\n        return 0;\n  \
    \  }\n    if (is_float($a) && is_float($b)) {\n        return max($a, $b) - min($a,\
    \ $b);\n    }\n    if (is_string($a) && is_string($b)) {\n        return strcmp($a,\
    \ $b) > 0;\n    }\n    if (is_int($a) && is_int($b)) {\n        return $a - $b;\n\
    \    }\n    return null;\n}", "    if ($a === $b) {\n        return $a;\n    }\n\
    \    if (is_float($a) && is_float($b)) {\n        if ($a == $b) {\n          \
    \  return $a;\n        }\n        if ($a < $b) {\n            return $a;\n   \
    \     }\n        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a <\
    \ $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n            return $a;\n\
    \        }\n        if ($a < $b) {\n            return $b;\n        }\n      \
    \  return $a;\n    }\n    if (is_bool($a) && is_bool($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a < $b) {\n         \
    \   return $b;\n        }\n        return $a;\n    }\n    if (is_null($a) && is_null($b))\
    \ {\n        return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n  \
    \      if ($a->equals($b)) {\n            return $a;\n        }\n        if ($a->isLessThan($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a == $b) {\n            return $a;\n      \
    \  }\n        if ($a < $b) {\n            return $b;\n        }\n        return\
    \ $a;\n    }\n    if (is_resource($a) && is_resource($b)) {\n        if ($a->equals($b))\
    \ {\n            return $a;\n        }\n        if ($a->isLessThan($b)) {\n  \
    \          return $a;\n        }\n        return $b;\n    }\n    if (is_object($a))\
    \ {\n        if ($a->equals($b)) {\n            return $a;\n        }\n      \
    \  if ($a->isLessThan($b)) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_object($b)) {\n        if ($a->equals($b)) {\n      \
    \      return $a;\n        }\n        if ($a->isLessThan($b)) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_array($a)) {\n       \
    \ if ($a == $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n        return $a;\n    }\n    if (is_array($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n        return $a;\n    }\n    if\
    \ (is_string($a)) {\n        if (", "  if ($a === $b) {\n    return $a;\n  }\n\
    \  if (is_numeric($a) && is_numeric($b)) {\n    if ($a > $b) {\n      return $a;\n\
    \    }\n    return $b;\n  }\n  if (is_numeric($a)) {\n    return $b;\n  }\n  if\
    \ (is_numeric($b)) {\n    return $a;\n  }\n  if ($a === $b) {\n    return $a;\n\
    \  }\n  return None;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n\
    \    if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n       \
    \     return 1;\n        } elseif ($a < $b) {\n            return -1;\n      \
    \  }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return 1;\n        } elseif (strlen($a) < strlen($b))\
    \ {\n            return -1;\n        }\n    }\n    if (is_string($a)) {\n    \
    \    if (strlen($a) > strlen($b)) {\n            return 1;\n        } elseif (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a > $b) {\n             \
    \   return 1;\n            } elseif ($a < $b) {\n                return -1;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            } elseif\
    \ ($a < $b) {\n                return -1;\n            }\n        }\n    }\n \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n        \
    \    return 1;\n        } elseif ($a < $b) {\n            return -1;\n       \
    \ }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return 1;\n        } elseif (strlen($a) < strlen($b))\
    \ {\n            return -1;\n        }\n    }\n    if (is_string($a)) {\n    \
    \    if (strlen($a) > strlen($b)) {\n            return 1;\n        } elseif (strlen($a)\
    \ < strlen($b)) {\n            return -1;\n        }\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a > $b) {\n             \
    \   return 1;\n            } elseif ($a < $b) {\n                return -1;\n\
    \            }\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            if ($a > $b) {\n                return 1;\n            } elseif\
    \ ($a < $b) {\n                return -1;\n            }\n        }\n    }\n \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a > $b) {\n        \
    \    return 1;\n        } elseif ($a < $b) {\n            return -1;\n       \
    \ }\n    }\n    if (is_string($a) && is_string($b)) {\n        if (strlen($a)\
    \ > strlen($b)) {\n            return 1;\n        } elseif (strlen($a) < strlen($b))\
    \ {\n            return ", "    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a === $b) {\n           \
    \     return $a;\n            }\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_numeric($b)) {\n        return $b;\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n\
    \    return $b;\n}", "    if ($a === $b) {\n        return $a;\n    }\n    if\
    \ (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n           \
    \ return $a;\n        }\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            return $b;\n        }\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n    }\n    if (is_string($a)) {\n        if (is_string($b)) {\n  \
    \          return strcmp($a, $b);\n        }\n    }\n    if (is_string($b)) {\n\
    \        if (is_string($a)) {\n            return strcmp($a, $b);\n        }\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        return strcmp(get_class($a),\
    \ get_class($b));\n    }\n    if (is_object($a)) {\n        if (is_object($b))\
    \ {\n            return strcmp(get_class($a), get_class($b));\n        }\n   \
    \ }\n    if (is_object($b)) {\n        if (is_object($a)) {\n            return\
    \ strcmp(get_class($a), get_class($b));\n        }\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if (count($a) != count($b)) {\n            return\
    \ count($a) > count($b);\n        }\n        foreach ($a as $k => $v) {\n    \
    \        if ($v != $b[$k]) {\n                return $v > $b[$k];\n          \
    \  }\n        }\n    }\n    return false;\n}\n", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        if ($b > $a) {\n       \
    \     return $b;\n        }\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n        if ($b > $a) {\n         \
    \   return $b;\n        }\n    }\n    if (is_string($a)) {\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        if ($b > $a) {\n            return\
    \ $b;\n        }\n    }\n    if (is_string($b)) {\n        if ($a > $b) {\n  \
    \          return $a;\n        }\n        if ($b > $a) {\n            return $b;\n\
    \        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n\
    \            if ($a == $b) {\n                return $a;\n            }\n    \
    \        if ($a > $b) {\n                return $a;\n            }\n         \
    \   if ($b > $a) {\n                return $b;\n            }\n        }\n   \
    \ }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            if\
    \ ($a == $b) {\n                return $a;\n            }\n            if ($a\
    \ > $b) {\n                return $a;\n            }\n            if ($b > $a)\
    \ {\n                return $b;\n            }\n        }\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        if\
    \ ($b > $a) {\n            return $b;\n        }\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a == $b) {\n            return $a;\n     \
    \   }\n        if ($a > $b) {\n            return $a;\n        }\n        if ($b\
    \ > $a) {\n            return $b;\n        }\n    }\n    if (is_string($a)) {\n\
    \        if ($a > $b) {\n            return $a;\n        }\n        if ($b > $a)\
    \ {\n            return $b;\n        }\n    }\n    if (is_string($b)) {\n    \
    \    if ($a > $b) {\n            return $a;\n        }\n        if ($b > $a) {\n\
    \            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if (is_numeric($b)) {\n            if ($a == $b) {\n                return $a;\n\
    \            }\n            if ($a > $b) {\n                return $a;\n     \
    \       }\n            if ($b > $a) {\n                return $b;\n          \
    \  }\n        }\n    }\n    if (is_numeric($b)) {\n", "    if ($a === $b) {\n\
    \        return $a;\n    }\n    if (is_float($a) && is_float($b)) {\n        if\
    \ ($a === $b) {\n            return 0;\n        }\n        if ($a < $b) {\n  \
    \          return -1;\n        }\n        return 1;\n    }\n    if (is_string($a)\
    \ && is_string($b)) {\n        if ($a === $b) {\n            return 0;\n     \
    \   }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a)) {\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_string($b)) {\n       \
    \ if ($a < $b) {\n            return 1;\n        }\n        return -1;\n    }\n\
    \    if (is_float($a)) {\n        if ($a < $b) {\n            return -1;\n   \
    \     }\n        return 1;\n    }\n    if (is_float($b)) {\n        if ($a < $b)\
    \ {\n            return 1;\n        }\n        return -1;\n    }\n    if (is_int($a))\
    \ {\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_int($b)) {\n        if ($a < $b) {\n            return\
    \ 1;\n        }\n        return -1;\n    }\n}", "    if ($a === $b) {\n      \
    \  return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n        if\
    \ ($a < $b) {\n            return $a;\n        }\n        return $b;\n    }\n\
    \    if (is_string($a) && is_string($b)) {\n        if (strcmp($a, $b) < 0) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_string($a))\
    \ {\n        return $b;\n    }\n    return $a;\n}", "    if (is_numeric($a) &&\
    \ is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n       \
    \ }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n            return $a;\n\
    \        }\n        if ($a > $b) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n   \
    \     if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return 0;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_string($a) && is_string($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n      \
    \  if ($a == $b) {\n            return 0;\n        }\n        if ($a < $b) {\n\
    \            return -1;\n        }\n        return 1;\n    }\n    if (is_bool($a)\
    \ && is_bool($b)) {\n        if ($a == $b) {\n            return 0;\n        }\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        return 1;\n\
    \    }\n    if (is_object($a) && is_object($b)) {\n        if ($a->equals($b))\
    \ {\n            return 0;\n        }\n        if ($a->isLessThan($b)) {\n   \
    \         return -1;\n        }\n        return 1;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        if ($a == $b) {\n            return 0;\n       \
    \ }\n        if ($a[0] < $b[0]) {\n            return -1;\n        }\n       \
    \ return 1;\n    }\n    if (is_resource($a) && is_resource($b)) {\n        if\
    \ ($a === $b) {\n            return 0;\n        }\n        if ($a < $b) {\n  \
    \          return -1;\n        }\n        return 1;\n    }\n    if (is_null($a)\
    \ && is_null($b)) {\n        return 0;\n    }\n    if ($a < $b) {\n        return\
    \ -1;\n    }\n    return 1;\n}", "    if ($a === $b) {\n        return 0;\n  \
    \  }\n    if (is_numeric($a) && is_numeric($b)) {\n        if ($a < $b) {\n  \
    \          return -1;\n        }\n        if ($a > $b) {\n            return 1;\n\
    \        }\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n\
    \            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_numeric($b)) {\n      \
    \  if (is_numeric($a)) {\n            return 0;\n        }\n        if ($a < $b)\
    \ {\n            return 1;\n        }\n        return -1;\n    }\n    if ($a ===\
    \ $b) {\n        return 0;\n    }\n    if (is_string($a) && is_string($b)) {\n\
    \        if (strlen($a) == strlen($b)) {\n            $a_length = strlen($a);\n\
    \            for ($i = 0; $i < $a_length; $i++) {\n                $a_char = substr($a,\
    \ $i, 1);\n                $b_char = substr($b, $i, 1);\n                if ($a_char\
    \ == $b_char) {\n                    continue;\n                }\n          \
    \      if ($a_char == '.' && $b_char == ',') {\n                    continue;\n\
    \                }\n                if ($a_char == ',' && $b_char == '.') {\n\
    \                    continue;\n                }\n                if ($a_char\
    \ == '.' && $b_char == '.') {\n                    continue;\n               \
    \ }\n                if ($a_char == ',' && $b_char == ',') {\n               \
    \     continue;\n                }\n                if ($a_char == '.') {\n  \
    \                  return -1;\n                }\n                if ($b_char\
    \ == '.') {\n                    return 1;\n                }\n              \
    \  if ($a_char == ',' || $b_char == ',') {\n                    return 0;\n  \
    \              }\n            }\n            return 0;\n        }\n    }\n   \
    \ if (is_string($a)) {\n        if (is_string($b)) {\n            return 0;\n\
    \        }\n        if (strlen($a) < strlen($b)) {\n            return -1;\n \
    \       }\n        return 1;\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            return 0;\n        }\n        if (strlen($a) < strlen($b)) {\n\
    \            return 1;\n        }\n        return -1;\n    }\n    if (is_array($a)\
    \ && is_array($b)) {\n        $a_length = count($a);\n        $b_length = count($b);\n\
    \        if ($a_length == $b_length) {\n            for ($i = 0; $i < $a_length;\
    \ $i++) {\n                $a_key = array_keys($a, $i);\n                $b_key\
    \ = array_keys($b, $i);\n                if ($a_key != $b_key) {\n           \
    \         continue;\n                }\n                $a_value = $a[$i];\n \
    \               $b_value = ", "    if (is_numeric($a) && is_numeric($b)) {\n \
    \       if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n \
    \   if ($a === $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n\
    \        if (is_numeric($b)) {\n            return $a;\n        }\n        if\
    \ ($a > $b) {\n            return $a;\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            return $b;\n        }\n      \
    \  if ($b > $a) {\n            return $b;\n        }\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n    if (is_string($a) && is_string($b)) {\n  \
    \      if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $b;\n        }\n    }\n    if (is_string($a)) {\n    \
    \    if (is_string($b)) {\n            return $a;\n        }\n        if ($a >\
    \ $b) {\n            return $a;\n        }\n    }\n    if (is_string($b)) {\n\
    \        if (is_string($a)) {\n            return $b;\n        }\n        if ($b\
    \ > $a) {\n            return $b;\n        }\n    }\n    if ($a === $b) {\n  \
    \      return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n        if\
    \ ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n   \
    \         return $b;\n        }\n    }\n    if (is_object($a)) {\n        if (is_object($b))\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n    }\n    if (is_object($b)) {\n        if (is_object($a))\
    \ {\n            return $b;\n        }\n        if ($b > $a) {\n            return\
    \ $b;\n        }\n    }\n    if ($a === $b) {\n        return $a;\n    }\n   \
    \ if (is_array($a) && is_array($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n            return\
    \ $a;\n        }\n        if ($a > $b) {\n            return $a;\n        }\n\
    \    }\n    if (is_array($b)) {\n        if (is_array($a)) {\n            return\
    \ $b;\n        }\n        if ($b > $a) {\n            return $b;\n        }\n\
    \    }\n    if ($a === $b) {\n        return $a;\n    }\n    if (is_resource($a)\
    \ && is_resource($b)) {\n        if ($", "    if (is_numeric($a) && is_numeric($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        return\
    \ $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n    return $b;\n\
    }\n", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) &&\
    \ is_float($b)) {\n        if ($a < $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($a) && is_string($b)) {\n      \
    \  if (strlen($a) < strlen($b)) {\n            return $a;\n        }\n       \
    \ return $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        if ($a < $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_bool($a)\
    \ && is_bool($b)) {\n        if ($a === $b) {\n            return $a;\n      \
    \  }\n        return $b;\n    }\n    if (is_null($a) && is_null($b)) {\n     \
    \   return $a;\n    }\n    if (is_object($a) && is_object($b)) {\n        if ($a\
    \ instanceof stdClass && $b instanceof stdClass) {\n            return compare_one($a->value,\
    \ $b->value);\n        }\n        if ($a instanceof \\stdClass) {\n          \
    \  return $b;\n        }\n        if ($b instanceof \\stdClass) {\n          \
    \  return $a;\n        }\n    }\n    if (is_array($a) && is_array($b)) {\n   \
    \     if (count($a) !== count($b)) {\n            return $a;\n        }\n    \
    \    foreach ($a as $k => $v) {\n            if ($k !== $b) {\n              \
    \  return $a;\n            }\n        }\n        return $b;\n    }\n    return\
    \ $a;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work if you\
    \ have two strings that should be sorted as numbers, but are not.\n<|/ c |>\n\
    <| c |>\nI added a fix for that case\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have two strings that should be sorted as numbers, but are not.\n<|/ c |>\n\
    <| c |>\nI added a fix for that case\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have two strings that should be sorted as numbers, but are not.\n<|/ c |>\n\
    <| a dscore=4 |>\nI came up with this solution:\n<code>", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_int($a) && is_int($b)) {\n        if ($a == $b) {\n            return $a;\n\
    \        }\n        if ($a > $b) {\n            return $a;\n        }\n      \
    \  return $b;\n    }\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n   \
    \     if ($a == $b) {\n            return $a;\n        }\n        if ($a > $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            if ($a == $b) {\n            \
    \    return $a;\n            }\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if (is_numeric($b)) {\n        return $b;\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n    return $b;\n}\n", "    if ($a === $b) {\n\
    \        return $a;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a > $b) {\n            return $a;\n        }\n        if ($a < $b) {\n\
    \            return $b;\n        }\n    }\n    if (is_numeric($a)) {\n       \
    \ if ($a > $b) {\n            return $a;\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if (strlen($a) > strlen($b)) {\n            return $a;\n        }\n\
    \        if (strlen($a) < strlen($b)) {\n            return $b;\n        }\n \
    \   }\n    if (is_string($a)) {\n        if (strlen($a) > strlen($b)) {\n    \
    \        return $a;\n        }\n    }\n    if (is_string($b)) {\n        if (strlen($a)\
    \ < strlen($b)) {\n            return $b;\n        }\n    }\n    if (is_object($a)\
    \ && is_object($b)) {\n        if ($a instanceof DateTime && $b instanceof DateTime)\
    \ {\n            return $a->format('Y-m-d H:i:s') > $b->format('Y-m-d H:i:s');\n\
    \        }\n        if ($a instanceof DateTime && $b instanceof DateTimeInterface)\
    \ {\n            return $a->format('Y-m-d H:i:s') > $b->format('Y-m-d H:i:s');\n\
    \        }\n        if ($a instanceof DateTimeInterface && $b instanceof DateTime)\
    \ {\n            return $a->format('Y-m-d H:i:s') > $b->format('Y-m-d H:i:s');\n\
    \        }\n        if ($a instanceof DateTimeInterface && $b instanceof DateTimeInterface)\
    \ {\n            return $a->format('Y-m-d H:i:s') > $b->format('Y-m-d H:i:s');\n\
    \        }\n    }\n    if (is_object($a)) {\n        if ($a instanceof DateTime\
    \ && $b instanceof DateTime) {\n            return $a->format('Y-m-d H:i:s') >\
    \ $b->format('Y-m-d H:i:s');\n        }\n        if ($a instanceof DateTime &&\
    \ $b instanceof DateTimeInterface) {\n            return $a->format('Y-m-d H:i:s')\
    \ > $b->format('Y-m-d H:i:s');\n        }\n        if ($a instanceof DateTimeInterface\
    \ && $b instanceof DateTime) {\n            return $a->format('Y-m-d H:i:s') >\
    \ $b->format('Y-m-d H:i:s');\n        }\n        if ($", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_string($a)) {\n      \
    \  if ($a > $b) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_string($b)) {\n        if ($a > $b) {\n            return $b;\n\
    \        }\n        return $a;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a > $b ? $a : $b;\n        }\n        return $b;\n  \
    \  }\n    if (is_numeric($b)) {\n        return $a;\n    }\n    return $a;\n}\n",
  "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n        \
    \    return $a;\n        }\n        if ($a > $b) {\n            return $a;\n \
    \       }\n        return $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b))\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b))\
    \ {\n        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n   \
    \ }\n    return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n    \
    \    if ($a == $b) {\n            return $a;\n        }\n        if ($a < $b)\
    \ {\n            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n    if ($a\
    \ < $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a == $b) {\n           \
    \ return $a;\n        }\n        if ($a > $b) {\n            return $a;\n    \
    \    }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if ($a ==\
    \ $b) {\n            return $a;\n        }\n        if ($a > $b) {\n         \
    \   return $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n \
    \       return $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n   \
    \ return $b;\n}\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a\
    \ == $b) {\n            return $a;\n        }\n        if ($a > $b) {\n      \
    \      return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if (is_numeric($b)) {\n            return $a;\n        }\n      \
    \  if ($b > $a) {\n            return $a;\n        }\n        return $b;\n   \
    \ }\n    if (is_numeric($b)) {\n        if (is_numeric($a)) {\n            return\
    \ $b;\n        }\n        if ($a > $b) {\n            return $b;\n        }\n\
    \        return $a;\n    }\n    if ($a === $b) {\n        return $a;\n    }\n\
    \    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}\n", "    if\
    \ ($a === $b) {\n        return $a;\n    }\n    if (is_float($a) && is_float($b))\
    \ {\n        return max($a, $b);\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        $a = str_replace(',', '.', $a); // convert , to .\n        $b = str_replace(',',\
    \ '.', $b); // convert , to .\n        $a = floatval($a);\n        $b = floatval($b);\n\
    \        if ($a == $b) {\n            return $a;\n        }\n        return $a\
    \ < $b ? $a : $b;\n    }\n    if (is_int($a) && is_int($b)) {\n        return\
    \ $a > $b ? $a : $b;\n    }\n    return $a < $b ? $a : $b;\n}", "    if ($a ===\
    \ $b) {\n        return 0;\n    }\n    if (is_numeric($a) && is_numeric($b)) {\n\
    \        if ($a < $b) {\n            return -1;\n        }\n        if ($a > $b)\
    \ {\n            return 1;\n        }\n    }\n    if (is_numeric($a)) {\n    \
    \    if (is_numeric($b)) {\n            return 0;\n        }\n        if ($a <\
    \ $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            return 0;\n        }\n       \
    \ if ($a < $b) {\n            return 1;\n        }\n        return -1;\n    }\n\
    \    if ($a < $b) {\n        return -1;\n    }\n    return 1;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a < $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a < $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n     \
    \   return $a;\n    }\n    if ($a < $b) {\n        return $a;\n    }\n    return\
    \ $b;\n}\n", "    if ($a === $b) {\n        return 0;\n    }\n    if (is_float($a)\
    \ && is_float($b)) {\n        if ($a == $b) {\n            return 0;\n       \
    \ }\n        if ($a < $b) {\n            return -1;\n        }\n        return\
    \ 1;\n    }\n    if (is_string($a) && is_string($b)) {\n        if ($a == $b)\
    \ {\n            return 0;\n        }\n        if ($a < $b) {\n            return\
    \ -1;\n        }\n        return 1;\n    }\n    if (is_int($a) && is_int($b))\
    \ {\n        if ($a == $b) {\n            return 0;\n        }\n        if ($a\
    \ < $b) {\n            return -1;\n        }\n        return 1;\n    }\n    if\
    \ (is_bool($a) && is_bool($b)) {\n        if ($a == $b) {\n            return\
    \ 0;\n        }\n        if ($a < $b) {\n            return -1;\n        }\n \
    \       return 1;\n    }\n    if (is_null($a) && is_null($b)) {\n        return\
    \ 0;\n    }\n    if (is_null($a) || is_null($b)) {\n        return 1;\n    }\n\
    \    if (is_object($a) && is_object($b)) {\n        if ($a->equals($b)) {\n  \
    \          return 0;\n        }\n        if ($a->isLessThan($b)) {\n         \
    \   return -1;\n        }\n        return 1;\n    }\n    if (is_object($a) ||\
    \ is_object($b)) {\n        return -1;\n    }\n    if (is_array($a) && is_array($b))\
    \ {\n        if (count($a) != count($b)) {\n            return -1;\n        }\n\
    \        foreach ($a as $k => $v) {\n            if ($v != $b[$k]) {\n       \
    \         return -1;\n            }\n        }\n        return 0;\n    }\n   \
    \ return 1;\n}", "    if ($a === $b) {\n        return $a;\n    }\n    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a > $b) {\n            return $a;\n     \
    \   }\n        if ($a < $b) {\n            return $b;\n        }\n    }\n    if\
    \ (is_numeric($a)) {\n        if (is_numeric($b)) {\n            if ($a > $b)\
    \ {\n                return $a;\n            }\n            if ($a < $b) {\n \
    \               return $b;\n            }\n        }\n    }\n    if (is_numeric($b))\
    \ {\n        if (is_numeric($a)) {\n            if ($a > $b) {\n             \
    \   return $a;\n            }\n            if ($a < $b) {\n                return\
    \ $b;\n            }\n        }\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        if ($a\
    \ < $b) {\n            return $b;\n        }\n    }\n    if (is_string($a)) {\n\
    \        if (is_string($b)) {\n            if ($a > $b) {\n                return\
    \ $a;\n            }\n            if ($a < $b) {\n                return $b;\n\
    \            }\n        }\n    }\n    if (is_string($b)) {\n        if (is_string($a))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_object($a) && is_object($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        if ($a < $b) {\n            return\
    \ $b;\n        }\n    }\n    if (is_object($a)) {\n        if (is_object($b))\
    \ {\n            if ($a > $b) {\n                return $a;\n            }\n \
    \           if ($a < $b) {\n                return $b;\n            }\n      \
    \  }\n    }\n    if (is_object($b)) {\n        if (is_object($a)) {\n        \
    \    if ($a > $b) {\n                return $a;\n            }\n            if\
    \ ($a < $b) {\n                return $b;\n            }\n        }\n    }\n \
    \   if (is_array($a) && is_array($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        if ($a < $b) {\n            return $b;\n        }\n\
    \    }\n    if (is_array($a)) {\n        if (is_array($b)) {\n            if ($a\
    \ > $b) {\n                return $a;\n            }\n            if ($a < $b)\
    \ {\n                return $b;\n            }\n        }\n    }\n    if (is_array($b))\
    \ {\n        if (is_array($a)) {\n            if ($a > $b) {\n               \
    \ return $a;\n            }\n            if ($a < $b) {\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if (is_numeric($b)) {\n     \
    \       return $a;\n        }\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n        if (is_numeric($a))\
    \ {\n            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    if ($a > $b) {\n        return $a;\n    }\n    return $b;\n\
    }\n", "    if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n\
    \            return $a;\n        }\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a)) {\n     \
    \   if (is_numeric($b)) {\n            return $a;\n        }\n        return $b;\n\
    \    }\n    if (is_numeric($b)) {\n        return $a;\n    }\n    if ($a === $b)\
    \ {\n        return $a;\n    }\n    return $b;\n}\n", "    if (is_numeric($a)\
    \ && is_numeric($b)) {\n        if ($a == $b) {\n            return $a;\n    \
    \    }\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($a)) {\n        if ($a != $b) {\n           \
    \ return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($b)) {\n\
    \        if ($a != $b) {\n            return $b;\n        }\n        return $a;\n\
    \    }\n    if ($a < $b) {\n        return $a;\n    }\n    return $b;\n}\n", " \
    \   if (is_numeric($a) && is_numeric($b)) {\n        if ($a == $b) {\n       \
    \     return $a;\n        }\n        if ($a > $b) {\n            return $a;\n\
    \        }\n        return $b;\n    }\n    if (is_string($a) && is_string($b))\
    \ {\n        if ($a == $b) {\n            return $a;\n        }\n        if ($a\
    \ > $b) {\n            return $a;\n        }\n        return $b;\n    }\n    if\
    \ (is_string($a)) {\n        if ($a > $b) {\n            return $a;\n        }\n\
    \        return $b;\n    }\n    if (is_string($b)) {\n        if ($a > $b) {\n\
    \            return $a;\n        }\n        return $b;\n    }\n    if (is_numeric($a))\
    \ {\n        if ($a > $b) {\n            return $a;\n        }\n        return\
    \ $b;\n    }\n    if (is_numeric($b)) {\n        if ($a > $b) {\n            return\
    \ $a;\n        }\n        return $b;\n    }\n    if ($a === $b) {\n        return\
    \ $a;\n    }\n    return $b;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
