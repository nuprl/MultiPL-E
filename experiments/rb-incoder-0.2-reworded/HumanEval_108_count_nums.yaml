name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n\
  # 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum + num if num > 0\n  end\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.inject(0) do |sum, el|\n\
    \    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, el|\n   \
    \ sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n \
    \   el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, num|\n   \
    \ sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num = -num\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(0) do |sum, digit|\n\
    \      sum += digit * sign\n    end\n    if sum > 0\n      puts sum\n    end\n\
    \  end\nend\ncount_nums(arr)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ seem to work. `count_nums([-1, 11, -11])` returns `1` instead of `3`.\n<|/ c\
    \ |>\n<| c |>\nI missed that case. Thanks for pointing it out. I've updated my\
    \ answer.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.inject(0) do |sum,\
    \ num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += 1 if n % 10 == 0\n\
    \  end\n  arr.size\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num\
    \ > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    if\
    \ num > 0\n      sum += num\n    elsif num < 0\n      sum += num.abs\n    end\n\
    \  end\n  sum\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum +\
    \ el\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
