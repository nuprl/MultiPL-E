name: HumanEval_108_count_nums
language: rb
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n\
  # 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_nums\n\
  \    candidate = method(:count_nums)\n    assert_equal(0, candidate.call([]))\n\
  \    assert_equal(0, candidate.call([-1, -2, 0]))\n    assert_equal(6, candidate.call([1,\
  \ 1, 2, -2, 3, 4, 5]))\n    assert_equal(5, candidate.call([1, 6, 9, -6, 0, 1, 5]))\n\
  \    assert_equal(4, candidate.call([1, 100, 98, -7, 1, -1]))\n    assert_equal(5,\
  \ candidate.call([12, 23, 34, -45, -56, 0]))\n    assert_equal(1, candidate.call([0,\
  \ 1]))\n    assert_equal(1, candidate.call([1]))\n  end\nend\n"
completions: ["  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum + num if num > 0\n  end\nend", "  arr.each\
    \ do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    return num if num < 0\n  end\n  0\nend", "  arr.inject(0) do |sum, el|\n\
    \    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, el|\n   \
    \ sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n \
    \   el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do |sum, num|\n   \
    \ sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |num|\n    if num\
    \ < 0\n      num = -num\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.reduce(0) do |sum, digit|\n\
    \      sum += digit * sign\n    end\n    if sum > 0\n      puts sum\n    end\n\
    \  end\nend\ncount_nums(arr)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ seem to work. `count_nums([-1, 11, -11])` returns `1` instead of `3`.\n<|/ c\
    \ |>\n<| c |>\nI missed that case. Thanks for pointing it out. I've updated my\
    \ answer.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  arr.inject(0) do |sum,\
    \ num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.each do |n|\n\
    \    if n < 0\n      n += 10\n      n -= 1\n    end\n    n += 1 if n % 10 == 0\n\
    \  end\n  arr.size\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num\
    \ > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    if\
    \ num > 0\n      sum += num\n    elsif num < 0\n      sum += num.abs\n    end\n\
    \  end\n  sum\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum +\
    \ el\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n  \
    \  sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum + el\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el : sum + el\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0)\
    \ do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum + num if num > 0\n  end\nend", "  arr.inject(0) do |sum,\
    \ num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum,\
    \ el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum,\
    \ el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) { |sum, el|\
    \ sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el\
    \ : sum + el\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0)\
    \ do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend", "  arr.each do |n|\n    n.to_s.split('').inject(0)\
    \ do |sum, digit|\n      sum + digit if digit > 0 \n    end\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do\
    \ |n|\n    if n.is_a?(Integer)\n      n -= n.abs\n    end\n    break if n == 0\n\
    \  end\n  arr.count\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    next if num < 0\n    digits\
    \ = num.to_s.chars.map(&:to_i)\n    digits.reduce(0) { |sum, digit| sum + digit\
    \ }\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum + num if num > 0\n \
    \ end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0)\
    \ do |sum, el|\n    el < 0 ? -el : sum + el\n  end\nend", "  arr.inject(0) do\
    \ |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.each do\
    \ |num|\n    num = num.to_i\n    if num < 0\n      num = num.abs\n      num -=\
    \ num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.inject(0) do |sum,\
    \ el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do |num|\n    num\
    \ = num.to_i\n    return num if num > 0\n    num = num.abs\n    return num if\
    \ num < 0\n  end\n  0\nend", "  arr.each do |num|\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.reduce(0) do |sum, digit|\n      sum + digit if digit > 0\n    end\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    if num < 0\n      num = -num\n\
    \      sign = -1\n    else\n      sign = 1\n    end\n    sum = 0\n    while num\
    \ > 0\n      sum += num % 10\n      num /= 10\n    end\n    if sum > 0\n     \
    \ puts \"#{sign * sum}\"\n    end\n  end\nend", "  arr.inject(0) { |sum, el| sum\
    \ + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el >\
    \ 0\n    sum\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num *=\
    \ -1\n      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \    digits > 0 ? digits * sign : digits\n  end\nend\n</cell>\n<cell>\ncount_nums.call(arr)\n\
    </cell>\n<text>\nNow that we've written a function, let's test it against some\
    \ test cases:", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n  \
    \  sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el\
    \ : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    return num\
    \ if num > 0\n    num = num.abs\n    return num if num < 10\n    num = num.to_s.split('')\n\
    \    num = num.select { |x| x.to_i > 0 }\n    return num.count\n  end\nend", " \
    \ arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ { |sum, el| sum + el if el > 0 }\nend", "  arr.each do |num|\n    if num < 0\n\
    \      num *= -1\n      num += 9\n    end\n    sum += num\n  end\n  sum\nend",
  "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n    else\n\
    \      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |digit|\n      sum += digit*sign\n    end\n  end\n  sum\nend", "  arr.each\
    \ do |num|\n    if num < 0\n      num *= -1\n      digit = num.abs\n      digit\
    \ = digit.abs\n      digit = digit % 10\n      digit = digit > 0 ? digit : -digit\n\
    \      num -= digit\n    end\n    sum += num\n  end\n  sum\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do\
    \ |num|\n    if num < 0\n      num = -num\n    end\n    sum += num.to_s.chars.map(&:to_i).reduce(:+)\n\
    \  end\n  sum\nend", "  arr.each do |n|\n    n += 1 if n.to_s.split('').select\
    \ { |c| c =~ /\\d/ }.count > 1\n  end\nend", "  arr.inject(0) { |sum, el| sum\
    \ + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el >\
    \ 0\n    sum\n  end\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).reduce(:+)\
    \ > 0 \n      puts x\n    end\n  end\nend", "  arr.inject(0) { |sum, el| sum +\
    \ el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n\
    \    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum + num if num >\
    \ 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n   \
    \ sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n\
    \  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.each do |n|\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+) >\
    \ 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el if el > 0\n  end\n\
    end", "  arr.each do |n|\n    n.to_s.split('').select { |s| s > 0 }.size\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", " \
    \ arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.each\
    \ do |n|\n    if n.to_s.chars.map(&:to_i).sum > 0\n      puts n.to_s.chars.map(&:to_i).sum\n\
    \    end\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num >\
    \ 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if\
    \ num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum +=\
    \ num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum\
    \ += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum\
    \ + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum\
    \ + el : sum\n  end\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts x.to_s.chars.map(&:to_i).sum\n    end\n  end\nend", "  arr.inject(0)\
    \ do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, num|\n    sum += num\
    \ if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum +=\
    \ el if el > 0\n    sum\n  end\nend", "  arr.each do |n|\n    if n < 0\n     \
    \ n += 10\n      n -= 1\n    end\n    n += n % 10\n  end\n  arr.count\nend", " \
    \ arr.each do |n|\n    if n.is_a? Integer\n      n += n.abs\n    end\n  end\n\
    \  arr.count{ |n| n > 0 }\nend", "  arr.each do |num|\n    num = num.to_i\n  \
    \  num = num.abs\n    num = num.to_s.split('').map(&:to_i)\n    num = num.select\
    \ { |i| i > 0 }\n    num = num.count\n  end\nend\n</code>\n<|/ a tags=ruby |>\n\
    <| c |>\nI appreciate your efforts, but I already solved it myself. I posted my\
    \ solution below. Thanks for your effort!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    sum += el\
    \ if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ?\
    \ sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum\
    \ + el : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum += num if num\
    \ > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    el < 0 ? -el :\
    \ sum + el\n  end\nend", "  arr.each do |num|\n    num = num.to_i\n    if num\
    \ < 0\n      num = -num\n      sign = -1\n    else\n      sign = 1\n    end\n\
    \    digits = num.to_s.chars.map(&:to_i)\n    digits.each do |digit|\n      sum\
    \ += digit\n    end\n  end\n  sum\nend", "  arr.each do |num|\n    num = num.to_i\n\
    \    return num if num > 0\n    num = num.abs\n    return num if num < 0\n   \
    \ num = num.to_s.chars.map(&:to_i).reduce(:+)\n    return num if num > 0\n  end\n\
    \  0\nend", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n\
    \  end\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\n\
    end", "  arr.each do |num|\n    if num < 0\n      num *= -1\n      sign = -1\n\
    \    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      sum += digit\n    end\n  end\n  sum\nend\n\
    </cell>\n<cell>\ncount_nums.call(arr)\n</cell>\n<cell>", "  arr.each do |x|\n\
    \    x.to_s.split('').select { |y| y == '-' }.size\n  end\nend", "  arr.each do\
    \ |n|\n    n += 1 if n.to_s.chars.map(&:to_i).reduce(:+) > 0\n  end\nend", " \
    \ arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.each do |num|\n\
    \    num = num.to_i\n    return num if num > 0\n    num = num.abs\n    return\
    \ num if num < 0\n    num = num.to_s.split('')\n    num = num.select { |x| x.to_i\
    \ > 0}.size\n    return num\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum\
    \ + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum + el if\
    \ el > 0\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum + 1 if num > 0\n\
    \  end\nend", "  arr.each do |num|\n    num = num.to_i\n    return num if num\
    \ > 0\n    num = num.abs\n    return num if num < 0\n    num = num.abs\n    num\
    \ = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n   \
    \ num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n    num = num.to_i\n\
    \    num = num.to_i\n    num = num.to_i\n    num = num.to_i", "  arr.each do |n|\n\
    \    next if n < 0\n    digits = n.to_s.split('')\n    digits.each do |d|\n  \
    \    next if d == '-'\n      break if d == '0'\n      break if d == '1'\n    \
    \  break if d == '2'\n      break if d == '3'\n      break if d == '4'\n     \
    \ break if d == '5'\n      break if d == '6'\n      break if d == '7'\n      break\
    \ if d == '8'\n      break if d == '9'\n      break if d == '-'\n      break if\
    \ d == '-'\n      break if d == '-'\n      break if d == '-'\n      break if d\
    \ == '-'\n      break if d == '-'\n      break if d == '-'\n      break if d ==\
    \ '-'\n      break if d == '-'\n      break if d == '-'\n      break if d == '-'\n\
    \      break if d == '-'\n      break if d == '-'\n      break if d == '-'\n \
    \     break if d == '-'\n      break if d == '-'\n      break if d == '-'\n  \
    \    break if d == '-'\n      break if d == '-'\n      break if d == '-'\n   \
    \   break if d == '-'\n      break if d == '-'\n      break if d == '-'\n    \
    \  break if d == '-'\n      break if d == '-'\n      break if d == '-'\n     \
    \ break if d == '-'\n      break if d == '-'\n      break if d == '-'\n      break\
    \ if d == '-'\n      break if d == '-'\n      break if d == '-'\n      break if\
    \ d == '-'\n      break if d == '-'\n      break if d == '-'\n      break if d\
    \ == '-'\n      break if d == '-'\n      break if d == '-'\n      break if d ==\
    \ '-'\n      break if d == '-'\n      break if d == '-'\n      break if d == '-'\n\
    \      break if d == '-'\n      break if d == '-'\n      break if d == '-'\n \
    \     break if d == '-'\n      break if d == '-'\n      break if d == '-'\n  \
    \    break if d == '-'\n      break if d == '-'\n      break if d == '-'\n   \
    \   break if d == '-'\n      break if d == '-'\n      break if d == '-'\n    \
    \  break if d == '-'\n      break if d == '-'\n      break if d == '-'\n      ",
  "  arr.each do |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n\
    \    num = num.to_i\n    num = num % 10\n    num = num.to_i\n  end\n  0\nend",
  "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do\
    \ |n|\n    next if n.zero?\n    digits = n.to_s.chars.map(&:to_i)\n    digits.each\
    \ do |d|\n      next if d < 0\n      break if d > 9\n      break if d > digits[digits.length-1]\n\
    \      break if d < digits[digits.length-1]\n      break if d > digits[digits.length-2]\n\
    \      break if d < digits[digits.length-2]\n      break if d > digits[digits.length-3]\n\
    \      break if d < digits[digits.length-3]\n      break if d > digits[digits.length-4]\n\
    \      break if d < digits[digits.length-4]\n      break if d > digits[digits.length-5]\n\
    \      break if d < digits[digits.length-5]\n      break if d > digits[digits.length-6]\n\
    \      break if d < digits[digits.length-6]\n      break if d > digits[digits.length-7]\n\
    \      break if d < digits[digits.length-7]\n      break if d > digits[digits.length-8]\n\
    \      break if d < digits[digits.length-8]\n      break if d > digits[digits.length-9]\n\
    \      break if d < digits[digits.length-9]\n      break if d > digits[digits.length-10]\n\
    \      break if d < digits[digits.length-10]\n      break if d > digits[digits.length-11]\n\
    \      break if d < digits[digits.length-11]\n      break if d > digits[digits.length-12]\n\
    \      break if d < digits[digits.length-12]\n      break if d > digits[digits.length-13]\n\
    \      break if d < digits[digits.length-13]\n      break if d > digits[digits.length-14]\n\
    \      break if d < digits[digits.length-14]\n      break if d > digits[digits.length-15]\n\
    \      break if d < digits[digits.length-15]\n      break if d > digits[digits.length-16]\n\
    \      break if d < digits[digits.length-16]\n      break if d > digits[digits.length-17]\n\
    \      break if d < digits[digits.length-17]\n      break if d > digits[digits.length-18]\n\
    \      break if d < digits[digits.length-18]\n      break if d > digits[digits.length-19]\n\
    \      break if d < digits[digits.length-19]\n      break if d > digits[digits.length-20]",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) { |sum, el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum,\
    \ el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum,\
    \ el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do |x|\n    if x.to_s.chars.map(&:to_i).sum\
    \ > 0\n      puts \"#{x} has #{x.to_s.chars.map(&:to_i).sum} digits\"\n    end\n\
    \  end\nend\ncount_nums(arr)\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `arr = [-1, 11, -11]`.\n<|/ c |>\n<| c |>\nIt does work. Try\
    \ it with `arr = [-1, 11, -11]`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `arr = [-1, 11, -11]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `arr =\
    \ [-1, 11, -11]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `arr = [-1, 11,\
    \ -11]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  arr.inject(0) do |sum, el|\n\
    \    sum + el if el > 0\n  end\nend", "  arr.inject(0) do |sum, num|\n    sum\
    \ += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el| sum +\
    \ el if el > 0 }\nend", "  arr.each do |num|\n    num = num.to_i\n    return num\
    \ if num > 0\n    num = num.abs\n    return num if num < 0\n  end\n  0\nend",
  "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.each do |num|\n  \
    \  num = num.to_i\n    return num if num > 0\n    num = num.abs\n    return num\
    \ if num < 0\n    num = num.abs\n    num = num.to_i\n    return num if num > 0\n\
    \  end\n  0\nend", "  arr.each do |num|\n    num = num.to_i\n    num = num if\
    \ num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x| x\
    \ > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num if num > 0\n    num = num if num < 10\n    num = num.to_s.split('').count{|x|\
    \ x > 0}\n    num = num", "  arr.inject(0) { |sum, el| sum + el if el > 0 }\n\
    end", "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\n\
    end", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum + el : sum\n  end\nend",
  "  arr.inject(0) do |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend",
  "  arr.inject(0) do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", " \
    \ arr.inject(0) { |sum, num| sum + num if num > 0 }\nend", "  arr.inject(0) do\
    \ |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do\
    \ |sum, num|\n    sum += num if num > 0\n    sum\n  end\nend", "  arr.each do\
    \ |n|\n    n.to_s.split('').select { |s| s.to_i >= 0 }.size\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum + el if el > 0\n  end\nend", "  arr.inject(0) { |sum,\
    \ el| sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, num|\n    sum += num\
    \ if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n    sum +=\
    \ el if el > 0\n    sum\n  end\nend", "  arr.each do |n|\n    if n.is_a?(Integer)\n\
    \      n -= n.abs\n    end\n    break if n < 0\n    n += n.abs\n  end\n  arr.count\n\
    end", "  arr.each do |num|\n    num = num.to_i\n    if num < 0\n      num = num.abs\n\
    \      num -= num % 10\n    end\n    sum += num\n  end\n  sum\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend", "  arr.each do\
    \ |num|\n    num = num.to_i\n    return num if num > 0\n    num = num.abs\n  \
    \  return num if num < 0\n  end\n  0\nend", "  arr.inject(0) do |sum, el|\n  \
    \  sum += el if el > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, el|\n\
    \    el > 0 ? sum + el : sum\n  end\nend", "  arr.inject(0) do |sum, num|\n  \
    \  sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) do |sum, num|\n\
    \    sum += num if num > 0\n    sum\n  end\nend", "  arr.inject(0) { |sum, el|\
    \ sum + el if el > 0 }\nend", "  arr.inject(0) do |sum, el|\n    el > 0 ? sum\
    \ + el : sum\n  end\nend", "  arr.each do |num|\n    if num < 0\n      num = -num\n\
    \      sign = -1\n    else\n      sign = 1\n    end\n    digits = num.to_s.chars.map(&:to_i)\n\
    \    digits.each do |digit|\n      digit = digit.to_s + sign\n      sum += digit\n\
    \    end\n  end\n  sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer! I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  arr.inject(0)\
    \ do |sum, el|\n    sum += el if el > 0\n    sum\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
