name: HumanEval_152_compare
language: rb
prompt: "# I think we all remember that feeling when the result of some long-awaited\n\
  # event is finally known. The feelings and thoughts you have at that moment are\n\
  # definitely worth noting down and comparing.\n# Your task is to determine if a\
  \ person correctly guessed the results of a number of matches.\n# You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n# Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n# the value is 0, and if not, the value is the absolute\
  \ difference between the guess and the score.\n# example:\n# >>> compare.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0,\
  \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game,\
  \ guess)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare\n\
  \    candidate = method(:compare)\n    assert_equal([0, 0, 0, 0, 3, 3], candidate.call([1,\
  \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))\n    assert_equal([0, 0, 0, 0, 0, 0], candidate.call([0,\
  \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]))\n    assert_equal([2, 4, 6], candidate.call([1,\
  \ 2, 3], [-1, -2, -3]))\n    assert_equal([2, 0, 0, 1], candidate.call([1, 2, 3,\
  \ 5], [-1, 2, 3, 4]))\n  end\nend\n"
completions: ["  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] > 0\n      guesses[i] = guesses[i]\n\
    \    else\n      guesses[i] = -guesses[i]\n    end\n  end\n  guesses\nend", " \
    \ game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  games.each do |i|\n    games[i] = game[i]\n\
    \  end\n  guesses.each do |i|\n    guesses[i] = guess[i]\n  end\n  guesses.each\
    \ do |i|\n    games.each do |j|\n      games[j] -= guess[i]\n    end\n  end\n\
    \  games.each do |i|\n    games[i] < 0 ? games[i] = 0 : games[i]\n  end\n  games.each\
    \ do |i|\n    games[i] < 0 ? games[i] = 0 : games[i]\n  end\n  games\nend", " \
    \ game = game.sort\n  guess = guess.sort\n  result = []\n  for i in 0...guess.length\n\
    \    if game[i] == guess[i]\n      result.push(0)\n    else\n      result.push(abs(game[i]\
    \ - guess[i]))\n    end\n  end\n  result\nend", "  game = game.dup\n  guess =\
    \ guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  \n  game.length.times\
    \ do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  \n  guesses.max\nend",
  "  guesses = guess.dup\n  scores = game.dup\n  guesses.each_with_index do |guess,\
    \ i|\n    scores[i] = 0 if guesses[i] == guess || guesses[i] == -guess || guesses[i]\
    \ == guesses[i+1]\n    scores[i] = scores[i] ? scores[i] : abs(guess - scores[i+1])\n\
    \  end\n  scores\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution,\
    \ but I believe it can be simplified even more. I'll post my solution shortly.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I believe it can be simplified even\
    \ more. I'll post my solution shortly.\n<|/ c |>\n<| a |>\nI believe this can\
    \ be simplified even more. I'll post my solution shortly.\n<code>", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.sort!\n\
    \  guesses.reverse!\n  guesses.each do |i|\n    if guesses[i] == 0\n      guesses[i]\
    \ = 0\n    elsif guesses[i] != game[i]\n      guesses[i] = abs(guesses[i] - game[i])\n\
    \    end\n  end\n  guesses\nend", "  game.length == guess.length\n  game.length.times\
    \ do |i|\n    game[i] != guess[i] ? game[i] += guess[i] - game[i] : game[i] =\
    \ 0\n  end\n  game\nend", "  game = game.to_a\n  guess = guess.to_a\n  guesses\
    \ = guess.size\n  scores = (game.size - guesses)\n  result = []\n  for i in 0...guesses\n\
    \    if game[i] == guess[i]\n      result[i] = 0\n    else\n      result[i] =\
    \ abs(game[i] - guess[i])\n    end\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = []\n  scores = []\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  guesses.sort!\n  scores.sort!\n  i = 0\n  while i < guess.length\n\
    \    if guesses[i] == scores[i]\n      guesses.delete_at(i)\n      scores.delete_at(i)\n\
    \      i += 1\n    else\n      i += 1\n    end\n  end\n  guesses.sort!\n  scores.sort!\n\
    \  i = 0\n  while i < guess.length\n    if guesses[i] != scores[i]\n      guesses.delete_at(i)\n\
    \      scores.delete_at(i)\n      i += 1\n    else\n      i += 1\n    end\n  end\n\
    \  guesses.sort!\n  scores.sort!\n  i = 0\n  while i < guess.length\n    if guesses[i]\
    \ != scores[i]\n      guesses.delete_at(i)\n      scores.delete_at(i)\n      i\
    \ += 1\n    else\n      i += 1\n    end\n  end\n  guesses.sort!\n  scores.sort!\n\
    \  i = 0\n  while i < guess.length\n    if guesses[i] != scores[i]\n      guesses.delete_at(i)\n\
    \      scores.delete_at(i)\n      i += 1\n    else\n      i += 1\n    end\n  end\n\
    \  guesses.sort!\n  scores.sort!\n  i = 0\n  while i < guess.length\n    if guesses[i]\
    \ != scores[i]\n      guesses.delete_at(i)\n      scores.delete_at(i)\n      i\
    \ += 1\n    else\n      i += 1\n    end\n  end\n  guesses.sort!\n  scores.sort!\n\
    \  i = 0\n  while i < guess.length\n    if guesses[i] != scores[i]\n      guesses.delete_at(i)\n\
    \      scores.delete_at(i)\n      i += 1\n    else\n      i += 1\n    end\n  end\n\
    \  guesses.sort!\n  scores.sort!\n  i = 0\n  while i < guess.length\n    if guesses[i]\
    \ != scores[i]\n      guesses.delete_at(i)\n      scores.delete_at(i)\n      i\
    \ += 1\n    else\n      i += 1\n    end\n  end\n  guesses.sort!\n  scores.sort!\n\
    \  i = 0\n  while i < guess.length\n    if guesses[i] != scores[i]\n      guesses.delete_at(i)\n\
    \      scores.delete_at(i)\n      i += 1\n    else\n      i += 1\n", "  game =\
    \ game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length and guess[j] == game[j]\n      j += 1\n\
    \    if j == guess.length\n      result[i] = 0\n      i += 1\n      continue\n\
    \    diff = guess[j] - game[j]\n    if diff < 0\n      result[i] = -diff\n   \
    \   i += 1\n    else\n      result[i] = diff\n      i += 1\n  end\n  result\n\
    end", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.length\
    \ == guess.length\n  game.length.times do |i|\n    guess = guess[i]\n    guess\
    \ = guess.to_i\n    if game[i] == guess\n      result[i] = 0\n    else\n     \
    \ result[i] = abs(game[i] - guess)\n    end\n  end\n  result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  score\
    \ = 0\n  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n    score\
    \ += game[i] if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i] = game[i]\
    \ if guess[i]\n    score -= guess[i] if guess[i]\n  end\n  guesses.each do |i|\n\
    \    guesses[i] = game[i] if guess[i]\n    score += guess[i] if guess[i]\n  end\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n    score -= guess[i]\
    \ if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n\
    \    score += guess[i] if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = game[i] if guess[i]\n    score -= guess[i] if guess[i]\n  end\n  guesses.each\
    \ do |i|\n    guesses[i] = game[i] if guess[i]\n    score += guess[i] if guess[i]\n\
    \  end\n  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n    score\
    \ -= guess[i] if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i] = game[i]\
    \ if guess[i]\n    score += guess[i] if guess[i]\n  end\n  guesses.each do |i|\n\
    \    guesses[i] = game[i] if guess[i]\n    score -= guess[i] if guess[i]\n  end\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n    score += guess[i]\
    \ if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n\
    \    score -= guess[i] if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = game[i] if guess[i]\n    score += guess[i] if guess[i]\n  end\n  guesses.each\
    \ do |i|\n    guesses[i] = game[i] if guess[i]\n    score -= guess[i] if guess[i]\n\
    \  end\n  guesses.each do |i|\n    guesses[i] = game[i] if guess[i]\n    score\
    \ += guess[i] if guess[i]\n  end\n  guesses.each do |i|\n    guesses[i] = game[i]\
    \ if guess[i]\n    score -= guess[i] if guess[i]\n  end\n  guesses.each ", " \
    \ game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i <\
    \ guess.length\n    if game[i] == guess[i]\n      i += 1\n    else\n      result[i]\
    \ = abs(game[i] - guess[i])\n      i += 1\n    end\n  end\n  result\nend", " \
    \ game = game.sort\n  guess = guess.sort\n  game.length == guess.length\n  guess\
    \ = guess.each_with_index.map { |g,i| g - game[i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| g > 0 ? g : -g}\n  guess = guess.each_with_index.map { |g,i| g < 0 ?\
    \ -g : g}\n  guess.inject(0) { |sum,g| sum + g }\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer! I understand how it works, but I still\
    \ don't understand why my code doesn't work. Could you explain why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n\
    <| c |>\nThanks for your explanation! I understand now why my code doesn't work,\
    \ but I still don't understand why my code doesn't work. Could you explain why\
    \ my code doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n\
    <|/ c |>\n<| c |>\nThanks for your explanation! I understand now why my code doesn't\
    \ work, but I still don't understand why my code doesn't work. Could you explain\
    \ why my code doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \    else\n      result.push(abs(guess - game))\n    i += 1\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  guesses.zip(games).each do |g, g|\n    games[g]\
    \ = game[g]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = guess[g]\n\
    \  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = guesses[g] - games[g]\n\
    \  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = 0 if guesses[g]\
    \ < 0\n    guesses[g] = guesses[g].abs if guesses[g] > 0\n  end\n  guesses\nend\n\
    </cell>\n<cell>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.zip(game).each do |score, guess|\n    guesses[guess]\
    \ += 1\n  end\n  guesses.zip(guess).map { |score, guess| score - guess }\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ score = 0\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n    score\
    \ += guesses[i]\n  end\n  guesses.each do |i|\n    guesses[i] = guesses[i] > 0\
    \ ? guesses[i] : -guesses[i]\n  end\n  guesses\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    diff = guess[i]\
    \ - game[i]\n    if diff == 0\n      result.push(0)\n    else\n      result.push(abs(diff))\n\
    \    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.5>", "  game.length\
    \ == guess.length\n  game.each_with_index do |score, index|\n    guess[index]\
    \ == score ? 0 : (guess[index] - score)\n  end\nend\n</code>\n<|/ a |>\n<| a tags=ruby\
    \ |>\n<code>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.zip(game).each do |score, guess|\n    guesses[guess]\
    \ += 1\n  end\n  guesses.zip(guess).each do |guess, score|\n    guesses[guess]\
    \ += 1 if guess == score\n  end\n  guesses.zip(guess).map { |guess, score| score\
    \ - guess }\nend\n</cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game\
    \ = game[i]\n    if guess == game\n      result.push(0)\n    else\n      result.push(abs(guess\
    \ - game))\n    i += 1\n  end\n  return result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  game.length, guess.length, guess.length.times\
    \ do |i|\n    result.push(game[i] - guess[i])\n  end\n  result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      result[i] = 0\n      i += 1\n    else\n   \
    \   result[i] = game[i] - guess[i]\n      i += 1\n  end\n  result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  game.each_with_index do\
    \ |score, index|\n    guess = guess[index]\n    next if guess == 0\n    next if\
    \ guess < 0\n    next if guess > score\n    result.push(abs(guess - score))\n\
    \  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n    if\
    \ diff < 0\n      diff *= -1\n      i += 1\n    result << diff\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_with_index do |g, i|\n    guesses[i] = abs(g) if guesses[i]\
    \ == 0\n  end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  game.length.times do |i|\n    guess.length.times do |j|\n      guess[j]\
    \ == game[i] ? result.push(0) : result.push(abs(guess[j] - game[i]))\n    end\n\
    \  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n  result =\
    \ []\n  for i in 0...guess.length\n    diff = guess[i] - game[i]\n    if diff\
    \ < 0\n      diff *= -1\n    result[i] = diff\n  end\n  result\nend", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length && guess[j] == game[i]\n      j += 1\n\
    \    guess = guess[0...j]\n    score = game[i]\n    if guess.length == 0\n   \
    \   result.push(score)\n      break\n    diff = guess - score\n    if diff < 0\n\
    \      result.push(diff)\n      break\n    result.push(diff)\n    i += 1\n  end\n\
    \  result\nend\n</cell>\n<code language=julia-0.5>", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length && guess[j] == game[j]\n      j += 1\n    if j ==\
    \ guess.length\n      result[i] = 0\n      i += 1\n      continue\n    result[i]\
    \ = abs(guess[j] - game[j])\n    i += 1\n  end\n  result\nend", "    game = game.sort\n\
    \    guess = guess.sort\n    game.length, guess.length\n    differences = []\n\
    \    i = 0\n    while i < game.length\n        difference = guess[i] - game[i]\n\
    \        if difference < 0\n            difference = difference * -1\n       \
    \ differences.push(difference)\n        i += 1\n    differences.sort\n    return\
    \ differences\nend\n</cell>\n<code language=julia-0.5>", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_with_index\
    \ do |diff, i|\n    if guesses[i] == 0\n      guesses[i] = diff\n    end\n  end\n\
    \  guesses\nend", "    game = game.sort\n    guess = guess.sort\n    i = 0\n \
    \   guesses = []\n    while i < guess.length\n        guesses.push(guess[i])\n\
    \        i += 1\n    i = 0\n    scores = []\n    while i < game.length\n     \
    \   scores.push(game[i])\n        i += 1\n    i = 0\n    score = 0\n    guesses.each\
    \ do |guess|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += game[i]\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += guess\n        i += 1\n    end\n    scores.each\
    \ do |score|\n        score += ", "  game.length == guess.length\n  game.length.times\
    \ do |i|\n    game[i] != guess[i] ? game[i] += guess[i] - game[i] : game[i] =\
    \ 0\n  end\n  game\nend", "  game = game.to_a\n  guess = guess.to_a\n  result\
    \ = []\n  game.each_with_index do |score, index|\n    guess[index] ? result[index]\
    \ = 0 : result[index] = score - guess[index]\n  end\n  result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length and guess[j] == game[j]\n      j += 1\n\
    \    if j == guess.length\n      result << 0\n    else\n      result << (guess[j]\
    \ - game[j])\n    end\n    i += 1\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  games = Array.new(game.length)\n\
    \  guesses.zip(games) do |g, g|\n    games[g] = game[g]\n  end\n  guesses.zip(games)\
    \ do |g, g|\n    guesses[g] = guess[g]\n  end\n  guesses.zip(games) do |g, g|\n\
    \    guesses[g] = guesses[g] - games[g]\n  end\n  guesses.zip(games) do |g, g|\n\
    \    guesses[g] = 0 if guesses[g] < 0\n    guesses[g] = guesses[g].abs if guesses[g]\
    \ > 0\n  end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  for i in 0...guess.length\n    diff = guess[i] - game[i]\n    if diff\
    \ < 0\n      diff *= -1\n      result[i] = diff\n    elsif diff == 0\n      result[i]\
    \ = 0\n    else\n      result[i] = diff\n    end\n  end\n  return result\nend",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    diff = guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n    result.push(diff)\n\
    \    i += 1\n  end\n  result\nend", "  game.length, guess.length\n  game = game.dup\n\
    \  guess = guess.dup\n  result = []\n  i = 0\n  while i < game.length\n    j =\
    \ i\n    while j < game.length && game[j] == guess[i]\n      j += 1\n    result.push(j\
    \ - i)\n    i += 1\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  for i in 0...guess.length\n    diff = guess[i] - game[i]\n \
    \   if diff < 0\n      diff *= -1\n      result[i] = diff\n    else\n      result[i]\
    \ = 0\n    end\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  scores = Array.new(guess.length)\n  guesses.zip(scores).each\
    \ do |g,s|\n    game[g] ? guesses[g] = 0 : guesses[g] = s - game[g]\n  end\n \
    \ guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0\n         \
    \                  : result[index] = abs(guess[index] - score)\n  end\n  result\n\
    end\n</cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  game.each_with_index do |score, index|\n    guess = guess[index]\n    diff\
    \ = guess - score\n    result.push(diff if diff != 0)\n  end\n  result\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  score = 0\n  \n  game.length.times do |i|\n    guesses[i]\
    \ = game[i] if guess[i]\n  end\n  \n  guesses.each do |i|\n    score += i if guess[i]\n\
    \  end\n  \n  guesses.each do |i|\n    score -= i if !guess[i]\n  end\n  \n  score\n\
    end", "  game = game.sort\n  guess = guess.sort\n  game.length, guess.length,\
    \ guess.length == game.length, guess.length == game.length\n  guess = guess.each_with_index.map\
    \ { |e, i| e - game[i] }\n  guess = guess.each_with_index.map { |e, i| e > 0 ?\
    \ e : -e }\n  guess.inject(:+)\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c\
    \ |>\nI like your solution, however it fails when the first array is empty. `compare.call([1,2,3],\
    \ [])` returns `[3, 3, 3]` instead of `[0, 0, 0]`\n<|/ c |>\n<| c |>\nI added\
    \ a check for empty arrays. I hope it helps.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] != guess[i]\n      break\n    i += 1\n  end\n  result << i\n \
    \ i = 0\n  while i < guess.length\n    if game[i] != guess[i]\n      break\n \
    \   i += 1\n  end\n  result << i - guess.length\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  games = Array.new(game.length)\n\
    \  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  guesses.each\
    \ do |i|\n    guesses[i] = guess[i] if guess[i] != 0\n  end\n  guesses.each do\
    \ |i|\n    games.each do |j|\n      games[j] -= guess[i]\n    end\n  end\n  games.each\
    \ do |i|\n    games[i] -= guess[i]\n  end\n  games\nend", "  game = game.to_a\n\
    \  guess = guess.to_a\n  result = []\n  game.each_with_index do |score, index|\n\
    \    guess[index] == score ? result[index] = 0 : result[index] = abs(guess[index]\
    \ - score)\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you\
    \ so much for taking the time to write this out. I'm going to try it out and see\
    \ how it goes. I really appreciate it!\n<|/ c |>\n<| c |>\nI tested it out and\
    \ it works perfectly. Thank you so much for taking the time to write this out.\
    \ I'm going to try it out and see how it goes. I really appreciate it!\n<|/ c\
    \ |>\n<| c |>\nI tested it out and it works perfectly. Thank you so much for taking\
    \ the time to write this out. I'm going to try it out and see how it goes. I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nI tested it out and it works perfectly. Thank\
    \ you so much for taking the time to write this out. I'm going to try it out and\
    \ see how it goes. I really appreciate it!\n<|/ c |>\n<| c |>\nI tested it out\
    \ and it works perfectly. Thank you so much for taking the time to write this\
    \ out. I'm going to try it out and see how it goes. I really appreciate it!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.zip(guess).each\
    \ do |g,g|\n    game[g] += 1\n  end\n  game = game.sort_by{|x| -x}\n  guesses.zip(guess).each\
    \ do |g,g|\n    guesses[g] = g - game[g]\n  end\n  guesses\nend\n</cell>\n<cell>",
  "    game = game.to_a\n    guess = guess.to_a\n    guesses = guess.size\n    scores\
    \ = game.size\n    differences = Array.new(guesses)\n    differences.fill(guesses)\n\
    \    differences.each do |i|\n        differences[i] = game[i] - guess[i]\n  \
    \  end\n    differences.each do |i|\n        if differences[i] > 0\n         \
    \   differences[i] = differences[i] - 1\n        else\n            differences[i]\
    \ = differences[i] + 1\n        end\n    end\n    differences.each do |i|\n  \
    \      if differences[i] != guesses\n            differences[i] = differences[i]\
    \ - guesses\n        end\n    end\n    differences.each do |i|\n        if differences[i]\
    \ != guesses\n            differences[i] = differences[i] + 1\n        end\n \
    \   end\n    differences.each do |i|\n        if differences[i] != guesses\n \
    \           differences[i] = differences[i] - guesses\n        end\n    end\n\
    \    differences.each do |i|\n        if differences[i] != guesses\n         \
    \   differences[i] = differences[i] + 1\n        end\n    end\n    differences.each\
    \ do |i|\n        if differences[i] != guesses\n            differences[i] = differences[i]\
    \ - guesses\n        end\n    end\n    differences.each do |i|\n        if differences[i]\
    \ != guesses\n            differences[i] = differences[i] + 1\n        end\n \
    \   end\n    differences.each do |i|\n        if differences[i] != guesses\n \
    \           differences[i] = differences[i] - guesses\n        end\n    end\n\
    \    differences.each do |i|\n        if differences[i] != guesses\n         \
    \   differences[i] = differences[i] + 1\n        end\n    end\n    differences.each\
    \ do |i|\n        if differences[i] != guesses\n            differences[i] = differences[i]\
    \ - guesses\n        end\n    end\n    differences.each do |i|\n        if differences[i]\
    \ != guesses\n            differences[i] = differences[i] + 1\n        end\n \
    \   end\n    differences.each do |i|\n        if differences[i] != guesses\n \
    \           differences[i] = differences[i] - guesses\n        end\n    end\n\
    \    differences.each do |i|\n        if differences[i] != guesses\n         \
    \   differences[i] = differences[i] + 1\n        end\n    end\n    differences.each\
    \ do |i|\n        if differences[i] != guesses\n            differences[i] = differences[i]\
    \ - guesses\n        end\n    end\n    differences.each do |i|\n        if differences[i]\
    \ != guesses\n            differences[i] = differences[i] + 1\n        end\n \
    \   end\n    differences.each do |i|\n        if differences[i] != guesses\n \
    \           differences[i] = differences[i] - guesses\n        end\n    end\n\
    \    differences.each do |i|", "    game = game.sort!\n    guess = guess.sort!\n\
    \    differences = []\n    difference = 0\n    \n    game.each_with_index do |score,\
    \ index|\n        difference = score - guess[index]\n        if difference < 0\n\
    \            difference = difference * -1\n        end\n        differences <<\
    \ difference\n    end\n    \n    differences\nend", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each\
    \ do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_with_index\
    \ do |val, i|\n    if val == 0\n      guesses[i] = 0\n    else\n      guesses[i]\
    \ = abs(val - guess[i])\n    end\n  end\n  guesses\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    found = false\n    while j < guess.length\n      if guess[j] == game[i]\n\
    \        found = true\n        break\n      j+=1\n    end\n    if found\n    \
    \  result[i] = 0\n    else\n      result[i] = abs(guess[i] - game[i])\n    end\n\
    \    i+=1\n  end\n  return result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  score = 0\n  guesses.each do |i|\n   \
    \ guesses[i] = game[i] - guess[i]\n    score += guesses[i]\n  end\n  guesses.map\
    \ { |i| i < 0 ? i : -i }\nend", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result.push(0)\n    else\n      result.push(abs(guess\
    \ - game))\n    i += 1\n  end\n  result\nend", "  game = game.to_a\n  guess =\
    \ guess.to_a\n  result = []\n  game.length == guess.length\n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0\n    guess[index]\
    \ > score ? result[index] = guess[index] - score\n    guess[index] < score ? result[index]\
    \ = score - guess[index] \n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=ruby,arrays |>\n<code>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[j]\n      j += 1\n    if j == guess.length\n      result[i]\
    \ = 0\n      i += 1\n      continue\n    result[i] = abs(guess[j] - game[j])\n\
    \    i += 1\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n\
    \    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_with_index do |val,\
    \ i|\n    if val != 0\n      guesses[i] = abs(val) - guess[i]\n    end\n  end\n\
    \  guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n \
    \ game.length.times do |i|\n    guess.length.times do |j|\n      result[j] ||=\
    \ 0\n      result[j] += game[i] != guess[i] ? game[i] - guess[i] : game[i] - guess[i]\n\
    \    end\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  games = Array.new(game.length)\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g[0]] = g[1]\n    games[g[1]] = g[0]\n  end\n  guesses.",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ games = Array.new(game.length)\n  games.zip(guesses).each do |game, guess|\n\
    \    games[game.to_i] += 1\n    guesses[guess.to_i] += 1\n  end\n  games.zip(guesses).each\
    \ do |game, guess|\n    games[game.to_i] -= 1 if games[game.to_i] > 0\n    guesses[guess.to_i]\
    \ -= 1 if guesses[guess.to_i] > 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] += 1 if games[game.to_i] > 0\n    guesses[guess.to_i]\
    \ += 1 if guesses[guess.to_i] > 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] -= 1 if games[game.to_i] < 0\n    guesses[guess.to_i]\
    \ -= 1 if guesses[guess.to_i] < 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] += 1 if games[game.to_i] < 0\n    guesses[guess.to_i]\
    \ += 1 if guesses[guess.to_i] < 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] -= 1 if games[game.to_i] == 0\n    guesses[guess.to_i]\
    \ -= 1 if guesses[guess.to_i] == 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] += 1 if games[game.to_i] == 0\n    guesses[guess.to_i]\
    \ += 1 if guesses[guess.to_i] == 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] -= 1 if games[game.to_i] < 0\n    guesses[guess.to_i]\
    \ -= 1 if guesses[guess.to_i] < 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] += 1 if games[game.to_i] < 0\n    guesses[guess.to_i]\
    \ += 1 if guesses[guess.to_i] < 0\n  end\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game.to_i] -= 1 if games[game.to_i] == 0\n", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  score = 0\n  guesses.each\
    \ do |i|\n    guesses[i] = 0\n  end\n  game.each do |i|\n    guesses[guess[i]]\
    \ += 1\n  end\n  guesses.each do |i|\n    score += guesses[i]\n  end\n  guesses.each\
    \ do |i|\n    guesses[i] = abs(guess[i] - score) if guess[i] != 0\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  games.each\
    \ do |i|\n    games[i] = game[i]\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i]\n  end\n  guesses.each do |i|\n    game = games[i]\n    guess = guesses[i]\n\
    \    game = game.abs\n    guess = guess.abs\n    guesses[i] = guess - game\n \
    \ end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  game.length.times do |i|\n    guess.length.times do |j|\n      next if\
    \ game[i] == guess[j]\n      result[j] ||= game[i] - guess[j]\n    end\n  end\n\
    \  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.max\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(guess.length)\n  guesses.each do |i|\n\
    \    guesses[i] = 0\n  end\n  game.length.times do |i|\n    guesses[game[i]] +=\
    \ 1\n  end\n  guesses.each do |i|\n    guesses[i] = guesses[i] - game[i]\n  end\n\
    \  guesses.map { |i| i if guesses[i] == 0 }\nend\n</cell>\n<cell>", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  \n  game.length.times do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n\
    \  \n  guesses.max\nend", "  game = game.dup\n  guess = guess.dup\n  guesses =\
    \ Array.new(guess.length)\n  guesses.fill(0)\n  guesses.zip(game).each do |score,\
    \ guess|\n    guesses[guess] += 1\n  end\n  guesses.zip(guess).each do |score,\
    \ guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess != score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess] += 1 if guess == score\n  end\n  guesses.zip(guess).each\
    \ do |score, guess|\n    guesses[guess", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length, -1)\n  score = 0\n  \n  game.length.times\
    \ do |i|\n    guesses[i] = -1\n    \n    guesses.each do |j|\n      guesses[j]\
    \ = -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n\
    \    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each\
    \ do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n    \
    \  guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] =\
    \ -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n\
    \    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each\
    \ do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n    \
    \  guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] =\
    \ -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n\
    \    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each\
    \ do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n    \
    \  guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] =\
    \ -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n\
    \    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each\
    \ do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n    \
    \  guesses[j] = -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] =\
    \ -1\n    end\n    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n\
    \    \n    guesses.each do |j|\n      guesses[j] = -1\n    end\n    \n    guesses.each ",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  score = 0\n  \n  game.length.times do |i|\n    guesses[i]\
    \ = game[i]\n  end\n  \n  guess.length.times do |i|\n    guesses[i] = guess[i]\n\
    \  end\n  \n  guesses.each do |i|\n    guesses.each do |j|\n      guesses[j] =\
    \ guesses[j] - i\n    end\n  end\n  \n  guesses.each do |i|\n    guesses.each\
    \ do |j|\n      guesses[j] = guesses[j] + i\n    end\n  end\n  \n  guesses.each\
    \ do |i|\n    guesses.each do |j|\n      guesses[j] = guesses[j] % 2\n    end\n\
    \  end\n  \n  guesses.each do |i|\n    guesses.each do |j|\n      guesses[j] =\
    \ guesses[j] ? guesses[j] : -1\n    end\n  end\n  \n  guesses.each do |i|\n  \
    \  guesses.each do |j|\n      guesses[j] = guesses[j] ? guesses[j] : i\n    end\n\
    \  end\n  \n  guesses.each do |i|\n    guesses.each do |j|\n      guesses[j] =\
    \ guesses[j] ? guesses[j] : i\n    end\n  end\n  \n  guesses.each do |i|\n   \
    \ guesses.each do |j|\n      guesses[j] = guesses[j] ? guesses[j] : i\n    end\n\
    \  end\n  \n  guesses.each do |i|\n    guesses.each do |j|\n      guesses[j] =\
    \ guesses[j] ? guesses[j] : i\n    end\n  end\n  \n  guesses.each do |i|\n   \
    \ guesses.each do |j|\n      guesses[j] = guesses[j] ? guesses[j] : i\n    end\n\
    \  end\n  \n  guesses.each do |i|\n    guesses.each do |j|\n      guesses[j] =\
    \ guesses[j] ? guesses[j] : i\n    end\n  end\n  \n  guesses.each do |i|\n   \
    \ guesses.each do |j|\n      guesses[j] = guesses[j] ? guesses[j] : i\n    end\n\
    \  end\n  \n  guesses.each do |i|\n    ", "    guesses = Array.new(guess.length)\n\
    \    scores = Array.new(guess.length)\n    guesses.zip(scores).each do |guess,\
    \ score|\n        guesses[guess] = score\n    end\n    guesses.zip(guess).each\
    \ do |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(guess).each do |guess, score|\n        guesses[guess]\
    \ = score if guesses[guess] != score\n    end\n    guesses.zip(guess).each do\
    \ |guess, score|\n        guesses[guess] = score if guesses[guess] == score\n\
    \    end\n    guesses.zip(", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[j]\n      j += 1\n    if j == guess.length\n      result[i]\
    \ = 0\n      i += 1\n      continue\n    diff = guess[j] - game[j]\n    result[i]\
    \ = diff if diff > 0 else -diff\n    i += 1\n  end\n  result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  scores\
    \ = Array.new(guess.length)\n  guesses.zip(scores).each do |guess, score|\n  \
    \  game[guess] -= 1\n    guesses[guess] += 1\n    scores[guess] += score\n  end\n\
    \  guesses.zip(scores).each do |guess, score|\n    guesses[guess] -= 1\n    scores[guess]\
    \ -= score\n  end\n  guesses.zip(scores).each do |guess, score|\n    guesses[guess]\
    \ += 1\n    scores[guess] -= score\n  end\n  guesses.zip(scores).each do |guess,\
    \ score|\n    guesses[guess] -= 1\n    scores[guess] += score\n  end\n  guesses.zip(scores).each\
    \ do |guess, score|\n    guesses[guess] += 1\n    scores[guess] += score\n  end\n\
    \  guesses.zip(scores).each do |guess, score|\n    guesses[guess] -= 1\n    scores[guess]\
    \ -= score\n  end\n  guesses.zip(scores).each do |guess, score|\n    guesses[guess]\
    \ += 1\n    scores[guess] += score\n  end\n  guesses.zip(scores).each do |guess,\
    \ score|\n    guesses[guess] -= 1\n    scores[guess] -= score\n  end\n  guesses.zip(scores).each\
    \ do |guess, score|\n    guesses[guess] += 1\n    scores[guess] += score\n  end\n\
    \  guesses.zip(scores).each do |guess, score|\n    guesses[guess] -= 1\n    scores[guess]\
    \ += score\n  end\n  guesses.zip(scores).each do |guess, score|\n    guesses[guess]\
    \ += 1\n    scores[guess] += score\n  end\n  guesses.zip(scores).each do |guess,\
    \ score|\n    guesses[guess] -= 1\n    scores[guess] -= score\n  end\n  guesses.zip(scores).each\
    \ do |guess, score|\n    guesses[guess] += 1\n    scores[guess] -= score\n  end\n\
    \  guesses.zip(scores).each do |guess, score|\n    guesses[guess] -= 1\n    scores[guess]\
    \ += score\n  end\n  guesses.zip(scores).each do |guess, score|\n    guesses[guess]\
    \ += 1\n    scores[guess] += score\n  end\n  guesses.zip(scores).each do |guess,\
    \ score|\n    guesses[guess] -= 1\n    scores[guess] -= score\n  end\n  gues",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_with_index do |i, index|\n    if guesses[index] == 0\n\
    \      guesses[index] = guess[index] - game[index]\n    end\n  end\n  guesses\n\
    end", "  game.length == guess.length\n  game.each_with_index do |score, index|\n\
    \    guess[index] == score ? 0 : (guess[index] - score)\n  end\nend", "  game\
    \ = game.to_a\n  guess = guess.to_a\n  result = []\n  game.length == guess.length\n\
    \  for i in 0...game.length\n    diff = game[i] - guess[i]\n    if diff != 0\n\
    \      result[i] = diff\n    end\n  end\n  result\nend", "    game = game.sort\n\
    \    guess = guess.sort\n    game.length, guess.length\n    diff = []\n    i =\
    \ 0\n    while i < game.length\n        diff = diff + [abs(game[i] - guess[i])]\n\
    \        i += 1\n    return diff\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length, guess.length\n  result = Array.new(guess.length)\n  i = 0\n  while\
    \ i < game.length\n    if game[i] != guess[i]\n      result[i] = abs(game[i] -\
    \ guess[i])\n    else\n      result[i] = 0\n    end\n    i += 1\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length,\
    \ -1)\n  games = Array.new(game.length, -1)\n  games.zip(guesses).each do |g,\
    \ gs|\n    games[g] = g\n    guesses[gs] = g\n  end\n  guesses.zip(games).each\
    \ do |g, gs|\n    if gs == -1\n      guesses[g] = 0\n    elsif g == -1\n     \
    \ games[g] = 0\n    else\n      guesses[g] = g - gs[g]\n      games[g] = gs[g]\n\
    \    end\n  end\n  guesses.zip(games).each do |g, gs|\n    if gs == -1\n     \
    \ guesses[g] = 0\n    elsif g == -1\n      games[g] = 0\n    else\n      guesses[g]\
    \ = g - gs[g]\n      games[g] = gs[g]\n    end\n  end\n  guesses\nend", "  game\
    \ = game.dup\n  guess = guess.dup\n  result = []\n  game.length.times do |i|\n\
    \    guess.length.times do |j|\n      guess[j] = guess[j] - game[i]\n      result[j]\
    \ = guess[j] if guess[j] > 0\n      result[j] = guess[j] if guess[j] < 0\n   \
    \ end\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i]\
    \ = game[i] - guess[i]\n  end\n  guesses.max\nend", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  games\
    \ = Array.new(game.length)\n  games.fill(0)\n  games.each do |g|\n    guesses.each\
    \ do |g|\n      games.each do |g|\n        if g == g\n          guesses[g] +=\
    \ 1\n        end\n      end\n    end\n  end\n  guesses.each do |g|\n    if g !=\
    \ 0\n      guesses[g] = g - games[g]\n    end\n  end\n  guesses\nend", "  game\
    \ = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_with_index\
    \ do |g, i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  guesses.each do |i|\n\
    \    guesses[i] = guess[i] if guess[i] != 0\n  end\n  guesses.each_with_index\
    \ do |guess, i|\n    games.each_with_index do |game, i|\n      guesses[i] = games[i]\
    \ if games[i] != 0\n    end\n  end\n  guesses.each_with_index do |guess, i|\n\
    \    guesses[i] = guesses[i] - guess if guesses[i] != 0\n  end\n  guesses\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] == 0\n      guesses[i] = guesses[i]\n\
    \    else\n      guesses[i] = guesses[i].abs\n    end\n  end\n  guesses\nend",
  "  game = game.sort!\n  guess = guess.sort!\n  result = []\n  i = 0\n  while i <\
    \ guess.length\n    guess = guess[i]\n    j = i\n    while j < guess.length &&\
    \ guess < game[j]\n      j += 1\n    result.push(j - i)\n    i = j\n  end\n  result\n\
    end", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each do\
    \ |i|\n    guessed.each do |j|\n      diff = abs(i - j)\n      if i == j\n   \
    \     result[i] = 0\n      else\n        result[i] = diff\n      end\n    end\n\
    \  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  games.each\
    \ do |i|\n    games[i] = game[i]\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i]\n  end\n  guesses.each_with_index do |guess, i|\n    games.each_with_index\
    \ do |game, j|\n      next if j == i\n      next if guess == game\n      guesses[i]\
    \ = guesses[i] - abs(guess - game)\n    end\n  end\n  guesses\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  games\
    \ = Array.new(game.length)\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    games[games.index(game)] = game\n    guesses[guesses.index(guess)]\
    \ = guess\n  end\n  guesses.zip(games).each do |guess, game|\n    games[games.index(game)]\
    \ = game\n    guesses[guesses.index(guess)] = guess\n  end", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j\
    \ = i\n    while j < guess.length and guess[j] == game[j]\n      j += 1\n    if\
    \ j == guess.length\n      break\n    diff = guess[j] - game[j]\n    if diff ==\
    \ 0\n      result[i] = 0\n    else\n      result[i] = abs(diff)\n    i += 1\n\
    \  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length and\
    \ guess[j] == game[j]\n      j += 1\n    if j == guess.length\n      result <<\
    \ 0\n      i += 1\n      break\n    result << (guess[j] - game[j]) if guess[j]\
    \ == game[j] else (guess[j] - game[j]) if guess[j] > game[j] else (guess[j] -\
    \ game[j]) if guess[j] < game[j]\n    i += 1\n  end\n  result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  score = 0\n  \n  game.length.times do |i|\n    guesses[i] = guess[i] - game[i]\n\
    \    score += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i]\
    \ - game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n  end\n \
    \ \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n\
    \  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score\
    \ += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i] -\
    \ game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n  end\n \
    \ \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n\
    \  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score\
    \ += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i] -\
    \ game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] - game[i]\n    score += guesses[i]\n  end\n  \n  guesses.each do\
    \ |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n  end\n \
    \ \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score += guesses[i]\n\
    \  end\n  \n  guesses.each do |i|\n    guesses[i] = guess[i] - game[i]\n    score\
    \ += guesses[i]\n", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  game.length, guess.length, guess.length.times do |i|\n    diff = guess[i] -\
    \ game[i]\n    result << diff if diff != 0\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.zip(game).each do |pair|\n    guesses[pair[0]] = pair[1]\n  end\n \
    \ guesses.zip(guess).each do |pair|\n    guesses[pair[0]] = pair[1] if pair[0]\
    \ != pair[1]\n  end\n  guesses.zip(game).each do |pair|\n    guesses[pair[0]]\
    \ = pair[1] if pair[0] == pair[1]\n  end\n  guesses.zip(guess).each do |pair|\n\
    \    guesses[pair[0]] = pair[1] if pair[0] != pair[1]\n  end\n  guesses.map {\
    \ |k,v| v if v != 0 }\nend\n</cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n\
    \  game.length == guess.length\n  result = []\n  for i in 0...game.length\n  \
    \  diff = guess[i] - game[i]\n    if diff != 0\n      result.push(diff)\n    end\n\
    \  end\n  result\nend\n</cell>\n<code language=julia-1.0>", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    game[i] -= 1\n    guess[i] -= 1\n  end\n  guesses.each\
    \ do |i|\n    guesses[i] = guess[i] < 0 ? guess[i] - game[i] : game[i] - guess[i]\n\
    \  end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ && game[j] == guess[i]\n      j += 1\n    if j == i\n      result.push(0)\n\
    \    else\n      result.push(abs(game[i] - guess[j]))\n    end\n    i += 1\n \
    \ end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  scores = Array.new(guess.length)\n  guesses.each do |i|\n    guesses[i] = 0\n\
    \    scores[i] = 0\n  end\n  game.each do |i|\n    guesses.each do |j|\n     \
    \ if game[i] == guess[j]\n        guesses[j] += 1\n        scores[j] += 1\n  \
    \    end\n    end\n  end\n  guesses.map { |i| i if scores[i] == 0 }.compact\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    if game[i] == guess[i]\n      i += 1\n      continue\n\
    \    diff = game[i] - guess[i]\n    i += 1\n    result.push(diff)\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  score = 0\n  i = 0\n  while i < guess.length\n    guesses[i] = guess[i]\n \
    \   i += 1\n  end\n  i = 0\n  while i < guess.length\n    score = score + game[i]\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    if guesses[i] != game[i]\n\
    \      break\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if guesses[i] != game[i]\n      guesses[i] = abs(guess[i] - game[i])\n  \
    \  end\n    i += 1\n  end\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n\
    \  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n\
    \  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n\
    \  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n\
    \  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n\
    \  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n\
    \  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n\
    \  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n\
    \  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n\
    \  guesses.uniq!\n  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n\
    \  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.uniq!\n  guesses.compact!\n\
    \  guesses.sort!\n  guesse", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each_with_index do |guess,\
    \ i|\n    game[i] = -game[i] if game[i] < 0\n    guess[i] = -guess[i] if guess[i]\
    \ < 0\n    guesses[i] = game[i] - guess[i] unless game[i] == 0\n  end\n  guesses\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess ==\
    \ game\n      result[i] = 0\n    else\n      result[i] = abs(guess - game)\n \
    \   i += 1\n  end\n  return result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  for i in 0...game.size\n    diff = game[i] - guess[i]\n    if\
    \ diff != 0\n      result[i] = diff\n    end\n  end\n  result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  result = []\n  game.length.times do |i|\n \
    \   guess.length.times do |j|\n      result[j] ||= 0\n      result[j] += game[i]\
    \ != guess[j] ? game[i] - guess[j] : 0\n    end\n  end\n  result\nend\n</cell>\n\
    <cell>", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  \n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0 : result[index]\
    \ = abs(guess[index] - score)\n  end\n  \n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if\
    \ game[i] == guess[i]\n      i += 1\n    else \n      result[i] = abs(game[i]\
    \ - guess[i])\n      i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-0.5>",
  "  game = game.dup\n  guess = guess.dup\n  guesses = []\n  scores = []\n  i = 0\n\
    \  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guesses.push(guess[i])\n\
    \    scores.push(game[i])\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    guesses.push(guess[i])\n    scores.push(game[i])\n    i += 1\n  end\n  i\
    \ = 0\n  ", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n\
    \  while i < guess.length\n    j = i\n    while j < guess.length and guess[j]\
    \ == game[j]\n      j += 1\n    if j - i > 0 and guess[j] == game[j]\n      result[i]\
    \ = 0\n      i += 1\n      while j < guess.length and guess[j] == game[j]\n  \
    \      j += 1\n      result[i] = j - i\n      i += 1\n    else\n      result[i]\
    \ = abs(guess[j] - game[j])\n      i += 1\n  end\n  result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  score = 0\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n   \
    \ score += guesses[i]\n  end\n  guesses.each do |i|\n    guesses[i] = guesses[i]\
    \ - game[i]\n    score += guesses[i]\n  end\n  guesses.map { |i| i if i != 0 }\n\
    end\n</cell>\n<cell>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  \n  game.length.times do |i|\n    guesses[i] = game[i] -\
    \ guess[i]\n  end\n  guesses.max\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      i += 1\n    elsif game[i] > guess[i]\n      result.push(-game[i] - guess[i])\n\
    \      i += 1\n    else\n      result.push(game[i] - guess[i])\n      i += 1\n\
    \  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  guesses.zip(games).each do |g, g|\n    games[g]\
    \ = game[g]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = guess[g]\n\
    \  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = guesses[g] - games[g]\n\
    \  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = 0 if guesses[g]\
    \ < 0\n    guesses[g] = guesses[g].abs if guesses[g] > 0\n  end\n  guesses\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ scores = Array.new(guess.length)\n  guesses.zip(scores).each do |guess, score|\n\
    \    game[guess] -= score\n  end\n  guesses.zip(scores).each do |guess, score|\n\
    \    guesses[guess] += 1 if game[guess] == 0\n    guesses[guess] -= 1 if game[guess]\
    \ != 0\n  end\n  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  games = Array.new(game.length)\n\
    \  games.fill(0)\n  \n  games.each_with_index do |game, index|\n    guesses.each_with_index\
    \ do |guess, i|\n      guesses[i] = guesses[i] - game[i]\n    end\n  end\n  \n\
    \  guesses.each_with_index do |guess, i|\n    guess[i] = guess[i] - guess[0]\n\
    \  end\n  \n  guesses.each_with_index do |guess, i|\n    guess[i] = 0 if guess[i]\
    \ == 0\n    guess[i] = guess[i] unless guess[i] == guess[0]\n  end\n  \n  guesses\n\
    end\n</cell>\n<cell>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] < 0\n      guesses[i] = guesses[i]\
    \ + game.length\n    end\n  end\n  guesses.sort!\n  guesses.reverse!\n  guesses.each\
    \ do |i|\n    if guesses[i] != 0\n      guesses[i] = guesses[i] - guesses[guesses.length-1]\n\
    \    end\n  end\n  guesses.reverse!\n  guesses.each do |i|\n    if guesses[i]\
    \ == 0\n      guesses[i] = 0\n    end\n  end\n  guesses\nend", "  guess = guess.sort\n\
    \  game = game.sort\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  game\
    \ = game.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  game = game.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  game = game.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  game\
    \ = game.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  game = game.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  game = game.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  game\
    \ = game.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  game = game.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  game = game.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with_index.map { |g,i| [g, i] }\n  game\
    \ = game.each_with_index.map { |g,i| [g, i] }\n  guess = guess.each_with_index.map\
    \ { |g,i| [g, i] }\n  game = game.each_with_index.map { |g,i| [g, i] }\n  guess\
    \ = guess.each_with_index.map { |g,i| [g, i] }\n  game = game.each_with_index.map\
    \ { |g,i| [g, i] }\n  guess = guess.each_with", "  game = game.dup\n  guess =\
    \ guess.dup\n  game.each_with_index do |score, index|\n    guess[index] = 0 if\
    \ guess[index] == score\n    guess[index] = guess[index] - score if guess[index]\
    \ > score\n    guess[index] = guess[index] + score if guess[index] < score\n \
    \ end\n  guess\nend", "  game = game.sort\n  guess = guess.sort\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  guesses.zip(games).each do |g, g|\n    games[g[0]]\
    \ = g[1]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]] = g[1]\n\
    \  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]] = g[1] if g[1]\
    \ != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]] = g[1]\
    \ if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g[0]]\
    \ = g[1] if g[1] != g[0]", "  game = game.sort\n  guess = guess.sort\n  guesses\
    \ = Array.new(guess.length)\n  games = Array.new(game.length)\n  i = 0\n  j =\
    \ 0\n  while i < game.length and j < guess.length\n    games[j] = game[i]\n  \
    \  guesses[j] = guess[i]\n    i += 1\n    j += 1\n  end\n  i = 0\n  j = 0\n  while\
    \ i < game.length and j < guess.length\n    if games[j] == guesses[j]\n      i\
    \ += 1\n      j += 1\n    else\n      guesses[j] = abs(games[j] - guesses[j])\n\
    \      i += 1\n      j += 1\n    end\n  end\n  guesses.slice!(0...j)\n  guesses\n\
    end", "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while\
    \ i < guess.length\n    guess = guess[i]\n    game = game[i]\n    if guess ==\
    \ game\n      result.push(0)\n    else\n      result.push(abs(guess - game))\n\
    \    end\n    i += 1\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n\
    \  result = []\n  guesses = guess.size\n  scores = game.size\n  guesses_left =\
    \ guesses\n  scores_left = scores\n  while guesses_left > 0 and scores_left >\
    \ 0\n    guess = guess[guesses_left-1]\n    score = game[scores_left-1]\n    if\
    \ guess == score\n      guesses_left -= 1\n      scores_left -= 1\n      result\
    \ << 0\n    else\n      guesses_left = guesses_left - 1\n      scores_left = scores_left\
    \ - 1\n      result << abs(guess - score)\n    end\n  end\n  result\nend\n</cell>\n\
    <code language=julia-1.0>", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n   \
    \ if diff == 0\n      result.push(0)\n    else\n      result.push(diff)\n    i\
    \ += 1\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n  result\
    \ = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n \
    \   guess = guess.to_i\n    if guess == score\n      result << 0\n    elsif guess\
    \ > score\n      result << guess - score\n    else\n      result << guess + score\n\
    \    end\n  end\n  result\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer! I see that your solution is more efficient than mine, but I still\
    \ don't understand why my code doesn't work. Could you please explain why my code\
    \ doesn't work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/\
    \ c |>\n<| c |>\nThanks for your explanation! I still don't understand why my\
    \ code doesn't work. Could you please explain why my code doesn't work?\n<|/ c\
    \ |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your explanation! I still don't understand why my code doesn't work. Could\
    \ you please explain why my code doesn't work?\n<|/ c |>\n<| a tags=ruby,arrays\
    \ |>\n<code>", "  game = game.sort\n  guess = guess.sort\n  result = []\n  for\
    \ i in 0...guess.length\n    diff = guess[i] - game[i]\n    if diff < 0\n    \
    \  diff *= -1\n    result.push(diff)\n  end\n  return result\nend", "  game =\
    \ game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  scores\
    \ = []\n  \n  guesses.each do |i|\n    guesses[i] = guess[i]\n  end\n  \n  game.length.times\
    \ do |i|\n    guesses.each do |j|\n      guesses[j] = game[j] if game[j] == guess[i]\n\
    \    end\n    \n    guesses.each do |j|\n      guesses[j] = 0 if guesses[j] ==\
    \ guess[i]\n    end\n    \n    guesses.each do |j|\n      guesses[j] = guesses[j]\
    \ - guess[i] if guesses[j] > guess[i]\n      guesses[j] = guesses[j] + guess[i]\
    \ if guesses[j] < guess[i]\n    end\n    \n    guesses.each do |j|\n      guesses[j]\
    \ = 0 if guesses[j] == guess[i]\n    end\n    \n    guesses.each do |j|\n    \
    \  scores << guesses[j] if guesses[j] != guess[i]\n    end\n  end\n  \n  scores.map\
    \ { |i| i if i != 0 }\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each_with_index do |guess,\
    \ i|\n    game[i] = game[i] < guess[i] ? game[i] - guess[i] : guess[i] - game[i]\n\
    \  end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result =\
    \ []\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result.push(0)\n    else\n      result.push(abs(guess\
    \ - game))\n    i += 1\n  end\n  return result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length and guess[j] == game[j]\n      j += 1\n    if j ==\
    \ guess.length\n      result[i] = 0\n      i += 1\n      continue\n    diff =\
    \ guess[j] - game[j]\n    if diff < 0\n      result[i] = -diff\n    else\n   \
    \   result[i] = diff\n    i += 1\n  end\n  result\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if\
    \ guess[i] == game[i]\n      i += 1\n    else\n      result[i] = abs(guess[i]\
    \ - game[i])\n      i += 1\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.5>",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ games = Array.new(game.length)\n  games.each_index do |i|\n    games[i] = game[i]\
    \ if game[i] != 0\n    guesses[i] = guess[i] if guess[i] != 0\n  end\n  guesses.each_index\
    \ do |i|\n    games[i] -= guess[i]\n  end\n  guesses.each_index do |i|\n    guess[i]\
    \ -= games[i]\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i]\
    \ if guesses[i] != 0\n  end\n", "  game = game.sort\n  guess = guess.sort\n  result\
    \ = []\n  i = 0\n  while i < guess.length\n    diff = guess[i] - game[i]\n   \
    \ if diff != 0\n      result[i] = diff\n      i += 1\n    else\n      result[i]\
    \ = 0\n      i += 1\n    end\n  end\n  result\nend", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  games\
    \ = Array.new(game.length)\n  games.fill(0)\n  games.zip(guesses).each do |game,\
    \ guess|\n    games[game] += 1\n    guesses[guess] += 1\n  end\n  guesses.zip(games).each\
    \ do |guess, game|\n    guesses[guess] = 0 if guesses[guess] > games[game]\n \
    \   guesses[guess] = guesses[guess] - games[game] if guesses[guess] == games[game]\n\
    \  end\n  guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n  result =\
    \ []\n  game.each_with_index do |score, index|\n    guess[index] ? result[index]\
    \ = 0 : result[index] = score - guess[index]\n  end\n  result\nend", "  game =\
    \ game.sort!\n  guess = guess.sort!\n  result = []\n  game.length.times do |i|\n\
    \    guess.length.times do |j|\n      next if game[i] == guess[j]\n      diff\
    \ = abs(game[i] - guess[j])\n      result.push(diff) if diff != 0\n    end\n \
    \ end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length and\
    \ guess[j] == game[j]\n      j += 1\n    if j == guess.length\n      result[i]\
    \ = 0\n      i += 1\n      continue\n    result[i] = abs(guess[j] - game[j])\n\
    \    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      i += 1\n      continue\n    diff = game[i] - guess[i]\n    if diff < 0\n\
    \      diff *= -1\n    result.push(diff)\n    i += 1\n  end\n  result\nend", " \
    \ game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  scores = []\n  \n  guesses.each do |i|\n    guesses[i] = guess[i]\n  end\n\
    \  \n  guesses.each do |i|\n    score = 0\n    \n    game.each do |j|\n      if\
    \ j == guess[i]\n        score += 1\n      end\n    end\n    \n    scores.push(score)\n\
    \  end\n  \n  scores.each do |i|\n    guesses[i] = abs(guess[i] - scores[i])\n\
    \  end\n  \n  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = []\n  scores = []\n  guesses.push 0 unless guess.length == game.length\n \
    \ scores.push 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length\
    \ == game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == game.length\n  scores.push 0 unless guess.length ==\
    \ game.length\n  guesses.push 0 unless guess.length == game.length\n  scores.push\
    \ 0 unless guess.length == game.length\n  guesses.push 0 unless guess.length ==\
    \ game.length\n  scores.push 0 unless guess.length == game.length\n  guesses.push\
    \ 0 unless guess.length == ", "  game = game.dup\n  guess = guess.dup\n  guesses\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  guesses.each_index do |i|\n\
    \    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each_index do |i|\n   \
    \ if guesses[i] < 0\n      guesses[i] = guesses[i] + game.length\n    end\n  end\n\
    \  guesses\nend", "  game = game.to_a\n  guess = guess.to_a\n  result = []\n \
    \ game.length == guess.length\n  game.length.times do |i|\n    guess = guess[i]\n\
    \    diff = guess - game[i]\n    result.push(diff if diff != 0)\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  i = 0\n\
    \  while i < game.length\n    games[i] = game[i]\n    guesses[i] = guess[i]\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guess = guess[i]\n\
    \    game = games[i]\n    if guess == game\n      guesses[i] = 0\n      i += 1\n\
    \    elsif guess > game\n      guesses[i] = guess - game\n      i += 1\n    elsif\
    \ guess < game\n      guesses[i] = game - guess\n      i += 1\n    end\n  end\n\
    \  guesses.compact!\n  guesses.sort!\n  guesses.reverse!\n  guesses.each_with_index\
    \ do |guess, index|\n    if guess == 0\n      guesses[index] = 1\n    end\n  end\n\
    \  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n \
    \ i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result.push(0)\n      i += 1\n    elsif guess > game\n\
    \      result.push(abs(guess - game))\n      i += 1\n    elsif guess < game\n\
    \      result.push(abs(game - guess))\n      i += 1\n    else\n      result.push(0)\n\
    \      i += 1\n  end\n  result\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  game.each_with_index do |score, index|\n    guess = guess[index]\n\
    \    guess = guess.abs if guess == 0\n    result.push(abs(guess - score))\n  end\n\
    \  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  games.each do |i|\n    games[i] = game[i]\n\
    \  end\n  guesses.each do |i|\n    guesses[i] = guess[i]\n  end\n  guesses.each_with_index\
    \ do |g, i|\n    games.each_with_index do |s, j|\n      if g == s\n        guesses[i]\
    \ = 0\n      else\n        guesses[i] = abs(g - s)\n      end\n    end\n  end\n\
    \  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  guesses.each do |i|\n\
    \    guesses[i] = guess[i] if guess[i] != 0\n  end\n  guesses.each do |i|\n  \
    \  games[i] += guess[i]\n  end\n  games.each do |i|\n    games[i] = game[i] if\
    \ game[i] != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i]\
    \ != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n \
    \ end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each do |i|\n\
    \    games[i] = game[i] if game[i] != 0\n  end\n  games.each do |i|\n    games[i]\
    \ = game[i] if game[i] != 0\n  end\n  games.each do |i|\n    games[i] = game[i]\
    \ if game[i] != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i]\
    \ != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n \
    \ end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each do |i|\n\
    \    games[i] = game[i] if game[i] != 0\n  end\n  games.each do |i|\n    games[i]\
    \ = game[i] if game[i] != 0\n  end\n  games.each do |i|\n    games[i] = game[i]\
    \ if game[i] != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i]\
    \ != 0\n  end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n \
    \ end\n  games.each do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each\
    \ do |i|\n    games[i] = game[i] if game[i] != 0\n  end\n  games.each do |i",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \    else\n      result.push(abs(guess - game))\n    i += 1\n  end\n  result\n\
    end\n</cell>\n<code language=julia-0.5>", "  game = game.dup\n  guess = guess.dup\n\
    \  guesses = Array.new(guess.length)\n  guesses.fill(0)\n  \n  game.length.times\
    \ do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  \n  guesses.select { |i|\
    \ guess[i] < 0 }\nend", "  game.length, guess.length\n  game, guess = game.reverse,\
    \ guess.reverse\n  result = []\n  i = 0\n  while i < game.length\n    j = i\n\
    \    while j < guess.length and game[j] == guess[j]\n      j += 1\n    result.push(j\
    \ - i)\n    i = j\n  end\n  result.reverse\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if guess[i]\
    \ == game[i]\n      i += 1\n      continue\n    diff = guess[i] - game[i]\n  \
    \  result.push(diff)\n    i += 1\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.sort!\n\
    \  guesses.each_with_index do |g,i|\n    if g != 0\n      guesses[i] = g\n   \
    \ end\n  end\n  guesses.each_with_index do |g,i|\n    if g != 0\n      guesses[i]\
    \ = g\n    end\n  end\n  guesses.each_with_index do |g,i|\n    if g != 0\n   \
    \   guesses[i] = g\n    end\n  end\n  guesses.each_with_index do |g,i|\n    if\
    \ g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index do |g,i|\n\
    \    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with_index\
    \ do |g,i|\n    if g != 0\n      guesses[i] = g\n    end\n  end\n  guesses.each_with",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    guess = guess[i]\n    game = game[i]\n    if guess == game\n      result[i]\
    \ = 0\n    else\n      result[i] = abs(guess - game)\n    i += 1\n  end\n  result\n\
    end\n</cell>\n<code language=julia-1.0>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n\
    </cell>\n<code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [", "  game =\
    \ game.to_a\n  guess = guess.to_a\n  result = []\n  \n  game.length == guess.length\n\
    \  \n  for i in 0...game.length\n    \n    if game[i] == guess[i]\n      result.push(0)\n\
    \      next\n    end\n    \n    diff = game[i] - guess[i]\n    \n    if diff !=\
    \ 0\n      result.push(diff)\n    end\n  end\n  \n  result\nend", "    game =\
    \ game.to_a\n    guess = guess.to_a\n    guesses = guess.size\n    scores = []\n\
    \    i = 0\n    while i < guesses\n        score = game[i]\n        j = i\n  \
    \      while j < guesses\n            if game[j] == score\n                scores\
    \ << 0\n            else\n                scores << (abs(score - game[j]))\n \
    \           j += 1\n        i += 1\n    return scores\nend", "  game = game.to_a\n\
    \  guess = guess.to_a\n  result = []\n  game.each_with_index do |score, index|\n\
    \    guess[index] == score ? result[index] = 0 : result[index] = abs(guess[index]\
    \ - score)\n  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n \
    \ guesses = Array.new(guess.length)\n  guesses.fill(0)\n  \n  game.length.times\
    \ do |i|\n    guesses[i] = guess[i] - game[i]\n  end\n  \n  guesses.select { |i|\
    \ guess[i] < 0 }.map { |i| -guess[i] }\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    if j == guess.length\n      result[i]\
    \ = 0\n      i += 1\n      continue\n    diff = guess[j] - game[i]\n    if diff\
    \ < 0\n      result[i] = diff\n      i += 1\n    else\n      result[i] = abs(diff)\n\
    \      i += 1\n    end\n  end\n  result\nend", "  game = game.sort\n  guess =\
    \ guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    if game[i]\
    \ != guess[i]\n      result.push(guess[i] - game[i])\n      i += 1\n    else\n\
    \      i += 1\n  end\n  result\nend", "  guesses = guess.to_a\n  scores = game.to_a\n\
    \  guesses.each_with_index do |guess, i|\n    scores[i] = abs(guess - scores[i])\n\
    \  end\n  guesses\nend", "    game = game.to_a\n    guess = guess.to_a\n    guesses\
    \ = []\n    scores = []\n    guesses.push 0 unless guesses.include?(0)\n    scores.push\
    \ 0 unless scores.include?(0)\n    \n    game.length.times do |i|\n        guesses.push\
    \ 0 unless guesses.include?(guess[i])\n        scores.push 0 unless scores.include?(game[i])\n\
    \        guesses.push 0 unless guesses.include?(guess[i] - game[i])\n        scores.push\
    \ 0 unless scores.include?(guess[i] - game[i])\n    end\n    \n    guesses.map\
    \ do |i|\n        guesses.map do |j|\n            guesses.map do |k|\n       \
    \         guesses.map do |l|\n                    guesses.map do |m|\n       \
    \                 guesses.map do |n|\n                            guesses.map\
    \ do |o|\n                                guesses.map do |p|\n               \
    \                     guesses.map do |q|\n                                   \
    \     guesses.map do |r|\n                                            guesses.map\
    \ do |s|\n                                                guesses.map do |t|\n\
    \                                                    guesses.map do |u|\n    \
    \                                                    guesses.map do |v|\n    \
    \                                                        guesses.map do |w|\n\
    \                                                                guesses.map do\
    \ |x|\n                                                                    guesses.map\
    \ do |y|\n                                                                   \
    \     guesses.map do |z|\n                                                   \
    \                         guesses.map do |aa|\n                              \
    \                                                  guesses.map do |ab|\n     \
    \                                                                            \
    \   guesses.map do |ac|\n                                                    \
    \                                    guesses.map do |ad|\n                   \
    \                                                                         guesses.map\
    \ do |ae|\n                                                                  \
    \                              guesses.map do |af|\n                         \
    \                                                                           guesses.map\
    \ do |ag|\n                                                                  \
    \                                      guesses.map do |ah|\n                 \
    \                                                                            \
    \               guesses.map do |ai|\n                                        \
    \                                                                        guesses.map\
    \ do |aj|\n                                                                  \
    \                                                  guesses.map do |ak|\n     \
    \                                                                            \
    \                                       guesses.map do |al|\n                \
    \                                                                            \
    \                                guesses.map do |am|\n                       \
    \                                                                            \
    \                             guesses.map do |an|\n                          \
    \                                                                            \
    \                              guesses.map do |ao|\n                         \
    \                                                                            \
    \                                   guesses.map do |ap|\n                    \
    \                                                                            \
    \                                            guesses.map do |aq|\n           \
    \                                                                            \
    \                                                         guesses.map do |ar|\n\
    \                                                                            \
    \                                                                        guesses.map\
    \ do |as|\n                                                                  \
    \                                                                            \
    \          guesses.map do |at|\n                                             \
    \                                                                            \
    \                                   guesses.map do |au|\n                    \
    \                                                                            \
    \                                                                guesses.map do\
    \ |", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n      guesses[i]\
    \ = guesses[i] + game[i]\n    end\n  end\n  guesses.each_index do |i|\n    if\
    \ guesses[i] < 0\n      guesses[i] = -guesses[i]\n    end\n  end\n  guesses\n\
    end\n</cell>\n<cell>", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(guess.length)\n  games.each do |g|\n    games[g] = game.count(g)\n\
    \  end\n  guesses.each do |g|\n    guesses[g] = guess.count(g)\n  end\n  guesses.zip(games).map\
    \ { |g,g| g - g }\nend", "  guess = guess.sort\n  game = game.sort\n  guess =\
    \ guess.each_with_index.map { |e, i| [e, i] }.to_h\n  game = game.each_with_index.map\
    \ { |e, i| [e, i] }.to_h\n  guess = guess.map { |e| [e, 0] }\n  game = game.map\
    \ { |e| [e, 0] }\n  guess = guess.inject({}) { |h, e| h[e[0]] = e[1]; h }\n  game\
    \ = game.inject({}) { |h, e| h[e[0]] = e[1]; h }\n  guess = guess.map { |e| [e[0],\
    \ e[1]] }\n  game = game.map { |e| [e[0], e[1]] }\n  guess = guess.inject({})\
    \ { |h, e| h[e[0]] = e[1]; h }\n  game = game.inject({}) { |h, e| h[e[0]] = e[1];\
    \ h }\n  guess = guess.map { |e| [e[0], e[1]] }\n  game = game.map { |e| [e[0],\
    \ e[1]] }\n  guess = guess.inject({}) { |h, e| h[e[0]] = e[1]; h }\n  game = game.inject({})\
    \ { |h, e| h[e[0]] = e[1]; h }\n  guess = guess.map { |e| [e[0], e[1]] }\n  game\
    \ = game.map { |e| [e[0], e[1]] }\n  guess = guess.inject({}) { |h, e| h[e[0]]\
    \ = e[1]; h }\n  game = game.inject({}) { |h, e| h[e[0]] = e[1]; h }\n  guess\
    \ = guess.map { |e| [e[0], e[1]] }\n  game = game.map { |e| [e[0], e[1]] }\n \
    \ guess = guess.inject({}) { |h, e| h[e[0]] = e[1]; h }\n  game = game.inject({})\
    \ { |h, e| h[e[0]] = e[1]; h }\n  guess = guess.map { |e| [e[0], e[1]] }\n  game\
    \ = game.map { |e| [e[0], e[1]] }\n  guess = guess.inject({}) { |h, e| h[e[0]]\
    \ = e[1]; h }\n  game = game.inject({}) { |h, e| ", "  game = game.dup\n  guess\
    \ = guess.dup\n  guesses = Array.new(guess.length)\n  games = Array.new(game.length)\n\
    \  guesses.zip(games).each do |a,b|\n    games[a] = b\n  end\n  guesses.zip(games).each\
    \ do |a,b|\n    guesses[a] = b if a == b\n  end\n  guesses.zip(games).each do\
    \ |a,b|\n    guesses[a] = b if a != b\n  end\n  guesses.zip(games).each do |a,b|\n\
    \    guesses[a] = b if a > b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a]\
    \ = b if a < b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b\
    \ if a >= b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if\
    \ a <= b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if a !=\
    \ b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if a > b\n\
    \  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if a < b\n  end\n\
    \  guesses.zip(games).each do |a,b|\n    guesses[a] = b if a >= b\n  end\n  guesses.zip(games).each\
    \ do |a,b|\n    guesses[a] = b if a <= b\n  end\n  guesses.zip(games).each do\
    \ |a,b|\n    guesses[a] = b if a != b\n  end\n  guesses.zip(games).each do |a,b|\n\
    \    guesses[a] = b if a > b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a]\
    \ = b if a < b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b\
    \ if a >= b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if\
    \ a <= b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] = b if a !=\
    \ b\n  end\n", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  games = Array.new(game.length)\n  games.fill(0)\n  i = 0\n\
    \  while i < game.length\n    games[i] = game[i]\n    guesses[i] = guess[i]\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    games[i] += 1\n   \
    \ guesses[i] += 1\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n    games[i]\
    \ -= 1\n    guesses[i] -= 1\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= games[i]\n    end\n    i += 1\n  end\n  i = 0\n  while i < guess.length\n\
    \    if games[i] != guesses[i]\n      games[i] -= guesses[i]\n      guesses[i]\
    \ -= ", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length,\
    \ -1)\n  scores = Array.new(guess.length, 0)\n  guesses.zip(scores) { |g,s| guesses[g]\
    \ = s if g == guess }\n  guesses.zip(scores) { |g,s| guesses[g] = 0 if g != guess\
    \ }\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n  result = []\n\
    \  i = 0\n  while i < guess.length\n    guess = guess[i]\n    game = game[i]\n\
    \    if guess == game\n      result.push(0)\n    else\n      result.push(abs(guess\
    \ - game))\n    i += 1\n  end\n  result\nend", "  game = game.sort\n  guess =\
    \ guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n  \
    \  while j < guess.length and guess[j] == game[i]\n      j += 1\n    guess = guess[j..-1]\n\
    \    guess = guess.sort\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = guess.reverse\n\
    \    guess = guess.reverse\n    guess = guess.reverse\n    guess = gue", "  game\
    \ = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    j = i\n    while j < guess.length and guess[j] == game[i]\n      j += 1\n\
    \    guess = guess[j..-1]\n    game = game[i..j]\n    result.push((guess.length\
    \ - i).abs)\n    i += 1\n  end\n  result\nend\n</cell>\n<code language=julia-1.0>\n\
    @time compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n<code language=julia-1.0>\n\
    @time compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n</cell>\n", "    game = game.sort\n\
    \    guess = guess.sort\n    diff = []\n    i = 0\n    while i < guess.length\n\
    \        if game[i] == guess[i]\n            diff[i] = 0\n        else\n     \
    \       diff[i] = abs(game[i] - guess[i])\n        i += 1\n    return diff\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nI like the way you used `sort` instead of\
    \ `sort!`\n<|/ c |>\n<| c |>\nI like how you used `sort` instead of `sort!`\n\
    <|/ c |>\n<| c |>\nI like how you used `sort` instead of `sort!`\n<|/ c |>\n<|\
    \ c |>\nI like how you used `sort` instead of `sort!`\n<|/ c |>\n<| c |>\nI like\
    \ how you used `sort` instead of `sort!`\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.select { |i| guesses[i] > 0 }.map { |i| guesses[i] - i }\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_index do |i|\n    guesses[i] = guesses[i].abs\n  end\n\
    \  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_index do |i|\n    if guesses[i] == 0\n      guesses[i]\
    \ = guesses[i] + game[i]\n    end\n  end\n  guesses.each_index do |i|\n    if\
    \ guesses[i] > 0\n      guesses[i] = guesses[i] - guesses[i]\n    end\n  end\n\
    \  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each_index do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_index do |i|\n    if guesses[i] < 0\n      guesses[i] =\
    \ -guesses[i]\n    end\n  end\n  guesses.each_index do |i|\n    if guesses[i]\
    \ > 0\n      guesses[i] = guesses[i] - game[i]\n    end\n  end\n  guesses.each_index\
    \ do |i|\n    if guesses[i] == 0\n      guesses[i] = 0\n    end\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each do |i|\n    if guesses[i] > 0\n      guesses[i] = guesses[i]\n\
    \    elsif guesses[i] < 0\n      guesses[i] = -guesses[i]\n    end\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = []\n  scores = []\n\
    \  \n  while game.size != 0\n    guesses.push guess.pop\n    scores.push game.pop\n\
    \  end\n  \n  guesses.reverse!\n  scores.reverse!\n  \n  guesses.each do |guess|\n\
    \    index = scores.index(guess)\n    game[index] += 1\n  end\n  \n  game\nend",
  "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n \
    \ guesses.fill(0)\n  guesses.each do |i|\n    game[i] = guess[i] unless game[i]\
    \ == 0\n  end\n  guesses.each_with_index do |i, index|\n    guesses[index] = game[i]\
    \ - guess[index] if game[index] != 0\n  end\n  guesses.each_with_index do |i,\
    \ index|\n    guesses[index] = i if guess[index] == 0\n  end\n  guesses\nend",
  "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess = guess[index]\n    if guess == score\n      result\
    \ << 0\n    elsif guess > score\n      result << abs(guess - score)\n    end\n\
    \  end\n  result\nend\n</cell>\n<cell>", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    if game[i] == guess[i]\n\
    \      i += 1\n    else\n      result[i] = abs(game[i] - guess[i])\n      i +=\
    \ 1\n    end\n  end\n  result\nend", "  game = game.to_a\n  guess = guess.to_a\n\
    \  result = []\n  \n  game.length == guess.length\n  \n  game.each_with_index\
    \ do |score, index|\n    guess[index] == score ? result[index] = 0\n    guess[index]\
    \ > score ? result[index] = guess[index] - score\n    guess[index] < score ? result[index]\
    \ = score - guess[index]\n  end\n  \n  result\nend\n</cell>\n<code language=julia-1.0>",
  "  game = game.dup\n  guess = guess.dup\n  guesses = []\n  scores = []\n  i = 0\n\
    \  while i < guess.length\n    guesses.push(guess[i])\n    scores.push(game[i])\n\
    \    i += 1\n  end\n  i = 0\n  while i < guess.length\n    guess = guesses[i]\n\
    \    score = scores[i]\n    if guess == score\n      guesses[i] = 0\n    else\n\
    \      guesses[i] = abs(guess - score)\n    end\n    i += 1\n  end\n  guesses.reverse\n\
    \  scores.reverse\n  guesses.zip(scores).map { |(guess, score)| guess }\nend",
  "  game = game.to_a\n  guess = guess.to_a\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    if guess[index] == score\n      result << 0\n    else\n\
    \      result << (guess[index] - score)\n    end\n  end\n  result\nend", "  game\
    \ = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n  games\
    \ = Array.new(guess.length)\n  guesses.fill(0)\n  games.fill(0)\n  guesses.zip(games).each\
    \ do |a,b|\n    games[a] += b\n  end\n  games.zip(guesses).each do |a,b|\n   \
    \ guesses[a] += b\n  end\n  guesses.zip(games).each do |a,b|\n    guesses[a] =\
    \ 0 if guesses[a] > b\n    guesses[a] = b if guesses[a] < b\n  end\n  guesses\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.each_with_index do |value, i|\n    if value == 0\n      guesses[i]\
    \ = 0\n    else\n      guesses[i] = abs(guesses[i] - value)\n    end\n  end\n\
    \  guesses\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(guess.length)\n  guesses.each do |i|\n    guesses[i] = guess[i]\
    \ < game[i] ? guess[i] - game[i] : 0\n  end\n  guesses.each do |i|\n    guesses[i]\
    \ = guess[i] < game[i] ? guess[i] - game[i] : guess[i]\n  end\n  guesses.sort\n\
    \  guesses.reverse\n  guesses.each do |i|\n    guesses[i] = guess[i] < game[i]\
    \ ? guess[i] - game[i] : guess[i]\n  end\n  guesses\nend", "  game = game.to_a\n\
    \  guess = guess.to_a\n  result = []\n  for i in 0...guess.length\n    diff =\
    \ guess[i] - game[i]\n    if diff < 0\n      diff *= -1\n      result[i] = diff\n\
    \    else\n      result[i] = 0\n    end\n  end\n  result\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time compare([1,2,3,4,5,1], [1,2,3,4,2,-2])\n</cell>\n\
    <code language=julia-1.0>\n@time compare([0,5,0,0,0,4], [4,1,1,0,0,-2])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a list of\
    \ words in that string. \nThe function should ignore all non-alphabetic characters\
    \ and split on whitespace.\nThe function should ignore all empty strings.\nThe\
    \ function should ignore all words that are shorter than 3 characters.\nThe function\
    \ should ignore all words that are longer than 20 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain non-alphabetic characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain non-alphabetic characters and that contain whitespace.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain non-alphabetic characters and that contain\
    \ whitespace and that contain punctuation.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ non-alphabetic characters and that contain whitespace and that contain punctuation\
    \ and that contain digits.\nThe function should ignore all words that are longer\
    \ than 3 characters and shorter than 20 characters and that contain non-alphabetic\
    \ characters and that contain whitespace and that contain punctuation and that\
    \ contain digits and that contain uppercase letters.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain non-alphabetic characters and that contain whitespace and that\
    \ contain punctuation and that contain digits and that contain uppercase letters\
    \ and that contain lowercase letters.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ non-alphabetic characters and that contain whitespace and that contain punctuation\
    \ and that contain digits and that contain uppercase letters and that contain\
    \ lowercase letters and that contain digits.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ non-alphabetic characters and that contain whitespace and that contain punctuation\
    \ and that contain digit", "  game = game.dup\n  guess = guess.dup\n  result =\
    \ []\n  guesses = guess.size\n  scores = game.size\n  \n  while guesses > 0\n\
    \    guesses = guesses - 1\n    guess = guess[guesses]\n    score = game[guesses]\n\
    \    \n    if guess == score\n      result = [score]\n      guesses = guesses\
    \ - 1\n      scores = scores - 1\n      break\n    else\n      diff = guess -\
    \ score\n      result = [diff]\n      guesses = guesses - 1\n      scores = scores\
    \ - 1\n    end\n  end\n  \n  return result\nend", "  game = game.sort\n  guess\
    \ = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    j = i\n\
    \    while j < guess.length and guess[j] == game[i]\n      j += 1\n    if j ==\
    \ guess.length\n      result[i] = 0\n      i += 1\n      continue\n    diff =\
    \ guess[j] - game[i]\n    result[i] = diff\n    i += 1\n  end\n  result\nend",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n\
    \    if game[i] == guess[i]\n      result[i] = 0\n      i += 1\n    else\n   \
    \   result[i] = abs(game[i] - guess[i])\n      i += 1\n  end\n  result\nend",
  "  game = game.sort\n  guess = guess.sort\n  result = []\n  game.each_with_index\
    \ do |score, index|\n    guess = guess[index]\n    if guess == score\n      result\
    \ << 0\n    elsif guess > score\n      result << guess - score\n    else\n   \
    \   result << abs(guess - score)\n    end\n  end\n  result\nend", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  game = game.each_with_index do |score, index|\n    guesses[index] = score -\
    \ guess[index]\n  end\n  guesses.each_with_index do |score, index|\n    guesses[index]\
    \ = 0 if guess[index] == score\n  end\n  guesses\nend", "  game = game.sort\n\
    \  guess = guess.sort\n  result = []\n  i = 0\n  while i < guess.length\n    guess\
    \ = guess[i]\n    game = game[i]\n    if guess == game\n      result.push(0)\n\
    \    else\n      result.push(abs(guess - game))\n    i += 1\n  end\n  result\n\
    end", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.zip(game).each do |(guess, score)|\n    guesses[guess]\
    \ += 1 if guess == score\n  end\n  guesses.map { |guess| guess == 0 ? 0 : abs(guess\
    \ - score) }\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  score = 0\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n   \
    \ score += guesses[i]\n  end\n  guesses.each do |i|\n    guesses[i] = Math.abs\
    \ guesses[i]\n  end\n  guesses\nend", "  game = game.sort\n  guess = guess.sort\n\
    \  result = []\n  i = 0\n  while i < guess.length\n    j = i\n    while j < guess.length\
    \ and guess[j] == game[i]\n      j += 1\n    if j == guess.length\n      result\
    \ << 0\n    else\n      result << abs(guess[j] - game[i])\n    end\n    i += 1\n\
    \  end\n  result\nend", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  games = Array.new(game.length)\n  guesses.zip(games).each do |g, g|\n    games[g]\
    \ = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n\
    \  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n\
    \    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g]\
    \ = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n\
    \  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n\
    \    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g]\
    \ = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n\
    \  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n\
    \    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g]\
    \ = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n\
    \  guesses.zip(games).each do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each\
    \ do |g, g|\n    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n\
    \    guesses[g] = g\n  end\n  guesses.zip(games).each do |g, g|\n    guesses[g]\
    \ = g\n", "  game = game.dup\n  guess = guess.dup\n  guesses = Array.new(guess.length)\n\
    \  guesses.fill(0)\n  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n\
    \  end\n  guesses.max\nend", "  guesses = guess.dup\n  scores = game.dup\n  guesses.each_with_index\
    \ do |guess, i|\n    scores[i] = 0 if guess == scores[i]\n    scores[i] = guess\
    \ - scores[i] if guess < scores[i]\n  end\n  scores.compact\nend\n</code>\n<|/\
    \ a tags=ruby,arrays |>\n<| c |>\nI like the use of each_with_index here\n<|/\
    \ c |>\n<| c |>\nI like your use of each_with_index here\n<|/ c |>\n<| c |>\n\
    I like your use of each_with_index here\n<|/ c |>\n<| c |>\nI like your use of\
    \ each_with_index here\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  game = game.dup\n\
    \  guess = guess.dup\n  guesses = Array.new(guess.length)\n  guesses.fill(0)\n\
    \  guesses.each do |i|\n    guesses[i] = game[i] - guess[i]\n  end\n  guesses.each\
    \ do |i|\n    if guesses[i] == 0\n      guesses[i] = guesses[i]\n    else\n  \
    \    guesses[i] = guesses[i] - game[i]\n    end\n  end\n  guesses\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
