name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\"\
  )\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"\
  quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n  vowel_found = false\n  vowel_found = false\n  vowel_found =\
    \ false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  consonants.each do |c|\n    vowels.each do |v|\n      if word.include?(v)\n\
    \        return v\n      end\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ %w(a e i o u)\n  word.split(\"\").reverse.each_with_index do |letter, index|\n\
    \    if vowels.include?(letter)\n      return letter\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiouy]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")", "  vowels = %w(a e i o u)\n  word.downcase!\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0\n      break\n    end\n  end\n\
    \  word[index..-1]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    if word.index(vowel, word.length - vowel.length)\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.empty?\
    \ ? \"\" : vowels.find {|vowel| word.include?(vowel) }\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0\n      break\n    end\n  end\n\
    \  word[index..-1]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos_right\
    \ = word.index(vowel, vowel_pos + 1)\n      if vowel_pos_right > -1\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      vowel_start = index\n      vowel_end = index\n      break\n  \
    \  end\n  end\n  \n  vowel_start = word.length\n  vowel_end = word.length\n  \n\
    \  vowel_start = word.length\n  vowel_end = word.length\n  \n  vowels.each do\
    \ |vowel|\n    index = word.index(vowel)\n    if index != nil\n      vowel_start\
    \ = index\n      vowel_end = index\n      break\n    end\n  end\n  \n  if vowel_start\
    \ == nil\n    return \"\"\n  end\n  \n  if vowel_end == nil\n    return \"\"\n\
    \  end\n  \n  if vowel_start > vowel_end\n    vowel_start, vowel_end = vowel_end,\
    \ vowel_start\n  end\n  \n  word = word.gsub(vowel, \"\")\n  \n  vowel_start =\
    \ word.length\n  vowel_end = word.length\n  \n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != nil\n      vowel_start = index\n      vowel_end\
    \ = index\n      break\n    end\n  end\n  \n  if vowel_start == nil\n    return\
    \ \"\"\n  end\n  \n  if vowel_end == nil\n    return \"\"\n  end\n  \n  if vowel_start\
    \ > vowel_end\n    vowel_start, vowel_end = vowel_end, vowel_start\n  end\n  \n\
    \  word = word.gsub(vowel, \"\")\n  \n  vowel_start = word.length\n  vowel_end\
    \ = word.length\n  \n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index != nil\n      vowel_start = index\n      vowel_end = index\n   \
    \   break\n    end\n  end\n  \n  if vowel_start == nil\n    return \"\"\n  end\n\
    \  \n  if vowel_end == nil\n    return \"\"\n  end\n  \n  if vowel_start > vowel_end\n\
    \    vowel_start, vowel_end = vowel_end, vowel_start\n  end\n  \n  word = word.gsub(vowel,\
    \ \"\")\n  \n  vowel_start = word.length\n  vowel_end = word.length\n  \n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil\n      vowel_start\
    \ = index\n      vowel_end = index\n      break\n    end\n  end\n  \n  if vowel_start\
    \ == nil\n    return \"\"\n  end\n  \n  if vowel", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word\n\
    end", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    break if vowel.size < 2\n    break if vowel.size > 3\n    break\
    \ if vowel.first == vowel.last\n  end\n  vowel.first if vowel\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nI like the idea of using scan, but this doesn't\
    \ work if the word is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<|\
    \ c |>\nI edited the answer to fix the bug. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\nI like the idea of using scan, but this doesn't work if the word\
    \ is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nI edited the\
    \ answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like\
    \ the idea of using scan, but this doesn't work if the word is \"ab\". It returns\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\"\
    )\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n\
    \  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count\
    \ -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -=\
    \ word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
