name: HumanEval_118_get_closest_vowel
language: rb
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\"\
  )\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"\
  quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_closest_vowel\n\
  \    candidate = method(:get_closest_vowel)\n    assert_equal(\"u\", candidate.call(\"\
  yogurt\"))\n    assert_equal(\"u\", candidate.call(\"full\"))\n    assert_equal(\"\
  \", candidate.call(\"easy\"))\n    assert_equal(\"\", candidate.call(\"eAsy\"))\n\
  \    assert_equal(\"\", candidate.call(\"ali\"))\n    assert_equal(\"a\", candidate.call(\"\
  bad\"))\n    assert_equal(\"o\", candidate.call(\"most\"))\n    assert_equal(\"\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"\", candidate.call(\"ba\"))\n    assert_equal(\"\
  \", candidate.call(\"quick\"))\n    assert_equal(\"i\", candidate.call(\"anime\"\
  ))\n    assert_equal(\"\", candidate.call(\"Asia\"))\n    assert_equal(\"o\", candidate.call(\"\
  Above\"))\n  end\nend\n"
completions: ["  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n  vowel_found = false\n  vowel_found = false\n  vowel_found =\
    \ false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found\
    \ = false\n  vowel_found = false\n  vowel_found = false\n  vowel_found = false\n\
    \  ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  consonants.each do |c|\n    vowels.each do |v|\n      if word.include?(v)\n\
    \        return v\n      end\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ %w(a e i o u)\n  word.split(\"\").reverse.each_with_index do |letter, index|\n\
    \    if vowels.include?(letter)\n      return letter\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiouy]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")", "  vowels = %w(a e i o u)\n  word.downcase!\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0\n      break\n    end\n  end\n\
    \  word[index..-1]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    if word.index(vowel, word.length - vowel.length)\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.empty?\
    \ ? \"\" : vowels.find {|vowel| word.include?(vowel) }\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index > 0\n      break\n    end\n  end\n\
    \  word[index..-1]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count +=\
    \ word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"\
    i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\"\
    )\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n\
    \  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count\
    \ -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos_right\
    \ = word.index(vowel, vowel_pos + 1)\n      if vowel_pos_right > -1\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n    if index\
    \ != nil\n      vowel_start = index\n      vowel_end = index\n      break\n  \
    \  end\n  end\n  \n  vowel_start = word.length\n  vowel_end = word.length\n  \n\
    \  vowel_start = word.length\n  vowel_end = word.length\n  \n  vowels.each do\
    \ |vowel|\n    index = word.index(vowel)\n    if index != nil\n      vowel_start\
    \ = index\n      vowel_end = index\n      break\n    end\n  end\n  \n  if vowel_start\
    \ == nil\n    return \"\"\n  end\n  \n  if vowel_end == nil\n    return \"\"\n\
    \  end\n  \n  if vowel_start > vowel_end\n    vowel_start, vowel_end = vowel_end,\
    \ vowel_start\n  end\n  \n  word = word.gsub(vowel, \"\")\n  \n  vowel_start =\
    \ word.length\n  vowel_end = word.length\n  \n  vowels.each do |vowel|\n    index\
    \ = word.index(vowel)\n    if index != nil\n      vowel_start = index\n      vowel_end\
    \ = index\n      break\n    end\n  end\n  \n  if vowel_start == nil\n    return\
    \ \"\"\n  end\n  \n  if vowel_end == nil\n    return \"\"\n  end\n  \n  if vowel_start\
    \ > vowel_end\n    vowel_start, vowel_end = vowel_end, vowel_start\n  end\n  \n\
    \  word = word.gsub(vowel, \"\")\n  \n  vowel_start = word.length\n  vowel_end\
    \ = word.length\n  \n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index != nil\n      vowel_start = index\n      vowel_end = index\n   \
    \   break\n    end\n  end\n  \n  if vowel_start == nil\n    return \"\"\n  end\n\
    \  \n  if vowel_end == nil\n    return \"\"\n  end\n  \n  if vowel_start > vowel_end\n\
    \    vowel_start, vowel_end = vowel_end, vowel_start\n  end\n  \n  word = word.gsub(vowel,\
    \ \"\")\n  \n  vowel_start = word.length\n  vowel_end = word.length\n  \n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil\n      vowel_start\
    \ = index\n      vowel_end = index\n      break\n    end\n  end\n  \n  if vowel_start\
    \ == nil\n    return \"\"\n  end\n  \n  if vowel", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  word\n\
    end", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    break if vowel.size < 2\n    break if vowel.size > 3\n    break\
    \ if vowel.first == vowel.last\n  end\n  vowel.first if vowel\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nI like the idea of using scan, but this doesn't\
    \ work if the word is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<|\
    \ c |>\nI edited the answer to fix the bug. Thanks for pointing it out.\n<|/ c\
    \ |>\n<| c |>\nI like the idea of using scan, but this doesn't work if the word\
    \ is \"ab\". It returns \"a\" instead of \"\".\n<|/ c |>\n<| c |>\nI edited the\
    \ answer to fix the bug. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI like\
    \ the idea of using scan, but this doesn't work if the word is \"ab\". It returns\
    \ \"a\" instead of \"\".\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\"\
    )\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n\
    \  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count\
    \ -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -=\
    \ word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= 1\n  vowels_count /=\
    \ 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count -= 1\n  vowels_count\
    \ /= 2\n  vowels_count -= 1\n  vowels_count /= 2\n  vowels_count ", "  vowels\
    \ = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join}]+/).each do\
    \ |vowel|\n    break if vowels.index(vowel) == word.size - 1\n  end\n  vowel\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel)\
    \ == word.length - 1\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = %w(a e i o u)\n  word.chars.reverse_each.with_index do |char, index|\n\
    \    break if index == 0\n    break if index == word.length - 1\n    break if\
    \ vowels.include?(char)\n    break if vowels.include?(word[index + 1])\n    break\
    \ if vowels.include?(word[index - 1])\n    break if vowels.include?(word[index\
    \ - 2])\n    break if vowels.include?(word[index + 2])\n    break if vowels.include?(word[index\
    \ - 3])\n    break if vowels.include?(word[index + 3])\n    break if vowels.include?(word[index\
    \ - 4])\n    break if vowels.include?(word[index + 4])\n    break if vowels.include?(word[index\
    \ - 5])\n    break if vowels.include?(word[index + 5])\n    break if vowels.include?(word[index\
    \ - 6])\n    break if vowels.include?(word[index + 6])\n    break if vowels.include?(word[index\
    \ - 7])\n    break if vowels.include?(word[index + 7])\n    break if vowels.include?(word[index\
    \ - 8])\n    break if vowels.include?(word[index + 8])\n    break if vowels.include?(word[index\
    \ - 9])\n    break if vowels.include?(word[index + 9])\n    break if vowels.include?(word[index\
    \ - 10])\n    break if vowels.include?(word[index + 10])\n    break if vowels.include?(word[index\
    \ - 11])\n    break if vowels.include?(word[index + 11])\n    break if vowels.include?(word[index\
    \ - 12])\n    break if vowels.include?(word[index + 12])\n    break if vowels.include?(word[index\
    \ - 13])\n    break if vowels.include?(word[index + 13])\n    break if vowels.include?(word[index\
    \ - 14])\n    break if vowels.include?(word[index + 14])\n    break if vowels.include?(word[index\
    \ - 15])\n    break if vowels.include?(word[index + 15])\n    break if vowels.include?(word[index\
    \ - 16])\n    break if vowels.include?(word[index + 16])\n    break if vowels.include?(word[index\
    \ - 17])\n    break if vowels.include?(word[index + 17])\n    ", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  word\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(/[#{vowel}]+/).each do |consonant|\n      consonants.each\
    \ do |consonant|\n        if consonant > vowel\n          return consonant\n \
    \       end\n      end\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\"\
    )\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n\
    \  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      return vowel if word[vowel_pos\
    \ + 1] == vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  consonants = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n  word.split(\"\
    \").each do |letter|\n    vowels.each do |vowel|\n      if letter == vowel\n \
    \       return letter\n      end\n    end\n    consonants.each do |consonant|\n\
    \      if letter == consonant\n        return letter\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    break if vowels.index(vowel) == word.index(vowel)\n  end\n \
    \ word.scan(/[#{vowels.join('|')}]/).first\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.chars.each do |char|\n    vowels.each do |vowel|\n      if vowel.downcase\
    \ == char\n        return vowel\n      end\n    end\n  end\n  return \"\"\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel", "  vowels = %w(a\
    \ e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word =\
    \ word.split(vowel).last\n  end\n  consonants.each do |consonant|\n    word =\
    \ word.split(consonant).first\n  end\n  word\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n    if vowel_pos\
    \ > 0 && vowel_pos < word.length - 1\n      return vowel if word[vowel_pos + 1]\
    \ == vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  ",
  "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word.scan(/[#{vowel}]+/).each do |c|\n      consonants.each do |consonant|\n\
    \        if c =~ /[#{consonant}]+/\n          return vowel\n        end\n    \
    \  end\n    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.scan(/[#{vowels.join('|')}]/).each\
    \ do |vowel|\n    vowel = vowel.downcase\n    vowels.each do |v|\n      if vowel.include?(v)\n\
    \        return v\n      end\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ %w(a e i o u)\n  consonants = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    if vowels.include?(char) || consonants.include?(char) || char\
    \ == ' '\n      vowels.include?(char) ? vowels.index(i) : consonants.index(i)\n\
    \    end\n  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index > 0\n      break\n    end\n  end\n  return \"\" if index == 0\n\
    \  index = word.rindex(vowel)\n  return \"\" if index == 0\n  return word[index\
    \ + 1]\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n \
    \ return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n   \
    \ word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, ",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word.split(\"\").last\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/u).count\n  vowels_count += word.scan(/[aeiouy]/u).count\n\
    \  vowels_count += word.scan(/[aeiou]/y).count\n  vowels_count += word.scan(/[aeiouy]/y).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/u).count\n  vowels_count += word.scan(/[aeiouy]/u).count\n\
    \  vowels_count += word.scan(/[aeiou]/y).count\n  vowels_count += word.scan(/[aeiouy]/y).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/u).count\n  vowels_count += word.scan(/[aeiouy]/u).count\n\
    \  vowels_count += word.scan(/[aeiou]/y).count\n  vowels_count += word.scan(/[aeiouy]/y).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/u).count\n  vowels_count += word.scan(/[aeiouy]/u).count\n\
    \  vowels_count += word.scan(/[aeiou]/y).count\n  vowels_count += word.scan(/[aeiouy]/y).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/u).count\n  vowels_", "  vowels = %w(a e\
    \ i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n      return\
    \ vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != -1 && index != word.length\
    \ - 1\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  word.downcase!\n  word.chars.each do |c|\n    vowels.each do |vowel|\n\
    \      if c == vowel\n        return vowel\n      end\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found =\
    \ false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_found = vowels.find {\
    \ |vowel| word.include?(vowel) }\n  if vowel_found\n    vowel_start = word.index(vowel_found)\n\
    \    vowel_end = word.index(vowel_found) + vowel_found.length\n  end\n  if vowel_start\
    \ && vowel_end\n    word.slice!(vowel_start, vowel_end)\n  end\n  return word\n\
    end", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like your solution,\
    \ but I wonder how it compares to mine. My solution is more concise and easier\
    \ to read. Also, your solution doesn't take into account the fact that there might\
    \ be more than one vowel between the two consonants.\n<|/ c |>\n<| c |>\nI like\
    \ your solution as well, but I wonder how it compares to mine. My solution is\
    \ more concise and easier to read. Also, your solution doesn't take into account\
    \ the fact that there might be more than one vowel between the two consonants.\n\
    <|/ c |>\n<| c |>\nI like your solution as well, but I wonder how it compares\
    \ to mine. My solution is more concise and easier to read. Also, your solution\
    \ doesn't take into account the fact that there might be more than one vowel between\
    \ the two consonants.\n<|/ c |>\n<| c |>\nI like your solution as well, but I\
    \ wonder how it compares to mine. My solution is more concise and easier to read.\
    \ Also, your solution doesn't take into account the fact that there might be more\
    \ than one vowel between the two consonants.\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well, but I wonder how it compares to mine. My solution is more concise and\
    \ easier to read. Also, your solution doesn't take into account the fact that\
    \ there might be more than one vowel between the two consonants.\n<|/ c |>\n<|\
    \ a tags=ruby,string |>\n<code>", "  vowels = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    index = word.index(vowel)\n    if index != nil\n      break\n \
    \   end\n  end\n  if index == nil\n    return \"\"\n  end\n  index = index + 1\n\
    \  while index < word.length\n    vowels.each do |vowel|\n      index = word.index(vowel,\
    \ index)\n      if index != nil\n        break\n      end\n    end\n    if index\
    \ == nil\n      return \"\"\n    end\n    index = index + 1\n  end\n  return word[index,\
    \ 1]\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  consonants.each do |consonant|\n\
    \    word = word.split(consonant).first\n  end\n  word\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiouy]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")", "  vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"\
    a\")\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\"\
    )\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n\
    \  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count\
    \ -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -=\
    \ word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n\
    \  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count\
    \ -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count -=\
    \ word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"\
    i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"u\"\
    )\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\")\n\
    \  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n  vowels_count\
    \ += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count +=\
    \ word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"\
    o\")\n  vowels_count += word.count(\"u\")\n  vowels_count += word.count(\"A\"\
    )\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n\
    \  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count\
    \ += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count += word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").downcase\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  return word if word.length == 0\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, index|\n    if index == word.length - 1\n      return char if char\
    \ == \"a\"\n      return char if char == \"e\"\n      return char if char == \"\
    i\"\n      return char if char == \"o\"\n      return char if char == \"u\"\n\
    \    end\n  end\n  return \"\"\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c\
    \ |>\nThis doesn't work if the word is `\"a\"`\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't require the word being `\"a\"`\n<|/ c |>\n<| c |>\nI added a version\
    \ that doesn't require the word being `\"a\"`\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.downcase!\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[^", "  vowels = %w(a e\
    \ i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 and vowel_pos < word.length - 1\n      consonant_pos = word.length\
    \ - vowel_pos\n      consonant_pos = consonant_pos - 1\n      consonant_pos =\
    \ consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      consonant_pos = consonant_pos - 1\n      consonant_pos\
    \ = consonant_pos - 1\n      ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word = word.downcase\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  ", "  vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n  vowel_positions = []\n  vowel_positions.push word.rindex(\"\
    a\")\n  vowel_positions.push word.rindex(\"e\")\n  vowel_positions.push word.rindex(\"\
    i\")\n  vowel_positions.push word.rindex(\"o\")\n  vowel_positions.push word.rindex(\"\
    u\")\n  vowel_positions.push word.rindex(\"A\")\n  vowel_positions.push word.rindex(\"\
    E\")\n  vowel_positions.push word.rindex(\"I\")\n  vowel_positions.push word.rindex(\"\
    O\")\n  vowel_positions.push word.rindex(\"U\")\n  vowel_positions.push word.rindex(\"\
    a\")\n  vowel_positions.push word.rindex(\"e\")\n  vowel_positions.push word.rindex(\"\
    i\")\n  vowel_positions.push word.rindex(\"o\")\n  vowel_positions.push word.rindex(\"\
    u\")\n  vowel_positions.push word.rindex(\"A\")\n  vowel_positions.push word.rindex(\"\
    E\")\n  vowel_positions.push word.rindex(\"I\")\n  vowel_positions.push word.rindex(\"\
    O\")\n  vowel_positions.push word.rindex(\"U\")\n  vowel_positions.push word.rindex(\"\
    a\")\n  vowel_positions.push word.rindex(\"e\")\n  vowel_positions.push word.rindex(\"\
    i\")\n  vowel_positions.push word.rindex(\"o\")\n  vowel_positions.push word.rindex(\"\
    u\")\n  vowel_positions.push word.rindex(\"A\")\n  vowel_positions.push word.rindex(\"\
    E\")\n  vowel_positions.push word.rindex(\"I\")\n  vowel_positions.push word.rindex(\"\
    O\")\n  vowel_positions.push word.rindex(\"U\")\n  vowel_positions.push word.rindex(\"\
    a\")\n  vowel_positions.push word.rindex(\"e\")\n  vowel_positions.push word.rindex(\"\
    i\")\n  vowel_positions.push word.rindex(\"o\")\n  vowel_positions.push word.rindex(\"\
    u\")\n  vowel_positions.push word.rindex(\"A\")\n  vowel_positions.push word.rindex(\"\
    E\")\n  vowel_positions.push word.rindex(\"I\")\n  vowel_", "  vowels = %w(a e\
    \ i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z)\n  vowels.each do |vowel|\n    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = vowels.length\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  return \"\" if word.empty?\n  word.each_char.with_index\
    \ do |char, i|\n    return char if char == vowels[(i+1)%vowels.length]\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.downcase!\n\
    \  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/,\
    \ \"\")\n  word.gsub!(/[^aeiou]/, \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  word.gsub!(/[^aeiou]/,\
    \ \"\")\n  word.gsub!(/[aeiou]/, \"\")\n  ", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowel_found = false\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n \
    \ vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position\
    \ = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions = []\n\
    \  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  vowel_positions\
    \ = []\n  vowel_position = 0\n  vowel_positions = []\n  vowel_position = 0\n  ",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions = []\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push\
    \ word.length - 1\n  vowel_position", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.scan(/[#{vowels.join('|')}]/).each do |vowel|\n    vowels.each do |vowel|\n\
    \      return vowel if word.index(vowel, word.length - vowel.length)\n    end\n\
    \  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word.scan(/[#{vowel}]+/).each do |consonant|\n\
    \      word.scan(/[#{consonant}]+/).each do |consonant|\n        return vowel\
    \ if word.index(consonant) == word.rindex(consonant)\n      end\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").empty? ?\
    \ \"\" : vowels.find { |vowel| word.index(vowel) }\nend", "  vowels = %w(a e i\
    \ o u)\n  consonants = %w(a e i o u)\n  vowel_positions = []\n  consonant_positions\
    \ = []\n  vowel_positions.push word.length\n  consonant_positions.push word.length\n\
    \  while consonant_positions.length > 0\n    position = consonant_positions.shift\n\
    \    if consonants.include?(word[position])\n      consonant_positions.push position\n\
    \      vowel_positions.push position\n    end\n  end\n  vowel_positions.each do\
    \ |position|\n    if vowels.include?(word[position])\n      return word[position]\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count(\"u\")\n  vowels_count -= 1\n  vowels_count -=\
    \ 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowel", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(/#{vowel}+/).each do |consonant|\n      consonants.each\
    \ do |consonant2|\n        if consonant == consonant2\n          return vowel\n\
    \        end\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w[a\
    \ e i o u]\n  word.downcase!\n  word.scan(/[aeiou]/).each do |vowel|\n    vowels.each\
    \ do |v|\n      if vowel == v\n        return v\n      end\n    end\n  end\n \
    \ return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  vowels.each do |", "  vowels = %w[a e i o u]\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").length\
    \ == 0 ? \"\" : vowels.find { |vowel| word.include?(vowel) }\nend\n</code>\n<|/\
    \ a tags=ruby,string |>\n<| c |>\nThis doesn't work if the word is `\"a\"`\n<|/\
    \ c |>\n<| c |>\n, thanks for pointing out. I've updated my answer.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ vowels.each do |vowel|\n    vowel_position = word.index(vowel)\n    if vowel_position\
    \ > 0 && vowel_position < word.length - 1\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u y\
    \ o i u o y)\n  word.downcase!\n  word.each_char.with_index do |char, i|\n   \
    \ next if char == \" \"\n    next if vowels.include?(char)\n    next if consonants.include?(char)\n\
    \    next if char == char.upcase\n    next if char == char.downcase\n    next\
    \ if char == char.upcase.downcase\n    next if char == char.upcase.upcase\n  \
    \  next if char == char.upcase.upcase.downcase\n    next if char == char.upcase.upcase.upcase\n\
    \    next if char == char.upcase.upcase.upcase.downcase\n    next if char == char.upcase.upcase.upcase.upcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.downcase\n    next if char\
    \ == char.upcase.upcase.upcase.upcase.upcase.downcase\n    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.downcase\n\
    \    next if char == char.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.upcase.up",
  "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z)\n  word.split(\"\").each do |letter|\n    vowels.each do |vowel|\n\
    \      if letter == vowel\n        return vowel\n      end\n    end\n    consonants.each\
    \ do |consonant|\n      if letter == consonant\n        return consonant\n   \
    \   end\n    end\n  end\n  return \"\"\nend", "  vowels = %w[a e i o u]\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil\n      break\n\
    \    end\n  end\n  if index == nil\n    return \"\"\n  end\n  index = index +\
    \ 1\n  while index != nil\n    index = word.index(vowel, index)\n    if index\
    \ != nil\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= 1\n\
    \  \n  if vowels_count < 0 or vowels_count > 3\n    return \"\"\n  \n  vowels_count\
    \ -= 1\n  \n  vowels_index = word.rindex(\"a\")\n  vowels_index += word.rindex(\"\
    e\")\n  vowels_index += word.rindex(\"i\")\n  vowels_index += word.rindex(\"o\"\
    )\n  vowels_index += word.rindex(\"u\")\n  \n  vowels_index -= vowels_count +\
    \ 1\n  \n  if vowels_index > 0\n    return word[vowels_index]\n  \n  if vowels_index\
    \ < 0\n    return \"\"\n  \n  return \"\"\n  ", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word = word.split(vowel).last\n  end\n  word.split(//).last\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if the word\
    \ is \"ab\"\n<|/ c |>\n<| c |>\nIt doesn't work because `split` doesn't take regexp\
    \ as an argument. `split` takes string as an argument. `word.split(//).last` should\
    \ be `word.split(//).last.downcase`\n<|/ c |>\n<| c |>\nI didn't know that `split`\
    \ doesn't take regexp as an argument. Thanks for pointing that out.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n \
    \ vowels_count = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"\
    e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\"\
    )\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\")\n\
    \  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count\
    \ += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"a\")\n  vowels_count -=\
    \ word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"\
    o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"A\"\
    )\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\")\n\
    \  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n  vowels_count\
    \ -= word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -=\
    \ word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"\
    U\")\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\"\
    )\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n\
    \  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"a\")\n",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_start\
    \ = nil\n  vowel_end = nil\n  vowel_distance = nil\n  vowel_found = vowels.find\
    \ { |vowel| word.include?(vowel) }\n  if vowel_found\n    vowel_start = word.index(vowel_found)\n\
    \    vowel_end = word.index(vowel_found) + vowel_found.length\n    vowel_distance\
    \ = vowel_end - vowel_start\n  end\n  return vowel_found if vowel_distance\n \
    \ return \"\"\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    next if char == ?e\n    next if char == ?a\n    next if char\
    \ == ?i\n    next if char == ?o\n    next if char == ?u\n    next if char == ?y\n\
    \    next if char == ?o\n    next if char == ?u\n    next if char == ?r\n    next\
    \ if char == ?l\n    next if char == ?l\n    next if char == ?e\n    next if char\
    \ == ?a\n    next if char == ?e\n    next if char == ?i\n    next if char == ?o\n\
    \    next if char == ?u\n    next if char == ?y\n    next if char == ?o\n    next\
    \ if char == ?u\n    next if char == ?r\n    next if char == ?l\n    next if char\
    \ == ?l\n    next if char == ?e\n    next if char == ?a\n    next if char == ?e\n\
    \    next if char == ?i\n    next if char == ?o\n    next if char == ?u\n    next\
    \ if char == ?y\n    next if char == ?o\n    next if char == ?u\n    next if char\
    \ == ?r\n    next if char == ?l\n    next if char == ?l\n    next if char == ?e\n\
    \    next if char == ?a\n    next if char == ?e\n    next if char == ?i\n    next\
    \ if char == ?o\n    next if char == ?u\n    next if char == ?y\n    next if char\
    \ == ?o\n    next if char == ?u\n    next if char == ?r\n    next if char == ?l\n\
    \    next if char == ?l\n    next if char == ?e\n    next if char == ?a\n    next\
    \ if char == ?e\n    next if char == ?i\n    next if char == ?o\n    next if char\
    \ == ?u\n    next if char == ?y\n    next if char == ?o\n    next if char == ?u\n\
    \    next if char == ?r\n    next if char == ?l\n    next if char == ?l\n    next\
    \ if char == ?e\n    ", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    if word.index(vowel) > word.rindex(vowel)\n      return vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e\
    \ i o u)\n  vowels.each do |vowel|\n    word.scan(vowel).each do |consonant|\n\
    \      consonants.each do |consonant2|\n        word.scan(consonant2).each do\
    \ |consonant3|\n          word.scan(consonant3).each do |consonant4|\n       \
    \     word.scan(consonant4).each do |consonant5|\n              word.scan(consonant5).each\
    \ do |consonant6|\n                word.scan(consonant6).each do |consonant7|\n\
    \                  word.scan(consonant7).each do |consonant8|\n              \
    \      word.scan(consonant8).each do |consonant9|\n                      word.scan(consonant9).each\
    \ do |consonant10|\n                        word.scan(consonant10).each do |consonant11|\n\
    \                          word.scan(consonant11).each do |consonant12|\n    \
    \                        word.scan(consonant12).each do |consonant13|\n      \
    \                        word.scan(consonant13).each do |consonant14|\n      \
    \                          word.scan(consonant14).each do |consonant15|\n    \
    \                              word.scan(consonant15).each do |consonant16|\n\
    \                                    word.scan(consonant16).each do |consonant17|\n\
    \                                      word.scan(consonant17).each do |consonant18|\n\
    \                                        word.scan(consonant18).each do |consonant19|\n\
    \                                          word.scan(consonant19).each do |consonant20|\n\
    \                                            word.scan(consonant20).each do |consonant21|\n\
    \                                              word.scan(consonant21).each do\
    \ |consonant22|\n                                                word.scan(consonant22).each\
    \ do |consonant23|\n                                                  word.scan(consonant23).each\
    \ do |consonant24|\n                                                    word.scan(consonant24).each\
    \ do |consonant25|\n                                                      word.scan(consonant25).each\
    \ do |consonant26|\n                                                        word.scan(consonant26).each\
    \ do |consonant27|\n                                                         \
    \ word.scan(consonant27).each do |consonant28|\n                             \
    \                               word.scan(consonant28).each do |con", "  vowels\
    \ = %w[a e i o u]\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\"\
    )\n  end\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/", "  vowels = %w(a e i o u)\n  consonants = %w(a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z)\n  vowel_positions = word.scan(/[#{vowels.join('|')}]/)\n\
    \  consonant_positions = word.scan(/[#{consonants.join('|')}]/)\n  \n  vowel_positions.each\
    \ do |vowel_position|\n    vowel_position = vowel_position.to_i\n    consonant_positions.each\
    \ do |consonant_position|\n      consonant_position = consonant_position.to_i\n\
    \      \n      if consonant_position > vowel_position\n        break\n      elsif\
    \ consonant_position < vowel_position\n        break\n      elsif consonant_position\
    \ == vowel_position\n        return vowels[vowel_position]\n      end\n    end\n\
    \  end\n  \n  \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    vowel_pos = word.index(vowel)\n    if vowel_pos > 0\n      vowel_pos = word.index(vowel,\
    \ vowel_pos+1)\n      if vowel_pos > 0\n        return vowel\n      end\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowels_count = word.scan(/[aeiou]/).count\n  vowels_count = vowels_count if\
    \ vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count < 3 else\
    \ 3\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count if vowels_count < 3 else 3\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count if vowels_count < 3 else 3\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count if vowels_count < 3 else 3\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ if vowels_count < 3 else 3\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if\
    \ vowels_count < 3 else 3\n  vowels_count = vowels_count - 1\n  vowels_count =\
    \ vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count\
    \ < 3 else 3\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count <\
    \ 3 else 3\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if\
    \ vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count < 3 else\
    \ 3\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count if vowels_count < 3 else 3\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count if vowels_count < 3 else 3\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count if vowels_count < 3 else 3\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = ", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.chars.each\
    \ do |char|\n    vowels.each do |vowel|\n      if char == vowel\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ word = word.gsub(/[aeiou]/, \"\")\n  word.empty? ? \"\" : vowels.find { |vowel|\
    \ word.include?(vowel) }\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    if word.index(vowel) == word.rindex(vowel)\n      return vowel\n    end\n\
    \  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e\
    \ i o u)\n  word.downcase!\n  word.chars.each_with_index do |char, i|\n    if\
    \ vowels.include?(char) && consonants.include?(word[(i+1)..-1]) \n      return\
    \ char\n    end\n  end\n  \"\"\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "  vowels = %w[a e i o u]\n  consonants = %w[b c d f g h j k l\
    \ m n p q r s t v w x y z]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  consonants.each do |consonant|\n    word = word.split(consonant).first\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\"\
    )\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n\
    \  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count += word.count(\"\
    A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\"\
    )\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count +=\
    \ word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"\
    I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count += word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if\
    \ vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count =\
    \ vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count\
    \ < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count <\
    \ 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if\
    \ vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count < 4 else\
    \ 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count if vowels_count < 4 else 4\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count if vowels_count < 4 else 4\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if\
    \ vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count =\
    \ vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count\
    \ < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count <\
    \ 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = ", "  vowels =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    if word.include?(vowel)\n     \
    \ return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels_count = vowels.length\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ + 1\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n\
    \  vowels_count = vowels_count - 1\n  vowels_count = vowels_count + 1\n  vowels_count\
    \ = vowels_", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions\
    \ = []\n  vowel_positions.push word.rindex(\"a\")\n  vowel_positions.push word.rindex(\"\
    e\")\n  vowel_positions.push word.rindex(\"i\")\n  vowel_positions.push word.rindex(\"\
    o\")\n  vowel_positions.push word.rindex(\"u\")\n  \n  vowel_positions.each do\
    \ |position|\n    if position > 0\n      vowel_positions.push position - 1\n \
    \   end\n  end\n  \n  vowel_positions.each do |position|\n    if position < word.length\n\
    \      vowel_positions.push position + 1\n    end\n  end\n  \n  vowel_positions.each\
    \ do |position|\n    if word.slice(position, 1).downcase == \"a\"\n      return\
    \ word.slice(position, 1)\n    end\n  end\n  \n  return \"\"\nend", "  vowels\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel, word.length-1)\
    \ >= 0\n      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_positions\
    \ = []\n  vowel_positions.push word.length\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_positions.push word.length\
    \ - 1\n  vowel_positions.push word.length - 1\n  vowel_position", "  vowels =\
    \ %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(/[#{vowel}]+/).each\
    \ do |letter|\n      consonants.each do |consonant|\n        if letter == consonant\n\
    \          return vowel\n        end\n      end\n    end\n  end\n  \"\"\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index > 0\n      break\n    end\n  end\n  if index == 0\n    return \"\
    \"\n  end\n  index = index - 1\n  while index >= 0\n    if word[index].downcase\
    \ == \"a\"\n      return vowel\n    end\n    index = index - 1\n  end\n  return\
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel)\
    \ == word.rindex(vowel)\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n  consonant_found = false\n  consonant_index = word.length\
    \ - 1\n  vowel_index = word.length - 1\n  vowel_found = false\n  consonant_found\
    \ = false\n  consonant_index = word.length - 1\n  vowel_index = word.length -\
    \ 1\n  vowel_found = false\n", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").empty? ? \"\" : word.gsub(/[aeiou]/,\
    \ \"\").downcase\nend", "  vowels = %w(a e i o u)\n  word.chars.reverse_each.with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    vowels.each do |vowel|\n      next if char == vowel\n\
    \      break if index == vowels.length - 2\n    end\n  end\nend", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    index = word.index(vowel)\n\
    \    if index != nil\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = vowels.count(\"\
    a\")\n  vowels_count += vowels.count(\"e\")\n  vowels_count += vowels.count(\"\
    i\")\n  vowels_count += vowels.count(\"o\")\n  vowels_count += vowels.count(\"\
    u\")\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  vowels.each do |vowel|\n    word.scan(/#{vowel}[^aeiou]/).each\
    \ do |match|\n      return match if match.include?(vowel)\n    end\n  end\n  consonants.each\
    \ do |consonant|\n    word.scan(/[^#{consonant}aeiou]/).each do |match|\n    \
    \  return match if match.include?(consonant)\n    end\n  end\n  \"\"\nend", " \
    \ vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel, word.length\
    \ - vowel.length) == 0\n      return vowel\n    end\n  end\n  return \"\"\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    if word.index(vowel) ==\
    \ (word.length-1)\n      return vowel\n    end\n  end\n  return \"\"\nend", " \
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.scan(/[aeiou]/).count\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if\
    \ vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count =\
    \ vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count\
    \ < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count <\
    \ 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if\
    \ vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count < 4 else\
    \ 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n  vowels_count = vowels_count if vowels_count < 4 else 4\n  vowels_count\
    \ = vowels_count - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n\
    \  vowels_count = vowels_count if vowels_count < 4 else 4\n  vowels_count = vowels_count\
    \ - 1\n  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count\
    \ = vowels_count if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n\
    \  vowels_count = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count\
    \ if vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if\
    \ vowels_count < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count =\
    \ vowels_count if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count\
    \ < 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n  vowels_count = vowels_count if vowels_count <\
    \ 4 else 4\n  vowels_count = vowels_count - 1\n  vowels_count = ", "  vowels =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  word.gsub(/[aeiou]/, \"\").empty? ? \"\" : word.gsub(/[aeiou]/, \"\"\
    ).first\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  word.downcase!\n\
    \  word.chars.each do |char|\n    if vowels.include?(char)\n      vowels.each\
    \ do |vowel|\n        if vowel == char\n          return char\n        end\n \
    \     end\n    end\n    if consonants.include?(char)\n      consonants.each do\
    \ |consonant|\n        if consonant == char\n          return char\n        end\n\
    \      end\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n  vowel_positions = []\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word.length\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length\n  vowel_positions.push word.length\n  vowel_positions.push\
    \ word.length\n  vowel_positions.push word", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowels_count = vowels.count(\"a\")\n  vowels_count += vowels.count(\"\
    e\")\n  vowels_count += vowels.count(\"i\")\n  vowels_count += vowels.count(\"\
    o\")\n  vowels_count += vowels.count(\"u\")\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    vowel_pos_right = vowel_pos + 1\n    vowel_pos_left = vowel_pos - 1\n   \
    \ vowel_pos_right = word.index(vowel, vowel_pos_right)\n    vowel_pos_left = word.index(vowel,\
    \ vowel_pos_left)\n    if vowel_pos_right < vowel_pos_left\n      vowel_pos =\
    \ vowel_pos_right\n    elsif vowel_pos_left > vowel_pos_right\n      vowel_pos\
    \ = vowel_pos_left\n    end\n    return vowel if vowel_pos > 0\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n \
    \ return \"\"\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n   \
    \ word = word.split(vowel).last\n  end\n  word\nend", "  vowels = %w(a e i o u)\n\
    \  consonants = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index do\
    \ |char, index|\n    if vowels.include?(char) && consonants.include?(word[index\
    \ + 1])\n      return char\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n\
    \  word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n  vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n\
    \  vowel_found = vowels.any? do |vowel|\n    vowel_start = word.index(vowel, word.length)\n\
    \    vowel_end = word.index(vowel, vowel_start + 1)\n    vowel_start != nil &&\
    \ vowel_end != nil\n  end\n  \n  if vowel_found\n    vowel_start < vowel_end ?\
    \ vowels[vowel_start] : vowels[vowel_end]\n  else\n    \"\"\n  end\nend", "  vowels\
    \ = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n  \
    \  word.scan(/[#{vowel}]+/).each do |letter|\n      consonants.each do |consonant|\n\
    \        if letter == consonant\n          return vowel\n        end\n      end\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u)\n  consonants.each do |c|\n    vowels.each do |v|\n      word.slice!(v)\n\
    \      return v if word.empty?\n    end\n  end\n  \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  word.each_char.with_index do |char, i|\n    next if i == 0\n   \
    \ next if char == vowels.last\n    next if char == vowels.first\n    break if\
    \ char == vowels.last\n    break if char == vowels.first\n  end\n  vowels.last\n\
    end", "  vowels = %w(a e i o u)\n  word.split(\"\").reverse.each_with_index do\
    \ |letter, index|\n    vowels.each do |vowel|\n      if index > 0 && index ==\
    \ word.index(vowel)\n        return vowel\n      end\n    end\n  end\n  \"\"\n\
    end", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last-1\n    next\
    \ if char == vowels.first+1\n    vowels.each do |vowel|\n      if index == vowels.index(vowel)\n\
    \        return vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word =\
    \ word.split(vowel).last\n  end\n  word\nend", "  vowels = %w[a e i o u]\n  vowels.each\
    \ do |vowel|\n    if word.index(vowel, word.length-1..-1)\n      return vowel\n\
    \    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n  vowels.each do\
    \ |vowel|\n    word.scan(/[#{vowel}]+/).each do |letter|\n      consonants.each\
    \ do |consonant|\n        if letter == consonant\n          return vowel\n   \
    \     end\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e\
    \ i o u)\n  consonants = %w(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z)\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n  consonants.each\
    \ do |consonant|\n    word = word.split(consonant).first\n  end\n  word\nend",
  "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word.split(vowel).each do |letter|\n      consonants.each do |consonant|\n\
    \        if letter.index(consonant) > word.index(vowel)\n          return vowel\n\
    \        end\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a\
    \ e i o u)\n  vowels.each do |vowel|\n    vowel_position = word.index(vowel)\n\
    \    vowel_position += 1 if vowel_position < word.length\n    vowel_position -=\
    \ 1 if vowel_position > 0\n    return vowel if vowel_position < word.length\n\
    \  end\n  return \"\"\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if you have a word like \"abacus\" where it returns \"a\" instead of \"\
    u\"\n<|/ c |>\n<| c |>\nI didn't see that requirement in the question. I've updated\
    \ my answer to include that requirement.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  vowels = %w[a e i o u]\n  consonants = %w[b c d f g h j k l m n p q r s t v w\
    \ x y z]\n  vowels.each do |vowel|\n    word.split(vowel).each do |letter|\n \
    \     consonants.each do |consonant|\n        if letter == consonant\n       \
    \   return vowel\n        end\n      end\n    end\n  end\n  \"\"\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = vowels.count(\"a\")\n\
    \  vowels_count += vowels.count(\"e\")\n  vowels_count += vowels.count(\"i\")\n\
    \  vowels_count += vowels.count(\"o\")\n  vowels_count += vowels.count(\"u\")\n\
    \  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u y o i e o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e\
    \ i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o\
    \ u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e i o u e ",
  "  vowels = %w(a e i o u)\n  word.each_char.with_index do |char, i|\n    if vowels.include?(char)\
    \ && vowels.include?(word[(i+1)..-1]) \n      return char\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[AEIOU]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AEIOUaeiou]/).count\n  vowels_count += word.scan(/[AEIOUaeiou]/).count\n\
    \  vowels_count += word.scan(/[AE", "  vowels = %w(a e i o u)\n  vowels.each do\
    \ |vowel|\n    word = word.split(vowel).last\n  end\n  word\nend", "  vowels =\
    \ %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n\
    \  end\n  \n  consonants = %w(a e i o u)\n  consonants.each do |consonant|\n \
    \   word = word.gsub(consonant, \"\")\n  end\n  \n  word = word.downcase\n  \n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  consonants.each\
    \ do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n  \n  word = word.downcase\n\
    \  \n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n\
    \  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n\
    \  \n  word = word.downcase\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  consonants.each do |consonant|\n    word = word.gsub(consonant,\
    \ \"\")\n  end\n  \n  word = word.downcase\n  \n  vowels.each do |vowel|\n   \
    \ word = word.gsub(vowel, \"\")\n  end\n  \n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  \n  word = word.downcase\n  \n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n  consonants.each\
    \ do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n  \n  word = word.downcase\n\
    \  \n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  \n\
    \  consonants.each do |consonant|\n    word = word.gsub(consonant, \"\")\n  end\n\
    \  \n  word = word.downcase\n  \n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  \n  consonants.each do |consonant|\n    word = word.gsub(consonant,\
    \ \"\")\n  end\n  \n  word = word.downcase\n  \n  vowels.each do |vowel|\n   \
    \ word = word.gsub(vowel, \"\")\n  end\n  \n  consonants.each do |consonant|\n\
    \    word = word.gsub(consonant, \"\")\n  end\n  ", "  vowels = %w(a e i o u)\n\
    \  word.split(\"\").each do |letter|\n    vowels.each do |vowel|\n      if letter\
    \ == vowel\n        return vowel\n      end\n    end\n  end\n  return \"\"\nend",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      return vowel if word[vowel_pos\
    \ + 1] == vowel\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").empty? ? \"\" : vowels.find { |vowel| word.include?(vowel) }\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have a word like \"abacus\"\
    .\n<|/ c |>\n<| c |>\n, thanks for pointing out. I've fixed the code.\n<|/ c |>\n\
    <| a tags=ruby |>\n<code>", "  vowels = %w(a e i o u)\n  word.downcase!\n  word.each_char.with_index\
    \ do |char, i|\n    next if char == char.upcase\n    next if vowels.include?(char)\n\
    \    next if i == 0\n    next if i == word.length - 1\n    break if vowels.include?(word[i\
    \ - 1, i + 1])\n  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/,\
    \ \"\").downcase\nend", "  vowels = %w(a e i o u)\n  word.split(\"\").each do\
    \ |letter|\n    vowels.each do |vowel|\n      if letter == vowel\n        return\
    \ vowel\n      end\n    end\n  end\n  return \"\"\nend", "  vowels = %w(a e i\
    \ o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n \
    \ word.gsub(/[aeiou]/, \"\").downcase\nend", "  vowels = %w(a e i o u)\n  word.downcase!\n\
    \  word.each_char.with_index do |char, index|\n    next if index == 0\n    next\
    \ if char == vowels.last\n    next if char == vowels.first\n    next if char ==\
    \ vowels.last\n    next if char == vowels.first\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    next if char == vowels.last\n    next if char == vowels.first\n    next if\
    \ char == vowels.last\n    next if char == vowels.first\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    next if char == vowels.last\n    next if char == vowels.first\n    next if\
    \ char == vowels.last\n    next if char == vowels.first\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    next if char == vowels.last\n    next if char == vowels.first\n    next if\
    \ char == vowels.last\n    next if char == vowels.first\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    next if char == vowels.last\n    next if char == vowels.first\n    next if\
    \ char == vowels.last\n    next if char == vowels.first\n    next if char == vowels.last\n\
    \    next if char == vowels.first\n    next if char == vowels.last\n    next if\
    \ char == vowels.first\n    next if char == vowels.last\n    next if char == vowels.first\n\
    \    next if char == vowels.last\n    next if char == vowels.first\n    next if\
    \ char == vowels.", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count += word.count(\"\
    A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\"\
    )\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"\
    E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\"\
    )\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count +=\
    \ word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"\
    I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count += word.count(\"A\")\n  vowels_count +=\
    \ word.count(\"E\")\n  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"\
    O\")\n  vowels_count += word.count(\"U\")\n  vowels_count += word.count(\"a\"\
    )\n  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n\
    \  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count\
    \ += word.count(\"A\")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowels_count\
    \ -= 1\n  vowels_count -= 1\n  vowels_count -= 1\n  vowel", "  vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  \n  vowels_count += word.count(\"A\")\n  vowels_count += word.count(\"E\")\n\
    \  vowels_count += word.count(\"I\")\n  vowels_count += word.count(\"O\")\n  vowels_count\
    \ += word.count(\"U\")\n  \n  vowels_count -= word.count(\"a\")\n  vowels_count\
    \ -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -=\
    \ word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  \n  vowels_count +=\
    \ word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"\
    I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\"\
    )\n  \n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  \n  vowels_count += word.count(\"a\")\n\
    \  vowels_count += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count\
    \ += word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  \n  vowels_count\
    \ -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count -=\
    \ word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"\
    u\")\n  \n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"\
    e\")\n  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\"\
    )\n  vowels_count += word.count", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n  vowel_positions = []\n  vowel_positions_count = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max\
    \ = 0\n  vowel_positions_count_min = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min\
    \ = 0\n  vowel_positions_count_max = 0\n  vowel_positions_count_min = 0\n", " \
    \ vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word.split(vowel).last.split(consonants.first).first.split(consonants.last).last.split(vowel).first\n\
    \  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do\
    \ |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n \
    \ return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    if word.include?(vowel)\n      return vowel\n    end\n  end\n\
    \  return \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  consonant_index = consonants.index(word[word.length-1])\n  vowel_index = vowels.index(word[word.length-2])\n\
    \  \n  if consonant_index == -1 || vowel_index == -1\n    return \"\"\n  end\n\
    \  \n  consonant_index += word.length-2\n  vowel_index += word.length-2\n  \n\
    \  consonant_index = consonants.rindex(word[word.length-1], consonant_index)\n\
    \  vowel_index = vowels.rindex(word[word.length-2], vowel_index)\n  \n  if consonant_index\
    \ == -1 || vowel_index == -1\n    return \"\"\n  end\n  \n  return vowels[(vowel_index\
    \ + consonant_index)/2]\nend", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    index = word.index(vowel)\n    if index != -1 && index != word.length-1\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    vowel_pos = word.index(vowel)\n\
    \    if vowel_pos > 0 && vowel_pos < word.length - 1\n      vowel_pos_right =\
    \ word.index(vowel, vowel_pos + 1)\n      if vowel_pos_right > 0 && vowel_pos_right\
    \ < word.length - 1\n        return vowel\n      end\n    end\n  end\n  return\
    \ \"\"\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count +=\
    \ word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count += word.count(\"\
    u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"E\"\
    )\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\")\n\
    \  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n  vowels_count\
    \ -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count -=\
    \ word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count += word.count(\"\
    A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"I\"\
    )\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\")\n\
    \  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n  vowels_count\
    \ += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count +=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n\
    \  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count\
    \ -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count +=\
    \ word.count(\"A\")\n  vowels_count += word.count(\"E\")\n  vowels_count += word.count(\"\
    I\")\n  vowels_count += word.count(\"O\")\n  vowels_count += word.count(\"U\"\
    )\n  vowels_count += word.count(\"a\")\n  vowels_count += word.count(\"e\")\n\
    \  vowels_count += word.count(\"i\")\n  vowels_count += word.count(\"o\")\n  vowels_count\
    \ += word.count(\"u\")\n  vowels_count -= word.count(\"A\")", "  vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count = word.count(\"a\")\n  vowels_count\
    \ += word.count(\"e\")\n  vowels_count += word.count(\"i\")\n  vowels_count +=\
    \ word.count(\"o\")\n  vowels_count += word.count(\"u\")\n  vowels_count -= word.count(\"\
    A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"I\"\
    )\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\")\n\
    \  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n  vowels_count\
    \ -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count -=\
    \ word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -= word.count(\"\
    E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"O\"\
    )\n  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\")\n\
    \  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n  vowels_count\
    \ -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count -=\
    \ word.count(\"A\")\n  vowels_count -= word.count(\"E\")\n  vowels_count -= word.count(\"\
    I\")\n  vowels_count -= word.count(\"O\")\n  vowels_count -= word.count(\"U\"\
    )\n  vowels_count -= word.count(\"a\")\n  vowels_count -= word.count(\"e\")\n\
    \  vowels_count -= word.count(\"i\")\n  vowels_count -= word.count(\"o\")\n  vowels_count\
    \ -= word.count(\"u\")\n  vowels_count -= word.count(\"A\")\n  vowels_count -=\
    \ word.count(\"E\")\n  vowels_count -= word.count(\"I\")\n  vowels_count -= word.count(\"\
    O\")\n  vowels_count -= word.count(\"U\")\n  vowels_count -= word.count(\"a\"\
    )\n  vowels_count -= word.count(\"e\")\n  vowels_count -= word.count(\"i\")\n\
    \  vowels_count -= word.count(\"o\")\n  vowels_count -= word.count(\"u\")\n  vowels_count\
    \ -= word.count(\"A\")", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word.gsub(/[aeiou]/, \"\").downcase\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for the word\
    \ \"quick\" because \"q\" isn't a vowel.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works for the word \"quick\"\n<|/ c |>\n<| c |>\nI added a solution that\
    \ works for the word \"quick\"\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for the word \"quick\"\n<|/ c |>\n<| c |>\nI added a solution that works for\
    \ the word \"quick\"\n<|/ c |>\n<| a tags=ruby,regex |>\n<code>", "  vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, ",
  "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word\
    \ = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.gsub(/[aeiou]/,\
    \ \"\").length\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n\
    \  word.downcase!\n  word.each_char.with_index do |char, index|\n    if vowels.include?(char)\
    \ && consonants.include?(word[index+1])\n      return char\n    end\n  end\n \
    \ \"\"\nend", "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    word.scan(/[#{vowel}]+/).each do |consonant|\n      consonants.each\
    \ do |consonant|\n        return consonant if word.index(consonant) == word.rindex(consonant)\n\
    \      end\n    end\n  end\n  \"\"\nend", "  vowels = %w(a e i o u)\n  consonants\
    \ = %w(a e i o u y o i o u)\n  word.split(\"\").each do |letter|\n    vowels.each\
    \ do |vowel|\n      if letter == vowel\n        return vowel\n      end\n    end\n\
    \    consonants.each do |consonant|\n      if letter == consonant\n        return\
    \ consonant\n      end\n    end\n  end\n  \"\"\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    if word.include?(vowel)\n\
    \      return vowel\n    end\n  end\n  return \"\"\nend", "  vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n  vowel_found = false\n  vowel_start = nil\n  vowel_end\
    \ = nil\n  vowel_middle = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = nil\n  vowel_middle_index = nil\n  vowel_middle_index = nil\n  vowel_middle_index\
    \ = ", "  vowels = %w[a e i o u]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n\
    \  end\n  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each\
    \ do |vowel|\n    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")", "  vowels = %w(a e i o u)\n  vowels.each\
    \ do |vowel|\n    index = word.index(vowel)\n    if index != nil\n      return\
    \ vowel if index > word.size - 2\n    end\n  end\n  return \"\"\nend", "  vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels.each do |vowel|\n    word =\
    \ word.gsub(vowel, \"\")\n  end\n  word = word.downcase\n  vowels.each do |vowel|\n\
    \    word = word.gsub(vowel, \"\")\n  end\n  word = word.gsub(/[^aeiou]/, \"\"\
    )\n  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n\
    \  word = word.gsub(/[^aeiou]/, \"\")\n  word = word.gsub(/[^aeiou]/, \"\")\n",
  "  vowels = %w(a e i o u)\n  consonants = %w(a e i o u)\n  word.chars.reverse_each.with_index\
    \ do |char, index|\n    if vowels.include?(char) && index > 0\n      vowels.each_with_index\
    \ do |vowel, index|\n        if vowel == char\n          return char\n       \
    \ end\n      end\n    end\n  end\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n  vowels.each do |vowel|\n    word = word.split(vowel).last\n  end\n\
    \  word\nend", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowels_count\
    \ = word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(/[aeiouy]/).count\n\
    \  vowels_count += word.scan(/[aeiou]/i).count\n  vowels_count += word.scan(/[aeiouy]/i).count\n\
    \  vowels_count += word.scan(/[aeiou]/).count\n  vowels_count += word.scan(",
  "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiouy]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n\
    \  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word\
    \ = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word =\
    \ word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/,\
    \ \"\")\n  word = word.gsub(/[aeiou]/, \"\")\n  word = word.gsub(/[aeiou]/, \"\
    \")", "  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  vowel_counter = 0\n \
    \ vowel_found = false\n  vowel_start = nil\n  vowel_end = nil\n  vowel_start =\
    \ word.length - 1\n  vowel_end = -1\n  vowel_found = vowels.find do |vowel|\n\
    \    vowel_counter += 1 if vowel_start <= vowel && vowel <= vowel_end\n  end\n\
    \  vowel_found ? vowels[vowel_counter] : \"\"\nend", "  vowels = %w(a e i o u)\n\
    \  word.chars.reverse_each.with_index do |char, i|\n    break if i == 0\n    break\
    \ if i == word.length - 1\n    break if vowels.include?(char)\n    break if vowels.include?(word.chars[i\
    \ - 1])\n    break if vowels.include?(word.chars[i + 1])\n    vowels.each do |vowel|\n\
    \      break if vowel == char\n    end\n  end\nend", "  vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n  vowel_positions = []\n  vowel_positions.push word.length\n\
    \  vowel_positions.push word.length - 1\n  vowel_positions.push word.length -\
    \ 2\n  vowel_positions.push word.length - 3\n  vowel_positions.push word.length\
    \ - 4\n  vowel_positions.push word.length - 5\n  vowel_positions.push word.length\
    \ - 6\n  vowel_positions.push word.length - 7\n  vowel_positions.push word.length\
    \ - 8\n  vowel_positions.push word.length - 9\n  vowel_positions.push word.length\
    \ - 10\n  vowel_positions.push word.length - 11\n  vowel_positions.push word.length\
    \ - 12\n  vowel_positions.push word.length - 13\n  vowel_positions.push word.length\
    \ - 14\n  vowel_positions.push word.length - 15\n  vowel_positions.push word.length\
    \ - 16\n  vowel_positions.push word.length - 17\n  vowel_positions.push word.length\
    \ - 18\n  vowel_positions.push word.length - 19\n  vowel_positions.push word.length\
    \ - 20\n  vowel_positions.push word.length - 21\n  vowel_positions.push word.length\
    \ - 22\n  vowel_positions.push word.length - 23\n  vowel_positions.push word.length\
    \ - 24\n  vowel_positions.push word.length - 25\n  vowel_positions.push word.length\
    \ - 26\n  vowel_positions.push word.length - 27\n  vowel_positions.push word.length\
    \ - 28\n  vowel_positions.push word.length - 29\n  vowel_positions.push word.length\
    \ - 30\n  vowel_positions.push word.length - 31\n  vowel_positions.push word.length\
    \ - 32\n  vowel_positions.push word.length - 33\n  vowel_positions.push word.length\
    \ - 34\n  vowel_positions.push word.length - 35\n  vowel_positions.push word.length\
    \ - 36\n  vowel_positions.push word.length - 37\n  vowel_positions.push word.length\
    \ - 38\n  vowel_positions.push word.length - 39\n  vowel_positions.push word.length\
    \ - 40\n  vowel_positions.push word.length - 41\n  vowel_positions.push word.length\
    \ - 42\n  vowel_positions.push word.length - 43\n  vowel_positions.push word.length\
    \ - 44\n  vowel_positions.push word.length - 45\n  vowel_positions.push word.length\
    \ - 46\n  vowel_positions.push word.length - 47\n  vowel_positions.push word.length\
    \ - 48\n  vowel_position", "  vowels = %w(a e i o u)\n  vowels.each do |vowel|\n\
    \    word = word.split(vowel).last\n  end\n  word\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| c |>\nI like your solution, but I think it can be improved. For example,\
    \ `get_closest_vowel(\"ab\")` returns `\"\"`, but I think it should be  `\"a\"\
    `. Also, `get_closest_vowel(\"abba\")` returns `\"\"`, but I think it should be\
    \  `\"a\"`. Also, I think `get_closest_vowel(\"abba\")` should return `\"b\"`,\
    \ but I think it should be  `\"a\"`.\n<|/ c |>\n<| c |>\nI agree with you. I've\
    \ updated my answer to reflect your comments.\n<|/ c |>\n<| c |>\nI like your\
    \ solution, but I think it can be improved. For example, `get_closest_vowel(\"\
    ab\")` returns `\"\"`, but I think it should be  `\"a\"`. Also, `get_closest_vowel(\"\
    abba\")` returns `\"\"`, but I think it should be  `\"a\"`. Also, I think `get_closest_vowel(\"\
    abba\")` should return `\"b\"`, but I think it should be  `\"a\"`.\n<|/ c |>\n\
    <| c |>\nI agree with you. I've updated my answer to reflect your comments.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I think it can be improved. For example,\
    \ `get_closest_vowel(\"ab\")` returns `\"\"`, but I think it should be  `\"a\"\
    `. Also, `get_closest_vowel(\"abba\")` returns `\"\"`, but I think it should be\
    \  `\"a\"`. Also, I think `get_closest_vowel(\"abba\")` should return `\"b\"`,\
    \ but I think it should be  `\"a\"`.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>",
  "  vowels = %w[a e i o u]\n  vowels.each do |vowel|\n    word = word.gsub(vowel,\
    \ \"\")\n  end\n  word = word.gsub(/[aeiou]/, \"\")\n  word.downcase!\n  word.gsub(/[^aeiou]/,\
    \ \"\").length == 0 ? \"\" : word.gsub(/[^aeiou]/, \"\").last\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
