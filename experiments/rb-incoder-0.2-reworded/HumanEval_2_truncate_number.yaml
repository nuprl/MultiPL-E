name: HumanEval_2_truncate_number
language: rb
prompt: "# Given a positive floating point number, it can be decomposed into\n# and\
  \ integer part (largest integer smaller than given number) and decimals\n# (leftover\
  \ part always smaller than 1).\n# Return the decimal part of the number.\n# >>>\
  \ truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_truncate_number\n\
  \    candidate = method(:truncate_number)\n    assert_equal(0.5, candidate.call(3.5))\n\
  \    assert_equal(0.25, candidate.call(1.25))\n    assert_equal(0.0, candidate.call(123.0))\n\
  \  end\nend\n"
completions: ["  return number.truncate if number.respond_to?(:truncate)\n  number.to_s.split('.')[0].to_i\n\
    end", "  number = number.to_f\n  decimals = number % 1\n  number = number - decimals\n\
    \  number = number.round\n  number = number.to_i\n  return number\nend", "  number\
    \ = number.to_f\n  decimals = number.modulo(BigDecimal.new('1'))\n  integer =\
    \ number.div(BigDecimal.new('1'))\n  result = BigDecimal.new(integer.to_s)\n \
    \ result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(BigDecimal.new('1'))\n\
    \  result.increment!(BigDecimal.new('1'))\n  result.decrement!(", "  number =\
    \ number.to_f\n  decimals = number % 1\n  number = number - decimals\n  number\
    \ = number / 1\n  return number\nend", "  number, decimals = number.to_s.split('.')\n\
    \  decimals.slice!(decimals.rindex('.'))\n  decimals.slice!(0...1)\n  return number.to_f\
    \ + '.' + decimals\nend", "  truncate_number_with_precision(number, 2)\nend",
  "  return number.truncate\nend", "  truncate_number_without_decimals(number)\nend",
  "  number = number.to_f\n  decimals = number.to_s.split(\".\")[1]\n  number = number.to_s.split(\"\
    .\")[0]\n  number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_i\n  number.to_f - number.to_i\n  number.to_f - number.to_i\n\
    \  number.to_f - number.to_", "  number, decimals = number.to_s.split('.')\n \
    \ decimals.gsub!(/0+$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\.$/, '')\n  decimals.gsub!(/\\\
    .$/, '')\n  decimals.gsub!(/\\.", "  return number.to_f / number.to_i\nend", " \
    \ number = number.to_f\n  decimals = number % 1\n  number = number - decimals\n\
    \  number = number.round\n  number = number / 1\n  return number\nend", "  number\
    \ = number.to_f\n  decimal = number % 1\n  number = number - decimal\n  number\
    \ = number / 1\n  number = number.to_i\n  return number\nend", "  return number.to_f\
    \ / number.to_i\nend", "  return number.to_s.split(\".\")[0].to_i\nend", "  number\
    \ = number.to_f\n  decimals = number % 1\n  number = number - decimals\n  number\
    \ = number / 1\n  number = number.to_i\n  return number\nend", "  number, decimals\
    \ = number.divmod(1)\n  decimals\nend", "  number = number.to_f\n  decimals =\
    \ number % 1\n  number = number - decimals\n  number = number / 1\n  return number\n\
    end", "  number = number.to_f\n  decimals = number.modulo(BigDecimal.new(1))\n\
    \  integer = BigDecimal.new(number).truncate\n  result = BigDecimal.new(integer).to_s\n\
    \  result = result.gsub(/0+$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n\
    \  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result\
    \ = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\.$/, '')\n  result = result.gsub(/\\\
    .$/, '')\n  ", "  number = number.to_f\n  decimals = number.to_s.split('.')[1]\n\
    \  number = number.to_s.split('.')[0]\n  number = number.to_i\n  number = number\
    \ - number * 10\n  number = number / 10\n  number = number % 1\n  number = number.round(decimals)\n\
    \  return number\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
