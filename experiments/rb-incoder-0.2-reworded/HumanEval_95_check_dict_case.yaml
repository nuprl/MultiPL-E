name: HumanEval_95_check_dict_case
language: rb
prompt: "# Given a hash, return true if all keys are strings in lower \n# case or\
  \ all keys are strings in upper case, else return false.\n# The function should\
  \ return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"\
  a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"\
  Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>>\
  \ check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef\
  \ check_dict_case(dict)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_check_dict_case\n\
  \    candidate = method(:check_dict_case)\n    assert_equal(true, candidate.call({\"\
  p\" => \"pineapple\", \"b\" => \"banana\"}))\n    assert_equal(false, candidate.call({\"\
  p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}))\n    assert_equal(false,\
  \ candidate.call({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"\
  }))\n    assert_equal(false, candidate.call({\"Name\" => \"John\", \"Age\" => \"\
  36\", \"City\" => \"Houston\"}))\n    assert_equal(true, candidate.call({\"STATE\"\
  \ => \"NC\", \"ZIP\" => \"12345\"}))\n    assert_equal(true, candidate.call({\"\
  fruit\" => \"Orange\", \"taste\" => \"Sweet\"}))\n    assert_equal(false, candidate.call({}))\n\
  \  end\nend\n"
completions: ["  case dict\n  when Hash\n    dict.each do |key, value|\n      next\
    \ if value.nil?\n      next if value.is_a?(String)\n      next if value.is_a?(Symbol)\n\
    \      next if value.is_a?(Fixnum)\n      next if value.is_a?(Float)\n      next\
    \ if value.is_a?(BigDecimal)\n      next if value.is_a?(TrueClass)\n      next\
    \ if value.is_a?(FalseClass)\n      next if value.is_a?(Array)\n      next if\
    \ value.is_a?(Hash)\n      next if value.is_a?(Range)\n      next if value.is_a?(IO)\n\
    \      next if value.is_a?(StringIO)\n      next if value.is_a?(IO::MemoryStream)\n\
    \      next if value.is_a?(IO::File)\n      next if value.is_a?(IO::Stdout)\n\
    \      next if value.is_a?(IO::Stderr)\n      next if value.is_a?(IO::NullStream)\n\
    \      next if value.is_a?(IO::NullFile)\n      next if value.is_a?(IO::NullStdout)\n\
    \      next if value.is_a?(IO::NullStderr)\n      next if value.is_a?(IO::NullNullStream)\n\
    \      next if value.is_a?(IO::NullNullFile)\n      next if value.is_a?(IO::NullNullStdout)\n\
    \      next if value.is_a?(IO::NullNullStderr)\n      next if value.is_a?(IO::NullNullNullStream)\n\
    \      next if value.is_a?(IO::NullNullNullFile)\n      next if value.is_a?(IO::NullNullNullStdout)\n\
    \      next if value.is_a?(IO::NullNullNullStderr)\n      next if value.is_a?(IO::NullNullNullNullStream)\n\
    \      next if value.is_a?(IO::NullNullNullNullFile)\n      next if value.is_a?(IO::NullNullNullNullStdout)\n\
    \      next if value.is_a?(IO::NullNullNullNullStderr)\n      next if value.is_a?(IO::NullNullNullNullNullStream)\n\
    \      next if value.is_a?(IO::NullNullNullNullNullFile)\n      next if value.is_a?(IO::NullNullNullNullNull",
  "  case dict.length\n  when 0\n    false\n  when 1\n    dict.keys.all? { |k| k.is_a?(String)\
    \ }\n  else\n    dict.keys.all? { |k| k.is_a?(String) && k.upcase == k.downcase\
    \ }\n  end\nend", "  return false if dict.nil? || dict.empty?\n  dict.each do\
    \ |key, value|\n    next if value.nil? || value.empty?\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(Float)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigInteger)\n\
    \    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n   \
    \ next if value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n    next if value.is_a?(IO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n    next if value.is_a?(",
  "  return false if dict.nil? or dict.empty?\n  dict.each do |key, value|\n    return\
    \ false if value.nil? or value.empty?\n    return false if key.to_s.upcase !=\
    \ key.to_s.downcase\n  end\n  return true\nend", "  case dict\n  when Hash\n \
    \   dict.all? { |key, value| key.downcase == value.downcase }\n  when Array\n\
    \    dict.all? { |value| value.downcase == value.downcase }\n  else\n    false\n\
    \  end\nend", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    true\n  else\n    dict.keys.all? do |key|\n      key.downcase\
    \ == key.upcase\n    end\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", " \
    \ dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? do |key|\n\
    \      key.downcase == key.upcase\n    end\n  end\nend", "  if dict.empty?\n \
    \   false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        value.downcase!\n      else\n        value.upcase!\n      end\n    end\n\
    \    true\n  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if the hash contains any non-string keys. For example, `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\", \"c\" => \"carrot\"})` returns `true` instead\
    \ of `false`.\n<|/ c |>\n<| c |>\nI agree, my answer was meant to be a starting\
    \ point for OP to work from. I'll update my answer to include a more robust solution.\n\
    <|/ c |>\n<| a tags=ruby,hash |>\n<code>", "  case dict\n  when Hash\n    dict.all?\
    \ { |key, value| key.is_a?(String) && value.is_a?(String) }\n  else\n    false\n\
    \  end\nend", "  dict.each do |key, value|\n    next if value.nil?\n    next if\
    \ value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(Fixnum)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(BigInteger)\n    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(IO::File)\n    next if value.is_a?(IO::Stdio)\n    next\
    \ if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::Pipe)\n    next if value.is_a?(IO::Pipe::Reader)\n\
    \    next if value.is_a?(IO::Pipe::Writer)\n    next if value.is_a?(IO::Pipe::Error)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)\n\
    \    next if value.is_a?(IO::Pipe::Stderr)\n    next if value.is_a?(IO::Pipe::Stdout)",
  "  if dict.empty?\n    false\n  else\n    true\n  end\nend", "  if dict.nil?\n \
    \   return false\n  end\n  \n  keys = dict.keys\n  keys.each do |key|\n    next\
    \ if key.kind_of?(String)\n    next if key.upcase == key\n    return false\n \
    \ end\n  \n  return true\nend", "  return false if dict.empty?\n  dict.each do\
    \ |k, v|\n    next if k.is_a?(String)\n    next if k.upcase != k\n    next if\
    \ k.downcase != k\n    false\n  end\n  true\nend", "  case dict.length\n  when\
    \ 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |k| k.downcase == k.upcase }\n  end\n\
    end", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n  \
    \    if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend", "  if dict.empty?\n\
    \    false\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n     \
    \ value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  dict.each do |key, value|\n    next if value.nil?\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(Integer)\n    next if\
    \ value.is_a?(Float)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Date)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n    next if\
    \ value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(Range)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO::MemoryStream)\n    next if value.is_a?(IO::File)\n\
    \    next if value.is_a?(IO::Dir)\n    next if value.is_a?(IO::Unsupported)\n\
    \    next if value.is_a?(IO::NullStream)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n  \
    \  next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next\
    \ if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if\
    \ value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n  \
    \  next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next\
    \ if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if\
    \ value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n    next if value.is_a?(IO::NullIO)\n\
    \    next if value.is_a?(IO::NullIO)", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  if dict.empty?\n    false\n  else\n    true\n  end\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if value.is_a? String\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    true\n  else\n    dict.keys.all? do |key|\n      key.downcase\
    \ == key.upcase\n    end\n  end\nend\n</code>\n<|/ a tags=ruby,hash,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work if the hash contains symbols.\n<|/ c |>\n<| c\
    \ |>\nIt does work. Try it out yourself. It returns false for symbols.\n<|/ c\
    \ |>\n<| c |>\nI did try it out and it does work. Try it out yourself. It returns\
    \ false for symbols.\n<|/ c |>\n<| c |>\nI did try it out and it does work. Try\
    \ it out yourself. It returns false for symbols.\n<|/ c |>\n<| c |>\nI did try\
    \ it out and it does work. Try it out yourself. It returns false for symbols.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend", "  case\
    \ dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all?\
    \ { |k| k.is_a?(String) || k.is_a?(Symbol) }\n  end\nend", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  if dict.empty?\n    false\n  else\n \
    \   true\n  end\nend", "  return false if dict.empty?\n  dict.each do |k, v|\n\
    \    return false if k.is_a?(String) && k.downcase == k\n    return false if k.is_a?(String)\
    \ && k.upcase == k\n  end\n  true\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  else\n \
    \   false\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain me the code you\
    \ wrote in check_dict_case? I am new to ruby so I am not able to understand it.\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks a lot for your help. I understood it now. :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.all? { |k, v| k.downcase == v.downcase }\n  end\nend", "  return\
    \ false if dict.nil? || dict.empty?\n  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  if dict.empty?\n    false\n  else\n    true\n  end\nend", "  if dict.empty?\n\
    \    false\n  else\n    true\n  end\nend", "  case dict.length\n  when 0\n   \
    \ false\n  when 1\n    true\n  else\n    dict.all? { |key, value| \n      case\
    \ key.length\n      when 0\n        false\n      when 1\n        true\n      else\n\
    \        key.downcase == value.downcase\n      end\n    }\n  end\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  return false if dict.empty?\n\
    \  dict.each do |k, v|\n    next if k.nil? || k.empty?\n    return false if k.downcase\
    \ != k\n    return false if k.upcase != k\n  end\n  true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    dict.keys.all? { |k| k.is_a?(String) }\n \
    \ else\n    dict.keys.all? { |k| k.is_a?(String) && k.upcase == k.downcase }\n\
    \  end\nend", "  return false if dict.empty?\n  dict.each do |key, value|\n  \
    \  next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(Time)\n    next if\
    \ value.is_a?(DateTime)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigDecimal)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(Object)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(Proc)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(StringIO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    ", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n\
    \    dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.all? { |key, value| key.downcase == value.downcase }\n  end\nend", " \
    \ dict.each do |key, value|\n    if value.is_a?(String)\n      key.downcase!\n\
    \    else\n      key.upcase!\n    end\n  end\n  true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |k| k.is_a?(String)\
    \ }\n  end\nend", "  return false if dict.empty?\n  dict.each do |key, value|\n\
    \    next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(Time)\n    next if\
    \ value.is_a?(Date)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n  \
    \  next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n  \
    \  next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n  \
    \  next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(BigDecimal)\n\
    \    next if ", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n\
    \      if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.all? { |key, value| key.is_a?(String) && value.is_a?(String)\
    \ }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.keys.all? { |k| k.is_a?(String) || k.is_a?(Symbol) }\n  end\n\
    end", "  return false if dict.empty?\n  dict.keys.all? do |key|\n    key.downcase\
    \ == key || key.upcase == key\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |k| k.downcase == k.upcase }\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |k| k.downcase == k.upcase }\n  end\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict\n  when Hash\n    dict.each do |key,\
    \ value|\n      if value.is_a?(String)\n        true\n      elsif value.is_a?(Integer)\n\
    \        true\n      else\n        false\n      end\n    end\n  when Array\n \
    \   dict.each do |value|\n      if value.is_a?(String)\n        true\n      elsif\
    \ value.is_a?(Integer)\n        true\n      else\n        false\n      end\n \
    \   end\n  else\n    false\n  end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for your answer. Your code works fine but i want to know why my code is\
    \ not working and why my code is not working in ruby 2.1.2 but working in ruby\
    \ 1.9.3\n<|/ c |>\n<| c |>\nI tested your code in ruby 2.1.2 and it worked fine.\
    \ Can you please tell me what error you are getting in ruby 2.1.2?\n<|/ c |>\n\
    <| c |>\nI tested your code in ruby 2.1.2 and it worked fine. Can you please tell\
    \ me what error you are getting in ruby 2.1.2?\n<|/ c |>\n<| c |>\nI tested your\
    \ code in ruby 2.1.2 and it worked fine. Can you please tell me what error you\
    \ are getting in ruby 2.1.2?\n<|/ c |>\n<| c |>\nI tested your code in ruby 2.1.2\
    \ and it worked fine. Can you please tell me what error you are getting in ruby\
    \ 2.1.2?\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  return false if dict.empty?\n\
    \  dict.each do |key, value|\n    next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n    next if value.is_a?(Symbol)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(Numeric)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(Numeric)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if\
    \ value.is_a?(Numeric)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n    next\
    \ if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Symbol)", "  if dict.empty?\n\
    \    false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        value.downcase!\n      else\n        value.upcase!\n      end\n    end\n\
    \    true\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  if dict.empty?\n    false\n  else\n    dict.each do |key, value|\n  \
    \    if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  end\nend", "  case dict.length\n  when 0\n  \
    \  false\n  when 1\n    dict.keys.all? { |key| key.is_a?(String) }\n  else\n \
    \   dict.keys.all? { |key| key.is_a?(String) && key.upcase == key.downcase }\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n \
    \ else\n    dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    dict.keys.all?\
    \ { |key| key.is_a?(String) }\n  else\n    false\n  end\nend", "  return false\
    \ if dict.empty?\n  \n  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    dict.keys.all? {\
    \ |k| k.is_a?(String) }\n  else\n    dict.keys.all? { |k| k.is_a?(String) && k.upcase\
    \ == k.downcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  case dict\n  when Hash\n    dict.each do |key, value|\n     \
    \ next if value.nil?\n      value = value.to_s\n      next if value.empty?\n \
    \     next if value.casecmp(\"true\").zero?\n      next if value.casecmp(\"false\"\
    ).zero?\n      next if value.casecmp(\"nil\").zero?\n      next if value.casecmp(\"\
    null\").zero?\n      next if value.casecmp(\"[]\").zero?\n      next if value.casecmp(\"\
    {}\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    {}\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    []\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    {}\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()\").zero?\n      next if value.casecmp(\"()\").zero?\n      next if value.casecmp(\"\
    ()", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n  \
    \  dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a? String\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  case dict\n  when Hash\n\
    \    dict.each do |key, value|\n      next if value.is_a?(String)\n      return\
    \ false if key.to_s.upcase == key.to_s.downcase\n    end\n    true\n  else\n \
    \   false\n  end\nend", "  return false if dict.nil? or dict.empty?\n  dict.each\
    \ do |k, v|\n    return false if k.nil? or k.empty?\n    return false if k.downcase\
    \ != k or k.upcase != k\n  end\n  return true\nend", "  case dict.length\n  when\
    \ 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    true\n  when\
    \ 1\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  else\n    false\n\
    \  end\nend", "  case dict\n  when Hash\n    dict.all? { |k, v| k.downcase ==\
    \ v.downcase }\n  else\n    false\n  end\nend\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nThis doesn't work for me. `check_dict_case({\"a\" => \"apple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\"})` returns `true` instead of `false`\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me either. `check_dict_case({\"a\" => \"\
    apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true` instead of\
    \ `false`\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true` instead\
    \ of `false`\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true` instead\
    \ of `false`\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `check_dict_case({\"\
    a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})` returns `true` instead\
    \ of `false`\n<|/ c |>\n<| a dscore=5 |>\nI like using Ruby's built-in Hash#all?\
    \ method. Here's an example:\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if you have a hash with non-string keys. For\
    \ example, `{\"a\" => \"apple\", \"b\" => \"banana\"}` returns `true` for `check_dict_case({\"\
    a\" => \"apple\", \"b\" => \"banana\"})`.\n<|/ c |>\n<| c |>\nI thought the OP\
    \ was asking about a hash with non-string keys. I edited my answer to include\
    \ a solution for that case.\n<|/ c |>\n<| c |>\nI see. Thanks for the clarification.\n\
    <|/ c |>\n<| a tags=ruby,hash |>\n<code>", "  dict.each do |key, value|\n    if\
    \ value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  true\nend", "  return false if dict.empty?\n  dict.each do\
    \ |key, value|\n    return false if key.to_s.downcase != key.to_s.upcase\n  end\n\
    \  true\nend", "  dict.each do |key, value|\n    next if value.is_a?(Hash)\n \
    \   next if value.is_a?(Array)\n    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(BigDecimal)\n    next if value.is_a?(Float)\n\
    \    next if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n    next\
    \ if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if value.is_a?(Time)\n\
    \    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n    next\
    \ if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(Time)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n\
    \    next if value.is_a?(Time)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(Big", "  case dict\n  when Hash\n    dict.each do |key, value|\n\
    \      if value.is_a?(String)\n        value.downcase!\n      else\n        value.upcase!\n\
    \      end\n    end\n    true\n  else\n    false\n  end\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nI like your solution, but I believe that `Hash#each` will iterate\
    \ over all keys and values, so you might as well just use `Hash#key?` and `Hash#value?`\
    \ instead of `Hash#each`.\n<|/ c |>\n<| c |>\nI agree with you, `Hash#each` will\
    \ iterate over all keys and values. But I believe that `Hash#key?` and `Hash#value?`\
    \ will iterate over all keys and values only once, while `Hash#each` will iterate\
    \ over all keys and values twice.\n<|/ c |>\n<| c |>\nI agree with you, but I\
    \ believe that `Hash#each` will iterate over all keys and values, so you might\
    \ as well just use `Hash#key?` and `Hash#value?` instead of `Hash#each`.\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I believe that `Hash#each` will iterate\
    \ over all keys and values, so you might as well just use `Hash#key?` and `Hash#value?`\
    \ instead of `Hash#each`.\n<|/ c |>\n<| c |>\nI agree with you, but I believe\
    \ that `Hash#each` will iterate over all keys and values, so you might as well\
    \ just use `Hash#key?` and `Hash#value?` instead of `Hash#each`.\n<|/ c |>\n<|\
    \ a |>\n<code>", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.keys.all? { |k| k.is_a?(String) }\n  end\nend", "  case dict\n\
    \  when Hash\n    dict.each do |key, value|\n      next if value.nil?\n      value\
    \ = value.to_s\n      next if value.empty?\n      next if value.casecmp(key.to_s).zero?\n\
    \      next if value.casecmp(key.to_s.upcase).zero?\n      false\n    end\n  \
    \  true\n  when Array\n    dict.each do |value|\n      value = value.to_s\n  \
    \    next if value.empty?\n      false\n    end\n    true\n  else\n    false\n\
    \  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n     \
    \ value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all?\
    \ do |key|\n      key.downcase == key.upcase\n    end\n  end\nend", "  case dict.length\n\
    \  when 0\n    true\n  when 1\n    dict.keys.all? { |key| key.is_a?(String) }\n\
    \  else\n    false\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  dict.each do |key, value|\n    next if value.nil?\n    next if\
    \ value.is_a?(Hash)\n    next if value.is_a?(Array)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(TrueClass)\n    next\
    \ if value.is_a?(FalseClass)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if value.is_a?(BigInteger)\n\
    \    next if value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::MemoryStream)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO::File)\n    next\
    \ if value.is_a?(IO::File::Base)\n    next if value.is_a?(IO::File::Readable)\n\
    \    next if value.is_a?(IO::File::Writable)\n    next if value.is_a?(IO::File::Append)\n\
    \    next if value.is_a?(IO::File::Unreadable)\n    next if value.is_a?(IO::File::Unwritable)\n\
    \    next if value.is_a?(IO::File::Unappendable)\n    next if value.is_a?(IO::File::NoPermissions)\n\
    \    next if value.is_a?(IO::File::NotDir)\n    next if value.is_a?(IO::File::NotFile)\n\
    \    next if value.is_a?(IO::File::NotSymlink)\n    next if value.is_a?(IO::File::NotDir)\n\
    \    next if value.is_a?(IO::File::NotDir)\n    next if value.is_a?(IO::File::NotDir)\n\
    \    next if value.is_a?(IO::File::NotDir)\n    next if value.is_a?(IO::File::NotDir)\n\
    \    next if value.is_a?(IO::File::NotDir)\n    next if value.is_a?(IO::File::NotDir)\n\
    \    next if value.is_a?(IO", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n \
    \ else\n    dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n\
    \  end\nend", "  dict.each do |key, value|\n    next if value.nil?\n    next if\
    \ value.is_a?(Hash)\n    next if value.is_a?(Array)\n    next if value.is_a?(String)\n\
    \    next if value.is_a?(Numeric)\n    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a? String\n      if key.downcase == key.upcase\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.is_a?(String)\
    \ && key.length <= 1 }\n  end\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase\
    \ }\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n \
    \     key.downcase!\n    else\n      key.upcase!\n    end\n  end\n  true\nend",
  "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all?\
    \ { |key| key.downcase == key.upcase }\n  end\nend", "  case dict.length\n  when\
    \ 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict\n  when Hash\n    dict.all? { |k,\
    \ v| k.downcase == k.upcase }\n  else\n    false\n  end\nend\n</code>\n<|/ a tags=ruby,hash\
    \ |>\n<| a tags=ruby,hash |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  return false if dict.nil? || dict.empty?\n  keys = dict.keys\n  keys.each\
    \ do |key|\n    return false if key.class != String || key.length != 1\n  end\n\
    \  keys.each do |key|\n    return false if key.class != String || key.length !=\
    \ 1\n  end\n  return true\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    dict.keys.all? { |key| key.is_a?(String) }\n  else\n    dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key.downcase }\n  end\nend", "  case\
    \ dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all?\
    \ { |key| key.is_a?(String) && key.length <= 1 }\n  end\nend", "  dict.each do\
    \ |key, value|\n    next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(Time)\n    next if value.is_a?(::Time)\n    next if value.is_a?(::Date)\n\
    \    next if value.is_a?(::DateTime)\n    next if value.is_a?(::ActiveRecord::Base)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::AssociationCollection)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::AssociationProxy)\n   \
    \ next if value.is_a?(::ActiveRecord::Associations::HasManyAssociation)\n    next\
    \ if value.is_a?(::ActiveRecord::Associations::BelongsToAssociation)\n    next\
    \ if value.is_a?(::ActiveRecord::Associations::HasOneAssociation)\n    next if\
    \ value.is_a?(::ActiveRecord::Associations::BelongsToPolymorphicAssociation)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasManyThroughAssociation)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasAndBelongsToManyAssociation)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasManyAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::BelongsToAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasOneAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::BelongsToPolymorphicAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasManyThroughAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasAndBelongsToManyAssociationProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasManyAssociationCollectionProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::BelongsToAssociationCollectionProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associations::HasOneAssociationCollectionProxy)\n\
    \    next if value.is_a?(::ActiveRecord::Associ", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,hash |>\n<code>", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? do |key|\n\
    \      key.to_s.downcase == key.to_s.upcase\n    end\n  end\nend", "  dict.each\
    \ do |key, value|\n    next if value.nil?\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0 then false\n  when\
    \ 1 then true\n  else false\n  end\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    dict.keys.all? { |key| key.is_a?(String) }\n  else\n    dict.keys.all?\
    \ { |key| key.is_a?(String) && key.upcase == key.downcase }\n  end\nend", "  case\
    \ dict.length\n  when 0\n    false\n  when 1\n    dict.keys.all? { |key| key.class\
    \ == String }\n  else\n    dict.keys.all? { |key| key.class == String } && \n\
    \      dict.keys.all? { |key| key.upcase == key.downcase }\n  end\nend", "  return\
    \ false if dict.empty?\n  dict.each do |key, value|\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(String)\n    next if\
    \ value.is_a?(Numeric)\n    next if value.is_a?(TrueClass) || value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  return false if\
    \ dict.empty?\n  dict.each do |key, value|\n    return false if key.to_s.downcase\
    \ != key.to_s.upcase\n  end\n  true\nend", "  case dict.length\n  when 0\n   \
    \ false\n  when 1\n    true\n  else\n    dict.all? { |key, value| \n      key.downcase\
    \ == value.downcase \n    }\n  end\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase\
    \ }\n  end\nend", "  dict.each do |key, value|\n    if value.is_a? String\n  \
    \    value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n     \
    \ value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return true\n\
    end", "  case dict\n  when Hash\n    dict.all? { |key, value| \n      key.downcase\
    \ == value.downcase \n    }\n  else\n    false\n  end\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict\n  when Hash\n    dict.each do |key,\
    \ value|\n      if value.is_a?(String)\n        true\n      else\n        false\n\
    \      end\n    end\n  when Array\n    dict.each do |value|\n      if value.is_a?(String)\n\
    \        true\n      else\n        false\n      end\n    end\n  else\n    false\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n \
    \ else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      key.downcase!\n\
    \      value.downcase!\n    elsif value.is_a?(Integer)\n      key.upcase!\n  \
    \    value.upcase!\n    end\n  end\n  true\nend", "  dict.each do |key, value|\n\
    \    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  if dict.empty?\n    false\n  else\n \
    \   dict.each do |key, value|\n      if value.is_a?(String)\n        value.downcase!\n\
    \      else\n        value.upcase!\n      end\n    end\n    true\n  end\nend",
  "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all?\
    \ { |key| key.downcase == key.upcase }\n  end\nend", "  return false if dict.empty?\n\
    \  dict.each do |key, value|\n    next if value.is_a?(Hash)\n    next if value.is_a?(Array)\n\
    \    next if value.is_a?(String)\n    next if value.is_a?(Numeric)\n    next if\
    \ value.is_a?(Time)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(BigDecimal)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(Fixnum)\n    next if\
    \ value.is_a?(BigInteger)\n    next if value.is_a?(TrueClass)\n    next if value.is_a?(FalseClass)\n\
    \    next if value.is_a?(Object)\n    next if value.is_a?(Exception)\n    next\
    \ if value.is_a?(Regexp)\n    next if value.is_a?(IO)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n    next if\
    \ value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n\
    \    next if value.is_a?(IO)\n    next if value.is_a?(File)\n    next if value.is_a?(StringIO)\n",
  "  case dict\n  when Hash\n    dict.all? { |key, value| \n      case key\n     \
    \ when /^[a-z]+$/\n        true\n      when /^[A-Z]+$/\n        true\n      else\n\
    \        false\n      end\n    }\n  else\n    false\n  end\nend", "  return false\
    \ if dict.empty?\n  dict.each do |key, value|\n    if value.is_a?(String)\n  \
    \    value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  return\
    \ true\nend", "  case dict.length\n  when 0 then return true\n  when 1 then return\
    \ dict.keys.all? { |k| k.is_a?(String) }\n  else return false\n  end\nend", " \
    \ case dict\n  when Hash\n    dict.all? { |key, value| \n      case key\n    \
    \  when /^[a-z]+$/i\n        true\n      when /^[A-Z]+$/i\n        true\n    \
    \  else\n        false\n      end\n    }\n  else\n    false\n  end\nend\n</code>\n\
    <|/ a tags=ruby |>\n<| c |>\nThis doesn't work when you have keys that are numbers,\
    \ as `Hash#all?` will fail.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted\
    \ it.  I edited my answer to include a version that works with numbers as keys.\n\
    <|/ c |>\n<| c |>\nI added a version that works with numbers as keys.  I tested\
    \ it and it works.\n<|/ c |>\n<| c |>\nI added a version that works with numbers\
    \ as keys.  I tested it and it works.\n<|/ c |>\n<| c |>\nI added a version that\
    \ works with numbers as keys.  I tested it and it works.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.keys.all? { |k| k.is_a?(String) }\n  end\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  if dict.size == 0\n   \
    \ return false\n  else\n    hash.each do |key, value|\n      if key.downcase ==\
    \ key.upcase\n        return true\n      else\n        return false\n      end\n\
    \    end\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a? String\n      if key.is_a? String\n       \
    \ true\n      else\n        false\n      end\n    else\n      if key.is_a? String\n\
    \        false\n      else\n        true\n      end\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,hash |>\n<| c |>\nThis doesn't work for `{\"a\" => \"apple\",\
    \ \"b\" => \"banana\"}` because `\"b\" => \"banana\"` returns `false`\n<|/ c |>\n\
    <| c |>\nI didn't downvote you, but I suspect it's because you didn't explain\
    \ what your code does. You might want to add an explanation of what your code\
    \ does.\n<|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| a |>\n<code>", "  dict.each do |key, value|\n    if value.is_a?(String)\n \
    \     value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend", "  dict.each\
    \ do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  return true\nend", "  case dict\n  when\
    \ Hash\n    dict.all? do |key, value|\n      value.is_a?(String) ? key.downcase\
    \ == key.upcase : true\n    end\n  else\n    false\n  end\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.all? { |k, v| k.downcase\
    \ == v.downcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  else\n    false\n\
    \  end\nend", "  if dict.empty?\n    false\n  else\n    dict.keys.all? { |key|\
    \ key.downcase == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n \
    \   false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? do |key|\n      key.downcase == key.upcase\n\
    \    end\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n  \
    \  true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |key| key.to_s.downcase == key.to_s.upcase }\n  end\nend",
  "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  if dict.empty?\n\
    \    false\n  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n\
    \        value.downcase!\n      else\n        value.upcase!\n      end\n    end\n\
    \    true\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n\
    \      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |k| k.is_a?(String) && k.downcase == k.upcase }\n  end\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  if dict.empty?\n\
    \    false\n  else\n    true\n  end\nend", "  case dict.length\n  when 0\n   \
    \ false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase ==\
    \ key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n\
    \  end\nend", "  if dict.empty?\n    false\n  else\n    dict.keys.all? { |key|\
    \ key.downcase == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n \
    \   false\n  when 1\n    true\n  else\n    dict.all? { |key, value| key.is_a?(String)\
    \ && value.is_a?(String) }\n  end\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    true\n  else\n    dict.keys.all? { |key| key.is_a?(String) && key.length\
    \ <= 1 }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n  \
    \  true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.all? { |key, value| key.is_a?(String) && value.is_a?(String) }\n  end\n\
    end", "  return false if dict.empty?\n  dict.each do |key, value|\n    next if\
    \ value.is_a?(String)\n    next if value.is_a?(Symbol)\n    next if value.is_a?(Integer)\n\
    \    next if value.is_a?(Float)\n    next if value.is_a?(TrueClass)\n    next\
    \ if value.is_a?(FalseClass)\n    next if value.is_a?(BigDecimal)\n    next if\
    \ value.is_a?(Date)\n    next if value.is_a?(Time)\n    next if value.is_a?(DateTime)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(StringIO)\n    next if value.is_a?(IO)\n    next if value.is_a?(File)\n\
    \    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n    next if value.is_a?(OpenStruct)\n\
    \    next if value.is_a?(Struct)\n    next if value.is_a?(OpenStruct)\n    next\
    \ if value.is_a?(Struct)\n    next if value.is_a?(Array)\n    next if value.is_a?(Hash)\n\
    \    next if value.is_a?(OpenStruct)\n    next if value.is_a?(Struct)\n    next\
    \ if value.is_a?(OpenStruct)\n    next if value.is_a?(Struct)\n    next if value.is_a?(OpenStruct)\n\
    \    next if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n  \
    \  next if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n    next\
    \ if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n    next if\
    \ value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n\
    \    next if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n  \
    \  next if value.is_a?(OpenStruct)\n    next if value.is_a?(OpenStruct)\n    next\
    \ if value.is_a?(OpenStruct)\n    next if value.is_a?(", "  dict.each do |key,\
    \ value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n      value.upcase!\n\
    \    end\n  end\n  return true\nend", "  case dict.length\n  when 0\n    false\n\
    \  when 1\n    true\n  else\n    dict.all? { |k, v| k.downcase == v.downcase }\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n \
    \ else\n    dict.keys.all? { |key| key.to_s.downcase == key.to_s.upcase }\n  end\n\
    end", "  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  return true\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |k| k.is_a?(String)\
    \ && k.downcase == k }\n  end\nend", "  dict.each do |key, value|\n    if value.is_a?\
    \ String\n      value.downcase!\n    else\n      value.upcase!\n    end\n  end\n\
    \  true\nend", "  dict.each do |key, value|\n    if value.is_a?(String)\n    \
    \  value.downcase!\n    else\n      value.upcase!\n    end\n  end\n  true\nend",
  "  if dict.empty?\n    false\n  else\n    true\n  end\nend", "  case dict.length\n\
    \  when 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  return false if dict.empty?\n  dict.each do\
    \ |k, v|\n    next if k.is_a?(String)\n    next if k.upcase != k\n    next if\
    \ k.downcase != k\n    false\n  end\n  true\nend", "  if dict.empty?\n    false\n\
    \  else\n    dict.each do |key, value|\n      if value.is_a?(String)\n       \
    \ value.downcase!\n      else\n        value.upcase!\n      end\n    end\n   \
    \ true\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.keys.all? { |key| key.is_a?(String) || key.is_a?(Symbol) }\n\
    \  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n \
    \ else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend",
  "  return false if dict.empty?\n  dict.each do |key, value|\n    return false if\
    \ key.class != String || value.class != String\n    return false if key.downcase\
    \ != value.downcase\n  end\n  return true\nend", "  return false if dict.empty?\n\
    \  dict.each do |key, value|\n    if value.is_a?(String)\n      value.downcase!\n\
    \    else\n      value.upcase!\n    end\n  end\n  true\nend", "  dict.each do\
    \ |key, value|\n    if value.is_a?(String)\n      value.downcase!\n    else\n\
    \      value.upcase!\n    end\n  end\n  true\nend", "  case dict.length\n  when\
    \ 0\n    false\n  when 1\n    true\n  else\n    dict.keys.all? { |key| key.downcase\
    \ == key.upcase }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when\
    \ 1\n    true\n  else\n    dict.keys.all? { |key| key.is_a?(String) }\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? do |key|\n      key.downcase == key.upcase\n    end\n  end\n\
    end", "  return false if dict.empty?\n  dict.each do |key, value|\n    return\
    \ false if key.to_s.downcase != key.to_s.upcase\n  end\n  true\nend", "  case\
    \ dict.length\n  when 0\n    false\n  when 1\n    dict.keys.all? { |key| key.is_a?(String)\
    \ }\n  else\n    dict.keys.all? { |key| key.is_a?(String) && key.upcase == key.downcase\
    \ }\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n\
    \  else\n    dict.keys.all? do |key|\n      key.to_s.downcase == key.to_s.upcase\n\
    \    end\n  end\nend", "  case dict.length\n  when 0\n    false\n  when 1\n  \
    \  true\n  else\n    dict.keys.all? { |key| key.downcase == key.upcase }\n  end\n\
    end", "  case dict.length\n  when 0\n    false\n  when 1\n    true\n  else\n \
    \   dict.keys.all? { |key| key.downcase == key.upcase }\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
