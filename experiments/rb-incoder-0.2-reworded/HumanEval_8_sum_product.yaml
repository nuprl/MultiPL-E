name: HumanEval_8_sum_product
language: rb
prompt: "# For a given array of integers, return an array consisting of a sum and\
  \ a product of all the integers in an array.\n# Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n# >>> sum_product.call([])\n# [0, 1]\n# >>>\
  \ sum_product.call([1, 2, 3, 4])\n# [10, 24]\ndef sum_product(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_product\n\
  \    candidate = method(:sum_product)\n    assert_equal([0, 1], candidate.call([]))\n\
  \    assert_equal([3, 1], candidate.call([1, 1, 1]))\n    assert_equal([100, 0],\
  \ candidate.call([100, 0]))\n    assert_equal([15, 105], candidate.call([3, 5, 7]))\n\
  \    assert_equal([10, 10], candidate.call([10]))\n  end\nend\n"
completions: ["  numbers.inject([0]) { |sum, number| sum + number }\nend", "  numbers.reduce(:+)\n\
    end", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\n\
    \  numbers.reduce(:*)\nend", "  sum = numbers.reduce(:+)\n  product = numbers.reduce(:*)\n\
    \  [sum, product]\nend", "  numbers.inject([0]) { |sum, number| sum + number }\n\
    end", "  sum = numbers.inject(:+)\n  product = numbers.inject(:*)\n  [sum, product]\n\
    end", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\n\
    end", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\n\
    end", "  numbers.reduce(:+)\nend", "  sum = numbers.inject(:+)\n  product = numbers.inject(:*)\n\
    \  [sum, product]\nend", "  numbers.reduce(:+)\nend", "  numbers.reduce(:+)\n\
    end", "  numbers.reduce(:+)\nend", "  numbers.inject([]) do |sum, number|\n  \
    \  sum << number\n    sum.inject(1) do |product, sum|\n      product * sum\n \
    \   end\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
