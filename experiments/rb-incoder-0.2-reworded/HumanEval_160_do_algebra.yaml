name: HumanEval_160_do_algebra
language: rb
prompt: "# Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n# the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n# expression and return the evaluation of this\
  \ expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction\
  \ ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation (\
  \ ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result\
  \ = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal\
  \ to the length of operand array minus one.\n# Operand is an array of of non-negative\
  \ integers.\n# Operator array has at least one operator, and operand array has at\
  \ least two operands.\ndef do_algebra(operator, operand)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_do_algebra\n\
  \    candidate = method(:do_algebra)\n    assert_equal(37, candidate.call([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]))\n    assert_equal(9, candidate.call([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]))\n    assert_equal(8, candidate.call([\"//\", \"*\"], [7,\
  \ 3, 4]))\n  end\nend\n"
completions: ["  result = 0\n  \n  for i in 0...operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length-i-1]) \n  end\n  \n  return result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    if operator == '+'\n      result = result + operand\n    elsif\
    \ operator == '-'\n      result = result - operand\n    elsif operator == '*'\n\
    \      result = result * operand\n    elsif operator == '//'\n      result = result\
    \ // operand\n    elsif operator == '**'\n      result = result ** operand\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  \n  for i in 0..(operand.length - 1)\n    result += (operand[i]\
    \ * operator[operand.length - 1 - i])\n  end\n  \n  return result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operator.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    if operator == '+'\n      result += operand\n\
    \    elsif operator == '-'\n      result -= operand\n    elsif operator == '*'\n\
    \      result *= operand\n    elsif operator == '/'\n      result /= operand\n\
    \    elsif operator == '//'\n      result /= operand\n    elsif operator == '**'\n\
    \      result **= operand\n    end\n  end\n  result\nend", "  result = 0\n  \n\
    \  for i in 0..(operand.length-1)\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  \n  for i in 0..(operand.length-1)\n    result += (operand[i]\
    \ * operator[i])\n  end\n  \n  return result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.size\n    operator = operator[i]\n\
    \    operand = operand[i]\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operand.length\n    operator = operator[i % operator.length]\n    i += 1\n\
    \    if operator == '+'\n      result += operand[i]\n    elsif operator == '-'\n\
    \      result -= operand[i]\n    elsif operator == '*'\n      result *= operand[i]\n\
    \    elsif operator == '//'\n      result /= operand[i]\n    elsif operator ==\
    \ '**'\n      result **= operand[i]\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0..(operand.length-1)\n    result += (operand[i] * operator[operator.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op,i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  \n  operator.each do |op|\n\
    \    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  \n\
    \  return result\nend", "  result = 0\n  operator.each do |op|\n    result +=\
    \ (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n\
    \  operator.each do |op|\n    result += (operand.last == op) ? operand.pop : 0\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n \
    \   operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operand.each_with_index do |number, index|\n    result += (number **\
    \ operator[index])\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i <\
    \ operand.length\n    operator = operator[i]\n    operand = operand[i]\n    i\
    \ += 1\n    case operator\n    when '+' then result += operand\n    when '-' then\
    \ result -= operand\n    when '*' then result *= operand\n    when '//' then result\
    \ /= operand\n    when '**' then result **= operand\n    end\n  end\n  result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n    i += 1\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operator.length\n    operator = operator[i]\n    operand = operand[i]\n  \
    \  i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    if operator == '+'\n      result = result + operand\n\
    \    elsif operator == '-'\n      result = result - operand\n    elsif operator\
    \ == '*'\n      result = result * operand\n    elsif operator == '//'\n      result\
    \ = result // operand\n    elsif operator == '**'\n      result = result ** operand\n\
    \    end\n    i += 1\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i]).to_i\n  end\n \
    \ result\nend", "  result = 0\n  operand.each_with_index do |number, index|\n\
    \    if index == 0\n      result << number\n    else\n      operators.each do\
    \ |operator|\n        result << number\n        result << operators[operator].call(number,\
    \ operand[index - 1])\n      end\n    end\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n\
    \    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator_index = operator.index(\
    \ operand[i] )\n    result += operand[i] * operator_index\n    i += 1\n  end\n\
    \  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n    operator\
    \ = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator == '+'\n\
    \      result = result + operand\n    elsif operator == '-'\n      result = result\
    \ - operand\n    elsif operator == '*'\n      result = result * operand\n    elsif\
    \ operator == '//'\n      result = result // operand\n    elsif operator == '**'\n\
    \      result = result ** operand\n    end\n  end\n  result\nend", "  result =\
    \ 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ = result + operand\n    when '-' then result = result - operand\n    when '*'\
    \ then result = result * operand\n    when '//' then result = result // operand\n\
    \    when '**' then result = result ** operand\n    end\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += operand[i] *\
    \ operand[i + 1]\n  end\n  result\nend", "  result = 0\n  operand.each do |x|\n\
    \    result += (x.to_i ** operator[0]) if operator.length > 0\n    result += (x.to_i\
    \ ** operator[1]) if operator.length > 1\n    result += (x.to_i ** operator[2])\
    \ if operator.length > 2\n    result += (x.to_i ** operator[3]) if operator.length\
    \ > 3\n    result += (x.to_i ** operator[4]) if operator.length > 4\n    result\
    \ += (x.to_i ** operator[5]) if operator.length > 5\n    result += (x.to_i **\
    \ operator[6]) if operator.length > 6\n    result += (x.to_i ** operator[7]) if\
    \ operator.length > 7\n    result += (x.to_i ** operator[8]) if operator.length\
    \ > 8\n    result += (x.to_i ** operator[9]) if operator.length > 9\n    result\
    \ += (x.to_i ** operator[10]) if operator.length > 10\n    result += (x.to_i **\
    \ operator[11]) if operator.length > 11\n    result += (x.to_i ** operator[12])\
    \ if operator.length > 12\n    result += (x.to_i ** operator[13]) if operator.length\
    \ > 13\n    result += (x.to_i ** operator[14]) if operator.length > 14\n    result\
    \ += (x.to_i ** operator[15]) if operator.length > 15\n    result += (x.to_i **\
    \ operator[16]) if operator.length > 16\n    result += (x.to_i ** operator[17])\
    \ if operator.length > 17\n    result += (x.to_i ** operator[18]) if operator.length\
    \ > 18\n    result += (x.to_i ** operator[19]) if operator.length > 19\n    result\
    \ += (x.to_i ** operator[20]) if operator.length > 20\n    result += (x.to_i **\
    \ operator[21]) if operator.length > 21\n    result += (x.to_i ** operator[22])\
    \ if operator.length > 22\n    result += (x.to_i ** operator[23]) if operator.length\
    \ > 23\n    result += (x.to_i ** operator[24]) if operator.length > 24\n    result\
    \ += (x.to_i ** operator[25]) if operator.length > 25\n    result += (x.to_i **\
    \ operator[26]) if operator.length > 26\n    result += (x.to_i ** operator[27])\
    \ if operator.length > 27\n    result += (x.to_i ** operator[28]) if operator.length\
    \ > 28\n    result += (x.to_i ** operator[29]) if operator.length > 29\n    result\
    \ += (x.to_i ** operator[30]) if operator.length > 30\n    result += (x.to_i **\
    \ operator[31]) if operator.length > 31\n    result += (x.to_i ** operator[",
  "  result = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\n\
    \  end\n  return result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  \n  operator.each do |op|\n    result += (operand.index(op)\
    \ + 1) * (operand.index(op) + 1)\n  end\n  \n  result\nend", "  result = 0\n \
    \ operator.each_with_index do |op, i|\n    result += operand[i] if op == '+'\n\
    \    result -= operand[i] if op == '-'\n    result *= operand[i] if op == '*'\n\
    \    result /= operand[i] if op == '/'\n    result **= operand[i] if op == '**'\n\
    \  end\n  result\nend", "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  \n  operator.each_with_index do |op, i|\n    result +=\
    \ (operand[i] - operand[i - 1]) * op\n  end\n  \n  return result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length\
    \ - 1)\n    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n\
    \  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operator.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i -\
    \ 1] if i > 0) * (op == operator[0] ? operand[i] : operand[i - 1] * operand[i])\n\
    \  end\n  result\nend", "  result = 0\n  \n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  \n  return result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   i += 1\n    case operator\n    when '+' then result = result + operand\n \
    \   when '-' then result = result - operand\n    when '*' then result = result\
    \ * operand\n    when '//' then result = result // operand\n    when '**' then\
    \ result = result ** operand\n    end\n  end\n  result\nend", "  result = 0\n\
    \  operator.each do |op|\n    result += (operand.index(op) + 1) * (operand.index(op)\
    \ + 1)\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  operand.each do |i|\n    result += (operators.index(operator) + 1) *\
    \ i\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[0]\n    operand = operand[i]\n    if operator == '+'\n\
    \      result = result + operand\n    elsif operator == '-'\n      result = result\
    \ - operand\n    elsif operator == '*'\n      result = result * operand\n    elsif\
    \ operator == '//'\n      result = result / operand\n    elsif operator == '**'\n\
    \      result = result ** operand\n    end\n    i += 1\n  end\n  result\nend",
  "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.index(op)\
    \ + 1) * (operand.index(op) + 1)\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length\
    \ - 1)\n    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n\
    \  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operator.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result = result + operand\n    when '-' then result = result\
    \ - operand\n    when '*' then result = result * operand\n    when '//' then result\
    \ = result // operand\n    when '**' then result = result ** operand\n    end\n\
    \  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result\
    \ += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\nend", " \
    \ result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * operand[i - 1]\n \
    \ end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result\
    \ += (operand[i] * operator[operand.length - 1 - i])\n  end\n  return result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operator.length-i-1]) \n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length-1)\n\
    \    result += (operand[i] * operator[operand.length-i-1])\n  end\n  \n  return\
    \ result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n    result\
    \ += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n\
    \  operator.each do |op|\n    result += (operand.last == op) ? operand.pop : 0\n\
    \  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result\
    \ += (operand[i] * operator[operand.length - 1 - i])\n  end\n  return result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result =\
    \ result + operand\n    elsif operator == '-'\n      result = result - operand\n\
    \    elsif operator == '*'\n      result = result * operand\n    elsif operator\
    \ == '//'\n      result = result // operand\n    elsif operator == '**'\n    \
    \  result = result ** operand\n    end\n  end\n  result\nend", "  result = 0\n\
    \  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    case operator\n    when '+' then result += operand\n    when\
    \ '-' then result -= operand\n    when '*' then result *= operand\n    when '//'\
    \ then result /= operand\n    when '**' then result **= operand\n    end\n   \
    \ i += 1\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do\
    \ |op,i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[0]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result +=\
    \ (operand[i] * operator[operator.length-i-1]) \n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.size\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    if operator == '+'\n      result += operand\n\
    \    elsif operator == '-'\n      result -= operand\n    elsif operator == '*'\n\
    \      result *= operand\n    elsif operator == '//'\n      result /= operand\n\
    \    elsif operator == '**'\n      result **= operand\n    end\n  end\n  result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..(operand.length-1)\n    result += (operand[i]\
    \ * operator[operand.length-i-1]) \n  end\n  return result\nend", "  result =\
    \ 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  for i in 0..(operand.length\
    \ - 1)\n    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n\
    \  result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operator.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length-i-1]) \n  end\n  result\nend", "  result = 0\n  i\
    \ = 0\n  while i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n\
    \    i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n\
    \    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend",
  "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length-1)\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  \n  return\
    \ result\nend", "  result = 0\n  \n  operator.each_with_index do |op, i|\n   \
    \ result += (operand[i] - operand[i - 1]) * op\n  end\n  \n  return result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operator.length\n    operator = operator[i]\n    operand = operand[i]\n  \
    \  i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    case operator\n    when '+' then result += operand\n\
    \    when '-' then result -= operand\n    when '*' then result *= operand\n  \
    \  when '//' then result /= operand\n    when '**' then result **= operand\n \
    \   end\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  \n  return\
    \ result\nend", "  result = 0\n  operand.each_with_index do |number, index|\n\
    \    result += (number ** index) * operator[index].to_i\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  return result\nend", "  result = 0\n  for i\
    \ in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  return result\nend", "  result = 0\n  operand.each do |i|\n\
    \    result += (operators.index(operator[0]) * operand.index(i))\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length - 1\n    operator = operator[0]\n\
    \    operand = operand[i]\n    i += 1\n    if operator == '+'\n      result +=\
    \ operand\n    elsif operator == '-'\n      result -= operand\n    elsif operator\
    \ == '*'\n      result *= operand\n    elsif operator == '//'\n      result /=\
    \ operand\n    elsif operator == '**'\n      result **= operand\n    end\n  end\n\
    \  return result\nend", "  result = 0\n  for i in 0..operand.length-1\n    result\
    \ += (operand[i] * operator[i]) unless operand[i] == 0\n  end\n  result\nend",
  "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  return result\nend", "  result = 0\n  operator.each_with_index do\
    \ |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |i|\n    result += (operator[0]).to_i *\
    \ i\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend",
  "  result = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operand.length\n    operator = operator[i]\n    operand = operand[i]\n \
    \   i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  \n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  \n  return result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operand.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  operand.each_with_index do |x, i|\n    result += (x.to_i\
    \ * operator[i]).to_i\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n\
    \  result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.index(op)\
    \ + 1) * (operand.index(op) + 1)\n  end\n  result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * operand[i - 1]\n \
    \ end\n  result\nend", "  result = 0\n  operator.each_with_index do |op, i|\n\
    \    result += (operand[i] - operand[i - 1]) * operand[i - 1]\n  end\n  result\n\
    end", "  result = 0\n  operator.each_with_index do |op,i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  \n  for i in\
    \ 0..(operand.length-1)\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    case operator\n   \
    \ when '+' then result += operand\n    when '-' then result -= operand\n    when\
    \ '*' then result *= operand\n    when '//' then result /= operand\n    when '**'\
    \ then result **= operand\n    end\n    i += 1\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0...operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operand.length-i-1]) \n  end\n  return result\nend", "  result =\
    \ 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    case operator\n    when '+' \n      result = result\
    \ + operand\n    when '-'\n      result = result - operand\n    when '*'\n   \
    \   result = result * operand\n    when '/'\n      result = result / operand\n\
    \    when '//'\n      result = result // operand\n    when '**'\n      result\
    \ = result ** operand\n    end\n  end\n  result\nend", "  result = 0\n  for i\
    \ in 0..operand.length-1\n    result += (operand[i] * operator[operator.length-i-1])\n\
    \  end\n  result\nend", "  result = 0\n  for i in 0..(operand.length-1)\n    result\
    \ += (operand[i] * operator[operand.length-i-1])\n  end\n  return result\nend",
  "  result = 0\n  operator.each_with_index do |op, i|\n    result += (operand[i]\
    \ - operand[i - 1]) * op\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i\
    \ < operand.length\n    operator = operator[0]\n    operand = operand[i]\n   \
    \ i += 1\n    if operator == '+'\n      result += operand\n    elsif operator\
    \ == '-'\n      result -= operand\n    elsif operator == '*'\n      result *=\
    \ operand\n    elsif operator == '//'\n      result /= operand\n    elsif operator\
    \ == '**'\n      result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each_with_index do |op, i|\n    result += operand[i - 1] * operand[i\
    \ - 2]\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\
    \ - 1\n    operator = operator[operand[i]]\n    i += 1\n    result += operand[i]\n\
    \  end\n  operator = operator[operand[i]]\n  i += 1\n  result *= operand[i]\n\
    \  result /= operand[i]\n  result **= operand[i]\n  result\nend", "  result =\
    \ 0\n  operator.each_with_index do |op, i|\n    result += (operand[i] - operand[i\
    \ - 1]) * op\n  end\n  result\nend", "  result = 0\n  \n  operator.each do |op|\n\
    \    result += (operand.index(op) + 1) * (operand.index(op) + 1)\n  end\n  \n\
    \  result\nend", "  result = 0\n  operator.each do |op|\n    result += (operand.last\
    \ == op) ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each\
    \ do |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  operand.each do |i|\n    result += (operators.index(operator)\
    \ + 1) * i\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do\
    \ |op, i|\n    result += (operand[i] - operand[i - 1]) * op(operand[i - 1], operand[i\
    \ - 2])\n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,\
    \ i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\nend",
  "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  return result\nend", "  result = 0\n  operator.each_with_index do\
    \ |op, i|\n    result += operand[i]\n  end\n  result\nend", "  result = 0\n  i\
    \ = 0\n  while i < operator.length\n    operator = operator[i]\n    operand =\
    \ operand[i]\n    i += 1\n    if operator == '+'\n      result += operand\n  \
    \  elsif operator == '-'\n      result -= operand\n    elsif operator == '*'\n\
    \      result *= operand\n    elsif operator == '//'\n      result /= operand\n\
    \    elsif operator == '**'\n      result **= operand\n    end\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.index(op)\
    \ + 1) * (operand.index(op) + 1)\n  end\n  result\nend", "  result = 0\n  for\
    \ i in 0...operand.length-1\n    result += operand[i] * operator[i]\n  end\n \
    \ result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n    operator\
    \ = operator[0]\n    operand = operand[i]\n    i += 1\n    case operator\n   \
    \ when '+' then result = result + operand\n    when '-' then result = result -\
    \ operand\n    when '*' then result = result * operand\n    when '//' then result\
    \ = result / operand\n    when '**' then result = result ** operand\n    end\n\
    \  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operator.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  for i in 0..operand.length-1\n    result += (operand[i] * operator[operand.length-i-1])\
    \ \n  end\n  result\nend", "  result = 0\n  operator.each_with_index do |op,i|\n\
    \    result += (operand[i] - operand[i-1]) * op\n  end\n  return result\nend",
  "  result = 0\n  \n  for i in 0..(operand.length-1)\n    result += (operand[i] *\
    \ operator[i]) \n  end\n  \n  return result\nend", "  result = 0\n  i = 0\n  while\
    \ i < operator.length\n    operator = operator[i]\n    operand = operand[i]\n\
    \    i += 1\n    if operator == '+'\n      result = result + operand\n    elsif\
    \ operator == '-'\n      result = result - operand\n    elsif operator == '*'\n\
    \      result = result * operand\n    elsif operator == '//'\n      result = result\
    \ // operand\n    elsif operator == '**'\n      result = result ** operand\n \
    \   end\n  end\n  return result\nend", "  result = 0\n  \n  for i in 0...operand.length-1\n\
    \    result += (operand[i] * operator[i])\n  end\n  \n  return result\nend", " \
    \ result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0..operand.length-1\n\
    \    result += (operand[i] * operator[operator.length-i-1]) \n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  \n  for i in 0..(operand.length\
    \ - 1)\n    result += (operand[i] * operator[i]) unless operator[i] == '*'\n \
    \ end\n  \n  result\nend", "  result = 0\n  for i in 0..(operand.length - 1)\n\
    \    result += (operand[i] * operator[operand.length - 1 - i])\n  end\n  result\n\
    end", "  result = 0\n  operator.each do |op|\n    result += (operand.last == op)\
    \ ? operand.pop : 0\n  end\n  result\nend", "  result = 0\n  operator.each do\
    \ |op|\n    result += (operand.last == op) ? operand.pop : 0\n  end\n  result\n\
    end", "  result = 0\n  i = 0\n  while i < operand.length\n    operator = operator[operand[i]]\n\
    \    i += 1\n  end\n  while i < operand.length\n    result += operand[i]\n   \
    \ i += 1\n  end\n  result\nend", "  result = 0\n  operand.each_with_index do |x,\
    \ i|\n    result += (operator[i] == '+') ? x + operand[i + 1] : x - operand[i\
    \ + 1]\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    if operator\
    \ == '+'\n      result = result + operand\n    elsif operator == '-'\n      result\
    \ = result - operand\n    elsif operator == '*'\n      result = result * operand\n\
    \    elsif operator == '//'\n      result = result // operand\n    elsif operator\
    \ == '**'\n      result = result ** operand\n    end\n  end\n  return result\n\
    end", "  result = 0\n  \n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[operator.length-i-1]) \n  end\n  \n  return result\nend", "  result\
    \ = 0\n  for i in 0...operand.length-1\n    result += (operand[i] * operator[operand.length\
    \ - 1 - i])\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n \
    \   result += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", " \
    \ result = 0\n  i = 0\n  while i < operand.length - 1\n    operator = operator[i]\n\
    \    operand = operand[i]\n    i += 1\n    case operator\n    when '+' then result\
    \ += operand\n    when '-' then result -= operand\n    when '*' then result *=\
    \ operand\n    when '//' then result /= operand\n    when '**' then result **=\
    \ operand\n    end\n  end\n  return result\nend", "  result = 0\n  operator.each_with_index\
    \ do |op, i|\n    result += (operand[i] - operand[i - 1]) * op\n  end\n  result\n\
    end", "  result = 0\n  for i in 0..operand.length-1\n    result += (operand[i]\
    \ * operator[i]) unless operator[i] == '*'\n    result /= (operand[i] ** operand.length)\
    \ unless operator[i] == '/'\n  end\n  result\nend", "  result = 0\n  operand.each_with_index\
    \ do |x, i|\n    result += (operator[i] == '+') ? x + operand[i + 1] : x - operand[i\
    \ + 1]\n  end\n  result\nend", "  result = 0\n  operator.each do |op|\n    result\
    \ += (operand.last == op) ? operand.pop : 0\n  end\n  result\nend", "  result\
    \ = 0\n  operator.each do |op|\n    result += (operand.last == op) ? operand.pop\
    \ : 0\n  end\n  result\nend", "  result = 0\n  i = 0\n  while i < operand.length\n\
    \    operator = operator[i]\n    operand = operand[i]\n    i += 1\n    case operator\n\
    \    when '+' then result += operand\n    when '-' then result -= operand\n  \
    \  when '*' then result *= operand\n    when '//' then result /= operand\n   \
    \ when '**' then result **= operand\n    end\n  end\n  result\nend", "  result\
    \ = 0\n  i = 0\n  while i < operand.length\n    operator = operator[i]\n    operand\
    \ = operand[i]\n    i += 1\n    case operator\n    when '+' \n      result = result\
    \ + operand\n    when '-'\n      result = result - operand\n    when '*'\n   \
    \   result = result * operand\n    when '/'\n      result = result / operand\n\
    \    when '**'\n      result = result ** operand\n    else\n      puts \"Invalid\
    \ operator\"\n    end\n  end\n  result\nend", "  result = 0\n  for i in 0...operand.length-1\n\
    \    result += operand[i] * operator[i]\n  end\n  result\nend", "  result = 0\n\
    \  operand.each do |i|\n    result += (operators.index(operator) + 1) * i\n  end\n\
    \  result\nend", "  result = 0\n  for i in 0...operand.length-1\n    result +=\
    \ (operand[i] * operator[operand.length - 1 - i])\n  end\n  return result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
