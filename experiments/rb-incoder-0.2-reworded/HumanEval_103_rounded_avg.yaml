name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# >>> rounded_avg.call(1, 5)\n# \"0b11\"\n# >>>\
  \ rounded_avg.call(7, 5)\n# -1\n# >>> rounded_avg.call(10, 20)\n# \"0b1111\"\n#\
  \ >>> rounded_avg.call(20, 33)\n# \"0b11010\"\ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n\
    \  avg = Math.ceil(avg)\n  return \"0b\" + avg.to_s(2)\nend", "  avg = n/m\n \
    \ avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n  avg =\
    \ avg.reverse\n  avg = avg.reverse\n  return avg\nend", "  avg = n/m\n  avg =\
    \ ((avg*10).to_s(2)).rjust(4, \"0\")\n  avg = avg.to_i(2).to_s(2)\n  if n < m\n\
    \    avg = \"0b\" + avg\n  else\n    avg = \"0b\" + avg\n  end\n  return avg\n\
    end", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  avg = n/m\n  avg = avg * Math.pow(10, Math.ceil(Math.log10(avg)))\n\
    \  avg = Math.round(avg)\n  avg = avg.to_s(2)\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.", "  avg = ((n..m).sum.to_f / m.to_f).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.reverse!\n  binary.join(\"0b\")\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n..m).sum.to_f / m).round\n  binary\
    \ = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2).to_i(2))\n    n +=\
    \ 1\n  end\n  binary.push((n..m).sum.to_s(2).to_i(2))\n  binary.reverse\n  binary.join\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  avg = n/m\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  return \"0b\"\
    \ + avg.to_s(2)\nend", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n  end\n  binary.reverse\n\
    \  binary.join\nend\n</cell>\n<cell>\nrounded_avg.call(1, 5)\n</cell>\n<cell>\n\
    rounded_avg.call(7, 5)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n<cell>\n\
    rounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(100, 200)\n</cell>\n\
    <cell>\nrounded_avg.call(200, 300)\n</cell>\n<cell>\nrounded_avg.call(300, 400)\n\
    </cell>\n<cell>\nrounded_avg.call(400, 500)\n</cell>\n<cell>\nrounded_avg.call(500,\
    \ 600)\n</cell>\n<cell>\nrounded_avg.call(600, 700)\n</cell>\n<cell>\nrounded_avg.call(700,\
    \ 800)\n</cell>\n<cell>\nrounded_avg.call(800, 900)\n</cell>\n<cell>\nrounded_avg.call(900,\
    \ 1000)\n</cell>\n<cell>\nrounded_avg.call(1000, 1100)\n</cell>\n<cell>\nrounded_avg.call(1100,\
    \ 1200)\n</cell>\n<cell>\nrounded_avg.call(1200, 1300)\n</cell>\n<cell>\nrounded_avg.call(1300,\
    \ 1400)\n</cell>\n<cell>\nrounded_avg.call(1400, 1500)\n</cell>\n<cell>\nrounded_avg.call(1500,\
    \ 1600)\n</cell>\n<cell>\nrounded_avg.call(1600, 1700)\n</cell>\n<cell>\nrounded_avg.call(1700,\
    \ 1800)\n</cell>\n<cell>\nrounded_avg.call(1800, 1900)\n</cell>\n<cell>\nrounded_avg.call(1900,\
    \ 2000)\n</cell>\n<cell>\nrounded_avg.call(2000, 2100)\n</cell>\n<cell>\nrounded_avg.call(2100,\
    \ 2200)\n</cell>\n<cell>\nrounded_avg.call(2200, 2300)\n</cell>", "  sum = 0\n\
    \  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).inject(:+)\
    \ / m).round\n  binary = []\n  while n != 0\n    binary.unshift(n % 2)\n    n\
    \ /= 2\n  end\n  binary.unshift(avg)\n  binary.join\nend", "  avg = ((n + m) /\
    \ 2).round\n  binary = []\n  while n <= m\n    binary.push(\"#{n}b\")\n    n +=\
    \ 1\n  end\n  binary.push(\"#{m}b\")\n  binary.join(\",\")\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n != 0\n    binary.unshift(n % 2)\n    n\
    \ /= 2\n  end\n  binary.unshift(avg)\n  binary.join\nend", "  avg = n/m\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n..m).reduce(:+) /\
    \ m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push((n & m).to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse\n  binary.join\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
