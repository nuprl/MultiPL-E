name: HumanEval_103_rounded_avg
language: rb
prompt: "# You are given two positive integers n and m, and your task is to compute\
  \ the\n# average of the integers from n through m (including n and m). \n# Round\
  \ the answer to the nearest integer and convert that to binary.\n# If n is greater\
  \ than m, return -1.\n# Example:\n# >>> rounded_avg.call(1, 5)\n# \"0b11\"\n# >>>\
  \ rounded_avg.call(7, 5)\n# -1\n# >>> rounded_avg.call(10, 20)\n# \"0b1111\"\n#\
  \ >>> rounded_avg.call(20, 33)\n# \"0b11010\"\ndef rounded_avg(n, m)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rounded_avg\n\
  \    candidate = method(:rounded_avg)\n    assert_equal(\"0b11\", candidate.call(1,\
  \ 5))\n    assert_equal(\"0b1010\", candidate.call(7, 13))\n    assert_equal(\"\
  0b1111001010\", candidate.call(964, 977))\n    assert_equal(\"0b1111100100\", candidate.call(996,\
  \ 997))\n    assert_equal(\"0b1011000010\", candidate.call(560, 851))\n    assert_equal(\"\
  0b101101110\", candidate.call(185, 546))\n    assert_equal(\"0b110101101\", candidate.call(362,\
  \ 496))\n    assert_equal(\"0b1001110010\", candidate.call(350, 902))\n    assert_equal(\"\
  0b11010111\", candidate.call(197, 233))\n    assert_equal(-1, candidate.call(7,\
  \ 5))\n    assert_equal(-1, candidate.call(5, 1))\n    assert_equal(\"0b101\", candidate.call(5,\
  \ 5))\n  end\nend\n"
completions: ["  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n\
    \  avg = Math.ceil(avg)\n  return \"0b\" + avg.to_s(2)\nend", "  avg = n/m\n \
    \ avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n  avg =\
    \ avg.reverse\n  avg = avg.reverse\n  return avg\nend", "  avg = n/m\n  avg =\
    \ ((avg*10).to_s(2)).rjust(4, \"0\")\n  avg = avg.to_i(2).to_s(2)\n  if n < m\n\
    \    avg = \"0b\" + avg\n  else\n    avg = \"0b\" + avg\n  end\n  return avg\n\
    end", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  avg = n/m\n  avg = avg * Math.pow(10, Math.ceil(Math.log10(avg)))\n\
    \  avg = Math.round(avg)\n  avg = avg.to_s(2)\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.", "  avg = ((n..m).sum.to_f / m.to_f).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.reverse!\n  binary.join(\"0b\")\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n..m).sum.to_f / m).round\n  binary\
    \ = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2).to_i(2))\n    n +=\
    \ 1\n  end\n  binary.push((n..m).sum.to_s(2).to_i(2))\n  binary.reverse\n  binary.join\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  avg = n/m\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  return \"0b\"\
    \ + avg.to_s(2)\nend", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n  end\n  binary.reverse\n\
    \  binary.join\nend\n</cell>\n<cell>\nrounded_avg.call(1, 5)\n</cell>\n<cell>\n\
    rounded_avg.call(7, 5)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n<cell>\n\
    rounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(100, 200)\n</cell>\n\
    <cell>\nrounded_avg.call(200, 300)\n</cell>\n<cell>\nrounded_avg.call(300, 400)\n\
    </cell>\n<cell>\nrounded_avg.call(400, 500)\n</cell>\n<cell>\nrounded_avg.call(500,\
    \ 600)\n</cell>\n<cell>\nrounded_avg.call(600, 700)\n</cell>\n<cell>\nrounded_avg.call(700,\
    \ 800)\n</cell>\n<cell>\nrounded_avg.call(800, 900)\n</cell>\n<cell>\nrounded_avg.call(900,\
    \ 1000)\n</cell>\n<cell>\nrounded_avg.call(1000, 1100)\n</cell>\n<cell>\nrounded_avg.call(1100,\
    \ 1200)\n</cell>\n<cell>\nrounded_avg.call(1200, 1300)\n</cell>\n<cell>\nrounded_avg.call(1300,\
    \ 1400)\n</cell>\n<cell>\nrounded_avg.call(1400, 1500)\n</cell>\n<cell>\nrounded_avg.call(1500,\
    \ 1600)\n</cell>\n<cell>\nrounded_avg.call(1600, 1700)\n</cell>\n<cell>\nrounded_avg.call(1700,\
    \ 1800)\n</cell>\n<cell>\nrounded_avg.call(1800, 1900)\n</cell>\n<cell>\nrounded_avg.call(1900,\
    \ 2000)\n</cell>\n<cell>\nrounded_avg.call(2000, 2100)\n</cell>\n<cell>\nrounded_avg.call(2100,\
    \ 2200)\n</cell>\n<cell>\nrounded_avg.call(2200, 2300)\n</cell>", "  sum = 0\n\
    \  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).inject(:+)\
    \ / m).round\n  binary = []\n  while n != 0\n    binary.unshift(n % 2)\n    n\
    \ /= 2\n  end\n  binary.unshift(avg)\n  binary.join\nend", "  avg = ((n + m) /\
    \ 2).round\n  binary = []\n  while n <= m\n    binary.push(\"#{n}b\")\n    n +=\
    \ 1\n  end\n  binary.push(\"#{m}b\")\n  binary.join(\",\")\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n != 0\n    binary.unshift(n % 2)\n    n\
    \ /= 2\n  end\n  binary.unshift(avg)\n  binary.join\nend", "  avg = n/m\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n..m).reduce(:+) /\
    \ m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push((n & m).to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse\n  binary.join\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n\
    \ += 1\n  end\n  binary.reverse.each do |i|\n    binary = i + (binary if binary.length\
    \ < i)\n  end\n  binary.join\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,binary,math\
    \ |>\n<code>", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = ((n..m).sum.to_f\
    \ / m.to_f).to_s(2)\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  return binary\nend", "  avg = ((n + m) / 2).round\n\
    \  binary = bin(avg)\n  binary.reverse!\n  binary\nend", "  sum = 0\n  while n\
    \ <= m\n    sum += n\n    n += 1\n  sum.to_s(2).reverse.rjust(8, \"0\")\nend",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\n\
    end", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(m, \"0\")\n\
    end", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(32,\
    \ '0')\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\n\
    end", "  sum = 0\n  for i in 0...m\n    sum += n\n    n -= 1\n  return sum.to_s(2).reverse.rjust(8,\
    \ '0')\nend", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n  end\n  sum.to_s(2).to_i(2).to_s(2)\n\
    end", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n", "  sum\
    \ = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2).reverse.rjust(8,\
    \ \"0\")\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while n\
    \ <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.reverse.inject(:+).to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = Math.bin(avg)\n\
    \  avg = avg.reverse\n  return avg\nend", "  avg = ((n..m).inject(:+) / m).round\n\
    \  avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).",
  "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg\
    \ = ((n..m).inject(:+) / m).round\n  \n  if avg > m\n    -1\n  else\n    avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(",
  "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse.each do |b|\n    binary.reverse!\n    binary.push(b)\n\
    \  end\n  binary.reverse!\n  binary.join\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float::MANTISSA)\n  avg = Math.bin(avg)\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = av", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n != 0\n    binary.unshift(n % 2)\n    n\
    \ /= 2\n  end\n  binary.unshift(avg)\n  binary.join\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| a |>\n<code>", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n\
    \  sum.to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg.to_s(2)\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  av", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n\
    \    binary.unshift(n.to_s(2))\n    n += 1\n  end\n  binary.unshift(avg.to_s(2))\n\
    \  binary.join\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while\
    \ n <= m\n    binary.push((n..m).sum.to_s(2))\n    n += 1\n  end\n  binary.reverse.each_with_index\
    \ do |digit, i|\n    digit = digit.to_i(2).to_s(2)\n    digit = digit.insert(i,\
    \ \"0\")\n    digit = digit.insert(0, \"0\")\n    binary.insert(i, digit)\n  end\n\
    \  binary.join\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = ((n ..\
    \ m).sum.to_f / m).to_s(2).reverse\n  binary.gsub!(/0/, '1')\n  binary.gsub!(/1/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/,\
    \ '0')\n  binary.gsub!(/1/, '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/,\
    \ '1')\n  binary.gsub!(/0/, '0')\n  binary.gsub!(/1/, '1')\n  binary.g", "  avg\
    \ = ((n..m).reduce(:+) / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).reduce(:+)\
    \ / m)\n    n += 1\n  end\n  binary.reduce(:+).to_s(2).rjust(8, \"0\")\nend",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\n\
    end", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while n <= m\n\
    \    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse!\n  binary.join(\"\
    \")\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ \"0\")\nend\n</cell>\n<code language=julia-1.5>\n@assert rounded_avg(1, 5) ==\
    \ \"0b11\"\n@assert rounded_avg(7, 5) == -1\n@assert rounded_avg(10, 20) == \"\
    0b1111\"\n@assert rounded_avg(20, 33) == \"0b11010\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of characters in a string. \nThe\
    \ function should take a string as input and return the number of characters in\
    \ the string.\nThe function should return -1 if the string length is 0.", "  n\
    \ = n.to_i\n  m = m.to_i\n  return n.upto(m).inject(:+).to_s(2).to_i(2) if n <=\
    \ m\n  -1\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", '  avg = ((n..m).reduce(:+) / m).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).',
  "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).reduce(:+)\
    \ / m)\n    n += 1\n  end\n  binary.reduce(:+).to_s(2).rjust(8, \"0\")\nend",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\n\
    end", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n  while n <= m\n\
    \    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n  binary.reverse!\n\
    \  binary.join\nend", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n  end\n  binary.reverse\n\
    \  binary.join\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,binary,math |>\n\
    Here's a solution that doesn't use any loops:\n<code>", "  avg = n/m\n  avg =\
    \ ((avg * 10).to_i).to_s(2)\n  avg = avg.gsub(\"0\",\"1\")\n  avg = avg.gsub(\"\
    1\",\"0\")\n  avg = avg.gsub(\"b\",\"0\")\n  avg = avg.gsub(\"B\",\"0\")\n  avg\
    \ = avg.gsub(\"o\",\"0\")\n  avg = avg.gsub(\"O\",\"0\")\n  avg = avg.gsub(\"\
    x\",\"0\")\n  avg = avg.gsub(\"X\",\"0\")\n  avg = avg.gsub(\"1\",\"1\")\n  avg\
    \ = avg.gsub(\"0\",\"0\")\n  return avg\nend", "  avg = ((n..m).sum / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.push(m.to_s(2))\n  binary.reverse\n  binary.join\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = n/m\n  avg\
    \ = ((avg*10).ceil).to_s(2)\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\\
    1)/, '\\1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\\
    1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n \
    \ avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg =\
    \ avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\\
    1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\1)/, '\\\
    1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n \
    \ avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg =\
    \ avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/,\
    \ '0\\1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\\
    1')\n  avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n \
    \ avg = avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg =\
    \ avg.gsub(/(0\\1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0\\1')\n  avg = avg.gsub(/(0\\\
    1)/, '\\1')\n  avg = avg.gsub(/(.{1})/, '0", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n + m) / 2).round\n  binary =\
    \ bin(avg)\n  binary = binary.lstrip(\"0b\")\n  if binary.length < m\n    binary\
    \ = \"0\" * (m - binary.length) + binary\n  binary\nend", "  avg = ((n..m).inject(:+)\
    \ / m).round\n  avg.zero? ? -1 : sprintf(\"0b%b\", avg)\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).reduce(:+)\
    \ / m)\n    n += 1\n  end\n  binary.reduce(:+) == 0 ? -1 : binary.reduce(:+).to_s(2)\n\
    end\n</cell>\n<cell>", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(m,\
    \ \"0\")\nend", "  avg = ((n..m).reduce(:+) / m).round\n  \n  case avg\n  when\
    \ 0...n\n    \"0\"\n  when n...m\n    \"1\"\n  when 0...m\n    \"-1\"\n  else\n\
    \    \"0b#{avg}\"\n  end\nend\n</cell>\n<cell>\nrounded_avg.call(1, 5)\n</cell>\n\
    <cell>\nrounded_avg.call(7, 5)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n\
    <cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n\
    </cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 20)\n</cell>\n<", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\n\
    end\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 5)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 10)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 20)\n</cell>\n\
    <code language=julia-0.5>\nrounded_avg(7, 33)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 100)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 200)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 300)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 400)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 500)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 600)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 700)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 800)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 900)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 1000)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 2000)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 3000)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 4000)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 5000)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 6000)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 7000)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 8000)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 9000)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 10000)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 20000)\n\
    </cell>\n<code language=julia-0.5>\nrounded_avg(7, 30000)\n</cell>\n<code language=julia-0.5>\n\
    rounded_avg(7, 40000)\n</cell>\n<code language=julia-0.5>\nrounded_avg(7, 50000)\n\
    </cell>\n<code language=", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse.each\
    \ do |b|\n    binary.unshift(b.to_s(2))\n  end\n  binary.join\nend", "  avg =\
    \ ((n..m).sum / n).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.push(m.to_s(2))\n  binary.reverse\n  binary.join\n\
    end\n</cell>\n<cell>", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\n\
    end", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANTISSA)\n\
    \  avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = avg.to_s(2)\n  avg = avg.gsub(/0./,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/1/, '')\n  avg = avg.gsub(/1/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.gsub(/0/,\
    \ '')\n  avg = avg.gsub(/0/, '')\n  avg = avg.", "  avg = ((n..m).reduce(:+) /\
    \ m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  avg = ((n..m).inject(:+)\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n\
    \ += 1\n  end\n  binary.reverse.inject(:+).to_s(2)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post.\n<|/\
    \ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n<| c |>\nI added\
    \ an explanation to the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  avg =\
    \ ((n..m).sum / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.push(m.to_s(2))\n  binary.reverse!\n  binary.join(\"\
    0b\")\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend\n</cell>\n<code language=julia-1.0>\n@assert rounded_avg(1, 5) ==\
    \ \"0b11\"\n@assert rounded_avg(7, 5) == -1\n@assert rounded_avg(10, 20) == \"\
    0b1111\"\n@assert rounded_avg(20, 33) == \"0b11010\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the factorial of a given integer. \nThe factorial\
    \ of a non-negative integer n, denoted by n!, is the product of all positive integers\
    \ less than or equal to n. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite\
    \ a recursive function that computes the factorial of a given integer.", "  avg\
    \ = n/m\n  avg = ((avg*10).to_i).to_s(2)\n  avg = avg.gsub(/0/, '').gsub(/1/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '", "  avg = ((n..m).sum / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n\
    \  end\n  binary.push((n & m).to_s(2))\n  binary.reverse\n  binary.join\nend",
  "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse.inject(:+).to_s(2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "  sum = 0\n  while n <= m\n    sum += n\n  \
    \  n += 1\n  sum.to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = Math.bin(avg)\n\
    \  avg = avg.reverse\n  return avg\nend", "  avg = ((n..m).inject(:+) / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n\
    \  end\n  binary.reverse.inject(:+).to_s(2)\nend", "  avg = ((n..m).sum.to_f /\
    \ m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse.each_with_index do |digit, index|\n    digit\
    \ = digit.chars.first\n    digit = digit.succ\n    digit = digit.to_i(2).to_s(2)\n\
    \    digit = digit.rjust(digit.length, \"0\")\n    binary[index] = digit\n  end\n\
    \  binary.join\nend\n</code>\n<|/ a tags=ruby,binary,math |>\n<| a dscore=0 |>\n\
    <code>", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANT_DIG)\n\
    \  avg = Math.bin(avg)\n  return avg\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n\
    \  avg.to_i(2).to_s(2)\nend", "  avg = ((n..m).inject(:+) / m).round\n  binary\
    \ = []\n  while n != 0\n    binary.unshift(n % 2)\n    n /= 2\n  end\n  binary.unshift(avg)\n\
    \  binary.join\nend", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n\
    \  while n <= m\n    binary.push((n.to_s(2).reverse.to_i(2)).to_s(2).reverse)\n\
    \    n += 1\n  end\n  binary.reverse\nend", "  avg = ((n..m).sum.to_f / m.to_f).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.push(m.to_s(2))\n  binary.reverse\n  binary.join\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2)\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n\
    \  avg.to_i(2).to_s(2).rjust(m, '0')\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    I like your solution, but I believe it can be simplified even further. `((n..m).reduce(:+)\
    \ / m).to_s(2)` can be replaced with `n.to_s(2).rjust(m, '0')`.\n<|/ c |>\n<|\
    \ c |>\nYes, that is a good improvement. Thanks.\n<|/ c |>\n<| a tags=ruby,binary,math\
    \ |>\n<code>", "  sum = 0\n  for i in n.upto(m) do\n    sum = sum + i\n  end\n\
    \  return sum.to_s(2).to_i(2) if sum > m\n  -1\nend", "  avg = n/m\n  avg = ((avg*10).to_i).to_s(2)\n\
    \  avg = avg[0..(avg.length-1)]\n  avg << 1\n  return avg\nend", "  sum = 0\n\
    \  for i in n.upto(m) do\n    sum += i\n  end\n  return sum.to_s(2).reverse.rjust(8,\
    \ '0')\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(m,\
    \ '0')\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = ((n..m).sum.to_f\
    \ / m).to_s(2)\n  binary.gsub!(/0b/, '').to_i\n  binary.gsub!(/0/, '').to_i\n\
    \  return binary if avg == n || avg == m\n  -1\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n", "  avg = ((n..m).reduce(:+) / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n..m).reduce(:+) / m)\n    n\
    \ += 1\n  end\n  binary.find { |i| i == avg } || -1\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nI like your solution, but I believe it can be made more efficient\
    \ by not creating a new array each time you call `to_s`. Also, `to_s` will convert\
    \ `nil` to `\"nil\"`, which is not what we want. Instead, we can use `to_i` on\
    \ the result of `reduce`.\n<|/ c |>\n<| c |>\nThanks for the suggestions. I edited\
    \ my answer to include your suggestions.\n<|/ c |>\n<| a tags=ruby |>\n<code>",
  "  avg = ((n..m).reduce(:+) / m).to_s(2).to_i(2).to_s(2)\n  return -1 if avg > m\
    \ || n < m \n  avg.to_s(2).to_i(2).to_s(2)\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2)\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder why you use `to_i(2).to_s(2)`\
    \ instead of just `to_s(2)`?\n<|/ c |>\n<| c |>\nBecause `to_i` converts the number\
    \ to a binary string, and `to_s` converts it back to a decimal string. `to_s(2)`\
    \ would just convert the number to a decimal string.\n<|/ c |>\n<| c |>\nAh, I\
    \ see. Thanks for the explanation!\n<|/ c |>\n<| a tags=ruby |>\n<code>", "  sum\
    \ = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg =\
    \ ((n + m) / 2).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.push(m.to_s(2))\n  binary.push(avg.to_s(2))\n  binary.join(\"\
    0b\")\nend", "  avg = ((n..m).inject(:+) / m).round\n  \n  if avg < 0\n    -1\n\
    \  else\n    bin(avg)\n  end\nend\n</cell>\n<cell>\nrounded_avg.call(1, 5)\n</cell>\n\
    <cell>\nrounded_avg.call(7, 5)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n\
    <cell>\nrounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(10, 5)\n</cell>\n\
    <cell>\nrounded_avg.call(10, 10)\n</cell>\n<cell>\nrounded_avg.call(10, 15)\n\
    </cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 25)\n</cell>\n<cell>\nrounded_avg.call(10, 30)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 35)\n</cell>\n<cell>\nrounded_avg.call(10, 40)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 45)\n</cell>\n<cell>\nrounded_avg.call(10, 50)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 55)\n</cell>\n<cell>\nrounded_avg.call(10, 60)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 65)\n</cell>\n<cell>\nrounded_avg.call(10, 70)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 75)\n</cell>\n<cell>\nrounded_avg.call(10, 80)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 85)\n</cell>\n<cell>\nrounded_avg.call(10, 90)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 95)\n</cell>\n<cell>\nrounded_avg.call(10, 100)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 105)\n</cell>\n<cell>\nrounded_avg.call(10, 110)\n</cell>\n<cell>\nrounded_avg.call(10,\
    \ 115)\n</cell>\n<cell>\nrounded_avg.call(10, 120)\n</cell>\n<cell>\nrounded_avg.",
  "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n    binary.unshift(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.unshift(avg.to_s(2))\n  binary.join\nend", "  avg\
    \ = ((n..m).reduce(:+) / m).round\n  binary = avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\n\
    end", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend",
  "  avg = ((n..m).inject(:+) / m).round\n  avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\nend", "  sum =\
    \ 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.reverse\n  binary.join\nend", "  sum = 0\n  while n <= m\n    sum +=\
    \ n\n    n += 1\n  end\n  sum.to_s(2).to_i(2).to_s(2)\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to round the average\
    \ to nearest integer, not just round the average to nearest integer.\n<|/ c |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to round the average to nearest\
    \ integer, not just round the average to nearest integer.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. OP wants to round the average to nearest\
    \ integer, not just round the average to nearest integer.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. OP wants to round the average to nearest\
    \ integer, not just round the average to nearest integer.\n<|/ c |>\n<| c |>\n\
    This doesn't answer the question. OP wants to round the average to nearest integer,\
    \ not just round the average to nearest integer.\n<|/ c |>\n<| a |>\n<code>",
  "  avg = n/m\n  avg = ((avg*10).to_i).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg\
    \ = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n  avg = avg.to_i(2).to_s(2)\n\
    \  avg = avg.to_i(2).to_s(2)", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary\
    \ = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n    n += 1\n  end\n\
    \  binary.push((n..m).sum.to_s(2))\n  binary.reverse\n  binary.join\nend", " \
    \ avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\n\
    end", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n  while n <= m\n\
    \    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse.inject(:+).to_s(2)\n\
    end", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n  while n <= m\n\
    \    binary.push((n & m).to_s(2))\n    n += 1\n  end\n  binary.reverse.join #\
    \ reverse the binary string and join it together\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but this doesn't really answer the question.\
    \ While this does give the correct answer, it doesn't explain why it works.\n\
    <|/ c |>\n<| c |>\nI added some comments to explain how it works.\n<|/ c |>\n\
    <| c |>\nI appreciate your efforts, but this doesn't really answer the question.\
    \ While this does give the correct answer, it doesn't explain why it works.\n\
    <|/ c |>\n<| c |>\nI added some comments to explain how it works.\n<|/ c |>\n\
    <| a |>\n<code>", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while\
    \ n <= m\n    binary.unshift(n.to_s(2))\n    n += 1\n  end\n  binary.unshift(avg.to_s(2))\n\
    \  binary.join\nend", "  avg = ((n..m).sum / m).round\n  binary = []\n  while\
    \ n <= m\n    binary.push(\"#{n}b\")\n    n += 1\n  end\n  binary.push(\"#{m}b\"\
    )\n  binary.join(\",\")\nend", "  avg = ((n..m).reduce(:+) / m).round\n  binary\
    \ = sprintf(\"%b\", avg)\n  \n  case binary\n  when \"0\" * n\n    -1\n  when\
    \ \"0\" * m\n    -1\n  else\n    binary\n  end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    I like your solution, but I wonder how it compares to my solution. My solution\
    \ uses `sprintf` which I believe is more efficient than `to_s`. My solution uses\
    \ `to_s` which I believe is more efficient than `to_i`. My solution uses `to_i`\
    \ which I believe is more efficient than `to_s`. My solution uses `to_s` which\
    \ I believe is more efficient than `to_i`. My solution uses `to_s` which I believe\
    \ is more efficient than `to_i`. My solution uses `to_s` which I believe is more\
    \ efficient than `to_i`. My solution uses `to_s` which I believe is more efficient\
    \ than `to_i`. My solution uses `to_s` which I believe is more efficient than\
    \ `to_i`. My solution uses `to_s` which I believe is more efficient than `to_i`.\
    \ My solution uses `to_s` which I believe is more efficient than `to_i`. My solution\
    \ uses `to_s` which I believe is more efficient than `to_i`. My solution uses\
    \ `to_s` which I believe is more efficient than `to_i`. My solution uses `to_s`\
    \ which I believe is more efficient than `to_i`. My solution uses `to_s` which\
    \ I believe is more efficient than `to_i`. My solution uses `to_s` which I believe\
    \ is more efficient than `to_i`. My solution uses `to_s` which I believe is more\
    \ efficient than `to_i`. My solution uses `to_s` which I believe is more efficient\
    \ than `to_i`. My solution uses `to_s` which I believe is more efficient than\
    \ `to_i`. My solution uses `to_s` which I believe is more efficient than `to_i`.\
    \ My solution uses `to_s` which I believe is more efficient than `to_i`. My solution\
    \ uses `to_s` which I believe is more efficient than `to_i`. My solution uses\
    \ `to_s` which I believe is more efficient than `to_i`. My solution uses `to_s`\
    \ which I believe is more efficient than `to_i`. My solution uses `to_s` which\
    \ I believe is more efficient than `to_i`. My solution uses `to_s` which I believe\
    \ is more efficient than `", "  avg = ((n + m) / 2).round\n  binary = []\n  while\
    \ n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.push(avg.to_s(2))\n  binary.join('')\nend\n</cell>\n<cell>", "  avg\
    \ = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2).to_i(2).to_s(2)\n  avg.zero? ? -1 : avg\nend", "  avg = n/m\n \
    \ avg = Math.ceil(avg)\n  avg = Math.pow(2,avg)\n  avg = Math.bin(avg)\n  avg\
    \ = avg.reverse\n  avg = avg.gsub(/0/,'')\n  return avg\nend", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse.each do |b|\n    binary.unshift(b.to_s(2))\n\
    \  end\n  binary.join\nend", "  sum = 0\n  for i in (n..m)\n    sum += i\n  end\n\
    \  sum.to_s(2).reverse.gsub(/../) { |s| s == '1' ? '0' : '1' }\nend", "  avg =\
    \ ((n..m).sum.to_f / m).round\n  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n\
    \    n += 1\n  end\n  binary.reverse.each do |b|\n    binary.unshift(b.to_i(2))\n\
    \  end\n  binary.join\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  return \"0b\" + avg.to_s(2)\nend", "  avg = ((n..m).sum.to_f / m).round\n \
    \ binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n    n += 1\n\
    \  end\n  binary.reverse.each do |b|\n    next if b.length < 2\n    binary.push(b[0,\
    \ b.length - 1])\n  end\n  binary.join\nend\n</code>\n<|/ a tags=ruby |>\n<| a\
    \ tags=ruby |>\n<code>", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push((n & m).to_s(2))\n    n += 1\n  end\n  binary.reverse.inject(:+).to_s(2)\n\
    end", "  n = n.to_i\n  m = m.to_i\n  if n > m\n    -1\n  else\n    n.upto(m).inject(:+).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2)\n\
    \  end\nend", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while n\
    \ <= m\n    binary.push((n..m).reduce(:+) / m)\n    n += 1\n  end\n  binary.reduce(:+).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_",
  "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = Math.ceil(avg)\n  avg = Math.bin(avg)\n\
    \  avg = avg.reverse\n  avg = Math.bin(avg)\n  avg = avg.reverse\n  return avg\n\
    end", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n  while n <= m\n\
    \    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse.each do |x|\n\
    \    x.to_i(2) if x.to_i(2) >= avg\n  end\n  binary.join\nend\n</code>\n<|/ a\
    \ tags=ruby,binary,math |>\n<| a tags=ruby,binary,math |>\n<code>", "  avg = n/m\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.ceil(Math.log10(avg)))\n\
    \  return \"0b\" + avg.to_s(2)\nend", "  avg = ((n + m) / 2).round\n  binary =\
    \ []\n  while n <= m\n    binary.push(\"#{n}b\")\n    n += 1\n  end\n  binary.push(\"\
    #{m}b\")\n  binary.join(\",\")\nend", "  avg = ((n..m).sum.to_f / m).round\n \
    \ binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.reverse.each do |i|\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n\
    \    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n   \
    \ i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n    i = i.to_s(2)\n    i = i.to_i(2).to_s(2)\n\
    \    i = i.to_s(2)\n    ", "  n = n.to_i\n  m = m.to_i\n  if n >= m\n    -1\n\
    \  else\n    n.upto(m).inject(:+).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2)\n  end\n\
    end", "  avg = n/m\n  avg = ((avg*10).to_i).to_s(2)\n  avg = avg.gsub(/(.{1})/,\
    \ '0\\1')\n  avg = avg.gsub(/(.{2})/, '0\\1')\n  avg = avg.gsub(/(.{3})/, '0\\\
    1')\n  avg = avg.gsub(/(.{4})/, '0\\1')\n  avg = avg.gsub(/(.{5})/, '0\\1')\n\
    \  avg = avg.gsub(/(.{6})/, '0\\1')\n  avg = avg.gsub(/(.{7})/, '0\\1')\n  avg\
    \ = avg.gsub(/(.{8})/, '0\\1')\n  avg = avg.gsub(/(.{9})/, '0\\1')\n  avg = avg.gsub(/(.{10})/,\
    \ '0\\1')\n  avg = avg.gsub(/(.{11})/, '0\\1')\n  avg = avg.gsub(/(.{12})/, '0\\\
    1')\n  avg = avg.gsub(/(.{13})/, '0\\1')\n  avg = avg.gsub(/(.{14})/, '0\\1')\n\
    \  avg = avg.gsub(/(.{15})/, '0\\1')\n  avg = avg.gsub(/(.{16})/, '0\\1')\n  avg\
    \ = avg.gsub(/(.{17})/, '0\\1')\n  avg = avg.gsub(/(.{18})/, '0\\1')\n  avg =\
    \ avg.gsub(/(.{19})/, '0\\1')\n  avg = avg.gsub(/(.{20})/, '0\\1')\n  avg = avg.gsub(/(.{21})/,\
    \ '0\\1')\n  avg = avg.gsub(/(.{22})/, '0\\1')\n  avg = avg.gsub(/(.{23})/, '0\\\
    1')\n  avg = avg.gsub(/(.{24})/, '0\\1')\n  avg = avg.gsub(/(.{25})/, '0\\1')\n\
    \  avg = avg.gsub(/(.{26})/, '0\\1')\n  avg = avg.gsub(/(.{27})/, '0\\1')\n  avg\
    \ = avg.gsub(/(.", "  avg = ((n..m).sum / m).round\n  binary = []\n  while n <=\
    \ m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.reverse\n  binary.join\nend", "  sum = 0\n  for i in 0...m\n    sum\
    \ += n\n    n -= 1\n  sum.to_s(2).to_i(2).to_s(2)\nend\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n", " \
    \ avg = ((n..m).sum / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n\
    \    n += 1\n  binary.push(m.to_s(2))\n  binary.reverse!\n  binary.join\nend",
  "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n    binary.push\
    \ n.to_s(2)\n    n += 1\n  end\n  binary.push m.to_s(2)\n  binary.push avg.to_s(2)\n\
    \  binary.join\nend\n</cell>\n<cell>\nrounded_avg.call(1, 5)\n</cell>\n<cell>\n\
    rounded_avg.call(7, 5)\n</cell>\n<cell>\nrounded_avg.call(10, 20)\n</cell>\n<cell>\n\
    rounded_avg.call(20, 33)\n</cell>\n<cell>\nrounded_avg.call(30, 33)\n</cell>\n\
    <cell>\nrounded_avg.call(40, 33)\n</cell>\n<cell>\nrounded_avg.call(50, 33)\n\
    </cell>\n<cell>\nrounded_avg.call(60, 33)\n</cell>\n<cell>\nrounded_avg.call(70,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(80, 33)\n</cell>\n<cell>\nrounded_avg.call(90,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(100, 33)\n</cell>\n<cell>\nrounded_avg.call(110,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(120, 33)\n</cell>\n<cell>\nrounded_avg.call(130,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(140, 33)\n</cell>\n<cell>\nrounded_avg.call(150,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(160, 33)\n</cell>\n<cell>\nrounded_avg.call(170,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(180, 33)\n</cell>\n<cell>\nrounded_avg.call(190,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(200, 33)\n</cell>\n<cell>\nrounded_avg.call(210,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(220, 33)\n</cell>\n<cell>\nrounded_avg.call(230,\
    \ 33)\n</cell>\n<cell>\nrounded_avg.call(", "  avg = ((n..m).sum.to_f / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n\
    \  binary.reverse.inject(:+).to_s(2)\nend", "  avg = ((n + m) / 2).round\n  binary\
    \ = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.push(avg.to_s(2))\n  binary.reverse!\n  binary.join\nend", "  avg =\
    \ n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANT_DIG)\n  avg\
    \ = Math.bin(avg)\n  avg = avg.reverse\n  avg = avg.to_i(2).to_s(2)\n  return\
    \ avg\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = Math.pow(2,avg)\n \
    \ avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = avg.to_s\n  avg = avg.reverse\n\
    \  avg = avg.to_s\n  return avg\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n\
    \  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  sum = 0\n  while n <= m\n    sum\
    \ += n\n    n += 1\n  sum.to_s(2)\nend", "  avg = ((n + m) / 2).round\n  binary\
    \ = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.push(m.to_s(2))\n\
    \  binary.reverse!\n  binary.join(\"\")\nend", "  avg = ((n..m).inject(:+) / m).round\n\
    \  binary = ((avg.to_s(2).reverse.chars.first(1).join.to_i(2)).to_s(2)\n  binary.to_i(2)\
    \ if binary != -1 && n <= m \nend\n</code>\n<|/ a |>\n<| c |>\nThis does not provide\
    \ an answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/10770778)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ round the average to nearest integer, and I provided a solution that does that.\
    \ He also asked how to convert that integer to a binary string, and I provided\
    \ a solution that does that. He also asked how to round the average to nearest\
    \ integer, and I provided a solution that does that. He also asked how to convert\
    \ that integer to a binary string, and I provided a solution that does that. He\
    \ also asked how to round the average to nearest integer, and I provided a solution\
    \ that does that. He also asked how to convert that integer to a binary string,\
    \ and I provided a solution that does that. He also asked how to round the average\
    \ to nearest integer, and I provided a solution that does that. He also asked\
    \ how to convert that integer to a binary string, and I provided a solution that\
    \ does that.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/10770778)\n<|/ c |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/10770778)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/10770778)\n<|/ c |>\n<| a tags=ruby,binary,math,rounding\
    \ |>\n<code>", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while\
    \ n <= m\n    binary.unshift(n.to_s(2))\n    n += 1\n  end\n  binary.unshift(avg.to_s(2))\n\
    \  binary.join\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while\
    \ n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse!\n \
    \ binary.push(\"0b\" + binary.join)\n  binary.pop\nend\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(20, 33)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n\
    </cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n\
    <cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\n\
    rounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nrounded_avg(7,\
    \ 5)\n</cell>\n<cell>\nrounded_avg(7, 5)\n</cell>\n<cell>\nroun", "  avg = n/m\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANTISSA)\n  return avg.to_s(2)\n\
    end", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANTISSA)\n\
    \  return \"0b\" + avg.to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n \
    \ avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg =\
    \ avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg *\
    \ Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10,\
    \ Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg =\
    \ Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg =\
    \ avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg *\
    \ Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10,\
    \ Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg\
    \ = Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg =\
    \ Math.ceil(avg)\n  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(10, Math.log10(avg).to_i)\n  av", "  avg = ((n..m).sum\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n\
    \ += 1\n  end\n  binary.reverse!\n  binary.join\nend", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  \n  if avg > m\n    -1\n  else\n    bin(avg)\n  end\nend", " \
    \ avg = n/m\n  avg = avg * 10 + 9\n  avg = avg / 10\n  avg = sprintf(\"%b\", avg)\n\
    \  return avg\nend", "  avg = ((n..m).sum / m).round\n  binary = []\n  while n\
    \ <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse!\n  binary.push(\"\
    0b\" + binary.join)\n  binary.pop\n  binary.reverse!\n  binary.join(\"0b\")\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| a dscore=0 |>\n<code>", "  avg = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend", "  sum = 0\n  while\
    \ n <= m\n    sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg = n/m\n  avg =\
    \ ((avg*10).to_i).to_s(2)\n  avg = avg.gsub(/0/, '').gsub(/1/, '0').gsub(/0/,\
    \ '').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/, '0').gsub(/1/, '1')\n  avg = avg.gsub(/0/,\
    \ '0').gsub(/1/, '1')\n  avg = av", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg *\
    \ Math.pow(2,Float.log(avg,2))\n  return \"0b\" + avg.to_s(2)\nend", "  sum =\
    \ 0\n  while n <= m\n    sum += n\n    n += 1\n  sum.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).",
  "  avg = n/m\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float::MANT_DIG)\n\
    \  avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = avg.reverse\n  avg = avg.reverse\n\
    \  return avg\nend", "  n = n.to_i\n  m = m.to_i\n  if n > m\n    -1\n  else\n\
    \    n.upto(m).inject(:+).to_s(2).to_i(2).to_s(2)\n  end\nend", "  avg = n/m\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg\
    \ * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg,2))\n", "  avg = n/m\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg)\n\
    \  avg = avg * Math.pow(2,Float.log(avg)/Math.log(2))\n  avg = Math.ceil(avg",
  "  avg = ((n..m).sum / m).round\n  binary = []\n  while n <= m\n    binary.push(\"\
    #{n}b\")\n    n += 1\n  end\n  binary.push(\"#{m}b\")\n  binary.join(\",\")\n\
    end", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while n <= m\n  \
    \  binary.push((n..m).sum.to_s(2))\n    n += 1\n  end\n  binary.reverse.each do\
    \ |b|\n    next if b.length < 2\n    binary.unshift(b.slice!(0, 1))\n  end\n \
    \ binary.join\nend", "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n \
    \ while n <= m\n    binary.push(\"#{n}b\")\n    n += 1\n  end\n  binary.reverse.join\
    \ if binary.length == 1\n  binary.join\nend", "  sum = 0\n  while n <= m\n   \
    \ sum += n\n    n += 1\n  sum.to_s(2)\nend", "  avg = ((n..m).reduce(:+) / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n..m).reduce(:+) / m)\n    n\
    \ += 1\n  end\n  binary.reverse.each do |i|\n    binary.unshift(i.to_s(2))\n \
    \ end\n  binary.join\nend", "  sum = 0\n  while n <= m\n    sum += n\n    n +=\
    \ 1\n  sum.to_s(2)\nend", "  sum = 0\n  while n <= m\n    sum += n\n    n += 1\n\
    \  sum.to_s(2)\nend", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n\
    \  while n <= m\n    binary.push(n.to_s(2))\n    n += 1\n  end\n  binary.reverse!\n\
    \  binary.join\nend\n</code>\n<|/ a tags=ruby |>\n<| a tags=ruby |>\n<code>",
  "  avg = ((n..m).inject(:+) / m).round\n  avg.to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).to_s(2).to_i(2).",
  "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\nend", "  avg =\
    \ n/m\n  avg = Math.ceil(avg)\n  avg = Math.pow(2,avg)\n  return avg\nend", " \
    \ avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n    binary.push((n\
    \ & m).to_s(2))\n    n += 1\n  end\n  binary.reverse.join if binary.length >=\
    \ 1\nend", "  avg = ((n..m).reduce(:+) / m).round\n  binary = ((n..m).reduce(:+)\
    \ / m).to_s(2)\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.reverse!\n  binary.insert(0, \"0b\")\n  binary.insert(binary.length-1,\
    \ \"0\")\n  binary.", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8,\
    \ '0')\nend", "  avg = ((n..m).sum.to_f / m).round\n  binary = []\n  while n <=\
    \ m\n    binary.push((n..m).sum.to_s(2))\n    n += 1\n  end\n  binary.reverse.each_with_index\
    \ do |digit, index|\n    digit = digit.to_i(2).to_s(2)\n    digit = digit.insert(index,\
    \ \"0\")\n    binary.insert(index, digit)\n  end\n  binary.join\nend\n</code>\n\
    <|/ a tags=ruby,binary,algorithm |>\n<| a dscore=0 |>\n<code>", "  avg = ((n..m).sum.to_f\
    \ / m).round\n  binary = []\n  while n <= m\n    binary.push(n.to_s(2))\n    n\
    \ += 2\n  end\n  binary.reverse!\n  binary.push(\"0b\" + binary.join)\n  binary.pop\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| a dscore=0 |>\n<code>", "  avg = ((n..m).reduce(:+)\
    \ / m).round\n  binary = sprintf(\"%b\", avg)\n  binary.to_i(2).to_s(2)\nend",
  "  avg = ((n..m).inject(:+) / m).round\n  binary = []\n  while n <= m\n    binary.unshift(n.to_s(2))\n\
    \    n += 1\n  end\n  binary.unshift(avg.to_s(2))\n  binary.join\nend", "  avg\
    \ = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2).rjust(8, '0')\nend",
  "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary = []\n  while n <= m\n    binary.push(\"\
    #{n}b\")\n    n += 1\n  end\n  binary.push(\"#{m}b\")\n  binary.join(\",\")\n\
    end", "  avg = ((n..m).reduce(:+) / m).round\n  binary = []\n  while n <= m\n\
    \    binary.push((n..m).reduce(:+) / m)\n    n += 1\n  end\n  binary.each do |i|\n\
    \    i = i.to_s(2)\n    i = i.gsub(/0/, 'x')\n    i = i.gsub(/1/, '1')\n    i\
    \ = i.gsub(/x/, '0')\n    i = i.gsub(/1/, '1')\n    i = i.gsub(/0/, 'x')\n   \
    \ binary.push(i)\n  end\n  binary.reduce(:+).to_s(2)\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby |>\n<code>", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(2,avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg =\
    \ Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n\
    \  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg\
    \ = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg =\
    \ Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n\
    \  avg = Math.ceil(avg)\n  avg = Math.pow(avg,2)\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(avg,2)\n  avg = Math.", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = Math.pow(2,avg)\n  avg = Math.bin(avg)\n  avg = avg.reverse\n  avg = avg.to_s(2)\n\
    \  avg = avg.gsub(/0b/, '')\n  return avg\nend", "  avg = ((n..m).sum / m).round\n\
    \  binary = []\n  while n <= m\n    binary.push((n..m).sum.to_s(2))\n    n +=\
    \ 1\n  end\n  binary.reverse.each do |x|\n    x.to_s(2).rjust(8, '0')\n  end\n\
    \  binary.join\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.gsub!(/0+$/,\
    \ '')\n  avg.to_i(2).to_s(2)\nend", "  avg = n/m\n  avg = Math.ceil(avg)\n  avg\
    \ = avg * Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg *\
    \ Math.pow(2,Float.log(avg,2))\n  avg = Math.ceil(avg)\n  avg = avg * Math.pow(2,Float.log(avg,2))\n\
    \  return \"0b\" + avg.to_s(2)\nend", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n\
    \  avg.to_i(2).to_s(2)\nend", "  avg = ((n..m).sum.to_f / m.to_f).round\n  binary\
    \ = []\n  while n <= m\n    binary.push((n.to_s(2).reverse.chars.map{|x| x.to_i(2).to_s(2)}.join.to_i(2)))\n\
    \    n += 1\n  end\n  binary.reverse.find {|x| x != \"\"}\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a |>\n<code>", "  avg = ((n..m).reduce(:+) / m).to_s(2)\n  avg.to_i(2).to_s(2)\n\
    end", "  avg = n/m\n  avg = avg * 2\n  avg = avg + 1 if avg > m else avg\n  avg\
    \ = avg / 2\n  avg = bin(avg)\n  avg = avg.lstrip(\"0b\")\n  avg = avg.rstrip(\"\
    0\")\n  return avg\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
