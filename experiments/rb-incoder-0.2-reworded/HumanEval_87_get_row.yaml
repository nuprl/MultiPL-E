name: HumanEval_87_get_row
language: rb
prompt: "# You are given a 2 dimensional data, as a nested arrays,\n# which is similar\
  \ to matrix, however, unlike matrices,\n# each row may contain a different number\
  \ of columns.\n# Given lst, and integer x, find integers x in the array,\n# and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a\
  \ coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by\
  \ rows in ascending order.\n# Also, sort coordinates of the row by columns in descending\
  \ order.\n# Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([],\
  \ 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst,\
  \ x)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_row\n\
  \    candidate = method(:get_row)\n    assert_equal([[0, 0], [1, 4], [1, 0], [2,\
  \ 5], [2, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5,\
  \ 1]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2))\n    assert_equal([[0,\
  \ 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6,\
  \ 5], [6, 0]], candidate.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3,\
  \ 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3,\
  \ 4, 5, 1]], 1))\n    assert_equal([], candidate.call([], 1))\n    assert_equal([],\
  \ candidate.call([[1]], 2))\n    assert_equal([[2, 2]], candidate.call([[], [1],\
  \ [1, 2, 3]], 3))\n  end\nend\n"
completions: ["  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i\
    \ == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n\
    \        row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j-1)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j-1)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j-1)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 &&\
    \ j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n     \
    \   row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j-1)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j-1)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j-1)\n      end\n", "  lst.each do\
    \ |row|\n    row.each do |item|\n      if item == x\n        return [[row, item]]\n\
    \      end\n    end\n  end\n  return []\nend", "  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\n       \
    \ coords = []\n      else\n        coords = [[i, j]]\n      end\n      coords\
    \ << [col, row.size - 1] if col == x\n      coords << [row.size - 1, col] if row\
    \ == x\n      coords.sort!\n      coords.sort!.reverse!\n      coords.each do\
    \ |coord|\n        coord.sort!\n      end\n      coords.each do |coord|\n    \
    \    coord.sort!.reverse!\n      end\n      coords.each do |coord|\n        coord.sort!\n\
    \      end\n      coords.each do |coord|\n        coord.sort!.reverse!\n     \
    \ end\n      coords.each do |coord|\n        coord.sort!\n      end\n      coords.each\
    \ do |coord|\n        coord.sort!.reverse!\n      end\n      coords.each do |coord|\n\
    \        coord.sort!\n      end\n      coords.each do |coord|\n        coord.sort!.reverse!\n\
    \      end\n      coords.each do |coord|\n        coord.sort!\n      end\n   \
    \   coords.each do |coord|\n        coord.sort!.reverse!\n      end\n      coords.each\
    \ do |coord|\n        coord.sort!\n      end\n      coords.each do |coord|\n \
    \       coord.sort!.reverse!\n      end\n      coords.each do |coord|\n      \
    \  coord.sort!\n      end\n      coords.each do |coord|\n        coord.sort!.reverse!\n\
    \      end\n      coords.each do |coord|\n        coord.sort!\n      end\n   \
    \   coords.each do |coord|\n        coord.sort!.reverse!\n      end\n      coords.each\
    \ do |coord|\n        coord.sort!\n      end\n      coords.each do |coord|\n \
    \       coord.sort!.reverse!\n      end\n      coords.each do |coord|\n      \
    \  coord.sort!\n      end\n      coords.each do |coord|\n        coord.sort!.reverse!\n\
    \      end\n      coords.each do |coord|\n        coord.sort!\n      end\n   \
    \   coords.each do |coord|\n        coord.sort!.reverse!\n      end\n      coords.each\
    \ do |coord|\n        coord.sort!\n      end\n      coords.each do |coord|\n \
    \       coord.sort!.reverse!\n      end\n      coords.each do |coord|\n      \
    \  coord.sort!\n      end\n      coords.", "  lst.each do |row|\n    row.each\
    \ do |elem|\n      return elem if elem == x\n    end\n  end\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n\
    \      elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j\
    \ != 0\n        row.unshift(j)\n        row.unshift(i)\n      end\n    end\n \
    \ end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n\
    \      if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j !=\
    \ 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(j)\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)\n      elsif i != 0 && j != 0\n        row.unshift(j)\n \
    \       row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif i != 0 && j == 0\n        row.unshift(i)\n      elsif i != 0 && j != 0\n\
    \        row.unshift(j)\n        row.unshift(i)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif i != 0 && j == 0\n        row.unshift(i)\n\
    \      elsif i != 0 && j != 0\n        row.unshift(j)\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif i != 0 && j == 0\n   \
    \     row.unshift(i)", "  rows = []\n  for i in 0...lst.size\n    if lst[i] >=\
    \ x\n      rows.push(lst[i])\n    end\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  for i in 0...rows.size\n    rows[i].sort!\n    rows[i].reverse!\n  end\n  return\
    \ rows\nend", "  rows = []\n  rows.map! do |row|\n    row.map! do |column|\n \
    \     column == x ? [row, column] : [row, column]\n    end\n  end\n  rows.sort!\
    \ { |a, b| a[0] <=> b[0] }\n  rows.sort! { |a, b| a[1] <=> b[1] }\n  rows\nend",
  "  rows = []\n  row = []\n  for i in lst\n    row.push(i)\n    if row.size == x\n\
    \      rows.push(row)\n      row = []\n  end\n  rows.sort!\n  rows.reverse!\n\
    \  rows.each do |row|\n    row.sort!\n  end\n  rows\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 || j == 0\
    \ || i == row.length || j == row[0].length\n        row.insert(j, x)\n      end\n\
    \    end\n  end\n  lst.sort!\n  lst.each_with_index do |row, i|\n    row.sort!.reverse!\n\
    \  end\n  lst\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == j\n        next if i == 0\n        next if j == row.length\
    \ - 1\n        next if j == row.length\n        next if j == 0\n        next if\
    \ i == row.length - 1\n        next if i == row.length\n        next if i == 0\n\
    \        next if j == row.length - 1\n        next if j == row.length\n      \
    \  next if j == 0\n        next if i == row.length - 1\n        next if i == row.length\n\
    \        next if i == 0\n        next if j == row.length - 1\n        next if\
    \ j == row.length\n        next if j == 0\n        next if i == row.length - 1\n\
    \        next if i == row.length\n        next if i == 0\n        next if j ==\
    \ row.length - 1\n        next if j == row.length\n        next if j == 0\n  \
    \      next if i == row.length - 1\n        next if i == row.length\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \        next if j == 0\n        next if i == row.length - 1\n        next if\
    \ i == row.length\n        next if i == 0\n        next if j == row.length - 1\n\
    \        next if j == row.length\n        next if j == 0\n        next if i ==\
    \ row.length - 1\n        next if i == row.length\n        next if i == 0\n  \
    \      next if j == row.length - 1\n        next if j == row.length\n        next\
    \ if j == 0\n        next if i == row.length - 1\n        next if i == row.length\n\
    \        next if i == 0\n        next if j == row.length - 1\n        next if\
    \ j == row.length\n        next if j == 0\n        next if i == row.length - 1\n\
    \        next if i == row.length\n        next if i == 0\n        next if j ==\
    \ row.length - 1\n        next if j == row.length\n        next if j == 0\n  \
    \      next if i == row.length - 1\n        next if i == row.length\n        next\
    \ if i == 0\n        next if j == row.length - 1\n        next if j == row.length\n\
    \        next if j == 0\n        next if i == row.length - 1\n        next if\
    \ i == row.length\n        next if i == 0\n        next if j == row.length - 1\n\
    \        next if j == row.length\n        next if j == 0\n        next if i ==\
    \ row.length - 1\n        next if i == row.length\n        ", "  rows = []\n \
    \ row = []\n  for i in lst\n    row.push(i)\n    if row.size == x\n      rows.push(row)\n\
    \      row = []\n  end\n  rows.sort!\n  rows.reverse!\n  rows.each do |row|\n\
    \    row.sort!\n  end\n  return rows\nend", "  lst.each_with_index do |row, i|\n\
    \    row.each_with_index do |col, j|\n      if col == x\n        [i, j]\n    \
    \  end\n    end\n  end\nend", "  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      elsif i == 0 && j != 0\n        row.unshift(j)\n     \
    \ elsif j == 0 && i != 0\n        row.unshift(i)\n      end\n    end\n  end\n\
    \  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n    \
    \  if i == 0 && j == 0\n        row.unshift(0)\n      elsif i == 0 && j != 0\n\
    \        row.unshift(j)\n      elsif j == 0 && i != 0\n        row.unshift(i)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      elsif\
    \ i == 0 && j != 0\n        row.unshift(j)\n      elsif j == 0 && i != 0\n   \
    \     row.unshift(i)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_", "  row = []\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n\
    \  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n \
    \ row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push(x)\n  row.push",
  "  lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n      if\
    \ i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j !=\
    \ 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n        row.unshift(i)\n\
    \      end\n      if i != 0 && j != 0\n        row.unshift(j)\n      end\n   \
    \ end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index do |col,\
    \ j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i\
    \ == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n\
    \        row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  lst.each_with_index do |row,\
    \ i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n       \
    \ row.unshift(0)\n      end\n      if i == 0 && j != 0\n        row.unshift(j)\n\
    \      end\n      if i != 0 && j == 0\n        row.unshift(i)\n      end\n   \
    \   if i != 0 && j != 0\n        row.unshift(j)\n      end\n    end\n  end\n \
    \ lst.each_with_index do |row, i|\n    row.each_with_index do |col, j|\n     \
    \ if i == 0 && j == 0\n        row.unshift(0)\n      end\n      if i == 0 && j\
    \ != 0\n        row.unshift(j)\n      end\n      if i != 0 && j == 0\n       \
    \ row.unshift(i)\n      end\n      if i != 0 && j != 0\n        row.unshift(j)\n\
    \      end\n    end\n  end\n  lst.each_with_index do |row, i|\n    row.each_with_index\
    \ do |col, j|\n      if i == 0 && j == 0\n        row.unshift(0)\n      end\n\
    \      if i == 0 && j != 0\n        row.unshift(j)\n      end\n      if i != 0\
    \ && j == 0\n        row.unshift(i)\n      end\n      if i != 0 && j != 0\n  \
    \      row.unshift(j)\n      end\n    end\n  end\n  l", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if i == 0 && j == 0\n\
    \        row.unshift(0)\n        col.unshift(0)\n      end\n      if col == x\n\
    \        row.unshift(j)\n        col.unshift(i)\n      end\n    end\n  end\n \
    \ lst.sort!\n  lst.sort!\n  lst.each_with_index do |row, i|\n    row.sort!\n \
    \ end\n  lst.each_with_index do |row, i|\n    row.unshift(i)\n  end\n  lst.each_with_index\
    \ do |row, i|\n    row.unshift(0)\n  end\n  lst.each_with_index do |row, i|\n\
    \    row.unshift(0)\n  end\n  lst\nend", "  row = []\n  for i in lst\n    row.push([i,\
    \ i.index(x)])\n  row.sort!\n  row.sort!.reverse!\n  return row\nend", "  lst.each\
    \ do |row|\n    row.each do |elem|\n      if elem == x\n        return [[row.index,\
    \ row.index + 1]]\n      end\n    end\n  end\n  return []\nend", "  lst.each_with_index\
    \ do |row, i|\n    row.each_with_index do |col, j|\n      if col == x\n      \
    \  [i, j]\n      end\n    end\n  end\nend", "  row = []\n  for i in 0...lst.size\n\
    \    if lst[i] >= x\n      row << [i, lst[i]]\n    end\n  end\n  row.sort!\n \
    \ row.sort! {|a, b| b[1] <=> a[1]}\n  return row\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
