name: HumanEval_112_reverse_delete
language: rb
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return an array containing the result string and true/false\
  \ for the check.\n# Example\n# >>> reverse_delete.call(\"abcde\", \"ae\")\n# [\"\
  bcd\", false]\n# >>> reverse_delete.call(\"abcdef\", \"b\")\n# [\"acdef\", false]\n\
  # >>> reverse_delete.call(\"abcdedcba\", \"ab\")\n# [\"cdedc\", true]\ndef reverse_delete(s,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_reverse_delete\n\
  \    candidate = method(:reverse_delete)\n    assert_equal([\"bcd\", false], candidate.call(\"\
  abcde\", \"ae\"))\n    assert_equal([\"acdef\", false], candidate.call(\"abcdef\"\
  , \"b\"))\n    assert_equal([\"cdedc\", true], candidate.call(\"abcdedcba\", \"\
  ab\"))\n    assert_equal([\"dik\", false], candidate.call(\"dwik\", \"w\"))\n  \
  \  assert_equal([\"\", true], candidate.call(\"a\", \"a\"))\n    assert_equal([\"\
  abcdedcba\", true], candidate.call(\"abcdedcba\", \"\"))\n    assert_equal([\"abcdedcba\"\
  , true], candidate.call(\"abcdedcba\", \"v\"))\n    assert_equal([\"abba\", true],\
  \ candidate.call(\"vabba\", \"v\"))\n    assert_equal([\"\", true], candidate.call(\"\
  mamma\", \"mia\"))\n  end\nend\n"
completions: ["  result = []\n  s.chars.reverse_each do |char|\n    result << char\
    \ if char == c\n  end\n  result.reverse!\n  result[0] == result[-1] ? true : false\n\
    end", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] == c\n      result[i]\
    \ = s[i]\n      i += 1\n      while i < s.length\n        if s[i] == c\n     \
    \     result[i] = s[i]\n          i += 1\n        else\n          break\n    \
    \  end\n    else\n      i += 1\n    end\n  end\n  result.reverse!\n  return [result,\
    \ true] if result.length == s.length\n  return [result, false]\nend", "  result\
    \ = []\n  i = 0\n  while i < s.length\n    if s[i] == c\n      result[i] = s[i]\n\
    \      i += 1\n    else\n      i += 1\n  end\n  result.reverse!\n  result\nend",
  "  result = []\n  s.chars.reverse_each do |char|\n    result << char if char ==\
    \ c\n  end\n  result == s.chars\nend", "  s.chars.each do |char|\n    next if\
    \ char == c\n    next if char == s[0...char.length]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    next if char == s[char.length...-1]\n\
    \    next if char == s[0...char.length-1]\n    ", "  s.chars.reverse_each.with_index\
    \ do |char, i|\n    if char == c\n      s.slice!(0, i)\n      break\n    end\n\
    \  end\n  s.chars.empty? ? [s, true] : [s, false]\nend", "  result = []\n  i =\
    \ 0\n  while i < s.length\n    if s[i] == c\n      result[i] = s[i]\n      i +=\
    \ 1\n    else\n      i += 1\n  end\n  result.reverse!\n  return [result, i ==\
    \ s.length]\nend", "  result = []\n  s.each_char do |char|\n    if char == c\n\
    \      result.pop\n    else\n      result << char\n    end\n  end\n  result.reverse!\n\
    \  result\nend", "  result = []\n  s.each_char do |char|\n    result.push(char)\
    \ if char == c\n  end\n  result.reverse!\n  result[0] == result[-1] ? true : false\n\
    end", "  result = []\n  s.chars.reverse_each do |char|\n    if char == c\n   \
    \   result << char\n    else\n      break\n    end\n  end\n  result == s.chars\n\
    end", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] == c\n      result.push\
    \ s[i]\n      i += 1\n      while i < s.length\n        if s[i] != s[i]\n    \
    \      result.push s[i]\n          i += 1\n        end\n      end\n    else\n\
    \      i += 1\n    end\n  end\n  return [result, true]\nend", "  result = []\n\
    \  s.chars.each do |char|\n    result << char if char == c\n  end\n  result.reverse!\n\
    \  result[0] == result[-1] ? true : false\nend", "  result = []\n  s.each_char\
    \ do |char|\n    if char == c\n      result.pop\n    else\n      result << char\n\
    \    end\n  end\n  return [result, true] if result.size == 0\n  return [result,\
    \ false] if result.size == 1\n  return [result.reverse, false]\nend", "  result\
    \ = []\n  i = 0\n  while i < s.length\n    if s[i] == c\n      result[i] = s[i]\n\
    \      i += 1\n      while i < s.length\n        if s[i] != s[i]\n          result[i]\
    \ = s[i]\n          i += 1\n          break\n        end\n      end\n    end\n\
    \  end\n  return [result.join, i == s.length]\nend", "  s.chars.reverse_each.with_index\
    \ do |char, index|\n    if char == c\n      s.slice!(0, index)\n      break\n\
    \    end\n  end\n  s.chars.reverse.chars == s\nend", "  result = []\n  i = 0\n\
    \  while i < s.length\n    if s[i] == c\n      result[i] = s[i]\n      i += 1\n\
    \      while i < s.length\n        if s[i] == c\n          result[i] = s[i]\n\
    \          i += 1\n        end\n      end\n    end\n  end\n  return [result, true]\n\
    end", "  result = []\n  s.chars.reverse_each do |char|\n    result << char if\
    \ char == c\n  end\n  result == s.chars\nend", "  result = []\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == c\n      result.push s[i]\n      i += 1\n     \
    \ while i < s.length\n        if s[i] != s[i]\n          result.push s[i]\n  \
    \        i += 1\n          break\n        end\n      end\n    end\n  end\n  return\
    \ [result, true] if result.size == s.length\n  return [result, false]\nend", " \
    \ result = []\n  i = 0\n  while i < s.length\n    if s[i] == c\n      result[i]\
    \ = s[i]\n      i += 1\n    else\n      i += 1\n  end\n  result.reverse!\n  if\
    \ result.join.to_s == result.join.to_s\n    result.push(false)\n  end\n  return\
    \ result\nend", "  result = []\n  i = 0\n  while i < s.length\n    if s[i] ==\
    \ c\n      result[i] = s[i]\n      i += 1\n    else\n      i += 1\n  end\n  result.reverse!\n\
    \  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
