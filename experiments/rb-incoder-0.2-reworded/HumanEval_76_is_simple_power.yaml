name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2,\
  \ 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3,\
  \ 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5,\
  \ 3)\n# false\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: ["  return false if n == 0 # base case\n  power = 1\n  while x > power\n\
    \    power = power * n\n  end\n  x == power\nend", "  x == n**int(x)\nend", " \
    \ if n==0 then return true\n  if n==1 then return x==1\n  if x==1 then return\
    \ true\n  if x==0 then return false\n  if x==-1 then return false\n  if x>0 and\
    \ n>0 then return is_simple_power(x, n-1)\n  if x<0 and n>0 then return is_simple_power(x,\
    \ n-1)\n  if x>0 and n<0 then return false\n  if x<0 and n<0 then return false\n\
    end", "  if n**int(x)==x\n    return true\n  end\n  return false\nend", "  x ==\
    \ n**int(x)\nend", "  if n==0\n    return true\n  else\n    return false\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  if n==0 then return true\n \
    \ if n==1 then return x==1\n  if n==2 then return x==1 and x==0\n  if n==3 then\
    \ return x==1 and x==0 and x==0\n  if n==4 then return x==1 and x==0 and x==0\
    \ and x==0\n  if n==5 then return x==1 and x==0 and x==0 and x==0 and x==0\n \
    \ if n==6 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0\n  if\
    \ n==7 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n\
    \  if n==8 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==0\n  if n==9 then return x==1 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0 and x==0 and x==0\n  if n==10 then return x==1 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==11 then\
    \ return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0\n  if n==12 then return x==1 and x==0 and x==0 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==13 then return x==1 and\
    \ x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==0\n  if n==14 then return x==1 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==15 then return x==1\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0\n  if n==16 then return x==1 and x==0 and x==0 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==17 then return\
    \ x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
