name: HumanEval_76_is_simple_power
language: rb
prompt: "# Your task is to write a function that returns true if a number x is a simple\n\
  # power of n and false in other cases.\n# x is a simple power of n if n**int=x\n\
  # For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2,\
  \ 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3,\
  \ 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5,\
  \ 3)\n# false\ndef is_simple_power(x, n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_simple_power\n\
  \    candidate = method(:is_simple_power)\n    assert_equal(true, candidate.call(16,\
  \ 2))\n    assert_equal(false, candidate.call(143214, 16))\n    assert_equal(true,\
  \ candidate.call(4, 2))\n    assert_equal(true, candidate.call(9, 3))\n    assert_equal(true,\
  \ candidate.call(16, 4))\n    assert_equal(false, candidate.call(24, 2))\n    assert_equal(false,\
  \ candidate.call(128, 4))\n    assert_equal(false, candidate.call(12, 6))\n    assert_equal(true,\
  \ candidate.call(1, 1))\n    assert_equal(true, candidate.call(1, 12))\n  end\n\
  end\n"
completions: ["  return false if n == 0 # base case\n  power = 1\n  while x > power\n\
    \    power = power * n\n  end\n  x == power\nend", "  x == n**int(x)\nend", " \
    \ if n==0 then return true\n  if n==1 then return x==1\n  if x==1 then return\
    \ true\n  if x==0 then return false\n  if x==-1 then return false\n  if x>0 and\
    \ n>0 then return is_simple_power(x, n-1)\n  if x<0 and n>0 then return is_simple_power(x,\
    \ n-1)\n  if x>0 and n<0 then return false\n  if x<0 and n<0 then return false\n\
    end", "  if n**int(x)==x\n    return true\n  end\n  return false\nend", "  x ==\
    \ n**int(x)\nend", "  if n==0\n    return true\n  else\n    return false\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  if n==0 then return true\n \
    \ if n==1 then return x==1\n  if n==2 then return x==1 and x==0\n  if n==3 then\
    \ return x==1 and x==0 and x==0\n  if n==4 then return x==1 and x==0 and x==0\
    \ and x==0\n  if n==5 then return x==1 and x==0 and x==0 and x==0 and x==0\n \
    \ if n==6 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0\n  if\
    \ n==7 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n\
    \  if n==8 then return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==0\n  if n==9 then return x==1 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0 and x==0 and x==0\n  if n==10 then return x==1 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==11 then\
    \ return x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0\n  if n==12 then return x==1 and x==0 and x==0 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==13 then return x==1 and\
    \ x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==0\n  if n==14 then return x==1 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==15 then return x==1\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and\
    \ x==0 and x==0\n  if n==16 then return x==1 and x==0 and x==0 and x==0 and x==0\
    \ and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\n  if n==17 then return\
    \ x==1 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0 and x==0\
    \ and x==", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if\
    \ n**int(x)==x\n  then return true\n  else return false\n  end\nend", "  return\
    \ true if n**int=x\n  false\nend", "  x == n**int(x)\nend", "  if n==0\n    return\
    \ true\n  else\n    return false\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  power = x**n\n  is_simple_power = true\n  \n\
    \  # Your code here\n  \n  return is_simple_power\nend", "  return n**int(x)==x\n\
    end", "  x == n**int(x)\nend", "  return false if n == 0 # x is a simple power\
    \ of n if n**int=x\n  x = x.to_i\n  n = n.to_i\n  return false if n == 0 # x is\
    \ a simple power of n if n**int=x\n  return false if n == 1 #x is a simple power\
    \ of n if n**int=x\n  return false if n == -1 #x is a simple power of n if n**int=x\n\
    \  return false if n == 0 # x is a simple power of n if n**int=x\n  return false\
    \ if n == 1 # x is a simple power of n if n**int=x\n  return false if n == -1\
    \ # x is a simple power of n if n**int=x\n  return false if n == 0 # x is a simple\
    \ power of n if n**int=x\n  return false if n == 1 # x is a simple power of n\
    \ if n**int=x\n  return false if n == -1 # x is a simple power of n if n**int=x\n\
    \  return false if n == 0 # x is a simple power of n if n**int=x\n  return false\
    \ if n == 1 # x is a simple power of n if n**int=x\n  return false if n == -1\
    \ # x is a simple power of n if n**int=x\n  return false if n == 0 # x is a simple\
    \ power of n if n**int=x\n  return false if n == 1 # x is a simple power of n\
    \ if n**int=x\n  return false if n == -1 # x is a simple power of n if n**int=x\n\
    \  return false if n == 0 # x is a simple power of n if n**int=x\n  return false\
    \ if n == 1 # x is a simple power of n if n**int=x\n  return false if n == -1\
    \ # x is a simple power of n if n**int=x\n  return false if n == 0 # x is a simple\
    \ power of n if n**int=x\n  return false if n == 1 # x is a simple power of n\
    \ if n**int=x\n  return false if n == -1 # x is a simple power of n if n**int=x\n\
    \  return false if n == 0 # x is a simple power of n if n**int=x\n  return false\
    \ if n == 1 # x is a simple power of n if n**int=x\n  return false if n == -1\
    \ # x is a simple power of n if n**int=x\n  return false if n == 0 # x is a simple\
    \ power of n if n**int=x\n  return false if n == 1 # x is a simple power of n\
    \ if n", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n**int(x) = x\n\
    \  else\n    return false\n  end\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x ==\
    \ n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  return n**int(x)==x\nend", "  return false if n == 0 # x is a simple power of\
    \ n if n**int=x\n  \n  x = x.to_i\n  n = n.to_i\n  \n  return true if n == 0 #\
    \ x is a simple power of n if n**int=x\n  \n  x = x.to_f\n  n = n.to_f\n  \n \
    \ return true if n == 0 # x is a simple power of n if n**int=x\n  \n  x = x.to_d\n\
    \  n = n.to_d\n  \n  return true if n == 0 # x is a simple power of n if n**int=x\n\
    \  \n  x = x.to_i\n  n = n.to_i\n  \n  return true if n == 0 # x is a simple power\
    \ of n if n**int=x\n  \n  x = x.to_f\n  n = n.to_f\n  \n  return true if n ==\
    \ 0 # x is a simple power of n if n**int=x\n  \n  x = x.to_d\n  n = n.to_d\n \
    \ \n  return true if n == 0 # x is a simple power of n if n**int=x\n  \n  x =\
    \ x.to_i\n  n = n.to_i\n  \n  return true if n == 0 # x is a simple power of n\
    \ if n**int=x\n  \n  x = x.to_f\n  n = n.to_f\n  \n  return true if n == 0 # x\
    \ is a simple power of n if n**int=x\n  \n  x = x.to_d\n  n = n.to_d\n  \n  return\
    \ true if n == 0 # x is a simple power of n if n**int=x\n  \n  x = x.to_i\n  n\
    \ = n.to_i\n  \n  return true if n == 0 # x is a simple power of n if n**int=x\n\
    \  \n  x = x.to_f\n  n = n.to_f\n  \n  return true if n == 0 # x is a simple power\
    \ of n if n**int=x\n  \n  x = x.to_d\n  n = n.to_d\n  \n  return true if n ==\
    \ 0 # x is a simple power of n if n**int=x\n  \n  x = x.to_i\n  n = n.to_i\n \
    \ \n  return true if n == 0 # x is a simple power of n if n**int=x\n  \n  x =\
    \ x.to_f\n  n = n.to_f\n  \n  return true if n == 0 # x is a simple power of n\
    \ if n**int=x\n  \n  x = x.to_d\n  n = n.to_d\n  \n  return ", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x = x.to_i\n  n = n.to_i\n  return n == x if\
    \ n != 0 && (x % n == 0) else false\nend", "  if n**int(x)==x\n    return true\n\
    \  else\n    return false\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  if n == 0\n    return true\n  else\n    return false\n  end\nend", " \
    \ if n**int(x)==x\n    true\n  else\n    false\n  end\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  if n==0 then return true\n  if n>0 then return x==n**int\n  if n<0 then return\
    \ x!=n**int\nend", "  x == n**int(x)\nend", "  x = x.to_i\n  n = n.to_i\n  return\
    \ n == x if n != 0 && (n % x == 0) else false\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  if n**int(x) = x\n  else\n    false\n  end\nend", " \
    \ power = 1\n  while n > power\n    power = power * n\n  end\n  x == power\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n**int(x)==x\n    return\
    \ true\n  else\n    return false\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  return x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x = x.to_i\n  n = n.to_i\n  return n == x if n.zero? else (x % n == 0)\nend",
  "  x = x.to_i\n  n = n.to_i\n  return x == n**x\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x = x.to_i\n  n = n.to_i\n  return n == x if n != 0\
    \ && (x % n == 0) else false\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  if n**int(x) = x\n  else\n    return false\n  end\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  if n**int(x) = x\n  else\n    return false\n\
    \  end\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  if n==0 then return true\n  if n==1 then return\
    \ x==1\n  if n>1 then return is_simple_power(x^n, n-1)\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  if n == 0 then return true\n  if n == 1 then return x == 1\n  if x mod n = 0\
    \ then return false\n  else return is_simple_power(x, n-1)\nend", "  if n**int(x)\
    \ = x\n  else\n    return false\n  end\nend", "  x == n**int(x)\nend", "  x ==\
    \ n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  if n**int(x)==x\n    return true\n  else\n    return false\nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ = x.to_i\n  n = n.to_i\n  return x == n**x\nend", "  x == n**int(x)\nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x =\
    \ x.to_i\n  n = n.to_i\n  return n == x if n != 0 && (x % n == 0) else false\n\
    end", "  if n**int(x)==x\n  else\n    false\n  end\nend", "  x = x.to_i\n  n =\
    \ n.to_i\n  return n == x if n.zero? else n == x * n\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  if n**int(x)==x\n    return true\n  else\n    return\
    \ false\n  end\nend", "  if n**int(x) = x\n  else\n    return false\n  end\nend",
  "  if n**int(x)==x\n    return true\n  else\n    return false\n  end\nend", "  x\
    \ == n**int(x)\nend", "  return false if n == 0 # x is 0\n  x = x.to_i\n  return\
    \ true if n == x # x is simple power of n\n  \n  # Your code here\n  \nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x ==\
    \ n**int(x)\nend", "  return false if n <= 0\n  x = x.to_i\n  n = n.to_i\n  return\
    \ true if n == 1\n  return true if n == x || n % x == 0\n  for i in 1..n\n   \
    \ return true if x ** i == x\n  end\n  return false\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n**int(x)==x\n \
    \   true\n  else\n    false\n  end\nend", "  x == n**int(x)\nend", "  power =\
    \ x**n\n  return power==x\nend", "  x == n**int(x)\nend", "  x == n**int(x)\n\
    end", "  if n==0\n    return true\n  else\n    return false\nend", "  x = x.to_i\n\
    \  n = n.to_i\n  return n == x if n != 0 && (x % n == 0) else false\nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  if n**int(x)==x\n  else\n    false\n  end\nend\n</cell>\n\
    <cell>", "  x == n**int(x)\nend", "  x = x.to_i\n  n = n.to_i\n  return n == x\
    \ if n != 0 && (x % n == 0) else false\nend", "  x == n**int(x)\nend", "  x ==\
    \ n**int(x)\nend", "  x == n**int(x)\nend", "  power = 1\n  while n > power\n\
    \    power = power * n\n  end\n  x == power\nend", "  x = x.to_i\n  n = n.to_i\n\
    \  return n == x if n != 0 && (n % x == 0) else false\nend", "  x == n**int(x)\n\
    end", "  if n**int(x)==x\n    true\n  else\n    false\n  end\nend", "  x == n**int(x)\n\
    end", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend",
  "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if n**int(x) = x\n  else\n\
    \    false\n  end\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  return\
    \ false if n == 0 # x is a simple power of n if n**int=x\n  \n  # Write your code\
    \ here\n  \nend", "  x == n**int(x)\nend", "  if x == 1\n    true\n  else\n  \
    \  false\n  end\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  if\
    \ n**int(x)==x\n    true\n  else\n    false\n  end\nend", "  x == n**int(x)\n\
    end", "  if n**int(x)==x\n    return true\n  else\n    return false\nend", " \
    \ x == n**int(x)\nend", "  x == n**int(x)\nend", "  x == n**int(x)\nend", "  x\
    \ == n**int(x)\nend", "  x == n**int(x)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
