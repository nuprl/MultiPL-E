name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 5\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 6\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 7\n  \
    \    fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 8\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 9\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 10\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 11\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 12\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 13\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 14\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 15\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 16\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 17\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 18\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 19\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 20\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 21\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 22\n      fib4.call(n - 1) +\
    \ fib4.", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<text>\n\
    Problem 7\nThe Fibonacci sequence is defined by the formula:\n$$Fn = \\begin{cases}\n\
    0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\nF{n-2} + F_{n-1} & \\text{otherwise}\n\
    \\end{cases}$$\nwhere $F_n$ is the n-th element of the sequence.\nThe first few\
    \ terms of the sequence are:\n$$F_0 = 0$$\n$$F_1 = 1$$\n$$F_2 = 1$$\n$$F_3 = 2$$\n\
    $$F_4 = 3$$\n$$F_5 = 5$$\n$$F_6 = 8$$\n$$F_7 = 13$$\n$$F_8 = 21$$\n$$F_9 = 29$$\n\
    $$F_10 = 352$$\n$$F_11 = 501$$\n$$F_12 = 6765$$\n$$F_13 = 83656$$\n$$F_14 = 10697303$$\n\
    $$F_15 = 134626971$$\n$$F_16 = 152334552$$\n$$F_17 = 179991265$$\n$$F_18 = 209916583$$\n\
    $$F_19 = 241578575$$\n$$F_20 = 316081184$$\nFind the last ten terms of the sequence.\n\
    Note: The Fibonacci sequence is defined by the formula:\n$$Fn = \\begin{cases}\n\
    0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\nF{n-2} + F_{n-1} & \\text{otherwise}\n\
    \\end{cases}$$\nwhere $F_n$ is the n-th element of the sequence.\nThe first few\
    \ terms of the sequence are:\n$$F_0 = 0$$\n$$F_1 = 1$$\n$$F_2 = 1$$\n$$F_3 = 2$$\n\
    $$F_4 = 3$$\n$$F_5 = 5$$\n$$F_6 = 8$$\n$$F_7 = 13$$\n$$F_8 = 21$$\n$$F_9 = 29$$\n\
    $$F_10 = 352$$\n$$F_11 = 501$$\n$$F_12 = 6765$$\n$$F_13 = 83656$$\n$$F_14 = 10697303$$\n\
    $$F_15 = 134626971$$\n", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] +\
    \ fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.cache[n]\
    \ ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib = Fib4.new\n\
    \  fib.call(Fib4.new, n)\n  fib.value\nend", "  fib4.cache[n] ||= fib4.cache[n-1]\
    \ + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n  fib4.cache[n]\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
