name: HumanEval_46_fib4
language: rb
prompt: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n#\
  \ fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>>\
  \ fib4.call(7)\n# 14\ndef fib4(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib4\n\
  \    candidate = method(:fib4)\n    assert_equal(4, candidate.call(5))\n    assert_equal(28,\
  \ candidate.call(8))\n    assert_equal(104, candidate.call(10))\n    assert_equal(386,\
  \ candidate.call(12))\n  end\nend\n"
completions: ["  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 5\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 6\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 7\n  \
    \    fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 8\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 9\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 10\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 11\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 12\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 13\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 14\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 15\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 16\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 17\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 18\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 19\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 20\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 21\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 22\n      fib4.call(n - 1) +\
    \ fib4.", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<text>\n\
    Problem 7\nThe Fibonacci sequence is defined by the formula:\n$$Fn = \\begin{cases}\n\
    0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\nF{n-2} + F_{n-1} & \\text{otherwise}\n\
    \\end{cases}$$\nwhere $F_n$ is the n-th element of the sequence.\nThe first few\
    \ terms of the sequence are:\n$$F_0 = 0$$\n$$F_1 = 1$$\n$$F_2 = 1$$\n$$F_3 = 2$$\n\
    $$F_4 = 3$$\n$$F_5 = 5$$\n$$F_6 = 8$$\n$$F_7 = 13$$\n$$F_8 = 21$$\n$$F_9 = 29$$\n\
    $$F_10 = 352$$\n$$F_11 = 501$$\n$$F_12 = 6765$$\n$$F_13 = 83656$$\n$$F_14 = 10697303$$\n\
    $$F_15 = 134626971$$\n$$F_16 = 152334552$$\n$$F_17 = 179991265$$\n$$F_18 = 209916583$$\n\
    $$F_19 = 241578575$$\n$$F_20 = 316081184$$\nFind the last ten terms of the sequence.\n\
    Note: The Fibonacci sequence is defined by the formula:\n$$Fn = \\begin{cases}\n\
    0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\nF{n-2} + F_{n-1} & \\text{otherwise}\n\
    \\end{cases}$$\nwhere $F_n$ is the n-th element of the sequence.\nThe first few\
    \ terms of the sequence are:\n$$F_0 = 0$$\n$$F_1 = 1$$\n$$F_2 = 1$$\n$$F_3 = 2$$\n\
    $$F_4 = 3$$\n$$F_5 = 5$$\n$$F_6 = 8$$\n$$F_7 = 13$$\n$$F_8 = 21$$\n$$F_9 = 29$$\n\
    $$F_10 = 352$$\n$$F_11 = 501$$\n$$F_12 = 6765$$\n$$F_13 = 83656$$\n$$F_14 = 10697303$$\n\
    $$F_15 = 134626971$$\n", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] +\
    \ fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.cache[n]\
    \ ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib = Fib4.new\n\
    \  fib.call(Fib4.new, n)\n  fib.value\nend", "  fib4.cache[n] ||= fib4.cache[n-1]\
    \ + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n  fib4.cache[n]\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3]\
    \ + fib4.cache[n-4]\n  fib4.cache[n]\nend", "  case n\n    when 0\n      0\n \
    \   when 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when 4\n  \
    \    0\n    when 5\n      4\n    when 6\n      8\n    when 7\n      14\n    when\
    \ 8\n      16\n    when 9\n      20\n    when 10\n      24\n    when 11\n    \
    \  28\n    when 12\n      32\n    when 13\n      36\n    when 14\n      40\n \
    \   when 15\n      44\n    when 16\n      48\n    when 17\n      52\n    when\
    \ 18\n      56\n    when 19\n      60\n    when 20\n      64\n    when 21\n  \
    \    68\n    when 22\n      72\n    when 23\n      76\n    when 24\n      80\n\
    \    when 25\n      84\n    when 26\n      88\n    when 27\n      92\n    when\
    \ 28\n      96\n    when 29\n      100\n    when 30\n      104\n    when 31\n\
    \      108\n    when 32\n      112\n    when 33\n      116\n    when 34\n    \
    \  120\n    when 35\n      124\n    when 36\n      128\n    when 37\n      132\n\
    \    when 38\n      136\n    when 39\n      140\n    when 40\n      144\n    when\
    \ 41\n      148\n    when 42\n      152\n    when 43\n      156\n    when 44\n\
    \      160\n    when 45\n      164\n    when 46\n      168\n    when 47\n    \
    \  172\n    when 48\n      176\n    when 49\n      180\n    when 50\n      184\n\
    \    when 51\n      188\n    when 52\n      192\n    when 53\n      196\n    when\
    \ 54\n      200\n    when 55\n      204\n    when 56\n      208\n    when 57\n\
    \      212\n    when 58\n      216\n    when 59\n      220\n    when 60\n    \
    \  224\n    when 61\n      228\n    when 62\n      232\n    when 63\n      236\n\
    \    when 64\n      240\n    when 65\n      244\n    when 66\n      248\n    when\
    \ 67\n      252\n    when 68\n      256\n    when 69\n      260\n    when 70\n\
    \      264\n    when 71\n      268\n    when ", "  case n\n  when 0 then 0\n \
    \ when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif\
    \ n == 2\n    2\n  elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  if n < 0\n    puts \"fib4 number\
    \ sequence is defined recursively as follows:\"\n    puts \"fib4(0) -> 0\"\n \
    \   puts \"fib4(1) -> 0\"\n    puts \"fib4(2) -> 2\"\n    puts \"fib4(3) -> 0\"\
    \n    puts \"fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\"\n   \
    \ return 0\n  elsif n == 0\n    puts \"fib4 number sequence is defined recursively\
    \ as follows:\"\n    puts \"fib4(0) -> 0\"\n    puts \"fib4(1) -> 0\"\n    puts\
    \ \"fib4(2) -> 2\"\n    puts \"fib4(3) -> 0\"\n    puts \"fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\"\n    return 0\n  elsif n == 1\n    puts\
    \ \"fib4 number sequence is defined recursively as follows:\"\n    puts \"fib4(0)\
    \ -> 0\"\n    puts \"fib4(1) -> 0\"\n    puts \"fib4(2) -> 2\"\n    puts \"fib4(3)\
    \ -> 0\"\n    puts \"fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\"\
    \n    return 0\n  elsif n == 2\n    puts \"fib4 number sequence is defined recursively\
    \ as follows:\"\n    puts \"fib4(0) -> 0\"\n    puts \"fib4(1) -> 0\"\n    puts\
    \ \"fib4(2) -> 2\"\n    puts \"fib4(3) -> 0\"\n    puts \"fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\"\n    return 2\n  elsif n == 3\n    puts\
    \ \"fib4 number sequence is defined recursively as follows:\"\n    puts \"fib4(0)\
    \ -> 0\"\n    puts \"fib4(1) -> 0\"\n    puts \"fib4(2) -> 2\"\n    puts \"fib4(3)\
    \ -> 0\"\n    puts \"fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\"\
    \n    return 0\n  elsif n == 4\n    puts \"fib4 number sequence is defined recursively\
    \ as follows:\"\n    puts \"fib4(0) -> 0\"\n    puts \"fib4(1) -> 0\"\n    puts\
    \ \"fib4(2) -> 2\"\n    puts \"fib4(3) -> 0\"\n    puts \"fib4(n) -> fib4(n-1)\
    \ + fib4(n-2) + fib4", "  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend",
  "  fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    else\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n  end\nend", "  fib = Array.new(n)\
    \ { |i| 0 }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3] = fib[2]\n  fib[4]\
    \ = fib[3] + fib[2]\n  fib[n] = fib[n-1] + fib[n-2] + fib[n-3] + fib[n-4]\n  fib\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n    when\
    \ 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n\
    \ - 3) + fib4.call(n - 4)\n    when 5\n      fib4.call(n - 1) + fib4.call(n -\
    \ 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 6\n      fib4.call(n - 1)\
    \ + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 7\n     \
    \ fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 8\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 9\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 10\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 11\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 12\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 13\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 14\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 15\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 16\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 17\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 18\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 19\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 20\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 21\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 22\n      fib4.call(n - 1) +\
    \ fib4.", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.cache[n]\
    \ ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  case n\n    when 0\n      0\n    when 1\n      0\n\
    \    when 2\n      2\n    when 3\n      0\n    when 4\n      0\n    when 5\n \
    \     4\n    when 6\n      8\n    when 7\n      14\n    when 8\n      16\n   \
    \ when 9\n      20\n    when 10\n      24\n    when 11\n      28\n    when 12\n\
    \      32\n    when 13\n      36\n    when 14\n      40\n    when 15\n      44\n\
    \    when 16\n      48\n    when 17\n      52\n    when 18\n      56\n    when\
    \ 19\n      60\n    when 20\n      64\n    when 21\n      68\n    when 22\n  \
    \    72\n    when 23\n      76\n    when 24\n      80\n    when 25\n      84\n\
    \    when 26\n      88\n    when 27\n      92\n    when 28\n      96\n    when\
    \ 29\n      100\n    when 30\n      104\n    when 31\n      108\n    when 32\n\
    \      112\n    when 33\n      116\n    when 34\n      120\n    when 35\n    \
    \  124\n    when 36\n      128\n    when 37\n      132\n    when 38\n      136\n\
    \    when 39\n      140\n    when 40\n      144\n    when 41\n      148\n    when\
    \ 42\n      152\n    when 43\n      156\n    when 44\n      160\n    when 45\n\
    \      164\n    when 46\n      168\n    when 47\n      172\n    when 48\n    \
    \  176\n    when 49\n      180\n    when 50\n      184\n    when 51\n      188\n\
    \    when 52\n      192\n    when 53\n      196\n    when 54\n      200\n    when\
    \ 55\n      204\n    when 56\n      208\n    when 57\n      212\n    when 58\n\
    \      216\n    when 59\n      220\n    when 60\n      224\n    when 61\n    \
    \  228\n    when 62\n      232\n    when 63\n      236\n    when 64\n      240\n\
    \    when 65\n      244\n    when 66\n      248\n    when 67\n      252\n    when\
    \ 68\n      256\n    when 69\n      260\n    when 70\n      264\n    when 71\n\
    \      268\n    when ", "  fib4(n-1).call(n-2).call(n-3).call(n-4)\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  case n\n  when 0\n\
    \    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n\
    \  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then\
    \ 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3]\
    \ + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4 = (1..n).inject(0) do |sum,\
    \ index|\n    sum + fib4(index - 1) + fib4(index - 2) + fib4(index - 3) + fib4(index\
    \ - 4)\n  end\n  fib4\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when\
    \ 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n\
    \  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "  fib = Fib4.new\n\
    \  fib.call(Fib4.new, n)\n  fib\nend", "  case n\n  when 0\n    0\n  when 1\n\
    \    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2]\
    \ + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  case n\n  when 0\n\
    \    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  case n\n  when 0 then 0\n  when 1\
    \ then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n-1] = fib4.stack[n-2] if n >= 2 \n  fib4.stack[n-1] = fib4.stack[n-3]\
    \ if n >= 3 \n  fib4.stack[n-1] = fib4.stack[n-4] if n >= 4 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-5] if n >= 5 \n  fib4.stack[n-1] = fib4.stack[n-6] if n >= 6\
    \ \n  fib4.stack[n-1] = fib4.stack[n-7] if n >= 7 \n  fib4.stack[n-1] = fib4.stack[n-8]\
    \ if n >= 8 \n  fib4.stack[n-1] = fib4.stack[n-9] if n >= 9 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-10] if n >= 10 \n  fib4.stack[n-1] = fib4.stack[n-11] if n >=\
    \ 11 \n  fib4.stack[n-1] = fib4.stack[n-12] if n >= 12 \n  fib4.stack[n-1] = fib4.stack[n-13]\
    \ if n >= 13 \n  fib4.stack[n-1] = fib4.stack[n-14] if n >= 14 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-15] if n >= 15 \n  fib4.stack[n-1] = fib4.stack[n-16] if n >=\
    \ 16 \n  fib4.stack[n-1] = fib4.stack[n-17] if n >= 17 \n  fib4.stack[n-1] = fib4.stack[n-18]\
    \ if n >= 18 \n  fib4.stack[n-1] = fib4.stack[n-19] if n >= 19 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-20] if n >= 20 \n  fib4.stack[n-1] = fib4.stack[n-21] if n >=\
    \ 21 \n  fib4.stack[n-1] = fib4.stack[n-22] if n >= 22 \n  fib4.stack[n-1] = fib4.stack[n-23]\
    \ if n >= 23 \n  fib4.stack[n-1] = fib4.stack[n-24] if n >= 24 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-25] if n >= 25 \n  fib4.stack[n-1] = fib4.stack[n-26] if n >=\
    \ 26 \n  fib4.stack[n-1] = fib4.stack[n-27] if n >= 27 \n  fib4.stack[n-1] = fib4.stack[n-28]\
    \ if n >= 28 \n  fib4.stack[n-1] = fib4.stack[n-29] if n >= 29 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-30] if n >= 30 \n  fib4.stack[n-1] = fib4.", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<cell>", "  case n\n\
    \    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n\
    \    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend\n\
    </cell>\n<cell>", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3]\
    \ + fib4.memo[n-4]\n  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n\
    \  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.stack[n-1] = fib4.stack[n-2]\
    \ if n >= 2 \n  fib4.stack[n-1] = fib4.stack[n-3] if n >= 3 \n  fib4.stack[n-1]\
    \ = fib4.stack[n-4] if n >= 4 \n  fib4.stack[n-1]\nend", "  if n < 0\n    puts\
    \ \"fib4 number sequence is defined for negative numbers only (fib4(-1) -> 0)\"\
    \n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n < 0\n    puts \"fib4 number sequence is defined for negative numbers\"\
    \n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\n  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when\
    \ 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then\
    \ 2\n    when 3 then 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  if n < 0\n    puts \"fib4 number sequence is defined for n>=0\
    \ only\"\n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n    2\n\
    \  elsif n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.stack[n]\nend", "  case n\n  \
    \  when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n  \
    \  when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend", " \
    \ fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\nend", "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n\
    \  fib[1] = 0\n  fib[2] = 2\n  fib[3] = 3\n  fib[4] = fib[4] + fib[3] + fib[2]\
    \ + fib[1]\n  fib[n] = fib[n-1] + fib[n-2] + fib[n-3] + fib[n-4]\n  fib\nend",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  case n\n\
    \    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n\
    \    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  case n\n  when\
    \ 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n    0\n  when 4\n    4\n\
    \  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<cell>",
  "  case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then\
    \ 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend",
  "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n    when\
    \ 3\n      0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n\
    \ - 3) + fib4.call(n - 4)\n    when 5\n      fib4.call(n - 1) + fib4.call(n -\
    \ 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 6\n      fib4.call(n - 1)\
    \ + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 7\n     \
    \ fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 8\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 9\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 10\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 11\n      fib4.call(n - 1) +\
    \ fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 12\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 13\n\
    \      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n -\
    \ 4)\n    when 14\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3)\
    \ + fib4.call(n - 4)\n    when 15\n      fib4.call(n - 1) + fib4.call(n - 2) +\
    \ fib4.call(n - 3) + fib4.call(n - 4)\n    when 16\n      fib4.call(n - 1) + fib4.call(n\
    \ - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 17\n      fib4.call(n -\
    \ 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n    when 18\n \
    \     fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n\
    \    when 19\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n\
    \ - 4)\n    when 20\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 21\n      fib4.call(n - 1) + fib4.call(n - 2)\
    \ + fib4.call(n - 3) + fib4.call(n - 4)\n    when 22\n      fib4.call(n - 1) +\
    \ fib4.", "  fib = Fib4.new\n  fib.call(n - 1)\n  fib.call(n - 2)\n  fib.call(n\
    \ - 3)\n  fib.call(n - 4)\n  fib.value\nend", "  fib4.stack[n]\n  if fib4.stack[n]\
    \ == nil\n    fib4.stack[n] = fib4.stack[n-1] + fib4.stack[n-2] + fib4.stack[n-3]\
    \ + fib4.stack[n-4]\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  case n\n\
    \  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<text>\nProblem 5\n\
    The Fibonacci sequence is defined by the formula:\n$$ F_n = \\begin{cases}\n0\
    \ & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\nF{n-1} + F{n-2} & \\text{otherwise}\n\
    \\end{cases}$$\nwhere $F_0 = 0, F_1 = 1$.\nBy iterating from $n = 0$ to $n$, examine\
    \ the formula above for what values to use for $F_n$.", "  case n\n  when 0 then\
    \ 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend\n</cell>\n<cell>", '  fib4.stack[n-1] =
    fib4.stack[n-2] if fib4.stack[n-2].nil? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero?
    || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? || fib4.stack[n-2].zero? ||
    fib4.stack[n', "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n\
    \  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end\n</cell>\n<text>\nProblem 5\nThe Fibonacci sequence is defined by the formula:\n\
    $$Fn = \\begin{cases}\n0 & \\text{if $n = 0$} \\\n1 & \\text{if $n = 1$} \\\n\
    F{n-2} + F_{n-1} & \\text{otherwise}\n\\end{cases}$$\nwhere $F_n = F{n-1} + F_{n-2}$.\
    \ For example, $F_3 = 3 + 2$.", "  fib4.stack[n-1] = fib4.stack[n-2] + fib4.stack[n-3]\
    \ + fib4.stack[n-4]\n  fib4.stack[n-1]\nend", "  case n\n    when 0\n      0\n\
    \    when 1\n      0\n    when 2\n      2\n    when 3\n      0\n    else\n   \
    \   fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "  fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  case n\n    when 0\n      0\n    when 1\n\
    \      0\n    when 2\n      2\n    when 3\n      0\n    when 4\n      4\n    when\
    \ 5\n      0\n    when 6\n      8\n    when 7\n      14\n    when 8\n      0\n\
    \    when 9\n      0\n    when 10\n      0\n    when 11\n      0\n    when 12\n\
    \      0\n    when 13\n      0\n    when 14\n      0\n    when 15\n      0\n \
    \   when 16\n      0\n    when 17\n      0\n    when 18\n      0\n    when 19\n\
    \      0\n    when 20\n      0\n    when 21\n      0\n    when 22\n      0\n \
    \   when 23\n      0\n    when 24\n      0\n    when 25\n      0\n    when 26\n\
    \      0\n    when 27\n      0\n    when 28\n      0\n    when 29\n      0\n \
    \   when 30\n      0\n    when 31\n      0\n    when 32\n      0\n    when 33\n\
    \      0\n    when 34\n      0\n    when 35\n      0\n    when 36\n      0\n \
    \   when 37\n      0\n    when 38\n      0\n    when 39\n      0\n    when 40\n\
    \      0\n    when 41\n      0\n    when 42\n      0\n    when 43\n      0\n \
    \   when 44\n      0\n    when 45\n      0\n    when 46\n      0\n    when 47\n\
    \      0\n    when 48\n      0\n    when 49\n      0\n    when 50\n      0\n \
    \   when 51\n      0\n    when 52\n      0\n    when 53\n      0\n    when 54\n\
    \      0\n    when 55\n      0\n    when 56\n      0\n    when 57\n      0\n \
    \   when 58\n      0\n    when 59\n      0\n    when 60\n      0\n    when 61\n\
    \      0\n    when 62\n      0\n    when 63\n      0\n    when 64\n      0\n \
    \   when 65\n      0\n    when 66\n      0\n    when 67\n      0\n    when 68\n\
    \      0\n    when 69\n      0\n    when 70\n      0\n    when 71\n      0\n \
    \   when 72\n", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n\
    \  when 3\n    0\n  when 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\n</cell>\n<text>\nExercise 3\nWrite a recursive function\
    \ called fib5 that computes the n-th element of the Fibonacci number sequence.\
    \  Please write it using case statements.  Do not use recursion.", "  fib4.stack[n-1]\
    \ = fib4.stack[n-2] if fib4.stack[n-2] >= fib4.stack[n-3] else fib4.stack[n-3]\
    \ + fib4.stack[n-4]\n  fib4.stack[n-1]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n < 0\n    raise ArgumentError, \"fib4 expects non-negative integer\"\
    \n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib = Fib4.new\n  fib.call(Fib4.new, n)\nend", "  case n\n  when 0 then\
    \ 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0\n    0\n  when 1\n\
    \    0\n  when 2\n    2\n  when 3\n    0\n  when 4\n    4\n  else\n    fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib = Array.new(n) { |i|\
    \ 0 }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3] = 3\n  fib[4] = fib[4]\
    \ + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2] + fib[n-3] + fib[n-4]\n\
    \  fib\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n \
    \ when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n] ||= fib4.stack[n-1] + fib4.stack[n-2] + fib4.stack[n-3]\
    \ + fib4.stack[n-4]\n  fib4.stack[n]\nend", "  fib4.call(n-1) + fib4.call(n-2)\
    \ + fib4.call(n-3) + fib4.call(n-4)\nend", "  fib4.memo[n] ||= fib4.memo[n-1]\
    \ + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", " \
    \ if n < 0\n    raise ArgumentError, \"fib4 expects a non-negative integer\"\n\
    \  else\n    fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n  end\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib =\
    \ Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3] =\
    \ 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4 = (0..(n-4)).inject(0) do |sum, num|\n    sum + num\n  end\n  fib4\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n < 0\n    puts \"fib4 number sequence is defined only for positive\
    \ integers\"\n  elsif n == 0\n    0\n  elsif n == 1\n    0\n  elsif n == 2\n \
    \   2\n  elsif n == 3\n    0\n  elsif n == 4\n    0\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n    when 0\n      0\n    when\
    \ 1\n      0\n    when 2\n      2\n    when 3\n      0\n    when 4\n      fib4.call(n\
    \ - 1) + fib4.call(n - 2) + fib4.call(n - 3) + fib4.call(n - 4)\n  end\nend",
  "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 0\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\n  fib[n]\nend", "  case n\n  when 0 then 0\n  when 1\
    \ then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend\n</cell>\n<text>\nExercise 3\nWrite a recursive function\
    \ fib5 that computes the n-th element of the Fibonacci sequence using recursion.",
  "  fib = Array.new(n) { |i| i }\n  fib[0] = 0\n  fib[1] = 0\n  fib[2] = 2\n  fib[3]\
    \ = 3\n  fib[4] = fib[4] + fib[3] + fib[2] + fib[1]\n  fib[n] = fib[n-1] + fib[n-2]\
    \ + fib[n-3] + fib[n-4]\n  fib[n]\nend", "  case n\n  when 0 then 0\n  when 1\
    \ then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ case n\n    when 0 then 0\n    when 1 then 0\n    when 2 then 2\n    when 3\
    \ then 0\n    when n then fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n    2\n  when 3\n\
    \    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nend", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2\
    \ then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  fib4.call(n-1) + fib4.call(n-2) + fib4.call(n-3) + fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case\
    \ n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n  elsif\
    \ n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\nend", "  case n\n  when 0\n    0\n  when 1\n    0\n  when 2\n \
    \   2\n  when 3\n    0\n  else\n    fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).",
  "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  case n\n\
    \    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n    when 3\n \
    \     0\n    when 4\n      fib4.call(n - 1) + fib4.call(n - 2) + fib4.call(n -\
    \ 3) + fib4.call(n - 4)\n    when 5\n      4\n    when 6\n      8\n    when 7\n\
    \      14\n    when 8\n      16\n    when 9\n      20\n    when 10\n      24\n\
    \    when 11\n      28\n    when 12\n      32\n    when 13\n      36\n    when\
    \ 14\n      40\n    when 15\n      44\n    when 16\n      48\n    when 17\n  \
    \    52\n    when 18\n      56\n    when 19\n      60\n    when 20\n      64\n\
    \    when 21\n      68\n    when 22\n      72\n    when 23\n      76\n    when\
    \ 24\n      80\n    when 25\n      84\n    when 26\n      88\n    when 27\n  \
    \    92\n    when 28\n      96\n    when 29\n      100\n    when 30\n      104\n\
    \    when 31\n      108\n    when 32\n      112\n    when 33\n      116\n    when\
    \ 34\n      120\n    when 35\n      124\n    when 36\n      128\n    when 37\n\
    \      132\n    when 38\n      136\n    when 39\n      140\n    when 40\n    \
    \  144\n    when 41\n      148\n    when 42\n      152\n    when 43\n      156\n\
    \    when 44\n      160\n    when 45\n      164\n    when 46\n      168\n    when\
    \ 47\n      172\n    when 48\n      176\n    when 49\n      180\n    when 50\n\
    \      184\n    when 51\n      188\n    when 52\n      192\n    when 53\n    \
    \  196\n    when 54\n      200\n    when 55\n      204\n    when 56\n      208\n\
    \    when 57\n      212\n    when 58\n      216\n    when 59\n      220\n    when\
    \ 60\n      224\n    when 61\n      228\n    when 62\n      232\n    when 63\n\
    \      236\n    when 64\n      240\n    when 65\n      244\n    when 66\n    \
    \  248\n    when 67\n      252\n    when 68\n      256\n    when 69\n      ",
  "  fib4.stack[n]\n  if fib4.stack[n] == nil\n    fib4.stack[n] = 0\n  else\n   \
    \ fib4.stack[n] = fib4.stack[n-1] + fib4.stack[n-2] + fib4.stack[n-3] + fib4.stack[n-4]\n\
    \  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n    when 0\n      0\n    when 1\n      0\n    when 2\n      2\n\
    \    when 3\n      0\n    when 4\n      4\n    when 5\n      0\n    when 6\n \
    \     8\n    when 7\n      14\n    when 8\n      0\n    when 9\n      0\n    when\
    \ 10\n      0\n    when 11\n      0\n    when 12\n      0\n    when 13\n     \
    \ 0\n    when 14\n      0\n    when 15\n      0\n    when 16\n      0\n    when\
    \ 17\n      0\n    when 18\n      0\n    when 19\n      0\n    when 20\n     \
    \ 0\n    when 21\n      0\n    when 22\n      0\n    when 23\n      0\n    when\
    \ 24\n      0\n    when 25\n      0\n    when 26\n      0\n    when 27\n     \
    \ 0\n    when 28\n      0\n    when 29\n      0\n    when 30\n      0\n    when\
    \ 31\n      0\n    when 32\n      0\n    when 33\n      0\n    when 34\n     \
    \ 0\n    when 35\n      0\n    when 36\n      0\n    when 37\n      0\n    when\
    \ 38\n      0\n    when 39\n      0\n    when 40\n      0\n    when 41\n     \
    \ 0\n    when 42\n      0\n    when 43\n      0\n    when 44\n      0\n    when\
    \ 45\n      0\n    when 46\n      0\n    when 47\n      0\n    when 48\n     \
    \ 0\n    when 49\n      0\n    when 50\n      0\n    when 51\n      0\n    when\
    \ 52\n      0\n    when 53\n      0\n    when 54\n      0\n    when 55\n     \
    \ 0\n    when 56\n      0\n    when 57\n      0\n    when 58\n      0\n    when\
    \ 59\n      0\n    when 60\n      0\n    when 61\n      0\n    when 62\n     \
    \ 0\n    when 63\n      0\n    when 64\n      0\n    when 65\n      0\n    when\
    \ 66\n      0\n    when 67\n      0\n    when 68\n      0\n    when 69\n     \
    \ 0\n    when 70\n      0\n    when 71\n      0\n    when 72\n", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4 =\
    \ (0..(n-4)).inject(0) do |sum, index|\n    sum + fib4(index-1) + fib4(index-2)\
    \ + fib4(index-3) + fib4(index-4)\n  end\n  fib4\nend", "  fib4.memo[n] ||= fib4.memo[n-1]\
    \ + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then\
    \ 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend\n</cell>\n\
    <cell>", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n    2\n \
    \ elsif n == 3\n    0\n  elsif n == 4\n    4\n  else\n    fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\nend", "  fib4.stack[n] ||= fib4.stack[n-1] + fib4.stack[n-2]\
    \ + fib4.stack[n-3] + fib4.stack[n-4]\n  fib4.stack[n]\nend", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4 = (0..(n-4)).inject(0) do |sum, index|\n    sum + fib4(index-1)+fib4(index-2)+fib4(index-3)+fib4(index-4)\n\
    \  end\n  fib4\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then\
    \ 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n \
    \ end\nend", "  fib4 = (0..(n-4)).inject(0) do |sum, index|\n    sum + fib4(index-1)\
    \ + fib4(index-2) + fib4(index-3) + fib4(index-4)\n  end\n  fib4\nend", "  fib4.stack[n-1]\
    \ = fib4.stack[n-2] if n >= 2 \n  fib4.stack[n-1] = fib4.stack[n-3] if n >= 3\
    \ \n  fib4.stack[n-1] = fib4.stack[n-4] if n >= 4 \n  fib4.stack[n-1] + fib4.stack[n-2]\
    \ + fib4.stack[n-3] + fib4.stack[n-4]\nend", "  case n\n    when 0 then 0\n  \
    \  when 1 then 0\n    when 2 then 2\n    when 3 then 0\n    when n then fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 |>\n<code>", "  case n\n  when 0 then 0\n  when 1 then 0\n  when\
    \ 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n \
    \ when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a recursive function fib5 that computes\
    \ the n-th element of the Fibonacci sequence (defined above) using recursion.\
    \  Recall that fib5(0) -> 0, fib5(1) -> 1, fib5(n) -> fib5(n-1) + fib5(n-2).",
  "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n\
    \  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end\nfib4.call(5)\nfib4.call(6)\nfib4.call(7)\nfib4.call(8)\nfib4.call(9)\nfib4.call(10)\n\
    fib4.call(11)\nfib4.call(12)\nfib4.call(13)\nfib4.call(14)\nfib4.call(15)\nfib4.call(16)\n\
    fib4.call(17)\nfib4.call(18)\nfib4.call(19)\nfib4.call(20)\nfib4.call(21)\nfib4.call(22)\n\
    fib4.call(23)\nfib4.call(24)\nfib4.call(25)\nfib4.call(26)\nfib4.call(27)\nfib4.call(28)\n\
    fib4.call(29)\nfib4.call(30)\nfib4.call(31)\nfib4.call(32)\nfib4.call(33)\nfib4.call(34)\n\
    fib4.call(35)\nfib4.call(36)\nfib4.call(37)\nfib4.call(38)\nfib4.call(39)\nfib4.call(40)\n\
    fib4.call(41)\nfib4.call(42)\nfib4.call(43)\nfib4.call(44)\nfib4.call(45)\nfib4.call(46)\n\
    fib4.call(47)\nfib4.call(48)\nfib4.call(49)\nfib4.call(50)\nfib4.call(51)\nfib4.call(52)\n\
    fib4.call(53)\nfib4.call(54)\nfib4.call(55)\nfib4.call(56)\nfib4.call(57)\nfib4.call(58)\n\
    fib4.call(59)\nfib4.call(60)\nfib4.call(61)\nfib4.call(62)\nfib4.call(63)\nfib4.call(64)\n\
    fib4.call(65)\nfib4.call(66)\nfib4.call(67)\nfib4.call(68)\nfib4.call(69)\nfib4.call(70)\n\
    fib4.call(71)\nfib4.call(72)\nfib4.call(73)\nfib4.call(74)\nfib4.call(75)\nfib4.call(76)\n\
    fib4.call(77)\nfib4.call(78)\nfib4.call(79)\nfib4.call(80)\nfib4.call(81)\nfib4.call(82)\n\
    fib4.call(83)\nfib4.call(84)\nfib4.call(85)\nfib4.call(86)\nfib4.call(87)\nfib4.call(88)\n\
    fib4.call(89)\n", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.stack[n-1] = fib4.stack[n-2] if fib4.stack[n-2]\n  fib4.stack[n-1]\
    \ = fib4.stack[n-3] if fib4.stack[n-3]\n  fib4.stack[n-1] = fib4.stack[n-4] if\
    \ fib4.stack[n-4]\n  fib4.stack[n-1]\nend", "  fib = Fib4.new\n  fib.call(Fib4.new,\
    \ n)\n  fib\nend", "  if n == 0\n    0\n  elsif n == 1\n    1\n  elsif n == 2\n\
    \    2\n  elsif n == 3\n    0\n  elsif n == 4\n    0\n  elsif n == 5\n    1\n\
    \  elsif n == 6\n    2\n  elsif n == 7\n    3\n  elsif n == 8\n    4\n  elsif\
    \ n == 9\n    5\n  elsif n == 10\n    6\n  elsif n == 11\n    7\n  elsif n ==\
    \ 12\n    8\n  elsif n == 13\n    9\n  elsif n == 14\n    10\n  elsif n == 15\n\
    \    11\n  elsif n == 16\n    12\n  elsif n == 17\n    13\n  elsif n == 18\n \
    \   14\n  elsif n == 19\n    15\n  elsif n == 20\n    16\n  elsif n == 21\n  \
    \  17\n  elsif n == 22\n    18\n  elsif n == 23\n    19\n  elsif n == 24\n   \
    \ 20\n  elsif n == 25\n    21\n  elsif n == 26\n    22\n  elsif n == 27\n    23\n\
    \  elsif n == 28\n    24\n  elsif n == 29\n    25\n  elsif n == 30\n    26\n \
    \ elsif n == 31\n    27\n  elsif n == 32\n    28\n  elsif n == 33\n    29\n  elsif\
    \ n == 34\n    30\n  elsif n == 35\n    31\n  elsif n == 36\n    32\n  elsif n\
    \ == 37\n    33\n  elsif n == 38\n    34\n  elsif n == 39\n    35\n  elsif n ==\
    \ 40\n    36\n  elsif n == 41\n    37\n  elsif n == 42\n    38\n  elsif n == 43\n\
    \    39\n  elsif n == 44\n    40\n  elsif n == 45\n    41\n  elsif n == 46\n \
    \   42\n  elsif n == 47\n    43\n  elsif n == 48\n    44\n  elsif n == 49\n  \
    \  45\n  elsif n == 50\n    46\n  elsif n == 51\n    47\n  el", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4 = (0..(n-4)).inject(0) do |sum, num|\n    sum + num + num + num + num\n\
    \  end\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2 then 2\n \
    \ when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\n\
    end", "  fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend", "  fib4.memo[n]\
    \ ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n  fib4.memo[n]\n\
    end", "  fib4.memo[n] ||= fib4.memo[n-1] + fib4.memo[n-2] + fib4.memo[n-3] + fib4.memo[n-4]\n\
    \  fib4.memo[n]\nend", "  if n <= 0\n    0\n  elsif n <= 1\n    0\n  elsif n <=\
    \ 2\n    2\n  elsif n <= 3\n    0\n  elsif n <= 4\n    4\n  else\n    fib4(n -\
    \ 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\nend", "  case n\n    when 0 then\
    \ 0\n    when 1 then 0\n    when 2 then 2\n    when 3 then 0\n    when n then\
    \ fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  end\nend", "  case n\n  when\
    \ 0 then 0\n  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1)\
    \ + fib4(n-2) + fib4(n-3) + fib4(n-4)\n  end\nend", "  case n\n  when 0 then 0\n\
    \  when 1 then 0\n  when 2 then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4)\n  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.cache[n] ||= fib4.cache[n-1] + fib4.cache[n-2] + fib4.cache[n-3] + fib4.cache[n-4]\n\
    \  fib4.cache[n]\nend", "  case n\n  when 0 then 0\n  when 1 then 0\n  when 2\
    \ then 2\n  when 3 then 0\n  else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \  end\nend", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\n\
    end", "  fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend", " \
    \ fib4.call(n-1)+fib4.call(n-2)+fib4.call(n-3)+fib4.call(n-4)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
