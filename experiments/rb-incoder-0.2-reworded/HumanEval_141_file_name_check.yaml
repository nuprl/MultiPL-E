name: HumanEval_141_file_name_check
language: rb
prompt: "# Create a function which takes a string representing a file's name, and\
  \ returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\"\
  )\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_file_name_check\n\
  \    candidate = method(:file_name_check)\n    assert_equal(\"Yes\", candidate.call(\"\
  example.txt\"))\n    assert_equal(\"No\", candidate.call(\"1example.dll\"))\n  \
  \  assert_equal(\"No\", candidate.call(\"s1sdf3.asd\"))\n    assert_equal(\"Yes\"\
  , candidate.call(\"K.dll\"))\n    assert_equal(\"Yes\", candidate.call(\"MY16FILE3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"His12FILE94.exe\"))\n    assert_equal(\"\
  No\", candidate.call(\"_Y.txt\"))\n    assert_equal(\"No\", candidate.call(\"?aREYA.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"/this_is_valid.dll\"))\n    assert_equal(\"\
  No\", candidate.call(\"this_is_valid.wow\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  this_is_valid.txt\"))\n    assert_equal(\"No\", candidate.call(\"this_is_valid.txtexe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"#this2_i4s_5valid.ten\"))\n    assert_equal(\"\
  No\", candidate.call(\"@this1_is6_valid.exe\"))\n    assert_equal(\"No\", candidate.call(\"\
  this_is_12valid.6exe4.txt\"))\n    assert_equal(\"No\", candidate.call(\"all.exe.txt\"\
  ))\n    assert_equal(\"Yes\", candidate.call(\"I563_No.exe\"))\n    assert_equal(\"\
  Yes\", candidate.call(\"Is3youfault.txt\"))\n    assert_equal(\"Yes\", candidate.call(\"\
  no_one#knows.dll\"))\n    assert_equal(\"No\", candidate.call(\"1I563_Yes3.exe\"\
  ))\n    assert_equal(\"No\", candidate.call(\"I563_Yes3.txtt\"))\n    assert_equal(\"\
  No\", candidate.call(\"final..txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  final132\"))\n    assert_equal(\"No\", candidate.call(\"_f4indsartal132.\"))\n \
  \   assert_equal(\"No\", candidate.call(\".txt\"))\n    assert_equal(\"No\", candidate.call(\"\
  s.\"))\n  end\nend\n"
completions: ["  \n  # Your code here\n  \n  return \"Yes\" if file_name.count(\"\
    .\")==1 and file_name.count(\"0\")<3 and file_name.count(\"9\")<3 \\\n  and file_name.count(\"\
    .\")==1 and file_name.index(\".\")>0 and file_name[0].isalpha() and file_name.index(\"\
    .\")<len(file_name)-1 and file_name[file_name.index(\".\")+1:].lower() in [\"\
    txt\", \"exe\", \"dll\"] else \"No\"\n</cell>\n<cell>", "  file_name_array = file_name.split('.')\n\
    \  if file_name_array.length != 2 or file_name_array[0].length != 1 or file_name_array[0].upcase\
    \ != 'A' or file_name_array[0].downcase != 'A' or file_name_array[0].upcase !=\
    \ 'Z' or file_name_array[0].downcase != 'Z'\n    return 'No'\n  else\n    return\
    \ 'Yes'\nend", "  file_name = file_name.downcase\n  file_name = file_name.gsub(/[^0-9\\\
    .]/, '')\n  file_name = file_name.gsub(/\\./, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z]/, '')\n  file_name = file_name.gsub(/^[a-z]/,\
    \ '')\n  file_name = file_name.gsub(/^[a-z", "  file_name_split = file_name.split('.')\n\
    \  \n  if file_name_split[0].count('0') - file_name_split[0].count('9') != 0\n\
    \    return 'No'\n  \n  if file_name_split[0].count('.') != 1\n    return 'No'\n\
    \  \n  if file_name_split[0].count('a') - file_name_split[0].count('z') != 0\n\
    \    return 'No'\n  \n  if file_name_split[0].count('A') - file_name_split[0].count('Z')\
    \ != 0\n    return 'No'\n  \n  if file_name_split[1].count('a') - file_name_split[1].count('z')\
    \ != 0\n    return 'No'\n  \n  if file_name_split[1].count('A') - file_name_split[1].count('Z')\
    \ != 0\n    return 'No'\n  \n  if file_name_split[1].count('0') - file_name_split[1].count('9')\
    \ != 0\n    return 'No'\n  \n  if file_name_split[1] != ['txt', 'exe', 'dll']\n\
    \    return 'No'\n  \n  return 'Yes'\n</cell>\n<cell>", "  file_name.downcase!\n\
    \  file_name.split(//).count <= 3\n  file_name.include?(\".\") && file_name.split(\"\
    .\").first.downcase!.include?(\"a\"..\"z\")\n  file_name.split(\".\").last.downcase!.include?(\"\
    txt\"..\"exe\"..\"dll\")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your\
    \ solution. One thing I noticed is that it returns \"No\" if the file name contains\
    \ more than one dot.\n<|/ c |>\n<| c |>\nYes, I noticed that too. Thanks for pointing\
    \ that out. I've updated my answer accordingly.\n<|/ c |>\n<| c |>\nI like your\
    \ solution. One thing I noticed is that it returns \"No\" if the file name contains\
    \ more than one dot.\n<|/ c |>\n<| c |>\nYes, I noticed that too. Thanks for pointing\
    \ that out. I've updated my answer accordingly.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  file_name_split = file_name.split('.')\n  if file_name_split.length\
    \ != 2 or file_name_split[0].length != 1 or file_name_split[0].upcase != 'A' or\
    \ file_name_split[0].downcase != 'A' or file_name_split[0] != '0' or file_name_split[0]\
    \ != '9'\n    return 'No'\n  else\n    file_name_split = file_name.split('.')\n\
    \    file_name_split = file_name_split[0].split('')\n    file_name_split = file_name_split[0].upcase.split('')\n\
    \    file_name_split = file_name_split[0].downcase.split('')\n    file_name_split\
    \ = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('A')\n    file_name_split = file_name_split[0].split('Z')\n\
    \    file_name_split = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('A')\n    file_name_split = file_name_split[0].split('Z')\n\
    \    file_name_split = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('A')\n    file_name_split = file_name_split[0].split('Z')\n\
    \    file_name_split = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('A')\n    file_name_split = file_name_split[0].split('Z')\n\
    \    file_name_split = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('A')\n    file_name_split = file_name_split[0].split('Z')\n\
    \    file_name_split = file_name_split[0].split('0')\n    file_name_split = file_name_split[0].split('9')\n\
    \    file_name_split = file_name_split[0].split('a')\n    file_name_split = file_name_split[0].split('z')\n\
    \    file_name_split = file_name_split[0].split('", "  file_name = file_name.strip\n\
    \  \n  if file_name.nil? || file_name.empty?\n    return \"No\"\n  end\n  \n \
    \ if file_name.size > 3\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") == 0\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n   \
    \ return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\
    \n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n \
    \ if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n\
    \  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n\
    \  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n\
    \  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n\
    \  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n\
    \  \n  if file_name.index(\".\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\"\
    .\") > 1\n    return \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return\
    \ \"No\"\n  end\n  \n  if file_name.index(\".\") > 1\n    return \"No\"", "  file_name_split\
    \ = file_name.split('.')\n  file_name_split_size = file_name_split.length\n  if\
    \ file_name_split_size < 3 or file_name_split_size > 3 or file_name_split[0].length\
    \ < 1 or file_name_split[0].upcase != file_name_split[0].downcase or file_name_split[1].upcase\
    \ != file_name_split[1].downcase or file_name_split[2].upcase != file_name_split[2].downcase\
    \ or file_name_split[0].upcase != file_name_split[0].downcase or file_name_split[0].upcase\
    \ != file_name_split[0].downcase\n  else\n    file_name_split_size = file_name_split.length\n\
    \    file_name_split_size = file_name_split_size - 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = file_name_split_size\
    \ + 1\n    file_name_split_size = file_name_split_size + 1\n    file_name_split_size\
    \ = file_name_split_size + 1\n    file_name_split_size = ", "  file_name_split\
    \ = file_name.split('.')\n  if file_name_split.length != 2 or file_name_split[0].empty?\
    \ or file_name_split[0].start_with?('0') or file_name_split[0].start_with?('9')\
    \ or file_name_split[0].start_with?('A') or file_name_split[0].start_with?('Z')\n\
    \    return \"No\"\n  else\n    file_name_split.each do |file_name_part|\n   \
    \   if file_name_part.start_with?('0') or file_name_part.start_with?('9') or file_name_part.start_with?('A')\
    \ or file_name_part.start_with?('Z')\n        return \"No\"\n      end\n    end\n\
    \    return \"Yes\"\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<|\
    \ c |>\nThanks for your answer. Your code works well for most of the cases. But\
    \ it fails for some cases. Please check my updated question.\n<|/ c |>\n<| c |>\n\
    I updated my answer to include a solution for your updated question\n<|/ c |>\n\
    <| a tags=ruby,ruby-on-rails |>\n<code>", "  file_name = file_name.downcase\n\
    \  file_name = file_name.gsub(\"\\.\", \"\")\n  file_name = file_name.gsub(\"\
    ^[^a-zA-Z]*\", \"\")\n  file_name = file_name.gsub(\"[^a-zA-Z]*$\", \"\")\n  file_name\
    \ = file_name.gsub(\"^[a-zA-Z]\", \"\")\n  file_name = file_name.gsub(\"[a-zA-Z]$\"\
    , \"\")\n  file_name = file_name.gsub(\"^[0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9]$\", \"\")\n  file_name = file_name.gsub(\"^[0-9][0-9]\", \"\")\n  file_name\
    \ = file_name.gsub(\"[0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"^[0-9][0-9][0-9]\"\
    , \"\")\n  file_name = file_name.gsub(\"[0-9][0-9][0-9]$\", \"\")\n  file_name\
    \ = file_name.gsub(\"^[0-9][0-9][0-9][0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"^[0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n  file_name = file_name.gsub(\"[0-9][0-9][0-9][0-9][0-9]$\", \"\")\n\
    \  file_name = file_name.gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name\
    \ = file_name.gsub(\"[0-9][0-9][0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name = file_name.gsub(\"\
    [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\", \"\")\n  file_name = file_name.gsub(\"\
    ^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\", \"\")\n  file_name\
    \ = file_name.gsub(\"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\"\
    , \"\")\n  file_name = file_name.gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n  file_name = file_name.gsub(\"[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$\"\
    , \"\")\n  file_name = file_name.gsub(\"^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]\"\
    , \"\")\n", "  file_name_parts = file_name.split('.')\n  \n  if file_name_parts.length\
    \ != 3 or file_name_parts[0] == \"\" or file_name_parts[0].start_with?(\"0\")\
    \ || file_name_parts[0].start_with?(\"9\") || file_name_parts[0].length != 1 ||\
    \ file_name_parts[1] == \"\" || file_name_parts[1].start_with?(\"a\") || file_name_parts[1].start_with?(\"\
    z\") || file_name_parts[1].length != 1 || file_name_parts[2] == \"\" || file_name_parts[2].start_with?(\"\
    a\") || file_name_parts[2].start_with?(\"z\") || file_name_parts[2].length !=\
    \ 1\n    return \"No\"\n  else\n    return \"Yes\"\n  end\nend", "  file_name.downcase!\n\
    \  file_name.chomp!\n  file_name.match(/^[0-9]{3}\\.[a-z][a-z][a-z]$/)\n  file_name.include?(\"\
    .\") && file_name.split(\".\").length == 1\n  file_name.split(\".\").first.match(/^[a-z][a-z][a-z]$/)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I am not very\
    \ familiar with Ruby, but I am going to try your solution and see how it goes.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nI added a sample code which you can run to\
    \ test the functions. Please let me know if you have any questions.\n<|/ c |>\n\
    <| c |>\nI tested your code, and it works great! Thanks so much! I really appreciate\
    \ your help!\n<|/ c |>\n<| c |>\nYou're welcome! I'm glad it helped you!\n<|/\
    \ c |>\n<| a tags=ruby |>\nI assume that your file names are in the format <number>.txt,\
    \ where <number> is any positive integer. \n<code>", "  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  ", "  file_name.downcase!\n  file_name.split(//).count > 3\n  file_name.split(//).first.empty?\n\
    \  file_name.split(//).first.upcase =~ /^[a-z_]/\n  file_name.split(//).last.downcase\
    \ =~ /^(exe|dll|txt)$/\nend\n</code>\n<|/ a tags=ruby |>\n<| a tags=ruby |>\n\
    <code>", "  file_name_length = file_name.length\n  if file_name_length >= 3 &&\
    \ file_name_length < 6\n    file_name_chars = file_name.split('.')\n    file_name_chars.each\
    \ do |char|\n      if char.length == 1 && char.upcase >= 'A' && char.upcase <=\
    \ 'Z'\n        return true\n      end\n    end\n    return false\n  end\n  return\
    \ true\nend", "  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  ", "  file_name_split\
    \ = file_name.split('.')\n  if file_name_split.length != 2 or file_name_split[0].empty?\
    \ or file_name_split[0].start_with?('0') or file_name_split[0].start_with?('9')\
    \ or file_name_split[0].start_with?('A') or file_name_split[0].start_with?('Z')\n\
    \    return \"No\"\n  end\n  dot_index = file_name_split.length - 1\n  while dot_index\
    \ >= 0\n    if file_name_split[dot_index].empty? or file_name_split[dot_index].start_with?('0')\
    \ or file_name_split[dot_index].start_with?('9') or file_name_split[dot_index].start_with?('A')\
    \ or file_name_split[dot_index].start_with?('Z')\n      return \"No\"\n    end\n\
    \    dot_index -= 1\n  end\n  if file_name_split[dot_index] == 'txt' or file_name_split[dot_index]\
    \ == 'exe' or file_name_split[dot_index] == 'dll'\n    return \"Yes\"\n  end\n\
    end", "  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name\
    \ = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  file_name = file_name.strip\n\
    \  file_name = file_name.strip\n  file_name = file_name.strip\n  ", "  file_name_split\
    \ = file_name.split('.')\n  file_name_split_length = len(file_name_split)\n  \n\
    \  if file_name_split_length > 3\n    return \"No\"\n  \n  if file_name_split_length\
    \ == 1\n    return \"No\"\n  \n  if file_name_split[0].empty?\n    return \"No\"\
    \n  \n  if file_name_split[0][0].upcase != \"A\"\n    return \"No\"\n  \n  if\
    \ file_name_split[0][-1].downcase != \"Z\"\n    return \"No\"\n  \n  if file_name_split[1]\
    \ != \"txt\"\n    return \"No\"\n  \n  if file_name_split[2] != \"exe\"\n    return\
    \ \"No\"\n  \n  if file_name_split[3] != \"dll\"\n    return \"No\"\n  \n  return\
    \ \"Yes\"\nend", "  file_name_split = file_name.split('.')\n  \n  if file_name_split.size\
    \ < 2\n    return \"No\"\n  \n  if file_name_split[0].empty?\n    return \"No\"\
    \n  \n  if file_name_split[0].start_with?('a')\n    return \"No\"\n  \n  if file_name_split[0].start_with?('A')\n\
    \    return \"No\"\n  \n  if file_name_split[0].start_with?('0')\n    return \"\
    No\"\n  \n  if file_name_split[0].start_with?('9')\n    return \"No\"\n  \n  if\
    \ file_name_split[0].start_with?('.')\n    return \"No\"\n  \n  if file_name_split[1].empty?\n\
    \    return \"No\"\n  \n  if file_name_split[1].start_with?('a')\n    return \"\
    No\"\n  \n  if file_name_split[1].start_with?('A')\n    return \"No\"\n  \n  if\
    \ file_name_split[1].start_with?('0')\n    return \"No\"\n  \n  if file_name_split[1].start_with?('9')\n\
    \    return \"No\"\n  \n  if file_name_split[1].start_with?('.')\n    return \"\
    No\"\n  \n  if file_name_split[1].end_with?('txt')\n    return \"Yes\"\n  \n \
    \ if file_name_split[1].end_with?('exe')\n    return \"Yes\"\n  \n  if file_name_split[1].end_with?('dll')\n\
    \    return \"Yes\"\n  \n  return \"No\"\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
