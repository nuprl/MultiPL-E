name: HumanEval_123_get_odd_collatz
language: rb
prompt: "# Given a positive integer n, return a sorted array that has the odd numbers\
  \ in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n# as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n# previous term as follows: if the previous\
  \ term is even, the next term is one half of \n# the previous term. If the previous\
  \ term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture\
  \ is that no matter what value of n, the sequence will always reach 1.\n# Note:\
  \ \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n#\
  \ For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5\
  \ is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz.call(5)\n\
  # [1, 5]\ndef get_odd_collatz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_odd_collatz\n\
  \    candidate = method(:get_odd_collatz)\n    assert_equal([1, 5, 7, 11, 13, 17],\
  \ candidate.call(14))\n    assert_equal([1, 5], candidate.call(5))\n    assert_equal([1,\
  \ 3, 5], candidate.call(12))\n    assert_equal([1], candidate.call(1))\n  end\n\
  end\n"
completions: ["  odd_list = []\n  odd_list << n if n.even?\n  odd_list << n.odd? ?\
    \ n.odd*2 : 3*n.odd+1 \n  odd_list.sort.reverse\nend", "  odd_list = []\n  odd_list\
    \ << n\n  odd_list << get_odd_collatz(n / 2)\n  odd_list << get_odd_collatz(3\
    \ * n + 1) if n % 2 == 1\n  odd_list\nend", "  odd_collatz = []\n  odd_collatz\
    \ << n\n  odd_collatz << n / 2 if n % 2 == 0\n  odd_collatz << 3 * n + 1 if n\
    \ % 2 == 1\n  odd_collatz.sort!\n  odd_collatz\nend", "  odd_list = []\n  odd_list\
    \ << n\n  odd_list << get_odd_collatz(n / 2)\n  odd_list << get_odd_collatz(3\
    \ * n + 1) if n % 2 == 1\n  odd_list\nend", "  odd_list = []\n  odd_list << n\n\
    \  odd_list << get_odd_collatz(n % 2 == 0 ? n / 2 : 3 * n + 1)\n  odd_list.sort!\n\
    \  odd_list\nend", "  odd_list = []\n  odd_list << n if n.even?\n  odd_list <<\
    \ n.odd? ? n.odd*2 : 3*n.odd+1 \n  odd_list.sort.reverse\nend", "  odd_list =\
    \ []\n  odd_list << n\n  odd_list << n / 2\n  odd_list << n * 3 + 1\n  odd_list.sort\n\
    end", "  odd_list = []\n  odd_list << n if n.even?\n  odd_list << n.odd? ? n.odd*2\
    \ : 3*n.odd+1 if n.odd?\n  odd_list.sort\nend\n</cell>\n<cell>", "  odd_list =\
    \ []\n  odd_list.push(n)\n  odd_list.push(n % 2 == 0 ? n : n / 2)\n  odd_list.push(n\
    \ % 2 == 0 ? n / 2 : 3 * n + 1)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n +\
    \ 2)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 3)\n  odd_list.push(n % 2 ==\
    \ 0 ? n / 2 : 3 * n + 4)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 5)\n  odd_list.push(n\
    \ % 2 == 0 ? n / 2 : 3 * n + 6)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n +\
    \ 7)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 8)\n  odd_list.push(n % 2 ==\
    \ 0 ? n / 2 : 3 * n + 9)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 10)\n \
    \ odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 11)\n  odd_list.push(n % 2 == 0 ?\
    \ n / 2 : 3 * n + 12)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 13)\n  odd_list.push(n\
    \ % 2 == 0 ? n / 2 : 3 * n + 14)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n +\
    \ 15)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 16)\n  odd_list.push(n % 2\
    \ == 0 ? n / 2 : 3 * n + 17)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 18)\n\
    \  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 19)\n  odd_list.push(n % 2 == 0\
    \ ? n / 2 : 3 * n + 20)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 21)\n  odd_list.push(n\
    \ % 2 == 0 ? n / 2 : 3 * n + 22)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n +\
    \ 23)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 24)\n  odd_list.push(n % 2\
    \ == 0 ? n / 2 : 3 * n + 25)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 26)\n\
    \  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 27)\n  odd_list.push(n % 2 == 0\
    \ ? n / 2 : 3 * n + 28)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 29)\n  odd_list.push(n\
    \ % 2 == 0 ? n / 2 : 3 * n + 30)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n +\
    \ 31)\n  odd_list.push(n % 2 == 0 ? n / 2 : 3 * n + 32)", "  odd_list = []\n \
    \ odd_list << n\n  odd_list << get_odd_collatz(n / 2)\n  odd_list << get_odd_collatz(3\
    \ * n + 1) if n % 2 == 1\n  odd_list\nend", "  odd_list = []\n  odd_list.push(n)\n\
    \  while odd_list.count > 1\n    odd_list.each do |n|\n      if n % 2 == 0\n \
    \       odd_list.push(n/2)\n      else\n        odd_list.push(n*3 + 1)\n     \
    \ end\n    end\n  end\n  odd_list\nend", "  odd_list = []\n  odd_list << n if\
    \ n.even?\n  odd_list << n.odd? ? n.odd*2 : 3*n.odd+1 \n  odd_list.sort\nend\n\
    </code>\n<|/ a tags=ruby,collatz dscore=1 |>\n<| a dscore=1 |>\n<code>", "  odd_list\
    \ = []\n  odd_list << n if n.even?\n  odd_list << n.odd? ? n.odd*2 : 3*n.odd+1\
    \ if n.odd?\n  odd_list.sort\nend", "  odd_collatz = []\n  odd_collatz << n\n\
    \  odd_collatz.each do |i|\n    if i.even?\n      odd_collatz << i.next\n    else\n\
    \      odd_collatz << 3 * i + 1\n    end\n  end\n  odd_collatz.sort!\nend", " \
    \ collatz = []\n  collatz << n\n  while collatz.any? && collatz.last % 2 == 1\n\
    \    collatz.last /= 2\n    collatz << collatz.last\n  end\n  collatz\nend", " \
    \ odd_list = []\n  odd_list << n\n  odd_list << get_odd_collatz(n / 2)\n  odd_list\
    \ << get_odd_collatz(3 * n + 1) if n % 2 == 0\n  odd_list.sort\nend\n</cell>\n\
    <cell>\nget_odd_collatz(10)\n</cell>\n<cell>", "  odd_numbers = []\n  odd_numbers.push(n)\n\
    \  while n != 1\n    if n % 2 == 0\n      odd_numbers.push(n / 2)\n      n = n\
    \ / 2\n    else\n      odd_numbers.push(3 * n + 1)\n      n = n / 2\n  end\n \
    \ odd_numbers.sort!\n  return odd_numbers\nend", "  odd_numbers = []\n  collatz_sequence\
    \ = []\n  while n != 1\n    collatz_sequence << n\n    odd_numbers << n\n    if\
    \ n % 2 == 0\n      n /= 2\n    else\n      n = 3*n + 1\n  end\n  odd_numbers.sort!\n\
    \  odd_numbers.reverse!\n  return odd_numbers\nend\n</cell>\n<code language=julia-1.5>",
  "  odd_list = []\n  odd_list << n\n  odd_list << get_odd_collatz(n/2).reverse\n\
    \  odd_list << get_odd_collatz((3*n+1)/2).reverse\n  odd_list\nend", "  odd_list\
    \ = []\n  odd_list << n\n  odd_list << n / 2\n  odd_list << n * 3 + 1\n  odd_list.sort!\n\
    \  odd_list\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
