name: HumanEval_71_triangle_area
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3,\
  \ 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b,\
  \ c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_triangle_area\n\
  \    candidate = method(:triangle_area)\n    assert_equal(6.0, candidate.call(3,\
  \ 4, 5))\n    assert_equal(-1, candidate.call(1, 2, 10))\n    assert_equal(8.18,\
  \ candidate.call(4, 8, 5))\n    assert_equal(1.73, candidate.call(2, 2, 2))\n  \
  \  assert_equal(-1, candidate.call(1, 2, 3))\n    assert_equal(16.25, candidate.call(10,\
  \ 5, 7))\n    assert_equal(-1, candidate.call(2, 6, 3))\n    assert_equal(0.43,\
  \ candidate.call(1, 1, 1))\n    assert_equal(-1, candidate.call(2, 2, 10))\n  end\n\
  end\n"
completions: ["  area_a = (a+b+c)/2.0\n  area_b = (b-a)/2.0\n  area_c = (c-b)/2.0\n\
    \  if area_a > area_b and area_a > area_c\n    return area_a\n  elsif area_b >\
    \ area_a and area_b > area_c\n    return area_b\n  else\n    return area_c\nend",
  "  area_of_triangle = (b * b) - (4 * a * c)\n  if area_of_triangle < 0\n    area_of_triangle\
    \ = -1\n  end\n  area_of_triangle = area_of_triangle / 2\n  return area_of_triangle\n\
    end", "  area_a = (a+b+c)/2.0\n  area_b = (b-a)*(a+b+c)/2.0\n  area_c = (c-a)*(a+b+c)/2.0\n\
    \  if area_a > area_b and area_a > area_c\n    area_a = area_a\n  elsif area_b\
    \ > area_a\n    area_b = area_b\n  elsif area_c > area_a\n    area_c = area_c\n\
    \  end\n  area_a + area_b + area_c\nend", "  area_of_triangle = (b**2) - (4 *\
    \ a * c)\n  if area_of_triangle < 0\n    area_of_triangle = -1\n  area_of_triangle\
    \ = area_of_triangle / 2\n  return area_of_triangle\nend", "  area_of_triangle\
    \ = a + b + c\n  if area_of_triangle > a * b * c\n    area_of_triangle = a * b\
    \ * c\n  end\n  return area_of_triangle\nend", "  area_of_triangle = a + b + c\n\
    \  area_of_triangle > c ? area_of_triangle = c : area_of_triangle\n  area_of_triangle\
    \ > b ? area_of_triangle = b : area_of_triangle\n  area_of_triangle > a ? area_of_triangle\
    \ = a : area_of_triangle\n  area_of_triangle\nend", "  area_of_triangle = (b**2)\
    \ - (4 * a * c)\n  if area_of_triangle == 0\n    area_of_triangle = -1\n  area_of_triangle\
    \ = area_of_triangle / 2\n  return area_of_triangle\nend", "  area_of_triangle\
    \ = (b * b) - (4 * a * c)\n  if area_of_triangle < 0\n    area_of_triangle = -1\n\
    \  area_of_triangle = area_of_triangle / 2\n  return area_of_triangle\nend", " \
    \ area_a = (a+b+c)/2\n  area_b = (b+c-a)/2\n  area_c = (c+a-b)/2\n  area_sum =\
    \ area_a + area_b + area_c\n  area_rounded = area_sum.to_f / area_sum.to_f\n \
    \ return area_rounded.round(2)\nend", "  area_a = (a+b+c)/2\n  area_b = (b-c)\n\
    \  area_c = (c-a)\n  area_d = (a+c-b+a)/2\n  area_e = (b-a-c+b)/2\n  area_f =\
    \ (c-b-a)/2\n  area_g = (b-c-a)/2\n  area_h = (c-a-b)/2\n  area_i = (a-b+c)/2\n\
    \  area_j = (a-b-c)/2\n  area_k = (a-c-b)/2\n  area_l = (b-a-c)/2\n  area_m =\
    \ (c-a-b)/2\n  area_n = (c-b-a)/2\n  area_o = (a+b+c)/2\n  area_p = (b-a+c)/2\n\
    \  area_q = (b-c-a)/2\n  area_r = (c-a-b)/2\n  area_s = (a+c-b+a)/2\n  area_t\
    \ = (b-a-c+b)/2\n  area_u = (c-b-a)/2\n  area_v = (c-a-b)/2\n  area_w = (a-b+c)/2\n\
    \  area_x = (b-a-c)/2\n  area_y = (c-a-b)/2\n  area_z = (c-b-a)/2\n  area_area_a\
    \ = area_a + area_area_a + area_area_a\n  area_area_b = area_b + area_b + area_b\n\
    \  area_area_c = area_c + area_c + area_c\n  area_area_d = area_d + area_d + area_d\n\
    \  area_area_e = area_e + area_e + area_e\n  area_area_f = area_f + area_f + area_f\n\
    \  area_area_g = area_g + area_g + area_g\n  area_area_h = area_h + area_h + area_h\n\
    \  area_area_i = area_i + area_i + area_i\n  area_area_j = area_j + area_j + area_j\n\
    \  area_area_k = area_k + area_k + area_k\n  area_area_l = area_l + area_l + area_l\n\
    \  area_area_m = area_m + area_m + area_m\n  area_area_n = area_n + area_n + area_n\n\
    \  area_area_o = area_o + area_o + area_o\n  area_area_p = area_p + area_p + area_p\n\
    \  area_area_q = area_q + area_q + area_q\n  area_area_r = area_r + area_r + area_r\n\
    \  area_area_s = area_s + area_s + area_s\n  area_area_t = area_t + area_t + area_t\n\
    \  area_area_u = area_", "  area_a = (a * b) / 2\n  area_b = (b * c) / 2\n  area_c\
    \ = (c * a) / 2\n  area_sum = area_a + area_b + area_c\n  if area_sum > c\n  \
    \  area_sum = c\n  area_rounded = area_sum.to_f / area_sum.to_f\n  return area_rounded\n\
    end", "  if a + b > c\n    a + b - c\n  else\n    -1\n  end\nend", "  area_a =\
    \ (a+b+c)/2.0\n  area_b = (b-c)\n  area_c = (c-a)\n  area_d = (a+c-b)\n  area_e\
    \ = (b-a-c)\n  area_f = (c-b-a)\n  area_g = (a+b+c-c-b-a-b)\n  area_h = (b+c-a-c-b-a-b)\n\
    \  area_i = (c-a-b-a-b-a-c)\n  area_j = (a+c-b-a-b-a-c)\n  area_k = (b-a-c-b-a-b-a-c)\n\
    \  area_l = (c-b-a-b-a-b-a-c)\n  area_m = (a+c-b-a-b-a-c-b-a-c)\n  area_n = (b-a-c-b-a-b-a-c-b-a-c)\n\
    \  area_o = (c-b-a-b-a-b-a-c-b-a-c-b-a-c)\n  area_p = (a+b+c-c-b-a-b-a-c-b-a-c-b-a-c)\n\
    \  area_q = (b-a-c-b-a-b-a-c-b-a-c-b-a-c-b-a-c)\n  area_r = (c-b-a-b-a-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c)\n\
    \  area_s = (a+c-b-a-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-a-c-b-",
  "  area_a = (a * b) / 2\n  area_b = (b * c) / 2\n  area_c = (c * a) / 2\n  if area_a\
    \ + area_b > area_c\n    area_c = area_c\n  area_area_c = area_a + area_b - area_c\n\
    \  return area_area_c.round(2)\nend", "  area_a = (a * b) / 2\n  area_b = (b *\
    \ c) / 2\n  area_c = (c * a) / 2\n  area_sum = area_a + area_b + area_c\n  if\
    \ area_sum > c\n    area_sum = c\n  area_rounded = area_sum.to_f / area_sum.to_f\n\
    \  area_rounded = area_rounded.round(2)\n  return area_rounded\nend", "  area_a\
    \ = (a+b+c)/2\n  area_b = (b+c)/2\n  area_c = (c+a)/2\n  if area_a > area_b and\
    \ area_a > area_c\n    return area_a\n  elsif area_b > area_c and area_b > area_a\n\
    \    return area_b\n  else\n    return area_c\nend", "  area_a = (a+b+c)/2\n \
    \ area_b = (b-a)/2\n  area_c = (c-a)/2\n  area_sum = area_a + area_b + area_c\n\
    \  if area_sum > c\n    area_sum = c\n  area_area = area_sum*area_sum\n  return\
    \ area_area\nend", "  area_of_triangle = (b**2) - (4 * a * c)\n  if area_of_triangle\
    \ >= 0\n    area_of_triangle = area_of_triangle / 2\n  else\n    area_of_triangle\
    \ = -1\n  end\n  return area_of_triangle\nend", "  area_a = (a+b+c)/2\n  area_b\
    \ = (b-c)\n  area_c = (c-a)\n  if area_a > area_b and area_a > area_c\n    return\
    \ area_a\n  elsif area_b > area_c\n    return area_b\n  else\n    return area_c\n\
    end", "  area_a = (a * b) / 2\n  area_b = (b * c) / 2\n  area_c = (c * a) / 2\n\
    \  if area_a + area_b > area_c\n    area_c = area_a + area_b\n  area_c = area_c\
    \ * 0.5\n  return area_c\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
