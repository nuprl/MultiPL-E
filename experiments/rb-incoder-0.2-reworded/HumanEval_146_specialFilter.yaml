name: HumanEval_146_specialFilter
language: rb
prompt: "# Write a function that takes an array of numbers as input and returns \n\
  # the number of elements in the array that are greater than 10 and both \n# first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter.call([15,\
  \ -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\n\
  def specialFilter(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_specialFilter\n\
  \    candidate = method(:specialFilter)\n    assert_equal(0, candidate.call([5,\
  \ -2, 1, -5]))\n    assert_equal(1, candidate.call([15, -73, 14, -15]))\n    assert_equal(2,\
  \ candidate.call([33, -2, -3, 45, 21, 109]))\n    assert_equal(4, candidate.call([43,\
  \ -12, 93, 125, 121, 109]))\n    assert_equal(3, candidate.call([71, -2, -33, 75,\
  \ 21, 19]))\n    assert_equal(0, candidate.call([1]))\n    assert_equal(0, candidate.call([]))\n\
  \  end\nend\n"
completions: ["  count = 0\n  for i in nums\n    if i > 10 and (i mod 2 != 0)\n  \
    \    count += 1\n    end\n  end\n  count\nend", "  nums.each do |num|\n    if\
    \ num > 10 && num.to_s.split('').first % 2 == 1 && num.to_s.split('').last % 2\
    \ == 1\n      num\n    end\n  end\nend", "  count = 0\n  for i in nums\n    if\
    \ i > 10 and (i mod 2 != 0 and i mod 2 != 1)\n      count += 1\n    end\n  end\n\
    \  return count\nend", "  nums.each do |num|\n    if num > 10 && num.to_s.chars.first(2).odd?\
    \ && num.to_s.chars.last(2).odd?\n      puts num\n    end\n  end\nend", "  nums.each\
    \ do |num|\n    if num > 10 && num.to_s.chars.first(2).odd? && num.to_s.chars.last(2).odd?\n\
    \      puts num\n    end\n  end\nend", "  count = 0\n  for i in nums\n    if i\
    \ > 10 and i % 2 == 1 and i % 2 != 0\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  for i in nums\n    if i > 10 and (i mod 2 != 0\
    \ and i mod 1 != 0)\n      count += 1\n  return count\n</cell>\n<cell>", "  count\
    \ = 0\n  for i in nums\n    if i > 10 and i%2 == 1 and i%2 == 0\n      count +=\
    \ 1\n    end\n  end\n  return count\nend", "  count = 0\n  for i in nums\n   \
    \ if i > 10 and i.odd? and i.odd? and i.odd?\n      count += 1\n    end\n  end\n\
    \  count\nend", "  count = 0\n  for i in nums\n    if i > 10 and i % 2 == 1 and\
    \ i % 2 != 0\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and (i mod 2 != 0 or i mod 2 != 1)\n      count\
    \ += 1\n  return count\n</cell>\n<cell>", "  count = 0\n  for i in nums\n    if\
    \ i > 10 and i % 2 == 1 and i % 2 != 0\n      count += 1\n    end\n  end\n  return\
    \ count\nend\n</cell>\n<cell>", "  count = 0\n  for i in nums\n    if i > 10 and\
    \ i % 2 == 1 and i % 2 != 0\n      count += 1\n    end\n  end\n  return count\n\
    end", "  count = 0\n  for i in nums\n    if i > 10 and i%2 == 1 and i%2 == 0\n\
    \      count += 1\n    end\n  end\n  return count\nend", "  count = 0\n  for i\
    \ in nums\n    if i > 10 and (i mod 2 != 0 and i mod 2 != 1)\n      count += 1\n\
    \    end\n  end\n  count\nend", "  count = 0\n  for i in nums\n    if i > 10 and\
    \ i % 2 != 0\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and i % 2 == 1 and i % 2 == 0\n      count +=\
    \ 1\n    end\n  end\n  return count\nend", "  count = 0\n  for i in nums\n   \
    \ if i > 10 and i.odd? and i.odd?\n      count += 1\n    end\n  end\n  return\
    \ count\nend", "  count = 0\n  for i in nums\n    if i > 10 and i % 2 == 1 and\
    \ i % 2 != 0\n      count += 1\n    end\n  end\n  count\nend", "  count = 0\n\
    \  for i in nums\n    if i > 10 and i%2 == 1 and i%2 == 0\n      count += 1\n\
    \    end\n  end\n  return count\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
