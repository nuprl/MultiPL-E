name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.slice!(0, string.rindex(\"a\"))\n \
    \ string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    break if string == string.reverse\n  end\n\
    \  string\nend", "  string.gsub(/./) { |c| c =~ /[a-z]/i ? c.reverse : c }.\n\
    \    split(//).\n    join.\n    split(//).\n    join.reverse\nend", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])",
  "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(0, i)\n\
    \  end\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.reverse!\n  string + string.reverse\nend\n</code>\n<|/ a tags=ruby,string,palindrome\
    \ |>\n<| a tags=ruby,string,palindrome |>\n<code>", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex))\n  longest\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n    break if string\
    \ == string.reverse\n  end\n  string\nend", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest = longest + string.reverse(longest)\n  longest\nend", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  max_length = 0\n  max_length_postfix =\
    \ \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"", "  string.length.times do |i|\n    string.slice!(0...i)\n    break\
    \ if string.chars.sort.reverse == string.chars\n    string.slice!(0...i)\n  end\n\
    \  string\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"aba\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and I see it\
    \ works. I guess I didn't test it thoroughly enough.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and I see it works. I guess I didn't test it thoroughly enough.\n\
    <|/ c |>\n<| c |>\nI tested it myself and I see it works. I guess I didn't test\
    \ it thoroughly enough.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  string = string.to_s\n\
    \  longest = string.rpartition(string.chars.reverse.first)\n  longest = longest.first\n\
    \  longest = longest.chars.reverse\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.chars.reverse.join\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.", "  string = string.dup\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.reverse!\n  string\nend", "  string.length.times do |i|\n    string\
    \ = string.gsub(/./, \"\").reverse\n    break if string == string.reverse\n  end\n\
    \  string\nend", "  string.length.times do |i|\n    string.slice!(0..i-1)\n  \
    \  string.slice!(0..i)\n  end\n  string.reverse!\n  string\nend", "  string.reverse\n\
    \  string.sub!(/(?<=\\A|\\z)#{string}/, \"#{string.reverse}\")\n  string.sub!(/(?<=\\\
    A|\\z)#{string.reverse}/, \"#{string}\")\n  string\nend", "  string.gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/",
  "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n\
    \  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
