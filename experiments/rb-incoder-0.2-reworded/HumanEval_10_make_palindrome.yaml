name: HumanEval_10_make_palindrome
language: rb
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"\
  cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_palindrome\n\
  \    candidate = method(:make_palindrome)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"x\", candidate.call(\"x\"))\n    assert_equal(\"xyzyx\"\
  , candidate.call(\"xyz\"))\n    assert_equal(\"xyx\", candidate.call(\"xyx\"))\n\
  \    assert_equal(\"jerryrrej\", candidate.call(\"jerry\"))\n  end\nend\n"
completions: ["  string = string.dup\n  string.slice!(0, string.rindex(\"a\"))\n \
    \ string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    break if string == string.reverse\n  end\n\
    \  string\nend", "  string.gsub(/./) { |c| c =~ /[a-z]/i ? c.reverse : c }.\n\
    \    split(//).\n    join.\n    split(//).\n    join.reverse\nend", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])",
  "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(0, i)\n\
    \  end\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.reverse!\n  string + string.reverse\nend\n</code>\n<|/ a tags=ruby,string,palindrome\
    \ |>\n<| a tags=ruby,string,palindrome |>\n<code>", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex))\n  longest\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n    break if string\
    \ == string.reverse\n  end\n  string\nend", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest = longest + string.reverse(longest)\n  longest\nend", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice!(0,\
    \ longest.length))\n  longest\nend", "  max_length = 0\n  max_length_postfix =\
    \ \"\"\n  max_length_prefix_postfix = \"\"\n  max_length_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_postfix = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n  max_length_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_prefix_postfix\
    \ = \"\"\n", "  max_length = 0\n  max_length_postfix = \"\"\n  max_length_prefix_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse = \"\"\n  max_length_prefix_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse\
    \ = \"\"\n  max_length_prefix_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix_reverse_reverse_postfix\
    \ = \"\"", "  string.length.times do |i|\n    string.slice!(0...i)\n    break\
    \ if string.chars.sort.reverse == string.chars\n    string.slice!(0...i)\n  end\n\
    \  string\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"aba\"`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and I see it\
    \ works. I guess I didn't test it thoroughly enough.\n<|/ c |>\n<| c |>\nI tested\
    \ it myself and I see it works. I guess I didn't test it thoroughly enough.\n\
    <|/ c |>\n<| c |>\nI tested it myself and I see it works. I guess I didn't test\
    \ it thoroughly enough.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  string = string.to_s\n\
    \  longest = string.rpartition(string.chars.reverse.first)\n  longest = longest.first\n\
    \  longest = longest.chars.reverse\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.chars.reverse.join\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.reverse)\n  longest = longest.join(longest.chars.reverse)\n\
    \  longest = longest.join(longest.chars.", "  string = string.dup\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.reverse!\n  string\nend", "  string.length.times do |i|\n    string\
    \ = string.gsub(/./, \"\").reverse\n    break if string == string.reverse\n  end\n\
    \  string\nend", "  string.length.times do |i|\n    string.slice!(0..i-1)\n  \
    \  string.slice!(0..i)\n  end\n  string.reverse!\n  string\nend", "  string.reverse\n\
    \  string.sub!(/(?<=\\A|\\z)#{string}/, \"#{string.reverse}\")\n  string.sub!(/(?<=\\\
    A|\\z)#{string.reverse}/, \"#{string}\")\n  string\nend", "  string.gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/",
  "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n\
    \  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])", "  string.gsub(/([a-z])([A-Z])/,\
    \ '\\1 \\2').gsub(/([A-Z])([a-z])/, '\\1 \\2').gsub(/([a-z])([A-Z])/, '\\1 \\\
    2')\nend", "  string.gsub(/([a-z])([A-Z])/, '\\1 \\2').gsub(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2').gsub(/([a-z])([A-Z][a-z])/, '\\1 \\2')\nend", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.g", "  longest = find_longest_palindrome(string)\n  string.insert(0,\
    \ reverse(string[longest.begin..-1]))\n  string\nend", "  string.reverse\n  string.slice!(0,\
    \ string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for \"abba\" because\
    \ \"abba\" isn't a palindrome.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks\
    \ for pointing it out. I've updated my answer.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require any additional libraries.\n<|/ c |>\n<| a tags=ruby,palindrome,string\
    \ |>\n<code>", "  string.reverse\n  string.slice!(0, string.length)\n  string\
    \ + string.reverse\nend", "  string.gsub(/(?<=[a-z])(?=[A-Z])/) { |s| s[0...-1]\
    \ + s[1..-1] }\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.reverse\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.sub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(", "  max_length = 0\n  max_length_postfix = \"\"\n\
    \  max_length_prefix_reverse = \"\"\n  max_length_prefix_reverse_index = 0\n \
    \ string.split(\"\").each do |char|\n    if char == char.reverse\n      max_length_postfix\
    \ = char\n      max_length_prefix_reverse = string[max_length_prefix_reverse_index..-1]\n\
    \      max_length_prefix_reverse_index += 1\n    end\n  end\n  max_length_postfix.reverse!\n\
    \  max_length_prefix_reverse.reverse!\n  max_length_postfix.length < max_length_prefix_reverse.length\
    \ ? max_length_postfix.reverse : max_length_prefix_reverse.reverse\nend\n</code>\n\
    <|/ a tags=ruby,string |>\n<| c |>\nI like this solution, but I wonder if there\
    \ is a way to make it more efficient. For example, what if there are two palindromes\
    \ starting with the same letter? It seems like this solution would return both\
    \ of them. Is there a way to make it return only one of them?\n<|/ c |>\n<| c\
    \ |>\nI added a second solution that only returns one palindrome. Hope it helps!\n\
    <|/ c |>\n<| c |>\nI added a third solution that only returns one palindrome.\
    \ Hope it helps!\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  string.reverse\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string\n\
    end", "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(0,\
    \ i)\n  end\n  string.reverse!\n  string + string.reverse\nend", "  string.reverse\n\
    \  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex))\n  longest\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n  end\n  string.reverse!\n\
    \  string + string.reverse\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice",
  "  string = string.to_s\n  longest = find_longest_palindrome(string)\n  longest\
    \ += string.reverse(longest).first(longest.length)\n  longest\nend", "  string\
    \ = string.to_s\n  longest = find_longest_palindrome(string)\n  longest = longest\
    \ + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n \
    \ longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest = longest + string.reverse(longest)\n  ", "  string = string.dup\n\
    \  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/", "  string.gsub(/[^a-z]/i) { |s|\
    \ s[0...s.length/2] }\n  string.gsub(/[a-z]/i) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\nend", "  string = string.dup\n  longest = find_longest_postfix_of_string(string)\n\
    \  longest.downcase!\n  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest", "  string = string.dup\n  string.slice!(0,\
    \ string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n\
    \  string.reverse!\n  string\nend", "  string = string.dup\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest)\n  longest = longest + string.reverse(longest)\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.upcase\
    \ }\n  string.gsub!(/([A-Z])/) { $1.downcase }\n  string.gsub!(/[^a-z]/) { |s|\
    \ s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Z]/) { |s| s[0...s.length\
    \ / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse\
    \ }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/)\
    \ { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length\
    \ / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse\
    \ }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/)\
    \ { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length\
    \ / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse\
    \ }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/)\
    \ { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length\
    \ / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse\
    \ }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/)\
    \ { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length\
    \ / 2].reverse }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse\
    \ }\n  string.gsub!(/[^A-Za-z]/) { |s| s[0...s.length / 2].reverse }\n  string.gsub!(/[^A-Za-z]/)\
    \ { |s| s[0...", "  string = string.dup\n  string.slice!(0, string.length)\n \
    \ string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice", "  string\
    \ = string.to_s\n  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex,string.length))\n  longest\nend",
  "  longest = find_longest_postfix_palindrome(string)\n  longest += string.reverse(longest.size)\n\
    \  longest\nend", "  string.gsub(/(?<=^|\\s)(.)(?=\\s)/) { |s| s.reverse }\nend",
  "  string = string.dup\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!",
  "  string.length.times do |i|\n    string[i] = string[i].to_s.reverse\n  end\n \
    \ string.slice!(0...string.length)\n  string\nend", "  string = string.dup\n \
    \ string.gsub!(/[^a-z]+/, '')\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n\
    \  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n\
    \  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2]\
    \ + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1]\
    \ }\n  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n\
    \  string.gsub!(/[a-z]+/) { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/) { |s|\
    \ s[0...s.length/2] + s[s.length/2..-1] }\n  string.gsub!(/[a-z]+/", "  longest\
    \ = find_longest_postfix_of_string(string)\n  longest += string.reverse(longest)\n\
    \  longest\nend", "  string.gsub(/(?<=\\A|\\z)\\B/) { |s| s[0...s.length/2] }\n\
    \  string.gsub(/(?<=\\A|\\z)\\B/) { |s| s[0...s.length/2].reverse}\nend", "  string\
    \ = string.dup\n  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n\
    \  string.slice!(0, string.length/2)\n  string.reverse!\n  string\nend", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.to_s\n\
    \  max_length = 0\n  max_length_postfix = nil\n  max_length_postfix_reverse =\
    \ nil\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index2\
    \ = 0\n  max_length_postfix_reverse_index3 = 0\n  max_length_postfix_reverse_index4\
    \ = 0\n  max_length_postfix_reverse_index5 = 0\n  max_length_postfix_reverse_index6\
    \ = 0\n  max_length_postfix_reverse_index7 = 0\n  max_length_postfix_reverse_index8\
    \ = 0\n  max_length_postfix_reverse_index9 = 0\n  max_length_postfix_reverse_index10\
    \ = 0\n  max_length_postfix_reverse_index11 = 0\n  max_length_postfix_reverse_index12\
    \ = 0\n  max_length_postfix_reverse_index13 = 0\n  max_length_postfix_reverse_index14\
    \ = 0\n  max_length_postfix_reverse_index15 = 0\n  max_length_postfix_reverse_index16\
    \ = 0\n  max_length_postfix_reverse_index17 = 0\n  max_length_postfix_reverse_index18\
    \ = 0\n  max_length_postfix_reverse_index19 = 0\n  max_length_postfix_reverse_index20\
    \ = 0\n  max_length_postfix_reverse_index21 = 0\n  max_length_postfix_reverse_index22\
    \ = 0\n  max_length_postfix_reverse_index23 = 0\n  max_length_postfix_reverse_index24\
    \ = 0\n  max_length_postfix_reverse_index25 = 0\n  max_length_postfix_reverse_index26\
    \ = 0\n  max_length_postfix_reverse_index27 = 0\n  max_length_postfix_reverse_index28\
    \ = 0\n  max_length_postfix_reverse_index29 = 0\n  max_length_postfix_reverse_index30\
    \ = 0\n  max_length_postfix_reverse_index31 = 0\n  max_length_postfix_reverse_index32\
    \ = 0\n  max_length_postfix_reverse_index33 = 0\n  max_length_postfix_reverse_index34\
    \ = 0\n  max_length_postfix_reverse_index35 = 0\n  max_length_postfix_reverse_index36\
    \ = 0\n  max_length_postfix_reverse_index37 = 0\n  max_length_postfix_reverse_index38\
    \ = 0\n  max_length_postfix_reverse_index39 = 0\n  max_length_postfix_reverse_index40\
    \ = 0\n  max_length_postfix_reverse_index41 = 0\n  max_length_postfix_reverse_index42\
    \ = 0\n  max_length_postfix_reverse_index43 = 0\n  max_length_postfix_reverse_index44\
    \ = 0\n  max_length_postfix_reverse_index45 = 0\n  max_length_postfix_reverse_index46\
    \ = 0\n  max_length_postfix_reverse_index47 = 0\n  max_length_postfix_reverse_index48\
    \ = 0\n  max_length_postfix_reverse", "  string = string.dup\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(-i, i)\n  end\n  string.reverse!\n  string + string.reverse\n\
    end", "  string.reverse\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(/([a-z])([a-z])/, '\\1\\2')\n  string.sub!(/([a-z])([a-z])/,\
    \ '\\1\\2')\n  string.sub!(", "  string = string.to_s\n  max_length = string.size\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n  max_length\
    \ -= max_length % 2\n  max_length = max_length / 2\n  max_length = max_length.to_i\n\
    \  max_length -= max_length % 2\n  max_length = max_length / 2\n  max_length =\
    \ max_length.to_i\n  max_length -= max_length % 2\n  max_length = max_length /\
    \ 2\n  max_length = max_length.to_i\n  max_length -= max_length % 2\n  max_length\
    \ = max_length / 2\n  max_length = max_length.to_i\n  max_length -= max_length\
    \ % 2\n  max_length = max_length / 2\n  max_length = ", "  string = string.dup\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.reverse!\n  string\nend", "  string.reverse!\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.", "  string = string.dup\n \
    \ string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.",
  "  string.reverse\n  string.gsub!(/#{string}/, string.reverse)\n  string\nend",
  "  string = string.dup\n  longest = string.chars.reverse.index(string.chars.reverse.first)\n\
    \  string.slice!(0, longest)\n  string.slice!(0, longest)\n  string\nend", " \
    \ string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n \
    \ string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([A-Z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([A-Z])([a-z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1\\2\\3')\n  string.gsub!(/([a-z])([A-Z])([a-z])/,\
    \ '\\1\\2\\3')\n  string.gsub!(/([", "  max_length = 0\n  max_length_postfix =\
    \ []\n  max_length_postfix_reverse = []\n  max_length_postfix_reverse_index =\
    \ 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index = 0\n  max_length_postfix_reverse",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string.gsub(/./) { |c| c =~\
    \ /\\w/ ? c.reverse : c }\nend", "  string = string.dup\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\\
    A|\\z)\\z/, '')\n  string.gsub!(/(?<=\\A|\\", "  string = string.to_s\n  max_length\
    \ = 0\n  max_length_postfix = nil\n  max_length_prefix = nil\n  max_length_suffix\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n\
    \  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n  max_length_suffix_reverse\
    \ = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse = nil\n\
    \  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n  max_length_prefix_reverse\
    \ = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse = nil\n\
    \  max_length_prefix_reverse = nil\n  max_length_suffix_reverse = nil\n  max_length_postfix_reverse\
    \ = nil\n  max_length_prefix_reverse", "  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])", "  string.length.times\
    \ do |i|\n    string.slice!(0..i-1)\n    string.slice!(0..i)\n    break if string\
    \ == string.reverse\n  end\n  string\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(0,\
    \ i)\n  end\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.reverse!\n  string.reverse!\n  string\nend", "  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(find_longest_palindrome(longest.last).last)\n  longest\nend",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n", "  string.reverse\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string\nend", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, '", "  string.length.times do\
    \ |i|\n    string << string[string.length - i - 1]\n  end\n  string.reverse!\n\
    \  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]+/, \"\")\n  string.gsub!(/[a-z]+/) { |s|\
    \ s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  ", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_longest_palindrome(string).reverse)\n\
    \  longest\nend", "  string = string.dup\n  string.slice!(0, string.length/2)\n\
    \  string.slice!(string.length/2)\n  string.slice!(0, string.length/2)\n  string.reverse!\n\
    \  string\nend", "  string.length.times do |i|\n    string.slice!(i)\n    break\
    \ if string.chars.sort.reverse == string\n  end\n  string\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0..i-1)\n    string.slice!(0..i)\n    break if string\
    \ == string.reverse\n  end\n  string\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for `make_palindrome(\"abba\")`\n<|/ c |>\n<| c |>\nYes, I missed\
    \ that case. Thanks for pointing it out. I've updated my answer.\n<|/ c |>\n<|\
    \ a tags=ruby,string |>\n<code>", "  string.reverse\n  string.sub!(/#{string}/,\
    \ \"\")\n  string.sub!(/#{string}/, \"\")\n  string\nend", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.g", "  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.gsub(/(?<=\\A|\\z)/ => \"\")\n  string.gsub(/(?<=\\\
    A|\\z)/ => \"\")\n  string.", "  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])", "  string.length.times do |i|\n   \
    \ string.slice!(0..i-1)\n    string.slice!(0..i)\n    break if string == string.reverse\n\
    \  end\n  string\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't\
    \ work. Try it with `\"cat\"`.\n<|/ c |>\n<| c |>\n: It works. I tested it with\
    \ `\"cat\"`. `string.reverse` returns `\"tac\"`.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.rindex))\n  longest.prepend(string.slice(longest.rindex))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  ", "  string\
    \ = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  max_len = string.length\n  max_postfix =\
    \ \"\"\n  max_postfix_len = -1\n  max_postfix_postfix = \"\"\n  max_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix = \"\"\n  max_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix = \"\"\n  max_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix = \"\"\n  max_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix = \"\"\n  max_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix = \"\"\n\
    \  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\"\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\"\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = \"\"\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = -1\n  max_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "  string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + string.reverse(longest).to_s\n  longest\nend", "  string\
    \ = string.dup\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z][a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([a-z])",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  longest = find_longest_palindrome(string)\n\
    \  middle = find_middle_palindrome(string)\n  middle = middle.reverse\n  middle\
    \ = middle + longest\n  middle = middle + string\n  middle\nend", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/(.)\\1*/) { $1.reverse }\nend", "  string = string.dup\n\
    \  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.",
  "  string = string.to_s\n  max_length = string.length\n  max_length -= 1 if string.length\
    \ % 2 == 0 \n  max_length -= 1 if string.length % 3 == 0\n  max_length -= 1 if\
    \ string.length % 5 == 0\n  max_length -= 1 if string.length % 7 == 0\n  max_length\
    \ -= 1 if string.length % 11 == 0\n  max_length -= 1 if string.length % 13 ==\
    \ 0\n  max_length -= 1 if string.length % 17 == 0\n  max_length -= 1 if string.length\
    \ % 19 == 0\n  max_length -= 1 if string.length % 23 == 0\n  max_length -= 1 if\
    \ string.length % 29 == 0\n  max_length -= 1 if string.length % 37 == 0\n  max_length\
    \ -= 1 if string.length % 41 == 0\n  max_length -= 1 if string.length % 43 ==\
    \ 0\n  max_length -= 1 if string.length % 47 == 0\n  max_length -= 1 if string.length\
    \ % 53 == 0\n  max_length -= 1 if string.length % 59 == 0\n  max_length -= 1 if\
    \ string.length % 61 == 0\n  max_length -= 1 if string.length % 67 == 0\n  max_length\
    \ -= 1 if string.length % 71 == 0\n  max_length -= 1 if string.length % 73 ==\
    \ 0\n  max_length -= 1 if string.length % 79 == 0\n  max_length -= 1 if string.length\
    \ % 83 == 0\n  max_length -= 1 if string.length % 89 == 0\n  max_length -= 1 if\
    \ string.length % 97 == 0\n  max_length -= 1 if string.length % 101 == 0\n  max_length\
    \ -= 1 if string.length % 103 == 0\n  max_length -= 1 if string.length % 105 ==\
    \ 0\n  max_length -= 1 if string.length % 107 == 0\n  max_length -= 1 if string.length\
    \ % 109 == 0\n  max_length -= 1 if string.length % 111 == 0\n  max_length -= 1\
    \ if string.length % 113 == 0\n  max_length -= 1 if string.length % 115 == 0\n\
    \  max_length -= 1 if string.length % 117 == 0\n  max_length -= 1 if string.length\
    \ % 119 == 0\n  max_length -= 1 if string.length % 121 == 0\n  max_length -= 1\
    \ if string.length % 123 == 0\n  max_length -= 1 if string.length % 127 == 0\n\
    \  max_length -= 1 if string.length % 129 == 0\n  max_length -= 1 if string.length\
    \ % 131 == 0\n  max_length -= 1 if string.length % 133 == 0\n  max_length -= 1\
    \ if string.length % 135 == 0\n  max_length -= 1 if string.length % 137 == 0\n\
    \  max_length -= 1 if string.length % 139 == 0\n  max_length -= 1 if string.length\
    \ % 141 == 0\n  max_length -= 1 if string.length % 143 == 0\n  max_length -= 1\
    \ if string.length % 145 == 0\n  max_length -= 1 if string.length % 147 == 0\n\
    \  max_length -= 1 if string.length % 149 == 0\n  max_length -= 1 if string.length\
    \ % 151 == 0\n  ", "  string.gsub(/(?<=\\A|\\z)|\\z/, \"\").reverse.sub(/(?<=\\\
    A|\\z)|\\z/, string).reverse\nend", "  string.gsub(/([a-z])/) { $1.reverse }\n\
    \  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])", "  string\
    \ = string.to_s\n  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  string.length.times do |i|\n    string = string.gsub(/./,\
    \ \"\").reverse\n  end\n  string << string[0...string.length]\n  string\nend",
  "  string = string.to_s\n  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex))\n  longest\nend", "  string =\
    \ string.dup\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice", "  string.gsub(/[^a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }", "  string = string.dup\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice", "  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(", "  string.length.times do |i|\n    string.slice!(0, i)\n\
    \    string.slice!(0, i)\n  end\n  string.reverse!\n  string + string.reverse\n\
    end\n</code>\n<|/ a tags=ruby,palindrome |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"abba\"\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for strings of any length.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for strings of any length.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ for strings of any length.\n<|/ c |>\n<| a tags=ruby,palindrome |>\n<code>",
  "  string = string.to_s\n  longest = string.rindex(string.reverse)\n  longest =\
    \ longest if longest > 0 \n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = longest + 1 if longest < string.length\n  longest = longest + 1 if\
    \ longest < string.length\n  longest = longest + 1 if longest < string.length\n\
    \  longest = lon", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string.gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\\
    A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/(?<=\\A|\\z)\\z/, '').gsub(/",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  max_length = 0\n  max_length_postfix_length\
    \ = 0\n  max_length_prefix_length = 0\n  max_length_prefix_postfix_length = 0\n\
    \  max_length_prefix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_length = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = 0\n  max_length_prefix_postfix_", "  string = string.dup\n  longest = find_longest_palindrome_postfix(string,\
    \ 0)\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([a-z])/,\
    \ '\\1')\n  longest = longest.sub(/([A-Z])/, '\\1')\n  longest = longest.sub(/([0-9])/,\
    \ '\\1')\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([a-z])/,\
    \ '\\1')\n  longest = longest.sub(/([A-Z])/, '\\1')\n  longest = longest.sub(/([0-9])/,\
    \ '\\1')\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([a-z])/,\
    \ '\\1')\n  longest = longest.sub(/([A-Z])/, '\\1')\n  longest = longest.sub(/([0-9])/,\
    \ '\\1')\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([a-z])/,\
    \ '\\1')\n  longest = longest.sub(/([A-Z])/, '\\1')\n  longest = longest.sub(/([0-9])/,\
    \ '\\1')\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([a-z])/,\
    \ '\\1')\n  longest = longest.sub(/([A-Z])/, '\\1')\n  longest = longest.sub(/([0-9])/,\
    \ '\\1')\n  longest = longest.sub(/([a-z])/, '\\1')\n  longest = longest.sub(/([A-Z])/,\
    \ '\\1')\n  longest = longest.sub(/([0-9])/, '\\1')\n  longest = longest.sub(/([",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.to_s\n\
    \  max_length = string.length\n  max_length -= max_length % 2\n  max_length =\
    \ max_length / 2\n  max_length = max_length.to_i\n  max_length = max_length if\
    \ max_length > 0 else 1\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n  max_length = max_length if max_length < string.length\
    \ else string.length\n", "  longest = find_longest_palindrome(string)\n  string.reverse\n\
    \  string << longest\n  string\nend", "  string.length.times do |i|\n    string.slice!(0,\
    \ i)\n    string.slice!(-i, i)\n  end\n  string.reverse!\n  string + string.reverse\n\
    end", "  string = string.dup\n  string.gsub!(/(?<=\\A|\\z)/ , '')\n  string.gsub!(/(?<=\\\
    z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\\
    A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/\
    \ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ ,\
    \ '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n\
    \  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\\
    z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\\
    A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/\
    \ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ ,\
    \ '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n\
    \  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\\
    z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\\
    A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/\
    \ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ ,\
    \ '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)/ , '')\n\
    \  string.gsub!(/(?<=\\z|\\A)/ , '')\n  string.gsub!(/(?<=\\z|\\A)", "  string.gsub(/[^a-z]/i)\
    \ { |c| c.downcase }.gsub(/[a-z]/i) { |c| c.upcase }.\n    split(//).reverse.join\n\
    end", "  string.reverse\n  string.sub!(/(?<=^|\\s)\\z/, \"\")\n  string.sub!(/(?<=[a-z])\\\
    z/, \"\")\n  string\nend", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  string\
    \ = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n\
    \  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n\
    \  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n\
    \  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, '", "  string = string.to_s\n\
    \  longest = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest.prepend(string.slice(longest.rindex).reverse)\n  longest\nend", " \
    \ string = string.dup\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/)\
    \ { $1.", "  string = string.to_s\n  length = string.length\n  postfix = string.chars.to_a.reverse.first(length)\n\
    \  string.insert(length - postfix.length, postfix)\n  string\nend", "  longest\
    \ = find_longest_palindrome(string)\n  longest.prepend(string.slice(0,longest.rindex))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n", "  longest = find_longest_postfix(string)\n  prefix = string[0,longest]\n\
    \  suffix = string[longest,string.length]\n  reversed_prefix = reverse(string,0,longest)\n\
    \  reversed_suffix = reverse(string,longest,string.length)\n  result = prefix\
    \ + reversed_prefix + reversed_suffix + suffix\n  result\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0...i)\n    break if string.length <= 1\n    string.slice!(0...i)\n\
    \    break if string.length <= 1\n  end\n  string\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n  end\n  string.reverse!\n\
    \  string + string.reverse\nend\n</code>\n<|/ a |>\n<| a tags=ruby,string |>\n\
    <code>", "  string = string.dup\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n", "  string\
    \ = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2')", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest = longest + reverse(string[0 .. longest])\n  longest\nend", "  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])/)\
    \ { $1.reverse }\n  string.gsub(/([a-z])/) { $1.reverse }\n  string.gsub(/([a-z])",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string = string.dup\n \
    \ string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.reverse\
    \ }\n  string.gsub!(/([a-z])/) { $1.reverse }\n  string.gsub!(/([a-z])/) { $1.",
  "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i,\
    \ 'a')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/a/i, 'a')\n  string.gsub!(/z/i, '", "  string = string.dup\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.g", "  string.length.times do |i|\n    string.slice!(i, i + 1)\n\
    \  end\n  string.slice!(0, string.length - 1)\n  string.reverse!\n  string + string.reverse\n\
    end", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i,\
    \ 'a')\n  string.gsub!(/[aeiou]/i, 'o')\n  string.gsub!(/[aeiou]/i, 'a')\n  string.gsub!(/[aeiou]/i,\
    \ 'o')\n  string.gsub", "  string = string.dup\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n  string.slice!(0...string.rindex(\"a\"))\n  string.slice!(0...string.rindex(\"\
    a\"))\n", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([a-z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\1\\2')\n  string.gsub!(/([a-z])([a-z])([A-Z])/,\
    \ '\\1\\2')\n  string.gsub!(/([A-Z])([a-z])([a-z])/, '\\", "  string = string.dup\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n\
    \  string.slice!(0...string.length)\n  string.slice!(0...string.length)\n  string.slice!(0...string",
  "  string = string.dup\n  string.gsub!(/[^a-z]+/, \"\")\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  string.gsub!(/[a-z]+/) { |s| s.reverse }\n  string.gsub!(/[a-z]+/)\
    \ { |s| s.reverse }\n  ", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '')\n", "  string.length.times do |i|\n    string.slice!(0..i).reverse!\n  end\n\
    \  string\nend", "  longest = find_longest_postfix_palindrome(string)\n  longest.downcase!\n\
    \  longest.prepend(string.downcase)\n  longest.prepend(string.downcase.reverse)\n\
    \  longest\nend", "  string.gsub(/[^a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }\n  string.gsub(/[a-z]/i) { |s| s.reverse }\n  string.gsub(/[a-z]/i)\
    \ { |s| s.reverse }", "  string.length.times do |i|\n    string[i] = string[i].to_s.reverse\n\
    \  end\n  string.slice!(0...string.length)\n  string\nend", "  string.gsub(/./)\
    \ { |c| c.upcase }.\n    split(\"\").\n    map { |c| c.reverse }.\n    join\n\
    end", "  string.length.times do |i|\n    string = string.gsub(/./, \"\").reverse\n\
    \  end\n  string + string[0...string.length]\nend", "  string = string.dup\n \
    \ string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice", "  string = string.dup\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-1, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-1, string.length)\n  string.slice", "  string.gsub(/([a-z])([A-Z])/,\
    \ '\\1\\2').gsub(/([A-Z])([a-z])/, '\\1\\2').gsub(/([a-z])([A-Z])/, '\\1\\2').gsub(/([A-Z])([a-z])/,\
    \ '\\1\\2')\nend", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\\
    1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z][a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z", "  string.reverse\n  string.slice!(0, string.length)\n\
    \  string.reverse\n  string\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g",
  "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n\
    \  end\n  string.slice!(0, string.length)\n  string.reverse!\n  string + string\n\
    end", "  string = string.to_s\n  length = string.length\n  max_length = 0\n  max_length_postfix\
    \ = \"\"\n  max_length_postfix_reverse = \"\"\n  max_length_postfix_reverse_index\
    \ = 0\n  max_length_postfix_reverse_index2 = 0\n  max_length_postfix_reverse_index3\
    \ = 0\n  max_length_postfix_reverse_index4 = 0\n  max_length_postfix_reverse_index5\
    \ = 0\n  max_length_postfix_reverse_index6 = 0\n  max_length_postfix_reverse_index7\
    \ = 0\n  max_length_postfix_reverse_index8 = 0\n  max_length_postfix_reverse_index9\
    \ = 0\n  max_length_postfix_reverse_index10 = 0\n  max_length_postfix_reverse_index11\
    \ = 0\n  max_length_postfix_reverse_index12 = 0\n  max_length_postfix_reverse_index13\
    \ = 0\n  max_length_postfix_reverse_index14 = 0\n  max_length_postfix_reverse_index15\
    \ = 0\n  max_length_postfix_reverse_index16 = 0\n  max_length_postfix_reverse_index17\
    \ = 0\n  max_length_postfix_reverse_index18 = 0\n  max_length_postfix_reverse_index19\
    \ = 0\n  max_length_postfix_reverse_index20 = 0\n  max_length_postfix_reverse_index21\
    \ = 0\n  max_length_postfix_reverse_index22 = 0\n  max_length_postfix_reverse_index23\
    \ = 0\n  max_length_postfix_reverse_index24 = 0\n  max_length_postfix_reverse_index25\
    \ = 0\n  max_length_postfix_reverse_index26 = 0\n  max_length_postfix_reverse_index27\
    \ = 0\n  max_length_postfix_reverse_index28 = 0\n  max_length_postfix_reverse_index29\
    \ = 0\n  max_length_postfix_reverse_index30 = 0\n  max_length_postfix_reverse_index31\
    \ = 0\n  max_length_postfix_reverse_index32 = 0\n  max_length_postfix_reverse_index33\
    \ = 0\n  max_length_postfix_reverse_index34 = 0\n  max_length_postfix_reverse_index35\
    \ = 0\n  max_length_postfix_reverse_index36 = 0\n  max_length_postfix_reverse_index37\
    \ = 0\n  max_length_postfix_reverse_index38 = 0\n  max_length_postfix_reverse_index39\
    \ = 0\n  max_length_postfix_reverse_index40 = 0\n  max_length_postfix_reverse_index41\
    \ = 0\n  max_length_postfix_reverse_index42 = 0\n  max_length_postfix_reverse_index43\
    \ = 0\n  max_length_postfix_reverse_index44 = 0\n  max_length_postfix_reverse_index45\
    \ = 0\n  max_length_postfix_reverse_index46 = 0\n  max_length_postfix_reverse_index47\
    \ = 0\n  max_length_postfix_reverse_index48 = 0\n  max_length", "  string.gsub(/[^a-z]/i)\
    \ { |c| c.upcase }.reverse.sub(/[a-z]/i) { |c| c.downcase }\nend", "  string.gsub(/(?<=\\\
    A|\\z)|(?<=\\z|\\A)/) { |s| s[/(?<=\\A|\\z)|(?<=\\z|\\A)/].reverse }\nend\n</code>\n\
    <|/ a tags=ruby,regex |>\n<| c |>\nThis doesn't work for `make_palindrome(\"aba\"\
    )`\n<|/ c |>\n<| c |>\nIt does work. `make_palindrome(\"aba\")` returns `\"aba\"\
    `. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns\
    \ `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_palindrome(\"\
    aba\")` returns `\"aba\"`. `make_palindrome(\"aba\")` returns `\"aba\"`. `make_p",
  "  string = string.dup\n  longest = 0\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palindrome(string,\
    \ longest)\n  longest = find_longest_palindrome(string, longest)\n  longest =\
    \ find_longest_palindrome(string, longest)\n  longest = find_longest_palin", " \
    \ string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n\
    \  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n\
    \  string.gsub!(/[a-z]/i, '').downcase!\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ '').downcase!", "  string = string.dup\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(-string.length)\n  string.slice!(0, string.length)\n  string.slice!(-string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(-string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(-string.length)\n  string.slice", "  string.length.times\
    \ do |i|\n    string.slice!(0..i).reverse!\n  end\n  string + string.reverse\n\
    end", "  string = string.dup\n  string.gsub!(/([a-z])([A-Z])/, '\\1 \\2')\n  string.gsub!(/([A-Z])([A-Z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([A-Z])([a-z])/, '\\1 \\2')\n  string.gsub!(/([a-z])([a-z])/,\
    \ '\\1 \\2')\n  string.gsub!(/([a-z])([A-Z])([A-Z])/, '\\1 \\2 \\3')\n  string.gsub!(/([A-Z])([a-z])([A-Z])/,\
    \ '\\1 \\2 \\3')\n  string.gsub!(/([A-Z])([A-Z])([a-z])/, '\\1 \\2 \\3')\n  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])/,\
    \ '\\1 \\2 \\3 \\4')\n  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])/, '\\1 \\2\
    \ \\3 \\4')\n  string.gsub!(/([A-Z])([A-Z])([a-z])([A-Z])/, '\\1 \\2 \\3 \\4')\n\
    \  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([A-Z])([A-Z])([a-z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([A-Z])([a-z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n\
    \  string.gsub!(/([a-z])([A-Z])([A-Z])([A-Z])([A-Z])/, '\\1 \\2 \\3 \\4 \\5')\n",
  "  string = string.to_s\n  longest = find_longest_palindrome(string, 0)\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest\nend", "  string = string.dup\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n  string.slice!(0,\
    \ string.length)\n  string.slice!(0, string.length)\n  string.slice!(0, string.length)\n\
    \  string.slice", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/[a-z]/i, 'a')\n  string.g", "  string.length.times do\
    \ |i|\n    string << string[string.length - i - 1]\n  end\n  string << string.reverse.first\n\
    \  string\nend", "  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '').downcase\n  string.gsub!(/[a-z]/i, '').downcase\n\
    \  string.gsub!(/[a-z]/i, '", "  string = string.to_s\n  longest = find_longest_postfix_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(longest.length,string.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest.length))\n  longest.prepend(string.slice(0,longest.length))\n\
    \  longest.prepend(string.slice(0,longest", "  string = string.dup\n  string.gsub!(/[^a-z]+/,\
    \ \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\"\
    ) # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") #\
    \ remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove\
    \ all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all\
    \ non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric\
    \ characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all non-alphanumeric characters\n\
    \  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/,\
    \ \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\"\
    ) # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") #\
    \ remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove\
    \ all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all\
    \ non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric\
    \ characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all non-alphanumeric characters\n\
    \  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/,\
    \ \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\"\
    ) # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") #\
    \ remove all non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove\
    \ all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all\
    \ non-alphanumeric characters\n  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric\
    \ characters\n  string.gsub!(/[^a-z]+/, \"\") # remove all non-alphanumeric characters\n\
    \  string.gsub!(/[a-z]+/, \"\") # remove all non-alphanumeric characters\n  string.gsub!(/[^a-z]+/,\
    \ \"\") # remove all ", "  string.gsub(/(?<=\\A|\\z)/ ) { |s| s.reverse }\nend",
  "  string.length.times do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n\
    \  end\n  string.reverse!\n  string + string.reverse\nend", "  string.reverse\n\
    \  string.slice!(0, string.length)\n  string + string.reverse\nend", "  string.reverse\n\
    \  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\\
    s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\"\
    )\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\\
    s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\"\
    )\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\\
    s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\"\
    )\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\\
    s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\"\
    )\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\\
    s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\"\
    )\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\\
    s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\"\
    )\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\\
    s)/, \"\")\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\"\
    )\n  string.sub!(/(?<=\\s)/, \"\")\n  string.sub!(/(?<=^|\\s)/, \"\")\n  string.sub!(/(?<=\\",
  "  string = string.dup\n  longest = string.size\n  longest.times do |i|\n    longest\
    \ = longest - i\n    break if longest < 0\n  end\n  longest = longest + 1\n  longest.times\
    \ do |i|\n    longest = longest - i\n    break if longest < 0\n  end\n  longest\
    \ = longest - 1\n  longest.times do |i|\n    longest = longest - i\n    break\
    \ if longest < 0\n  end\n  longest = longest + 1\n  longest.times do |i|\n   \
    \ longest = longest - i\n    break if longest < 0\n  end\n  longest = longest\
    \ - 1\n  longest.times do |i|\n    longest = longest - i\n    break if longest\
    \ < 0\n  end\n  longest = longest + 1\n  longest.times do |i|\n    longest = longest\
    \ - i\n    break if longest < 0\n  end\n  longest = longest - 1\n  longest.times\
    \ do |i|\n    longest = longest - i\n    break if longest < 0\n  end\n  longest\
    \ = longest + 1\n  longest.times do |i|\n    longest = longest - i\n    break\
    \ if longest < 0\n  end\n  longest = longest - 1\n  longest.times do |i|\n   \
    \ longest = longest - i\n    break if longest < 0\n  end\n  longest = longest\
    \ + 1\n  longest.times do |i|\n    longest = longest - i\n    break if longest\
    \ < 0\n  end\n  longest = longest - 1\n  longest.times do |i|\n    longest = longest\
    \ - i\n    break if longest < 0\n  end\n  longest = longest + 1\n  longest.times\
    \ do |i|\n    longest = longest - i\n    break if longest < 0\n  end\n  longest\
    \ = longest - 1\n  longest.times do |i|\n    longest = longest - i\n    break\
    \ if longest < 0\n  end\n  longest = longest + 1\n  longest.times do |i|\n   \
    \ longest = longest - i\n    break if longest < 0\n  end\n  longest = longest\
    \ - 1\n  longest.times do |i|\n    longest = longest - i\n    break if longest\
    \ < 0\n  end\n  longest = longest + 1\n  longest.times do |i", "  string = string.dup\n\
    \  string.slice!(0, string.length/2)\n  string.slice!(string.length/2)\n  string.slice!(0,\
    \ string.length/2)\n  string.reverse!\n  string\nend", "  string.length.times\
    \ do |i|\n    string.slice!(0, i)\n    string.slice!(-i, i)\n  end\n  string.slice!(0,\
    \ string.length)\n  string.reverse!\n  string + string\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, however it fails for \"cat\" => \"catcatac\"\
    \n<|/ c |>\n<| c |>\nI see what you mean. I'll fix it.\n<|/ c |>\n<| c |>\nI fixed\
    \ it now. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ however it fails for \"cat\" => \"catcatac\"\n<|/ c |>\n<| c |>\nI fixed it\
    \ now. Thanks for pointing that out.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>",
  "  longest = find_longest_palindrome(string)\n  longest.prepend(find_prefix_palindrome(string,\
    \ longest.last))\n  longest\nend", "  string.reverse\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string.slice!(0, string.rindex(\"a\"))\n  string.slice!(0, string.rindex(\"\
    a\"))\n  string\nend", "  string = string.to_s\n  longest = find_longest_palindrome(string)\n\
    \  longest.prepend(string.slice(0,longest.end))\n  longest.prepend(string.slice(longest.end))\n\
    \  longest\nend", "  string = string.dup\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i,\
    \ 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i,\
    \ 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i, '')\n  string.gsub!(/[a-z]/i,\
    \ 'a')\n  string.gsub!(/a/i, 'z')\n  string.gsub!(/z/i, 'a')\n  string.gsub!(/[^a-z]/i,\
    \ '')\n  string.gsub!(/[a-z]/i, 'a')\n  string.gsub!(/a/i, 'z')\n  "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
