name: HumanEval_37_sort_even
language: rb
prompt: "# This function takes an array l and returns an array l' such that\n# l'\
  \ is identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even.call([1,\
  \ 2, 3])\n# [1, 2, 3]\n# >>> sort_even.call([5, 6, 3, 4])\n# [3, 6, 5, 4]\ndef sort_even(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_even\n\
  \    candidate = method(:sort_even)\n    assert_equal([1, 2, 3], candidate.call([1,\
  \ 2, 3]))\n    assert_equal([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123], candidate.call([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([-12, 8, 3, 4, 5, 2, 12,\
  \ 11, 23, -10], candidate.call([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n  end\n\
  end\n"
completions: ["  even = l.dup\n  even.sort!\n  even.each_with_index { |e, i| l[i]\
    \ = e if i % 2 == 0 }\n  l\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n\
    \    l.insert(i, e)\n  end\n  l\nend", "  even = l.dup\n  even.sort!\n  even.each_with_index\
    \ do |val, i|\n    even[i] = val if i%2 == 0\n  end\n  even\nend", "  l.each_with_index\
    \ do |e, i|\n    l.delete_at(i)\n    l.insert(i, e)\n  end\nend", "  l.sort!\n\
    \  even = l.select { |x| x % 2 == 0 }\n  even.each_with_index { |x, i| l[i] =\
    \ x }\n  l\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n    l.insert(i,\
    \ e)\n  end\n  l\nend", "  l.each_with_index do |e, i|\n    if i % 2 == 0\n  \
    \    l[i] = l[i]\n    end\n  end\n  l\nend", "  l.sort!\n  l.each_with_index do\
    \ |e, i|\n    l.delete_at(i)\n    l.insert(i, e)\n  end\n  l\nend", "  l.each_with_index\
    \ do |e, i|\n    l.delete_at(i)\n    l.insert(i, e)\n  end\n  l\nend", "  l.each_with_index\
    \ do |e, i|\n    l.delete_at(i)\n    l.insert(i, e)\n  end\n  l\nend", "  l.sort!\n\
    \  l.each_with_index { |e, i| l[i] = l[i] if i % 2 == 0 }\n  l\nend", "  even\
    \ = l.dup\n  even.sort!\n  even.each_with_index { |e, i| l[i] = e if i % 2 ==\
    \ 0 }\n  l\nend", "  even = l.dup\n  even.sort!\n  even.each_with_index do |e,\
    \ i|\n    if i % 2 == 0\n      even[i] = e\n    end\n  end\n  even\nend", "  even\
    \ = l.dup\n  even.sort!\n  even.each_with_index do |e, i|\n    even[i] = e if\
    \ i % 2 == 0\n  end\n  even\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\
    \ if i % 2 == 0\n  end\n  l\nend", "  l.sort!\n  l.each_with_index do |e, i|\n\
    \    if i % 2 == 0\n      l[i] = l[i]\n    end\n  end\n  l\nend", "  l.sort!\n\
    \  l.each_with_index do |e, i|\n    l.delete_at(i)\n    l.insert(i, e)\n  end\n\
    \  l\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n    l.insert(i,\
    \ e)\n  end\n  l\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n \
    \   l.insert(i, e)\n  end\n  l\nend", "  l.each_with_index do |e, i|\n    l.delete_at(i)\n\
    \    l.insert(i, e)\n  end\n  l\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
