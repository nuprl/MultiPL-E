name: HumanEval_39_prime_fib
language: rb
prompt: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n# >>> prime_fib.call(1)\n# 2\n# >>> prime_fib.call(2)\n# 3\n# >>> prime_fib.call(3)\n\
  # 5\n# >>> prime_fib.call(4)\n# 13\n# >>> prime_fib.call(5)\n# 89\ndef prime_fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_fib\n\
  \    candidate = method(:prime_fib)\n    assert_equal(2, candidate.call(1))\n  \
  \  assert_equal(3, candidate.call(2))\n    assert_equal(5, candidate.call(3))\n\
  \    assert_equal(13, candidate.call(4))\n    assert_equal(89, candidate.call(5))\n\
  \    assert_equal(233, candidate.call(6))\n    assert_equal(1597, candidate.call(7))\n\
  \    assert_equal(28657, candidate.call(8))\n    assert_equal(514229, candidate.call(9))\n\
  \    assert_equal(433494437, candidate.call(10))\n  end\nend\n"
completions: ["  if n < 2\n    return n\n  else\n    return prime_fib.call(n-1) +\
    \ prime_fib.call(n-2)\nend", "  if n < 2\n    puts \"n is less than 2\"\n  else\n\
    \    puts \"n is less than or equal to 2\"\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts\
    \ n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n    puts n\n\
    \    puts n\n    puts n\n    puts n\n    put", "  if n < 2\n    next\n  else\n\
    \    prime_fib.call(n - 1) + prime_fib.call(n - 2)\n  end\nend", "  return n if\
    \ n < 2 else prime_fib.call(n - 1) + prime_fib.call(n - 2)\nend", "  if n < 2\n\
    \    prime_fib.call(n) = n\n  else\n    prime_fib.call(n) = prime_fib.call(n-1)\
    \ + prime_fib.call(n-2)\n  end\nend", "  if n < 2\n    return n\n  else\n    return\
    \ prime_fib.call(n-1) + prime_fib.call(n-2)\nend", "  return n if n < 2 else prime_fib.call(n\
    \ - 1) + prime_fib.call(n - 2)\nend", "  if n < 2\n    puts \"Not a Fibonacci\
    \ number\"\n  elsif n == 2\n    puts \"2\"\n  elsif n == 3\n    puts \"3\"\n \
    \ elsif n % 2 == 0\n    puts \"#{n} is a Fibonacci number\"\n  else\n    puts\
    \ \"#{n} is not a Fibonacci number\"\n  end\nend", "  return n if n < 2 else prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend", "  if n < 2\n    return n\n  else\n    prime_fib.call(n-1)\n\
    \    prime_fib.call(n-2)\n  end\nend", "  return n if n < 2 else prime_fib(n -\
    \ 1) + prime_fib(n - 2)\nend", "  if n < 2\n    puts \"n is less than 2\"\n  else\n\
    \    puts \"n is less than or equal to 2\"\n    puts n\n    puts n-1\n    puts\
    \ n-2\n    puts n-3\n    puts n-4\n    puts n-5\n    puts n-6\n    puts n-7\n\
    \    puts n-8\n    puts n-9\n    puts n-10\n    puts n-11\n    puts n-12\n   \
    \ puts n-13\n    puts n-14\n    puts n-15\n    puts n-16\n    puts n-17\n    puts\
    \ n-18\n    puts n-19\n    puts n-20\n    puts n-21\n    puts n-22\n    puts n-23\n\
    \    puts n-24\n    puts n-25\n    puts n-26\n    puts n-27\n    puts n-28\n \
    \   puts n-29\n    puts n-30\n    puts n-31\n    puts n-32\n    puts n-33\n  \
    \  puts n-34\n    puts n-35\n    puts n-36\n    puts n-37\n    puts n-38\n   \
    \ puts n-39\n    puts n-40\n    puts n-41\n    puts n-42\n    puts n-43\n    puts\
    \ n-44\n    puts n-45\n    puts n-46\n    puts n-47\n    puts n-48\n    puts n-49\n\
    \    puts n-50\n    puts n-51\n    puts n-52\n    puts n-53\n    puts n-54\n \
    \   puts n-55\n    puts n-56\n    puts n-57\n    puts n-58\n    puts n-59\n  \
    \  puts n-60\n    puts n-61\n    puts n-62\n    puts n-63\n    puts n-64\n   \
    \ puts n-65\n    puts n-66\n    puts n-67\n    puts n-68\n    puts n-69\n    puts\
    \ n-70\n    puts n-71\n    puts n-72\n    puts n-73\n    puts n-74\n    puts n-75\n\
    \    puts n-76\n    puts n-77\n    puts n-78\n    puts n-79\n    puts n-80", " \
    \ return prime_fib.call(n) if n <= 2 else\n    prime_fib.call(n - 1) + prime_fib.call(n\
    \ - 2)\nend", "  return n if n < 2 else prime_fib.call(n - 1) + prime_fib.call(n\
    \ - 2)\nend", "  if n < 2\n    puts \"Not a Fibonacci number\"\n  else\n    puts\
    \ \"#{n} is a Fibonacci number\" if prime_fib.call(n) == n\n  end\nend", "  if\
    \ n < 2\n    puts \"Not a Fibonacci number\"\n  elsif n == 2\n    puts \"2\"\n\
    \  elsif n == 3\n    puts \"3\"\n  elsif n % 2 == 0\n    puts \"Not a Fibonacci\
    \ number\"\n  else\n    puts prime_fib.call(n - 1) + prime_fib.call(n - 2)\n \
    \ end\nend", "  if n < 2\n    puts \"The number #{n} is not a Fibonacci number.\"\
    \n  else\n    puts \"The #{n}th Fibonacci number is #{fibonacci(n)}. #{n} is also\
    \ a prime number.\"\n  end\nend", "  prime_fib.call(n) if prime_fib.call(n).nil?\
    \ || prime_fib.call(n).zero? || prime_fib.call(n).even? || prime_fib.call(n).odd?\n\
    \  prime_fib.call(n-1).zero? ? prime_fib.call(n-2) : prime_fib.call(n-2) + prime_fib.call(n-1)\n\
    end", "  prime_fib.memo[n] = prime_fib.memo[n-1] + prime_fib.memo[n-2]\n  return\
    \ prime_fib.memo[n]\nend", "  if n <= 2\n    prime_fib.call(n)\n  else\n    prime_fib.call(n\
    \ - 1) + prime_fib.call(n - 2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
