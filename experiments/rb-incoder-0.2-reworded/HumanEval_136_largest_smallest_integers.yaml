name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as nil.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  lst.each do |i|\n    if i.is_a?(Integer)\n      min = i\n      max\
    \ = i\n    else\n      min = i.min\n      max = i.max\n    end\n  end\n  [min,\
    \ max]\nend", "  lst.sort.reverse.map { |x| [x, x] }.first\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\n \
    \ nil\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    return\
    \ nil if i == 0\n    return e if e > lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      break\n    elsif n > 0 && lst.size - i > 1\n\
    \      break\n    end\n  end\n  [lst.size - i, i]\nend", "  lst.sort.reverse.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i == 0\n      break if lst.first\
    \ < x\n      lst.shift\n    end\n  end\n  lst.sort.reverse\nend", "  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      smallest = i\n      largest = i\n    elsif\
    \ i.is_a? Float\n      smallest = nil\n      largest = nil\n    else\n      smallest\
    \ = nil\n      largest = nil\n    end\n  end\n  [smallest, largest]\nend", " \
    \ lst.sort.reverse\n  lst.each_with_index do |n, i|\n    return nil if n.nil?\n\
    \    return n if n < 0\n    return i if n > 0\n  end\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n  \
    \    smallest = i\n    else\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x<0\n     \
    \ break\n    end\n    break if x>0\n  end\n  lst.each_with_index do |x, i|\n \
    \   if x>0\n      break\n    end\n    break if x<0\n  end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=ruby,arrays,algorithm |>\n<code>", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if i < 0\n   \
    \   break\n    end\n    break if i >= 0\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.find\
    \ {|x| x < 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n      smallest\
    \ = i\n    elsif i.positive?\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse.each_with_index do |e, i|\n    return nil\
    \ if i == 0\n    return e if e > lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |number, index|\n    if number > 0 && number < 0\n \
    \     return [number, nil]\n    end\n  end\n  [nil, nil]\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  lst.first\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n   \
    \   smallest = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.negative?\n      smallest = i\n    else\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n    end\n \
    \   break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    if x.positive?\n\
    \      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index do |x,\
    \ i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if\
    \ i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n   \
    \ break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n\
    \  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n   \
    \ break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n\
    \  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n   \
    \ break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n\
    \  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n   \
    \ break if i == 0\n  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n\
    \  end\n  lst.each_with_index do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n  end\n  lst.each_with_index do |x, i|\n   \
    \ break if i == 0\n  end\n  lst.each_with", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  lst.sort.reverse\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays,algorithm\
    \ |>\n<code>", "  lst.sort.reverse.each_with_index do |x, i|\n    return nil if\
    \ i == 0\n    return x if x < 0\n    return nil if x > 0\n  end\n  nil\nend",
  "  lst.sort.reverse.each_with_index do |x, i|\n    if x.negative?\n      break if\
    \ i == 0\n      lst.delete_at(i)\n    end\n  end\n  lst.sort.reverse\nend", " \
    \ lst.sort.reverse\n  lst.each_with_index do |n, i|\n    if n < 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |n, i|\n    if\
    \ n > 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst.delete_at(i)\n      lst.delete_at(i)\n  \
    \  end\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      a = nil\n      b = e\n    elsif e > 0\n     \
    \ a = e\n      b = nil\n    else\n      a = nil\n      b = nil\n    end\n  end\n\
    \  return [a, b]\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n\
    \    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n    end\n\
    \  end\n  [lst[0], lst[-1]]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  [lst[0], lst[-1]]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      break\n    elsif x > 0 && lst.size - i == 1\n\
    \      break\n    end\n  end\n  lst.each_with_index do |x, i|\n    if x < 0\n\
    \      break\n    elsif x > 0 && lst.size - i == 1\n      break\n    end\n  end\n\
    end", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n   \
    \ if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      lst.delete_at(i)\n      break\n    end\n\
    \  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.each_with_index do |e, i|\n\
    \    if e < 0\n      break\n    end\n    break if i == 0\n  end\n  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    if e > 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.sort.reverse\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    break if i == 0\n    break if x > lst[i-1]\n  end\n  lst.each_with_index\
    \ do |x, i|\n    break if i == 0\n    break if x < lst[i-1]\n  end\nend", "  lst.sort.reverse.find\
    \ {|x| x < 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      lst.delete_at(i)\n      break\n    end\n\
    \  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.map { |x| [x, x] }.max_by\
    \ { |x| x[0] }\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n    elsif\
    \ x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.each do |i|\n    if i.is_a? Integer\n      smallest_integer = i\n      break\n\
    \    end\n  end\n  lst.each do |i|\n    if i.is_a? Integer\n      largest_integer\
    \ = i\n      break\n    end\n  end\n  if smallest_integer.nil? || largest_integer.nil?\n\
    \    return nil\n  end\n  smallest_integer, largest_integer = smallest_integer,\
    \ largest_integer\n  smallest_integer, largest_integer = smallest_integer > largest_integer\
    \ ? smallest_integer : largest_integer, smallest_integer > largest_integer ? largest_integer\
    \ : smallest_integer\n  return smallest_integer, largest_integer\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n  \
    \    smallest = i\n    else\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse.find {|x| x >= 0 }\nend", "  lst.sort.reverse.map {\
    \ |x| [x, x] }.max_by { |x| x[0] }\nend", "  lst.each do |x|\n    if x.is_a?(Integer)\n\
    \      max = x\n      min = x\n    elsif x.is_a?(Float)\n      max = x.abs\n \
    \     min = x\n    else\n      max = nil\n      min = nil\n    end\n  end\n  [min,\
    \ max]\nend", "  lst.sort.reverse.map { |x| [x, x] }.max_by { |x| x[0] }\nend",
  "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x < 0\n      smallest = nil\n      break\n    elsif x > largest\n      largest\
    \ = x\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      break\n    end\n    if x > 0 && i < lst.size\
    \ - 1\n      break\n    end\n  end\n  return [lst[i], nil] if lst.size > 0\n \
    \ return [nil, nil] if lst.size == 0\nend", "  lst.sort.reverse.find {|x| x <\
    \ 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\nend",
  "  lst.sort.reverse.each_with_index do |x, i|\n    if x.negative?\n      break if\
    \ i == 0\n      break if lst[i-1].positive?\n      lst[i-1] = nil\n    end\n \
    \ end\n  lst\nend", "  lst.sort.reverse.find { |x| x < 0 }\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |e, i|\n    if e < 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e > 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ i == 0\n      break if e < 0\n      break if e > 0\n    end\n  end\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if there are two or more\
    \ negative numbers in the array.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for\
    \ pointing it out. Also I added a more efficient solution that doesn't require\
    \ sorting.\n<|/ c |>\n<| c |>\nI added a more efficient solution that doesn't\
    \ require sorting.\n<|/ c |>\n<| c |>\nI added a more efficient solution that\
    \ doesn't require sorting.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    if x < 0\n      break\n    elsif x > 0 &&\
    \ i < lst.size - 1\n      break\n    end\n  end\n  lst.each_with_index do |x,\
    \ i|\n    if x < 0\n      break\n    elsif x > 0 && i == lst.size - 1\n      break\n\
    \    end\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't\
    \ work if there are two negative numbers in the array. Try it with `[2,-4,1,3,-5,7]`.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to account for that\
    \ case.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to account\
    \ for that case.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited my answer\
    \ to account for that case.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  lst.sort.reverse\n\
    \  lst.each_with_index do |x, i|\n    if x < 0\n      break\n    end\n    if x\
    \ > 0 && lst.size - i == 1\n      break\n    end\n  end\n  return [lst[lst.size\
    \ - 1], lst[0]]\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n\
    \    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n    end\n\
    \  end\n  lst.each_with_index do |e, i|\n    if e < 0\n      break\n    elsif\
    \ e > 0\n      break if i == 0\n    end\n  end\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e > lst[i-1]\n  end\n \
    \ nil\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i < 0\n      smallest = i\n    elsif i > largest\n      largest = i\n\
    \    end\n  end\n  [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif\
    \ i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x.negative?\n     \
    \ break if lst.size == i\n      lst.delete_at(i)\n    end\n  end\n  lst.sort.reverse\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  lst.sort.reverse.find { |x| x < 0 } || lst.sort.find { |x| x > 0 }\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if e < 0\n   \
    \   break\n    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n\
    \    if e > 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == ", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n    elsif x > largest\n\
    \      largest = x\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i == 0\n      x = x.abs\n    end\n\
    \    break if i == lst.size - 1\n  end\n  lst.sort.reverse.each_with_index do\
    \ |x, i|\n    if x.positive?\n      break if i == lst.size - 1\n      x = x.abs\n\
    \    end\n    break if i == 0\n  end\n  lst.sort.reverse\nend", "  lst.each do\
    \ |x|\n    if x.negative?\n      a = x\n      b = nil\n    elsif x.positive?\n\
    \      a = nil\n      b = x\n    else\n      a = nil\n      b = nil\n    end\n\
    \  end\n  return [a, b]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i.is_a? Integer\n      if smallest == nil || i < smallest\n\
    \        smallest = i\n      end\n      if largest == nil || i > largest\n   \
    \     largest = i\n      end\n    end\n  end\n  [smallest, largest]\nend", " \
    \ lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if e < 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e > 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e ", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    break if x.nil?\n    if i > 0 && x < lst[i-1]\n      lst[i-1], lst[i] = lst[i],\
    \ lst[i-1]\n    end\n  end\n  lst\nend", "  lst.sort.reverse.each_with_index do\
    \ |n, i|\n    if n < 0\n      break\n    elsif n > 0 && lst.count > 1\n      break\n\
    \    end\n    lst.delete_at(i)\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n\
    \      smallest = i if i.negative?\n      largest = i if i.positive?\n    else\n\
    \      smallest = nil if i.negative?\n      largest = nil if i.positive?\n   \
    \ end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if i < 0\n      break\n    elsif x > 0 && i < lst.size - 1\n\
    \      break\n    end\n  end\n  lst.each_with_index do |x, i|\n    if i < 0\n\
    \      break\n    elsif x > 0 && i < lst.size - 1\n      break\n    end\n  end\n\
    end", "  lst.sort.reverse.each_with_index do |x, i|\n    if x.negative?\n    \
    \  break if i == 0\n      break if lst[i-1].positive?\n      break if lst[i-1].negative?\n\
    \      lst[i-1] = nil\n    end\n  end\n  lst\nend", "  lst.each do |i|\n    if\
    \ i.is_a? Integer\n      smallest = i\n      largest = i\n    elsif i.is_a? Float\n\
    \      smallest = nil\n      largest = nil\n    else\n      smallest = nil\n \
    \     largest = nil\n    end\n  end\n  return [smallest, largest]\nend", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\n \
    \ nil\nend", "  lst.sort!\n  smallest_integer = nil\n  largest_integer = nil\n\
    \  lst.each do |i|\n    if i.negative?\n      smallest_integer = i\n    else\n\
    \      largest_integer = i\n    end\n  end\n  [smallest_integer, largest_integer]\n\
    end", "  lst.sort.reverse.each_with_index do |e, i|\n    if e < 0\n      break\n\
    \    elsif e > 0\n      break if i == 0\n    end\n  end\n  [lst[0], lst[-1]]\n\
    end", "  lst.sort.reverse.each_with_index do |e, i|\n    if e < 0 && i > 0 &&\
    \ lst[i-1] < 0\n      return [nil, e]\n    elsif e > 0 && i < lst.size - 1 &&\
    \ lst[i+1] > 0\n      return [e, nil]\n    end\n  end\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |n, i|\n    if n < 0\n      break\n    end\n    if i\
    \ == 0\n      smallest = n\n    else\n      if n > smallest\n        smallest\
    \ = n\n      end\n    end\n  end\n  [smallest, nil]\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  [lst[0], lst[lst.size - 1]]\nend", "  lst.each do |i|\n   \
    \ if i.is_a? Integer\n      break if i.negative?\n      break if i.positive?\n\
    \    else\n      return nil\n    end\n  end\n  i\nend", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    if e < 0 && i > 0 then return [e, i] end\n    if e > 0 && i <\
    \ lst.size - 1 then return [e, i] end\n  end\n  nil\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    break if x.nil?\n\
    \    break if i == 0\n    break if lst.first < x\n    break if lst.last > x\n\
    \  end\n  [lst.first, lst.last]\nend", "  lst.sort.reverse\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest\
    \ == nil || i < smallest\n        smallest = i\n      end\n      if largest ==\
    \ nil || i > largest\n        largest = i\n      end\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      if smallest == nil || i < smallest\n \
    \       smallest = i\n      end\n      if largest == nil || i > largest\n    \
    \    largest = i\n      end\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    elsif x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x.is_a?(Integer)\n      smallest = x if x <\
    \ smallest\n      largest = x if x > largest\n    else\n      smallest = nil if\
    \ smallest.nil?\n      largest = nil if largest.nil?\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    if\
    \ e < 0 && i > 0 && lst[i-1] > 0\n      lst[i-1], lst[i] = lst[i], lst[i-1]\n\
    \    end\n  end\n  lst\nend", "  lst.sort.reverse.find {|x| x < 0 } || lst.sort.find\
    \ {|x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n \
    \   if x < 0\n      break\n    elsif x > 0 && lst.size - i == 1\n      break\n\
    \    end\n  end\n  return nil if lst.size == 0\n  lst.each_with_index do |x, i|\n\
    \    if x < 0\n      return [x, lst.size - i - 1]\n    end\n  end\nend", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n\
    \      break\n    elsif x > largest\n      largest = x\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse.each_with_index do |e, i|\n    if e < 0\n\
    \      break\n    elsif e > 0\n      break if i == 0\n    end\n  end\n  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\nend", "  lst.sort!\n  smallest_integer = nil\n  largest_integer\
    \ = nil\n  lst.each do |i|\n    if i.is_a?(Integer)\n      smallest_integer =\
    \ i if i.negative?\n      largest_integer = i if i.positive?\n    else\n     \
    \ smallest_integer = nil\n      largest_integer = nil\n    end\n  end\n  [smallest_integer,\
    \ largest_integer]\nend", "  lst.sort.reverse.find { |x| x < 0 } || lst.sort.find\
    \ { |x| x > 0 }\nend", "  lst.each do |x|\n    if x.is_a? Integer\n      break\
    \ if x > 0 && x < 0\n      break if x < 0\n      break if x > 0 && x <= 0\n  \
    \  end\n  end\n  [x, -x - 1]\nend", "  lst.sort.reverse.find { |x| x.to_i < 0\
    \ }\nend", "  lst.sort.reverse.find { |x| x < 0 }\nend", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse.each_with_index\
    \ do |number, index|\n    if number < 0\n      break\n    end\n    break if index\
    \ == 0\n  end\n  [number, lst[index]]\nend", "  lst.sort.reverse.find {|x| x <\
    \ 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse.map do |x|\n  \
    \  if x.negative?\n      nil\n    elsif x.positive?\n      x\n    else\n     \
    \ nil\n    end\n  end\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |x|\n    if x < 0\n      smallest = nil\n      break\n    elsif\
    \ x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.sort.reverse.find {|x| x < 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort!\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n    else\n      if smallest == nil\n        smallest = x\n      else\n\
    \        if x < smallest\n          smallest = x\n        end\n      end\n   \
    \ end\n    if x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse.map do |x|\n    if x.negative?\n      nil\n    else\n\
    \      x\n    end\n  end.compact\nend", "  lst.sort.reverse.find {|x| x < 0 }\n\
    end", "  lst.sort.reverse.each_with_index do |e, i|\n    return nil if i == 0\n\
    \    return e if e < lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = x\n\
    \    elsif x > largest\n      largest = x\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    return nil if\
    \ i == 0\n    return e if e < lst[i-1]\n  end\n  nil\nend", "  lst.each do |i|\n\
    \    if i.is_a?(Integer)\n      break if i.negative?\n      break if i.positive?\n\
    \    else\n      return nil\n    end\n  end\n  i\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |e, i|\n    return nil if i == 0\n    return e if e\
    \ < lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse.find {|x| x < 0 }\nend",
  "  lst.sort.reverse.find { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", " \
    \ lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n   \
    \ if x < smallest\n      smallest = x\n    end\n    if x > largest\n      largest\
    \ = x\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse.each_with_index\
    \ do |n, i|\n    if n < 0\n      return [nil, i]\n    end\n  end\n  [nil, nil]\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    if e < 0 && i > 0 &&\
    \ lst[i-1] < 0\n      lst[i-1], lst[i] = lst[i], lst[i-1]\n    end\n  end\n  lst\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x.negative?\n\
    \      break if i == 0\n      lst.delete_at(i)\n    end\n  end\n  lst.sort.reverse\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if i < lst.size\
    \ - 1\n      break if x<lst[i+1]\n    end\n    break if x<0\n  end\n  lst.sort.reverse\n\
    end", "  lst.sort.reverse.find {|x| x < 0 } || lst.sort.find {|x| x > 0 }\nend",
  "  lst.each do |x|\n    if x.to_i < 0\n      b = x\n    else\n      a = x\n    end\n\
    \  end\n  [a, b]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n\
    \    if x.negative?\n      break if i > 0 and lst[i-1].positive?\n      lst[i]\
    \ = nil\n    end\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.each_with_index\
    \ do |number, index|\n    if number > 0 && number < 0\n      return [number, nil]\n\
    \    elsif number > 0\n      return [number, index]\n    elsif number < 0\n  \
    \    return [index, number]\n    end\n  end\nend", "  lst.sort.reverse.find {\
    \ |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\nend",
  "  lst.sort.reverse.find {|x| x.to_i < 0 }\nend", "  lst.sort.reverse.find { |x|\
    \ x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse.find { |x|\
    \ x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0 && i > 0 then\n      break\n    elsif e > 0 && i < lst.size\
    \ - 1 then\n      break\n    end\n  end\n  lst.each_with_index do |e, i|\n   \
    \ if e < 0 && i < lst.size - 1 then\n      break\n    elsif e > 0 && i > 0 then\n\
    \      break\n    end\n  end\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |i|\n    if i.is_a? Integer\n      if smallest == nil ||\
    \ i < smallest\n        smallest = i\n      end\n      if largest == nil || i\
    \ > largest\n        largest = i\n      end\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n\
    \    if i.is_a? Integer\n      smallest = i if i.abs < smallest.abs\n      largest\
    \ = i if i.abs > largest.abs\n    else\n      smallest = nil if i.nil?\n     \
    \ largest = nil if i.nil?\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    elsif x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x,\
    \ i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n  end\n\
    \  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n    end\n \
    \   break if x.positive?\n  end\n  lst.each_with_index do |x, i|\n    if x.negative?\n\
    \      break\n    end\n    break if x.positive?\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n\
    \  end\n  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n   \
    \ end\n    break if x.positive?\n  end\n  lst.each_with_index do |x, i|\n    if\
    \ x.negative?\n      break\n    end\n    break if x.positive?\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n\
    \  end\n  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n   \
    \ end\n    break if x.positive?\n  end\n  lst.each_with_index do |x, i|\n    if\
    \ x.negative?\n      break\n    end\n    break if x.positive?\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n\
    \  end\n  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n   \
    \ end\n    break if x.positive?\n  end\n  lst.each_with_index do |x, i|\n    if\
    \ x.negative?\n      break\n    end\n    break if x.positive?\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n\
    \  end\n  lst.each_with_index do |x, i|\n    if x.negative?\n      break\n   \
    \ end\n    break if x.positive?\n  end\n  lst.each_with_index do |x, i|\n    if\
    \ x.negative?\n      break\n    end\n    break if x.positive?\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break\n    end\n    break if x.positive?\n\
    \  end\n  lst.each_with_index do |x, ", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i == 0\n      lst.delete_at(i)\n\
    \    end\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif\
    \ i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.sort.reverse.find { |x| x >= 0 } || nil\nend", "  lst.sort.reverse.map {\
    \ |x| [x, x] }.max_by { |x| x.first }\nend", "  lst.sort.reverse.find { |x| x\
    \ < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.each do |i|\n    if i.is_a?(Integer)\n\
    \      min = i\n      max = i\n    else\n      min = i.min\n      max = i.max\n\
    \    end\n  end\n  return [min, max]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    end\n    if e > 0\n      break\n \
    \   end\n  end\n  if i == 0\n    return [nil, nil]\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      return [nil, i]\n    end\n    if e > 0\n    \
    \  return [i, nil]\n    end\n  end\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i > 0 && lst[i-1].positive?\n\
    \      lst[i] = nil\n    else\n      break if i < lst.size - 1 && lst[i+1].positive?\n\
    \      lst[i] = nil\n    end\n  end\n  lst\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x < 0\n      lst.delete_at(i)\n      break\n    end\n  end\n\
    \  lst.sort.reverse\nend", "  lst.each do |i|\n    if i.is_a?(Integer)\n     \
    \ min = i\n      max = i\n    else\n      min = i.min\n      max = i.max\n   \
    \ end\n  end\n  return [min, max]\nend", "  lst.sort.reverse\n  smallest = nil\n\
    \  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n\
    \      smallest = x\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse.each_with_index do |n,\
    \ i|\n    if n < 0\n      break\n    end\n    break if i == 0\n  end\n  lst.sort.reverse.each_with_index\
    \ do |n, i|\n    if n > 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  [lst.sort.reverse.first, lst.sort.reverse.last]\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |n, i|\n    if n < 0\n      lst.delete_at(i)\n     \
    \ break\n    end\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  lst.first\nend", "  lst.each do |i|\n    if i.is_a?(Integer)\n\
    \      break if i.negative?\n      break if i.positive?\n    else\n      return\
    \ nil\n    end\n  end\n  i\nend", "  lst.sort.reverse\n  lst.each_with_index do\
    \ |x, i|\n    if x < 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x > 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |x, i|\n    if x == 0\n      break if i == 0\n    end\n\
    \  end\n  lst.each_with_index do |x, i|\n    if x == 0\n      break if i == 0\n\
    \    end\n  end\n  lst.each_with_index do |x, i|\n    if x == 0\n      break if\
    \ i == 0\n    end\n  end\n  lst.each_with_index do |x, i|\n    if x == 0\n   \
    \   break if i == 0\n    end\n  end\n  lst.each_with_index do |x, i|\n    if x\
    \ == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index do |x, i|\n\
    \    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index do\
    \ |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with_index\
    \ do |x, i|\n    if x == 0\n      break if i == 0\n    end\n  end\n  lst.each_with",
  "  lst.sort.reverse.inject(nil) do |max, x|\n    max = x if x > max\n    max\n \
    \ end\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x.negative?\n\
    \      lst.delete_at(i)\n      break\n    end\n  end\n  lst.sort.reverse\nend",
  "  lst.sort.reverse.find { |x| x >= 0 && x <= lst.max ? x : nil }.nil? ? [nil, lst.max]\
    \ : nil\nend", "  lst.sort.reverse.map { |x| [x, x] }.max_by { |x| x[0] }\nend",
  "  lst.sort.reverse.map do |x|\n    x.nil? ? nil : [x, x.abs]\n  end\nend", "  lst.sort.reverse.map\
    \ { |x| x < 0 ? nil : x }\nend", "  lst.sort.reverse.inject(nil) do |max, x|\n\
    \    max = x if x > max\n    max\n  end\nend", "  lst.sort.reverse.find {|x| x\
    \ < 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i == 0\n      break if lst.first\
    \ < x\n      lst.shift\n    end\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.map\
    \ { |x| [x, x] }.max_by { |x| x[0] }\nend", "  lst.sort.reverse.find { |x| x <\
    \ 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if i <\
    \ lst.size - 1\n      break if x<lst[i+1]\n    end\n    break if x<0\n  end\n\
    \  lst.sort.reverse\nend", "  lst.sort.reverse.map { |x| [x, x] }.max_by { |x|\
    \ x[0] }\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x.negative?\n\
    \      lst.delete_at(i)\n      break\n    end\n  end\n  lst.sort.reverse\nend",
  "  lst.sort.reverse\n  lst.each_with_index do |number, index|\n    if number > 0\
    \ && number < 0\n      return [number, nil]\n    end\n  end\n  [nil, nil]\nend",
  "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if\
    \ i.negative?\n      smallest = i\n    else\n      largest = i\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.sort!\n  smallest = nil\n  largest = nil\n\
    \  lst.each do |i|\n    if i < 0\n      smallest = i\n    elsif i > largest\n\
    \      largest = i\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse.map\
    \ { |x| [x, x] }.first\nend", "  lst.sort!\n  lst.each_with_index do |n, i|\n\
    \    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n \
    \ lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n\
    \    end\n  end\n  lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] =\
    \ nil\n      break\n    end\n  end\n  lst.each_with_index do |n, i|\n    if n\
    \ < 0\n      lst[i] = nil\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n \
    \ lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n\
    \    end\n  end\n  lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] =\
    \ nil\n      break\n    end\n  end\n  lst.each_with_index do |n, i|\n    if n\
    \ < 0\n      lst[i] = nil\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n \
    \ lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n\
    \    end\n  end\n  lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] =\
    \ nil\n      break\n    end\n  end\n  lst.each_with_index do |n, i|\n    if n\
    \ < 0\n      lst[i] = nil\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n \
    \ lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n\
    \    end\n  end\n  lst.each_with_index do |n, i|\n    if n < 0\n      lst[i] =\
    \ nil\n      break\n    end\n  end\n  lst.each_with_index do |n, i|\n    if n\
    \ < 0\n      lst[i] = nil\n      break\n    end\n  end\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      lst[i] = nil\n      break\n    end\n  end\n \
    \ l", "  lst.sort.reverse.each_with_index do |e, i|\n    return nil if i == 0\n\
    \    return e if e > lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse.map do\
    \ |x|\n    if x.negative?\n      nil\n    elsif x.positive?\n      x\n    else\n\
    \      nil\n    end\n  end\nend", "  lst.sort.reverse\n  lst.each_with_index do\
    \ |e, i|\n    if e < 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e > 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == 0\n  end\n  lst.each_with_index\
    \ do |e, i|\n    if e == 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e == 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\n\
    \    end\n    break if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if\
    \ e == 0\n      break\n    end\n    break if i == ", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |x, i|\n    if x.negative?\n      lst.delete_at(i)\n      break\n    end\n\
    \  end\n  lst.sort.reverse\nend\n</code>\n<|/ a tags=ruby,arrays,algorithm |>\n\
    <| c |>\nThis doesn't work if there are two negative numbers in the array. Try\
    \ it with `[-1,-2,-3,-4,-5]`.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify that this is an expected behavior.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if there are two positive numbers in the array. Try it with `[-1,-2,-3,-4,-5]`.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify that this is an\
    \ expected behavior.\n<|/ c |>\n<| c |>\nI added a comment to the question to\
    \ clarify that this is an expected behavior.\n<|/ c |>\n<| a |>\n<code>", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < smallest\n \
    \     smallest = x\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse.map { |x| x.to_i }.max_by(&:<=>).map\
    \ { |x| x.to_i }\nend", "  lst.sort.reverse.each_with_index do |e, i|\n    if\
    \ e < 0\n      break\n    elsif e > 0\n      break if i == 0\n    end\n  end\n\
    \  lst.sort.reverse\nend", "  lst.sort.reverse.find { |x| x < 0 } || lst.sort.find\
    \ { |x| x > 0 }\nend", "  lst.sort.reverse.each_with_index do |x, i|\n    return\
    \ nil if i == 0\n    return x if x < lst[i-1]\n  end\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.is_a?(Integer)\n\
    \      smallest = i if i.<(smallest || 0)\n      largest = i if i.>(largest ||\
    \ 0)\n    end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n\
    \      break\n    end\n    if x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend", "  lst.sort.reverse.map { |x| x < 0 ? nil : x }\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x.to_i < 0\n\
    \      lst.delete_at(i)\n    else\n      break\n    end\n  end\n  lst.sort.reverse\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x<0\n     \
    \ break\n    elsif x>0\n      break\n    end\n  end\n  lst.each_with_index do\
    \ |x, i|\n    if x<0\n      lst.delete_at(i)\n      lst.insert(i, nil)\n     \
    \ break\n    elsif x>0\n      break\n    end\n  end\n  lst\nend", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n      smallest\
    \ = i\n    else\n      largest = i\n    end\n  end\n  [smallest, largest]\nend",
  "  lst.sort.reverse\n  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if\
    \ x.negative?\n      smallest = nil\n      break\n    end\n    if smallest ==\
    \ nil\n      smallest = x\n    end\n    if x > largest\n      largest = x\n  \
    \  end\n  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  lst.each_with_index do |e, i|\n    if e > 0\n      break\n    end\n    break\
    \ if i == 0\n  end\n  lst.each_with_index do |e, i|\n    if e == 0\n      break\
    \ if i == 0\n    end\n  end\n  [lst[0], lst[-1]]\nend", "  lst.each do |x|\n \
    \   if x.negative?\n      b = x\n    else\n      a = x\n    end\n  end\n  [a,\
    \ b]\nend", "  lst.sort.reverse.find {|x| x < 0 } || lst.sort.find {|x| x > 0\
    \ }\nend", "  lst.sort.reverse.find {|x| x < 0 }\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |e, i|\n    if e < 0\n      break\n    end\n    if e\
    \ > 0\n      break\n    end\n  end\n  lst.each_with_index do |e, i|\n    if e\
    \ < 0\n      lst.delete_at(i)\n    end\n  end\n  lst.sort.reverse\nend\n</code>\n\
    <|/ a tags=ruby,arrays |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array. Try `largest_smallest_integers.call([-1, -2, -3, 4, 5])`\n<|/\
    \ c |>\n<| c |>\nYes, I realized that after I posted it. I added a comment to\
    \ the OP's question to clarify that case.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require sorting.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require sorting.\n<|/ c |>\n<| a tags=ruby,arrays |>\n<code>", "  lst.sort.reverse.find\
    \ { |x| x < 0 } || lst.sort.find { |x| x > 0 }\nend", "  lst.sort.reverse.map\
    \ do |x|\n    if x.negative?\n      nil\n    else\n      [x, x.positive?]\n  \
    \  end\n  end\nend", "  lst.sort.reverse.each_with_index do |e, i|\n    return\
    \ nil if i == 0\n    return e if e < lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse.map\
    \ { |x| [x, x] }.max_by { |x| x[0] }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    end\n    break if i == 0\n  end\n\
    \  [e, i]\nend", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    break\
    \ if x.nil?\n    break if i > 0 and x < lst[i-1]\n    break if i < lst.size -\
    \ 1 and x > lst[i+1]\n  end\n  [lst[i-1], lst[i+1]]\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\n \
    \ nil\nend", "  lst.sort.reverse.map { |x| [x, x] }.max_by { |x| x[0] }\nend",
  "  lst.sort.reverse.find {|x| x < 0 }\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  lst.sort.reverse\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
