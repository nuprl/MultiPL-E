name: HumanEval_136_largest_smallest_integers
language: rb
prompt: "# Create a function that returns an array (a, b), where 'a' is\n# the largest\
  \ of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n\
  # If there is no negative or positive integers, return them as nil.\n# Examples:\n\
  # >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n\
  # [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_smallest_integers\n\
  \    candidate = method(:largest_smallest_integers)\n    assert_equal([nil, 1],\
  \ candidate.call([2, 4, 1, 3, 5, 7]))\n    assert_equal([nil, 1], candidate.call([2,\
  \ 4, 1, 3, 5, 7, 0]))\n    assert_equal([-2, 1], candidate.call([1, 3, 2, 4, 5,\
  \ 6, -2]))\n    assert_equal([-7, 2], candidate.call([4, 5, 3, 6, 2, 7, -7]))\n\
  \    assert_equal([-9, 2], candidate.call([7, 3, 8, 4, 9, 2, 5, -9]))\n    assert_equal([nil,\
  \ nil], candidate.call([]))\n    assert_equal([nil, nil], candidate.call([0]))\n\
  \    assert_equal([-1, nil], candidate.call([-1, -3, -5, -6]))\n    assert_equal([-1,\
  \ nil], candidate.call([-1, -3, -5, -6, 0]))\n    assert_equal([-3, 1], candidate.call([-6,\
  \ -4, -4, -3, 1]))\n    assert_equal([-3, 1], candidate.call([-6, -4, -4, -3, -100,\
  \ 1]))\n  end\nend\n"
completions: ["  lst.each do |i|\n    if i.is_a?(Integer)\n      min = i\n      max\
    \ = i\n    else\n      min = i.min\n      max = i.max\n    end\n  end\n  [min,\
    \ max]\nend", "  lst.sort.reverse.map { |x| [x, x] }.first\nend", "  lst.sort.reverse.each_with_index\
    \ do |e, i|\n    return nil if i == 0\n    return e if e < lst[i-1]\n  end\n \
    \ nil\nend", "  lst.sort.reverse\n  lst.each_with_index do |e, i|\n    return\
    \ nil if i == 0\n    return e if e > lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |n, i|\n    if n < 0\n      break\n    elsif n > 0 && lst.size - i > 1\n\
    \      break\n    end\n  end\n  [lst.size - i, i]\nend", "  lst.sort.reverse.each_with_index\
    \ do |x, i|\n    if x.negative?\n      break if i == 0\n      break if lst.first\
    \ < x\n      lst.shift\n    end\n  end\n  lst.sort.reverse\nend", "  lst.each\
    \ do |i|\n    if i.is_a? Integer\n      smallest = i\n      largest = i\n    elsif\
    \ i.is_a? Float\n      smallest = nil\n      largest = nil\n    else\n      smallest\
    \ = nil\n      largest = nil\n    end\n  end\n  [smallest, largest]\nend", " \
    \ lst.sort.reverse\n  lst.each_with_index do |n, i|\n    return nil if n.nil?\n\
    \    return n if n < 0\n    return i if n > 0\n  end\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n  \
    \    smallest = i\n    else\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if x<0\n     \
    \ break\n    end\n    break if x>0\n  end\n  lst.each_with_index do |x, i|\n \
    \   if x>0\n      break\n    end\n    break if x<0\n  end\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=ruby,arrays,algorithm |>\n<code>", "  lst.sort!\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i < 0\n      smallest = i\n\
    \    elsif i > largest\n      largest = i\n    end\n  end\n  [smallest, largest]\n\
    end", "  lst.sort.reverse\n  lst.each_with_index do |x, i|\n    if i < 0\n   \
    \   break\n    end\n    break if i >= 0\n  end\n  lst.sort.reverse\nend", "  lst.sort.reverse.find\
    \ {|x| x < 0 } || lst.sort.find {|x| x > 0 }\nend", "  lst.sort.reverse\n  smallest\
    \ = nil\n  largest = nil\n  lst.each do |i|\n    if i.negative?\n      smallest\
    \ = i\n    elsif i.positive?\n      largest = i\n    end\n  end\n  [smallest,\
    \ largest]\nend", "  lst.sort.reverse.each_with_index do |e, i|\n    return nil\
    \ if i == 0\n    return e if e > lst[i-1]\n  end\n  nil\nend", "  lst.sort.reverse\n\
    \  lst.each_with_index do |number, index|\n    if number > 0 && number < 0\n \
    \     return [number, nil]\n    end\n  end\n  [nil, nil]\nend", "  lst.sort.reverse\n\
    \  smallest = nil\n  largest = nil\n  lst.each do |x|\n    if x < 0\n      smallest\
    \ = nil\n      break\n    end\n    if x > largest\n      largest = x\n    end\n\
    \  end\n  [smallest, largest]\nend", "  lst.sort.reverse\n  lst.each_with_index\
    \ do |e, i|\n    if e < 0\n      break\n    elsif e > 0\n      break if i == 0\n\
    \    end\n  end\n  lst.first\nend", "  lst.sort.reverse\n  smallest = nil\n  largest\
    \ = nil\n  lst.each do |x|\n    if x < 0\n      smallest = nil\n    else\n   \
    \   smallest = x\n    end\n    if x > largest\n      largest = x\n    end\n  end\n\
    \  [smallest, largest]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
