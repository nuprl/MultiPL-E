name: HumanEval_54_same_chars
language: rb
prompt: "# Check if two words have the same characters.\n# >>> same_chars.call(\"\
  eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> same_chars.call(\"abcd\", \"\
  dddddddabc\")\n# true\n# >>> same_chars.call(\"dddddddabc\", \"abcd\")\n# true\n\
  # >>> same_chars.call(\"eabcd\", \"dddddddabc\")\n# false\n# >>> same_chars.call(\"\
  abcd\", \"dddddddabce\")\n# false\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
  )\n# false\ndef same_chars(s0, s1)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_same_chars\n\
  \    candidate = method(:same_chars)\n    assert_equal(true, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\"))\n    assert_equal(true, candidate.call(\"abcd\", \"dddddddabc\"\
  ))\n    assert_equal(true, candidate.call(\"dddddddabc\", \"abcd\"))\n    assert_equal(false,\
  \ candidate.call(\"eabcd\", \"dddddddabc\"))\n    assert_equal(false, candidate.call(\"\
  abcd\", \"dddddddabcf\"))\n    assert_equal(false, candidate.call(\"eabcdzzzz\"\
  , \"dddzzzzzzzddddabc\"))\n    assert_equal(false, candidate.call(\"aabb\", \"aaccc\"\
  ))\n  end\nend\n"
completions: ["  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return false\
    \ if s0[i] != s1[i]\n  end\n  true\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.chars == s1.chars\nend", "  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  return s0.zip(s1).all?\
    \ { |a,b| a == b }\nend", "  return s0.chars == s1.chars && s0.size == s1.size\n\
    end", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.size == s1.size && s0.chars\
    \ == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size\
    \ && s0.chars.zip(s1.chars).all? { |a,b| a == b }\nend", "  s0 = s0.to_s\n  s1\
    \ = s1.to_s\n  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  s0, s1\
    \ = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  s0, s1 =\
    \ s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_",
  "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return false if s0[i]\
    \ != s1[i]\n  end\n  true\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return\
    \ s0.length == s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n    a == b\n\
    \  end\nend", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return\
    \ false if s0[i] != s1[i]\n  end\n  true\nend", "  return s0.chars == s1.chars\n\
    end", "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.length == s1.length and\
    \ s0.chars.zip(s1.chars).all? { |a,b| a == b }\nend", "  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0.length.times do |i|\n    return false if s0[i] != s1[i]\n  end\n  true\n\
    end", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0,\
    \ s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l,\
    \ s1.to_l\n  s0, s1 = s0.to_n, s1.to_n\n  s0, s1 = s0.to_p, s1.to_p\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_sym, s1.to_sym\n  s0, s1 = s0.to_u, s1.to_u\n\
    \  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1\
    \ = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n\
    \  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1\
    \ = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n\
    \  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1\
    \ = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n\
    \  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1\
    \ = s0.to_z, s1.", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.size,\
    \ s1.size\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.next, s1.next\n  s0, s1 = s0.prev, s1.prev\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pre", "  s0, s1 = s0.to_a,\
    \ s1.to_a\n  return s0.size == s1.size && s0.zip(s1).all? { |a,b| a == b }\nend",
  "  s0, s1 = s0.to_a, s1.to_a\n  return s0.size == s1.size && s0.all? { |c| c==s1.first\
    \ }\nend", "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend",
  "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return false if s0[i] !=\
    \ s1[i]\n  end\n  true\nend", "  return s0.chars == s1.chars\nend", "  s0, s1\
    \ = s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.size == s1.size && s0.chars == s1.chars\nend", "  return s0.chars\
    \ == s1.chars\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.to_a, s1.to_a\n  return s0.size == s1.size && s0.zip(s1).all?\
    \ { |a,b| a == b }\nend", "  return s0.chars == s1.chars and s0.chars == s0.chars\n\
    end", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 =\
    \ s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\
    \ && s0.chars.size == s1.chars.size\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n \
    \ s0.each_char.zip(s1.each_char).all? { |a,b| a == b }\nend", "  s0 = s0.to_s\n\
    \  s1 = s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |(a,b), (c,d)|\n    a == c && b == d\n  end\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  s0 = s0.to_s\n  s1\
    \ = s1.to_s\n  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0\
    \ = s0.downcase\n  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return\
    \ s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a, b|\n    a.char == b.char\n\
    \  end\nend", "  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.downcase, s1.downcase\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  return s0.chars == s1.chars\nend",
  "  return s0.chars == s1.chars and s0.size == s1.size\nend", "  s0 = s0.to_s\n \
    \ s1 = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.length == s1.length and s0.chars.zip(s1.chars).all? do |(a,b), (c,d)|\n\
    \    a == c && b == d\n  end\nend", "  return s0.chars == s1.chars\nend", "  s0\
    \ = s0.to_s\n  s1 = s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  return s0.size == s1.size &&\
    \ s0.chars.zip(s1.chars).all? { |a,b| a == b }\nend", "  return s0.size == s1.size\
    \ && s0.chars == s1.chars\nend", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times\
    \ do |i|\n    return false if s0[i] != s1[i]\n  end\n  true\nend", "  return s0.chars\
    \ == s1.chars\nend", "  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |(ca, cb), (ca2, cb2)|\n    ca == ca2 && cb == cb2\n  end\nend", "  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return false if s0[i] != s1[i]\n\
    \  end\n  true\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times\
    \ do |i|\n    return false if s0[i] != s1[i]\n  end\n  true\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1).all?\
    \ do |a,b|\n    a.chars.all? { |c| b.chars.include?(c) }\n  end\nend", "  s0,\
    \ s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_", "  s0, s1\
    \ = s0.downcase, s1.downcase\n  return s0.size == s1.size && s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    if s0[i] !=\
    \ s1[i]\n      return false\n    end\n  end\n  true\nend", "  return s0.chars\
    \ == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char do |c|\n\
    \    return false if s1.include?(c)\n  end\n  true\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0.each_char.with_index do |c0, i0|\n    s1.each_char.with_index\
    \ do |c1, i1|\n      next if i0 > i1\n      next if c0 == c1\n      next if c0\
    \ == '\\0' || c1 == '\\0'\n      return false if c0 != c1\n    end\n  end\n  true\n\
    end", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  return s0.chars == s1.chars\nend",
  "  s0, s1 = s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |c,c|\n    c != c\n  end\nend", "  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |(a,b), (c,d)|\n    a == c && b == d\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0 = s0.to_s\n\
    \  s1 = s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all? {\
    \ |a,b| a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend",
  "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  s0,\
    \ s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.length, s1.length\n  s0, s1 = s0.size,\
    \ s1.size\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.next, s1.next\n  s0, s1 = s0.prev, s1.prev\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, ", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ { |c0, c1| c0 == c1 }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars,\
    \ s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend",
  "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.downcase, s1.downcase\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 =\
    \ s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n\
    \  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_", "  s0 = s0.downcase\n  s1 =\
    \ s1.downcase\n  s0 = s0.gsub(/[^a-z]/, '')\n  s1 = s1.gsub(/[^a-z]/, '')\n  return\
    \ s0.length == s1.length and s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  return s0.size == s1.size && s0.chars == s1.chars\nend", "  return\
    \ s0.size == s1.size && s0.chars.zip(s1.chars).all? do |pair|\n    pair[0] ==\
    \ pair[1]\n  end\nend", "  s0 = s0.chars.to_a\n  s1 = s1.chars.to_a\n  s0.zip(s1).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars\
    \ == s1.chars\nend", "  s0 = s0.chars\n  s1 = s1.chars\n  return s0.size == s1.size\
    \ and s0.uniq.size == s1.uniq.size and\n    s0.uniq.sort == s1.uniq.sort\nend",
  "  return s0.chars == s1.chars && s0.size == s1.size\nend", "  s0, s1 = s0.downcase,\
    \ s1.downcase\n  return s0.chars == s1.chars\nend", "  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.to_s, s1.to_s\n  s0.chars.zip(s1.chars).all? { |a,b| a ==\
    \ b }\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\n\
    end", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n\
    \  s0.each_char.zip(s1.each_char).all? do |c0, c1|\n    c0 == c1\n  end\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  s0.chars.zip(s1.chars).all? { |a,b| a == b }\nend",
  "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char do |c|\n    return false if s1.include?(c)\n\
    \  end\n  true\nend", "  return s0.chars == s1.chars\nend", "  s0 = s0.to_s\n\
    \  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all? do |c0, c1|\n    c0 ==\
    \ c1\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  return s0.chars == s1.chars\nend", "  s0 = s0.to_s\n\
    \  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all? { |c0, c1| c0 == c1 }\n\
    end", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", " \
    \ s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1\
    \ = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  return s0.chars == s1.chars\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n\
    \  return s0.chars == s1.chars\nend", "  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length ==\
    \ s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n \
    \ end\nend", "  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a, b|\n    a.chars\
    \ == b.chars\n  end\nend", "  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_a,\
    \ s1.to_a\n  return s0.size == s1.size && s0.zip(s1).all? { |a,b| a == b }\nend",
  "  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars\
    \ == s1.chars\nend", "  return s0.chars == s1.chars and s0.chars == s0.chars\n\
    end", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times do |i|\n    return false\
    \ if s0[i] != s1[i]\n  end\n  true\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size\
    \ == s1.size && s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return\
    \ s0.length == s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n    a == b\n\
    \  end\nend", "  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0\
    \ = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all? do |a,b|\n\
    \    a == b\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.size,\
    \ s1.size\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1\
    \ = s0.succ, s1.succ\n  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n\
    \  s0, s1 = s0.pred, s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.pred,\
    \ s1.pred\n  s0, s1 = s0.succ, s1.succ\n  s0, s1 = s0.", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1\
    \ = s0.join, s1.join\n  s0, s1 = s0.size, s1.size\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first,\
    \ s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0,\
    \ s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first,\
    \ s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0,\
    \ s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first,\
    \ s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0,\
    \ s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first,\
    \ s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0,\
    \ s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first,\
    \ s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0,\
    \ s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n\
    \  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = ", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a, b|\n    a == b\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.to_a, s1.to_a\n  return\
    \ s0.size == s1.size && s0.all? { |c| c==s1.first }\nend", "  return s0.chars\
    \ == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend",
  "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1\
    \ = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.chars == b.chars\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.length == s1.length and s0.chars.zip(s1.chars).all? do |a,b|\n  \
    \  a.char == b.char\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars,\
    \ s1.chars\n  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1\
    \ = s0.length, s1.length\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first(s0),\
    \ s1.first(s1)\n  s0, s1 = s0.last(s0), s1.last(s1)\n  s0, s1 = s0.first(s0, s1),\
    \ s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1 = s0.first(s0,\
    \ s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1\
    \ = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1,\
    \ s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1),\
    \ s1.last(s1, s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0,\
    \ s1), s1.last(s1, s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1\
    \ = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1,\
    \ s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1 = s0.first(s0, s1),\
    \ s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1 = s0.first(s0,\
    \ s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1, s0)\n  s0, s1\
    \ = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1), s1.last(s1,\
    \ s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1, s0)\n  s0, s1 = s0.last(s0, s1),\
    \ s1.last(s1, s0)\n  s0, s1 = s0.first(s0, s1), s1.first(s1, s0)\n  s0, ", " \
    \ s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  s0 = s0.to_s\n  s1\
    \ = s1.to_s\n  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a,b|\n    a ==\
    \ b\n  end\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  return s0.chars == s1.chars\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a.char == b.char\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a,b|\n    a.char\
    \ == b.char\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\
    \ && s0.chars.length == s1.chars.length\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a,b|\n    a.char\
    \ == b.char\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.size\
    \ == s1.size && s0.chars.zip(s1.chars).all? do |c, c|\n    c == c\n  end\nend",
  "  s0, s1 = s0.to_a, s1.to_a\n  return s0.zip(s1).all? { |a,b| a == b }\nend", " \
    \ s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n  s0, s1 = s0.sort,\
    \ s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1\
    \ = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n\
    \  s0, s1 = s0.to_n, s1.to_n\n  s0, s1 = s0.to_p, s1.to_p\n  s0, s1 = s0.to_r,\
    \ s1.to_r\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_sym, s1.to_sym\n  s0,\
    \ s1 = s0.to_u, s1.to_u\n  s0, s1 = s0.to_x, s1.to_x\n  s0, s1 = s0.to_z, s1.to_z\n\
    \  s0, s1 = s0.to_xs, s1.to_xs\n  s0, s1 = s0.to_ys, s1.to_ys\n  s0, s1 = s0.to_zs,\
    \ s1.to_zs\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n  s0, s1 = s0.to_n, s1.to_n\n\
    \  s0, s1 = s0.to_p, s1.to_p\n  s0, s1 = s0.to_r, s1.to_r\n  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.to_sym, s1.to_sym\n  s0, s1 = s0.to_u, s1.to_u\n  s0,\
    \ s1 = s0.to_x, s1.to_x\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_xs, s1.to_xs\n\
    \  s0, s1 = s0.to_ys, s1.to_ys\n  s0, s1 = s0.to_zs, s1.to_zs\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_l, s1.to_l\n  s0, s1 = s0.to_n, s1.to_n\n  s0, s1 = s0.to_p, s1.to_p\n\
    \  s0, s1 = s0.to_r, s1.to_r\n  s0, s1 = s0.to_s, s1.to_s\n", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  return s0.chars == s1.chars\nend", "  return s0.size == s1.size &&\
    \ s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars,\
    \ s1.chars\n  return s0.zip(s1).all? { |a,b| a == b }\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  s0, s1 = s0.chars.sort, s1.chars.sort\n  s0, s1 = s0.join, s1.join\n\
    \  s0, s1 = s0.size, s1.size\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n\
    \  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n\
    \  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n\
    \  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n\
    \  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1\
    \ = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n\
    \  s0, s1 = s0.last, s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last,\
    \ s1.last\n  s0, s1 = s0.first, s1.first\n  s0, s1 = s0.last, s1.last\n", "  return\
    \ s0.chars == s1.chars\nend", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars\
    \ == s1.chars\nend", "  return s0.chars == s1.chars\nend", "  s0, s1 = s0.to_s,\
    \ s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all? { |a,b|\
    \ a == b }\nend", "  s0, s1 = s0.to_a, s1.to_a\n  return s0.zip(s1).all? { |a,b|\
    \ a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars.sort, s1.chars.sort\n  s0, s1\
    \ = s0.join, s1.join\n  s0, s1 = s0.length, s1.length\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l,\
    \ s1.to_l\n  s0, s1 = s0.to_r, s1.to_r\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_o, s1.to_o\n\
    \  s0, s1 = s0.to_x, s1.to_x\n  s0, s1 = s0.to_b, s1.to_b\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1\
    \ = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n  s0, s1 = s0.to_r, s1.to_r\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d,\
    \ s1.to_d\n  s0, s1 = s0.to_o, s1.to_o\n  s0, s1 = s0.to_x, s1.to_x\n  s0, s1\
    \ = s0.to_b, s1.to_b\n  s0, s1 = s0.to_z, s1.to_z\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l,\
    \ s1.to_l\n  s0, s1 = s0.to_r, s1.to_r\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_o, s1.to_o\n\
    \  s0, s1 = s0.to_x, s1.to_x\n  s0, s1 = s0.to_b, s1.to_b\n  s0, s1 = s0.to_z,\
    \ s1.to_z\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1\
    \ = s0.to_i, ", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return\
    \ s0.chars == s1.chars\nend", "  s0, s1 = s0.to_a, s1.to_a\n  s0.length.times\
    \ do |i|\n    if s0[i] != s1[i]\n      return false\n    end\n  end\n  true\n\
    end", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char do |c|\n    return false\
    \ unless s1.include?(c)\n  end\n  true\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n\
    \  return s0.size == s1.size && s0.chars == s1.chars\nend", "  s0, s1 = s0.to_a,\
    \ s1.to_a\n  return s0.size == s1.size && s0.zip(s1).all? { |a,b| a == b }\nend",
  "  return s0.chars == s1.chars and s0.size == s1.size\nend", "  s0 = s0.downcase\n\
    \  s1 = s1.downcase\n  return s0.chars == s1.chars\nend", "  return s0.chars ==\
    \ s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.chars, s1.chars\n\
    \  s0, s1 = s0.sort, s1.sort\n  s0, s1 = s0.join, s1.join\n  s0, s1 = s0.to_a,\
    \ s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1\
    \ = s0.to_l, s1.to_l\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n\
    \  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h,\
    \ s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n  s0, s1\
    \ = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n\
    \  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i,\
    \ s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1\
    \ = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l,\
    \ s1.to_l\n  s0, s1 = s0.to_f, s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1\
    \ = s0.to_s, s1.to_s\n  s0, s1 = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n\
    \  s0, s1 = s0.to_i, s1.to_i\n  s0, s1 = s0.to_l, s1.to_l\n  s0, s1 = s0.to_f,\
    \ s1.to_f\n  s0, s1 = s0.to_d, s1.to_d\n  s0, s1 = s0.to_s, s1.to_s\n  s0, s1\
    \ = s0.to_a, s1.to_a\n  s0, s1 = s0.to_h, s1.to_h\n  s0, s1 = s0.to_i, s1.to_i\n\
    \  s0, s1 = s0.to_l, s1.to_", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.chars\
    \ == s1.chars\nend", "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars\
    \ == s1.chars\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? do |a,b|\n    a == b\n  end\nend", "  return\
    \ s0.chars == s1.chars && s0.size == s1.size\nend", "  s0, s1 = s0.to_a, s1.to_a\n\
    \  s0.length.times do |i|\n    return false if s0[i] != s1[i]\n  end\n  true\n\
    end", "  s0, s1 = s0.downcase, s1.downcase\n  return s0.chars == s1.chars\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length and s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0, s1 = s0.to_a, s1.to_a\n  return s0.size\
    \ == s1.size && s0.all? { |c| c==s1.first }\nend", "  s0, s1 = s0.to_s, s1.to_s\n\
    \  return s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a, b|\n    a.char\
    \ == b.char\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size\
    \ && s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend",
  "  s0, s1 = s0.to_s, s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a,b|\n    a == b\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  s0.chars.zip(s1.chars).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  return s0.chars == s1.chars && s0.chars.length\
    \ == s1.chars.length\nend", "  return s0.chars == s1.chars and s0.chars == s0.chars\n\
    end", "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ do |a, b|\n    a.char == b.char\n  end\nend", "  s0, s1 = s0.downcase, s1.downcase\n\
    \  return s0.length == s1.length and s0.chars.zip(s1.chars).all? do |c, c|\n \
    \   c != c\n  end\nend", "  s0 = s0.downcase\n  s1 = s1.downcase\n  return s0.chars\
    \ == s1.chars\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ { |a,b| a == b }\nend", "  s0 = s0.to_s\n  s1 = s1.to_s\n  s0.each_char.zip(s1.each_char).all?\
    \ do |c0, c1|\n    c0 == c1\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return\
    \ s0.size == s1.size && s0.chars.zip(s1.chars).all? do |a, b|\n    a.chars ==\
    \ b.chars\n  end\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.length == s1.length\
    \ and s0.chars.zip(s1.chars).all? do |a,b|\n    a.char == b.char\n  end\nend",
  "  s0 = s0.to_s\n  s1 = s1.to_s\n  return s0.size == s1.size && s0.chars.zip(s1.chars).all?\
    \ { |a,b| a == b }\nend", "  s0, s1 = s0.to_s, s1.to_s\n  return s0.chars == s1.chars\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
