name: HumanEval_12_longest
language: rb
prompt: "# Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return nil in case the input array\
  \ is empty.\n# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\", \"\
  c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef longest(strings)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n\
  \    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n \
  \   assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"\
  zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n\
  \  end\nend\n"
completions: ["  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.max_by { |s| s.length }\n\
    end", "  strings.sort.last\nend", "  strings.max_by { |s| s.length }\nend", " \
    \ strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  return nil if\
    \ strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by { |s|\
    \ s.length }\nend", "  strings.reduce(:max) do |max, string|\n    max || string.length\n\
    \  end\nend", "  strings.sort.last\nend", "  return nil if strings.empty?\n  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.max_by { |s|\
    \ s.length }\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.max_by { |s| s.length }\nend", " \
    \ strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by(&:length).first\n\
    end", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend",
  "  strings.max_by { |s| s.length }\nend", "  strings.max_by { |s| s.length }\nend",
  "  return nil if strings.empty?\n  longest_length = strings[0].length\n  strings.each\
    \ do |string|\n    longest_length = longest_length > string.length ? longest_length\
    \ : string.length\n  end\n  longest_length\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  return nil if strings.empty?\n  longest_length =\
    \ strings[0].length\n  strings.each do |string|\n    longest_length = longest_length\
    \ > string.length ? longest_length : string.length\n  end\n  longest_length\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.sort.last\nend", "  strings.max_by { |s| s.length }\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.sort.last\nend", "  strings.reduce(:max) do |max, string|\n\
    \    max < string.length ? max : string.length\n  end\nend", "  return nil if\
    \ strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  longest = strings.max_by(&:length)\n\
    \  longest && longest[0]\nend", "  strings.sort.last\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\n\
    end", "  strings.reduce(&:length).max || nil\nend", "  return nil if strings.empty?\n\
    \  strings.max_by { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  longest = strings.max_by { |s| s.length\
    \ }\n  longest == strings.first ? nil : longest\nend", "  strings.sort.last\n\
    end", "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.reduce(:max) do |max, string|\n    max.length <=> string.length\
    \ rescue nil\n  end\nend", "  strings.max_by { |s| s.length }\nend", "  return\
    \ nil if strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.reduce(&:length).max || nil\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(:max) do |max, string|\n\
    \    max ? max.length < string.length ? max : string : nil\n  end\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  return nil if strings.empty?\n  strings.max_by(&:length).first\n\
    end", "  strings.max_by(&:length)\nend", "  strings.reduce(&:length).max || nil\n\
    end", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend",
  "  strings.max_by { |s| s.length }\nend", "  strings.max_by { |s| s.length }\nend",
  "  strings.reduce(:max) do |max, string|\n    max < string.length ? max : string.length\n\
    \  end\nend", "  strings.max_by { |s| s.length }\nend", "  strings.max_by { |s|\
    \ s.length }\nend", "  strings.sort.last\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  return nil if strings.empty?\n  strings.max_by { |s| s.length\
    \ }\nend", "  return nil if strings.empty?\n  longest_length = strings[0].length\n\
    \  strings.each do |string|\n    longest_length = longest_length if string.length\
    \ > longest_length\n  end\n  longest_length\nend", "  strings.sort.last\nend",
  "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.max_by { |s| s.length }\nend", "  strings.sort.last\nend", " \
    \ strings.sort.last\nend", "  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.reduce(:max) do |max, string|\n \
    \   max && string.length <= max ? string : nil\n  end\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.reduce(:max)\
    \ do |max, string|\n    max || string.length\n  end\nend", "  strings.max_by {\
    \ |s| s.length }\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.max_by(&:length)\nend", "  strings.sort.last\nend",
  "  strings.sort.last\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  return nil if strings.empty?\n  strings.max_by { |s| s.length\
    \ }\nend", "  strings.reduce(:max) do |max, string|\n    max.length < string.length\
    \ ? max : string\n  end\nend", "  strings.sort.last\nend", "  strings.max_by {\
    \ |s| s.length }\nend", "  strings.reduce(:max) do |max, string|\n    max.nil?\
    \ || string.length >= max ? string.length : max\n  end\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\n\
    end", "  strings.max_by { |s| s.length }\nend", "  return nil if strings.empty?\n\
    \  strings.max_by { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  return nil if strings.empty?\n  strings.max_by {\
    \ |s| s.length }\nend", "  strings.sort.last\nend", "  strings.max_by { |s| s.length\
    \ }\nend", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.reduce(:max) do |max, string|\n    max.length < string.length\
    \ ? max : string\n  end\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.max_by { |s| s.length }\nend", "  strings.max_by { |s| s.length\
    \ }\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  return nil if strings.empty?\n  strings.max_by { |s| s.length\
    \ }\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.reduce(&:length).max || nil\nend", "  return nil if\
    \ strings.empty?\n  longest = strings.max_by(&:length)\n  longest && longest[0]\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend", "  return nil if\
    \ strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.reduce(&:length).max || nil\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by { |s|\
    \ s.length }\nend", "  strings.max_by { |s| s.length }\nend", "  strings.reduce(:max)\
    \ do |max, string|\n    max.length < string.length ? max : string\n  end\nend",
  "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend", "  strings.sort.last\n\
    end", "  strings.max_by { |s| s.length }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
