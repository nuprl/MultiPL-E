name: HumanEval_12_longest
language: rb
prompt: "# Out of array of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return nil in case the input array\
  \ is empty.\n# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\", \"\
  c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef longest(strings)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_longest\n\
  \    candidate = method(:longest)\n    assert_equal(nil, candidate.call([]))\n \
  \   assert_equal(\"x\", candidate.call([\"x\", \"y\", \"z\"]))\n    assert_equal(\"\
  zzzz\", candidate.call([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]))\n\
  \  end\nend\n"
completions: ["  strings.reduce(&:length).max || nil\nend", "  strings.reduce(&:length).max\
    \ || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\nend", "  strings.max_by\
    \ { |s| s.length }\nend", "  strings.sort.last\nend", "  strings.sort.last\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.max_by { |s| s.length }\n\
    end", "  strings.sort.last\nend", "  strings.max_by { |s| s.length }\nend", " \
    \ strings.sort.last\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  return nil if strings.empty?\n  strings.max_by { |s| s.length }\nend",
  "  strings.reduce(&:length).max || nil\nend", "  strings.sort.last\nend", "  strings.sort.last\n\
    end", "  strings.sort.last\nend", "  strings.sort.last\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
