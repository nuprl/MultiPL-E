name: HumanEval_125_split_words
language: rb
prompt: "# Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\n# should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words.call(\"\
  Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"Hello,world!\"\
  )\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"abcdef\")\n# 3\ndef split_words(txt)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_split_words\n\
  \    candidate = method(:split_words)\n    assert_equal([\"Hello\", \"world!\"],\
  \ candidate.call(\"Hello world!\"))\n    assert_equal([\"Hello\", \"world!\"], candidate.call(\"\
  Hello,world!\"))\n    assert_equal([\"Hello\", \"world,!\"], candidate.call(\"Hello\
  \ world,!\"))\n    assert_equal([\"Hello,Hello,world\", \"!\"], candidate.call(\"\
  Hello,Hello,world !\"))\n    assert_equal(3, candidate.call(\"abcdef\"))\n    assert_equal(2,\
  \ candidate.call(\"aaabb\"))\n    assert_equal(1, candidate.call(\"aaaBb\"))\n \
  \   assert_equal(0, candidate.call(\"\"))\n  end\nend\n"
completions: ["  txt.split(\" \").map { |word| word.split(\",\").map { |word| word.downcase\
    \ } }.reduce(:+)\nend", "  words = txt.split(\" \").map { |word| word.split(\"\
    ,\").map { |word| word.downcase } }\n  words.flatten.compact\nend", "  txt.split(\"\
    \ \").map do |word|\n    word.split(\",\").map do |word|\n      word.strip\n \
    \   end\n  end\nend", "  words = txt.split(\" \").map(&:downcase)\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { |word| word.include?(\",\") }\n\
    \  words.delete_if { |word| word.include?(\",\") }\n  words.delete_if { |word|\
    \ word.include?(\",\") }\n  words.delete_if { ", "  txt.split(\" \").each do |word|\n\
    \    word.split(\",\").each do |word|\n      word.downcase!\n    end\n  end\n\
    \  txt.split(\" \").count { |word| word.split(\",\").count { |word| word.downcase!\
    \ } }\nend", "  words = txt.split(\" \").map(&:downcase)\n  words.delete_if {\
    \ |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word.empty? }\n  words.delete_if { |word| word.empty? }\n  words.delete_if ",
  "  words = txt.split(\" \") # Split on whitespace\n  words.delete_if { |word| word.empty?\
    \ } # Remove empty words\n  words.delete_if { |word| word.include?(\",\") } #\
    \ Remove commas if they exist\n  words.delete_if { |word| word.include?(\",\"\
    ) } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist", "  txt.split(\" \").each do |word|\n  \
    \  word.split(\",\").each do |word|\n      word.split(\"-\").each do |word|\n\
    \        word.split(\"/\").each do |word|\n          word.split(\"\\\\\").each\
    \ do |word|\n            word.split(\"'\").each do |word|\n              word.split(\"\
    -\").each do |word|\n                word.split(\"/\").each do |word|\n      \
    \            word.split(\"\\\\\").each do |word|\n                    word.split(\"\
    '\").each do |word|\n                      word.split(\"-\").each do |word|\n\
    \                        word.split(\"/\").each do |word|\n                  \
    \        word.split(\"\\\\\").each do |word|\n                            word.split(\"\
    '\").each do |word|\n                              word.split(\"-\").each do |word|\n\
    \                                word.split(\"/\").each do |word|\n          \
    \                        word.split(\"\\\\\").each do |word|\n               \
    \                     word.split(\"'\").each do |word|\n                     \
    \                 word.split(\"-\").each do |word|\n                         \
    \               word.split(\"/\").each do |word|\n                           \
    \               word.split(\"\\\\\").each do |word|\n                        \
    \                    word.split(\"'\").each do |word|\n                      \
    \                        word.split(\"-\").each do |word|\n                  \
    \                              word.split(\"/\").each do |word|\n            \
    \                                      word.split(\"\\\\\").each do |word|\n \
    \                                                   word.split(\"'\").each do\
    \ |word|\n                                                      word.split(\"\
    -\").each do |word|\n                                                        word.split(\"\
    /\").each do |word|\n                                                        \
    \  word.split(\"\\\\\").each do |word|\n                                     \
    \                       word.split(\"'\").each do |word|\n                   \
    \                                           word.split(\"-\").each do |word|\n\
    \                                                                word.split(\"\
    /\").each do |word|\n                                                        \
    \          word.split(\"\\\\\").each do |word|\n                             \
    \                                       word.split(\"'\").each do |word|\n   \
    \                                                                   word.split(\"\
    -\").each do |word|\n                                                        \
    \                word.split(\"/\").each do |word|\n                          \
    \                                                word.split(\"\\\\\").each do\
    \ |word|\n                                                                   \
    \         word.split(\"'\").each do |word|\n                                 \
    \                                             word.split(\"-\").each do |word|\n\
    \                                                                            \
    \    word.split(\"/\").each do |word|\n                                      \
    \                                            word.split(\"\\\\\").each do |word|\n\
    \                                                                            \
    \        word.split(\"'\").each do |word|\n                                  \
    \                                                    word.split(\"-\").each do\
    \ |word|\n                                                                   \
    \                     word.split(\"/\").each do |word|\n                     \
    \                                                                     word.split(\"\
    \\\\\").each do |word|\n                                                     \
    \                                       word.split(\"'\").each do |word|\n   \
    \                                                                            \
    \               word.split(\"-\").each do |word|\n                           \
    \                                                                     word.split(\"\
    /\").each do |word|\n                                                        \
    \                                          word.split(\"\\\\\").each do |word|\n\
    \                                                                            \
    \                        word.split(\"'\").", "  txt.split(\" \").each do |word|\n\
    \    word.split(\",\").each do |word|\n      word.split(\"-\").each do |word|\n\
    \        word.split(\"/\").each do |word|\n          word.split(\"\\\\\").each\
    \ do |word|\n            word.split(\"'\").each do |word|\n              word.split(\"\
    -\").each do |word|\n                word.split(\"/\").each do |word|\n      \
    \            word.split(\"\\\\\").each do |word|\n                    word.split(\"\
    '\").each do |word|\n                      word.split(\"-\").each do |word|\n\
    \                        word.split(\"/\").each do |word|\n                  \
    \        word.split(\"\\\\\").each do |word|\n                            word.split(\"\
    '\").each do |word|\n                              word.split(\"-\").each do |word|\n\
    \                                word.split(\"/\").each do |word|\n          \
    \                        word.split(\"\\\\\").each do |word|\n               \
    \                     word.split(\"'\").each do |word|\n                     \
    \                 word.split(\"-\").each do |word|\n                         \
    \               word.split(\"/\").each do |word|\n                           \
    \               word.split(\"\\\\\").each do |word|\n                        \
    \                    word.split(\"'\").each do |word|\n                      \
    \                        word.split(\"-\").each do |word|\n                  \
    \                              word.split(\"/\").each do |word|\n            \
    \                                      word.split(\"\\\\\").each do |word|\n \
    \                                                   word.split(\"'\").each do\
    \ |word|\n                                                      word.split(\"\
    -\").each do |word|\n                                                        word.split(\"\
    /\").each do |word|\n                                                        \
    \  word.split(\"\\\\\").each do |word|\n                                     \
    \                       word.split(\"'\").each do |word|\n                   \
    \                                           word.split(\"-\").each do |word|\n\
    \                                                                word.split(\"\
    /\").each do |word|\n                                                        \
    \          word.split(\"\\\\\").each do |word|\n                             \
    \                                       word.split(\"'\").each do |word|\n   \
    \                                                                   word.split(\"\
    -\").each do |word|\n                                                        \
    \                word.split(\"/\").each do |word|\n                          \
    \                                                word.split(\"\\\\\").each do\
    \ |word|\n                                                                   \
    \         word.split(\"'\").each do |word|\n                                 \
    \                                             word.split(\"-\").each do |word|\n\
    \                                                                            \
    \    word.split(\"/\").each do |word|\n                                      \
    \                                            word.split(\"\\\\\").each do |word|\n\
    \                                                                            \
    \        word.split(\"'\").each do |word|\n                                  \
    \                                                    word.split(\"-\").each do\
    \ |word|\n                                                                   \
    \                     word.split(\"/\").each do |word|\n                     \
    \                                                                     word.split(\"\
    \\\\\").each do |word|\n                                                     \
    \                                       word.split(\"'\").each do |word|\n   \
    \                                                                            \
    \               word.split(\"-\").each do |word|\n                           \
    \                                                                     word.split(\"\
    /\").each do |word|\n                                                        \
    \                                          word.split(\"\\\\\").each do |word|\n\
    \                                                                            \
    \                        word.split(\"'\").", "  txt.split(\" \").map { |word|\
    \ word.split(\",\").map { |word| word.downcase.split(\"\").count { |char| char.ord\
    \ % 2 != 0 } } }.max\nend", "  txt.split(\" \").map(&:strip).reject(&:empty?).map(&:downcase).uniq.count\n\
    end", "  txt.split(\" \").each do |word|\n    word.split(\",\").each do |word|\n\
    \      word.split(\"-\").each do |word|\n        word.split(\".\").each do |word|\n\
    \          word.split(\"!\").each do |word|\n            word.split(\"?\").each\
    \ do |word|\n              word.split(\":\").each do |word|\n                word.split(\"\
    ;\").each do |word|\n                  word.split(\":\").each do |word|\n    \
    \                word.split(\"-\").each do |word|\n                      word.split(\"\
    .\").each do |word|\n                        word.split(\"!\").each do |word|\n\
    \                          word.split(\"?\").each do |word|\n                \
    \            word.split(\":\").each do |word|\n                              word.split(\"\
    ;\").each do |word|\n                                word.split(\":\").each do\
    \ |word|\n                                  word.split(\"-\").each do |word|\n\
    \                                    word.split(\".\").each do |word|\n      \
    \                                word.split(\"!\").each do |word|\n          \
    \                              word.split(\"?\").each do |word|\n            \
    \                              word.split(\":\").each do |word|\n            \
    \                                word.split(\";\").each do |word|\n          \
    \                                    word.split(\":\").each do |word|\n      \
    \                                          word.split(\"-\").each do |word|\n\
    \                                                  word.split(\".\").each do |word|\n\
    \                                                    word.split(\"!\").each do\
    \ |word|\n                                                      word.split(\"\
    ?\").each do |word|\n                                                        word.split(\"\
    :\").each do |word|\n                                                        \
    \  word.split(\";\").each do |word|\n                                        \
    \                    word.split(\":\").each do |word|\n                      \
    \                                        word.split(\"-\").each do |word|\n  \
    \                                                              word.split(\".\"\
    ).each do |word|\n                                                           \
    \       word.split(\"!\").each do |word|\n                                   \
    \                                 word.split(\"?\").each do |word|\n         \
    \                                                           word.split(\":\").each\
    \ do |word|\n                                                                \
    \    word.split(\";\").each do |word|\n                                      \
    \                              word.split(\":\").each do |word|\n            \
    \                                                        word.split(\"-\").each\
    \ do |word|\n                                                                \
    \    word.split(\".\").each do |word|\n                                      \
    \                              word.split(\"!\").each do |word|\n            \
    \                                                        word.split(\"?\").each\
    \ do |word|\n                                                                \
    \    word.split(\":\").each do |word|\n                                      \
    \                              word.split(\";\").each do |word|\n            \
    \                                                        word.split(\":\").each\
    \ do |word|\n                                                                \
    \    word.split(\"-\").each do |word|\n                                      \
    \                              word.split(\".\").each do |word|\n            \
    \                                                        word.split(\"!\").each\
    \ do |word|\n                                                                \
    \    word.split(\"?\").each do |word|\n                                      \
    \                              word.split(\":\").each do |word|\n            \
    \                                                        word.split(\";\").",
  "  txt.split(\" \").map { |word| word.split(\",\").map { |word| word.downcase }\
    \ }.reduce(:+)\nend", "  txt.split(\" \").map do |word|\n    word.split(\",\"\
    ).map do |char|\n      char.downcase.count(\"a\") % 2 == 1 ? char.downcase : char.upcase\n\
    \    end.join\n  end\nend", "  txt.split(\" \").each do |word|\n    word.split(\"\
    ,\").each do |word|\n      word.downcase!\n    end\n  end\n  txt.split(\" \").count(\"\
    [a-z]\").odd?\nend", "  words = txt.split(\" \").map { |word| word.split(\",\"\
    ).map { |w| w.downcase } }\n  words.flatten.compact.uniq.map { |w| w.length %\
    \ 2 == 0 ? w : w.reverse.chars.to_a }.uniq.count\nend", "  words = txt.split(\"\
    \ \").map(&:downcase)\n  words.delete_if { |word| word.empty? }\n  words.delete_if\
    \ { |word| word =~ /[^a-z]/i }\n  words.delete_if { |word| word =~ /[^A-Z]/i }\n\
    \  words.delete_if { |word| word =~ /[^0-9]/i }\n  words.delete_if { |word| word\
    \ =~ /[^a-zA-Z0-9]/i }\n  words.delete_if { |word| word =~ /[^a-zA-Z]/i }\n  words.delete_if\
    \ { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n \
    \ words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word\
    \ =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if\
    \ { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n \
    \ words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word\
    \ =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if\
    \ { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n \
    \ words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word\
    \ =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if\
    \ { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n \
    \ words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word\
    \ =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i }\n  words.delete_if\
    \ { |word| word =~ /[^,]/i }\n  words.delete_if { |word| word =~ /[^,]/i ", " \
    \ txt.split(\" \").map { |word| word.split(\",\").map { |word| word.downcase }\
    \ }.reduce(:+)\nend", "  words = txt.split(\" \") # Split on whitespace\n  words.delete_if\
    \ { |word| word.empty? } # Remove empty words\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist\n  words.delete_if { |word| word.include?(\"\
    ,\") } # Remove commas if they exist", "  words = txt.split(\" \") # Split on\
    \ whitespace\n  words.delete_if { |word| word.empty? } # Remove empty words\n\
    \  words.delete_if { |word| word =~ /[^a-z]/i } # Remove words with non-alphabetic\
    \ characters\n  words.delete_if { |word| word =~ /[^A-Z]/i } # Remove words with\
    \ non-alphabetic characters\n  words.delete_if { |word| word =~ /[^0-9]/i } #\
    \ Remove words with non-alphabetic characters\n  words.delete_if { |word| word\
    \ =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n  words.delete_if\
    \ { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n\
    \  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic\
    \ characters\n  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words\
    \ with non-alphabetic characters\n  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i\
    \ } # Remove words with non-alphabetic characters\n  words.delete_if { |word|\
    \ word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n  words.delete_if\
    \ { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n\
    \  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic\
    \ characters\n  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words\
    \ with non-alphabetic characters\n  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i\
    \ } # Remove words with non-alphabetic characters\n  words.delete_if { |word|\
    \ word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n  words.delete_if\
    \ { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic characters\n\
    \  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words with non-alphabetic\
    \ characters\n  words.delete_if { |word| word =~ /[^A-Za-z0-9]/i } # Remove words\
    \ with non-alphabetic characters\n  words.delete_if { |word| word ="]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
