name: HumanEval_14_all_prefixes
language: rb
prompt: "# Return array of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_all_prefixes\n\
  \    candidate = method(:all_prefixes)\n    assert_equal([], candidate.call(\"\"\
  ))\n    assert_equal([\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"],\
  \ candidate.call(\"asdfgh\"))\n    assert_equal([\"W\", \"WW\", \"WWW\"], candidate.call(\"\
  WWW\"))\n  end\nend\n"
completions: ["  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes\
    \ << char if prefixes.empty? || char.start_with?(prefixes.last)\n    prefixes\
    \ << char if prefixes.empty? || char.end_with?(prefixes.last)\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |c|\n    prefixes << c unless\
    \ prefixes.include?(c)\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if char.start_with?(prefixes.last)\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes\
    \ = []\n  prefix = \"\"\n  string.split(\"\").each do |char|\n    if char == prefix\n\
    \      prefixes << prefix\n      prefix = \"\"\n    else\n      prefix << char\n\
    \    end\n  end\n  prefixes << prefix\n  prefixes\nend", "  prefixes = []\n  string.each_char\
    \ do |char|\n    prefixes << char if char.match?(/[a-z]/)\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if prefixes.empty? || char.start_with?(prefixes.last)\n    prefixes << char\
    \ if prefixes.empty? || char.end_with?(prefixes.last)\n  end\n  prefixes\nend",
  "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || prefixes[-1] !=\
    \ char\n  end\n  prefixes\nend", "  prefixes = []\n  i = 0\n  while i < string.length\n\
    \    prefix = string[i..-1]\n    prefixes << prefix\n    i += 1\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.split(\"\").each do |char|\n    prefixes << char\
    \ if char.start_with?(prefixes.last)\n  end\n  prefixes\nend", "  prefixes = []\n\
    \  string.split(\"\").each do |char|\n    prefixes << char if prefixes.empty?\
    \ || prefixes[-1] != char\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if char != \"\"\n  end\n  prefixes\nend", "  prefixes =\
    \ []\n  string.split(\"\").each do |letter|\n    prefixes << letter if prefixes.empty?\
    \ || prefixes[-1] != letter\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |c|\n    prefixes << c if prefixes.empty? || prefixes[-1] != c\n \
    \ end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\").each do |char|\n\
    \    prefixes << char if prefixes.empty? || char != prefixes.last\n  end\n  prefixes\n\
    end", "  prefixes = []\n  string.each_char.with_index do |char, index|\n    prefixes\
    \ << char if index == 0\n  end\n  prefixes\nend", "  prefixes = []\n  string.split(\"\
    \").each do |char|\n    prefixes << char if prefixes.empty? || char != prefixes.last\n\
    \  end\n  prefixes\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
