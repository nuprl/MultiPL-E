name: HumanEval_157_right_angle_triangle
language: rb
prompt: "# Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1,\
  \ 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_right_angle_triangle\n\
  \    candidate = method(:right_angle_triangle)\n    assert_equal(true, candidate.call(3,\
  \ 4, 5))\n    assert_equal(false, candidate.call(1, 2, 3))\n    assert_equal(true,\
  \ candidate.call(10, 6, 8))\n    assert_equal(false, candidate.call(2, 2, 2))\n\
  \    assert_equal(true, candidate.call(7, 24, 25))\n    assert_equal(false, candidate.call(10,\
  \ 5, 7))\n    assert_equal(true, candidate.call(5, 12, 13))\n    assert_equal(true,\
  \ candidate.call(15, 8, 17))\n    assert_equal(true, candidate.call(48, 55, 73))\n\
  \    assert_equal(false, candidate.call(1, 1, 1))\n    assert_equal(false, candidate.call(2,\
  \ 2, 10))\n  end\nend\n"
completions: ["  return (b**2 + c**2 - a**2) <= 0\nend", "  a == b or a == c or b\
    \ == c\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n  if ab < ac\n    true\n\
    \  else\n    false\n  end\nend", "  ab = ab_sides(a, b, c)\n  ac = ac_sides(a,\
    \ b, c)\n  \n  ab_sides_sum = (ab[0] + ab[1] + ab[2]) / 3\n  ac_sides_sum = (ac[0]\
    \ + ac[1] + ac[2]) / 3\n  \n  ab_sides_sum == ac_sides_sum\nend", "  ab, bc, cd\
    \ = a, b, c\n  return ab == bc and ab == cd or ba == bc and ba == cd or ac ==\
    \ bc and ac == cd\nend", "  ab = ab_of_triangle(a, b, c)\n  ac = ac_of_triangle(a,\
    \ b, c)\n  ad = ad_of_triangle(a, b, c)\n  \n  ab_ac = ab_of_triangle(ac, ab,\
    \ a)\n  ab_ad = ab_of_triangle(ad, ab, a)\n  \n  ac_ab = ac_of_triangle(ab, ac,\
    \ a)\n  ac_ad = ac_of_triangle(ad, ac, a)\n  \n  ad_ab = ad_of_triangle(ab, ad,\
    \ a)\n  ad_ac = ad_of_triangle(ac, ad, a)\n  \n  ab_ac = ab_of_triangle(ac, ab,\
    \ a)\n  ab_ad = ab_of_triangle(ad, ab, a)\n  \n  ac_ab = ac_of_triangle(ab, ac,\
    \ a)\n  ac_ad = ac_of_triangle(ad, ac, a)\n  \n  ad_ab = ad_of_triangle(ab, ad,\
    \ a)\n  ad_ac = ad_of_triangle(ac, ad, a)\n  \n  ab_ac = ab_of_triangle(ac, ab,\
    \ a)\n  ab_ad = ab_of_triangle(ad, ab, a)\n  \n  ac_ab = ac_of_triangle(ab, ac,\
    \ a)\n  ac_ad = ac_of_triangle(ad, ac, a)\n  \n  ad_ab = ad_of_triangle(ab, ad,\
    \ a)\n  ad_ac = ad_of_triangle(ac, ad, a)\n  \n  ab_ac = ab_of_triangle(ac, ab,\
    \ a)\n  ab_ad = ab_of_triangle(ad, ab, a)\n  \n  ac_ab = ac_of_triangle(ab, ac,\
    \ a)\n  ac_ad = ac_of_triangle(ad, ac, a)\n  \n  ad_ab = ad_of_triangle(ab, ad,\
    \ a)\n  ad_ac = ad_of_triangle(ac, ad, a)\n  \n  ab_ac = ab_of_triangle(ac, ab,\
    \ a)\n  ab_ad = ab_of_triangle(ad, ab, a)\n  \n  ac_ab = ac_of_triangle(ab, ac,\
    \ a)\n  ac_ad = ac_of_triangle(ad, ac, a)\n  \n  ad_ab = ad_of_triangle(ab, ad,\
    \ a)\n  ad_ac = ad_of_triangle(ac, ad, a)\n  \n  ab_ac = ab_of_triangle(ac, ",
  "  ab = abs(b - a)\n  ac = abs(c - a)\n  \n  if(ab == ac)\n    return (b > a) or\
    \ (c > a)\n  \n  if(ab > ac)\n    return (b > a) or (c > a) or (b > c)\n  \n \
    \ return (b > a) or (c > a) or (b > c)\nend", "  triangle_side(a, b, c) == (a\
    \ > b and a > c) or (b > a and b > c)\nend", "  return (b ** 2 + c ** 2) ** 0.5\
    \ == (a ** 2 + b ** 2) ** 0.5\nend", "  triangle_sides = [a, b, c]\n  triangle_sides.sort!\n\
    \  \n  triangle_sides.each_with_index do |side, index|\n    if index == 0\n  \
    \    return true\n    elsif triangle_sides[index-1] != side\n      return false\n\
    \    end\n  end\n  \n  return true\nend", "  ab = abs(b - a)\n  ac = abs(c - a)\n\
    \  \n  if(ab == ac)\n    return (b >= a and c >= a) or (b <= a and c <= a)\n \
    \ \n  if(ab > ac)\n    return (b >= a and c >= a) or (b <= a and c <= a)\n  \n\
    \  return (b >= a and c >= a) or (b <= a and c >= a)\nend", "  a == b or a ==\
    \ c or b == c\nend", "  ab = ab_sum(a, b, c)\n  ac = ac_sum(a, b, c)\n  ad = ad_sum(a,\
    \ b, c)\n  \n  return ab == ac and ab == ad or ab == ad and ac == ad\nend", " \
    \ a == b or a == c or b == c or b == a or c == a\nend", "  ab, bc, cd = a, b,\
    \ c\n  ab, bc, cd = ab.to_f, bc.to_f, cd.to_f\n  ab, bc, cd = ab*ab, bc*bc, cd*cd\n\
    \  ab, bc, cd = ab**0.5 + bc**0.5 + cd**0.5, ab**0.5 + bc**0.5 - cd**0.5, ab**0.5\
    \ - bc**0.5\n  ab, bc, cd = ab.to_i, bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s,\
    \ bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f, bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i,\
    \ bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s, bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f,\
    \ bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i, bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s,\
    \ bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f, bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i,\
    \ bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s, bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f,\
    \ bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i, bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s,\
    \ bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f, bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i,\
    \ bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s, bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f,\
    \ bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i, bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s,\
    \ bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f, bc.to_f, cd.to_f\n  ab, bc, cd = ab.to_i,\
    \ bc.to_i, cd.to_i\n  ab, bc, cd = ab.to_s, bc.to_s, cd.to_s\n  ab, bc, cd = ab.to_f,\
    \ bc.to_f, cd.to_f", "  ab, bc, cd = a, b, c\n  abc = ab + bc + cd\n  abd = ab\
    \ - bc + cd\n  bcd = bc - b + cd\n  abdc = abd - bc + cd\n  abdab = abd - ab +\
    \ bc\n  abdabc = abdab - bc + cd\n  abdabcd = abdabc - ab + bc\n  abdabcde = abdabcd\
    \ - ab + bc + cd\n  abdabcdef = abdabcde - ab + bc + c\n  abdabcdefg = abdabcdef\
    \ - ab + bc + c + d\n  abdabcdefgh = abdabcdefg - ab + bc + c + d + e\n  abdabcdefghi\
    \ = abdabcdefgh - ab + bc + c + d + e + f\n  abdabcdefghij = abdabcdefghi - ab\
    \ + bc + c + d + e + f + g\n  abdabcdefghijk = abdabcdefghij - ab + bc + c + d\
    \ + e + f + g + h\n  abdabcdefghijkl = abdabcdefghijk - ab + bc + c + d + e +\
    \ f + g + h + i\n  abdabcdefghijkll = abdabcdefghijkll - ab + bc + c + d + e +\
    \ f + g + h + i + j\n  abdabcdefghijkllm = abdabcdefghijkllm - ab + bc + c + d\
    \ + e + f + g + h + i + j + k\n  abdabcdefghijkllmm = abdabcdefghijkllmm - ab\
    \ + bc + c + d + e + f + g + h + i + j + k + l\n  abdabcdefghijkllmmn = abdabcdefghijkllmn-\
    \ ab + bc + c + d + e + f + g + h + i + j + k + l + m\n  abdabcdefghijkllmmnn\
    \ = abdabcdefghijkllmnn - ab + bc + c + d + e + f + g + h + i + j + k + l + m\
    \ + n\n  abdabcdefghijkllmmnnn = abdabcdefghijkllmnnn - ab + bc + c + d + e +\
    \ f + g + h + i + j + k + ", "  return (b ** 2 + c ** 2) - (a ** 2) - (b ** 2)\
    \ - (c ** 2) < 0\nend", "  ab = abs a\n  ac = abs c\n  bc = abs b\n  \n  # Check\
    \ if ab is greater than ac\n  if ab > ac\n    # Check if ab is greater than bc\n\
    \    if ab > bc\n      # Check if ac is greater than bc\n      if ac > bc\n  \
    \      return true\n      end\n    end\n  end\n  \n  return false\nend", "  (a\
    \ * b * c).to_f == (a * b * c).to_f\nend", "  return (b**2 + c**2 - (a**2))**0.5\
    \ == 0 \nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
