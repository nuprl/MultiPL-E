name: HumanEval_55_fib
language: rb
prompt: "# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n\
  # 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fib\n\
  \    candidate = method(:fib)\n    assert_equal(55, candidate.call(10))\n    assert_equal(1,\
  \ candidate.call(1))\n    assert_equal(21, candidate.call(8))\n    assert_equal(89,\
  \ candidate.call(11))\n    assert_equal(144, candidate.call(12))\n  end\nend\n"
completions: ["  if n < 2\n    then n\n  else\n    fib(n-1) + fib(n-2)\n  end\nend",
  "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  if n < 0\n    raise ArgumentError,\
    \ \"n must be >= 0\"\n  memo = {}\n  memo[1] = 1\n  memo[2] = 2\n  while n > 0\n\
    \    memo[n] = memo[n-2] + memo[n-1]\n    n -= 1\n  end\n  memo\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-2)\
    \ + fib(n-1)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend", "  return n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return\
    \ n if n < 2 else fib(n-1) + fib(n-2)\nend", "  return n if n < 2 else fib(n-1)\
    \ + fib(n-2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
