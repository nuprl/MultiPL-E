name: HumanEval_30_get_positive
language: rb
prompt: "# Return only positive numbers in the array.\n# >>> get_positive.call([-1,\
  \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0,\
  \ 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_get_positive\n\
  \    candidate = method(:get_positive)\n    assert_equal([4, 5, 6], candidate.call([-1,\
  \ -2, 4, 5, 6]))\n    assert_equal([5, 3, 2, 3, 3, 9, 123, 1], candidate.call([5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]))\n    assert_equal([], candidate.call([-1,\
  \ -2]))\n    assert_equal([], candidate.call([]))\n  end\nend\n"
completions: ["  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.map!{|x| x > 0 ? x : nil}\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x >= 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ { |x| x >= 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.map! {|x| x > 0 ? x : nil}\n  l\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.map!(&:abs)\n  l.select { |x| x >= 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.map! {|x| x > 0 ? x : nil}\n  l\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x >= 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.map! {|x| x > 0 ? x\
    \ : nil}\n  l\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.map!{|x| x > 0 ? x : nil}\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.map!(&:abs)\n\
    \  l.select { |x| x >= 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.map!{|x|\
    \ x > 0 ? x : nil}\n  l\nend", "  l.map!(&:abs)\n  l.select { |x| x > 0 }\nend\n\
    </code>\n<|/ a tags=ruby,arrays |>\n<| c |>\n`l.select { |x| x > 0 }` can be written\
    \ as `l.select { |x| x > 0 }`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ I've edited the answer.\n<|/ c |>\n<| c |>\n`l.select { |x| x > 0 }` can be\
    \ written as `l.select { |x| x > 0 }`. `l.select { |x| x > 0 }` is more efficient\
    \ than `l.select { |x| x > 0 }`.\n<|/ c |>\n<| c |>\n`l.select { |x| x > 0 }`\
    \ is more efficient than `l.select { |x| x > 0 }`. `l.select { |x| x > 0 }` is\
    \ more efficient than `l.select { |x| x > 0 }`.\n<|/ c |>\n<| c |>\n`l.select\
    \ { |x| x > 0 }` is more efficient than `l.select { |x| x > 0 }`. `l.select {\
    \ |x| x > 0 }` is more efficient than `l.select { |x| x > 0 }`.\n<|/ c |>\n<|\
    \ a tags=ruby,arrays |>\n<code>", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.map! {|x| x if x\
    \ > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.map!(&:abs)\n  l.select { |x| x >= 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x >= 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.map!(&:abs)\n  l.select { |x| x > 0 }\nend", "  l.select { |x|\
    \ x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\n\
    end", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.map! {|x| x > 0 ? x : nil}\n  l\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.map!{|x| x > 0 ? x : nil}\n  l\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select {\
    \ |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0\
    \ }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", " \
    \ l.select { |x| x > 0 }\nend", "  l.select { |x| x >= 0 }\nend", "  l.select\
    \ { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x >\
    \ 0 }\nend", "  l.select { |x| x > 0 }\nend", "  l.select { |x| x > 0 }\nend",
  "  l.select { |x| x > 0 }\nend", "  l.map!(&:abs)\n  l.select { |x| x >= 0 }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
