name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  new_message = \"\"\n  message.each_char do |char|\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase ",
  "  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[ae",
  "  new_message = \"\"\n  message.each_char do |char|\n    next if char.upcase ==\
    \ \"A\" || char.upcase == \"E\" || char.upcase == \"I\" || char.upcase == \"O\"\
    \ || char.upcase == \"U\"\n    index = english_alphabet.index(char.upcase)\n \
    \   next_index = index + 1\n    next_char = english_alphabet[next_index]\n   \
    \ new_message << char.upcase << next_char\n  end\n  new_message\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much for taking the time to write this\
    \ out. I'm going to try this out and see how it goes. I appreciate it.\n<|/ c\
    \ |>\n<| c |>\nI ran the code and it works great! Thank you so much! I really\
    \ appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + 2 \n  }.gsub(/[aeiou]/) { |vowel| \n\
    \    alphabet.index(vowel) + 1 \n  }\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nI like how you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\n\
    I like how you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how\
    \ you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how you used\
    \ `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how you used `gsub`\
    \ twice instead of `tr`\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/,\
    \ 'I')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'o')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/,\
    \ 'Y')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/,\
    \ 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/,\
    \ 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'U')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/,\
    \ 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/,\
    \ 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/,\
    \ 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\
    \ + letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n", "  message.gsub!(/[a-z]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  ", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! I really appreciate your help!\n<|/ c |>\n<| a\
    \ tags=ruby,ruby-on-rails |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI added a comment to the OP asking about how this would work with\
    \ multiple words. I believe this would require a loop to go through each word\
    \ in the message and apply the encode method to each word.\n<|/ c |>\n<| c |>\n\
    Yes, I believe so. I'll update my answer with that info.\n<|/ c |>\n<| c |>\n\
    I updated my answer with a solution that should work for multiple words.\n<|/\
    \ c |>\n<| c |>\nI updated my answer with a solution that should work for multiple\
    \ words.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that should work\
    \ for multiple words.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  message = message.downcase\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? vowels.index(m) + 2 : vowels.index(m) }\n  message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.include?(m) ? vowels.index(m) + 1 : vowels.index(m)\
    \ }\n  message\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,string |>\n<code>",
  "  message.gsub!(/[a-z]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  ", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel.next)\n  }\n  message\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks so much for the help! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! If this answer solved your problem, please consider\
    \ marking it as accepted (click the check mark next to the answer).\n<|/ c |>\n\
    <| c |>\nI did but I'm new to the site and I'm still getting used to the interface.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem,\
    \ please consider marking it as accepted (click the check mark next to the answer).\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/){|letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.downcase!\n \
    \ message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m|\
    \ m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  ", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  message\n\
    end", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| "]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
