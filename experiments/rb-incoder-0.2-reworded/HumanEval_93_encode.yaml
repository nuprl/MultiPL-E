name: HumanEval_93_encode
language: rb
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\
  \n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encode\n\
  \    candidate = method(:encode)\n    assert_equal(\"tgst\", candidate.call(\"TEST\"\
  ))\n    assert_equal(\"mWDCSKR\", candidate.call(\"Mudasir\"))\n    assert_equal(\"\
  ygs\", candidate.call(\"YES\"))\n    assert_equal(\"tHKS KS C MGSSCGG\", candidate.call(\"\
  This is a message\"))\n    assert_equal(\"k dQnT kNqW wHcT Tq wRkTg\", candidate.call(\"\
  I DoNt KnOw WhAt tO WrItE\"))\n  end\nend\n"
completions: ["  new_message = \"\"\n  message.each_char do |char|\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase\
    \ if char.upcase == char\n    char.downcase if char.downcase == char\n    char.upcase ",
  "  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    vowel.succ.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ.succ\n  end\n  message.gsub!(/[ae",
  "  new_message = \"\"\n  message.each_char do |char|\n    next if char.upcase ==\
    \ \"A\" || char.upcase == \"E\" || char.upcase == \"I\" || char.upcase == \"O\"\
    \ || char.upcase == \"U\"\n    index = english_alphabet.index(char.upcase)\n \
    \   next_index = index + 1\n    next_char = english_alphabet[next_index]\n   \
    \ new_message << char.upcase << next_char\n  end\n  new_message\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much for taking the time to write this\
    \ out. I'm going to try this out and see how it goes. I appreciate it.\n<|/ c\
    \ |>\n<| c |>\nI ran the code and it works great! Thank you so much! I really\
    \ appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + 2 \n  }.gsub(/[aeiou]/) { |vowel| \n\
    \    alphabet.index(vowel) + 1 \n  }\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nI like how you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\n\
    I like how you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how\
    \ you used `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how you used\
    \ `gsub` twice instead of `tr`\n<|/ c |>\n<| c |>\nI like how you used `gsub`\
    \ twice instead of `tr`\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letters.index(letter.upcase)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'A')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/,\
    \ 'I')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'o')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/,\
    \ 'Y')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/,\
    \ 'e')\n  message.gsub!(/[AEIOU]/, 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/,\
    \ 'u')\n  message.gsub!(/[AEIOU]/, 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/,\
    \ 'E')\n  message.gsub!(/[AEIOU]/, 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/,\
    \ 'U')\n  message.gsub!(/[AEIOU]/, 'a')\n  message.gsub!(/[AEIOU]/, 'e')\n  message.gsub!(/[AEIOU]/,\
    \ 'i')\n  message.gsub!(/[AEIOU]/, 'o')\n  message.gsub!(/[AEIOU]/, 'u')\n  message.gsub!(/[AEIOU]/,\
    \ 'y')\n  message.gsub!(/[AEIOU]/, 'A')\n  message.gsub!(/[AEIOU]/, 'E')\n  message.gsub!(/[AEIOU]/,\
    \ 'I')\n  message.gsub!(/[AEIOU]/, 'O')\n  message.gsub!(/[AEIOU]/, 'U')\n  message.gsub",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\
    \ + letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n", "  message.gsub!(/[a-z]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  message.gsub!(/[aeiou]/){|i|\
    \ i.upcase }\n  message.gsub!(/[aeiou]/){|i| i.upcase }\n  ", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThanks so much! I really appreciate your help!\n<|/ c |>\n<| a\
    \ tags=ruby,ruby-on-rails |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI added a comment to the OP asking about how this would work with\
    \ multiple words. I believe this would require a loop to go through each word\
    \ in the message and apply the encode method to each word.\n<|/ c |>\n<| c |>\n\
    Yes, I believe so. I'll update my answer with that info.\n<|/ c |>\n<| c |>\n\
    I updated my answer with a solution that should work for multiple words.\n<|/\
    \ c |>\n<| c |>\nI updated my answer with a solution that should work for multiple\
    \ words.\n<|/ c |>\n<| c |>\nI updated my answer with a solution that should work\
    \ for multiple words.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  message = message.downcase\n\
    \  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.include?(m) ? vowels.index(m) + 2 : vowels.index(m) }\n  message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.include?(m) ? vowels.index(m) + 1 : vowels.index(m)\
    \ }\n  message\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=ruby,string |>\n<code>",
  "  message.gsub!(/[a-z]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  message.gsub!(/[aeiou]/){|l|\
    \ l.upcase }\n  message.gsub!(/[aeiou]/){|l| l.upcase }\n  ", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel.next)\n  }\n  message\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks so much for the help! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nNo problem! If this answer solved your problem, please consider\
    \ marking it as accepted (click the check mark next to the answer).\n<|/ c |>\n\
    <| c |>\nI did but I'm new to the site and I'm still getting used to the interface.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nNo problem! If this answer solved your problem,\
    \ please consider marking it as accepted (click the check mark next to the answer).\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/){|letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.downcase!\n \
    \ message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m|\
    \ m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |m| m.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |m| m.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[a-z]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  ", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  message\n\
    end", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.g",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[a-z]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  ", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase.gsub(/[aeiou]/) { |vowel| letter.index(vowel) + 2 }\n  end\n\
    \  message.gsub!(/[aeiou]/) { |vowel| letter.index(vowel) + 1 }\n  message\nend\n\
    </code>\n<|/ a tags=ruby,string,algorithm |>\n<| c |>\nThanks for the answer!\
    \ I didn't know about `gsub!`. I tried it out and it works great. I'm still trying\
    \ to figure out how it works. I understand how it works with `gsub` but I don't\
    \ understand how it works with `gsub!`. Can you explain how it works?\n<|/ c |>\n\
    <| c |>\n`gsub!` changes the string in place. `gsub` returns a new string with\
    \ the substitutions made. `gsub!` returns the original string unchanged. `gsub!`\
    \ also accepts a block, which it executes every time the substitution is made.\
    \ `gsub!` also accepts a hash, which it uses to determine what to replace and\
    \ what to leave alone. `gsub!` also accepts a block, which it executes every time\
    \ the substitution is made. `gsub!` also accepts a hash, which it uses to determine\
    \ what to replace and what to leave alone. `gsub!` also accepts a block, which\
    \ it executes every time the substitution is made. `gsub!` also accepts a hash,\
    \ which it uses to determine what to replace and what to leave alone. `gsub!`\
    \ also accepts a block, which it executes every time the substitution is made.\n\
    <|/ c |>\n<| c |>\nI added some comments to the code above. Let me know if that\
    \ helps.\n<|/ c |>\n<| c |>\nThanks for the explanation! I understand it now.\
    \ One more question: why does it work if I use `gsub!` instead of `gsub`? I thought\
    \ that `gsub` only replaces one occurrence of a substring in a string.\n<|/ c\
    \ |>\n<| c |>\n`gsub` replaces *all* occurrences of a substring in a string. `gsub!`\
    \ replaces *one* occurrence of a substring in a string. `gsub!` also accepts a\
    \ block, which it executes every time the substitution is made. `gsub!` also accepts\
    \ a hash, which it uses to determine what to replace and what to leave alone.\
    \ `", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if char == vowel\n        new_message << vowel\n      else\n        vowel_position\
    \ = vowels.index(vowel)\n        new_message << char.next\n        new_message\
    \ << vowels[vowel_position + 1]\n      end\n    end\n  end\n  new_message\nend",
  "  message.gsub(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    end", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n  message\n\
    end", "  message.gsub!(/[a-z]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  ", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char\n    elsif char.upcase == char.next\n      new_message << char.next\n\
    \    else\n      new_message << char.upcase\n    end\n  end\n  new_message\nend",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou",
  "  message.downcase!\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |x| x.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'h')\n  message.gsub!(/[aeiou]/,\
    \ 'k')\n  message.gsub!(/[aeiou]/, 's')\n  message.gsub!(/[aeiou]/, 'c')\n  message.gsub!(/[aeiou]/,\
    \ 'g')\n  message.gsub!(/[aeiou]/, 'm')\n  message.gsub!(/[aeiou]/, 'p')\n  message.gsub!(/[aeiou]/,\
    \ 'f')\n  message.gsub!(/[aeiou]/, 'v')\n  message.gsub!(/[aeiou]/, 'b')\n  message.gsub!(/[aeiou]/,\
    \ 'n')\n  message.gsub!(/[aeiou]/, 'd')\n  message.gsub!(/[aeiou]/, 'j')\n  message.gsub!(/[aeiou]/,\
    \ 'q')\n  message.gsub!(/[aeiou]/, 'x')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 't')\n  message.gsub!(/[aeiou]/, 'k')\n  message.gsub!(/[aeiou]/, 's')\n  message.gsub!(/[aeiou]/,\
    \ 'g')\n  message.gsub!(/[aeiou]/, 'm')\n  message.gsub!(/[aeiou]/, 'p')\n  message.gsub!(/[aeiou]/,\
    \ 'f')\n  message.gsub!(/[aeiou]/, 'v')\n  message.gsub!(/[aeiou]/, 'b')\n  message.gsub!(/[aeiou]/,\
    \ 'n')\n  message.gsub!(/[aeiou]/, 'd')\n  message.gsub!(/[aeiou]/, 'j')\n  message.gsub!(/[aeiou]/,\
    \ 'q')\n  message.gsub!(/[aeiou]/, 'x')\n  message.gsub!(/[aeiou]/, 'z')\n  message.gsub!(/[aeiou]/,\
    \ 't')\n  ", "  message.downcase!\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.next\n      new_message << char.upcase\n\
    \    else\n      new_message << char.next\n    end\n  end\n  new_message\nend",
  "  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|",
  "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/) {\
    \ |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message =\
    \ message.downcase\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.include?(m) ? m : m.succ }\n  message\
    \ = message.gsub(/[aeiou]/) { |m| vowels.include?(m) ? m.succ : m }\n  message\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help! I really\
    \ appreciate it!\n<|/ c |>\n<| c |>\nNo problem! If this answer helped you, please\
    \ consider accepting it by clicking the check mark next to it. This will help\
    \ future visitors know that the answer worked for you, and will also help you\
    \ get more reputation points for following the proper procedure.\n<|/ c |>\n<|\
    \ c |>\nI tried to upvote your answer, but I don't have enough reputation points.\
    \ Thanks again for the help!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help!\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[aeiou]/){|c| c.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.downcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do\
    \ |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n   \
    \ letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do\
    \ |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n   \
    \ letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do\
    \ |letter|\n    letter.upcase[1..", "  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}\n\
    \  message.gsub!(/[aeiou]/){|x| x.upcase}\n  message.gsub!(/[aeiou]/){|x| x.upcase}",
  "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase + letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks so much for your help! I really appreciate it!\n<|/ c |>\n<| c |>\n\
    No problem! If this answer solved your problem, please mark it as accepted (by\
    \ clicking the check mark next to it). That way others know that your problem\
    \ has been solved, and that people who search for this problem in the future will\
    \ know what to look for.\n<|/ c |>\n<| c |>\nI tried to do that, but since I'm\
    \ new to the site, it said I had to wait a certain amount of time before accepting\
    \ an answer. Thanks again for your help!\n<|/ c |>\n<| c |>\nNo problem! Glad\
    \ I could help!\n<|/ c |>\n<| a tags=ruby |>\nHere's a more Ruby-like solution:\n\
    <code>", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.downcase!\n  message.gsub!(/[aeiou]/i, \"A\")\n  message.gsub!(/[aeiou]/i,\
    \ \"a\")\n  message.gsub!(/[aeiou]/i, \"E\")\n  message.gsub!(/[aeiou]/i, \"e\"\
    )\n  message.gsub!(/[aeiou]/i, \"I\")\n  message.gsub!(/[aeiou]/i, \"i\")\n  message.gsub!(/[aeiou]/i,\
    \ \"O\")\n  message.gsub!(/[aeiou]/i, \"o\")\n  message.gsub!(/[aeiou]/i, \"U\"\
    )\n  message.gsub!(/[aeiou]/i, \"u\")\n  message.gsub!(/[aeiou]/i, \"Y\")\n  message.gsub!(/[aeiou]/i,\
    \ \"y\")\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[aeiou]/i, \"e\"\
    )\n  message.gsub!(/[aeiou]/i, \"i\")\n  message.gsub!(/[aeiou]/i, \"o\")\n  message.gsub!(/[aeiou]/i,\
    \ \"u\")\n  message.gsub!(/[aeiou]/i, \"y\")\n  message.gsub!(/[aeiou]/i, \"A\"\
    )\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[aeiou]/i, \"E\")\n  message.gsub!(/[aeiou]/i,\
    \ \"e\")\n  message.gsub!(/[aeiou]/i, \"I\")\n  message.gsub!(/[aeiou]/i, \"i\"\
    )\n  message.gsub!(/[aeiou]/i, \"O\")\n  message.gsub!(/[aeiou]/i, \"o\")\n  message.gsub!(/[aeiou]/i,\
    \ \"U\")\n  message.gsub!(/[aeiou]/i, \"u\")\n  message.gsub!(/[aeiou]/i, \"Y\"\
    )\n  message.gsub!(/[aeiou]/i, \"y\")\n  message.gsub!(/[aeiou]/i, \"a\")\n  message.gsub!(/[aeiou]/i,\
    \ \"e\")\n  message.gsub!(/[aeiou]/i, \"i\")\n  message.gsub!(/[aeiou]/i, \"o\"\
    )\n  message.g", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  new_message = \"\"\n  message.split(\"\").each do |letter|\n\
    \    letter = letter.upcase\n    vowels = letter.scan(/[aeiou]/)\n    vowels.each\
    \ do |vowel|\n      new_message << letter.index(vowel) + 2\n    end\n    new_message\
    \ << letter\n  end\n  new_message\nend", "  new_message = \"\"\n  vowels = %w{a\
    \ e i o u}\n  message.split(\"\").each do |letter|\n    letter = letter.upcase\n\
    \    vowels.each do |vowel|\n      if letter == vowel\n        new_message <<\
    \ vowel\n      else\n        new_message << letter.next\n      end\n    end\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nI like\
    \ your solution, although I wouldn't use `next` here but `letter[letter.length-2]`.\
    \ Also `vowels.each do |vowel|` could be written as `vowels.each { |vowel| new_message\
    \ << vowel }`.\n<|/ c |>\n<| c |>\nThanks for the suggestions. I edited my answer\
    \ to include your suggestions.\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ wouldn't use `next` here but `letter[letter.length-2]`. Also `vowels.each do\
    \ |vowel|` could be written as `vowels.each { |vowel| new_message << vowel }`.\n\
    <|/ c |>\n<| c |>\nThanks for the suggestions. I edited my answer to include your\
    \ suggestions.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message = message.downcase\n\
    \  vowels = \"aeiou\"\n  letters = message.split(//)\n  letters.each do |letter|\n\
    \    letter = letter.tr(vowels, letters[letters.index(letter) + 1])\n  end\n \
    \ letters.join(//)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate your\
    \ help but I am not allowed to use any methods that aren't already in ruby. I\
    \ also am not allowed to use any methods that aren't already in ruby.\n<|/ c |>\n\
    <| c |>\nI added a solution that uses no methods that aren't already in ruby.\n\
    <|/ c |>\n<| c |>\nThank you so much! I really appreciate it!\n<|/ c |>\n<| a\
    \ tags=ruby,string |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/[aeiou]/i) { |x| x.succ }\n  message.gsub!(/[aeiou]/i)\
    \ { |x| x.succ }\n  message.gsub!(/", "  message.gsub!(/[a-z]/){|x| x.upcase }\n\
    \  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ\
    \ }\n  ", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.g", "  message.gsub!(/[aeiou]/){|vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.upcase }\n  message.gsub!(/[aeiou]/){|", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == char\n      new_message << char.upcase\n  \
    \  else\n      new_message << char.downcase\n    end\n  end\n  new_message.gsub(/[aeiou]/)\
    \ do |char|\n    index = alphabet.index(char)\n    alphabet.index(char) + 2\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `alphabet`\
    \ isn't defined anywhere.\n<|/ c |>\n<| c |>\nI fixed the code so it should work\
    \ now.\n<|/ c |>\n<| c |>\n`alphabet` is defined in the `encode` method. `alphabet\
    \ = %w[a b c d e f g h i j k l m n o p q r s t u v w x y z]`\n<|/ c |>\n<| c |>\n\
    I see that now. Thanks.\n<|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase + letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n  \
    \  letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the help.\
    \ I appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ so much for the help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) + 2 }\n \
    \ message.gsub!(/[aeiou]/) { |vowel| alphabet.index(vowel) }\n  message\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for the answer! I didn't know about\
    \ gsub!. I'm still a beginner at Ruby, so I appreciate the help.\n<|/ c |>\n<|\
    \ c |>\nNo problem! Ruby is a great language to learn and get to grips with. Once\
    \ you get used to it, you'll find it very useful.\n<|/ c |>\n<| a tags=ruby,string,encoding\
    \ |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.downcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/){|",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<|\
    \ c |>\nThanks for your answer. I am new to ruby so I am not quite sure how to\
    \ implement your code. Could you please explain how I would implement this in\
    \ my code?\n<|/ c |>\n<| c |>\nI added an example to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I am new to ruby so I am not quite\
    \ sure how to implement your code. Could you please explain how I would implement\
    \ this in my code?\n<|/ c |>\n<| c |>\nI added an example to the answer. Hope\
    \ it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am new to ruby so I\
    \ am not quite sure how to implement your code. Could you please explain how I\
    \ would implement this in my code?\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n", "  message.gsub(/./) do |char|\n \
    \   char.upcase + char.downcase + char.upcase + char.downcase\n  end\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks so much for\
    \ this! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\nend", "  message.gsub!(/[a-z]/) do |letter|\n   \
    \ letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer solved your problem, please mark it as accepted by clicking the\
    \ check mark next to it. Thanks!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-4\
    \ |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  new_message = \"\"\n  message.each_char do |char|\n    if\
    \ char.upcase == \"A\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"E\"\n      new_message << char.upcase\n    elsif char.upcase == \"I\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"O\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"U\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"a\"\n      new_message << char.upcase\n    elsif char.upcase == \"e\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"i\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"o\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"u\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"y\"\n      new_message << char.upcase\n    elsif char.upcase == \"A\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"E\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"I\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"O\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"U\"\n      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"a\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"e\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"i\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"o\"\n      new_message << char.upcase\n    elsif char.upcase == \"u\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"y\"\n      new_message\
    \ << char.upcase\n    elsif ", "  message = message.downcase\n  vowels = %w(a\
    \ e i o u)\n  message.gsub(vowels) {|vowel| vowels[vowels.index(vowel) + 1]}\n\
    end\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks\
    \ so much for your help! I really appreciate it!\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>", "  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |letter| letter.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ alphabet.index(vowel) + 1 }\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nI appreciate your answer, but I don't think it solves my problem. My problem\
    \ is that I cannot figure out how to get the function to return \"tHKS KS C MGSSCGG\"\
    \ when I input \"test\".\n<|/ c |>\n<| c |>\nI added a second solution that does\
    \ what you want.\n<|/ c |>\n<| c |>\nThank you so much! I really appreciate your\
    \ help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n", "  new_message = \"\"\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n  for i in message\n    new_message += i.upcase\n    index = vowels.index(i)\n\
    \    new_message += i.downcase\n    new_message += vowels[(index+1)%vowels.size]\n\
    \  end\n  new_message\nend\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis\
    \ doesn't work for the second example. `\"This is a message\".gsub(/[aeiou]/)\
    \ { |m| m.upcase + m.downcase }`\n<|/ c |>\n<| c |>\nI added a version that works\
    \ for the second example\n<|/ c |>\n<| c |>\nI added a version that works for\
    \ the second example\n<|/ c |>\n<| c |>\nI added a version that works for the\
    \ second example\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| ", "  new_message\
    \ = \"\"\n  message.each_char do |c|\n    new_message << case c\n      when \"\
    a\" then \"b\"\n      when \"e\" then \"f\"\n      when \"i\" then \"g\"\n   \
    \   when \"o\" then \"h\"\n      when \"u\" then \"j\"\n      when \"y\" then\
    \ \"k\"\n      else c\n    end\n  end\n  new_message\nend", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n", "  message.gsub(/[a-z]/) { |letter|\
    \ letter.upcase }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message\n\
    end", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ\
    \ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou",
  "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.gsub!(/[aeiou]/) { |vowel| \n    alphabet.index(vowel)\
    \ + alphabet.index(vowel.next)\n  }\n  message.gsub!(/[aeiou]/) { |vowel| \n \
    \   alphabet.index(vowel.next) + alphabet.index(vowel)\n  }\n  message\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer. I'm still\
    \ trying to wrap my head around this solution. Would you mind explaining how it\
    \ works?\n<|/ c |>\n<| c |>\nSure. `gsub!` replaces every occurrence of the given\
    \ regexp with the replacement string. `[aeiou]` matches any vowel in the alphabet.\
    \ `[aeiou].next` returns the next vowel in the alphabet. `[aeiou].next.next` returns\
    \ the next vowel in the alphabet and so on. `alphabet.index(vowel) + alphabet.index(vowel.next)`\
    \ returns the index of the first vowel in the alphabet plus the index of the next\
    \ vowel in the alphabet. `alphabet.index(vowel.next) + alphabet.index(vowel)`\
    \ returns the index of the next vowel in the alphabet plus the index of the first\
    \ vowel in the alphabet.\n<|/ c |>\n<| c |>\nAwesome, thank you so much! I understand\
    \ it much better now.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  new_message = \"\"\n\
    \  message.split(\"\").each do |letter|\n    if letter.upcase == \"A\"\n     \
    \ new_message += \"B\"\n    elsif letter.upcase == \"E\"\n      new_message +=\
    \ \"F\"\n    elsif letter.upcase == \"I\"\n      new_message += \"J\"\n    elsif\
    \ letter.upcase == \"O\"\n      new_message += \"K\"\n    elsif letter.upcase\
    \ == \"U\"\n      new_message += \"L\"\n    elsif letter.upcase == \"Y\"\n   \
    \   new_message += \"N\"\n    elsif letter.upcase == \"a\"\n      new_message\
    \ += \"b\"\n    elsif letter.upcase == \"e\"\n      new_message += \"f\"\n   \
    \ elsif letter.upcase == \"i\"\n      new_message += \"j\"\n    elsif letter.upcase\
    \ == \"o\"\n      new_message += \"k\"\n    elsif letter.upcase == \"u\"\n   \
    \   new_message += \"l\"\n    elsif letter.upcase == \"y\"\n      new_message\
    \ += \"n\"\n    else\n      new_message += letter\n    end\n  end\n  new_message\n\
    end", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  message.gsub!(/[a-z]/){|letter| letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n   \
    \ vowel.succ \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n\
    \  message.gsub(/[aeiou]/) { |vowel| \n    vowel.succ \n  }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    vowel.succ \n  }\n", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message << char.upcase\n \
    \   elsif char.upcase == \"E\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"I\"\n      new_message << char.upcase\n    elsif char.upcase == \"O\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"U\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"a\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"e\"\n      new_message << char.upcase\n    elsif char.upcase == \"i\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"o\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"u\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"b\"\n      new_message << char.upcase\n    elsif char.upcase == \"g\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"h\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"j\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"k\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"l\"\n      new_message << char.upcase\n    elsif char.upcase == \"m\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"n\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"p\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"q\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"r\"\n      new_message << char.upcase\n    elsif char.upcase == \"s\"\n\
    \      new_message << char.upcase\n    elsif char.up", "  new_message = \"\"\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub(/[aeiou]/) do |char|\n    alphabet[alphabet.index(char.upcase)\
    \ + alphabet.index(char.downcase)]\n  end\nend", "  message.gsub!(/[aeiou]/) {\
    \ |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  new_message =\
    \ \"\"\n  message.split(\"\").each do |letter|\n    letter.upcase.gsub(/[AEIOUaeiou]/)\
    \ do |letter|\n      new_message << letter.succ\n    end\n  end\n  new_message.split(\"\
    \").each do |letter|\n    letter.gsub(/[AEIOUaeiou]/) do |letter|\n      new_message\
    \ << letter.succ\n    end\n  end\n  return new_message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  message = message.downcase\n\
    \  vowels = %w[a e i o u]\n  message.gsub(/[aeiou]/) { |m| vowels.include?(m)\
    \ ? m : vowels.shift }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    Thanks so much! This was very helpful!\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \ message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel)\
    \ + 2 \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet.index(vowel) +\
    \ 1 \n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for\
    \ your answer. I'm still a bit confused on how to implement this into my code.\
    \ Could you please show me how I would implement this into my code? Thanks again!\n\
    <|/ c |>\n<| c |>\nI added an example to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I'm still a bit confused on how to implement\
    \ this into my code. Could you please show me how I would implement this into\
    \ my code? Thanks again!\n<|/ c |>\n<| c |>\nI added an example to my answer.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I'm still a bit confused\
    \ on how to implement this into my code. Could you please show me how I would\
    \ implement this into my code? Thanks again!\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[ae", "  message.gsub!(/[a-z]/){|c|\
    \ c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  ", "  new_message = message.downcase\n  new_message.gsub!(/[aeiou]/)\
    \ { |vowel| \n    english_alphabet[english_alphabet.index(vowel) + 2] \n  }\n\
    \  new_message.gsub!(/[aeiou]/) { |vowel| \n    english_alphabet[english_alphabet.index(vowel)\
    \ + 1] \n  }\n  new_message\nend\n</code>\n<|/ a tags=ruby,string,algorithm |>\n\
    <| c |>\nThanks for the answer. Can you please explain how you came up with these\
    \ two lines?\nnew_message.gsub!(/[aeiou]/) { |vowel| \n    english_alphabet[english_alphabet.index(vowel)\
    \ + 2] \n  }\n  new_message.gsub!(/[aeiou]/) { |vowel| \n    english_alphabet[english_alphabet.index(vowel)\
    \ + 1] \n  }\n<|/ c |>\n<| c |>\nThe first line is saying \"replace all vowels\
    \ with their two places ahead in the alphabet\". The second line is saying \"\
    replace all vowels with their two places ahead in the alphabet\". It's a little\
    \ tricky because `gsub!` returns the original string unchanged, so you have to\
    \ assign it to a variable and use that variable in the next line. That's why I\
    \ used `new_message` instead of `message` in the second line.\n<|/ c |>\n<| c\
    \ |>\nI see. Thanks for the explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  message.gsub!(/[a-z]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ\
    \ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  ", "  new_message = \"\"\n  message.split(\"\
    \").each do |letter|\n    letter = letter.upcase\n    vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n      new_message += letter.gsub(vowel,\
    \ letter.index(vowel) + 2)\n    end\n  end\n  new_message\nend", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.succ) \n  }\nend",
  "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <| c |>\nI added a solution that doesn't require a global variable or an additional\
    \ method.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[a-z]/) do |letter|\n\
    \    letter.upcase + letter.downcase[letter.index(letter) + 1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message\nend", "  message.gsub(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks so much for taking the\
    \ time to write this out! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ I hope it helps you!\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel", "  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1] }\nend", "  message.gsub!(/[a-z]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  ", "  message.downcase!\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == \"A\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"E\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"I\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"O\"\n      new_message << char.upcase\n    elsif char.upcase == \"U\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"a\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"e\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"i\"\n      new_message << char.upcase\n    elsif char.upcase == \"o\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"u\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"A\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"E\"\n      new_message << char.upcase\n    elsif char.upcase == \"I\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"O\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"U\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"a\"\n      new_message << char.upcase\n    elsif char.upcase == \"e\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"i\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"o\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"u\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"y\"\n      new_message << char.upcase\n    elsif ", "  new_message = \"\
    \"\n  message.split(\"\").each do |letter|\n    letter.upcase!\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove vowels\n    letter.gsub!(/[aeiou]/, '') # remove vowels\n    letter.gsub!(/[aeiou]/,\
    \ '') # remove ", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'y')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'a')\n  ",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    \  message\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks so much for the help.\
    \ I really appreciate it. I was able to get it to work. Thanks again!\n<|/ c |>\n\
    <| c |>\nYou're welcome. I'm glad it helped. Feel free to accept the answer by\
    \ clicking the checkmark next to it.\n<|/ c |>\n<| c |>\nI did that now. Thanks\
    \ again!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  message = message.downcase\n  vowels = \"aeiouAEIOU\"\n  letters\
    \ = message.split(//)\n  new_letters = []\n  new_letters.concat(letters.map {\
    \ |letter| letter.gsub(vowels, letters[letters.index(letter)+1]) })\n  new_letters.join(//)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `letters.map { |letter|\
    \ letter.gsub(vowels, letters[letters.index(letter)+1]) }` returns `[\"t\", \"\
    h\", \"s\", \"k\", \"s\", \"c\", \"g\", \"g\", \"g\", \"s\", \"c\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"g\", \"\
    g\", \"g\", \"g\", \"g", "  message.downcase!\n  message.gsub(/[aeiou]/) { |vowel|\
    \ \n    alphabet.index(vowel) + 2 \n  }\n  message.gsub(/[aeiou]/) { |vowel| \n\
    \    alphabet.index(vowel) + 1 \n  }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI appreciate your help but I'm still getting an error. I've added\
    \ the error to the original post.\n<|/ c |>\n<| c |>\nI added a comment to the\
    \ code explaining what each line does. I hope that helps.\n<|/ c |>\n<| c |>\n\
    I appreciate your help but I'm still getting an error. I've added the error to\
    \ the original post.\n<|/ c |>\n<| c |>\nI added a comment to the code explaining\
    \ what each line does. I hope that helps.\n<|/ c |>\n<| c |>\nI appreciate your\
    \ help but I'm still getting an error. I've added the error to the original post.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    char = char.upcase if char.upcase\
    \ != char\n    vowels = %w[a e i o u]\n    vowels.each do |vowel|\n      new_message\
    \ << char if char == vowel\n    end\n  end\n  new_message.gsub!(/[aeiou]/) do\
    \ |vowel|\n    vowels[vowels.index(vowel) + 1]\n  end\n  new_message\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThank you so much for the help. I really appreciate\
    \ it!\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails\
    \ |>\n<code>", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub(/[a-z]/) { |letter| letter.upcase }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nI really like this solution, but I'm having trouble getting it\
    \ to work. I'm getting `undefined method 'gsub' for nil:NilClass` when I try to\
    \ run `encode.call(\"This is a message\")`. Any ideas?\n<|/ c |>\n<| c |>\nI figured\
    \ it out. My `message` variable was being passed in as a `nil` value. Thanks!\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.upcase\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n\
    \    alphabet.index(vowel)\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n   \
    \ alphabet[(alphabet.index(vowel) + 2)%26]\n  end\n  message\nend\n</code>\n<|/\
    \ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks for your answer. I'm a beginner\
    \ at Ruby and I'm having trouble understanding your code. Could you please explain\
    \ what each line is doing?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\
    \ Let me know if that helps.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ I'm still having trouble understanding how this works. I understand that gsub!\
    \ replaces all occurrences of vowels with their uppercase equivalents, but I don't\
    \ understand how this works. Could you please explain how this works?\n<|/ c |>\n\
    <| c |>\nThe `gsub!` method replaces all occurrences of a given regexp with a\
    \ given block. In the case of `/[aeiou]/` it replaces all vowels with their uppercase\
    \ equivalents. In the case of `/[aeiou]/` it replaces all vowels with their index\
    \ in the alphabet. In the case of `/[aeiou]/` it replaces all vowels with their\
    \ index in the alphabet plus 2. So `aeiou` becomes `A`, `B`, `C`, `D`, `E`, `F`,\
    \ `G`, `H`, `I`, `J`, `K`, `L`, `M`, `N`, `O`, `P`, `Q`, `R`, `S`, `T`, `U`, `V`,\
    \ `W`, `X`, `Y`, `Z`, `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`, `j`, `k`, `l`,\
    \ `m`, `n`, `o`, `p`, `q`, `r`, `s`, `t`, `u`, `v`, `w`, `x`, `y`, `z`, `0`, `1`,\
    \ `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `A`, `B`, `C`, `D`, `E`, `F`, `G`, `H`,\
    \ `I`, `J`, `K`, `L`, `M`, `N`, `O`, `P`, `Q`, `R`, `S`, `T`, `U`, `V`, `W`, `X`,\
    \ `Y`, `Z`, `a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`, `j`, `k", "  new_message\
    \ = \"\"\n  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    elsif char.upcase == char.downcase\n      new_message <<\
    \ char.upcase\n      new_message << char.downcase\n    elsif char.upcase == char.upcase.downcase\n\
    \      new_message << char.upcase\n      new_message << char.upcase.downcase\n\
    \    end\n  end\n  new_message\nend", "  new_message = \"\"\n  vowels = \"AEIOUaeiou\"\
    \n  message.split(\"\").each do |letter|\n    if vowels.include?(letter)\n   \
    \   new_message << letter.upcase\n      new_message << letter.upcase\n    else\n\
    \      new_message << letter\n    end\n  end\n  new_message\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your solution. Very clean and concise. Thanks!\n<|/ c\
    \ |>\n<| c |>\nI like your solution. Very clean and concise. Thanks!\n<|/ c |>\n\
    <| a tags=ruby,string |>\n<code>", "  message.downcase!\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'y')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub(/[a-z]/) { |letter| letter.upcase }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c\
    \ |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n<| a |>\n\
    <code>", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| alphabet.index(vowel) + 2 }\n  message.gsub!(/[aeiou]/) { |vowel|\
    \ alphabet.index(vowel) }\n  message\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    Thanks for the answer! I understand what you're saying, but I'm having trouble\
    \ implementing it. I tried copying your code and replacing my encode function\
    \ with it, but I got an error saying \"undefined method `gsub' for nil:NilClass\"\
    . Any ideas?\n<|/ c |>\n<| c |>\nOops, I forgot to add `message` as a parameter\
    \ to `encode`. Fixed now.\n<|/ c |>\n<| c |>\nAh, I see. Thank you so much! I\
    \ really appreciate it!\n<|/ c |>\n<| c |>\nNo problem! Glad I could help.\n<|/\
    \ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == char\n      new_message << char.upcase\n  \
    \  elsif char.upcase == char.next\n      new_message << char.upcase\n    else\n\
    \      new_message << char.next\n    end\n  end\n  new_message\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\nThanks so much! I really\
    \ appreciate it!\n<|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n\
    <code>", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  new_message = \"\"\n  message.each_char do |char|\n    index = english_alphabet.index(char)\n\
    \    new_message << english_alphabet[(index + 2)%26]\n  end\n  new_message\nend",
  "  message = message.downcase\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \  message.gsub!(/[aeiou]/) { |m| vowels.index(m) + 2 }\n  message.gsub!(/[aeiou]/)\
    \ { |m| vowels.index(m) + 1 }\n  message\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThanks for the answer! I understand what you're saying but I'm having\
    \ trouble implementing it. I'm new to Ruby and am trying to learn as I go. Could\
    \ you please show me how I would implement this in my code? I understand what\
    \ you're saying but I'm having trouble implementing it.\n<|/ c |>\n<| c |>\nI\
    \ added an example to my answer. Hope it helps.\n<|/ c |>\n<| c |>\nThank you\
    \ so much! I really appreciate it!\n<|/ c |>\n<| a |>\n<code>", "  message.gsub!(/[a-z]/){|letter|\
    \ letter.upcase }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel|\
    \ vowel.succ }\n  message.gsub!(/[aeiou]/){|vowel| ", "  message.gsub!(/[a-z]/){|x|\
    \ x.upcase }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  message.gsub!(/[aeiou]/){|x| x.succ }\n  message.gsub!(/[aeiou]/){|x|\
    \ x.succ }\n  ", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase[letter.index(letter)\
    \ + 1]\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n\
    end", "  message.downcase!\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/,\
    \ 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/,\
    \ 'e')\n  message.gsub!(/[aeiou]/, 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/,\
    \ 'u')\n  message.gsub!(/[aeiou]/, 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou]/,\
    \ 'i')\n  message.gsub!(/[aeiou]/, 'o')\n  message.gsub!(/[aeiou]/, 'u')\n  message.gsub!(/[aeiou]/,\
    \ 'a')\n  message.gsub!(/[aeiou]/, 'e')\n  message.gsub!(/[aeiou", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase.chars.zip(letter.upcase.chars).\n\
    \      map { |a,b| a == b ? a : a.succ }.join\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.downcase.chars.zip(letter.upcase.chars).\n\
    \      map { |a,b| a == b ? a : a.succ }.join\n  end\n  message\nend", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[letter.index(letter) + 1]\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message\n\
    end", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/", "  message = message.downcase\n\
    \  vowels = \"aeiou\"\n  message = message.gsub(/[#{vowels}]/) { |m| m.upcase\
    \ }\n  message = message.gsub(/[aeiou]/) { |m| m.succ }\n  message\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThanks for your answer! I appreciate it. I tried running\
    \ your code, but I got this error: `undefined method `succ' for \"a\":String (NoMethodError)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix that error. `succ` was introduced\
    \ in Ruby 2.1, so if you're using an older version you'll need to use `next` instead.\n\
    <|/ c |>\n<| c |>\nThanks again! I appreciate it. I tried running your code, but\
    \ I got this error: `undefined method `succ' for \"a\":String (NoMethodError)`\n\
    <|/ c |>\n<| c |>\nI edited my answer to fix that error. `succ` was introduced\
    \ in Ruby 2.1, so if you're using an older version you'll need to use `next` instead.\n\
    <|/ c |>\n<| c |>\nThanks again! I appreciate it. I tried running your code, but\
    \ I got this error: `undefined method `succ' for \"a\":String (NoMethodError)`\n\
    <|/ c |>\n<| a dscore=1 |>\nHere's a solution that uses recursion:\n<code>", " \
    \ message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| ", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.each_char do |char|\n    if char.upcase\
    \ == char\n      new_message << char.upcase\n    elsif char.upcase == char.next\n\
    \      new_message << char.upcase\n    else\n      new_message << char.next\n\
    \    end\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n \
    \   vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n \
    \   vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n \
    \   vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n \
    \   vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n \
    \   vowel.succ\n  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    vowel.succ\n  end\n  message.gsub!(/[", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel", "  new_message = message.downcase.gsub(/[a-z]/) do |letter|\n    letter.upcase\
    \ + letter.gsub(/[aeiou]/).to_a.sample\n  end\n  new_message.gsub(/[aeiou]/) do\
    \ |letter|\n    letter.upcase + letter.gsub(/[aeiou]/).to_a.sample\n  end\nend",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.downcase[1..-1]\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<| c |>\n\
    Thanks for your answer! I really appreciate it! I guess I should learn more about\
    \ regex. Thanks again!\n<|/ c |>\n<| c |>\nNo problem. Regexes are a very powerful\
    \ tool that can make your life easier when dealing with strings. I recommend you\
    \ read up on them and play around with them a bit. Good luck!\n<|/ c |>\n<| c\
    \ |>\nI added some more explanation to my answer. Hope it helps!\n<|/ c |>\n<|\
    \ a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  message.gsub(/[a-z]/)\
    \ { |letter| letter.upcase }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n\
    end", "  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphabet.index(vowel)\
    \ + 1]\n  }\n  message.gsub(/[aeiou]/) { |vowel| \n    alphabet[alphab", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  message.gsub!(/[a-z]/) { |letter| letter.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nThanks so much for the help. I really appreciate it.\n<|/ c |>\n<| c\
    \ |>\nNo problem. Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", " \
    \ message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n\
    \  message.gsub!(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  new_message = \"\"\n  message.each_char do |char|\n    char = char.upcase\n\
    \    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowels.each do |vowel|\n\
    \      if char == vowel\n        new_message << vowel\n      end\n    end\n  end\n\
    \  new_message.each_char do |char|\n    char = char.upcase\n    alphabet = [\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"]\n    alphabet.each do |letter|\n      if char == letter\n\
    \        new_message << letter\n      end\n    end\n  end\n  new_message\nend",
  "  message = message.downcase\n  vowels = \"aeiou\"\n  consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n  consonants.gsub!(/[#{vowels}]/) { |v| consonants.index(v) + 2 }\n  message.gsub!(/[#{consonants}]/)\
    \ { |v| vowels.index(v) }\n  message\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks so much for the help! I really appreciate it!\n<|/ c |>\n\
    <| a |>\n<code>", "  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.g",
  "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.succ\n  end\n\
    \  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.succ\n  end\n  message\nend", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub(/[aeiou]/)\
    \ { |vowel| \n    alphabet.index(vowel) + alphabet.index(vowel.next) \n  }\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder why you\
    \ used `gsub` instead of `tr`? I thought `tr` was for translating characters,\
    \ not for swapping case. Also, why did you use `next` instead of `succ`?\n<|/\
    \ c |>\n<| c |>\n`tr` is for translating characters, not swapping case. `next`\
    \ is for getting the next character in a string, `succ` is for getting the next\
    \ character in a string.\n<|/ c |>\n<| c |>\nI see. Thanks for explaining!\n<|/\
    \ c |>\n<| a tags=ruby,string,algorithm |>\n<code>", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase[1..-1]\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.downcase\n  end\n  message\nend", "  message.gsub(/[aeiou]/) { |vowel|\
    \ \n    alphabet.index(vowel) + alphabet.index(vowel.next)\n  }\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThanks so much for the help! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    if char.upcase == \"A\"\n      new_message << char.upcase\n \
    \   elsif char.upcase == \"E\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"I\"\n      new_message << char.upcase\n    elsif char.upcase == \"O\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"U\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"a\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"e\"\n      new_message << char.upcase\n    elsif char.upcase == \"i\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"o\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"u\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"b\"\n      new_message << char.upcase\n    elsif char.upcase == \"g\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"h\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"j\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"k\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"l\"\n      new_message << char.upcase\n    elsif char.upcase == \"m\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"n\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"p\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"q\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"r\"\n      new_message << char.upcase\n    elsif char.upcase == \"s\"\n\
    \      new_message << char.upcase\n    elsif char.up", "  new_message = \"\"\n\
    \  message.each_char do |char|\n    if char.upcase == char\n      new_message\
    \ << char.upcase\n    else\n      new_message << char.downcase\n    end\n  end\n\
    \  new_message.gsub(/[aeiou]/) do |char|\n    alphabet.index(char.downcase) +\
    \ 1\n  end\nend", "  message.gsub(/[aeiou]/) { |letter| \n    letter.upcase +\
    \ letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n\
    \  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter|\
    \ \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase\
    \ + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n\
    \  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter|\
    \ \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase\
    \ + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n\
    \  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter|\
    \ \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase\
    \ + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n\
    \  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/)\
    \ { |letter| \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter|\
    \ \n    letter.upcase + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase\
    \ + letter.succ\n  }.gsub(/[aeiou]/) { |letter| \n    letter.upcase + letter.succ\n\
    \  }.gsub(/[", "  message.gsub!(/[a-z]/) do |letter|\n    letter.upcase + letter.downcase\
    \ + letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    if char.upcase == \"A\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"E\"\n      new_message << char.upcase\n    elsif char.upcase == \"I\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"O\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"U\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"Y\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"a\"\n      new_message << char.upcase\n    elsif char.upcase == \"e\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"i\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"o\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"u\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"y\"\n      new_message << char.upcase\n    elsif char.upcase == \"A\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"E\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"I\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"O\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"U\"\n      new_message << char.upcase\n    elsif char.upcase == \"Y\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"a\"\n      new_message\
    \ << char.upcase\n    elsif char.upcase == \"e\"\n      new_message << char.upcase\n\
    \    elsif char.upcase == \"i\"\n      new_message << char.upcase\n    elsif char.upcase\
    \ == \"o\"\n      new_message << char.upcase\n    elsif char.upcase == \"u\"\n\
    \      new_message << char.upcase\n    elsif char.upcase == \"y\"\n      new_message\
    \ << char.upcase\n    elsif ", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n  end\n \
    \ message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/", "  new_message = \"\"\n  message.each_char do |char|\n\
    \    char.upcase if char.upcase == char\n    char.downcase if char.downcase ==\
    \ char\n    char.downcase if char.downcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase if char.upcase == char\n    char.upcase if char.upcase\
    \ == char\n    char.upcase ", "  message.gsub(/[a-z]/) { |letter| letter.upcase\
    \ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your help! I appreciate it.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  new_message = \"\"\n  message.each_char do |char|\n    char\
    \ = char.upcase if char.upcase == char\n    char = char.downcase if char.downcase\
    \ == char\n    char = char.swapcase\n    char = char.gsub(/[AEIOUaeiou]/, 'e')\n\
    \    char = char.gsub(/[AEIOUaeiou]/, 'i')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'o')\n    char = char.gsub(/[AEIOUaeiou]/, 'u')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'a')\n    char = char.gsub(/[AEIOUaeiou]/, 'e')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'i')\n    char = char.gsub(/[AEIOUaeiou]/, 'o')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'u')\n    char = char.gsub(/[AEIOUaeiou]/, 'a')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'e')\n    char = char.gsub(/[AEIOUaeiou]/, 'i')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'o')\n    char = char.gsub(/[AEIOUaeiou]/, 'u')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'a')\n    char = char.gsub(/[AEIOUaeiou]/, 'e')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'i')\n    char = char.gsub(/[AEIOUaeiou]/, 'o')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'u')\n    char = char.gsub(/[AEIOUaeiou]/, 'a')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'e')\n    char = char.gsub(/[AEIOUaeiou]/, 'i')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'o')\n    char = char.gsub(/[AEIOUaeiou]/, 'u')\n    char = char.gsub(/[AEIOUaeiou]/,\
    \ 'a')\n    char = char.gsub(/[AEIOUaeiou]/, 'e')\n    ", "  message.downcase!\n\
    \  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/)\
    \ { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n \
    \ message.gsub(/[aeiou]/) { |vowel| vowel.succ }\n  message.gsub(/[aeiou]/) {\
    \ |vowel", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase + letter.succ\n\
    \  end", "  message = message.downcase\n  vowels = %w(a e i o u)\n  message =\
    \ message.gsub(/[aeiou]/) { |m| vowels.index(m) }\n  message = message.gsub(/[aeiou]/)\
    \ { |m| vowels.index(m) + 2 }\n  message\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI like your solution. One thing I noticed is that it only works with English\
    \ letters. I tried to make it work for other languages by changing the vowels\
    \ array to: `vowels = %w(a e i o u u y o e i o u u y o e i o u u y o e i o u u\
    \ y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e\
    \ i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u\
    \ u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o\
    \ e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o\
    \ u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y\
    \ o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i\
    \ o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u\
    \ y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e\
    \ i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u u y o e i o u\
    \ u y o e i o u u y o e i o u u y o e i o u u y o e ", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[ae", "  new_message = \"\"\n  message.each_char\
    \ do |char|\n    index = alphabet.index(char)\n    next_index = alphabet.index(char.next)\n\
    \    \n    if index != nil\n      new_message << alphabet[index + 1]\n    elsif\
    \ next_index != nil\n      new_message << alphabet[next_index + 1]\n    else\n\
    \      new_message << char\n    end\n  end\n  new_message\nend", "  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.upcase\
    \ }\n  message.gsub!(/[aeiou]/) { |vowel| vowel.downcase }\n  message.gsub!(/[aeiou]/)\
    \ { |vowel| vowel.upcase }\n  message.gsub!(/[aeiou]/) { |", "  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }\n  message.gsub!(/[aeiou]/) { |x| x.upcase }\n  message.gsub!(/[aeiou]/)\
    \ { |x| x.upcase }", "  new_message = \"\"\n  message.each_char do |char|\n  \
    \  if char.upcase == char\n      new_message << char.upcase\n    elsif char.upcase\
    \ == char.next\n      new_message << char.next\n    else\n      new_message <<\
    \ char.upcase\n    end\n  end\n  new_message\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for the help! I really appreciate it!\n<|/ c |>\n<| c |>\nNo problem!\
    \ If this answer helped you, please accept it by clicking the check mark next\
    \ to it. Thanks!\n<|/ c |>\n<| c |>\nI did but since I'm new it says I have to\
    \ wait 5 minutes before accepting it\n<|/ c |>\n<| c |>\nNo worries, glad I could\
    \ help!\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.downcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n\
    \    letter.upcase\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.downcase\n\
    \  end\n  message.gsub!(/", "  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end\n  message.gsub!(/[aeiou]/) do |letter|\n    letter.upcase\
    \ + letter.succ\n  end", "  message.gsub!(/[a-z]/){|c| c.upcase }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  message.gsub!(/[aeiou]/){|c|\
    \ c.succ }\n  message.gsub!(/[aeiou]/){|c| c.succ }\n  ", "  message.gsub!(/[a-z]/)\
    \ do |letter|\n    letter.upcase + letter.downcase\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |vowel|\n    letter.upcase + letter.downcase + letter.upcase\n  end\n  message\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThanks for your answer. I'm\
    \ still learning Ruby and I appreciate your help. I understand that my code was\
    \ very inefficient. I'm still trying to figure out how to do this in Ruby without\
    \ using gsub!. Thanks again.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ use gsub!.\n<|/ c |>\n<| c |>\nThanks again. I'm still trying to figure out\
    \ how to do this in Ruby without using gsub!. Thanks again.\n<|/ c |>\n<| c |>\n\
    I added a version that doesn't use gsub!.\n<|/ c |>\n<| c |>\nThanks again. I'm\
    \ still trying to figure out how to do this in Ruby without using gsub!. Thanks\
    \ again.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  message.gsub!(/[aeiou]/) do\
    \ |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end\n  message.gsub!(/[aeiou]/)\
    \ do |letter|\n    letter.upcase + letter.succ\n  end", "  message = message.downcase\n\
    \  vowels = %w(a e i o u)\n  message.gsub(vowels) {|vowel| vowels[vowels.index(vowel)\
    \ + 1]}\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `%w(a e\
    \ i o u)` returns `[\"a\", \"e\", \"i\", \"o\", \"u\"]`, not `[\"A\", \"E\", \"\
    I\", \"O\", \"U\"]`.\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
