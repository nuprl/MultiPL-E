name: HumanEval_59_largest_prime_factor
language: rb
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n\
  # 2\ndef largest_prime_factor(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_largest_prime_factor\n\
  \    candidate = method(:largest_prime_factor)\n    assert_equal(5, candidate.call(15))\n\
  \    assert_equal(3, candidate.call(27))\n    assert_equal(7, candidate.call(63))\n\
  \    assert_equal(11, candidate.call(330))\n    assert_equal(29, candidate.call(13195))\n\
  \  end\nend\n"
completions: ["  factor = 1\n  while n > 1\n    factor += 1\n    n /= factor\n  factor\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n != 1\n\
    \    factors << i\n    n /= i\n    i += 1\n  factors.reverse\n  factors.last\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe that `largest_prime_factor`\
    \ should return `nil` instead of `0` when `n == 1`.\n<|/ c |>\n<| c |>\n: I agree,\
    \ that would be a better return value.\n<|/ c |>\n<| c |>\nI agree with you. `largest_prime_factor`\
    \ should return `nil` when `n` is `1`.\n<|/ c |>\n<| c |>\n: I agree, that would\
    \ be a better return value.\n<|/ c |>\n<| c |>\nI like your solution, but I believe\
    \ that `largest_prime_factor` should return `nil` instead of `0` when `n == 1`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>", "  factors = []\n  factor = 1\n  while n\
    \ > 1\n    factors << factor\n    n /= factor\n    factor += 1\n  end\n  factors.reverse\n\
    \  factors.first\nend", "  prime_divisors = prime_divisors_of(n)\n  prime_divisors.each\
    \ do |prime_divisor|\n    if n % prime_divisor == 0\n      return prime_divisor\n\
    \    end\n  end\n  raise \"n must be greater than 1 and be a prime\"\nend", " \
    \ primes = prime_factors(n)\n  primes.reduce(:max)\nend", "  factors = []\n  i\
    \ = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n\
    \    i += 2\n  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while\
    \ i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while\
    \ i * i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n\
    \  factors.reverse\n  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n /\
    \ 2\n    factors.push(i)\n    i += 2\n  factors.reverse\n  i = 2\n  while i *\
    \ i <= n\n    i += 1\n  while i <= n / 2\n    factors.push(i)\n    i += 2\n  factors.",
  "  prime_divisor = 1\n  prime_factor = 1\n  while prime_divisor <= n\n    prime_divisor\
    \ = prime_divisor * 2\n    prime_factor = prime_factor + 1 if prime_divisor <=\
    \ n and n % prime_divisor == 0\n  end\n  prime_factor\nend", "  factors = []\n\
    \  i = 2\n  while i * i <= n\n    i += 1\n  while i <= n\n    factors.push(i)\n\
    \    i += 2\n  factors.each do |factor|\n    if n % factor == 0\n      break\n\
    \    end\n  end\n  if factor == 1\n    n\n  else\n    factor\n  end\nend", " \
    \ prime_divisors = prime_divisors(n)\n  prime_divisors.each do |prime_divisor|\n\
    \    if n % prime_divisor == 0\n      return prime_divisor\n    end\n  end\nend",
  "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n  while n % i == 0\n \
    \   n /= i\n    factors.push(i)\n  factors.reverse\n  factors.find { |f| f > n\
    \ }\nend", "  factors = []\n  i = 1\n  while i * i <= n\n    i += 1\n  while n\
    \ >= i\n    factors.push(i)\n    n /= i\n  factors.push(n)\n  factors.reverse\n\
    \  factors.inject(:*)\nend", "  prime_divisors = []\n  i = 2\n  while i <= n do\n\
    \    if n % i == 0 then\n      prime_divisors << i\n      n /= i\n    end\n  \
    \  i += 1\n  end\n  prime_divisors << n\n  prime_divisors.max\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=ruby,primes |>\n<code>", "  factors = []\n  factor\
    \ = 1\n  while n > 1\n    factors << factor\n    n /= factor\n    factor += 1\n\
    \  end\n  factors.reverse\n  factors.last\nend", "  prime_divisor = 1\n  while\
    \ n > prime_divisor\n    prime_divisor = prime_divisor * prime_divisor\n    n\
    \ /= prime_divisor\n  end\n  prime_divisor\nend", "  prime_divisors = prime_divisors_of(n)\n\
    \  prime_divisors.each do |prime_divisor|\n    if n % prime_divisor == 0\n   \
    \   return prime_divisor\n    end\n  end\n  raise \"n must be greater than 1 and\
    \ be a prime\"\nend", "  factors = []\n  i = 2\n  while i * i <= n\n    i += 1\n\
    \  while n % i == 0\n    n /= i\n    factors << i\n    i += 1\n  factors << n\
    \ if n > 1\n  factors.max\nend", "  prime_divisors = []\n  prime_divisors_count\
    \ = 0\n  prime_divisors_limit = nil\n  prime_divisors_limit = n.to_i\n  while\
    \ prime_divisors_count < prime_divisors_limit\n    prime_divisors_count += 1\n\
    \    prime_divisor = prime_divisors.shift\n    prime_divisor = prime_divisor +\
    \ 1 if prime_divisor % 2 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor\
    \ % 3 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor % 5 == 0\n\
    \    prime_divisor = prime_divisor + 1 if prime_divisor % 7 == 0\n    prime_divisor\
    \ = prime_divisor + 1 if prime_divisor % 11 == 0\n    prime_divisor = prime_divisor\
    \ + 1 if prime_divisor % 13 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor\
    \ % 17 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor % 19 == 0\n\
    \    prime_divisor = prime_divisor + 1 if prime_divisor % 23 == 0\n    prime_divisor\
    \ = prime_divisor + 1 if prime_divisor % 29 == 0\n    prime_divisor = prime_divisor\
    \ + 1 if prime_divisor % 31 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor\
    \ % 37 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor % 41 == 0\n\
    \    prime_divisor = prime_divisor + 1 if prime_divisor % 43 == 0\n    prime_divisor\
    \ = prime_divisor + 1 if prime_divisor % 47 == 0\n    prime_divisor = prime_divisor\
    \ + 1 if prime_divisor % 53 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor\
    \ % 59 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor % 61 == 0\n\
    \    prime_divisor = prime_divisor + 1 if prime_divisor % 67 == 0\n    prime_divisor\
    \ = prime_divisor + 1 if prime_divisor % 71 == 0\n    prime_divisor = prime_divisor\
    \ + 1 if prime_divisor % 73 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor\
    \ % 79 == 0\n    prime_divisor = prime_divisor + 1 if prime_divisor % 83 == 0\n\
    \    prime_divisor = prime_divisor + 1 if ", "  prime_divisors(n)\n  prime_divisors.reduce(:max)\n\
    end", "  factors = []\n  i = 2\n  while i * i <= n\n    factors.push(i)\n    i\
    \ += 1\n  factors.each do |factor|\n    if n % factor == 0\n      return factor\n\
    \    end\n  end\n  raise \"n must be greater than 1 and be a prime\"\nend", " \
    \ return n if n < 2 else largest_prime_factor(n / 2)\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
