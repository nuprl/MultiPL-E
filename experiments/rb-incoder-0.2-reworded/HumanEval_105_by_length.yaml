name: HumanEval_105_by_length
language: rb
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
  Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>>\
  \ by_length.call([])\n# []\n# If the array has any strange number ignore it:\n#\
  \ >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_by_length\n\
  \    candidate = method(:by_length)\n    assert_equal([\"Eight\", \"Five\", \"Four\"\
  , \"Three\", \"Two\", \"Two\", \"One\", \"One\"], candidate.call([2, 1, 1, 4, 5,\
  \ 8, 2, 3]))\n    assert_equal([], candidate.call([]))\n    assert_equal([\"One\"\
  ], candidate.call([1, -1, 55]))\n    assert_equal([\"Three\", \"Two\", \"One\"],\
  \ candidate.call([1, -1, 3, 2]))\n    assert_equal([\"Nine\", \"Eight\", \"Four\"\
  ], candidate.call([9, 4, 8]))\n  end\nend\n"
completions: ["  arr.sort!\n  arr.map! {|x| x if x >= 1 && x <= 9 ? by_length_name[x]\
    \ : x}\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x.to_s.reverse\
    \ }.uniq\nend", "  return arr.reverse if arr.length > 0 && !arr.include?(0) &&\
    \ !arr.include?(9) ?\n    arr.map { |n| [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"].\n      find { |s| s == n.to_s.to_i\
    \ } } :\n    []\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x.to_s.reverse\
    \ }.uniq\nend", "  arr.sort!\n  arr.map! {|x| x if 1 <= x && x <= 9 }\n  arr.empty?\
    \ ? [] : arr.map {|x| x.to_s }\nend", "  arr.sort!\n  arr.map! { |x| x < 10 ?\
    \ \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" :\
    \ x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x\
    \ < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n\
    \  arr\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x % 10 == 0 ? \"\
    One\" : x % 10 == 1 ? \"Two\" : x % 10 == 2 ? \"Three\" : x % 10 == 3 ? \"Four\"\
    \ : x % 10 == 4 ? \"Five\" : x % 10 == 5 ? \"Six\" : x % 10 == 6 ? \"Seven\" :\
    \ x % 10 == 7 ? \"Eight\" : x % 10 == 8 ? \"Nine\" : nil }\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |x| x.to_s.reverse }.uniq\nend", "  arr.sort!\n\
    \  arr.empty? ? [] : arr.map { |n| n < 10 ? \"One\" : n < 100 ? \"Two\" : n <\
    \ 1000 ? \"Three\" : n < 10000 ? \"Four\" : n < 100000 ? \"Five\" : n < 1000000\
    \ ? \"Six\" : n < 10000000 ? \"Seven\" : n < 100000000 ? \"Eight\" : n < 1000000000\
    \ ? \"Nine\" : n }\nend", "  arr.sort!\n  arr.empty? ? [] : arr.map { |n| n.to_s.reverse\
    \ }.uniq\nend", "  arr.sort!\n  arr.map!{ |x| x < 10 ? x : \"One\" }\n  arr.map!{\
    \ |x| x > 9 ? x : \"Nine\" }\n  arr.reverse!\n  arr\nend", "  arr.sort!\n  arr.empty?\
    \ ? [] : arr.map { |x| [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\"][x - 1] }.join\nend", "  arr.sort!\n  arr.each\
    \ do |i|\n    arr[i] = \"One\" if i == 1\n    arr[i] = \"Two\" if i == 2\n   \
    \ arr[i] = \"Three\" if i == 3\n    arr[i] = \"Four\" if i == 4\n    arr[i] =\
    \ \"Five\" if i == 5\n    arr[i] = \"Six\" if i == 6\n    arr[i] = \"Seven\" if\
    \ i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i] = \"Nine\" if i == 9\n\
    \  end\n  arr.reverse!\n  arr.map do |i|\n    arr[i] = \"One\" if i == 1\n   \
    \ arr[i] = \"Two\" if i == 2\n    arr[i] = \"Three\" if i == 3\n    arr[i] = \"\
    Four\" if i == 4\n    arr[i] = \"Five\" if i == 5\n    arr[i] = \"Six\" if i ==\
    \ 6\n    arr[i] = \"Seven\" if i == 7\n    arr[i] = \"Eight\" if i == 8\n    arr[i]\
    \ = \"Nine\" if i == 9\n  end\n  arr\nend", "  arr.sort!\n  arr.empty? ? [] :\
    \ arr.map { |n| n.to_s.reverse }.map { |n| names[n] }\nend", "  arr.sort!\n  arr.map!\
    \ do |x|\n    if x < 1 || x > 9\n      nil\n    else\n      x = x.to_s\n     \
    \ x = x.reverse\n      x = x.gsub(\"1\", \"One\")\n      x = x.gsub(\"2\", \"\
    Two\")\n      x = x.gsub(\"3\", \"Three\")\n      x = x.gsub(\"4\", \"Four\")\n\
    \      x = x.gsub(\"5\", \"Five\")\n      x = x.gsub(\"6\", \"Six\")\n      x\
    \ = x.gsub(\"7\", \"Seven\")\n      x = x.gsub(\"8\", \"Eight\")\n      x = x.gsub(\"\
    9\", \"Nine\")\n      x\n    end\n  end\n  arr\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=ruby |>\n<code>", "  arr.sort!\n  arr.map! { |x| x < 10 ? \"One\" :\
    \ x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\" : x < 100000\
    \ ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" : x < 100000000\
    \ ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n  arr\nend",
  "  arr.sort!\n  arr.empty? ? [] : arr.map { |x| x.to_s.reverse }.uniq\nend", " \
    \ arr.sort!\n  arr.map! do |x|\n    if x < 10\n      \"One\"\n    elsif x < 100\n\
    \      \"Two\"\n    elsif x < 1000\n      \"Three\"\n    elsif x < 10000\n   \
    \   \"Four\"\n    elsif x < 100000\n      \"Five\"\n    elsif x < 1000000\n  \
    \    \"Six\"\n    elsif x < 10000000\n      \"Seven\"\n    elsif x < 100000000\n\
    \      \"Eight\"\n    elsif x < 1000000000\n      \"Nine\"\n    else\n      x\n\
    \    end\n  end\n  arr\nend", "  arr.sort!\n  arr.map! do |n|\n    if n < 10\n\
    \      n\n    elsif n < 100\n      \"#{n}One\"\n    elsif n < 1000\n      \"#{n}Two\"\
    \n    elsif n < 10000\n      \"#{n}Three\"\n    elsif n < 100000\n      \"#{n}Four\"\
    \n    elsif n < 1000000\n      \"#{n}Five\"\n    elsif n < 10000000\n      \"\
    #{n}Six\"\n    elsif n < 100000000\n      \"#{n}Seven\"\n    elsif n < 1000000000\n\
    \      \"#{n}Eight\"\n    elsif n < 10000000000\n      \"#{n}Nine\"\n    else\n\
    \      nil\n    end\n  end\n  arr\nend", "  arr.sort!\n  arr.map! { |x| x < 10\
    \ ? \"One\" : x < 100 ? \"Two\" : x < 1000 ? \"Three\" : x < 10000 ? \"Four\"\
    \ : x < 100000 ? \"Five\" : x < 1000000 ? \"Six\" : x < 10000000 ? \"Seven\" :\
    \ x < 100000000 ? \"Eight\" : x < 1000000000 ? \"Nine\" : x }\n  arr.reverse!\n\
    \  arr\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
