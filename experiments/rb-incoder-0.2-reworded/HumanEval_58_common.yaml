name: HumanEval_58_common
language: rb
prompt: "# Return sorted unique common elements for two arrays.\n# >>> common.call([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5,\
  \ 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_common\n\
  \    candidate = method(:common)\n    assert_equal([1, 5, 653], candidate.call([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    assert_equal([2, 3], candidate.call([5,\
  \ 3, 2, 8], [3, 2]))\n    assert_equal([2, 3, 4], candidate.call([4, 3, 2, 8], [3,\
  \ 2, 4]))\n    assert_equal([], candidate.call([4, 3, 2, 8], []))\n  end\nend\n"
completions: ["  l1.each do |item1|\n    l2.each do |item2|\n      return item1 if\
    \ item1 == item2\n    end\n  end\n  nil\nend", "  l1.each do |item1|\n    l2.each\
    \ do |item2|\n      return item1 if item1 == item2\n    end\n  end\n  nil\nend",
  "  l1.zip(l2).map { |x, y| x if x == y }\nend", "  l1.zip(l2).to_a.sort.uniq\nend",
  "  l1.zip(l2).select { |e1, e2| e1 == e2 }\nend", "  l1.each do |e|\n    l2.each\
    \ do |f|\n      return e if e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).select\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return\
    \ x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x, i|\n\
    \    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find\
    \ do |a, b|\n    a == b\n  end\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).map { |x, y| x if x == y }\nend", "  l1.each do |i|\n    l2.each\
    \ do |j|\n      return i if i == j\n    end\n  end\n  nil\nend", "  l1.each do\
    \ |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend",
  "  l1.each do |item1|\n    l2.each do |item2|\n      return item1 if item1 == item2\n\
    \    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return\
    \ x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x, i|\n\
    \    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n\
    \    end\n  end\n  nil\nend", "  l1.zip(l2).select { |x, y| x == y }\nend", " \
    \ l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).map { |x, y| x if\
    \ x == y }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y,\
    \ j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).select { |x, y| x == y }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).select { |e1,\
    \ e2| e1 == e2 }.map(&:first)\nend", "  l1.each do |x|\n    l2.each do |y|\n \
    \     return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n   \
    \ l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n  nil\n\
    end", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n    \
    \  return i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |a, b|\
    \ a == b }\nend", "  l1.zip(l2).select { |e1, e2| e1 == e2 }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).find { |x, y| x == y }\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find\
    \ { |x, y| x == y }\nend", "  l1.zip(l2).select { |x, y| x == y }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if\
    \ x == y\n    end\n  end\n  nil\nend", "  l1.each do |e|\n    l2.each do |f|\n\
    \      return e if e == f\n    end\n  end\n  nil\nend", "  l1.each do |i|\n  \
    \  l2.each do |j|\n      return i if i == j\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e| e[0] == e[1] }.map(&:first)\nend", "  l1.each do |x|\n    l2.each do |y|\n\
    \      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.sort\
    \ { |a, b| a <=> b }.first(2)\nend", "  l1.each do |x|\n    l2.each do |y|\n \
    \     return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).map { |x, y| x if x == y }\nend",
  "  l1.each do |e|\n    l2.each do |f|\n      return e if e == f\n    end\n  end\n\
    \  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n\
    \    end\n  end\n  nil\nend", "  l1.each do |e|\n    l2.each do |f|\n      return\
    \ e if e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).map { |e| e[0] & e[1]\
    \ }.flatten.uniq\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if\
    \ x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).select { |x, y| x == y }\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if\
    \ x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).select\
    \ { |x, y| x == y }.map(&:first)\nend", "  l1.each do |x|\n    l2.each do |y|\n\
    \      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n  \
    \  l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find\
    \ { |x, y| x == y }\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", " \
    \ l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find do |a, b|\n    a.first == b.first\n  end\n\
    end", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.each do |x|\n    l2.each do |y|\n\
    \      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |e1,\
    \ e2| e1 == e2 }\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |item1|\n    l2.each do |item2|\n      return\
    \ item1 if item1 == item2\n    end\n  end\nend", "  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.each do |item1|\n    l2.each do |item2|\n      return item1\
    \ if item1 == item2\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.sort.uniq\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).select { |e1, e2| e1 == e2 }.flatten.uniq\n\
    end", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n    \
    \  return i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index\
    \ do |e, i|\n    l2.each_with_index do |f, j|\n      return i if e == f\n    end\n\
    \  end\n  nil\nend", "  l1.each do |e|\n    l2.each do |f|\n      return e if\
    \ e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2\
    \ }\nend", "  l1.each do |e|\n    l2.each do |f|\n      return e if e == f\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).map { |x, y| x if x == y }\nend", " \
    \ l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n      return\
    \ i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do\
    \ |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n\
    \    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", " \
    \ l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n\
    \  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n\
    \    end\n  end\n  nil\nend", "  l1.each do |e|\n    l2.each do |f|\n      return\
    \ e if e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.select { |e| e[0]\
    \ == e[1] }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x\
    \ == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |a, b| a == b }\nend",
  "  l1.each do |e|\n    l2.each do |f|\n      return e if e == f\n    end\n  end\n\
    \  nil\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n\
    \      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |i|\n  \
    \  l2.each do |j|\n      return i if i == j\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n  nil\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).select\
    \ { |e1, e2| e1 == e2 }.map(&:first)\nend", "  l1.each do |e|\n    l2.each do\
    \ |f|\n      return e if e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).select\
    \ { |x, y| x == y }.flatten\nend", "  l1.each do |x|\n    l2.each do |y|\n   \
    \   return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |e|\n    l2.each\
    \ do |f|\n      return e if e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).map\
    \ { |x, y| x if x == y }\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend",
  "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n\
    \  nil\nend", "  l1.zip(l2).to_a.sort.uniq.to_a\nend", "  l1.zip(l2).find { |x,\
    \ y| x == y }\nend", "  l1.zip(l2).select { |x, y| x == y }\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).map { |a, b| a & b }.flatten.sort\nend", "  l1.zip(l2).map\
    \ { |x, y| x if x == y }\nend", "  l1.zip(l2).to_a.sort.uniq.to_a\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if\
    \ x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index\
    \ do |y, j|\n      return i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find\
    \ do |a, b|\n    a.first == b.first\n  end\nend", "  l1.zip(l2).find { |e1, e2|\
    \ e1 == e2 }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x\
    \ == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).select { |e1, e2| e1 == e2\
    \ }.flatten\nend", "  l1.each do |item1|\n    l2.each do |item2|\n      return\
    \ item1 if item1 == item2\n    end\n  end\n  nil\nend", "  l1.zip(l2).find do\
    \ |a, b|\n    a.first == b.first\n  end\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do\
    \ |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend",
  "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n\
    \  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n\
    \    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do |y|\n      return\
    \ x if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do\
    \ |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).select\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).to_a.sort.uniq\nend", "  l1.each_with_index\
    \ do |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n    \
    \  return i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do\
    \ |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend",
  "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n\
    \    end\n  end\n  nil\nend", "  l1.each do |i|\n    l2.each do |j|\n      return\
    \ i if i == j\n    end\n  end\nend", "  l1.each do |i|\n    l2.each do |j|\n \
    \     return i if i == j\n    end\n  end\nend", "  l1.each do |x|\n    l2.each\
    \ do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each do\
    \ |e|\n    l2.each do |f|\n      return e if e == f\n    end\n  end\n  nil\nend",
  "  l1.zip(l2).map { |e| e[0] & e[1] }.uniq.sort\nend", "  l1.zip(l2).find { |x,\
    \ y| x == y }\nend", "  l1.zip(l2).find do |a, b|\n    a != b\n  end\nend", " \
    \ l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.zip(l2).map { |x, y| x if x == y }\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find do |a, b|\n    a.first == b.first\n\
    \  end\nend", "  l1.zip(l2).select { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.each do |i|\n    l2.each do |j|\n      return\
    \ i if i == j\n    end\n  end\n  nil\nend", "  l1.zip(l2).find do |a, b|\n   \
    \ a.first == b.first\n  end\nend", "  l1.each do |x|\n    l2.each do |y|\n   \
    \   return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).to_a.sort.uniq\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.zip(l2).map { |x, y| x if x == y }\nend", "  l1.zip(l2).find\
    \ { |x, y| x == y }\nend", "  l1.zip(l2).map { |x, y| x if x == y }.compact\n\
    end", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n\
    \  end\n  nil\nend", "  l1.each do |e|\n    l2.each do |f|\n      return e if\
    \ e == f\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2\
    \ }\nend", "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).find { |x, y| x == y }\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n    \
    \  return i if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do |x,\
    \ i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n  end\n\
    \  nil\nend", "  l1.zip(l2).select { |e1, e2| e1 == e2 }.map(&:first)\nend", " \
    \ l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n      return\
    \ i if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find { |a, b| a == b\
    \ }\nend", "  l1.each do |x|\n    l2.each do |y|\n      return x if x == y\n \
    \   end\n  end\n  nil\nend", "  l1.zip(l2).map { |x, y| x if x == y }\nend", " \
    \ l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n      return\
    \ i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n    l2.each do\
    \ |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.zip(l2).find\
    \ { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).find { |e1, e2| e1 == e2 }\nend",
  "  l1.each do |i|\n    l2.each do |j|\n      return i if i == j\n    end\n  end\n\
    \  nil\nend", "  l1.each_with_index do |x, i|\n    l2.each_with_index do |y, j|\n\
    \      return i if x == y\n    end\n  end\n  nil\nend", "  l1.each do |x|\n  \
    \  l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\nend", "  l1.each\
    \ do |x|\n    l2.each do |y|\n      return x if x == y\n    end\n  end\n  nil\n\
    end", "  l1.zip(l2).select { |e1, e2| e1 == e2 }\nend", "  l1.zip(l2).map { |e|\
    \ e[0] & e[1] }.flatten.sort\nend", "  l1.each do |x|\n    l2.each do |y|\n  \
    \    return x if x == y\n    end\n  end\n  nil\nend", "  l1.each_with_index do\
    \ |x, i|\n    l2.each_with_index do |y, j|\n      return i if x == y\n    end\n\
    \  end\n  nil\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
