name: HumanEval_89_encrypt
language: rb
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"\
  asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"\
  et\")\n# \"ix\"\ndef encrypt(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_encrypt\n\
  \    candidate = method(:encrypt)\n    assert_equal(\"lm\", candidate.call(\"hi\"\
  ))\n    assert_equal(\"ewhjklnop\", candidate.call(\"asdfghjkl\"))\n    assert_equal(\"\
  kj\", candidate.call(\"gf\"))\n    assert_equal(\"ix\", candidate.call(\"et\"))\n\
  \    assert_equal(\"jeiajeaijeiak\", candidate.call(\"faewfawefaewg\"))\n    assert_equal(\"\
  lippsqcjvmirh\", candidate.call(\"hellomyfriend\"))\n    assert_equal(\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  , candidate.call(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"))\n    assert_equal(\"\
  e\", candidate.call(\"a\"))\n  end\nend\n"
completions: ["  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[1])\
    \ - 2] + alphabet[alphabet.index(alphabet[2]) - 2] + alphabet[alphabet.index(alphabet[3])\
    \ - 2] + alphabet[alphabet.index(alphabet[4]) - 2] + alphabet[alphabet.index(alphabet[5])\
    \ - 2] + alphabet[alphabet.index(alphabet[6]) - 2] + alphabet[alphabet.index(alphabet[7])\
    \ - 2] + alphabet[alphabet.index(alphabet[8]) - 2] + alphabet[alphabet.index(alphabet[9])\
    \ - 2] + alphabet[alphabet.index(alphabet[10]) - 2] + alphabet[alphabet.index(alphabet[11])\
    \ - 2] + alphabet[alphabet.index(alphabet[12]) - 2] + alphabet[alphabet.index(alphabet[13])\
    \ - 2] + alphabet[alphabet.index(alphabet[14]) - 2] + alphabet[alphabet.index(alphabet[15])\
    \ - 2] + alphabet[alphabet.index(alphabet[16]) - 2] + alphabet[alphabet.index(alphabet[17])\
    \ - 2] + alphabet[alphabet.index(alphabet[18]) - 2] + alphabet[alphabet.index(alphabet[19])\
    \ - 2] + alphabet[alphabet.index(alphabet[20]) - 2] + alphabet[alphabet.index(alphabet[21])\
    \ - 2] + alphabet[alphabet.index(alphabet[22]) - 2] + alphabet[alphabet.index(alphabet[23])\
    \ - 2] + alphabet[alphabet.index(alphabet[24]) - 2] + alphabet[alphabet.index(alphabet[25])\
    \ - 2] + alphabet[alphabet.index(alphabet[26]) - 2] + alphabet[alphabet.index(alphabet[27])\
    \ - 2] + alphabet[alphabet.index(alphabet[28]) - 2] + alphabet[alphabet.index(alphabet[29])\
    \ - 2] + alphabet[alphabet.index(alphabet[30]) - 2] + alphabet[alphabet.index(alphabet[31])\
    \ - 2] + alphabet[alphabet.index(alphabet[32]) - 2] + alphabet[alphabet.index(alphabet[33])\
    \ - 2] + alphabet[alphabet.index(alphabet[34]) - 2] + alphabet[alphabet.index(alphabet[35])\
    \ - 2] + alphabet[alphabet.index(alphabet[36]) - 2] + alphabet[alphabet.index(alphabet[37])\
    \ - 2] + alphabet[alphabet.index(alphabet[38]) - 2] + alphabet[alphabet.index(alphabet[39])\
    \ - 2] + alphabet[alphabet.index(alphabet[40]) - 2] + alphabet[alphabet.index(alphabet[41])\
    \ - 2] + alphabet[alphabet.index(alphabet[42]) - 2] + alphabet", "  alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet)-2\
    \ : alphabet.index(alphabet)+2]\n  alphabet = alphabet[alphabet.index(alphabet)+2\
    \ : alphabet.index(alphabet)+4]\n  alphabet = alphabet[alphabet.index(alphabet)+4\
    \ : alphabet.index(alphabet)+6]\n  alphabet = alphabet[alphabet.index(alphabet)+6\
    \ : alphabet.index(alphabet)+8]\n  alphabet = alphabet[alphabet.index(alphabet)+8\
    \ : alphabet.index(alphabet)+10]\n  alphabet = alphabet[alphabet.index(alphabet)+10\
    \ : alphabet.index(alphabet)+12]\n  alphabet = alphabet[alphabet.index(alphabet)+12\
    \ : alphabet.index(alphabet)+14]\n  alphabet = alphabet[alphabet.index(alphabet)+14\
    \ : alphabet.index(alphabet)+16]\n  alphabet = alphabet[alphabet.index(alphabet)+16\
    \ : alphabet.index(alphabet)+18]\n  alphabet = alphabet[alphabet.index(alphabet)+18\
    \ : alphabet.index(alphabet)+20]\n  alphabet = alphabet[alphabet.index(alphabet)+20\
    \ : alphabet.index(alphabet)+22]\n  alphabet = alphabet[alphabet.index(alphabet)+22\
    \ : alphabet.index(alphabet)+24]\n  alphabet = alphabet[alphabet.index(alphabet)+24\
    \ : alphabet.index(alphabet)+26]\n  alphabet = alphabet[alphabet.index(alphabet)+26\
    \ : alphabet.index(alphabet)+28]\n  alphabet = alphabet[alphabet.index(alphabet)+28\
    \ : alphabet.index(alphabet)+30]\n  alphabet = alphabet[alphabet.index(alphabet)+30\
    \ : alphabet.index(alphabet)+32]\n  alphabet = alphabet[alphabet.index(alphabet)+32\
    \ : alphabet.index(alphabet)+34]\n  alphabet = alphabet[alphabet.index(alphabet)+34\
    \ : alphabet.index(alphabet)+36]\n  alphabet = alphabet[alphabet.index(alphabet)+36\
    \ : alphabet.index(alphabet)+38]\n  alphabet = alphabet[alphabet.index(alphabet)+38\
    \ : alphabet.index(alphabet)+40]\n  alphabet = alphabet[alphabet.index(alphabet)+40\
    \ : alphabet.index(alphabet)+42]\n  alphabet = alphabet[alphabet.index(alphabet)+42\
    \ : alphabet.index(alphabet)+44]\n  alphabet = alphabet[alphabet.index(alphabet)+44\
    \ : alphabet.index(alphabet)+46]\n  alphabet = alphabet[alphabet.index(alphabet)+46\
    \ : alphabet.index(alphabet)+48]\n  alphabet = alphabet[alphabet.index(alphabet)+48\
    \ : alphabet.index(alphabet)+50]\n  alphabet = ", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) +\
    \ 1]\n  end.join\nend", "  s.chars.each_with_index do |c, i|\n    next if i ==\
    \ 0\n    next if c == s.chars.last\n    next if c == s.chars.first\n    next if\
    \ c == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.last\n\
    \    next if c == s.chars.first\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.first\n\
    \    next if c == s.chars.last\n    next if c == s.chars.first\n    next if c\
    \ == s.chars.last\n    next if c == s.chars.first\n    next if c == s.chars.last\n\
    \    next if c == s.chars.first\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.first\n\
    \    next if c == s.chars.last\n    next if c == s.chars.first\n    next if c\
    \ == s.chars.last\n    next if c == s.chars.first\n    next if c == s.chars.last\n\
    \    next if c == s.chars.first\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.first\n\
    \    next if c == s.chars.last\n    next if c == s.chars.first\n    next if c\
    \ == s.chars.last\n    next if c == s.chars.first\n    next if c == s.chars.last\n\
    \    next if c == s.chars.first\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.first\n\
    \    next if c == s.chars.last\n    next if c == s.chars.first\n    next if c\
    \ == s.chars.last\n    next if c == s.chars.first\n    next if c == s.chars.last\n\
    \    next if c == s.chars.first\n    next if c == s.chars.last\n    next if c\
    \ == s.chars.first\n    next if c == s.chars.last\n    next if c == s.chars.first\n\
    \    next if c == s.chars.last\n    next if c == s.chars.first\n    next if c\
    \ == s.chars.last\n    next if c == s.chars.first\n    next if c == s.chars.",
  "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'e'\n    next\
    \ if c.downcase == 'i'\n    next if c.downcase == 'o'\n    next if c.downcase\
    \ == 'u'\n    next if c.downcase == 'y'\n    next if c.downcase == 'r'\n    next\
    \ if c.downcase == 't'\n    next if c.downcase == 's'\n    next if c.downcase\
    \ == 'd'\n    next if c.downcase == 'f'\n    next if c.downcase == 'g'\n    next\
    \ if c.downcase == 'h'\n    next if c.downcase == 'j'\n    next if c.downcase\
    \ == 'k'\n    next if c.downcase == 'l'\n    next if c.downcase == 'n'\n    next\
    \ if c.downcase == 'p'\n    next if c.downcase == 'q'\n    next if c.downcase\
    \ == 'p'\n    next if c.downcase == 'o'\n    next if c.downcase == 'q'\n    next\
    \ if c.downcase == 'r'\n    next if c.downcase == 's'\n    next if c.downcase\
    \ == 't'\n    next if c.downcase == 'u'\n    next if c.downcase == 'v'\n    next\
    \ if c.downcase == 'w'\n    next if c.downcase == 'x'\n    next if c.downcase\
    \ == 'y'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'b'\n    next if c.downcase == 'c'\n    next if c.downcase\
    \ == 'd'\n    next if c.downcase == 'e'\n    next if c.downcase == 'f'\n    next\
    \ if c.downcase == 'g'\n    next if c.downcase == 'h'\n    next if c.downcase\
    \ == 'i'\n    next if c.downcase == 'j'\n    next if c.downcase == 'k'\n    next\
    \ if c.downcase == 'l'\n    next if c.downcase == 'm'\n    next if c.downcase\
    \ == 'n'\n    next if c.downcase == 'o'\n    next if c.downcase == 'p'\n    next\
    \ if c.downcase == 'q'\n    next if c.downcase == 'r'\n    next if c.downcase\
    \ == 's'\n    next if c.downcase == 't", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  s.chars.each do |c|\n    next if c.upcase == c\n\
    \    next if c.downcase == c\n    next if c.length != 1\n    next if c.length\
    \ != 2\n    next if c.length != 3\n    next if c.length != 4\n    next if c.length\
    \ != 5\n    next if c.length != 6\n    next if c.length != 7\n    next if c.length\
    \ != 8\n    next if c.length != 9\n    next if c.length != 10\n    next if c.length\
    \ != 11\n    next if c.length != 12\n    next if c.length != 13\n    next if c.length\
    \ != 14\n    next if c.length != 15\n    next if c.length != 16\n    next if c.length\
    \ != 17\n    next if c.length != 18\n    next if c.length != 19\n    next if c.length\
    \ != 20\n    next if c.length != 21\n    next if c.length != 22\n    next if c.length\
    \ != 23\n    next if c.length != 24\n    next if c.length != 25\n    next if c.length\
    \ != 26\n    next if c.length != 27\n    next if c.length != 28\n    next if c.length\
    \ != 29\n    next if c.length != 30\n    next if c.length != 31\n    next if c.length\
    \ != 32\n    next if c.length != 33\n    next if c.length != 34\n    next if c.length\
    \ != 35\n    next if c.length != 36\n    next if c.length != 37\n    next if c.length\
    \ != 38\n    next if c.length != 39\n    next if c.length != 40\n    next if c.length\
    \ != 41\n    next if c.length != 42\n    next if c.length != 43\n    next if c.length\
    \ != 44\n    next if c.length != 45\n    next if c.length != 46\n    next if c.length\
    \ != 47\n    next if c.length != 48\n    next if c.length != 49\n    next if c.length\
    \ != 50\n    next if c.length != 51\n    next if c.length != 52\n    next if c.length\
    \ != 53\n    next if c.length != 54\n    next if c.length != 55\n    next if c.length\
    \ != 56\n    next if c.length != 57\n    next if c.length != 58\n    next if c.length\
    \ != 59\n    next if c.length != 60\n    next if c.length", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c|\
    \ c.chr + c.chr * 2 }.join\nend", "  s.chars.each_with_index do |char, i|\n  \
    \  next if char == \" \"\n    next if char == \"\\n\"\n    next if char == \"\\\
    t\"\n    next if char == \"\\r\"\n    next if char == \"\\0\"\n    next if char\
    \ == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) - 1] + alphabet[alphabet.index(alphabet[0])\
    \ - 3] + alphabet[alphabet.index(alphabet[0]) - 4] + alphabet[alphabet.index(alphabet[0])\
    \ - 5] + alphabet[alphabet.index(alphabet[0]) - 6] + alphabet[alphabet.index(alphabet[0])\
    \ - 7] + alphabet[alphabet.index(alphabet[0]) - 8] + alphabet[alphabet.index(alphabet[0])\
    \ - 9] + alphabet[alphabet.index(alphabet[0]) - 10] + alphabet[alphabet.index(alphabet[0])\
    \ - 11] + alphabet[alphabet.index(alphabet[0]) - 12] + alphabet[alphabet.index(alphabet[0])\
    \ - 13] + alphabet[alphabet.index(alphabet[0]) - 14] + alphabet[alphabet.index(alphabet[0])\
    \ - 15] + alphabet[alphabet.index(alphabet[0]) - 16] + alphabet[alphabet.index(alphabet[0])\
    \ - 17] + alphabet[alphabet.index(alphabet[0]) - 18] + alphabet[alphabet.index(alphabet[0])\
    \ - 19] + alphabet[alphabet.index(alphabet[0]) - 20] + alphabet[alphabet.index(alphabet[0])\
    \ - 21] + alphabet[alphabet.index(alphabet[0]) - 22] + alphabet[alphabet.index(alphabet[0])\
    \ - 23] + alphabet[alphabet.index(alphabet[0]) - 24] + alphabet[alphabet.index(alphabet[0])\
    \ - 25] + alphabet[alphabet.index(alphabet[0]) - 26] + alphabet[alphabet.index(alphabet[0])\
    \ - 27] + alphabet[alphabet.index(alphabet[0]) - 28] + alphabet[alphabet.index(alphabet[0])\
    \ - 29] + alphabet[alphabet.index(alphabet[0]) - 30] + alphabet[alphabet.index(alphabet[0])\
    \ - 31] + alphabet[alphabet.index(alphabet[0]) - 32] + alphabet[alphabet.index(alphabet[0])\
    \ - 33] + alphabet[alphabet.index(alphabet[0]) - 34] + alphabet[alphabet.index(alphabet[0])\
    \ - 35] + alphabet[alphabet.index(alphabet[0]) - 36] + alphabet[alphabet.index(alphabet[0])\
    \ - 37] + alphabet[alphabet.index(alphabet[0]) - 38] + alphabet[alphabet.index(alphabet[0])\
    \ - 39] + alphabet[alphabet.index(alphabet[0]) - 40] + alphabet[alphabet.index(alphabet[0])\
    \ - 41] + alphabet[alphabet.index(alphabet[0]) - 42] + alphabet[alphabet.index(alphabet[0])\
    \ - 43] + alphabet[alphabet.index(alphabet[0]) - 44] + alphabet[alphabet.index(alphabet[0])\
    \ - 45] + alphabet[alphabet.index(alphabet[0]) - 46] + alphabet[alphabet.index(alphabet[0])\
    \ - 47] + alphabet[alphabet.index(alphabet[0]", "  alphabet = string.ascii_lowercase\n\
    \  alphabet = alphabet[alphabet.index(\"z\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    a\")+1:]\n  alphabet = alphabet[alphabet.index(\"b\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    c\")+1:]\n  alphabet = alphabet[alphabet.index(\"d\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    e\")+1:]\n  alphabet = alphabet[alphabet.index(\"f\") + 1:]\n  alphabet = alphabet[alphabet.index(\"\
    g\")+1:]\n  alphabet = alphabet[alphabet.index(\"h\") + 1:]\n  alphabet = alphabet[alphabet.index(\"\
    i\")+1:]\n  alphabet = alphabet[alphabet.index(\"j\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    k\")+1:]\n  alphabet = alphabet[alphabet.index(\"l\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    m\")+1:]\n  alphabet = alphabet[alphabet.index(\"n\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    o\")+1:]\n  alphabet = alphabet[alphabet.index(\"p\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    q\")+1:]\n  alphabet = alphabet[alphabet.index(\"r\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    s\")+1:]\n  alphabet = alphabet[alphabet.index(\"t\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    u\") + 1:]\n  alphabet = alphabet[alphabet.index(\"v\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    w\")+1:]\n  alphabet = alphabet[alphabet.index(\"x\")+1:]\n  alphabet = alphabet[alphabet.index(\"\
    y\")+1:]\n  alphabet = alphabet[alphabet.index(\"z\") + 1:]\n  alphabet = alphabet[alphabet.index(\"\
    a\")+2:]\n  alphabet = alphabet[alphabet.index(\"b\")+2:]\n  alphabet = alphabet[alphabet.index(\"\
    c\")+2:]\n  alphabet = alphabet[alphabet.index(\"d\")+2:]\n  alphabet = alphabet[alphabet.index(\"\
    e\")+2:]\n  alphabet = alphabet[alphabet.index(\"f\") + 2:]\n  alphabet = alphabet[alphabet.index(\"\
    g\")+2:]\n  alphabet = alphabet[alphabet.index(\"h\") + 2:]\n  alphabet = alphabet[alphabet.index(\"\
    i\")+2:]\n  alphabet = alphabet[alphabet.", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]):alphabet.index(alphabet[-1])\
    \ + 2]\n  alphabet", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\n\
    end", "  s.chars.each_with_index do |char, index|\n    next if index == 0\n  \
    \  char.upcase!\n    char.rotate!\n    char.downcase!\n  end\n  s\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   next if char == chars.first\n    chars.rotate(index).first\n  end.join\nend",
  "  s.each_char do |c|\n    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1]\n\
    \    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1] = ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2] = alphabet\n  end\n  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n  s.gsub!(/[^A-Z]/i, '')\n\
    \  s.g", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if i == 0\n    next if char == chars.last\n    chars.rotate(-i).first\n\
    \  end\nend", "  s.chars.each_with_index do |char, index|\n    next if index ==\
    \ 0\n    next if char == chars.last\n    chars.rotate(index).first\n  end\nend",
  "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like your solution, although I didn't understand\
    \ it completely. Could you please explain it a little bit more? I understand that\
    \ `s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join` converts the\
    \ string into an array of characters, rotates them by two places, and then converts\
    \ them back into strings. But I don't understand how it works. How does it know\
    \ to rotate by two places?\n<|/ c |>\n<| c |>\nIt just rotates the characters\
    \ by two places, by taking the character `c` and rotating it by `c.ord % 26` places.\
    \ `c.ord` returns the character code of the character, `c.ord % 26` returns the\
    \ character code modulo 26 (the character code modulo 26 will always be between\
    \ 0 and 25), `c.to_s.ord` converts the character code back into a character and\
    \ `c.to_s.ord.to_s` converts the character code back into a string. `c.to_s.ord.to_s`\
    \ converts the character code back into a string, so it rotates the characters\
    \ by two places.\n<|/ c |>\n<| c |>\nAh, I see. Thank you very much!\n<|/ c |>\n\
    <| a tags=ruby,encryption |>\nI wrote a solution that uses recursion to rotate\
    \ each character by 2 places.\n<code>", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.each_char do |c|\n    alphabet = alphabet.chars.reverse\n\
    \    alphabet.each do |a|\n      next if c == a\n      break if c != a\n     \
    \ break if c != alphabet[alphabet.index(a) + 1]\n      break if c != alphabet[alphabet.index(a)\
    \ - 1]\n    end\n  end\n  alphabet.reverse\nend", "  s.each_char do |c|\n    alphabet\
    \ = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 1] = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2] = alphabet\n  end\n  s.downcase!\n  s.gsub(/[a-z]/) { ROTATE_ALPHABET[ROTATE_ALPHABET.index($&)\
    \ + 1] }\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase += 2\n  end\n  s\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", " \
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2] + alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[0])\
    \ + 2] + alphabet[alphabet.index(alphabet[0]) - 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ - 2] + alphabet[alphabet.index(alphabet[0]) + 2] + ", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr\
    \ }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.size\
    \ - 2..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[2..-1]\n  alphabet\
    \ = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n  alphabet = alphabet[1..-1]\n\
    \  alphabet = alphabet[1..-1]", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c|\
    \ c.to_s.ord }.join\nend", "  s.chars.each_with_index do |char, index|\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.downcase if index > 0\n    char\
    \ = char.upcase if index > 0\n    char = char.", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet.split(\"\")\n  alphabet =\
    \ alphabet.reverse()\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2,\
    \ alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n  alphabet\
    \ = alphabet.insert(2, alphabet.pop(0))\n  alphabet = alphabet.insert(2, alphabet.pop(0))\n\
    \  alphabet = alphabet.insert(2, alphabet", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  s.chars.each_with_index do |char, i|\n    next if\
    \ i == 0\n    char.rotate(2).chars.each { |c| s.insert(i, c) }\n  end\n  s\nend",
  "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  s.each_char\
    \ do |c|\n    alphabet = alphabet.chars.reverse\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n    alphabet.rotate!\n\
    \    alphabet.", "  s.each_char do |c|\n    alphabet = ROTATE_TABLE[ROTATE_TABLE.index(c)]\n\
    \    ROTATE_TABLE.insert(ROTATE_TABLE.index(c), alphabet)\n  end\n  s.downcase!\n\
    \  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i,\
    \ '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i,\
    \ ''.downcase)\n  s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n \
    \ s.gsub!(/[^a-z]/i, '')\n  s.gsub!(/[a-z]/i, ''.downcase)\n  s.gsub!(/", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  alphabet = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n\
    \  s.chars.map { |c| alphabet.index(c.chr).succ }.join\nend", "  s.chars.map {\
    \ |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr[1..-1] }.join(\"\")\nend", " \
    \ s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n\
    \    next if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n    next if c.upcase\
    \ == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'z'\n    next\
    \ if c.downcase == 'z'\n    next if c.upcase == '0'\n    next if c.downcase ==\
    \ '0'\n    next if c.upcase == '1'\n    next if c.downcase == '1'\n    next if\
    \ c.upcase == '2'\n    next if c.downcase == '2'\n    next if c.upcase == '3'\n\
    \    next if c.downcase == '3'\n    next if c.upcase == '4'\n    next if c.downcase\
    \ == '4'\n    next if c.upcase == '5'\n    next if c.downcase == '5'\n    next\
    \ if c.upcase == '6'\n    next if c.downcase == '6'\n    next if c.upcase == '7'\n\
    \    next if c.downcase == '7'\n    next if c.upcase == '8'\n    next if c.downcase\
    \ == '8'\n    next if c.upcase == '9'\n    next if c.downcase == '9'\n    next\
    \ if c.upcase == '*'\n    next if c.downcase == '*'\n    next if c.upcase == '+'\n\
    \    next if c.downcase == '+'\n    next if c.upcase == '$'\n    next if c.downcase\
    \ == '$'\n    next if c.upcase == '%'\n    next if c.downcase == '%'\n    next\
    \ if c.upcase == '&'\n    next if c.downcase == '&'\n    next if c.upcase == '#'\n\
    \    next if c.downcase == '#'\n    next if c.upcase == '$'\n    next if c.downcase\
    \ == '$'\n    next if c.upcase == '%'\n    next if c.downcase == '%'\n    next\
    \ if c.upcase == '&'\n    next if c.downcase == '&'\n    next if c.upcase == '#'\n\
    \    next if c.downcase == '#'\n    next if c.upcase == '$'\n    next if c.downcase\
    \ == '$'\n    next if c.upcase ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if char == \"z\"\n    next if char == \"a\"\n   \
    \ next if char == \"b\"\n    next if char == \"c\"\n    next if char == \"d\"\n\
    \    next if char == \"e\"\n    next if char == \"f\"\n    next if char == \"\
    g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next if char ==\
    \ \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n    next if char\
    \ == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n    next if\
    \ char == \"p\"\n    next if char == \"q\"\n    next if char == \"r\"\n    next\
    \ if char == \"s\"\n    next if char == \"t\"\n    next if char == \"u\"\n   \
    \ next if char == \"v\"\n    next if char == \"w\"\n    next if char == \"x\"\n\
    \    next if char == \"y\"\n    next if char == \"z\"\n    next if char == \"\
    a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next if char ==\
    \ \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next if char\
    \ == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n    next if\
    \ char == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n    next\
    \ if char == \"m\"\n    next if char == \"n\"\n    next if char == \"o\"\n   \
    \ next if char == \"p\"\n    next if char == \"q\"\n    next if char == \"r\"\n\
    \    next if char == \"s\"\n    next if char == \"t\"\n    next if char == \"\
    u\"\n    next if char == \"v\"\n    next if char == \"w\"\n    next if char ==\
    \ \"x\"\n    next if char == \"y\"\n    next if char == \"z\"\n    next if char\
    \ == \"a\"\n    next if char == \"b\"\n    next if char == \"c\"\n    next if\
    \ char == \"d\"\n    next if char == \"e\"\n    next if char == \"f\"\n    next\
    \ if char == \"g\"\n    next if char == \"h\"\n    next if char == \"i\"\n   \
    \ next if char == \"j\"\n    next if char == \"k\"\n    next if char == \"l\"\n\
    \    next if char == \"m\"\n", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend\n</code>\n\
    <|/ a tags=ruby,encryption,string |>\n<| c |>\nThis doesn't work for all possible\
    \ inputs. For example, `encrypt(\"abc\")` returns `\"cba\"`, but `encrypt(\"ab\"\
    )` returns `\"ba\"`.\n<|/ c |>\n<| c |>\n: I see what you mean. I've updated my\
    \ answer to account for that case.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wonder why you chose to implement it this way. Why not just `s.chars.map {\
    \ |c| c.ord % 26 + 2 }.join`?\n<|/ c |>\n<| c |>\n: I wanted to avoid `map` since\
    \ it creates a new array and mutates the original string. `join` creates a new\
    \ string and doesn't mutate the original string. `map` creates a new array and\
    \ mutates the original string. `map` also creates a new string and mutates the\
    \ original string. `map` also creates a new string and mutates the original string.\
    \ `map` also creates a new string and mutates the original string. `map` also\
    \ creates a new string and mutates the original string. `map` also creates a new\
    \ string and mutates the original string. `map` also creates a new string and\
    \ mutates the original string. `map` also creates a new string and mutates the\
    \ original string. `map` also creates a new string and mutates the original string.\
    \ `map` also creates a new string and mutates the original string. `map` also\
    \ creates a new string and mutates the original string. `map` also creates a new\
    \ string and mutates the original string. `map` also creates a new string and\
    \ mutates the original string. `map` also creates a new string and mutates the\
    \ original string. `map` also creates a new string and mutates the original string.\
    \ `map` also creates a new string and mutates the original string. `map` also\
    \ creates a new string and mutates the original string. `map` also creates a new\
    \ string and mutates the original string. `map` also creates a new string and\
    \ mutates the original string. `map` also creates a new string and mutates the\
    \ original string. `map` also creates a new string and mutates the original string.\
    \ `map` also creates a new string and mutates the original string. `map` also\
    \ creates a new string and mutates the original string. `map` also creates a new\
    \ string and mutates the original string. `map` also creates a new string and\
    \ mutates the ", "  s.chars.each_with_index do |char, index|\n    next if char\
    \ == \" \"\n    char.upcase!\n    char.rotate!\n    char.downcase!\n  end\n  s.chars.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size - 1..-1]\n\
    \  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet[alphabet.size\
    \ - 1..-1]\n  alphabet = alphabet[alphabet.size - 2..-1]\n  alphabet = alphabet",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ % 26 }.join\nend", "  s.chars.each_with_index do |char, index|\n    next if\
    \ index == 0\n    next if char == \" \"\n    next if char == \"\\n\"\n    next\
    \ if char == \"\\t\"\n    next if char == \"\\r\"\n    next if char == \"\\0\"\
    \n    next if char == \"\\a\"\n    next if char == \"\\b\"\n    next if char ==\
    \ \"\\c\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next\
    \ if char == \"\\n\"\n    next if char == \"\\r\"\n    next if char == \"\\t\"\
    \n    next if char == \"\\0\"\n    next if char == \"\\a\"\n    next if char ==\
    \ \"\\b\"\n    next if char == \"\\c\"\n    next if char == \"\\e\"\n    next\
    \ if char == \"\\f\"\n    next if char == \"\\n\"\n    next if char == \"\\r\"\
    \n    next if char == \"\\t\"\n    next if char == \"\\0\"\n    next if char ==\
    \ \"\\a\"\n    next if char == \"\\b\"\n    next if char == \"\\c\"\n    next\
    \ if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char == \"\\n\"\
    \n    next if char == \"\\r\"\n    next if char == \"\\t\"\n    next if char ==\
    \ \"\\0\"\n    next if char == \"\\a\"\n    next if char == \"\\b\"\n    next\
    \ if char == \"\\c\"\n    next if char == \"\\e\"\n    next if char == \"\\f\"\
    \n    next if char == \"\\n\"\n    next if char == \"\\r\"\n    next if char ==\
    \ \"\\t\"\n    next if char == \"\\0\"\n    next if char == \"\\a\"\n    next\
    \ if char == \"\\b\"\n    next if char == \"\\c\"\n    next if char == \"\\e\"\
    \n    next if char == \"\\f\"\n    next if char == \"\\n\"\n    next if char ==\
    \ \"\\r\"\n    next if char == \"\\t\"\n    next if char == \"\\0\"\n    next\
    \ if char == \"\\a\"\n    next if char == \"\\b\"\n    next if char == \"\\c\"\
    \n    next if char == \"\\e\"\n    next if char == \"\\f\"\n    next if char ==\
    \ \"\\n\"\n    next if char == \"\\r\"\n    next if char == \"\\t\"\n    next\
    \ if char == \"\\0\"\n    next if char == \"\\a\"\n    next if char == \"\\b\"\
    \n    ", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if\
    \ c.upcase == c.downcase\n    next if c.upcase == 'A'\n    next if c.downcase\
    \ == 'A'\n    next if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'z'\n\
    \    next if c.downcase == 'z'\n    next if c.upcase == '0'\n    next if c.downcase\
    \ == '0'\n    next if c.upcase == '1'\n    next if c.downcase == '1'\n    next\
    \ if c.upcase == '2'\n    next if c.downcase == '2'\n    next if c.upcase == '3'\n\
    \    next if c.downcase == '3'\n    next if c.upcase == '4'\n    next if c.downcase\
    \ == '4'\n    next if c.upcase == '5'\n    next if c.downcase == '5'\n    next\
    \ if c.upcase == '6'\n    next if c.downcase == '6'\n    next if c.upcase == '7'\n\
    \    next if c.downcase == '7'\n    next if c.upcase == '8'\n    next if c.downcase\
    \ == '8'\n    next if c.upcase == '9'\n    next if c.downcase == '9'\n    next\
    \ if c.upcase == '*'\n    next if c.downcase == '*'\n    next if c.upcase == '/'\n\
    \    next if c.downcase == '/'\n    next if c.upcase == '\\\\'\n    next if c.downcase\
    \ == '\\\\'\n    next if c.upcase == '#'\n    next if c.downcase == '#'\n    next\
    \ if c.upcase == '$'\n    next if c.downcase == '$'\n    next if c.upcase == '%'\n\
    \    next if c.downcase == '%'\n    next if c.upcase == '&'\n    next if c.downcase\
    \ == '&'\n    next if c.upcase == '$'\n    next if c.downcase == '$'\n    next\
    \ if c.upcase == '%'\n    next if c.downcase == '%'\n    next if c.upcase == '&'\n\
    \    next if c.downcase == '&'\n    next if c.upcase == '$'\n    next if c.downcase\
    \ == '$'\n    next if c.", "  s.chars.each_with_index do |c, i|\n    next if i\
    \ == 0\n    next if c != s.chars[i-1]\n    next if c != s.chars[i+1]\n    next\
    \ if c != s.chars[i+2]\n    next if c != s.chars[i+3]\n    next if c != s.chars[i+4]\n\
    \    next if c != s.chars[i+5]\n    next if c != s.chars[i+6]\n    next if c !=\
    \ s.chars[i+7]\n    next if c != s.chars[i+8]\n    next if c != s.chars[i+9]\n\
    \    next if c != s.chars[i+10]\n    next if c != s.chars[i+11]\n    next if c\
    \ != s.chars[i+12]\n    next if c != s.chars[i+13]\n    next if c != s.chars[i+14]\n\
    \    next if c != s.chars[i+15]\n    next if c != s.chars[i+16]\n    next if c\
    \ != s.chars[i+17]\n    next if c != s.chars[i+18]\n    next if c != s.chars[i+19]\n\
    \    next if c != s.chars[i+20]\n    next if c != s.chars[i+21]\n    next if c\
    \ != s.chars[i+22]\n    next if c != s.chars[i+23]\n    next if c != s.chars[i+24]\n\
    \    next if c != s.chars[i+25]\n    next if c != s.chars[i+26]\n    next if c\
    \ != s.chars[i+27]\n    next if c != s.chars[i+28]\n    next if c != s.chars[i+29]\n\
    \    next if c != s.chars[i+30]\n    next if c != s.chars[i+31]\n    next if c\
    \ != s.chars[i+32]\n    next if c != s.chars[i+33]\n    next if c != s.chars[i+34]\n\
    \    next if c != s.chars[i+35]\n    next if c != s.chars[i+36]\n    next if c\
    \ != s.chars[i+37]\n    next if c != s.chars[i+38]\n    next if c != s.chars[i+39]\n\
    \    next if c != s.chars[i+40]\n    next if c != s.chars[i+41]\n    next ", " \
    \ alphabet = %w(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n  s.chars.map\
    \ { |c| alphabet.index(c.downcase) }.inject(:*)\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord % 26 +\
    \ 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\n\
    end", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n\
    \    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next if c.upcase\
    \ == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n    next\
    \ if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase ==\
    \ 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next if\
    \ c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next\
    \ if c.upcase == 'a'\n    next if c.downcase == 'a'\n    next if c.upcase == 'A'\n\
    \    next if c.downcase == 'A'\n    next if c.upcase == 'a'\n    next if c.downcase\
    \ == 'a'\n    next if c.upcase ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.each_with_index do |char, i|\n    char.rotate(-i).join + char\n\
    \  end\nend", "  s.chars.each_with_index do |c, i|\n    next if i == s.length\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == 'A'\n    next if\
    \ c.upcase == 'Z'\n    next if c.downcase == 'A'\n    next if c.downcase == 'Z'\n\
    \    next if c.upcase == 'a'\n    next if c.upcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.upcase == '0'\n    next\
    \ if c.upcase == '1'\n    next if c.upcase == '2'\n    next if c.upcase == '3'\n\
    \    next if c.upcase == '4'\n    next if c.upcase == '5'\n    next if c.upcase\
    \ == '6'\n    next if c.upcase == '7'\n    next if c.upcase == '8'\n    next if\
    \ c.upcase == '9'\n    next if c.upcase == '.'\n    next if c.upcase == '-'\n\
    \    next if c.upcase == '_'\n    next if c.downcase == '0'\n    next if c.downcase\
    \ == '1'\n    next if c.downcase == '2'\n    next if c.downcase == '3'\n    next\
    \ if c.downcase == '4'\n    next if c.downcase == '5'\n    next if c.downcase\
    \ == '6'\n    next if c.downcase == '7'\n    next if c.downcase == '8'\n    next\
    \ if c.downcase == '9'\n    next if c.downcase == '.'\n    next if c.downcase\
    \ == '-'\n    next if c.downcase == '_'\n    next if c.upcase == 'A'\n    next\
    \ if c.upcase == 'Z'\n    next if c.downcase == 'A'\n    next if c.downcase ==\
    \ 'Z'\n    next if c.upcase == 'a'\n    next if c.upcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.upcase == '0'\n    next\
    \ if c.upcase == '1'\n    next if c.upcase == '2'\n    next if c.upcase == '3'\n\
    \    next if c.upcase == '4'\n    next if c.upcase == '5'\n    next if c.upcase\
    \ == '6'\n    next if c.upcase == '7'\n    next if c.", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  alphabet = %w(a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z)\n  s.chars.map { |c| alphabet.index(c) }.rotate(2).join\nend",
  "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = s.chars.to_a\n  alphabet.rotate(2)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n \
    \ alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n  alphabet.map!(&:succ)\n\
    \  alphabet.map!(&:", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet.split(\"\")\n  alphabet = alphabet.rotate(2)\n  alphabet = alphabet.join(\"\
    \")\n  return alphabet\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  alphabet = %w{a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z}\n  s.chars.map { |c| alphabet.index c }.rotate(2).join\nend",
  "  s.chars.each_with_index do |char, index|\n    next if index == 0\n    next if\
    \ char == chars.last\n    chars.rotate(index).push(char)\n  end\n  s.chars.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\n\
    end", "  s.chars.each_with_index do |char, index|\n    next if index == 0\n  \
    \  next if char == \"z\"\n    next if char == \"a\"\n    next if char == \"b\"\
    \n    next if char == \"c\"\n    next if char == \"d\"\n    next if char == \"\
    e\"\n    next if char == \"f\"\n    next if char == \"g\"\n    next if char ==\
    \ \"h\"\n    next if char == \"i\"\n    next if char == \"j\"\n    next if char\
    \ == \"k\"\n    next if char == \"l\"\n    next if char == \"m\"\n    next if\
    \ char == \"n\"\n    next if char == \"o\"\n    next if char == \"p\"\n    next\
    \ if char == \"q\"\n    next if char == \"r\"\n    next if char == \"s\"\n   \
    \ next if char == \"t\"\n    next if char == \"u\"\n    next if char == \"v\"\n\
    \    next if char == \"w\"\n    next if char == \"x\"\n    next if char == \"\
    y\"\n    next if char == \"z\"\n    next if char == \"a\"\n    next if char ==\
    \ \"b\"\n    next if char == \"c\"\n    next if char == \"d\"\n    next if char\
    \ == \"e\"\n    next if char == \"f\"\n    next if char == \"g\"\n    next if\
    \ char == \"h\"\n    next if char == \"i\"\n    next if char == \"j\"\n    next\
    \ if char == \"k\"\n    next if char == \"l\"\n    next if char == \"m\"\n   \
    \ next if char == \"n\"\n    next if char == \"o\"\n    next if char == \"p\"\n\
    \    next if char == \"q\"\n    next if char == \"r\"\n    next if char == \"\
    s\"\n    next if char == \"t\"\n    next if char == \"u\"\n    next if char ==\
    \ \"v\"\n    next if char == \"w\"\n    next if char == \"x\"\n    next if char\
    \ == \"y\"\n    next if char == \"z\"\n    next if char == \"a\"\n    next if\
    \ char == \"b\"\n    next if char == \"c\"\n    next if char == \"d\"\n    next\
    \ if char == \"e\"\n    next if char == \"f\"\n    next if char == \"g\"\n   \
    \ next if char == \"h\"\n    next if char == \"i\"\n    next if char == \"j\"\n\
    \    next if char == \"k\"\n    next if char == \"l\"\n    ", "  s.chars.map do\
    \ |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet)-1]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet)+1:]\n  alphabet = alphabet[alphabet.index(alphabet)+1:]\n\
    \  alphabet = alphabet", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n  alphabet = alphabet[alphabet.index(alphabet[0])+2:]\n\
    \  alphabet = alphabet[alphab", "  alphabet = s.downcase.split(//).map(&:to_i)\n\
    \  alphabet.rotate(2).zip(alphabet).map { |a,b| a.chr + b.chr }.join(\"\")\nend",
  "  alphabet = string.ascii_lowercase\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n\
    \  alphabet.rotate(2)\n  alphabet.rotate(2)\n  ", "  s.chars.each_with_index do\
    \ |char, index|\n    next if index == 0\n    char = char.upcase\n    char.chars.each_with_index\
    \ do |char2, index2|\n      next if index2 == 0\n      char2 = char2.upcase\n\
    \      char2.chars.each_with_index do |char3, index3|\n        next if index3\
    \ == 0\n        char3 = char3.upcase\n        char3.chars.each_with_index do |char4,\
    \ index4|\n          next if index4 == 0\n          char4 = char4.upcase\n   \
    \       char4.chars.each_with_index do |char5, index5|\n            next if index5\
    \ == 0\n            char5 = char5.upcase\n            char5.chars.each_with_index\
    \ do |char6, index6|\n              next if index6 == 0\n              char6 =\
    \ char6.upcase\n              char6.chars.each_with_index do |char7, index7|\n\
    \                next if index7 == 0\n                char7 = char7.upcase\n \
    \               char7.chars.each_with_index do |char8, index8|\n             \
    \     next if index8 == 0\n                  char8 = char8.upcase\n          \
    \        char8.chars.each_with_index do |char9, index9|\n                    next\
    \ if index9 == 0\n                    char9 = char9.upcase\n                 \
    \   char9.chars.each_with_index do |char10, index10|\n                      next\
    \ if index10 == 0\n                      char10 = char10.upcase\n            \
    \          char10.chars.each_with_index do |char11, index11|\n               \
    \         next if index11 == 0\n                        char11 = char11.upcase\n\
    \                        char11.chars.each_with_index do |char12, index12|\n \
    \                         next if index12 == 0\n                          char12\
    \ = char12.upcase\n                          char12.chars.each_with_index do |char13,\
    \ index13|\n                            next if index13 == 0\n               \
    \             char13 = char13.upcase\n                            char13.chars.each_with_index\
    \ do |char14, index14|\n                              next if index14 == 0\n \
    \                             char14 = char14.upcase\n                       \
    \       char14.chars.each_with_index do |char15, index15|\n                  \
    \              next if index15 == 0\n                                char15 =\
    \ char15.upcase\n                                char15.chars.each_with_index\
    \ do |char16, index16|\n                                  next if index16 == 0\n\
    \                                  char16 = char16.upcase\n                  \
    \                char16.chars.each_with_index do |char17, index17|\n         \
    \                           ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    char.upcase += 2\n    char.downcase\
    \ -= 2\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ alphabet = string.ascii_lowercase\n  alphabet = alphabet[1..-1]\n  alphabet\
    \ = alphabet[2..-1]\n  alphabet = alphabet[3..-1]\n  alphabet = alphabet[4..-1]\n\
    \  alphabet = alphabet[5..-1]\n  alphabet = alphabet[6..-1]\n  alphabet = alphabet[7..-1]\n\
    \  alphabet = alphabet[8..-1]\n  alphabet = alphabet[9..-1]\n  alphabet = alphabet[10..-1]\n\
    \  alphabet = alphabet[11..-1]\n  alphabet = alphabet[12..-1]\n  alphabet = alphabet[13..-1]\n\
    \  alphabet = alphabet[14..-1]\n  alphabet = alphabet[15..-1]\n  alphabet = alphabet[16..-1]\n\
    \  alphabet = alphabet[17..-1]\n  alphabet = alphabet[18..-1]\n  alphabet = alphabet[19..-1]\n\
    \  alphabet = alphabet[20..-1]\n  alphabet = alphabet[21..-1]\n  alphabet = alphabet[22..-1]\n\
    \  alphabet = alphabet[23..-1]\n  alphabet = alphabet[24..-1]\n  alphabet = alphabet[25..-1]\n\
    \  alphabet = alphabet[26..-1]\n  alphabet = alphabet[27..-1]\n  alphabet = alphabet[28..-1]\n\
    \  alphabet = alphabet[29..-1]\n  alphabet = alphabet[30..-1]\n  alphabet = alphabet[31..-1]\n\
    \  alphabet = alphabet[32..-1]\n  alphabet = alphabet[33..-1]\n  alphabet = alphabet[34..-1]\n\
    \  alphabet = alphabet[35..-1]\n  alphabet = alphabet[36..-1]\n  alphabet = alphabet[37..-1]\n\
    \  alphabet = alphabet[38..-1]\n  alphabet = alphabet[39..-1]\n  alphabet = alphabet[40..-1]\n\
    \  alphabet = alphabet[41..-1]\n  alphabet = alphabet[42..-1]\n  alphabet = alphabet[43..-1]\n\
    \  alphabet = alphabet[44..-1]\n  alphabet = alphabet[45..-1]\n  alphabet = alphabet[46..-1]\n\
    \  alphabet = alphabet[47..-1]\n  alphabet = alphabet[48..-1]\n  alphabet = alphabet[49..-1]\n\
    \  alphabet = alphabet[50..-1]\n  alphabet = alphabet[51..-1]\n  alphabet = alphabet[52..-1]\n\
    \  alphabet = alphabet[53..-1]\n  alphabet = alphabet[54..-1]\n  alphabet = alphabet[55..-1]\n\
    \  alphabet = alphabet[56..-1]\n  alphabet = alphabet[57..-1]\n  alphabet", " \
    \ s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", " \
    \ s.chars.map do |c|\n    alphabet[alphabet.index(c) + 2].upcase\n  end.join\n\
    end", "  s.chars.each_with_index do |char, index|\n    char = char.upcase\n  \
    \  next if char == char\n    char.succ if index == 0\n    char.succ if index ==\
    \ s.length - 1\n  end\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map do |c|\n    letter = alphabet.index(c)\n    letter = letter + 2 if\
    \ letter < 26\n    letter = letter - 2 if letter > 25\n    alphabet[letter]\n\
    \  end.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord\
    \ }.join\nend", "  alphabet = %w[a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z]\n  s.chars.map { |c| alphabet.index c }.rotate(2).join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w{a b c d e f g h i j k l\
    \ m n o p q r s t u v w x y z}\n  s.chars.map { |c| alphabet.index c }.join\n\
    end", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c\
    \ != s.chars[i-1]\n    next if c != s.chars[i+1]\n    next if c != s.chars[i+2]\n\
    \    next if c != s.chars[i+3]\n    next if c != s.chars[i+4]\n    next if c !=\
    \ s.chars[i+5]\n    next if c != s.chars[i+6]\n    next if c != s.chars[i+7]\n\
    \    next if c != s.chars[i+8]\n    next if c != s.chars[i+9]\n    next if c !=\
    \ s.chars[i+10]\n    next if c != s.chars[i+11]\n    next if c != s.chars[i+12]\n\
    \    next if c != s.chars[i+13]\n    next if c != s.chars[i+14]\n    next if c\
    \ != s.chars[i+15]\n    next if c != s.chars[i+16]\n    next if c != s.chars[i+17]\n\
    \    next if c != s.chars[i+18]\n    next if c != s.chars[i+19]\n    next if c\
    \ != s.chars[i+20]\n    next if c != s.chars[i+21]\n    next if c != s.chars[i+22]\n\
    \    next if c != s.chars[i+23]\n    next if c != s.chars[i+24]\n    next if c\
    \ != s.chars[i+25]\n    next if c != s.chars[i+26]\n    next if c != s.chars[i+27]\n\
    \    next if c != s.chars[i+28]\n    next if c != s.chars[i+29]\n    next if c\
    \ != s.chars[i+30]\n    next if c != s.chars[i+31]\n    next if c != s.chars[i+32]\n\
    \    next if c != s.chars[i+33]\n    next if c != s.chars[i+34]\n    next if c\
    \ != s.chars[i+35]\n    next if c != s.chars[i+36]\n    next if c != s.chars[i+37]\n\
    \    next if c != s.chars[i+38]\n    next if c != s.chars[i+39]\n    next if c\
    \ != s.chars[i+40]\n    next if c != s.chars[i+41]\n    next ", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\nend", "  alphabet = %w(a b c\
    \ d e f g h i j k l m n o p q r s t u v w x y z)\n  s.chars.map { |c| alphabet.index(c)\
    \ }.rotate(2).join\nend", "  s.chars.each_with_index do |c,i|\n    next if c.nil?\n\
    \    next if c.length != 1\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n\
    \    next if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next\
    \ if c.upcase != c.downcase\n    next if c.upcase != c.downcase\n    next if c.upcase\
    \ != c.downcase\n", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index do |c, i|\n  \
    \  next if i == 0\n    next if c.upcase == c.downcase\n    next if c.upcase ==\
    \ c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.down", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet[alphabet.index(alphabet)-alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:]\
    \ + alphabet[alphabet.index(alphabet)+alphabet.index(alphabet)%26:] + alphabet",
  "  alphabet = %w{a b c d e f g h i j k l m n o p q r s t u v w x y z}\n  s.chars.map\
    \ { |c| alphabet.index(c.chr) + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer.\
    \ Unfortunately, I cannot use any external libraries. I should also note that\
    \ I cannot use any loops or conditionals. I should also note that I cannot use\
    \ any loops or conditionals. I should also note that I cannot use any loops or\
    \ conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot use any loops or conditionals. I should also note that I\
    \ cannot use any loops or conditionals. I should also note that I cannot use any\
    \ loops or conditionals. I should also note that I cannot use any loops or conditionals.\
    \ I should also note that I cannot use any loops or conditionals. I should also\
    \ note that I cannot ", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend", "  s.chars.map {\
    \ |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.each_char do |c|\n    alphabet = ROTATE_ALPHABET\n    alphabet.each\
    \ do |a|\n      next if c == a\n      break if c > a\n      break if c < a\n \
    \     break if c < a || c > a\n    end\n  end\n  s\nend", "  s.chars.map { |c|\
    \ c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w(a b c d e f g\
    \ h i j k l m n o p q r s t u v w x y z)\n  s.chars.map { |c| alphabet.rotate(alphabet.index(c)\
    \ + 2).join }.join\nend\n</code>\n<|/ a tags=ruby,encryption,string |>\n<| c |>\n\
    Thanks for the help! I appreciate it.\n<|/ c |>\n<| c |>\nI added a more efficient\
    \ solution that doesn't require the alphabet to be rotated every time.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  result\
    \ = ''\n  s.split(\"\").each do |char|\n    result += alphabet.index(char).to_s\
    \ << alphabet.index(char).to_s\n  end\n  result\nend", "  s.chars.map { |c| c.ord\
    \ % 26 }.sort.map { |c| c.chr }.join\nend", "  s.chars.each_with_index do |char,\
    \ i|\n    next if char == \" \"\n    next if i == 0\n    next if i == s.length\
    \ - 1\n    next if i == s.length - 2\n    next if i == s.length - 3\n    next\
    \ if i == s.length - 4\n    next if i == s.length - 5\n    next if i == s.length\
    \ - 6\n    next if i == s.length - 7\n    next if i == s.length - 8\n    next\
    \ if i == s.length - 9\n    next if i == s.length - 10\n    next if i == s.length\
    \ - 11\n    next if i == s.length - 12\n    next if i == s.length - 13\n    next\
    \ if i == s.length - 14\n    next if i == s.length - 15\n    next if i == s.length\
    \ - 16\n    next if i == s.length - 17\n    next if i == s.length - 18\n    next\
    \ if i == s.length - 19\n    next if i == s.length - 20\n    next if i == s.length\
    \ - 21\n    next if i == s.length - 22\n    next if i == s.length - 23\n    next\
    \ if i == s.length - 24\n    next if i == s.length - 25\n    next if i == s.length\
    \ - 26\n    next if i == s.length - 27\n    next if i == s.length - 28\n    next\
    \ if i == s.length - 29\n    next if i == s.length - 30\n    next if i == s.length\
    \ - 31\n    next if i == s.length - 32\n    next if i == s.length - 33\n    next\
    \ if i == s.length - 34\n    next if i == s.length - 35\n    next if i == s.length\
    \ - 36\n    next if i == s.length - 37\n    next if i == s.length - 38\n    next\
    \ if i == s.length - 39\n    next if i == s.length - 40\n    next if i == s.length\
    \ - 41\n    next if i == s.length - 42\n    next if i == s.length - 43\n    next\
    \ if i == s.length - 44\n    next if i == s.length - 45\n    next if i == s.length\
    \ - 46\n    next if i == s.length - 47\n    next if i == s.length - 48\n    next\
    \ if i == s.length - 49\n    next if i == s.length - 50\n    next if i == s.length\
    \ - 51\n    next if i == s.length - 52\n    next if i == s.length - 53\n    next\
    \ if i == s.length - 54\n    next if i == s.length - 55\n    next if i == s.length\
    \ - 56\n    next if i == s.length - 57\n    next if i == s.length - 58\n    next\
    \ if i == s.length - 59\n    next if i == s.length - 60\n    next if i == s.length\
    \ - 61", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s + c.to_s }.join\n\
    end", "  s.chars.each_with_index do |char, index|\n    next if index == 0\n  \
    \  next if char == chars.last\n    chars.rotate(index).first\n  end\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = s.split(//)\n \
    \ alphabet.rotate(2)\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c|\
    \ c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n  alphabet.map!{|c| c.to_i(36)}\n\
    \  alphabet.map!{|c| c.to_i(36)}\n  alphabet.", "  s.gsub!(/./) { |c| c.ord %\
    \ 26 }.map { |c| c.chr }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.chr + c.chr * 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.to_s.ord }.join\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", " \
    \ s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2] + alphabet[alphabet.index(alphabet[1])\
    \ - 2] + alphabet[alphabet.index(alphabet[2]) - 2] + alphabet[alphabet.index(alphabet[3])\
    \ - 2] + alphabet[alphabet.index(alphabet[4]) - 2] + alphabet[alphabet.index(alphabet[5])\
    \ - 2] + alphabet[alphabet.index(alphabet[6]) - 2] + alphabet[alphabet.index(alphabet[7])\
    \ - 2] + alphabet[alphabet.index(alphabet[8]) - 2] + alphabet[alphabet.index(alphabet[9])\
    \ - 2] + alphabet[alphabet.index(alphabet[10]) - 2] + alphabet[alphabet.index(alphabet[11])\
    \ - 2] + alphabet[alphabet.index(alphabet[12]) - 2] + alphabet[alphabet.index(alphabet[13])\
    \ - 2] + alphabet[alphabet.index(alphabet[14]) - 2] + alphabet[alphabet.index(alphabet[15])\
    \ - 2] + alphabet[alphabet.index(alphabet[16]) - 2] + alphabet[alphabet.index(alphabet[17])\
    \ - 2] + alphabet[alphabet.index(alphabet[18]) - 2] + alphabet[alphabet.index(alphabet[19])\
    \ - 2] + alphabet[alphabet.index(alphabet[20]) - 2] + alphabet[alphabet.index(alphabet[21])\
    \ - 2] + alphabet[alphabet.index(alphabet[22]) - 2] + alphabet[alphabet.index(alphabet[23])\
    \ - 2] + alphabet[alphabet.index(alphabet[24]) - 2] + alphabet[alphabet.index(alphabet[25])\
    \ - 2] + alphabet[alphabet.index(alphabet[26]) - 2] + alphabet[alphabet.index(alphabet[27])\
    \ - 2] + alphabet[alphabet.index(alphabet[28]) - 2] + alphabet[alphabet.index(alphabet[29])\
    \ - 2] + alphabet[alphabet.index(alphabet[30]) - 2] + alphabet[alphabet.index(alphabet[31])\
    \ - 2] + alphabet[alphabet.index(alphabet[32]) - 2] + alphabet[alphabet.index(alphabet[33])\
    \ - 2] + alphabet[alphabet.index(alphabet[34]) - 2] + alphabet[alphabet.index(alphabet[35])\
    \ - 2] + alphabet[alphabet.index(alphabet[36]) - 2] + alphabet[alphabet.index(alphabet[37])\
    \ - 2] + alphabet[alphabet.index(alphabet[38]) - 2] + alphabet[alphabet.index(alphabet[39])\
    \ - 2] + alphabet[alphabet.index(alphabet[40]) - 2] + alphabet[alphabet.index(alphabet[41])\
    \ - 2] + alphabet[alphabet.index(alphabet[42]) - 2] + alphabet", "  s.each_char\
    \ do |c|\n    alphabet = ROTATE_TABLE[ROTATE_TABLE.index(c)]\n    ROTATE_TABLE.insert(ROTATE_TABLE.index(c),\
    \ alphabet)\n  end\n  s.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.each_with_index do |c, i|\n    next if i == 0\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == 'Z'\n    next if c.downcase == 'Z'\n\
    \    next if c.upcase == 'A'\n    next if c.downcase == 'A'\n    next if c.upcase\
    \ == 'B'\n    next if c.downcase == 'B'\n    next if c.upcase == 'C'\n    next\
    \ if c.downcase == 'C'\n    next if c.upcase == 'D'\n    next if c.downcase ==\
    \ 'D'\n    next if c.upcase == 'E'\n    next if c.downcase == 'E'\n    next if\
    \ c.upcase == 'F'\n    next if c.downcase == 'F'\n    next if c.upcase == 'G'\n\
    \    next if c.downcase == 'G'\n    next if c.upcase == 'H'\n    next if c.downcase\
    \ == 'H'\n    next if c.upcase == 'I'\n    next if c.downcase == 'I'\n    next\
    \ if c.upcase == 'J'\n    next if c.downcase == 'J'\n    next if c.upcase == 'K'\n\
    \    next if c.downcase == 'K'\n    next if c.upcase == 'L'\n    next if c.downcase\
    \ == 'L'\n    next if c.upcase == 'M'\n    next if c.downcase == 'M'\n    next\
    \ if c.upcase == 'N'\n    next if c.downcase == 'N'\n    next if c.upcase == 'O'\n\
    \    next if c.downcase == 'O'\n    next if c.upcase == 'P'\n    next if c.downcase\
    \ == 'P'\n    next if c.upcase == 'Q'\n    next if c.downcase == 'Q'\n    next\
    \ if c.upcase == 'R'\n    next if c.downcase == 'R'\n    next if c.upcase == 'S'\n\
    \    next if c.downcase == 'S'\n    next if c.upcase == 'T'\n    next if c.downcase\
    \ == 'T'\n    next if c.upcase == 'U'\n    next if c.downcase == 'U'\n    next\
    \ if c.upcase == 'V'\n    next if c.downcase == 'V'\n    next if c.upcase == 'W'\n\
    \    next if c.downcase == 'W'\n    next if c.", "  s.chars.map { |c| c.ord %\
    \ 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr\
    \ + c.chr + c.chr }.join\nend\n</code>\n<|/ a tags=ruby,encryption,string |>\n\
    <| c |>\nI like your solution, but I believe it only works for English alphabets.\
    \ I believe it would be better to use the `rot13` method from [this answer](http://stackoverflow.com/a/4770408/4770408)\n\
    <|/ c |>\n<| c |>\n: I believe it works for any language that has letters whose\
    \ ordinals are multiples of 26. For example, `'a'.ord % 26 #=> 97`.\n<|/ c |>\n\
    <| c |>\n: I believe it works for any language that has letters whose ordinals\
    \ are multiples of 26. For example, `'a'.ord % 26 #=> 97`.\n<|/ c |>\n<| c |>\n\
    : I believe it works for any language that has letters whose ordinals are multiples\
    \ of 26. For example, `'a'.ord % 26 #=> 97`.\n<|/ c |>\n<| c |>\n: I believe it\
    \ works for any language that has letters whose ordinals are multiples of 26.\
    \ For example, `'a'.ord % 26 #=> 97`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \ s.each_char do |c|\n    alphabet = ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2]\n\
    \    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 2] = ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 1]\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size - 1] = alphabet\n    ROTATE_ALPHABET[ROTATE_ALPHABET.size\
    \ - 2] = c\n  end\n  s\nend", "  s.chars.each_with_index do |char, i|\n    next\
    \ if i == 0\n    char.upcase! if char == char.downcase\n    char.rotate! if char\
    \ == char.upcase\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.gsub!(/./) { |c| c.ord % 26 }\n  s.gsub!(/[a-z]/)\
    \ { |c| c.ord % 26 + 2 }\n  s.gsub!(/[A-Z]/) { |c| c.ord % 26 + 4 }\n  s.gsub!(/[0-9]/)\
    \ { |c| c.ord % 26 + 6 }\n  s.gsub!(/[!,@,#,$,%,^,&,*,?,_,~]/) { |c| c.ord % 26\
    \ + 8 }\n  s.gsub!(/[(),:;{}\\[\\]]/) { |c| c.ord % 26 + 10 }\n  s.gsub!(/[<,>,+,-,/,\\\
    \\,|,?,_]/) { |c| c.ord % 26 + 12 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 14 }\n\
    \  s.gsub!(/[;]/) { |c| c.ord % 26 + 16 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 +\
    \ 18 }\n  s.gsub!(/[;]/) { |c| c.ord % 26 + 20 }\n  s.gsub!(/[,]/) { |c| c.ord\
    \ % 26 + 22 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 24 }\n  s.gsub!(/[,]/) { |c|\
    \ c.ord % 26 + 26 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 28 }\n  s.gsub!(/[,]/)\
    \ { |c| c.ord % 26 + 30 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 32 }\n  s.gsub!(/[,]/)\
    \ { |c| c.ord % 26 + 34 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 36 }\n  s.gsub!(/[,]/)\
    \ { |c| c.ord % 26 + 38 }\n  s.gsub!(/[,]/) { |c| c.ord % 26 + 40 }\n  s.gsub!(/[,]/)\
    \ { |c| c.ord % 26 + 42 }", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend",
  "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26\
    \ + 2 }.join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, i|\n    next if char == \" \"\n    char.upcase!\n    char.rotate!\n\
    \    char.downcase!\n    char.rotate!\n    char.upcase!\n    char.rotate!\n  end\n\
    \  s.chars.join\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr\
    \ + c.chr * 2 }.join\nend", "  s.gsub!(/./) do |c|\n    alphabet[alphabet.index(c)\
    \ + 1]\n  end\nend", "  s.chars.map do |c|\n    alphabet[alphabet.index(c) + 1]\n\
    \  end.join\nend", "  s.chars.each do |c|\n    next if c.downcase == 'a'\n   \
    \ next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase\
    \ == 'z'\n    next if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next\
    \ if c.downcase == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase\
    \ == 'a'\n    next if c.downcase == 'z'\n    next if c.downcase == 'a'\n    next\
    \ if c.downcase == 'z'\n    next if c.downcase == 'a'\n", "  s.chars.map { |c|\
    \ c.ord % 26 }.sort.map { |c| c.chr + c.chr }.join\nend", "  s.chars.map { |c|\
    \ c.ord % 26 }.rotate(2).join\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.each_with_index\
    \ do |char, index|\n    next if index == 0\n    next if char == chars.last\n \
    \   chars.rotate(index).first\n  end\nend", "  s.chars.map { |c| c.ord % 26 }.sort.map\
    \ { |c| c.to_s.ord }.join\nend", "  s.chars.each_with_index do |char, i|\n   \
    \ next if char == \" \"\n    char.upcase!\n    char.rotate!\n    char.downcase!\n\
    \    char.rotate!\n    char.upcase!\n    char.rotate!\n    char.downcase!\n  \
    \  char.rotate!\n  end\n  s.chars.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!\n  alphabet = alphabet.join(\"\
    z\")\n  alphabet = alphabet.split(\"\")\n  alphabet.reverse!", "  s.chars.map\
    \ do |c|\n    alphabet[alphabet.index(c) + 1]\n  end.join\nend", "  s.chars.map\
    \ { |c| c.ord % 26 + 2 }.join\nend\n</cell>\n<cell>", "  s.chars.each_with_index\
    \ do |char, index|\n    next if char == \" \"\n    next if index == s.length\n\
    \    next if char == \"z\"\n    next if char == \"y\"\n    next if char == \"\
    x\"\n    next if char == \"w\"\n    next if char == \"v\"\n    next if char ==\
    \ \"u\"\n    next if char == \"t\"\n    next if char == \"s\"\n    next if char\
    \ == \"d\"\n    next if char == \"r\"\n    next if char == \"q\"\n    next if\
    \ char == \"p\"\n    next if char == \"o\"\n    next if char == \"n\"\n    next\
    \ if char == \"m\"\n    next if char == \"l\"\n    next if char == \"k\"\n   \
    \ next if char == \"j\"\n    next if char == \"h\"\n    next if char == \"g\"\n\
    \    next if char == \"f\"\n    next if char == \"e\"\n    next if char == \"\
    d\"\n    next if char == \"c\"\n    next if char == \"b\"\n    next if char ==\
    \ \"a\"\n    next if char == \"z\"\n    next if char == \"y\"\n    next if char\
    \ == \"x\"\n    next if char == \"w\"\n    next if char == \"v\"\n    next if\
    \ char == \"u\"\n    next if char == \"t\"\n    next if char == \"s\"\n    next\
    \ if char == \"d\"\n    next if char == \"r\"\n    next if char == \"q\"\n   \
    \ next if char == \"p\"\n    next if char == \"o\"\n    next if char == \"n\"\n\
    \    next if char == \"m\"\n    next if char == \"l\"\n    next if char == \"\
    k\"\n    next if char == \"j\"\n    next if char == \"h\"\n    next if char ==\
    \ \"g\"\n    next if char == \"f\"\n    next if char == \"e\"\n    next if char\
    \ == \"d\"\n    next if char == \"c\"\n    next if char == \"b\"\n    next if\
    \ char == \"a\"\n    next if char == \"z\"\n    next if char == \"y\"\n    next\
    \ if char == \"x\"\n    next if char == \"w\"\n    next if char == \"v\"\n   \
    \ next if char == \"u\"\n    next if char == \"t\"\n    next if char == \"s\"\n\
    \    next if char == \"d\"\n    next if char == \"r\"\n    next if char == \"\
    q\"\n    next if char == \"p\"\n    next ", "  s.chars.each do |c|\n    next if\
    \ c == \" \"\n    next if c.upcase == c.downcase\n    next if c.upcase == \"A\"\
    \n    next if c.downcase == \"A\"\n    next if c.upcase == \"Z\"\n    next if\
    \ c.downcase == \"Z\"\n    next if c.upcase == \"0\"\n    next if c.downcase ==\
    \ \"0\"\n    next if c.upcase == \"1\"\n    next if c.downcase == \"1\"\n    next\
    \ if c.upcase == \"2\"\n    next if c.downcase == \"2\"\n    next if c.upcase\
    \ == \"3\"\n    next if c.downcase == \"3\"\n    next if c.upcase == \"4\"\n \
    \   next if c.downcase == \"4\"\n    next if c.upcase == \"5\"\n    next if c.downcase\
    \ == \"5\"\n    next if c.upcase == \"6\"\n    next if c.downcase == \"6\"\n \
    \   next if c.upcase == \"7\"\n    next if c.downcase == \"7\"\n    next if c.upcase\
    \ == \"8\"\n    next if c.downcase == \"8\"\n    next if c.upcase == \"9\"\n \
    \   next if c.downcase == \"9\"\n    next if c.upcase == \"a\"\n    next if c.downcase\
    \ == \"a\"\n    next if c.upcase == \"b\"\n    next if c.downcase == \"b\"\n \
    \   next if c.upcase == \"c\"\n    next if c.downcase == \"c\"\n    next if c.upcase\
    \ == \"d\"\n    next if c.downcase == \"d\"\n    next if c.upcase == \"e\"\n \
    \   next if c.downcase == \"e\"\n    next if c.upcase == \"f\"\n    next if c.downcase\
    \ == \"f\"\n    next if c.upcase == \"g\"\n    next if c.downcase == \"g\"\n \
    \   next if c.upcase == \"h\"\n    next if c.downcase == \"h\"\n    next if c.upcase\
    \ == \"i\"\n    next if c.downcase == \"i\"\n    next if c.upcase == \"j\"\n \
    \   next if c.downcase == \"j\"\n    next if c.upcase == \"k\"\n    next if c.downcase\
    \ == \"k\"\n    next if c.upcase == \"l\"\n    next if c.downcase == \"l\"\n \
    \   next if c.upcase == \"m\"\n    next if c.downcase == \"m\"\n    next if c.upcase\
    \ == \"n\"\n", "  s.each_char do |c|\n    alphabet = ROTATE_TABLE[ROTATE_TABLE.index(c)\
    \ + 1]\n    ROTATE_TABLE.insert(ROTATE_TABLE.index(c) + 1, alphabet)\n  end\n\
    \  s.join\nend", "  s.chars.each_with_index do |char, index|\n    char = char.upcase\
    \ if index > 0\n    char = char.downcase if index < s.length\n    char = char.chr\
    \ + (char.ord - 97) * 2 \n  end\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.to_s.ord }.join\nend",
  "  s.chars.each_with_index do |char, i|\n    next if i == s.length\n    next if\
    \ char == \"z\"\n    next if char == \"Z\"\n    next if char == \"y\"\n    next\
    \ if char == \"Y\"\n    next if char == \"x\"\n    next if char == \"X\"\n   \
    \ next if char == \"w\"\n    next if char == \"W\"\n    next if char == \"v\"\n\
    \    next if char == \"V\"\n    next if char == \"u\"\n    next if char == \"\
    U\"\n    next if char == \"t\"\n    next if char == \"T\"\n    next if char ==\
    \ \"s\"\n    next if char == \"S\"\n    next if char == \"r\"\n    next if char\
    \ == \"R\"\n    next if char == \"q\"\n    next if char == \"Q\"\n    next if\
    \ char == \"p\"\n    next if char == \"P\"\n    next if char == \"o\"\n    next\
    \ if char == \"O\"\n    next if char == \"n\"\n    next if char == \"N\"\n   \
    \ next if char == \"m\"\n    next if char == \"M\"\n    next if char == \"l\"\n\
    \    next if char == \"L\"\n    next if char == \"k\"\n    next if char == \"\
    K\"\n    next if char == \"j\"\n    next if char == \"J\"\n    next if char ==\
    \ \"h\"\n    next if char == \"H\"\n    next if char == \"g\"\n    next if char\
    \ == \"G\"\n    next if char == \"f\"\n    next if char == \"F\"\n    next if\
    \ char == \"e\"\n    next if char == \"E\"\n    next if char == \"d\"\n    next\
    \ if char == \"D\"\n    next if char == \"c\"\n    next if char == \"C\"\n   \
    \ next if char == \"b\"\n    next if char == \"B\"\n    next if char == \"a\"\n\
    \    next if char == \"A\"\n    next if char == \"z\"\n    next if char == \"\
    Z\"\n    next if char == \"y\"\n    next if char == \"Y\"\n    next if char ==\
    \ \"x\"\n    next if char == \"X\"\n    next if char == \"w\"\n    next if char\
    \ == \"W\"\n    next if char == \"v\"\n    next if char == \"V\"\n    next if\
    \ char == \"u\"\n    next if char == \"U\"\n    next if char == \"t\"\n    next ",
  "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2::2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  alphabet\
    \ = alphabet[alphabet.index(alphabet[0]) + 2::2]\n  ", "  s.chars.each_with_index\
    \ do |c, i|\n    next if i == 0\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase\
    \ == c.downcase\n    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n\
    \    next if c.upcase == c.downcase\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase\n    next if c.upcase == c.down", "  s.chars.map {\
    \ |c| c.ord % 26 + 2 }.join\nend", "  alphabet = %w[a b c d e f g h i j k l m\
    \ n o p q r s t u v w x y z]\n  s.chars.map { |c| alphabet.index(c.downcase) }.inject(:<<).to_s\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  s.chars.map { |c| c.ord\
    \ % 26 + 2 }.join\nend", "  s.chars.each_with_index do |char, index|\n    next\
    \ if char == \" \"\n    next if index == 0\n    char.upcase!\n    char.rotate!\n\
    \    char.downcase!\n  end\n  s\nend", "  s.chars.map { |c| c.ord % 26 + 2 }.join\n\
    end", "  s.chars.map do |c|\n    alphabet = c.downcase\n    alphabet.chars.map\
    \ do |a|\n      alphabet.chars.map do |b|\n        alphabet.chars.map do |c|\n\
    \          alphabet.chars.map do |d|\n            alphabet.chars.map do |e|\n\
    \              alphabet.chars.map do |f|\n                alphabet.chars.map do\
    \ |g|\n                  alphabet.chars.map do |h|\n                    alphabet.chars.map\
    \ do |i|\n                      alphabet.chars.map do |j|\n                  \
    \      alphabet.chars.map do |k|\n                          alphabet.chars.map\
    \ do |l|\n                            alphabet.chars.map do |m|\n            \
    \                  alphabet.chars.map do |n|\n                               \
    \ alphabet.chars.map do |o|\n                                  alphabet.chars.map\
    \ do |p|\n                                    alphabet.chars.map do |q|\n    \
    \                                  alphabet.chars.map do |r|\n               \
    \                         alphabet.chars.map do |s|\n                        \
    \                  alphabet.chars.map do |t|\n                               \
    \             alphabet.chars.map do |u|\n                                    \
    \          alphabet.chars.map do |v|\n                                       \
    \         alphabet.chars.map do |w|\n                                        \
    \          alphabet.chars.map do |x|\n                                       \
    \             alphabet.chars.map do |y|\n                                    \
    \                  alphabet.chars.map do |z|\n                               \
    \                         alphabet.chars.map do |a|\n                        \
    \                                  alphabet.chars.map do |b|\n               \
    \                                             alphabet.chars.map do |c|\n    \
    \                                                          alphabet.chars.map\
    \ do |d|\n                                                                alphabet.chars.map\
    \ do |e|\n                                                                  alphabet.chars.map\
    \ do |f|\n                                                                   \
    \ alphabet.chars.map do |g|\n                                                \
    \                      alphabet.chars.map do |h|\n                           \
    \                                             alphabet.chars.map do |i|\n    \
    \                                                                      alphabet.chars.map\
    \ do |j|\n                                                                   \
    \         alphabet.chars.map do |k|\n                                        \
    \                                      alphabet.chars.map do |l|\n           \
    \                                                                     alphabet.chars.map\
    \ do |m|\n                                                                   \
    \               alphabet.chars.map do |n|\n                                  \
    \                                                  alphabet.chars.map do |o|\n\
    \                                                                            \
    \          alphabet.chars.map do |p|\n                                       \
    \                                                 alphabet.chars.map do |q|\n\
    \                                                                            \
    \              alphabet.chars.map do |r|\n                                   \
    \                                                         alphabet.chars.map do\
    \ |s|\n                                                                      \
    \                        alphabet.chars.map do |t|\n                         \
    \                                                                       alphabet.chars.map\
    \ do |u|\n                                                                   \
    \                               alphabet.chars.map do |v|\n                  \
    \                                                                            \
    \      alphabet.", "  s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr }.join\n\
    end", "  s.chars.map { |c| c.ord % 26 + 2 }.join\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  result = ''\n  s.split(\"\").each do |char|\n    result += alphabet[(alphabet.index(char)\
    \ + 2) % alphabet.length]\n  end\n  result\nend", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  rotated_alphabet = alphabet[alphabet.index(alphabet)-2:]+alphabet[:alphabet.index(alphabet)-2]\n\
    \  rotated_s = \"\"\n  for i in s\n    rotated_s += rotated_alphabet[alphabet.index(i)+1]\n\
    \  return rotated_s\n</code>\n<|/ a tags=python,encryption,python-3.x |>\n<| c\
    \ |>\nThanks for your answer! I appreciate it! But I still don't understand how\
    \ I can use your code to encrypt a string. Can you please explain how I can use\
    \ your code to encrypt a string? Thanks!\n<|/ c |>\n<| c |>\nI added an example\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it! But I still don't understand how I can use your code to encrypt\
    \ a string. Can you please explain how I can use your code to encrypt a string?\
    \ Thanks!\n<|/ c |>\n<| c |>\nI added an example to the answer. Hope it helps.\n\
    <|/ c |>\n<| c |>\nThanks for your answer! I appreciate it! But I still don't\
    \ understand how I can use your code to encrypt a string. Can you please explain\
    \ how I can use your code to encrypt a string? Thanks!\n<|/ c |>\n<| a tags=python,encryption,python-3.x\
    \ |>\n<code>", "  alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0])\
    \ + 2]\n  alphabet = alphabet[alphabet.index(alphabet[0]) + 2]\n  alphabet", " \
    \ s.chars.map { |c| c.ord % 26 }.sort.map { |c| c.chr + c.chr * 2 }.join\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
