name: HumanEval_161_solve
language: rb
prompt: "# You are given a string s.\n# if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string\
  \ contains no letters, reverse the string.\n# The function should return the resulted\
  \ string.\n# Examples\n# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"\
  ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_solve\n\
  \    candidate = method(:solve)\n    assert_equal(\"aSdF\", candidate.call(\"AsDf\"\
  ))\n    assert_equal(\"4321\", candidate.call(\"1234\"))\n    assert_equal(\"AB\"\
  , candidate.call(\"ab\"))\n    assert_equal(\"#A@c\", candidate.call(\"#a@C\"))\n\
  \    assert_equal(\"#aSDFw^45\", candidate.call(\"#AsdfW^45\"))\n    assert_equal(\"\
  2@6#\", candidate.call(\"#6@2\"))\n    assert_equal(\"#$A^d\", candidate.call(\"\
  #$a^D\"))\n    assert_equal(\"#CCC\", candidate.call(\"#ccc\"))\n  end\nend\n"
completions: ["  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.gsub!(/[^A-Z]/i)\
    \ { |s| s.downcase }\n  s\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't\
    \ work if the string contains numbers, e.g. \"123abc\".\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that and fixed it.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  s.chars.reverse_each.with_index\
    \ do |char, i|\n    char == char.upcase ? s.chars[0...i] + char.downcase : char\n\
    \  end\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nI like your solution, but I\
    \ believe it can be done more efficiently by using a regex to match each character\
    \ and replace it with the character in upper case or lower case. Something like\
    \ `s.gsub(/./) { |c| c.upcase == c ? c.downcase : c }`\n<|/ c |>\n<| c |>\nYes,\
    \ that would work as well. My solution was more to show how it could be done with\
    \ Ruby methods. I agree that regex is more efficient.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I believe it can be done more efficiently by using a regex\
    \ to match each character and replace it with the character in upper case or lower\
    \ case. Something like `s.gsub(/./) { |c| c.upcase == c ? c.downcase : c }`\n\
    <|/ c |>\n<| c |>\nYes, that would work as well. My solution was more to show\
    \ how it could be done with Ruby methods. I agree that regex is more efficient.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x|\
    \ x.upcase }\n  s.reverse!\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "  s.chars.each do |c|\n    next if c.nil?\n    if c.upcase == c\n  \
    \    s = c.downcase\n    elsif c.downcase == c\n      s = c.upcase\n    end\n\
    \  end\n  s\nend", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\n\
    end\n</code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work if the string\
    \ contains numbers, e.g. \"123abc\".\n<|/ c |>\n<| c |>\nIt doesn't work because\
    \ `gsub!` modifies the string in place. `gsub` returns a new string with the modifications.\n\
    <|/ c |>\n<| c |>\nI didn't know that. Thanks for pointing that out.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for \"#a@C\"\n<|/ c |>\n<| a tags=ruby,string |>\n\
    <code>", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\n\
    \  s\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the string contains\
    \ only letters.\n<|/ c |>\n<| c |>\nYes, it does. `solve(\"ab\")` returns `\"\
    AB\"`\n<|/ c |>\n<| c |>\nYes, it does. `solve(\"ab\")` returns `\"AB\"`\n<|/\
    \ c |>\n<| c |>\nYes, it does. `solve(\"ab\")` returns `\"AB\"`\n<|/ c |>\n<|\
    \ c |>\nYes, it does. `solve(\"ab\")` returns `\"AB\"`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "  s.gsub!(/[^A-Za-z]/) do |x|\n    x.upcase if x.downcase == x\n\
    \    x.downcase if x.upcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n\
    \  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n    x.upcase\
    \ if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase\
    \ if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/)\
    \ do |x|\n    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n \
    \   x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n\
    \    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n\
    \  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n    x.upcase\
    \ if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase\
    \ if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/)\
    \ do |x|\n    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n \
    \   x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if x.upcase == x\n\
    \    x.upcase if x.downcase == x\n    x\n  end\n  s.gsub!(/[^A-Za-z]/) do |x|\n\
    \    x.downcase if x.upcase == x\n    x.upcase if x.downcase == x\n    x\n  end\n\
    \  s.gsub!(/[^A-Za-z]/) do |x|\n    x.downcase if ", "  s.downcase!\n  s.gsub!(/[a-z]/)\
    \ { |x| x.upcase }\n  s.gsub!(/[^a-z]/) { |x| x.downcase }\n  s\nend", "  s.chars.each\
    \ do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase == c\n\
    \    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next if\
    \ c.upcase == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase\n    next if c.downcase ==\
    \ c.upcase.downcase.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase",
  "  s.chars.each do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase\
    \ == c\n    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next\
    \ if c.upcase == c.downcase.upcase\n    next if c.downcase == c.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase\n    next if c.upcase == c.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase\n    next if c.upcase\
    \ == c.downcase.upcase.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.chars.each do |c|\n    next if c.nil?\n    if c.upcase == c\n      s = s.gsub(c.upcase,\
    \ c.downcase)\n    elsif c.downcase == c\n      s = s.gsub(c.downcase, c.upcase)\n\
    \    end\n  end\n  s.chars.reverse.join\nend\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nThis doesn't work if the string contains only letters.\n<|/ c |>\n<| c |>\n\
    Yes, I know. That's why I wrote \"If the string contains no letters, reverse the\
    \ string.\" in the first line. :)\n<|/ c |>\n<| c |>\nI didn't downvote you, but\
    \ I suspect it's because you didn't explain what your code does. You don't explain\
    \ what it does and how it does it.\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| a tags=ruby,string |>\n<code>",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |x| x.upcase }\n  s.reverse!\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI believe this answer does not work. Try it out with\
    \ '#a@C'\n<|/ c |>\n<| c |>\nIt does work. Try it out with '#a@C'\n<|/ c |>\n\
    <| c |>\nI believe it does work. Try it out with '#a@C'\n<|/ c |>\n<| c |>\nI\
    \ believe it does work. Try it out with '#a@C'\n<|/ c |>\n<| c |>\nI believe it\
    \ does work. Try it out with '#a@C'\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  s.chars.reverse_each.with_index.reduce(:+).to_s\n\
    end", "  s.chars.reverse.join if s.chars.any? else s.chars.reverse\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  s.chars.reverse_each.with_index.reduce(:+).to_s\n\
    end", "  s.chars.reverse_each.with_index.reduce(:+)\nend\n</cell>\n<text>\nThe\
    \ Ruby Programming Language\nRuby is a programming language that runs on the Ruby\
    \ Virtual Machine. Ruby programs are written in Ruby code. Ruby programs are executed\
    \ using the Ruby interpreter. Ruby programs are executed by Ruby VM. Ruby programs\
    \ are executed by Ruby interpreter.", "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |c|\
    \ c.upcase }\n  s.reverse!\n  s\nend", "  s = s.to_s\n  s.gsub!(/[^a-zA-Z]/, '')\n\
    \  s.upcase! if s.include?('A')\n  s.downcase! if s.include?('a')\n  s\nend",
  "  s.chars.each do |c|\n    next if c.nil?\n    next if c.empty?\n    next if c.upcase\
    \ == c\n    next if c.downcase == c\n    next if c.upcase == c.downcase\n    next\
    \ if c.downcase == c.upcase\n    next if c.upcase == c.downcase.upcase\n    next\
    \ if c.downcase == c.upcase.downcase\n    next if c.upcase == c.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase\n    next if c.upcase\
    \ == c.downcase.upcase.downcase.upcase.downcase\n    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.downcase == c.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase\n\
    \    next if c.upcase == c.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.upcase.downcase.up",
  "  s.downcase!\n  s.gsub!(/[^a-z]/i) { |s| s.upcase }\n  s.reverse!\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=ruby,string |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
