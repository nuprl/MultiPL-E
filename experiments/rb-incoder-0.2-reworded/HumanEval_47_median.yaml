name: HumanEval_47_median
language: rb
prompt: "# Return median of elements in the array l.\n# >>> median.call([3, 1, 2,\
  \ 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_median\n\
  \    candidate = method(:median)\n    assert_equal(3, candidate.call([3, 1, 2, 4,\
  \ 5]))\n    assert_equal(8.0, candidate.call([-10, 4, 6, 1000, 10, 20]))\n    assert_equal(5,\
  \ candidate.call([5]))\n    assert_equal(5.5, candidate.call([6, 5]))\n    assert_equal(7,\
  \ candidate.call([8, 1, 3, 9, 9, 2, 7]))\n  end\nend\n"
completions: ["  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f /\
    \ 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length ==\
    \ 1 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length\n  l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size / 2] : (l[l.size / 2 - 1] +\
    \ l[l.size / 2])\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size / 2]\
    \ : (l[l.size / 2 - 1] + l[l.size / 2]) / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size % 2 == 0 ? l[(l.size / 2)-1] : l[l.size / 2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n  l.length\
    \ == 1 ? l[0] : (l[l.length / 2] + l[(l.length / 2) - 1]) / 2.0\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.size/2-1]\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n\
    \  l.length / 2\n  l.length % 2 == 0 ? l[l.length / 2] : (l[l.length / 2] + l[l.length\
    \ / 2 - 1]) / 2.0\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n \
    \ l.length\n  l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).ceil - 1]\nend",
  "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length\n  l == [] ? nil : l[(l.length / 2).floor]\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l[l.size / 2]\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n  l.length\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n \
    \ l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n \
    \ l.length / 2\n  l.length / 2.0\nend", "  l.sort!\n  l.length\n  l.length / 2\n\
    \  l.length / 2.0\n  l.length % 2 == 0 ? l[l.length / 2] : (l[l.length / 2] +\
    \ l[l.length / 2 - 1]) / 2.0\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n \
    \ l = l[1..-1] if l.size % 2 == 0 \n  l[(l.size / 2)..-1].median\nend", "  l.sort!\n\
    \  l.length\n  l.length / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n \
    \ l.length.to_f / 2\nend", "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size\n  l[l.size / 2]\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size > 1 \n  l[l.length\
    \ / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0 \n  l.size / 2.0\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size % 2 == 0 ? l[l.size / 2] : (l[l.size / 2 - 1] + l[l.size / 2]) /\
    \ 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0\
    \ ? l[(l.size / 2)..-1] : l[1..(l.size / 2)]\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size\n  l.size / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n  l.length / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l.size / 2\nend", "  l.sort!\n\
    \  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[(l.size / 2).floor]\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length\n  l.length / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n  l[(l.length-1)/2].to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l.sort.reverse\n\
    \  l.length == 1 ? l.first : l[(l.length / 2).floor]\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend",
  "  l.sort!\n  l.length\n  l/2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n \
    \ l = l.length if l.length % 2 == 0 then l.length / 2 else l.length / 2 + 1\n\
    \  l.times { |i| return l[i + (l.length / 2)] if i < l.length / 2 }\n  l.times\
    \ { |i| return l[i - (l.length / 2)] if i > l.length / 2 }\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length\n  l.length / 2\n  l.length % 2 == 0 ? l[l.length / 2] : (l[l.length\
    \ / 2] + l[l.length / 2 - 1]) / 2.0\nend", "  l.sort!\n  l.length.to_f / 2\nend",
  "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", " \
    \ l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n \
    \ l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n\
    \  l.length / 2\nend", "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n \
    \ l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0\n  l.size\n  l[(l.size / 2).floor]\nend", "  l.sort!\n  l\
    \ = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0 ? l[l.size / 2] : (l[l.size\
    \ / 2 - 1] + l[l.size / 2])\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n \
    \ l.length\n  l.length / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 ==\
    \ 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n  l/2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l.length if l.length < 3 else 3\n  l.length\n \
    \ l.length == 1 ? l[0] : (l.length / 2).floor\nend", "  l.sort!\n  l = l[1..-1]\
    \ if l.size % 2 == 0 \n  l[(l.size / 2)..-1].median\nend", "  l.sort!\n  l.length\n\
    \  l[(l.length-1)/2].to_f\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length\n \
    \ l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size\
    \ % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l = l.sort.reverse\n  l.length <\
    \ 2 ? l : l[l.length / 2]\nend", "  l.sort!\n  l.length\n  l.length / 2\nend",
  "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length\n  l.length / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length\n  l == l ? l[0] : (l.length / 2).floor * .5 + l[l.length / 2].floor\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length\n  l.length / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l[l.size / 2]\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f / 2\n\
    end", "  l.sort!\n  l.length\n  l[(l.length / 2) - 1]\nend", "  l.sort!\n  l =\
    \ l[1..-1] if l.size % 2 == 0\n  l.size / 2\nend", "  l.sort!\n  l.length\n  l/2\n\
    end", "  l.sort!\n  l.length == 0 ? nil : l[(l.length-1)/2]\nend", "  l.sort!\n\
    \  l.length.to_f / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n \
    \ l[l.size / 2]\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0 \n  l[l.size\
    \ / 2]\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l.length.to_f / 2\nend", "  l.sort!\n  l.length.to_f\
    \ / 2\nend", "  l.sort!\n  l = l[1..-1] if l.size % 2 == 0\n  l.size % 2 == 0\
    \ ? l[l.size / 2] : (l[l.size / 2 - 1] + l[l.size / 2]) / 2\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
