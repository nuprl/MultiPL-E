name: HumanEval_82_prime_length
language: rb
prompt: "# Write a function that takes a string and returns true if the string\n#\
  \ length is a prime number or false otherwise\n# Examples\n# >>> prime_length.call(\"\
  Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"\
  kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_prime_length\n\
  \    candidate = method(:prime_length)\n    assert_equal(true, candidate.call(\"\
  Hello\"))\n    assert_equal(true, candidate.call(\"abcdcba\"))\n    assert_equal(true,\
  \ candidate.call(\"kittens\"))\n    assert_equal(false, candidate.call(\"orange\"\
  ))\n    assert_equal(true, candidate.call(\"wow\"))\n    assert_equal(true, candidate.call(\"\
  world\"))\n    assert_equal(true, candidate.call(\"MadaM\"))\n    assert_equal(true,\
  \ candidate.call(\"Wow\"))\n    assert_equal(false, candidate.call(\"\"))\n    assert_equal(true,\
  \ candidate.call(\"HI\"))\n    assert_equal(true, candidate.call(\"go\"))\n    assert_equal(false,\
  \ candidate.call(\"gogo\"))\n    assert_equal(false, candidate.call(\"aaaaaaaaaaaaaaa\"\
  ))\n    assert_equal(true, candidate.call(\"Madam\"))\n    assert_equal(false, candidate.call(\"\
  M\"))\n    assert_equal(false, candidate.call(\"0\"))\n  end\nend\n"
completions: ["  string.split(//).each do |char|\n    if char.length % 2 == 0\n  \
    \    return false\n    end\n  end\n  return true\nend", "  string.to_s.chars.each_cons(2).all?\
    \ do |char1, char2|\n    char1.to_i.even? && char2.to_i.even? && char1.to_i +\
    \ char2.to_i == char2.to_i\n  end\nend", "  string.gsub(/[^a-z]/i, '').length\
    \ == string.length\nend", "  string.split(\"\").each do |char|\n    if char.prime?\n\
    \      return true\n    end\n  end\n  return false\nend", "  string.gsub(/[^a-z]/i).length\
    \ == string.gsub(/[^a-z]/i).uniq.size\nend", "  string.to_s.length.prime?\nend",
  "  string.split(\"\").each do |char|\n    if char.prime?\n      return true\n  \
    \  end\n  end\n  return false\nend", "  string.chars.each do |char|\n    return\
    \ false if char == char.upcase\n    return true if char == char.downcase\n  end\n\
    \  true\nend", "  string.gsub(/[^\\d]/,\"\").length == string.gsub(/[^\\d]/,\"\
    \").to_s.length\nend", "  string.to_s.length.prime?\nend", "  string.to_s.length.prime?\n\
    end", "  string.split(//).each do |char|\n    if char.prime?\n      return true\n\
    \    end\n  end\n  return false\nend", "  string.gsub(/[^a-z]/i, '').length ==\
    \ string.gsub(/[^a-z]/i, '').to_s.length\nend", "  string.split(//).each do |char|\n\
    \    if char.length % 2 == 0\n      char.length / 2\n    else\n      char.length\
    \ + 1\n    end\n  end\nend", "  string.gsub(/[^a-z]/i, '').length == string.length\n\
    end", "  string.split(\"\").each do |char|\n    if char.prime?\n      return true\n\
    \    end\n  end\n  return false\nend", "  string.to_s.length.prime?\nend", " \
    \ prime_number = true\n  string.each_char do |char|\n    prime_number = false\
    \ if prime_number == true\n    prime_number = true if char == char.to_i\n  end\n\
    \  prime_number\nend", "  string.split(\"\").each do |char|\n    if char.prime?\n\
    \      return true\n    end\n  end\n  return false\nend", "  string.split(\"\"\
    ).each do |char|\n    if char.prime?\n      return true\n    end\n  end\n  return\
    \ false\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
