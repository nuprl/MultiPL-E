name: HumanEval_90_next_smallest
language: rb
prompt: "# You are given an array of integers.\n# Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n# Return nil if there is\
  \ no such element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5,\
  \ 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1,\
  \ 1])\n# nil\ndef next_smallest(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_next_smallest\n\
  \    candidate = method(:next_smallest)\n    assert_equal(2, candidate.call([1,\
  \ 2, 3, 4, 5]))\n    assert_equal(2, candidate.call([5, 1, 4, 3, 2]))\n    assert_equal(nil,\
  \ candidate.call([]))\n    assert_equal(nil, candidate.call([1, 1]))\n    assert_equal(1,\
  \ candidate.call([1, 1, 1, 1, 0]))\n    assert_equal(nil, candidate.call([1, 1]))\n\
  \    assert_equal(-35, candidate.call([-35, 34, 12, -45]))\n  end\nend\n"
completions: ["  lst.sort.last\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n\
    \  lst[0]\nend", "  lst.sort.first(2)\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[0]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift\
    \ if lst.size < 2\n  lst\nend", "  lst.sort.last\nend", "  return nil if lst.empty?\n\
    \  lst.sort!\n  lst.shift\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n \
    \ lst[1]\nend", "  lst.sort.reverse.first\nend", "  lst.sort!\n  lst.shift if\
    \ lst.size < 2\n  lst\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\n\
    end", "  lst.sort!\n  lst.shift\nend", "  lst.sort.last\nend", "  return nil if\
    \ lst.empty?\n  lst.sort!\n  lst.shift if lst.size == 1\n  lst[0]\nend", "  lst.sort!\n\
    \  lst.shift if lst.size < 2\n  lst[1]\nend", "  lst.sort!\n  lst.shift if lst.size\
    \ < 2\n  lst[1]\nend", "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[0]\nend",
  "  lst.sort!\n  lst.shift if lst.size < 2\n  lst[1]\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
