name: HumanEval_60_sum_to_n
language: rb
prompt: "# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n\
  # 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n\
  # 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sum_to_n\n\
  \    candidate = method(:sum_to_n)\n    assert_equal(1, candidate.call(1))\n   \
  \ assert_equal(21, candidate.call(6))\n    assert_equal(66, candidate.call(11))\n\
  \    assert_equal(465, candidate.call(30))\n    assert_equal(5050, candidate.call(100))\n\
  \  end\nend\n"
completions: ["  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\n\
    sum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\n\
    sum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\n\
    sum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\n\
    sum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\n\
    sum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\n\
    sum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\n\
    sum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\n\
    sum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\n\
    sum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\n\
    sum_to_n(1000000000020)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nNow\
    \ let's use our sum_to_n function and test it on different numbers:", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nNow let's\
    \ see how it works:", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby\
    \ |>\n<| c |>\nI like your solution, although I wouldn't call it \"Rubyish\".\
    \ :)\n<|/ c |>\n<| c |>\n: I agree with you. Ruby's syntax is very similar to\
    \ Python's. I find it easier to read and write. :)\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Ruby's syntax is very similar to Python's. I find it easier to read\
    \ and write. :)\n<|/ c |>\n<| c |>\nI agree with you. Ruby's syntax is very similar\
    \ to Python's. I find it easier to read and write. :)\n<|/ c |>\n<| c |>\nI agree\
    \ with you. Ruby's syntax is very similar to Python's. I find it easier to read\
    \ and write. :)\n<|/ c |>\n<| a dscore=5 |>\n<code>", "  n.times.reduce(:+)\n\
    end", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of vowels contained\
    \ in the string.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<text>\nNow let's use our sum_to_n function and see how it works:", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the factorial of a number.", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nLet's\
    \ try it out on some different numbers:", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\n\
    sum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum +=\
    \ i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ an array of numbers and returns the sum of the squares of the numbers.", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\n\
    Now let's use our sum_to_n function to sum the numbers from 1 to $n$:", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the squares of all the\
    \ integers from 1 to that integer.", "  sum = 0\n  while n > 0\n    sum += n\n\
    \    n -= 1\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n\
    <cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the numbers from 1 to n.", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nLet's try it out on a few examples:", "  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  while\
    \ n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  while n >\
    \ 0\n    sum += n\n    n -= 1\n  sum\nend", "  n.times do |i|\n    sum_to_n.call(i\
    \ + 1) if i <= n\n  end\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I\
    \ believe that it is more efficient to just use Ruby's built-in `sum` method than\
    \ to write your own `sum_to_n` method.\n<|/ c |>\n<| c |>\nI agree with you. My\
    \ solution is more for educational purposes than for production code.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I believe that it is more efficient to just use\
    \ Ruby's built-in `sum` method than to write your own `sum_to_n` method.\n<|/\
    \ c |>\n<| c |>\nI agree with you, but I believe that it is more efficient to\
    \ just use Ruby's built-in `sum` method than to write your own `sum_to_n` method.\n\
    <|/ c |>\n<| c |>\nI agree with you, but I believe that it is more efficient to\
    \ just use Ruby's built-in `sum` method than to write your own `sum_to_n` method.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<code language=julia-0.6>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-0.6>\nsum_to_n(100)\n</cell>\n<code language=julia-0.6>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-0.6>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-0.6>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  n.times do |i|\n    yield(i)\n  end\n  n\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times do |i|\n\
    \    sum += i\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nThanks for your answer. I'm still learning Ruby so I appreciate\
    \ your help.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  n.times.reduce(:+)\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n\
    <cell>\nsum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n\
    <cell>\nsum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n\
    <cell>\nsum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n\
    <cell>\nsum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n\
    <cell>\nsum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n\
    <cell>\nsum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n\
    <cell>\nsum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n\
    <cell>\nsum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n\
    <cell>\nsum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(1000000000020)\n</cell>\n\
    <cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer and returns the sum\
    \ of the first n positive integers. For example, sum_to_n(3) should return 1 +\
    \ 2 + 3 = 6.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<cell>", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. Use a while loop to do\
    \ this.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n\
    </cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000001)\n</cell>\n\
    <cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\nsum_to_n(1000000000003)\n</cell>\n\
    <cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\nsum_to_n(1000000000005)\n</cell>\n\
    <cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\nsum_to_n(1000000000007)\n</cell>\n\
    <cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\nsum_to_n(1000000000009)\n</cell>\n\
    <cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\nsum_to_n(1000000000011)\n</cell>\n\
    <cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\nsum_to_n(1000000000013)\n</cell>\n\
    <cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\nsum_to_n(1000000000015)\n</cell>\n\
    <cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\nsum_to_n(1000000000017)\n</cell>\n\
    <cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\nsum_to_n(1000000000019)\n</cell>\n\
    <cell>\nsum_to_n(1000000000020)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times do |i|\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\nsum_to_n(10000)\n\
    </cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the first n numbers\
    \ of a Fibonacci sequence. For example, sum_to_n(3) should return 0, 1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34, 55, 89, 144, ...", "  sum = 0\n  while n > 0\n    sum +=\
    \ n\n    n -= 1\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -=\
    \ 1\n  end\n  sum\nend", "  n.times do |i|\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  n.times\
    \ do |i|\n    yield(i + 1)\n  end\nend", "  n.times.reduce(:+)\nend", "  n.times\
    \ do |i|\n    yield(i)\n  end\n  n\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like this solution, but I wonder if it can be done without using an explicit\
    \ loop. I'm thinking about `Enumerator` but I'm not sure.\n<|/ c |>\n<| c |>\n\
    I added a solution without an explicit loop. :)\n<|/ c |>\n<| a |>\n<code>", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n\
    </cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n\
    <cell>", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times\
    \ do |i|\n    yield(i)\n  end\n  n\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<cell>\nsum_to_n.call(2)\n</cell>\n<cell>\n\
    sum_to_n.call(3)\n</cell>\n<cell>\nsum_to_n.call(4)\n</cell>\n<cell>\nsum_to_n.call(5)\n\
    </cell>\n<cell>\nsum_to_n.call(6)\n</cell>\n<cell>\nsum_to_n.call(7)\n</cell>\n\
    <cell>\nsum_to_n.call(8)\n</cell>\n<cell>\nsum_to_n.call(9)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(11)\n</cell>\n<cell>\nsum_to_n.call(12)\n\
    </cell>\n<cell>\nsum_to_n.call(13)\n</cell>\n<cell>\nsum_to_n.call(14)\n</cell>\n\
    <cell>\nsum_to_n.call(15)\n</cell>\n<cell>\nsum_to_n.call(16)\n</cell>\n<cell>\n\
    sum_to_n.call(17)\n</cell>\n<cell>\nsum_to_n.call(18)\n</cell>\n<cell>\nsum_to_n.call(19)\n\
    </cell>\n<cell>\nsum_to_n.call(20)\n</cell>\n<cell>\nsum_to_n.call(21)\n</cell>\n\
    <cell>\nsum_to_n.call(22)\n</cell>\n<cell>\nsum_to_n.call(23)\n</cell>\n<cell>\n\
    sum_to_n.call(24)\n</cell>\n<cell>\nsum_to_n.call(25)\n</cell>\n<cell>\nsum_to_n.call(26)\n\
    </cell>\n<cell>\nsum_to_n.call(27)\n</cell>\n<cell>\nsum_to_n.call(28)\n</cell>\n\
    <cell>\nsum_to_n.call(29)\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum\
    \ = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe\
    \ function sum_to_n takes one argument, n, and returns the sum of the integers\
    \ from 1 to n.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n\
    \    yield(i + 1)\n  end\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n\
    \ -= 1\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n \
    \   n -= 1\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  n.times do\n    sum += rand(10)\n  end\n\
    \  sum\nend", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend",
  "  n.times.reduce(:+)\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n    yield(i + 1)\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like this solution,\
    \ but I feel like it could be improved by using an enumerator instead of an explicit\
    \ loop. `(1..n).each` would work, but `(1..n).to_enum` would work just as well.\
    \ `(1..n).to_enum.with_index { |i, index| yield(index) }` would also work, but\
    \ `(1..n).to_enum.with_index.with_object([]) { |(i, index), obj| obj.push(yield(index))\
    \ }` would work just as well. `(1..n).to_enum.with_index.with_object([]) { |(i,\
    \ index), obj| obj.push(yield(index)) }.reduce(:+)` would work just as well. `(1..n).to_enum.with_index.with_object([])\
    \ { |(i, index), obj| obj.push(yield(index)) }.reduce(:+).to_i` would work just\
    \ as well. `(1..n).to_enum.with_index.with_object([]) { |(i, index), obj| obj.push(yield(index))\
    \ }.reduce(:+).to_i` would work just as well. `(1..n).to_enum.with_index.with_object([])\
    \ { |(i, index), obj| obj.push(yield(index)) }.reduce(:+).to_i` would work just\
    \ as well. `(1..n).to_enum.with_index.with_object([]) { |(i, index), obj| obj.push(yield(index))\
    \ }.reduce(:+).to_i` would work just as well. `(1..n).to_enum.with_index.with_object([])\
    \ { |(i, index), obj| obj.push(yield(index)) }.reduce(:+).to_i` would work just\
    \ as well. `(1..n).to_enum.with_index.with_object([]) { |(i, index), obj| obj.push(yield(index))\
    \ }.reduce(:+).to_i` would work just as well. `(1..n).to_enum.with_index.with_object([])\
    \ { |(i, index), obj| obj.push(yield(index)) }.reduce(:+).to_i` would work just\
    \ as well. `(1..n).to_enum.with_index.with_object([]) { |(i, index), obj| obj.push(yield(index))\
    \ }.reduce(:+).to_i` would work just as well. `(1..n).to_enum", "  sum = 0\n \
    \ for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n\
    <| c |>\nI like your solution, but I prefer to use `inject` instead of `reduce`.\
    \ `inject` makes it clearer that you're summing up all the elements in the array\
    \ and returning the sum.\n<|/ c |>\n<| c |>\nI agree with you, `inject` is more\
    \ readable and more idiomatic.\n<|/ c |>\n<| c |>\nI agree with you, `inject`\
    \ is more readable and more idiomatic. `inject` is more readable and more idiomatic.\
    \ `inject` is more readable and more idiomatic. `inject` is more readable and\
    \ more idiomatic. `inject` is more readable and more idiomatic. `inject` is more\
    \ readable and more idiomatic. `inject` is more readable and more idiomatic. `inject`\
    \ is more readable and more idiomatic. `inject` is more readable and more idiomatic.\
    \ `inject` is more readable and more idiomatic. `inject` is more readable and\
    \ more idiomatic. `inject` is more readable and more idiomatic. `inject` is more\
    \ readable and more idiomatic. `inject` is more readable and more idiomatic. `inject`\
    \ is more readable and more idiomatic. `inject` is more readable and more idiomatic.\
    \ `inject` is more readable and more idiomatic. `inject` is more readable and\
    \ more idiomatic. `inject` is more readable and more idiomatic. `inject` is more\
    \ readable and more idiomatic. `inject` is more readable and more idiomatic. `inject`\
    \ is more readable and more idiomatic. `inject` is more readable and more idiomatic.\
    \ `inject` is more readable and more idiomatic. `inject` is more readable and\
    \ more idiomatic. `inject` is more readable and more idiomatic. `inject` is more\
    \ readable and more idiomatic. `inject` is more readable and more idiomatic. `inject`\
    \ is more readable and more idiomatic. `inject` is more readable and more idiomatic.\
    \ `inject` is more readable and more idiomatic. `inject` is more readable and\
    \ more idiomatic. `inject` is more readable and more idiomatic. `inject` is more\
    \ readable and more idiomatic. `inject` is more readable and more idiomatic. `inject`\
    \ is more ", "  n.times.reduce(:+)\nend", "  sum = 0\n  while n > 0\n    sum +=\
    \ n\n    n -= 1\n  end\n  sum\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes an integer and returns the sum of the numbers from 1 to that integer.",
  "  n.times.reduce(:+)\nend", "  n.times do |i|\n    yield(i)\n  end\n  n\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\n\
    The function sum_to_n takes one argument, n, and returns the sum of the numbers\
    \ from 1 to n.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000001)\n</cell>\n<cell>\nsum_to_n(1000000000002)\n</cell>\n<cell>\n\
    sum_to_n(1000000000003)\n</cell>\n<cell>\nsum_to_n(1000000000004)\n</cell>\n<cell>\n\
    sum_to_n(1000000000005)\n</cell>\n<cell>\nsum_to_n(1000000000006)\n</cell>\n<cell>\n\
    sum_to_n(1000000000007)\n</cell>\n<cell>\nsum_to_n(1000000000008)\n</cell>\n<cell>\n\
    sum_to_n(1000000000009)\n</cell>\n<cell>\nsum_to_n(1000000000010)\n</cell>\n<cell>\n\
    sum_to_n(1000000000011)\n</cell>\n<cell>\nsum_to_n(1000000000012)\n</cell>\n<cell>\n\
    sum_to_n(1000000000013)\n</cell>\n<cell>\nsum_to_n(1000000000014)\n</cell>\n<cell>\n\
    sum_to_n(1000000000015)\n</cell>\n<cell>\nsum_to_n(1000000000016)\n</cell>\n<cell>\n\
    sum_to_n(1000000000017)\n</cell>\n<cell>\nsum_to_n(1000000000018)\n</cell>\n<cell>\n\
    sum_to_n(1000000000019)\n</cell>\n<cell>\nsum_to_n(", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the square root of a number. For example,\
    \ sqrt(4) should return 2.82842..., not 2.", "  sum = 0\n  for i in 1..n\n   \
    \ sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of numbers and returns the sum\
    \ of the squares of the numbers.", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the squares of the numbers from 1 to\
    \ n.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function\
    \ sum_to_n is now defined. Let's test it.", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -=\
    \ 1\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n\
    </cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n\
    </cell>\n<cell>\nsum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n\
    <cell>\nsum_to_n(1000000)\n</cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000)\n</cell>\n<cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000)\n</cell>\n<cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\n\
    sum_to_n(1000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000000000)\n\
    </cell>", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend", "  sum\
    \ = 0\n  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n\
    \  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(1000)\n</cell>\n<cell>\n\
    sum_to_n(10000)\n</cell>\n<cell>\nsum_to_n(100000)\n</cell>\n<cell>\nsum_to_n(1000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000)\n</cell>\n<cell>\nsum_to_n(100000000)\n</cell>\n\
    <cell>\nsum_to_n(1000000000)\n</cell>\n<cell>\nsum_to_n(10000000000)\n</cell>\n\
    <cell>\nsum_to_n(100000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000)\n</cell>\n\
    <cell>\nsum_to_n(10000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(100000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(1000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(100000000000000000000000000000)\n</cell>\n<cell>\nsum_to_n(1000000000000000000000000000000)\n\
    </cell>\n<cell>\nsum_to_n(10000000000000000000000000000000)\n</cell>\n<cell>\n\
    sum_to_n(100000000000000000000000000000000)\n</cell>", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    I like the idea of using an iterator, but I wonder if this is really more efficient\
    \ than just using a for loop and a sum.\n<|/ c |>\n<| c |>\nThe for loop is more\
    \ efficient than a sum, but I guess the difference is negligible.\n<|/ c |>\n\
    <| c |>\nThe for loop is more efficient than a sum, but I guess the difference\
    \ is negligible.\n<|/ c |>\n<| c |>\nThe for loop is more efficient than a sum,\
    \ but I guess the difference is negligible.\n<|/ c |>\n<| c |>\nThe for loop is\
    \ more efficient than a sum, but I guess the difference is negligible.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>", "  sum = 0\n  n.times do |i|\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<cell>", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n\
    </cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\n\
    sum_to_n(0)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n\
    <cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(0)\n\
    </cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\n\
    sum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(0)\n</cell>\n\
    <cell>\nsum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n\
    </cell>\n<cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(0)\n</cell>\n<cell>\n\
    sum_to_n(10)\n</cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<cell>\nsum_to_n(0)\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<cell>\nsum_to_n(0)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(1)\n\
    </cell>\n<cell>\nsum_to_n(0)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_", "  sum = 0\n  while n > 0\n    sum +=\
    \ n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n\
    \  end\n  sum\nend", "  sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of all numbers from 1 to n that are divisible by 3.", " \
    \ n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times\
    \ do |i|\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum\
    \ += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n\
    </cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n\
    <cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n</cell>\n<cell>",
  "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  n.times do |i|\n\
    \    yield(i)\n  end\n  n\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n \
    \ end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n\
    <cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n<cell>\n\
    sum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in the number.", "  sum = 0\n  n.times do |i|\n    sum\
    \ += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", " \
    \ n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n\
    \  sum\nend\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n\
    </cell>\n<cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n\
    <cell>\nsum_to_n.call(1)\n</cell>\n<cell>\nsum_to_n.call(2)\n</cell>\n<cell>\n\
    sum_to_n.call(3)\n</cell>\n<cell>\nsum_to_n.call(4)\n</cell>\n<cell>\nsum_to_n.call(5)\n\
    </cell>\n<cell>\nsum_to_n.call(6)\n</cell>\n<cell>\nsum_to_n.call(7)\n</cell>\n\
    <cell>\nsum_to_n.call(8)\n</cell>\n<cell>\nsum_to_n.call(9)\n</cell>\n<cell>\n\
    sum_to_n.call(10)\n</cell>\n<cell>\nsum_to_n.call(11)\n</cell>\n<cell>\nsum_to_n.call(12)\n\
    </cell>\n<cell>\nsum_to_n.call(13)\n</cell>\n<cell>\nsum_to_n.call(14)\n</cell>\n\
    <cell>\nsum_to_n.call(15)\n</cell>\n<cell>\nsum_to_n.call(16)\n</cell>\n<cell>\n\
    sum_to_n.call(17)\n</cell>\n<cell>\nsum_to_n.call(18)\n</cell>\n<cell>\nsum_to_n.call(19)\n\
    </cell>\n<cell>\nsum_to_n.call(20)\n</cell>\n<cell>\nsum_to_n.call(21)\n</cell>\n\
    <cell>\nsum_to_n.call(22)\n</cell>\n<cell>\nsum_to_n.call(23)\n</cell>\n<cell>\n\
    sum_to_n.call(24)\n</cell>\n<cell>\nsum_to_n.call(25)\n</cell>\n<cell>\nsum_to_n.call(26)\n\
    </cell>\n<cell>\nsum_to_n.call(27)\n</cell>\n<cell>\nsum_to_n.call(28)\n</cell>\n\
    <cell>\nsum_to_n.call(29)\n</cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\n\
    sum", "  sum = 0\n  n.times do |i|\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend", "  sum = 0\n  n.times do |i|\n  \
    \  sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(30)\n</cell>\n<cell>\n\
    sum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\nsum_to_n(10)\n</cell>\n\
    <cell>\nsum_to_n(1)\n</cell>\n<cell>", "  sum = 0\n  while n > 0\n    sum += n\n\
    \    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n \
    \ end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\n\
    end", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend", "  sum =\
    \ 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n  for i\
    \ in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<text>\nThe function sum_to_n\
    \ takes one argument, n, and returns the sum of the integers from 1 to n.", " \
    \ sum = 0\n  while n > 0\n    sum += n\n    n -= 1\n  sum\nend", "  sum = 0\n\
    \  while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  while\
    \ n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for i in\
    \ 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n  \
    \  sum += i\n  end\n  sum\nend", "  sum = 0\n  for i in 1..n\n    sum += i\n \
    \ end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n  for i in 1..n\n\
    \    sum += i\n  end\n  sum\nend", "  n.times.reduce(:+)\nend", "  sum = 0\n \
    \ while n > 0\n    sum += n\n    n -= 1\n  end\n  sum\nend", "  sum = 0\n  for\
    \ i in 1..n\n    sum += i\n  end\n  sum\nend\n</cell>\n<cell>\nsum_to_n(10)\n\
    </cell>\n<cell>\nsum_to_n(100)\n</cell>\n<cell>\nsum_to_n(5)\n</cell>\n<cell>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.", "  sum = 0\n  for i in 1..n\n    sum += i\n  end\n  sum\nend\n\
    </cell>\n<cell>\nsum_to_n.call(30)\n</cell>\n<cell>\nsum_to_n.call(100)\n</cell>\n\
    <cell>\nsum_to_n.call(5)\n</cell>\n<cell>\nsum_to_n.call(10)\n</cell>\n<cell>\n\
    sum_to_n.call(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of a number."]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
