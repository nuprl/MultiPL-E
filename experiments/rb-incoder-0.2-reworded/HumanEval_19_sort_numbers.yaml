name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend",
  "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    )\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \").map{|n| n.to_i}\n\
    \  numbers.sort!\n  numbers.map!{|n| n.to_s}.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=ruby,sorting,arrays |>\n<| c |>\nI like your solution. One thing I noticed\
    \ is that it only works if you have a single digit number in the string. For example,\
    \ sort_numbers.call(\"three one five\") returns \"one three five\" instead of\
    \ \"three one five\"\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| c |>\nI like your solution. One thing I noticed is that\
    \ it only works if you have a single digit number in the string. For example,\
    \ sort_numbers.call(\"three one five\") returns \"one three five\" instead of\
    \ \"three one five\"\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require a helper method. Nice and clean.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, because it doesn't require a helper method. Nice and clean.\n<|/ c\
    \ |>\n<| c |>\nI like this solution as well, because it doesn't require a helper\
    \ method. Nice and clean.\n<|/ c |>\n<| c |>\nI like this solution as well, because\
    \ it doesn't require a helper method. Nice and clean.\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, because it doesn't require a helper method. Nice and\
    \ clean.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI like using sort_by and\
    \ map for this:\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a little more. `sort_numbers` can be simplified to `sort_numbers(numbers)` since\
    \ `numbers` will already be an array.\n<|/ c |>\n<| c |>\nThanks, I updated my\
    \ answer to reflect your suggestion.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
