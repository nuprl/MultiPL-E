name: HumanEval_19_sort_numbers
language: rb
prompt: "# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  # Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to\
  \ largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef\
  \ sort_numbers(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_numbers\n\
  \    candidate = method(:sort_numbers)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"three\", candidate.call(\"three\"))\n    assert_equal(\"\
  three five nine\", candidate.call(\"three five nine\"))\n    assert_equal(\"zero\
  \ four five seven eight nine\", candidate.call(\"five zero four seven nine eight\"\
  ))\n    assert_equal(\"zero one two three four five six\", candidate.call(\"six\
  \ five four three two one zero\"))\n  end\nend\n"
completions: ["  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,string\
    \ |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend",
  "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    )\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \").map{|n| n.to_i}\n\
    \  numbers.sort!\n  numbers.map!{|n| n.to_s}.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=ruby,sorting,arrays |>\n<| c |>\nI like your solution. One thing I noticed\
    \ is that it only works if you have a single digit number in the string. For example,\
    \ sort_numbers.call(\"three one five\") returns \"one three five\" instead of\
    \ \"three one five\"\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| c |>\nI like your solution. One thing I noticed is that\
    \ it only works if you have a single digit number in the string. For example,\
    \ sort_numbers.call(\"three one five\") returns \"one three five\" instead of\
    \ \"three one five\"\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out!\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because it doesn't\
    \ require a helper method. Nice and clean.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well, because it doesn't require a helper method. Nice and clean.\n<|/ c\
    \ |>\n<| c |>\nI like this solution as well, because it doesn't require a helper\
    \ method. Nice and clean.\n<|/ c |>\n<| c |>\nI like this solution as well, because\
    \ it doesn't require a helper method. Nice and clean.\n<|/ c |>\n<| c |>\nI like\
    \ this solution as well, because it doesn't require a helper method. Nice and\
    \ clean.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\nI like using sort_by and\
    \ map for this:\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution, but I believe it can be simplified\
    \ a little more. `sort_numbers` can be simplified to `sort_numbers(numbers)` since\
    \ `numbers` will already be an array.\n<|/ c |>\n<| c |>\nThanks, I updated my\
    \ answer to reflect your suggestion.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\"\
    \ \")\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \").map { |n| n.to_i }\n  numbers.sort!\n\
    \  numbers.map { |n| n.to_s }.join(\" \")\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  numbers.split(\" \"\
    ).sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.to_s.split(\" \").map(&:to_i)\n  numbers.sort!\n\
    \  numbers.join(\" \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this solution, but I wanted to add that you can also use sort_by\
    \ to sort by multiple criteria.\n<|/ c |>\n<| c |>\nI like your solution, but\
    \ I wanted to add that you can also use sort_by to sort by multiple criteria.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wanted to add that you can also\
    \ use sort_by to sort by multiple criteria.\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wanted to add that you can also use sort_by to sort by multiple criteria.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wanted to add that you can also\
    \ use sort_by to sort by multiple criteria.\n<|/ c |>\n<| a |>\nI like your solution,\
    \ but I wanted to add that you can also use sort_by to sort by multiple criteria.\n\
    <code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\"\
    \ \").map { |n| n.to_i }\n  numbers.sort!\n  numbers.join(\" \")\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split.sort.join\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I believe\
    \ it can be simplified a little bit by removing the `if` statement. `numbers.split.sort.join`\
    \ will return the array unchanged if there are no numbers in the string. `numbers.split.sort.join.empty?`\
    \ will return `true` if the array is empty. `if numbers.split.sort.join.empty?`\
    \ will return the array unchanged if there are no numbers in the string. `numbers.split.sort.join.empty?`\
    \ will return the array unchanged if there are no numbers in the string.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for negative numbers, e.g. `sort_numbers.call(\"\
    one two -three\")` returns `\"-three one two\"`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers, e.g. `sort_numbers.call(\"one two -three\")` returns\
    \ `\"-three one two\"`.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers,\
    \ e.g. `sort_numbers.call(\"one two -three\")` returns `\"-three one two\"`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers, e.g. `sort_numbers.call(\"\
    one two -three\")` returns `\"-three one two\"`.\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \").map { |n| n.to_i\
    \ }\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers = numbers.split(\"\
    \ \")\n  numbers.sort!\n  numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", " \
    \ numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nI like this solution, since it avoids having to use an if statement. Also,\
    \ it's very easy to understand.\n<|/ c |>\n<| c |>\nI like this solution as well.\
    \ Very elegant and easy to understand.\n<|/ c |>\n<| c |>\nI like this solution\
    \ as well. Very elegant and easy to understand.\n<|/ c |>\n<| c |>\nI like this\
    \ solution as well. Very elegant and easy to understand.\n<|/ c |>\n<| c |>\n\
    I like this solution as well. Very elegant and easy to understand.\n<|/ c |>\n\
    <| a tags=ruby,sorting,ruby-on-rails |>\n<code>", "  numbers = numbers.split('\
    \ ')\n  numbers.map! { |n| n.to_i }\n  numbers.sort!\n  numbers.join(' ')\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\n`sort_numbers` doesn't return anything, so\
    \ `puts` doesn't do anything. `puts` prints to the console, not the return value.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split.sort.join\n\
    end", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort!\n  numbers.strip!\n  numbers\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(' ')\n  numbers.sort!\n  numbers.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort_by { |n| n.to_i }.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, because\
    \ it doesn't require a separate method call. Thanks!\n<|/ c |>\n<| c |>\nThis\
    \ solution doesn't work for negative numbers. `sort_numbers(\"-3 -2 -1 0 1 2 3\
    \ 4\")` returns `-1 -2 -3 0 1 2 3 4`.\n<|/ c |>\n<| c |>\nThis solution doesn't\
    \ work for negative numbers. `sort_numbers(\"-3 -2 -1 0 1 2 3 4\")` returns `-1\
    \ -2 -3 0 1 2 3 4`.\n<|/ c |>\n<| c |>\nThis solution doesn't work for negative\
    \ numbers. `sort_numbers(\"-3 -2 -1 0 1 2 3 4\")` returns `-1 -2 -3 0 1 2 3 4`.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work for negative numbers. `sort_numbers(\"\
    -3 -2 -1 0 1 2 3 4\")` returns `-1 -2 -3 0 1 2 3 4`.\n<|/ c |>\n<| a tags=ruby,sorting\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\"\
    \ \").sort\n  numbers.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails,ruby-on-rails-3\
    \ |>\n<| c |>\nI like this solution, but I wonder if there is a way to do this\
    \ without having to use an instance variable. I'm sure there is, but I haven't\
    \ found it yet.\n<|/ c |>\n<| c |>\nI added a version that doesn't use an instance\
    \ variable.\n<|/ c |>\n<| c |>\nI like that solution. Thanks!\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers\
    \ = numbers.split(' ')\n  numbers.map! do |n|\n    n.to_i\n  end\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort!\n  numbers.split(\"\
    \ \").join(\" \")\nend", "  numbers.split(\" \").sort!\n  numbers.strip!\n  numbers\n\
    end\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like your solution,\
    \ but I wonder if there is a way to do it without having to use an extra method.\
    \ I'm thinking something along the lines of `sort_numbers.call(\"three one five\"\
    )` where `sort_numbers` returns a string with numbers sorted from smallest to\
    \ largest.\n<|/ c |>\n<| c |>\nI updated my answer to include a solution that\
    \ doesn't require an extra method.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n\
    <code>", "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,sorting,string |>\n<| a tags=ruby,sorting,string\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(' ')\n\
    \  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  numbers.split.sort.join('\
    \ ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend",
  "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    )\n  numbers.sort!\n  numbers.join(\" \")\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers.call(\"three one five\"\
    )` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nIt works for me in Ruby 2.1.3.\
    \ What version of Ruby are you using?\n<|/ c |>\n<| c |>\nRuby 2.1.3 on Mac OS\
    \ X 10.8.5\n<|/ c |>\n<| c |>\nI added a version that works in Ruby 2.1.3 on Mac\
    \ OS X 10.8.5\n<|/ c |>\n<| c |>\nI added a version that works in Ruby 2.1.3 on\
    \ Mac OS X 10.8.5\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\"\
    \ \").sort_by { |n| n.to_i }.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split.sort.join\nend", "  numbers.split.sort.join\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,string |>\n<| a tags=ruby,string |>\n<code>",
  "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby |>\n<| a\
    \ dscore=0 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \").sort\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\"\
    \ \").sort\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n\
    </code>\n<|/ a |>\n<| c |>\nI like your solution. My only concern is that it's\
    \ very unreadable and hard to maintain. I'd rather use a regex to extract the\
    \ numbers and then sort them in a separate step.\n<|/ c |>\n<| c |>\nI agree,\
    \ it's unreadable. That's why I posted a comment instead of an answer. I'm sure\
    \ there are other ways to do it, but this one seemed pretty straightforward.\n\
    <|/ c |>\n<| c |>\nI agree with you. I just wanted to point out that your solution\
    \ doesn't actually sort the numbers. It's just sorting them in alphabetical order.\
    \ That's why I didn't mark it as the accepted answer.\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. I'll update my answer to reflect that.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby |>\n<code>", "  numbers.split.sort.join\n\
    end\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like this solution, but I wonder if\
    \ there's a way to get it to work with a variable number of arguments?\n<|/ c\
    \ |>\n<| c |>\n: Yes, you can pass an array as the argument: `sort_numbers(*numbers)`\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ my solution. Thanks!\n<|/ c |>\n<| c |>\nI like this solution, but I wonder\
    \ if there's a way to get it to work with a variable number of arguments?\n<|/\
    \ c |>\n<| c |>\n: Yes, you can pass an array as the argument: `sort_numbers(*numbers)`\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant than\
    \ my solution. Thanks!\n<|/ c |>\n<| a tags=ruby,sorting,string |>\n<code>", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    )\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nThis doesn't work\
    \ if you have a string like \"one two three\"\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ because `sort` sorts alphabetically not numerically. `\"one two three\".split(\"\
    \ \").sort #=> [\"one\", \"two\", \"three\"]`\n<|/ c |>\n<| c |>\nYes, I see that\
    \ now. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=5 |>\n<code>", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.to_s.split\n\
    \  numbers.sort!\n  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split.sort.join\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and concise than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and concise than other solutions.\n\
    <|/ c |>\n<| c |>\nThis should be the accepted answer. Much more elegant and concise\
    \ than other solutions.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ Much more elegant and concise than other solutions.\n<|/ c |>\n<| c |>\nThis\
    \ should be the accepted answer. Much more elegant and concise than other solutions.\n\
    <|/ c |>\n<| a tags=ruby,ruby-on-rails,ruby-on-rails-3 |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"` instead of `\"one three five\"`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works. Are you sure you copied the code correctly? I tested\
    \ it on ruby 2.1.2 and 2.1.3 on Windows 7.\n<|/ c |>\n<| c |>\nYes, I copied it\
    \ exactly. I'm using Ruby 2.1.2 on Windows 7. Maybe it's an issue with my version\
    \ of Ruby?\n<|/ c |>\n<| c |>\nI tested it on ruby 2.1.2 and 2.1.3 on Windows\
    \ 7. Are you sure you copied the code correctly? I tested it on ruby 2.1.2 and\
    \ 2.1.3 on Windows 7. Are you sure you copied the code correctly? I tested it\
    \ on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the code correctly?\
    \ I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the\
    \ code correctly? I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure\
    \ you copied the code correctly? I tested it on ruby 2.1.2 and 2.1.3 on Windows\
    \ 7. Are you sure you copied the code correctly? I tested it on ruby 2.1.2 and\
    \ 2.1.3 on Windows 7. Are you sure you copied the code correctly? I tested it\
    \ on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the code correctly?\
    \ I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the\
    \ code correctly? I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure\
    \ you copied the code correctly? I tested it on ruby 2.1.2 and 2.1.3 on Windows\
    \ 7. Are you sure you copied the code correctly? I tested it on ruby 2.1.2 and\
    \ 2.1.3 on Windows 7. Are you sure you copied the code correctly? I tested it\
    \ on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the code correctly?\
    \ I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure you copied the\
    \ code correctly? I tested it on ruby 2.1.2 and 2.1.3 on Windows 7. Are you sure\
    \ you copied the code correctly? I tested it on ", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't\
    \ work for me. `sort_numbers.call(\"three one five\")` returns `\"one three five\"\
    `.\n<|/ c |>\n<| c |>\nIt works for me in Ruby 1.9.3. What version are you using?\n\
    <|/ c |>\n<| c |>\nRuby 1.8.7 (2010-01-10 patchlevel 249) [i686-linux]\n<|/ c\
    \ |>\n<| c |>\nI tested it on 1.8.7 and 1.9.3. I think it might be a bug in 1.8.7.\
    \ I'll see if I can reproduce it on 1.9.3.\n<|/ c |>\n<| c |>\nI tested it on\
    \ 1.8.7 and 1.9.3. I think it might be a bug in 1.8.7. I'll see if I can reproduce\
    \ it on 1.9.3.\n<|/ c |>\n<| a |>\n<code>", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n<|/ a dscore=3\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers.call(\"three one five\"\
    )` returns `\"one three five\"` instead of `\"one three five\"`.\n<|/ c |>\n<|\
    \ c |>\n, that's because you didn't read the question carefully enough. `sort_numbers.call(\"\
    three one five\")` returns `\"one three five\"` because that's what it does. If\
    \ you want it to return `\"one three five\"` then you need to change `sort_numbers.call(\"\
    three one five\")` to `sort_numbers.call(\"three one five\").split(\" \").sort.join(\"\
    \ \")`.\n<|/ c |>\n<| c |>\nAh I see. Thanks for your help.\n<|/ c |>\n<| a tags=ruby,string\
    \ |>\n<code>", "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\"\
    \ \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split.sort.join\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split(\" \")\n  numbers.sort!\n  numbers.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    ).sort\n  numbers.join(\" \")\nend", "  numbers = numbers.split(\" \").map { |n|\
    \ n.to_i }\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers = numbers.to_s\n\
    \  numbers = numbers.gsub(/\\s+/, ' ').gsub(/[^0-9]+/, '')\n  numbers = numbers.split('\
    \ ')\n  numbers.sort!\n  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,regex\
    \ |>\n<| c |>\nThis doesn't work if the numbers are in reverse order. `sort_numbers.call(\"\
    nine six four\")` returns `\"four six nine\"`\n<|/ c |>\n<| c |>\nI didn't see\
    \ that requirement. I've updated my answer to handle that case.\n<|/ c |>\n<|\
    \ a dscore=2 |>\n<code>", "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| c |>\n\
    This doesn't work for me. `sort_numbers.call(\"three one five\")` returns `\"\
    three one five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works for me. Are you\
    \ sure you copied it correctly? I tested it again and it works for me too.\n<|/\
    \ c |>\n<| c |>\nYes, I copied it correctly. I'm using Ruby 1.9.3p448 (2013-06-27\
    \ revision 41675) [x86_64-darwin10.8.0]\n<|/ c |>\n<| c |>\nI tested it again\
    \ and it works for me too. Are you sure you copied it correctly? I tested it again\
    \ and it works for me too.\n<|/ c |>\n<| c |>\nI tested it again and it works\
    \ for me too. Are you sure you copied it correctly? I tested it again and it works\
    \ for me too.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  numbers = numbers.split(\"\
    \ \")\n  numbers.sort!\n  numbers.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,sorting,string |>\n<| c |>\nI like your solution,\
    \ but I prefer `sort_by` over `sort` since it returns a new array instead of modifying\
    \ the existing one.\n<|/ c |>\n<| c |>\nI agree with you. `sort_by` would be more\
    \ appropriate in this case.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer\
    \ `sort_by` over `sort` since it returns a new array instead of modifying the\
    \ existing one.\n<|/ c |>\n<| c |>\nI like your solution, but I prefer `sort_by`\
    \ over `sort` since it returns a new array instead of modifying the existing one.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I prefer `sort_by` over `sort` since\
    \ it returns a new array instead of modifying the existing one.\n<|/ c |>\n<|\
    \ a dscore=5 |>\n<code>", "  numbers.split(\" \").sort_by { |n| n.to_i }.join\n\
    end\n</code>\n<|/ a tags=ruby |>\n<| c |>\n`sort_by` will sort by ASCII order.\
    \ `sort_by!` will sort by numeric order. `sort_by!` will sort by numeric order\
    \ but will mutate the original array. `sort_by!` will sort by numeric order but\
    \ will mutate the original array. `sort_by!` will sort by numeric order but will\
    \ mutate the original array. `sort_by!` will sort by numeric order but will mutate\
    \ the original array. `sort_by!` will sort by numeric order but will mutate the\
    \ original array. `sort_by!` will sort by numeric order but will mutate the original\
    \ array. `sort_by!` will sort by numeric order but will mutate the original array.\
    \ `sort_by!` will sort by numeric order but will mutate the original array. `sort_by!`\
    \ will sort by numeric order but will mutate the original array. `sort_by!` will\
    \ sort by numeric order but will mutate the original array. `sort_by!` will sort\
    \ by numeric order but will mutate the original array. `sort_by!` will sort by\
    \ numeric order but will mutate the original array. `sort_by!` will sort by numeric\
    \ order but will mutate the original array. `sort_by!` will sort by numeric order\
    \ but will mutate the original array. `sort_by!` will sort by numeric order but\
    \ will mutate the original array. `sort_by!` will sort by numeric order but will\
    \ mutate the original array. `sort_by!` will sort by numeric order but will mutate\
    \ the original array. `sort_by!` will sort by numeric order but will mutate the\
    \ original array. `sort_by!` will sort by numeric order but will mutate the original\
    \ array. `sort_by!` will sort by numeric order but will mutate the original array.\
    \ `sort_by!` will sort by numeric order but will mutate the original array. `sort_by!`\
    \ will sort by numeric order but will mutate the original array. `sort_by!` will\
    \ sort by numeric order but will mutate the original array. `sort_by!` will sort\
    \ by numeric order but will mutate the original array. `sort_by!` will sort by\
    \ numeric order but will mutate the original array. `sort_by!` will sort by numeric\
    \ order but will mutate the original array. `sort_by!` will sort by numeric order\
    \ but will mutate the original ", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.to_s\n  numbers.gsub!(/[^0-9]+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\\
    s+/, \"\")\n  numbers.gsub!(/\\s+/, \"\")\n  numbers.gsub!(/\\s+/", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers = numbers.split\n  numbers.sort!\n  numbers.join\nend\n</code>\n<|/ a\
    \ tags=ruby,ruby-on-rails |>\n<| a tags=ruby,ruby-on-rails |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers = numbers.to_s.split\n  numbers.sort!\n\
    \  numbers.join(' ')\nend", "  numbers.split(\" \").sort.join(\" \")\nend\n</code>\n\
    <|/ a tags=ruby,ruby-on-rails |>\n<| c |>\nI like your solution. However it only\
    \ works with a single digit. How would you extend it to work with a number with\
    \ multiple digits?\n<|/ c |>\n<| c |>\nI added a version that works with multiple\
    \ digits. I hope it helps.\n<|/ c |>\n<| a tags=ruby,ruby-on-rails |>\n<code>",
  "  numbers.split(\" \").sort_by { |n| n.to_i }.join(\" \")\nend", "  numbers = numbers.to_s.split\n\
    \  numbers.sort!\n  numbers.join(' ')\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails\
    \ |>\n<| c |>\nThis doesn't work. `sort_numbers(\"one two three\")` returns `\"\
    one two three\"`.\n<|/ c |>\n<| c |>\nI didn't notice that requirement. I've updated\
    \ my answer accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  numbers.split(\"\
    \ \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\" \")\nend",
  "  numbers.split(\" \").sort.join(\" \")\nend", "  numbers = numbers.split(\" \"\
    ).map { |n| n.to_i }\n  numbers.sort!\n  numbers.join(\" \")\nend\n</code>\n<|/\
    \ a tags=ruby,sorting,arrays |>\n<| a tags=ruby,sorting,arrays |>\n<code>", " \
    \ numbers.split(\" \").sort.join(\" \")\nend", "  numbers.split(\" \").sort.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=ruby,ruby-on-rails |>\n<| a dscore=0 |>\n<code>",
  "  numbers = numbers.split(\" \").sort\n  numbers.join(\" \")\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
