name: HumanEval_51_remove_vowels
language: rb
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\"\
  )\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"\
  aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_remove_vowels\n\
  \    candidate = method(:remove_vowels)\n    assert_equal(\"\", candidate.call(\"\
  \"))\n    assert_equal(\"bcdf\nghjklm\", candidate.call(\"abcdef\nghijklm\"))\n\
  \    assert_equal(\"fdcb\", candidate.call(\"fedcba\"))\n    assert_equal(\"\",\
  \ candidate.call(\"eeeee\"))\n    assert_equal(\"cB\", candidate.call(\"acBAA\"\
  ))\n    assert_equal(\"cB\", candidate.call(\"EcBOO\"))\n    assert_equal(\"ybcd\"\
  , candidate.call(\"ybcd\"))\n  end\nend\n"
completions: ["  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend",
  "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `remove_vowels.call(\"\
    aaBAA\")` returns `\"B\"`, not `\"BAA\"`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Thanks for pointing that out. I've updated my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend\n</code>\n<|/ a |>\n<| c |>\nI like your answer,\
    \ but I think it would be better to use a `gsub` instead of `split` since it seems\
    \ like the OP wants to remove all vowels, not just those that are next to each\
    \ other.\n<|/ c |>\n<| c |>\nThanks, I added a regex that removes vowels next\
    \ to each other as well.\n<|/ c |>\n<| c |>\nThanks for your answer. I was wondering\
    \ if there is a way to do this without having to use an if statement to check\
    \ if a vowel was next to another vowel. For example, how would I do this without\
    \ having to use an if statement to check if a vowel was next to another vowel?\n\
    <|/ c |>\n<| c |>\nI added a regex that does that as well.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer. I was wondering if there is a way to do this without having\
    \ to use an if statement to check if a vowel was next to another vowel. For example,\
    \ how would I do this without having to use an if statement to check if a vowel\
    \ was next to another vowel?\n<|/ c |>\n<| a tags=ruby,string |>\n<code>", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend\n</cell>\n<cell>", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end\n</cell>\n<cell>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend\n</cell>\n\
    <cell>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend",
  "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\n`gsub` returns a string, so `text`\
    \ is unchanged. You need to assign the result of `gsub` to something.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've fixed it.\n<|/ c |>\n<| c |>\n`gsub`\
    \ returns a string, so `text` is unchanged. You need to assign the result of `gsub`\
    \ to something.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed it.\n\
    <|/ c |>\n<| a |>\n<code>", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/,\
    \ '')\nend", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\n\
    end", "  text.gsub(/[aeiou]/, '')\nend", "  text.gsub(/[aeiou]/, '')\nend", " \
    \ text.gsub(/[aeiou]/, '')\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
