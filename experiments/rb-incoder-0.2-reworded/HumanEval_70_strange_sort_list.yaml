name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i >\
    \ 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do\
    \ |val, index|\n    lst[index] = val\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e < lst[i-1]\n  end\n  lst\nend", " \
    \ return lst.sort.reverse\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e <\
    \ lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x,\
    \ i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  return lst.sort do |a, b|\n\
    \    (a<b) ? -1 : (a > b) ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |val, i|\n    lst[i] = val\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `[5, 10, 15, 20].sort!` returns `[20,\
    \ 15, 10, 5]`\n<|/ c |>\n<| c |>\nIt doesn't work for me either. `[5, 10, 15,\
    \ 20].sort!` returns `[20, 15, 10, 5]`\n<|/ c |>\n<| c |>\nIt does work for me\
    \ in Ruby 2.4.  What version are you using?\n<|/ c |>\n<| c |>\nI'm using Ruby\
    \ 2.4.1p111\n<|/ c |>\n<| c |>\nI tested this in Ruby 2.4.1 on Windows and it\
    \ worked fine.  I suspect that your version of Ruby has some sort of bug in it.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |item, index|\n    lst[index] = item if index < lst.size\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  return lst.sort do |a, b|\n    (a<b) ? -1 : (a>b)\
    \ ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
