name: HumanEval_70_strange_sort_list
language: rb
prompt: "# Given array of integers, return array in strange order.\n# Strange sorting,\
  \ is when you start with the minimum value,\n# then maximum of the remaining integers,\
  \ then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n\
  # [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>>\
  \ strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_strange_sort_list\n\
  \    candidate = method(:strange_sort_list)\n    assert_equal([1, 4, 2, 3], candidate.call([1,\
  \ 2, 3, 4]))\n    assert_equal([5, 9, 6, 8, 7], candidate.call([5, 6, 7, 8, 9]))\n\
  \    assert_equal([1, 5, 2, 4, 3], candidate.call([1, 2, 3, 4, 5]))\n    assert_equal([1,\
  \ 9, 5, 8, 6, 7], candidate.call([5, 6, 7, 8, 9, 1]))\n    assert_equal([5, 5, 5,\
  \ 5], candidate.call([5, 5, 5, 5]))\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 8, 2, 7, 3, 6, 4, 5], candidate.call([1, 2, 3, 4, 5, 6, 7,\
  \ 8]))\n    assert_equal([-5, 5, -5, 5, 0, 2, 2, 2], candidate.call([0, 2, 2, 2,\
  \ 5, 5, -5, -5]))\n    assert_equal([111111], candidate.call([111111]))\n  end\n\
  end\n"
completions: ["  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i >\
    \ 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do\
    \ |val, index|\n    lst[index] = val\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e < lst[i-1]\n  end\n  lst\nend", " \
    \ return lst.sort.reverse\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e <\
    \ lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x,\
    \ i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  return lst.sort do |a, b|\n\
    \    (a<b) ? -1 : (a > b) ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |val, i|\n    lst[i] = val\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `[5, 10, 15, 20].sort!` returns `[20,\
    \ 15, 10, 5]`\n<|/ c |>\n<| c |>\nIt doesn't work for me either. `[5, 10, 15,\
    \ 20].sort!` returns `[20, 15, 10, 5]`\n<|/ c |>\n<| c |>\nIt does work for me\
    \ in Ruby 2.4.  What version are you using?\n<|/ c |>\n<| c |>\nI'm using Ruby\
    \ 2.4.1p111\n<|/ c |>\n<| c |>\nI tested this in Ruby 2.4.1 on Windows and it\
    \ worked fine.  I suspect that your version of Ruby has some sort of bug in it.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |item, index|\n    lst[index] = item if index < lst.size\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  return lst.sort do |a, b|\n    (a<b) ? -1 : (a>b)\
    \ ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |value, index|\n\
    \    lst[index] = value if index != lst.size - 1\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |value, index|\n    if index == 0\n      lst[index]\
    \ = value\n    else\n      lst[index] = value if value < lst[index-1]\n    end\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n   \
    \ lst[i] = e\n  end\n  lst\nend", "  return lst.sort do |a, b|\n    sort = -1\n\
    \    if a < b\n      sort = 1\n    end\n    if a > b\n      sort = -1\n    end\n\
    \    if sort != -1\n      sort\n    end\n  end\nend", "  return lst.sort.reverse\n\
    end", "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index] = item\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n   \
    \ lst[i] = e if i > 0 and e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |value, index|\n    lst[index] = value if index != lst.size - 1\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.reverse!\n  return lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index]\
    \ = item\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n\
    \    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x,\
    \ i|\n    lst[i] = x\n  end\n  lst\nend", "  return lst.sort do |a, b|\n    (a<b)\
    \ ? -1 : (a>b) ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |item, index|\n    lst[index] = item\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 && e > lst[i-1]\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    lst[i]\
    \ = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n   \
    \ lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i != lst.index(lst.min) - i\n  end\n  lst\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n\
    \    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |value,\
    \ index|\n    if index > 0\n      lst[index] = lst[index - 1]\n    end\n  end\n\
    \  lst\nend\n</code>\n<|/ a tags=ruby |>\n<| c |>\nThis doesn't work if the array\
    \ is empty or has only one element. `strange_sort_list.call([1,2])` returns `[2,1]`\
    \ instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |value, index|\n    if index == 0\n      lst[index] = value\n    elsif index\
    \ == lst.size - 1\n      lst[index] = value\n    else\n      temp = lst[index\
    \ + 1]\n      lst[index + 1] = lst[index]\n      lst[index] = temp\n    end\n\
    \  end\n  lst\nend", "  return lst.sort do |a, b|\n    (a<b) ? -1 : (a>b) ? 1\
    \ : 0\n  end\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |value, index|\n\
    \    lst[index] = value if index != lst.size - 1\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e < lst[i-1]\n \
    \ end\n  lst\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if there\
    \ are two equal numbers in the array. Try `strange_sort_list.call([1,1,1])`\n\
    <|/ c |>\n<| c |>\nYes, you are right. I missed that case. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "  lst.sort!\n  lst.each_with_index\
    \ do |val, index|\n    lst[index] = val\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  return lst\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    if i % 2 == 0\n      lst[i] =\
    \ e\n    end\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ return lst.sort.reverse\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays |>\n\
    <| c |>\nThis doesn't work if the array is empty. `strange_sort_list([])` returns\
    \ `[]` instead of `nil`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted\
    \ it. I added a check for empty arrays to the answer. Thanks!\n<|/ c |>\n<| a\
    \ dscore=5 |>\n<code>", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e if i > 0 and e != lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  return\
    \ lst.sort.reverse\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |value, index|\n    lst[index] = value if index != lst.size - 1\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |val, index|\n    lst[index]\
    \ = val\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |item, index|\n\
    \    lst[index] = item\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n \
    \ lst\nend\n</code>\n<|/ a tags=ruby,sorting |>\n<| a dscore=0 |>\n<code>", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and lst[i-1] > e\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |val, index|\n    if index == 0\n\
    \      lst[index] = val\n    elsif index == lst.size - 1\n      lst[index] = val\n\
    \    else\n      lst[index] = val\n    end\n  end\n  lst\nend\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=ruby,sorting |>\n<code>", "  lst.sort!\n  lst.reverse!\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |item, index|\n  \
    \  lst[index] = item if index != lst.size - 1\n  end\n  lst\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  lst.sort!\n  lst.reverse!\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |val, i|\n    lst[i] = val\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e if i > 0 and e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |item, index|\n    if index == 0\n      item\n    elsif index == lst.size\
    \ - 1\n      item\n    else\n      item\n    end\n  end\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if\
    \ i > 0 and e > lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n \
    \ lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if\
    \ i > 0 && e < lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |value, index|\n    lst[index] = value if index != lst.size - 1\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index]\
    \ = item\n  end\n  lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>",
  "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index] = item\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  return lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  return lst\nend",
  "  lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index] = value if\
    \ index != lst.size - 1\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |val, index|\n    lst[index] = val if index != lst.size - 1\n  end\n  lst\n\
    end", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i != lst.index(lst.min) - 1 \n  end\n  lst\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=ruby,sorting,arrays |>\n<code>", "  lst.sort!\n\
    \  lst.each_with_index do |item, index|\n    lst[index] = item\n  end\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n \
    \ lst\nend", "  return lst.sort.reverse\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    if i == 0\n      lst[i] = e\n    elsif i == lst.size - 1\n  \
    \    lst[i] = e\n      lst[lst.size - 1] = e\n    else\n      lst[i] = e\n   \
    \   lst[lst.size - 1] = e\n    end\n  end\n  lst\nend", "  return lst.sort.reverse\n\
    end", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n \
    \ lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index]\
    \ = value if index != lst.size - 1\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| a |>\n<code>", "  lst.sort!\n  lst.each_with_index do |e, i|\n    if\
    \ i == 0\n      lst[i] = e\n    elsif i == lst.size - 1\n      lst[i] = e\n  \
    \  else\n      lst[i] = e\n    end\n  end\nend", "  lst.sort!\n  lst.reverse!\n\
    \  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |item, index|\n    lst[index] = item\n  end\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |value, index|\n\
    \    if index == 0 || value < lst[index - 1]\n      lst[index], lst[index - 1]\
    \ = lst[index - 1], lst[index]\n    end\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. `strange_sort_list.call([])`\
    \ returns `[]`.\n<|/ c |>\n<| c |>\nIt does work, try it out. `strange_sort_list.call([])`\
    \ returns `[]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting my\
    \ comment. My apologies.\n<|/ c |>\n<| c |>\nNo worries, I appreciate you taking\
    \ the time to test it out and post your answer.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if\
    \ i > 0 && e < lst[i-1]\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting |>\n\
    <| c |>\nThis is not the correct answer. `strange_sort_list([5, 5, 5, 5])` returns\
    \ `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\n, thanks for pointing\
    \ that out. I've fixed the code accordingly.\n<|/ c |>\n<| c |>\n, I've added\
    \ a more efficient solution that doesn't require sorting.\n<|/ c |>\n<| c |>\n\
    , I've added a more efficient solution that doesn't require sorting.\n<|/ c |>\n\
    <| c |>\n, I've added a more efficient solution that doesn't require sorting.\n\
    <|/ c |>\n<| a |>\n<code>", "  lst.sort!\n  lst.each_with_index do |x, i|\n  \
    \  lst[i] = lst[i].to_s\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index] = value if\
    \ index != lst.size - 1\n  end\n  lst\nend", "  return lst.sort do |a, b|\n  \
    \  (a<b) ? -1 : (a>b) ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index] = item\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i]\
    \ = e if i > 0 && e > lst[i-1]\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e\n  end\n  lst\nend", "  return lst.sort.reverse\n\
    end", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    if i == 0\n      lst[i] = e\n    elsif i == lst.size - 1\n  \
    \    lst[i] = e\n    else\n      lst[i] = e\n    end\n  end\n  lst\nend", "  return\
    \ lst.sort.reverse\nend", "  lst.sort!\n  lst.each_with_index do |x, i|\n    lst[i]\
    \ = lst[i].to_s\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e,\
    \ i|\n    lst[i] = e\n  end\n  lst\nend\n</code>\n<|/ a |>\n<| c |>\nThe OP wants\
    \ to sort by descending order, so `lst.sort!.reverse` would be more appropriate.\n\
    <|/ c |>\n<| c |>\nThanks, I missed that. I've updated the answer.\n<|/ c |>\n\
    <| c |>\n`lst.sort!.reverse` will reverse the order of the array and leave the\
    \ original order intact. `lst.sort!.reverse { |a, b| b <=> a }` will reverse the\
    \ order of the array and leave the original order intact, but will also reverse\
    \ the order of the elements in the array (which is not what the OP wanted).\n\
    <|/ c |>\n<| c |>\nThanks, I missed that. I've updated the answer.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  lst.sort!\n  lst.each_with_index do |e, i|\n   \
    \ lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |e, i|\n\
    \    lst[i] = e\n  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend",
  "  return lst.sort.reverse\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e < lst[i-1]\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst.reverse!\n  return lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend",
  "  lst.sort!\n  lst.each_with_index do |x, i|\n    lst[i] = x\n  end\n  lst\nend",
  "  return lst.sort.reverse\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index] = value if\
    \ index != lst.size - 1\n  end\n  lst\nend\n</code>\n<|/ a tags=ruby,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array is empty or has only a single element.\
    \ `strange_sort_list.call([5]) #=> [5]`\n<|/ c |>\n<| c |>\nI added a fix for\
    \ that.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty or has only\
    \ a single element. `strange_sort_list.call([5]) #=> [5]`\n<|/ c |>\n<| c |>\n\
    I added a fix for that.\n<|/ c |>\n<| a tags=ruby,sorting,arrays |>\n<code>",
  "  lst.sort!\n  lst.each_with_index do |x, i|\n    lst[i] = x\n  end\n  lst\nend",
  "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index do\
    \ |e, i|\n    lst[i] = e if i != lst.index(lst.min) + i\n  end\n  lst\nend\n</code>\n\
    <|/ a tags=ruby,sorting,arrays |>\n<| a dscore=0 |>\n<code>", "  lst.sort!\n \
    \ lst\nend", "  lst.sort!\n  lst.each_with_index do |item, index|\n    lst[index]\
    \ = item\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index do |val, index|\n\
    \    if index == 0\n      lst[index] = val\n    elsif index == lst.size - 1\n\
    \      lst[index] = val\n    else\n      lst[index] = val\n    end\n  end\n  lst\n\
    end", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  return lst.sort do |a, b|\n\
    \    (a<b) ? -1 : (a>b) ? 1 : 0\n  end\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |value, index|\n    lst[index] = value if index != lst.size - 1\n  end\n\
    \  lst\nend", "  lst.sort!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend",
  "  lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n\
    \  end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  return lst\nend", "  lst.sort!\n\
    \  lst.each_with_index do |e, i|\n    lst[i] = e if i > 0 and e < lst[i-1]\n \
    \ end\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n\
    \  lst\nend", "  return lst.sort.reverse\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |x, i|\n    lst[i] = x\n  end\n  lst\nend", "  lst.sort!\n  lst.each_with_index\
    \ do |e, i|\n    lst[i] = e if i > 0 and e > lst[i-1]\n  end\n  lst\nend", " \
    \ lst.sort!\n  lst.each_with_index do |e, i|\n    lst[i] = e\n  end\n  lst\nend",
  "  return lst.sort.reverse\nend", "  lst.sort!\n  lst.reverse!\n  lst\nend", " \
    \ lst.sort!\n  lst.reverse!\n  lst\nend", "  lst.sort!\n  lst.reverse!\n  lst\n\
    end", "  lst.sort!\n  lst.each_with_index do |value, index|\n    lst[index] =\
    \ value if index != lst.size - 1\n  end\n  lst\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work for me. `strange_sort_list.call([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]`\n<|/ c |>\n<| c |>\nIt works for me on ruby 2.4.1. What version are\
    \ you using?\n<|/ c |>\n<| c |>\nI'm using ruby 2.4.1p111\n<|/ c |>\n<| c |>\n\
    I tested it on 2.4.1 as well. Works fine. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied it exactly. I'm running ruby 2.4.1 as well. I'm running\
    \ it on Windows 10. Could that be the problem?\n<|/ c |>\n<| a tags=ruby,sorting,arrays\
    \ |>\n<code>", "  lst.sort!\n  lst.each_with_index do |e, i|\n    if i == 0\n\
    \      lst[i] = e\n    elsif i == lst.size - 1\n      lst[i] = e\n    else\n \
    \     lst[i] = e\n    end\n  end\n  lst\nend", "  return lst.sort.reverse\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
