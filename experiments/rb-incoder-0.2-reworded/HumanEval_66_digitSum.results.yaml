language: rb
name: HumanEval_66_digitSum
results:
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptu7q14r6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmptu7q14r6.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<66>\n===============================================================================\n\
    \nFinished in 0.007771357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.68 tests/s, 257.36 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw_xo22zv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpw_xo22zv.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007622107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.20 tests/s, 262.39 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  return sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsaot5iuw\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpsaot5iuw.rb:20:in `>='\n/tmp/tmpsaot5iuw.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpsaot5iuw.rb:19:in `each_byte'\n/tmp/tmpsaot5iuw.rb:19:in\
    \ `digitSum'\n/tmp/tmpsaot5iuw.rb:29:in `call'\n/tmp/tmpsaot5iuw.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001202098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    831.88 tests/s, 831.88 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 48\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpixlx3s68\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpixlx3s68.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007738186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.23 tests/s, 258.46 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.chars.inject(0)\
    \ { |sum, char| sum + char.ord }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_digitSum\n    candidate = method(:digitSum)\n\
    \    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131, candidate.call(\"\
    abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n    assert_equal(69,\
    \ candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"woArBld\"\
    ))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpv526eeom\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpv526eeom.rb:25:in `test_digitSum'\n\
    \     22:   def test_digitSum\n     23:     candidate = method(:digitSum)\n  \
    \   24:     assert_equal(0, candidate.call(\"\"))\n  => 25:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     26:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     27:     assert_equal(69, candidate.call(\"helloE\"))\n     28:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<326>\n\ndiff:\n? 131\
    \ \n?   26\n? - ?\n===============================================================================\n\
    \nFinished in 0.007510344 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.15 tests/s, 266.30 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvqpylghm\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpvqpylghm.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<66>\n===============================================================================\n\
    \nFinished in 0.00726815 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    137.59 tests/s, 275.17 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96 if c.ord >= 65 && c.ord <= 90\n \
    \ end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp2y5qascg\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmp2y5qascg.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-61>\n\ndiff:\n? -6131\n\
    ===============================================================================\n\
    \nFinished in 0.010385508 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    96.29 tests/s, 192.58 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.ord - 96 if char >= 'a' && char <= 'z'\n\
    \  end\n  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvin2jkv3\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvin2jkv3.rb:20:in `>='\n/tmp/tmpvin2jkv3.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvin2jkv3.rb:19:in `each_byte'\n/tmp/tmpvin2jkv3.rb:19:in\
    \ `digitSum'\n/tmp/tmpvin2jkv3.rb:29:in `call'\n/tmp/tmpvin2jkv3.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001180822 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    846.87 tests/s, 846.87 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw_xo22zv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpw_xo22zv.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007622107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.20 tests/s, 262.39 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 'A'.ord\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu32s4et1\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpu32s4et1.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<66>\n===============================================================================\n\
    \nFinished in 0.007812137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.01 tests/s, 256.01 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 64\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpzn51va0v\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpzn51va0v.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<70>\n===============================================================================\n\
    \nFinished in 0.013430096 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    74.46 tests/s, 148.92 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 48\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpixlx3s68\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpixlx3s68.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007738186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.23 tests/s, 258.46 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96 if c >= 'A' && c <= 'Z'\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpaaiq7dlm\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpaaiq7dlm.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-61>\n\ndiff:\n? -6131\n\
    ===============================================================================\n\
    \nFinished in 0.007568628 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    132.12 tests/s, 264.25 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - '0'\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmph6o9w4rq\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmph6o9w4rq.rb:20:in `-'\n/tmp/tmph6o9w4rq.rb:20:in `block in digitSum'\n\
    /tmp/tmph6o9w4rq.rb:19:in `each_char'\n/tmp/tmph6o9w4rq.rb:19:in `digitSum'\n\
    /tmp/tmph6o9w4rq.rb:29:in `call'\n/tmp/tmph6o9w4rq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001241982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    805.16 tests/s, 805.16 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96 if c >= 'a' && c <= 'z'\n  end\n\
    \  sum\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_digitSum\n    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\
    \"))\n    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpo_r5ril6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpo_r5ril6.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<3>\n\ndiff:\n? 131\n\
    ===============================================================================\n\
    \nFinished in 0.007615981 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.30 tests/s, 262.61 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 'A'.ord\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmptu7q14r6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmptu7q14r6.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<66>\n===============================================================================\n\
    \nFinished in 0.007771357 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.68 tests/s, 257.36 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c.between?(48, 57) }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpilzekd0h\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpilzekd0h.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<0>\n===============================================================================\n\
    \nFinished in 0.007439186 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    134.42 tests/s, 268.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy0edmyi4\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmpy0edmyi4.rb:20:in\
    \ `block in digitSum'\n/tmp/tmpy0edmyi4.rb:19:in `each_byte'\n/tmp/tmpy0edmyi4.rb:19:in\
    \ `digitSum'\n/tmp/tmpy0edmyi4.rb:29:in `call'\n/tmp/tmpy0edmyi4.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004612923 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 216.78 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  return sum\n\
    end\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpsaot5iuw\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpsaot5iuw.rb:20:in `>='\n/tmp/tmpsaot5iuw.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpsaot5iuw.rb:19:in `each_byte'\n/tmp/tmpsaot5iuw.rb:19:in\
    \ `digitSum'\n/tmp/tmpsaot5iuw.rb:29:in `call'\n/tmp/tmpsaot5iuw.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001202098 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    831.88 tests/s, 831.88 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 96\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpue9kl5e6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpue9kl5e6.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.005615209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.09 tests/s, 356.18 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 96\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpue9kl5e6\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpue9kl5e6.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.005615209 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    178.09 tests/s, 356.18 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpthtj1a18\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpthtj1a18.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.005533838 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    180.71 tests/s, 361.41 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy0edmyi4\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmpy0edmyi4.rb:20:in\
    \ `block in digitSum'\n/tmp/tmpy0edmyi4.rb:19:in `each_byte'\n/tmp/tmpy0edmyi4.rb:19:in\
    \ `digitSum'\n/tmp/tmpy0edmyi4.rb:29:in `call'\n/tmp/tmpy0edmyi4.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004612923 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 216.78 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw_xo22zv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpw_xo22zv.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007622107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.20 tests/s, 262.39 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.chars.each do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpyhjlk68z\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpyhjlk68z.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007470406 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    133.86 tests/s, 267.72 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpl9lgrjeq\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpl9lgrjeq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007713721 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.64 tests/s, 259.28 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |c|\n    sum += c if c >= '0' && c <= '9'\n  end\n  sum\nend\n\
    require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpvcy_p9bh\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpvcy_p9bh.rb:20:in `>='\n/tmp/tmpvcy_p9bh.rb:20:in `block\
    \ in digitSum'\n/tmp/tmpvcy_p9bh.rb:19:in `each_byte'\n/tmp/tmpvcy_p9bh.rb:19:in\
    \ `digitSum'\n/tmp/tmpvcy_p9bh.rb:29:in `call'\n/tmp/tmpvcy_p9bh.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119348 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    837.89 tests/s, 837.89 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp50z44h3_\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmp50z44h3_.rb:20:in\
    \ `block in digitSum'\n/tmp/tmp50z44h3_.rb:19:in `each_byte'\n/tmp/tmp50z44h3_.rb:19:in\
    \ `digitSum'\n/tmp/tmp50z44h3_.rb:29:in `call'\n/tmp/tmp50z44h3_.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004834367 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    206.85 tests/s, 206.85 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - '0'\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp4_l6pk0w\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmp4_l6pk0w.rb:20:in `-'\n/tmp/tmp4_l6pk0w.rb:20:in `block in digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:19:in `each_char'\n/tmp/tmp4_l6pk0w.rb:19:in `digitSum'\n\
    /tmp/tmp4_l6pk0w.rb:29:in `call'\n/tmp/tmp4_l6pk0w.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.00119918 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    833.90 tests/s, 833.90 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy0edmyi4\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmpy0edmyi4.rb:20:in\
    \ `block in digitSum'\n/tmp/tmpy0edmyi4.rb:19:in `each_byte'\n/tmp/tmpy0edmyi4.rb:19:in\
    \ `digitSum'\n/tmp/tmpy0edmyi4.rb:29:in `call'\n/tmp/tmpy0edmyi4.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004612923 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 216.78 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpbk2ady0k\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpbk2ady0k.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007310942 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    136.78 tests/s, 273.56 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte do |char|\n    sum += char.upcase\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy0edmyi4\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval):\n  NoMethodError: undefined method `upcase'\
    \ for 97:Integer\n  \n      sum += char.upcase\n                 ^^^^^^^\n/tmp/tmpy0edmyi4.rb:20:in\
    \ `block in digitSum'\n/tmp/tmpy0edmyi4.rb:19:in `each_byte'\n/tmp/tmpy0edmyi4.rb:19:in\
    \ `digitSum'\n/tmp/tmpy0edmyi4.rb:29:in `call'\n/tmp/tmpy0edmyi4.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.004612923 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    216.78 tests/s, 216.78 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 96\n  end\n  return sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpw_xo22zv\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpw_xo22zv.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<-58>\n===============================================================================\n\
    \nFinished in 0.007622107 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    131.20 tests/s, 262.39 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - 'A'.ord\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu32s4et1\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpu32s4et1.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<66>\n===============================================================================\n\
    \nFinished in 0.007812137 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    128.01 tests/s, 256.01 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |char|\n    sum += char.ord - '0'\n  end\n  sum\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n\
    \    candidate = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n\
    \    assert_equal(131, candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"\
    abcCd\"))\n    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"\
    ))\n    assert_equal(151, candidate.call(\" How are yOu?\"))\n    assert_equal(327,\
    \ candidate.call(\"You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmph6o9w4rq\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): TypeError: String can't be coerced into Integer\n\
    /tmp/tmph6o9w4rq.rb:20:in `-'\n/tmp/tmph6o9w4rq.rb:20:in `block in digitSum'\n\
    /tmp/tmph6o9w4rq.rb:19:in `each_char'\n/tmp/tmph6o9w4rq.rb:19:in `digitSum'\n\
    /tmp/tmph6o9w4rq.rb:29:in `call'\n/tmp/tmph6o9w4rq.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001241982 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    805.16 tests/s, 805.16 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_char do |c|\n    sum += c.ord - 48\n  end\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpy52cw8ed\nStarted\nF\n===============================================================================\n\
    Failure: test_digitSum(TestHumanEval)\n/tmp/tmpy52cw8ed.rb:29:in `test_digitSum'\n\
    \     26:   def test_digitSum\n     27:     candidate = method(:digitSum)\n  \
    \   28:     assert_equal(0, candidate.call(\"\"))\n  => 29:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     30:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     31:     assert_equal(69, candidate.call(\"helloE\"))\n     32:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n<131> expected but was\n<134>\n\ndiff:\n? 131\n\
    ?   4\n?   ?\n===============================================================================\n\
    \nFinished in 0.007720457 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    129.53 tests/s, 259.05 assertions/s\n"
  timestamp: 1659795008
- exit_code: 1
  program: "# Task\n# Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\
    \")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\"\
    )\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\"\
    )\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  sum = 0\n\
    \  s.each_byte { |c| sum += c if c >= '0' && c <= '9' }\n  sum\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_digitSum\n    candidate\
    \ = method(:digitSum)\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(131,\
    \ candidate.call(\"abAB\"))\n    assert_equal(67, candidate.call(\"abcCd\"))\n\
    \    assert_equal(69, candidate.call(\"helloE\"))\n    assert_equal(131, candidate.call(\"\
    woArBld\"))\n    assert_equal(153, candidate.call(\"aAaaaXa\"))\n    assert_equal(151,\
    \ candidate.call(\" How are yOu?\"))\n    assert_equal(327, candidate.call(\"\
    You arE Very Smart\"))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpn8j7bf0l\nStarted\nE\n===============================================================================\n\
    Error: test_digitSum(TestHumanEval): ArgumentError: comparison of Integer with\
    \ String failed\n/tmp/tmpn8j7bf0l.rb:19:in `>='\n/tmp/tmpn8j7bf0l.rb:19:in `block\
    \ in digitSum'\n/tmp/tmpn8j7bf0l.rb:19:in `each_byte'\n/tmp/tmpn8j7bf0l.rb:19:in\
    \ `digitSum'\n/tmp/tmpn8j7bf0l.rb:27:in `call'\n/tmp/tmpn8j7bf0l.rb:27:in `test_digitSum'\n\
    \     24:   def test_digitSum\n     25:     candidate = method(:digitSum)\n  \
    \   26:     assert_equal(0, candidate.call(\"\"))\n  => 27:     assert_equal(131,\
    \ candidate.call(\"abAB\"))\n     28:     assert_equal(67, candidate.call(\"abcCd\"\
    ))\n     29:     assert_equal(69, candidate.call(\"helloE\"))\n     30:     assert_equal(131,\
    \ candidate.call(\"woArBld\"))\n===============================================================================\n\
    \nFinished in 0.001187377 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 0 failures, 1 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    842.19 tests/s, 842.19 assertions/s\n"
  timestamp: 1659795008
