name: HumanEval_111_histogram
language: rb
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a hash\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" =>\
  \ 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"\
  a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n\
  # {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_histogram\n\
  \    candidate = method(:histogram)\n    assert_equal({\"a\" => 2, \"b\" => 2},\
  \ candidate.call(\"a b b a\"))\n    assert_equal({\"a\" => 2, \"b\" => 2}, candidate.call(\"\
  a b c a b\"))\n    assert_equal({\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1,\
  \ \"g\" => 1}, candidate.call(\"a b c d g\"))\n    assert_equal({\"r\" => 1, \"\
  t\" => 1, \"g\" => 1}, candidate.call(\"r t g\"))\n    assert_equal({\"b\" => 4},\
  \ candidate.call(\"b b b b a\"))\n    assert_equal({\"r\" => 1, \"t\" => 1, \"g\"\
  \ => 1}, candidate.call(\"r t g\"))\n    assert_equal({}, candidate.call(\"\"))\n\
  \    assert_equal({\"a\" => 1}, candidate.call(\"a\"))\n  end\nend\n"
completions: ["  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  test.split(\" \").inject(Hash.new(0)) do |histogram, letter|\n    histogram[letter]\
    \ += 1\n    histogram\n  end\nend", "  result = {}\n  test.split(\" \").each do\
    \ |letter|\n    result[letter] = result[:default] || 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter] >= hash[letter].to_i\n  end\n  hash\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[letter].to_i + 1 if result[letter]\n\
    \  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter]\
    \ ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  hash = {}\n  test.split.each do |letter|\n    hash[letter] ||= 0\n  \
    \  hash[letter] += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \"\
    ).each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n \
    \   result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split.each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ letters = test.split(\" \")\n  letters.each do |letter|\n    letters[letter]\
    \ = letters[letter].to_i\n  end\n  letters.max_by { |k, v| v }\nend", "  result\
    \ = {}\n  test.split.each do |letter|\n    result[letter] = result[:default] ||\
    \ 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0))\
    \ do |histogram, letter|\n    histogram[letter] += 1\n    histogram\n  end\nend",
  "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split.each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split.each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1 \n  end\n  result\nend", "  result = Hash.new(0)\n\
    \  test.split(\" \").each do |letter|\n    result[letter] += 1\n  end\n  result\n\
    end", "  hash = {}\n  test.split.each do |letter|\n    hash[letter] ||= 0\n  \
    \  hash[letter] += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \"\
    ).each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n \
    \   result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  hash\
    \ = {}\n  test.split.each do |letter|\n    hash[letter] ||= 0\n    hash[letter]\
    \ += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  hash = {}\n  test.split(' ').each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1 if result[letter]\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split.each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ >= hash[letter].to_i\n  end\n  hash\nend", "  hash = {}\n  test.split(\" \"\
    ).each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].to_i > hash[letter]\n\
    \  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n \
    \   letter = letter.downcase\n    if result[letter]\n      result[letter] += 1\n\
    \    else\n      result[letter] = 1\n    end\n  end\n  result\nend", "  result\
    \ = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter] += 1\n\
    \  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n \
    \   result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ != letter\n  end\n  hash\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  result\
    \ = Hash.new(0)\n  test.split(' ').each do |letter|\n    result[letter] += 1\n\
    \  end\n  result\nend", "  hash = {}\n  test.split.each do |letter|\n    hash[letter]\
    \ ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split.each do |letter|\n    hash[letter] ||= 0\n    hash[letter]\
    \ += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter]\
    \ ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  letters = test.split\n\
    \  histo = {}\n  letters.each do |letter|\n    histo[letter] = histo[letter] ?\
    \ histo[letter] + 1 : 1\n  end\n  histo\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = Hash.new(0)\n  test.split(' ').each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  letters\
    \ = test.split(\" \")\n  letters.each do |letter|\n    letters[letter] = letters[letter].to_i\n\
    \  end\n  letters.max_by { |k, v| v }.map { |k, v| k }\nend", "  result = {}\n\
    \  test.split(\" \").each do |letter|\n    result[letter] = result[:default] ||\
    \ 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1 if test[letter]\n  end\n  result\n\
    end", "  letters = test.split(\" \").map { |l| l.downcase }\n  letters.group_by\
    \ { |l| l }.max_by { |k, v| v.size }.map { |k, v| [k, v.size] }\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(' ').inject(Hash.new(0)) { |h, x|\
    \ h[x] += 1; h }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].to_i\
    \ + 1 if result[letter]\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter]\
    \ ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1; h }\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  hash =\
    \ {}\n  test.split(\" \").each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ >= 1\n  end\n  hash\nend", "  result = Hash.new(0)\n  test.split(\" \").each\
    \ do |letter|\n    result[letter] += 1 if result.has_key?(letter)\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] >= hash[letter].to_i\n\
    \  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = Hash.new(0)\n  test.split.each do |letter|\n\
    \    result[letter] += 1 if result[:letter] == 0\n    result[:letter] += 1\n \
    \ end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ test.split(' ').inject(Hash.new(0)) { |h, x| h[x] += 1; h }\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0))\
    \ { |h, x| h[x] += 1 }\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\n\
    \  end\n  hash\nend", "  letters = test.split\n  hash = {}\n  letters.each do\
    \ |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n  \
    \  hash[letter] = hash[letter].to_i + 1 if hash[letter].to_i >= hash[letter].to_i\n\
    \  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n \
    \   result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  test.split.each_with_object({}) do |letter, counts|\n    counts[letter]\
    \ = counts[letter].to_i + 1 if counts[letter].nil?\n  end\nend", "  result = {}\n\
    \  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  test.split(\" \").inject(Hash.new(0)) { |h,\
    \ x| h[x] += 1; h }\nend", "  result = Hash.new(0)\n  test.split(\" \").each do\
    \ |letter|\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split('\
    \ ').each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter]\
    \ ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\n\
    end", "  result = {}\n  test.split(' ').each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  test.split(\" \").inject(Hash.new(0)) { |h, x| h[x] += 1 }\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each do |letter|\n \
    \   hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1 if test[letter]\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[letter].nil?\
    \ ? 1 : result[letter] + 1\n  end\n  result\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] = hash[letter].to_i if hash[letter].nil?\n   \
    \ hash[letter] += 1\n  end\n  hash\nend", "  result = Hash.new(0)\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] = result[:default] || 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    letter = letter.downcase\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each\
    \ do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  hash =\
    \ {}\n  test.split.each do |letter|\n    hash[letter] = hash[letter].to_i + 1\
    \ if hash[letter]\n  end\n  hash\nend", "  result = {}\n  test.split(\" \").each\
    \ do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = Hash.new(0)\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[:letter] || 0\n    result[letter] += 1\n  end\n \
    \ result\nend", "  hash = {}\n  test.split(' ').each do |letter|\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter] >= hash[letter].to_i\n  end\n  hash\nend", "  result = {}\n\
    \  test.split.each do |letter|\n    result[letter] = result[letter].to_i + 1 if\
    \ result[letter].nil?\n    result[letter] = result[letter].to_i + 1 if result[letter].nil?\n\
    \  end\n  result\nend", "  result = Hash.new(0)\n  test.split.each do |letter|\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter] ||= 0\n  \
    \  hash[letter] += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \"\
    ).each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |word|\n\
    \    hash[word] = hash[word].to_i + 1 if hash[word].nil?\n    hash[word] = hash[word].to_i\
    \ + 1 if hash[word].to_i >= hash[word].to_i\n  end\n  hash\nend", "  result =\
    \ {}\n  test.split(\" \").each do |letter|\n    result[letter] = result[:default]\
    \ || 0\n    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    letter = letter.downcase\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash\
    \ = {}\n  test.split(\" \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter]\
    \ += 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    letter = letter.downcase\n    result[letter] ||= 0\n    result[letter] +=\
    \ 1\n  end\n  result\nend", "  hash = {}\n  test.split(' ').each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter]\n  end\n  hash\nend",
  "  result = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n \
    \   result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n\
    \  hash\nend", "  result = {}\n  test.split(' ').each do |letter|\n    letter\
    \ = letter.downcase\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split.each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ >= hash[letter].to_i\n  end\n  hash\nend", "  hash = {}\n  test.split(\" \"\
    ).each do |letter|\n    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[letter].to_i + 1 if result[letter]\n  end\n  result\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split.each do |letter|\n \
    \   hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  hash =\
    \ {}\n  test.split(\" \").each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ if hash[letter].nil?\n    hash[letter] += 1\n  end\n  hash\nend", "  test.split('\
    \ ').inject(Hash.new(0)) { |h, x| h[x] += 1 }\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] >= hash[letter].to_i\n\
    \  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n \
    \   result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  hash\
    \ = {}\n  test.split(' ').each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ if hash[letter].nil?\n    hash[letter] += 1\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\nend", "  result\
    \ = {}\n  test.split(' ').each do |letter|\n    result[letter] ||= 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ != nil\n  end\n  hash\nend", "  result = {}\n  test.split(' ').each do |letter|\n\
    \    result[letter] = result[letter].to_i + 1 if result[letter]\n  end\n  result\n\
    end", "  result = {}\n  test.split.each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.scan(/[a-z]+/).inject(Hash.new(0))\
    \ {|h,x| h[x] += 1;h}\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split.each do |letter|\n    hash[letter] ||= 0\n    hash[letter]\
    \ += 1\n  end\n  hash\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] ||= 0\n    hash[letter] += 1\n  end\n  hash\nend", "  test.split(\"\
    \ \").inject(Hash.new(0)) { |h, x| h[x] += 1; h }\nend", "  result = {}\n  test.split('\
    \ ').each do |letter|\n    result[letter] ||= 0\n    result[letter] += 1\n  end\n\
    \  result\nend", "  result = {}\n  test.split.each do |letter|\n    result[letter]\
    \ = result[letter].to_i + 1\n  end\n  result\nend", "  hash = {}\n  test.split('\
    \ ').each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] >= hash[letter].to_i\n\
    \  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n \
    \   result[letter] = result[:default] || 0\n    result[letter] += 1 \n  end\n\
    \  result\nend", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ = result[:default] || 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\"\
    \ \").each do |letter|\n    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter] != nil\n  end\n  hash\n\
    end", "  result = {}\n  test.split(\" \").each do |letter|\n    result[letter]\
    \ ||= 0\n    result[letter] += 1\n  end\n  result\nend", "  test.scan(/[a-z]/).inject(Hash.new(0))\
    \ { |h,c| h[c] += 1; h }\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ hash = {}\n  test.split(\" \").each do |letter|\n    hash[letter] = hash[letter].to_i\
    \ + 1 if hash[letter].nil?\n    hash[letter] = hash[letter].to_i + 1 if hash[letter]\
    \ >= 1\n  end\n  hash\nend", "  result = {}\n  test.split(\" \").each do |letter|\n\
    \    result[letter] ||= 0\n    result[letter] += 1\n  end\n  result\nend", " \
    \ result = {}\n  test.split(\" \").each do |letter|\n    result[letter] ||= 0\n\
    \    result[letter] += 1\n  end\n  result\nend", "  result = {}\n  test.split(\"\
    \ \").each do |letter|\n    result[letter] = result[:default] || 0\n    result[letter]\
    \ += 1\n  end\n  result\nend", "  hash = {}\n  test.split(\" \").each do |letter|\n\
    \    hash[letter] = hash[letter].to_i + 1 if hash[letter].nil?\n    hash[letter]\
    \ = hash[letter].to_i + 1 if hash[letter] >= hash[letter].to_i\n  end\n  hash\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
