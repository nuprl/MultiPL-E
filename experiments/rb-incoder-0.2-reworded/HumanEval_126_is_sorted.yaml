name: HumanEval_126_is_sorted
language: rb
prompt: "# Given an array of numbers, return whether or not they are sorted\n# in\
  \ ascending order. If array has more than 1 duplicate of the same\n# number, return\
  \ false. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted.call([5])\n\
  # true\n# >>> is_sorted.call([1, 2, 3, 4, 5])\n# true\n# >>> is_sorted.call([1,\
  \ 3, 2, 4, 5])\n# false\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6])\n# true\n# >>>\
  \ is_sorted.call([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> is_sorted.call([1, 3, 2,\
  \ 4, 5, 6, 7])\n# false\n# >>> is_sorted.call([1, 2, 2, 3, 3, 4])\n# true\n# >>>\
  \ is_sorted.call([1, 2, 2, 2, 3, 4])\n# false\ndef is_sorted(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_is_sorted\n\
  \    candidate = method(:is_sorted)\n    assert_equal(true, candidate.call([5]))\n\
  \    assert_equal(true, candidate.call([1, 2, 3, 4, 5]))\n    assert_equal(false,\
  \ candidate.call([1, 3, 2, 4, 5]))\n    assert_equal(true, candidate.call([1, 2,\
  \ 3, 4, 5, 6]))\n    assert_equal(true, candidate.call([1, 2, 3, 4, 5, 6, 7]))\n\
  \    assert_equal(false, candidate.call([1, 3, 2, 4, 5, 6, 7]))\n    assert_equal(true,\
  \ candidate.call([]))\n    assert_equal(true, candidate.call([1]))\n    assert_equal(false,\
  \ candidate.call([3, 2, 1]))\n    assert_equal(false, candidate.call([1, 2, 2, 2,\
  \ 3, 4]))\n    assert_equal(false, candidate.call([1, 2, 3, 3, 3, 4]))\n    assert_equal(true,\
  \ candidate.call([1, 2, 2, 3, 3, 4]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4]))\n  end\nend\n"
completions: ["  lst.sort.length == 1\nend", "  return lst.uniq.size == lst.size\n\
    end", "  lst.sort.empty? or lst.sort == lst\nend", "  lst.sort\n  lst.size ==\
    \ lst.uniq.size\nend", "  lst.sort\n  lst.size == lst.uniq.size\nend", "  lst.sort\n\
    \  lst.size == lst.uniq.size\nend", "  lst.sort\n  lst.size == lst.uniq.size &&\
    \ lst.all? { |x| x == lst.uniq.first }\nend", "  lst.sort\n  lst.size == lst.uniq.size\n\
    end", "  lst.sort\n  lst.size == lst.uniq.size\nend", "  lst.sort\n  lst.size\
    \ == lst.uniq.size\nend", "  lst.sort!\n  return lst.uniq.size == lst.size\nend",
  "  lst.sort\n  lst.size == lst.uniq.size\nend", "  lst.sort.length == 1\nend", " \
    \ lst.sort\n  lst.size == lst.uniq.size && lst.all? { |x| x == lst.uniq.first\
    \ }\nend", "  lst.each_with_index do |x, i|\n    return false if i == 0 || x ==\
    \ lst[i-1]\n  end\n  return true\nend", "  lst.sort\n  lst.size == lst.uniq.size\n\
    end", "  lst.sort\n  lst.size == lst.uniq.size\nend", "  lst.sort\n  lst.size\
    \ == lst.uniq.size\nend", "  lst.sort\n  lst.size == lst.uniq.size && lst.all?\
    \ { |x| x == lst.uniq.first }\nend", "  lst.sort\n  lst.size == lst.uniq.size\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
