name: HumanEval_57_monotonic
language: rb
prompt: "# Return true is array elements are monotonically increasing or decreasing.\n\
  # >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n\
  # false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_monotonic\n\
  \    candidate = method(:monotonic)\n    assert_equal(true, candidate.call([1, 2,\
  \ 4, 10]))\n    assert_equal(true, candidate.call([1, 2, 4, 20]))\n    assert_equal(false,\
  \ candidate.call([1, 20, 4, 10]))\n    assert_equal(true, candidate.call([4, 1,\
  \ 0, -10]))\n    assert_equal(true, candidate.call([4, 1, 1, 0]))\n    assert_equal(false,\
  \ candidate.call([1, 2, 3, 2, 5, 60]))\n    assert_equal(true, candidate.call([1,\
  \ 2, 3, 4, 5, 60]))\n    assert_equal(true, candidate.call([9, 9, 9, 9]))\n  end\n\
  end\n"
completions: ["  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if b < a\n\
    \  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false\
    \ if a.nil? || b.nil?\n    return false if a.last < b.first\n  end\n  true\nend",
  "  l.inject([:<=>]) do |a, e|\n    (a[e[0]] <=> a[e[1]]) == -1 ? a : a\n  end\n\
    end", "  l.sort!\n  l.each_cons(2) do |x, y|\n    return false if x.nil? || y.nil?\
    \ || x.nil? > y || y.nil? > x\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return false if b < a\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return false if a.nil? || b.nil? || a > b\n  end\n  true\nend",
  "  l.sort!\n  l.each_cons(2) do |x,y|\n    return true if y > x\n  end\n  false\n\
    end", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return false if b < a\n  end\n\
    \  true\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n    return false if b <\
    \ a\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return false\
    \ if y > x\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a,b|\n    return\
    \ true if a > b\n  end\n  false\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n\
    \    return false if b < a\n  end\n  true\nend", "  l.each do |x|\n    return\
    \ false if x.nil?\n    return false if x.last < x.first\n  end\n  true\nend",
  "  l.sort.each do |i|\n    return false if l[i-1] > i\n    return false if l[i+1]\
    \ < i\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return\
    \ false if b < a\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n\
    \    return false if a.nil? || b.nil?\n    return false if a.last < b.first\n\
    \  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |x,y|\n    return false\
    \ if y > x\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a, b|\n    return\
    \ false if a.nil? || b.nil?\n    return false if a.last < b.last\n    return false\
    \ if a.first > b.first\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2) do |a,\
    \ b|\n    return false if b < a\n  end\n  true\nend", "  l.sort!\n  l.each_cons(2)\
    \ do |a, b|\n    return false if a.nil? || b.nil?\n    return false if a.last\
    \ < b.first\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
