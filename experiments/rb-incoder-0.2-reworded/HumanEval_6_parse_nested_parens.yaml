name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 10\n  paren_nesting_level_max_index = paren_nesting_level_max - 1\n  paren_nesting_level_max_index\
    \ -= 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  ", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_max =\
    \ 0\n  paren_stack_max_index = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_depth_index\
    \ = 0\n  paren_stack_max_depth_level = 0\n  paren_stack_max_depth_level_index\
    \ = 0\n  paren_stack_max_depth_level_length = 0\n  paren_stack_max_depth_level_length_index\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count", "  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_levels\
    \ = []\n  paren_levels_string = \"\"\n  paren_levels_strings = []\n  paren_levels_strings_lengths\
    \ = []\n  paren_levels_strings_lengths_max = 0\n  paren_levels_strings_lengths_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs = []\n  paren_levels_strings_lengths_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_index = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs = []\n\
    \  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_level", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren.scan(/[\\\
    (\\)]+/) do |paren|\n      paren.scan(/[\\(\\)]+/) do |paren|\n        paren.scan(/[\\\
    (\\)]+/) do |paren|\n          paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                paren.scan(/[\\(\\)]+/) do |paren|\n              \
    \    paren.scan(/[\\(\\)]+/) do |paren|\n                    paren.scan(/[\\(\\\
    )]+/) do |paren|\n                      paren.scan(/[\\(\\)]+/) do |paren|\n \
    \                       paren.scan(/[\\(\\)]+/) do |paren|\n                 \
    \         paren.scan(/[\\(\\)]+/) do |paren|\n                            paren.scan(/[\\\
    (\\)]+/) do |paren|\n                              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                                        paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                  paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n                                      \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                                paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \                                      paren.scan(/[\\(\\)]+/) do |paren|\n",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/).map do |paren_string|\n    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n      paren_string.scan(/[()]/).map do |paren_string|\n \
    \       paren_string.scan(/[()]/).map do |paren_string|\n          paren_string.scan(/[()]/).map\
    \ do |paren_string|\n            paren_string.scan(/[()]/).map do |paren_string|\n\
    \              paren_string.scan(/[()]/).map do |paren_string|\n             \
    \   paren_string.scan(/[()]/).map do |paren_string|\n                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                  paren_string.scan(/[()]/).map do |paren_string|\n         \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                           paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                  paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                         \
    \                                   paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                                              ", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.map { |g| parse_nested_parens(g)\
    \ }.max\n    end\n  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/).map { |x| x.to_i }\nend", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/) do |paren_string|\n   \
    \ paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren>)\\s*\\)\\\
    s*\\)\\s*|\\s*\\(\\s*\\((?<paren>)\\s*\\)\\s*\\)\\s*\\((?<paren>)\\s*\\)\\s*\\\
    )/).map do |group|\n    if group[:paren].nil?\n      0\n    else\n      parse_nested_parens(group[:paren])\n\
    \    end\n  end.reduce(:+)\nend", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n\
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n  \
    \        paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[^()]+/)\n\
    \  max_level = 0\n  max_level_paren_level = 0\n  paren_level = 0\n  paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level = 0\n  paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = 0\n  paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_",
  "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_max\
    \ = 0\n  paren_nesting_max_index = 0\n  paren_nesting_max_index2 = 0\n  paren_nesting_max_index3\
    \ = 0\n  paren_nesting_max_index4 = 0\n  paren_nesting_max_index5 = 0\n  paren_nesting_max_index6\
    \ = 0\n  paren_nesting_max_index7 = 0\n  paren_nesting_max_index8 = 0\n  paren_nesting_max_index9\
    \ = 0\n  paren_nesting_max_index10 = 0\n  paren_nesting_max_index11 = 0\n  paren_nesting_max_index12\
    \ = 0\n  paren_nesting_max_index13 = 0\n  paren_nesting_max_index14 = 0\n  paren_nesting_max_index15\
    \ = 0\n  paren_nesting_max_index16 = 0\n  paren_nesting_max_index17 = 0\n  paren_nesting_max_index18\
    \ = 0\n  paren_nesting_max_index19 = 0\n  paren_nesting_max_index20 = 0\n  paren_nesting_max_index21\
    \ = 0\n  paren_nesting_max_index22 = 0\n  paren_nesting_max_index23 = 0\n  paren_nesting_max_index24\
    \ = 0\n  paren_nesting_max_index25 = 0\n  paren_nesting_max_index26 = 0\n  paren_nesting_max_index27\
    \ = 0\n  paren_nesting_max_index28 = 0\n  paren_nesting_max_index29 = 0\n  paren_nesting_max_index30\
    \ = 0\n  paren_nesting_max_index31 = 0\n  paren_nesting_max_index32 = 0\n  paren_nesting_max_index33\
    \ = 0\n  paren_nesting_max_index34 = 0\n  paren_nesting_max_index35 = 0\n  paren_nesting_max_index36\
    \ = 0\n  paren_nesting_max_index37 = 0\n  paren_nesting_max_index38 = 0\n  paren_nesting_max_index39\
    \ = 0\n  paren_nesting_max_index40 = 0\n  paren_nesting_max_index41 = 0\n  paren_nesting_max_index42\
    \ = 0\n  paren_nesting_max_index43 = 0\n  paren_nesting_max_index44 = 0\n  paren_nesting_max_index45\
    \ = 0\n  paren_nesting_max_index46 = 0\n  paren_nesting_max_index47 = 0\n  paren_nesting_max_index48\
    \ = 0\n  paren_nesting_max_", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\
    \ do |group|\n    if group[1]\n      parse_nested_parens(group[1])\n    else\n\
    \      group[0].count('(') - group[0].count(')')\n    end\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/) do |group|\n\
    \    group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_group|\n      nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_group|\n        nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_group|\n       \
    \       nested_nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_nested_group|\n                nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map\
    \ do |group|\n    group.to_s.scan(/\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map\
    \ do |nested_group|\n      nested_group.to_s.scan(/\\s*\\(\\s*([^\\(\\)]*)\\s*\\\
    )\\s*\\)/).map do |inner_group|\n        inner_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]*)\\s*\\)\\s*\\)/).map do |inner_nested_group|\n          inner_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_group|\n           \
    \ inner_inner_group.to_s.scan(/\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map do\
    \ |inner_inner_nested_group|\n              inner_inner_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_nested_group|\n\
    \                inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\s*([^\\(\\\
    )]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n         \
    \         inner_inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\s*([^\\(\\\
    )]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n         \
    \           inner_inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\s*([^\\(\\\
    )]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n         \
    \             inner_inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n      \
    \                  inner_inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    (\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n      \
    \                    inner_inner_inner_inner_nested_group.to_s.scan(/\\s*\\(\\\
    s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n\
    \                            inner_inner_inner_inner_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).map do |inner_inner_inner_inner_nested_group|\n\
    \                              inner_inner_inner_inner_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)/).", "  paren_string.scan(/[^()]+/).map {\
    \ |x| x.to_i }\nend", "  paren_stack = []\n  paren_count = 0\n  paren_level =\
    \ 0\n  paren_nesting = 0\n  paren_groups = []\n  paren_group = []\n  paren_group_size\
    \ = 0\n  paren_group_nesting = 0\n  paren_group_level = 0\n  paren_group_nesting_level\
    \ = 0\n  paren_group_nesting_count = 0\n  paren_group_nesting_size = 0\n  paren_group_nesting_levels\
    \ = []\n  paren_group_nesting_levels_size = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  paren_group_nesting_levels_index = 0\n  paren_group_nesting_levels_index\
    \ = 0\n  ", "  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack_size = 0\n  paren_nesting_stack\
    \ = []\n  ", "  paren_string.scan(/[()]/) do |char|\n    char = char.downcase\n\
    \    if char == '('\n      paren_stack << 1\n    elsif char == ')'\n      paren_stack.pop\n\
    \    end\n  end\n  paren_stack.max\nend", "  paren_string.scan(/[^()]+/) do |paren_string|\n\
    \    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[^()]+/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[^()]+/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[^()]+/) do |paren_string|\n          \
    \                  paren_string.scan(/[()]/) do |paren_string|\n             \
    \                 paren_string.scan(/[^()]+/) do |paren_string|\n            \
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \                       paren_string.scan(/[^()]+/) do |paren_string|\n      \
    \                              paren_string.scan(/[()]/) do |paren_string|\n \
    \                                     paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n                                                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                                 paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index2 = 0\n  paren_nesting_level_max_index3\
    \ = 0\n  paren_nesting_level_max_index4 = 0\n  paren_nesting_level_max_index5\
    \ = 0\n  paren_nesting_level_max_index6 = 0\n  paren_nesting_level_max_index7\
    \ = 0\n  paren_nesting_level_max_index8 = 0\n  paren_nesting_level_max_index9\
    \ = 0\n  paren_nesting_level_max_index10 = 0\n  paren_nesting_level_max_index11\
    \ = 0\n  paren_nesting_level_max_index12 = 0\n  paren_nesting_level_max_index13\
    \ = 0\n  paren_nesting_level_max_index14 = 0\n  paren_nesting_level_max_index15\
    \ = 0\n  paren_nesting_level_max_index16 = 0\n  paren_nesting_level_max_index17\
    \ = 0\n  paren_nesting_level_max_index18 = 0\n  paren_nesting_level_max_index19\
    \ = 0\n  paren_nesting_level_max_index20 = 0\n  paren_nesting_level_max_index21\
    \ = 0\n  paren_nesting_level_max_index22 = 0\n  paren_nesting_level_max_index23\
    \ = 0\n  paren_nesting_level_max_index24 = 0\n  paren_nesting_level_max_index25\
    \ = 0\n  paren_nesting_level_max_index26 = 0\n  paren_nesting_level_max_index27\
    \ = 0\n  paren_nesting_level_max_index28 = 0\n  paren_nesting_level_max_index29\
    \ = 0\n  paren_nesting_level_max_index30 = 0\n  paren_nesting_level_max_index31\
    \ = 0\n  paren_nesting_level_max_index32 = 0\n  paren_nesting_level_max_index33\
    \ = 0\n  paren_nesting_level_max_index34 = 0\n  paren_nesting_level_max_index35\
    \ = 0\n  paren_nesting_level_max_index36 = 0\n  paren_nesting_level_max_index37\
    \ = 0\n  paren_nesting_level_max_index38 = 0\n  paren_nesting_level_max_index39\
    \ = 0\n  paren_nesting_level_max_index40 = 0\n  paren_nesting_level_max_index41\
    \ = 0\n  paren_nesting_level_max_index42 = 0\n  paren_nesting_level_", "  paren_string.scan(/[()]/)\
    \ do |char|\n    if paren_string.scan(/[()]/)\n      paren_string.scan(/[()]/)\
    \ do |char|\n        paren_string.scan(/[()]/) do |char|\n          paren_string.scan(/[()]/)\
    \ do |char|\n            paren_string.scan(/[()]/) do |char|\n              paren_string.scan(/[()]/)\
    \ do |char|\n                paren_string.scan(/[()]/) do |char|\n           \
    \       paren_string.scan(/[()]/) do |char|\n                    paren_string.scan(/[()]/)\
    \ do |char|\n                      paren_string.scan(/[()]/) do |char|\n     \
    \                   paren_string.scan(/[()]/) do |char|\n                    \
    \      paren_string.scan(/[()]/) do |char|\n                            paren_string.scan(/[()]/)\
    \ do |char|\n                              paren_string.scan(/[()]/) do |char|\n\
    \                                paren_string.scan(/[()]/) do |char|\n       \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                        paren_string.scan(/[()]/) do |char|\n               \
    \                       paren_string.scan(/[()]/) do |char|\n                \
    \                        paren_string.scan(/[()]/) do |char|\n               \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                paren_string.scan(/[()]/) do |char|\n       \
    \                                       paren_string.scan(/[()]/) do |char|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |char|\n                                                  paren_string.scan(/[()]/)\
    \ do |char|\n                                                    paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                              paren_string",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\\
    s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\\
    )\\s*\\)/) do |group|\n    if group.captures.size == 1\n      group.captures.first\n\
    \    else\n      group.captures.map { |x| x.to_i }\n    end\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/).map do |x|\n \
    \   x.scan(/[()]/).map do |y|\n      y.scan(/[()]/).map do |z|\n        z.size\n\
    \      end.reduce(:+)\n    end.reduce(:+)\n  end.reduce(:+)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }.inject(0) do |max_level, level|\n    if level > max_level\n \
    \     max_level = level\n    end\n    max_level\n  end\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\\
    s*([^\\(\\)]+)\\s*\\)/).map do |group|\n    group.to_a.map { |e| e.to_i }.max\n\
    \  end\nend", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\)]/) do |paren_char|\n \
    \       paren_char.scan(/[\\(\\)]/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]/) do |paren_char|\n           \
    \           paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    \
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                  paren_char.scan(/[\\(\\)]/)\
    \ do |paren_char|\n                                    paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |group|\n    group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_group|\n\
    \      nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_group|\n\
    \        nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_group|\n\
    \          nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_group|\n\
    \            nested_nested_nested_nested_group.scan(/\\s*\\(([^()]+)\\)\\s*/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^()]+)\\)\\s*/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                  nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n      \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n          \
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                  \
    \      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                        \
    \  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                              paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                paren_char.scan(/[\\(\\\
    )]+/) do |paren_char|\n                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                            paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]/)\n  paren_levels = paren_string.scan(/\\\
    (|\\)|\\)/).count\n  paren_levels -= 1 if paren_levels == 0\n  paren_levels =\
    \ paren_levels if paren_levels > 0 else 1\n  paren_levels = paren_levels if paren_levels\
    \ < 10 else 10\n  paren_levels\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.to_i }\nend", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_max\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index = 0\n  paren_stack_max_index\
    \ = 0\n  paren_stack_max_index = 0\n  paren_stack_", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\\
    s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*\\)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.max\n    end\n\
    \  end\nend", "  paren_stack = []\n  paren_count = 0\n  paren_level = 0\n  paren_groups\
    \ = []\n  paren_group = []\n  paren_group_size = 0\n  paren_group_level = 0\n\
    \  paren_group_count = 0\n  paren_group_levels = []\n  paren_group_level = 0\n\
    \  paren_group_level_size = 0\n  paren_group_level_count = 0\n  paren_group_level_levels\
    \ = []\n  paren_group_level_level = 0\n  paren_group_level_level_count = 0\n \
    \ paren_group_level_level_levels = []\n  paren_group_level_level_level = 0\n \
    \ paren_group_level_level_level_count = 0\n  paren_group_level_level_level_levels\
    \ = []\n  paren_group_level_level_level_level = 0\n  paren_group_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_levels = []\n  paren_group_level_level_level_level_level\
    \ = 0\n  paren_group_level_level_level_level_level_count = 0\n  paren_group_level_level_level_level_level_levels\
    \ = []\n  paren_group_level_level_level_level_level_level = 0\n  paren_group_level_level_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_level_level_levels = []\n  paren_group_level_level_level_level_level_level_level\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_count = 0\n  paren_group_level_level_level_level_level_level_level_levels\
    \ = []\n  paren_group_level_level_level_level_level_level_level_level = 0\n  paren_group_level_level_level_level_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_level_levels =\
    \ []\n  paren_group_level_level_level_level_level_level_level_level_level = 0\n\
    \  paren_group_level_level_level_level_level_level_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_level_level_levels\
    \ = []\n  paren_group_level_level_level_level_level_level_level_level_level =\
    \ 0\n  paren_group_level_level_level_level_level_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_level_levels =\
    \ []\n  paren_group_level_level_level_level_level_level_level_level_level = 0\n\
    \  paren_group_level_level_level_level_level_level_level_level_count = 0\n  paren_group_level_level_level_level_level_level_level_level_levels\
    \ = []\n  paren_group_level_level_level_level_level_level_level_level_level_level\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_level_level_count\
    \ = 0\n  paren_group_level_level_level_level_level_level_level_level_levels =\
    \ []\n  paren_group_level_level_", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\
    \ do |group|\n    if group.captures.size == 1\n      group.captures.first\n  \
    \  else\n      group.captures.map { |i| i.to_i }\n    end\n  end\nend", "  paren_string.scan(/[()]/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/[^()]+/).map { |s| s.to_i\
    \ }.reduce(:+)\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\\
    s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*|\\s*\\(\\s*([^()]*?)\\s*\\)\\s*\\)\\s*|\\s*\\\
    (\\s*([^()]*?)\\s*\\)\\s*\\)\\s*\\)/) do |group|\n    group.captures.map { |x|\
    \ x.to_i }\n  end\nend", "  paren_string.scan(/[()]/).map do |paren_char|\n  \
    \  paren_char == '(' ? 1 : -1\n  end.reduce(:+)\nend", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<paren_level>\\d+)\\)\\s*\\)\\s*(?<paren_level>\\d+)\\s*\\)/) do\
    \ |match|\n    paren_levels[match[:paren_level]] += 1\n  end\n  paren_levels.values.max\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map {\
    \ |x| x.to_i }.max\n  end\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\\
    )]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map\
    \ { |x| x.to_i }.max\n  end\nend", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_string = \"\"\n\
    \  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_string = \"\"\n  paren_levels_count = 0\n  paren_levels_string\
    \ = \"\"\n  paren_levels_count = 0\n  paren_levels_string = \"\"\n  paren_levels_count\
    \ = 0\n  paren_levels_", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/)\n  max_level = 0\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_stack = []\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n\
    \  paren_nesting_stack.push(0)\n  paren_nesting_stack.push(0)\n  paren_nesting_",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size\
    \ == 1\n      group.captures.first\n    else\n      group.captures.max\n    end\n\
    \  end\nend", "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/\\\
    (/) do |paren_string|\n      paren_string.scan(/\\)/) do |paren_string|\n    \
    \    paren_string.scan(/[^()]+/) do |paren_string|\n          paren_string.scan(/\\\
    (/) do |paren_string|\n            paren_string.scan(/\\)/) do |paren_string|\n\
    \              paren_string.scan(/[^()]+/) do |paren_string|\n               \
    \ paren_string.scan(/\\(/) do |paren_string|\n                  paren_string.scan(/\\\
    )/) do |paren_string|\n                    paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                      paren_string.scan(/\\(/) do |paren_string|\n          \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \        paren_string.scan(/[^()]+/) do |paren_string|\n                     \
    \       paren_string.scan(/\\(/) do |paren_string|\n                         \
    \     paren_string.scan(/\\)/) do |paren_string|\n                           \
    \     paren_string.scan(/[^()]+/) do |paren_string|\n                        \
    \          paren_string.scan(/\\(/) do |paren_string|\n                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                    paren_string.scan(/[^()]+/) do |paren_string|\n         \
    \                               paren_string.scan(/\\(/) do |paren_string|\n \
    \                                         paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                              paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/\\\
    (/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                               paren_string.scan(/\\(/) do |paren_string|\n \
    \                                                           paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/[^()]+/) do |paren_string|\n                     \
    \                                           paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \    paren_level = 0\n    paren_string.scan(/[\\(\\)]+/) do |paren|\n      paren_level\
    \ += 1\n      paren_level += 1 if paren == paren\n    end\n    paren_level\n \
    \ end\nend", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_depth\
    \ = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_size = 0\n  paren_stack_max_parens\
    \ = 0\n  paren_stack_max_parens_size = 0\n  paren_stack_max_parens_depth = 0\n\
    \  paren_stack_max_parens_depth_size = 0\n  paren_stack_max_parens_depth_size_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens = 0\n  paren_stack_max_parens_depth_size_parens_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth = 0\n  paren_stack_max_parens_depth_size_parens_depth_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_size = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_size = 0\n\
    \  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_size\
    \ = 0\n  paren_stack_max_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth_size_parens_depth\
    \ = 0\n  paren_stack_max_", '  paren_string.scan(/\s*\((?<paren>\()|(?<-paren>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()',
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n            \
    \    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n          \
    \        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n      \
    \              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                        nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                          nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                            nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                              nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                  nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                    nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                      nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.max\n    end\n  end\n\
    end", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\\
    s*([^\\(\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map { |x| x.to_i }.max\n\
    \  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a dscore=0 |>\nI came up with\
    \ this solution:\n<code>", "  paren_string = paren_string.strip\n  level = 0\n\
    \  paren_stack = []\n  paren_stack.push paren_string\n  while paren_stack.any?\n\
    \    paren_string = paren_stack.shift\n    if paren_string == \"(\"\n      level\
    \ += 1\n    elsif paren_string == \")\"\n      level -= 1\n    end\n    if level\
    \ == 0\n      paren_stack.push paren_string\n    end\n  end\n  return paren_stack.count\n\
    end", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\\
    ((?<paren>[^()]+)\\)\\s*\\)/).map do |match|\n    paren = match[:paren]\n    level\
    \ = 0\n    paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)/).map do |match|\n      level += 1\n      paren = match[:paren]\n   \
    \   level\n    end.max\n  end\nend", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n    paren_char = paren_char.downcase\n    if paren_char\
    \ == \"(\"\n      paren_stack << paren_char\n    elsif paren_char == \")\"\n \
    \     paren_stack.pop\n    end\n  end\n  paren_stack.size\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n    paren_stack = []\n    paren_stack.push(paren.length)\n\
    \    paren.scan(/[\\(\\)]+/) do |paren|\n      paren_stack.push(paren.length)\n\
    \    end\n    paren_stack.push(paren.length)\n    paren_stack.each do |level|\n\
    \      paren_stack.pop\n    end\n  end\nend", "  paren_string.scan(/[^()]+/) do\
    \ |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    level = 0\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level += 1\n    end\n    paren_string.scan(/[()]/) do |paren_string|\n\
    \      level -= 1\n    end\n    paren_string.scan(/", "  paren_string.scan(/[\\\
    (\\)]+/).map do |paren|\n    paren.scan(/[\\(\\)]+/).map do |paren|\n      paren.scan(/[\\\
    (\\)]+/).map do |paren|\n        paren.scan(/[\\(\\)]+/).map do |paren|\n    \
    \      paren.scan(/[\\(\\)]+/).map do |paren|\n            paren.scan(/[\\(\\\
    )]+/).map do |paren|\n              paren.scan(/[\\(\\)]+/).map do |paren|\n \
    \               paren.scan(/[\\(\\)]+/).map do |paren|\n                  paren.scan(/[\\\
    (\\)]+/).map do |paren|\n                    paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                      paren.scan(/[\\(\\)]+/).map do |paren|\n              \
    \          paren.scan(/[\\(\\)]+/).map do |paren|\n                          paren.scan(/[\\\
    (\\)]+/).map do |paren|\n                            paren.scan(/[\\(\\)]+/).map\
    \ do |paren|\n                              paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                                paren.scan(/[\\(\\)]+/).map do |paren|\n    \
    \                              paren.scan(/[\\(\\)]+/).map do |paren|\n      \
    \                              paren.scan(/[\\(\\)]+/).map do |paren|\n      \
    \                                paren.scan(/[\\(\\)]+/).map do |paren|\n    \
    \                                    paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                                          paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                                            paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                                              paren.scan(/[\\(\\)]+/).map do\
    \ |paren|\n                                                paren.scan(/[\\(\\\
    )]+/).map do |paren|\n                                                  paren.scan(/[\\\
    (\\)]+/).map do |paren|\n                                                    paren.scan(/[\\\
    (\\)]+/).map do |paren|\n                                                    \
    \  paren.scan(/[\\(\\)]+/).map do |paren|\n                                  \
    \                      paren.scan(/[\\(\\)]+/).map do |paren|\n              \
    \                                            paren.scan(/[\\(\\)]+/).map do |paren|\n\
    \                                                            paren.scan(/[\\(\\\
    )]+/).map do |paren|\n                                                       \
    \       paren.scan(/[\\(\\)]+/).map do |paren|\n                             \
    \                                   paren.scan(/[\\(\\)]+/).map do |paren|", " \
    \ paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/\\(/)\
    \ do |paren_string|\n      paren_string.scan(/\\)/) do |paren_string|\n      \
    \  paren_string.scan(/\\)/) do |paren_string|\n          paren_string.scan(/\\\
    )/) do |paren_string|\n            paren_string.scan(/\\)/) do |paren_string|\n\
    \              paren_string.scan(/\\)/) do |paren_string|\n                paren_string.scan(/\\\
    )/) do |paren_string|\n                  paren_string.scan(/\\)/) do |paren_string|\n\
    \                    paren_string.scan(/\\)/) do |paren_string|\n            \
    \          paren_string.scan(/\\)/) do |paren_string|\n                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                          paren_string.scan(/\\\
    )/) do |paren_string|\n                            paren_string.scan(/\\)/) do\
    \ |paren_string|\n                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                  paren_string.scan(/\\)/) do |paren_string|\n\
    \                                    paren_string.scan(/\\)/) do |paren_string|\n\
    \                                      paren_string.scan(/\\)/) do |paren_string|\n\
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                    paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                              \
    \                            paren_string.scan(/\\)/) do |paren_string|\n    \
    \                                                        paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/\\)/) do |paren_string|\n                        \
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                                                    paren_string.scan(/\\)/)\
    \ do |paren_string|\n                                                        \
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \                ", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  '  paren_string.scan(/\s*\((?<paren>\()|(?<-paren>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()|(?<-close>\))|(?<-open>\()',
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/).map do |group|\n    if group.captures.size == 1\n      group.captures.first\n\
    \    else\n      group.captures.map { |i| i.to_i }\n    end\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_string.scan(/[()]/) do |char|\n    if paren_string.peek(1).nil?\n\
    \      paren_string.scan(/[()]/) do |char|\n        paren_string.scan(/[()]/)\
    \ do |char|\n          paren_string.scan(/[()]/) do |char|\n            paren_string.scan(/[()]/)\
    \ do |char|\n              paren_string.scan(/[()]/) do |char|\n             \
    \   paren_string.scan(/[()]/) do |char|\n                  paren_string.scan(/[()]/)\
    \ do |char|\n                    paren_string.scan(/[()]/) do |char|\n       \
    \               paren_string.scan(/[()]/) do |char|\n                        paren_string.scan(/[()]/)\
    \ do |char|\n                          paren_string.scan(/[()]/) do |char|\n \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \   paren_string.scan(/[()]/) do |char|\n                                    \
    \      paren_string.scan(/[()]/) do |char|\n                                 \
    \           paren_string.scan(/[()]/) do |char|\n                            \
    \                  paren_string.scan(/[()]/) do |char|\n                     \
    \                           paren_string.scan(/[()]/) do |char|\n            \
    \                                      paren_string.scan(/[()]/) do |char|\n \
    \                                                   paren_string.scan(/[()]/)\
    \ do |char|\n                                                      paren_string.scan(/[()]/)\
    \ do |char|\n                                                        paren_string.scan(/[()]/)\
    \ do |char|\n                                                          paren_string.scan(/[()]/)\
    \ do |char|\n                                                            paren_string.scan(/[()]/)\
    \ do |char|\n                                                              paren_string.scan(/[()]/)\
    \ do |char|\n                                                                paren_string.scan(/[()]/)\
    \ do |char|\n                                                                \
    \  paren_string.scan(/[()]/) do |char|\n                                     \
    \                               paren_string.scan(/[()]/) do |char|\n        \
    \                                                            paren_string.scan",
  "  paren_string.scan(/[\\(\\)]/).map { |x| x.size }.max\nend", "  paren_stack =\
    \ []\n  paren_stack_size = -1\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size =\
    \ 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n\
    \  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren_stack_size = 0\n  paren_stack_sizes\
    \ = []\n  paren_stack_size = 0\n  paren_stack_sizes = []\n  paren", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group[1]\n      parse_nested_parens(group[1])\n\
    \    else\n      parse_nested_parens(group[2])\n    end\n  end\nend", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_sizes\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_stack = []\n  paren_nesting_levels\
    \ = []\n  paren_nesting_levels_stack = []\n  paren_nesting_levels_stacks = []\n\
    \  paren_nesting_levels_stacks_stack = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_levels_stacks_stacks\
    \ = []\n  paren_nesting_levels_stacks_stacks = []\n  paren_nesting_", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\\
    )]+)\\)\\s*\\)\\s*\\)/) do |paren_string|\n    paren_string.scan(/\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/) do |paren_string|\n      paren_string.scan(/\\s*\\(([^\\(\\\
    )]+)\\)/) do |paren_string|\n        paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \          paren_string.scan(/\\s*\\)/) do |paren_string|\n            paren_string.scan(/\\\
    s*\\)/) do |paren_string|\n              paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                paren_string.scan(/\\s*\\)/) do |paren_string|\n            \
    \      paren_string.scan(/\\s*\\)/) do |paren_string|\n                    paren_string.scan(/\\\
    s*\\)/) do |paren_string|\n                      paren_string.scan(/\\s*\\)/)\
    \ do |paren_string|\n                        paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                          paren_string.scan(/\\s*\\)/) do |paren_string|\n  \
    \                          paren_string.scan(/\\s*\\)/) do |paren_string|\n  \
    \                            paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                  paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                    paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                      paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                        paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\s*\\)/) do\
    \ |paren_string|\n                                                paren_string.scan(/\\\
    s*\\)/) do |paren_string|\n                                                  paren_string.scan(/\\\
    s*\\)/) do |paren_string|\n                                                  \
    \  paren_string.scan(/\\s*\\)/) do |paren_string|\n                          \
    \                            paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                                        paren_string.scan(/\\\
    s*\\)/) do |paren_string|\n                                                  \
    \        paren_string.scan(/\\s*\\)/) do |paren_string|\n                    \
    \                                        paren_string.scan(/\\s*\\)/) do |paren_string|\n\
    \                                                              paren", "  paren_string.scan(/[()]/)\
    \ do |char|\n    char == '(' ? parse_nested_parens(paren_string) : paren_string.scan(/[()]/).length\n\
    \  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    paren_chars.push paren_char\n    paren_chars.shift if paren_char == paren_chars.last\n\
    \  end\n  paren_chars.reverse\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.to_i }\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\\
    s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map { |x|\
    \ x.to_i }\n  end\nend", "  paren_string.scan(/[^()]+/).map { |s| s.to_i }\nend",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*\\)/) do |group|\n\
    \    group.captures.map { |x| x.to_i }\n  end\nend", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels =\
    \ []\n  paren_nestings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_string = \"\"\n  paren_nest",
  "  paren_string.scan(/[^()]+/).map do |paren_string|\n    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n      paren_string.scan(/[()]/).map do |paren_string|\n \
    \       paren_string.scan(/[()]/).map do |paren_string|\n          paren_string.scan(/[()]/).map\
    \ do |paren_string|\n            paren_string.scan(/[()]/).map do |paren_string|\n\
    \              paren_string.scan(/[()]/).map do |paren_string|\n             \
    \   paren_string.scan(/[()]/).map do |paren_string|\n                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                  paren_string.scan(/[()]/).map do |paren_string|\n         \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                           paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                  paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                         \
    \                                   paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                                              ", '  paren_string.scan(/\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)',
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \      nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n          nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n            nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n              nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                nested_paren_group.scan(/[\\(\\)]+/) do\
    \ |nested_paren_group|\n                  nested_paren_group.scan(/[\\(\\)]+/)\
    \ do |nested_paren_group|\n                    nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_paren_group|\n                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                            nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                              nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                  nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                    nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                      nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                        nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                          nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \ nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n             \
    \                                 nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n\
    \                                                nested_paren_group.scan(/[\\\
    (\\)]+/) do |nested_paren_group|\n                                           \
    \       nested_paren_group.scan(/[\\(\\)]+/) do |nested_paren_group|\n       \
    \                                             nested_paren_group.scan(/[\\(\\\
    )]+/) do |nested_", "  paren_string.scan(/[^()]+/) do |paren_group|\n    paren_group.scan(/[()]/)\
    \ do |paren_level|\n      paren_level.length <= paren_group.size ? paren_level\
    \ : nil\n    end\n  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/", "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/)\
    \ do |paren_char|\n      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[()]/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[\\(\\)]+/) do\
    \ |paren|\n      paren_level += 1\n      paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \        paren_level += 1\n        paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \          paren_level += 1\n        end\n      end\n    end\n    paren_level\n\
    \  end\nend", "  paren_string.scan(/[^()]+/).map { |s| s.to_i }\nend", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_max\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0", "  paren_string.scan(/[^()]+/).map\
    \ do |x|\n    x.gsub(/\\(/, '').gsub(/\\)/, '')\n  end\nend", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/\\(/) do |paren_string|\n      paren_string.scan(/\\\
    )/) do |paren_string|\n        paren_string.scan(/\\)/) do |paren_string|\n  \
    \        paren_string.scan(/\\)/) do |paren_string|\n            paren_string.scan(/\\\
    )/) do |paren_string|\n              paren_string.scan(/\\)/) do |paren_string|\n\
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \  paren_string.scan(/\\)/) do |paren_string|\n                    paren_string.scan(/\\\
    )/) do |paren_string|\n                      paren_string.scan(/\\)/) do |paren_string|\n\
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \            paren_string.scan(/\\)/) do |paren_string|\n                    \
    \            paren_string.scan(/\\)/) do |paren_string|\n                    \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                  paren_string.scan(/\\)/) do |paren_string|\n              \
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/\\)/) do |paren_string|\n\
    \                                              paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/\\)/) do\
    \ |paren_string|\n                                                    paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/\\)/) do |paren_string|\n                              \
    \                            paren_string.scan(/\\)/) do |paren_string|\n    \
    \                                                        paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/\\)/) do |paren_string|\n                        \
    \                                        paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                                                    paren_string.scan(/\\)/)\
    \ do |paren_string|\n                                                        \
    \                paren_string.scan(/\\)/) do |paren_string|\n                \
    \                                                ", "  paren_string = paren_string.strip\n\
    \  paren_stack = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\\
    (\\)]+)\\)\\s*\\)/) do |group|\n    group.captures.map { |parens| parens.to_i\
    \ }.reduce(:+)\n  end\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| a dscore=0 |>\n\
    <code>", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\\
    s*([^\\)]*)\\)\\s*\\)/).map do |group|\n    group.to_s.scan(/\\s*\\(\\s*([^\\\
    )]*)\\)\\s*\\)/).map do |nested_group|\n      nested_group.to_s.scan(/\\s*\\(\\\
    s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_group|\n        nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_group|\n         \
    \ nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do\
    \ |nested_nested_nested_nested_group|\n            nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_group|\n\
    \              nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\(\\s*([^\\\
    )]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n  \
    \              nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\s*\\\
    (\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.to_s.scan(/\\\
    s*\\(\\s*([^\\)]*)\\)\\s*\\)/).map do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 10\n  paren_nesting_level_max_max\
    \ = 10\n  paren_nesting_level_max_min = -1\n  paren_nesting_level_max_min_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_inv = -1\n  paren_nesting_level_max_min_inv_max\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv = -1\n  paren_nesting_level_max_min_inv_max_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv = -1\n\
    \  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv_inv = -1\n\
    \  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv_inv_inv = -1\n\
    \  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max_inv_inv_max_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv_inv\
    \ = -1\n  paren_nesting_level_max_min_inv_max", "  paren_stack = []\n  paren_level\
    \ = 0\n  paren_levels = []\n  paren_levels_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_levels_strings_count = 0\n  paren_levels_strings_count_max = 0\n\
    \  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max\
    \ = 0\n  paren_levels_strings_count_max_index = 0\n  paren_levels_strings_count_min\
    \ = 0\n  paren_levels_strings_count_min_index = 0\n  paren_levels_strings_count_max",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char = paren_char.downcase\n\
    \    if paren_char == '('\n      paren_level += 1 unless paren_level == 0\n  \
    \  elsif paren_char == ')'\n      paren_level -= 1 unless paren_level == 0\n \
    \   end\n  end\n  paren_level\nend", "  paren_string.scan(/[\\(\\)]/).map do |char|\n\
    \    char = char.downcase\n    case char\n    when \"(\"\n      0\n    when \"\
    )\"\n      1\n    else\n      0\n    end\n  end.reduce(:+)\nend", '  paren_string.scan(/\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]*)\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*([^()]*?)\s*\)\s*\)\s*\)\s*\)\s*\)\s*|\s*\(\s*\(([^\)]',
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting = 0\n  paren_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_", "  paren_stack =\
    \ []\n  paren_stack_size = -1\n  paren_stack_string = \"\"\n  paren_stack_level\
    \ = 0\n  paren_stack_level_max = 0\n  paren_stack_level_max_index = 0\n  paren_stack_level_max_string\
    \ = \"\"\n  paren_stack_level_max_string_index = 0\n  paren_stack_level_max_string_size\
    \ = 0\n  paren_stack_level_max_string_size_index = 0\n  paren_stack_level_max_string_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_index = 0\n  paren_stack_level_max_string_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_index = 0\n  paren_stack_level_max_string_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_size_index = 0\n\
    \  paren_stack_level_max_string_size_size_size_size_size_size_size = 0\n  paren_stack_level_max_string_size_size_size_size_size_size_index\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size_size_size_size = 0\n\
    \  paren_stack_level_max_string_size_size_size_size_size_size_index = 0\n  paren_stack_level_max_string_size_size_size_size_size_size_size_size\
    \ = 0\n  paren_stack_level_max_string_size_size_size_size", "  paren_string =\
    \ paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_nesting =\
    \ 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\n\
    \  paren_nestings_string = \"\"\n  paren_levels_string = paren_string.split(\"\
    \ \").map { |e| e.to_i }.max\n  paren_nestings_string = paren_string.split(\"\
    \ \").map { |e| e.to_i }.min\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i\n  paren_nestings_string.to_i\n\
    \  paren_levels_string.to_i\n  paren_nestings_string.to_i\n  paren_levels_string.to_i\n\
    \  paren_nestings_string.to_i\n  paren_levels_string.to_i", "  paren_string.scan(/\\\
    s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\)]*)\\)\\s*\\)/) do |group|\n\
    \    group.captures.map { |parens| parens.to_i }.max\n  end\nend", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_levels = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_indexs\
    \ = []\n  paren_levels_index = 0\n  paren_levels_indexs = []\n  paren_levels_index\
    \ = 0\n  paren_levels_indexs = []\n  paren_levels_index = 0\n  paren_levels_index",
  "  paren_string.scan(/[^()]+/)\n  max_level = 0\n  paren_level = 0\n  paren_nesting\
    \ = []\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n \
    \ paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n\
    \  paren_nesting.push(max_level)\n  paren_nesting.push(paren_level)\n  paren_nesting.push(max_level)\n\
    \  paren_nesting.push(", "  paren_string.scan(/[^()]+/) do |paren_string|\n  \
    \  paren_string.scan(/\\(/) do |paren_string|\n      paren_string.scan(/\\)/)\
    \ do |paren_string|\n        paren_string.scan(/[^()]+/) do |paren_string|\n \
    \         paren_string.scan(/\\(/) do |paren_string|\n            paren_string.scan(/\\\
    )/) do |paren_string|\n              paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                paren_string.scan(/\\(/) do |paren_string|\n                \
    \  paren_string.scan(/\\)/) do |paren_string|\n                    paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                      paren_string.scan(/\\(/) do |paren_string|\n\
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                  paren_string.scan(/[^()]+/) do |paren_string|\n           \
    \                 paren_string.scan(/\\(/) do |paren_string|\n               \
    \               paren_string.scan(/\\)/) do |paren_string|\n                 \
    \               paren_string.scan(/[^()]+/) do |paren_string|\n              \
    \                    paren_string.scan(/\\(/) do |paren_string|\n            \
    \                        paren_string.scan(/\\)/) do |paren_string|\n        \
    \                              paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                        paren_string.scan(/\\(/) do |paren_string|\n\
    \                                          paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                              paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/\\\
    (/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                               paren_string.scan(/\\(/) do |paren_string|\n \
    \                                                           paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/[^()]+/) do |paren_string|\n                     \
    \                                           paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\
    \n  paren_nestings_string = \"\"\n  paren_levels_string = paren_string.split(\"\
    \ \").map { |s| s.gsub(\"(\", \"\").gsub(\")\", \"\") }.join(\" \")\n  paren_nestings_string\
    \ = paren_string.split(\" \").map { |s| s.gsub(\"(\", \"\").gsub(\")\", \"\")\
    \ }.join(\" \")\n  paren_levels_string.scan(/[\\(\\)]/) do |paren_char|\n    if\
    \ paren_char == \"(\"\n      paren_level += 1\n      paren_nesting += 1\n    \
    \  paren_levels << paren_level\n      paren_nestings << paren_nesting\n    elsif\
    \ paren_char == \")\"\n      paren_level -= 1\n      paren_nesting -= 1\n    \
    \  paren_levels << paren_level\n      paren_nestings << paren_nesting\n    end\n\
    \  end\n  paren_levels_string.split(\" \").map { |s| s.to_i }\n  paren_nestings_string.split(\"\
    \ \").map { |s| s.to_i }\nend\n</code>\n<|/ a tags=ruby,regex |>\n<| c |>\nThanks\
    \ for your answer! I tested it and it works great! I added a small change to your\
    \ code so that it can handle nested parentheses inside parentheses inside parentheses.\n\
    <|/ c |>\n<| c |>\nI added a small change to your code so that it can handle nested\
    \ parentheses inside parentheses inside parentheses.\n<|/ c |>\n<| a |>\nI wrote\
    \ a small gem for this: paren_levels\n<code>\nrequire 'paren_levels'", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_groups = []\n  paren_group = []\n  paren_group_size\
    \ = 0\n  paren_group_level = 0\n  paren_group_count = 0\n  paren_group_max_size\
    \ = 0\n  paren_group_max_level = 0\n  paren_group_max_count = 0\n  paren_group_max_paren_level\
    \ = 0\n  paren_group_max_paren_group = 0\n  paren_group_max_paren_group_count\
    \ = 0\n  paren_group_max_paren_group_max_size = 0\n  paren_group_max_paren_group_max_level\
    \ = 0\n  paren_group_max_paren_group_max_count = 0\n  paren_group_max_paren_group_max_paren_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group = 0\n  paren_group_max_paren_group_max_paren_group_count\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_size = 0\n  paren_group_max_paren_group_max_paren_group_max_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_count = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_count\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_size\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_count\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_count\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_size\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_count\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_group_max_paren_level\
    \ = 0\n  paren_group_max_paren_group_max_paren_group_max_paren_", "  paren_string.scan(/[\\\
    (\\)]/).map { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \    paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n      paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n        paren_string.scan(/\\(.*?\\)/).map do\
    \ |paren_string|\n          paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n\
    \            paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n          \
    \    paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n                paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                  paren_string.scan(/\\(.*?\\\
    )/).map do |paren_string|\n                    paren_string.scan(/\\(.*?\\)/).map\
    \ do |paren_string|\n                      paren_string.scan(/\\(.*?\\)/).map\
    \ do |paren_string|\n                        paren_string.scan(/\\(.*?\\)/).map\
    \ do |paren_string|\n                          paren_string.scan(/\\(.*?\\)/).map\
    \ do |paren_string|\n                            paren_string.scan(/\\(.*?\\)/).map\
    \ do |paren_string|\n                              paren_string.scan(/\\(.*?\\\
    )/).map do |paren_string|\n                                paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                  paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                    paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                      paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                        paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                          paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                            paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                            \
    \  paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n                    \
    \                            paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n\
    \                                                  paren_string.scan(/\\(.*?\\\
    )/).map do |paren_string|\n                                                  \
    \  paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n                    \
    \                                  paren_string.scan(/\\(.*?\\)/).map do |paren_string|\n\
    \                                                        paren_string.scan(/\\\
    (.*?\\)/).map do |paren_string|\n                                            \
    \              paren_string.scan(/\\(", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_level = 0\n  paren_stack_string\
    \ = \"\"\n  paren_stack_strings = []\n  paren_stack_strings_size = 0\n  paren_stack_strings_level\
    \ = 0\n  paren_stack_strings_string = \"\"\n  paren_stack_strings_strings = []\n\
    \  paren_stack_strings_strings_size = 0\n  paren_stack_strings_strings_level =\
    \ 0\n  paren_stack_strings_strings_string = \"\"\n  paren_stack_strings_strings_strings\
    \ = []\n  paren_stack_strings_strings_strings_size = 0\n  paren_stack_strings_strings_strings_level\
    \ = 0\n  paren_stack_strings_strings_strings_string = \"\"\n  paren_stack_strings_strings_strings_strings\
    \ = []\n  paren_stack_strings_strings_strings_strings_size = 0\n  paren_stack_strings_strings_strings_strings_level\
    \ = 0\n  paren_stack_strings_strings_strings_strings_string = \"\"\n  paren_stack_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_strings_strings_strings_strings_strings_size = 0\n  paren_stack_strings_strings_strings_strings_strings_level\
    \ = 0\n  paren_stack_strings_strings_strings_strings_strings_string = \"\"\n \
    \ paren_stack_strings_strings_strings_strings_strings_strings = []\n  paren_stack_strings_strings_strings_strings_strings_strings_size\
    \ = 0\n  paren_stack_strings_strings_strings_strings_strings_strings_level = 0\n\
    \  paren_stack_strings_strings_strings_strings_strings_strings_string = \"\"\n\
    \  paren_stack_strings_strings_strings_strings_strings_strings_strings = []\n\
    \  paren_stack_strings_strings_strings_strings_strings_strings_size = 0\n  paren_stack_strings_strings_strings_strings_strings_strings_strings_level\
    \ = 0\n  paren_stack_strings_strings_strings_strings_strings_strings_strings_string\
    \ = \"\"\n  paren_stack_strings_strings_strings_strings_strings_strings_strings_strings\
    \ = []\n  paren_stack_strings_strings_strings_strings_strings_strings_strings_strings_size\
    \ = 0\n  paren_stack_strings_strings_strings_strings_strings_strings_strings_strings_level\
    \ = 0\n  paren_stack_strings_strings_strings_strings_strings_", "  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_max = 0\n  paren_nesting_level\
    \ = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n\
    \  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index = 0\n  paren_nesting_level_max_index =\
    \ 0\n  paren_nesting_level_max_index", "  paren_string.scan(/[\\(\\)]/).map do\
    \ |paren|\n    paren.scan(/[\\(\\)]/).map do |nested_paren|\n      nested_paren.scan(/[\\\
    (\\)]/).map do |nested_nested_paren|\n        nested_nested_paren.count\n    \
    \  end.max\n    end.max\n  end\nend", "  paren_string.scan(/[\\(\\)]/) do |paren|\n\
    \    paren_level = 0\n    paren_string.scan(/[\\(\\)]/) do |paren|\n      paren_level\
    \ += 1\n      paren_string.scan(/[\\(\\)]/) do |paren|\n        paren_level +=\
    \ 1\n      end\n    end\n    paren_level\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[\\(\\)]/).map do |char|\n\
    \    char = char.downcase\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\\
    (\\)]/, '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\\
    )]/, '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/[\\(\\)]/,\
    \ '')\n    char = char.gsub(/[\\(\\)]/, '')\n    char = char.gsub(/", "  paren_string.scan(/[\\\
    (\\)]/) do |paren_char|\n    paren_char = paren_char.dup\n    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n      paren_char = paren_char.dup\n      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n        paren_char = paren_char.dup\n        paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n          paren_char = paren_char.dup\n          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n            paren_char = paren_char.dup\n           \
    \ paren_char.scan(/[\\(\\)]/) do |paren_char|\n              paren_char = paren_char.dup\n\
    \              paren_char.scan(/[\\(\\)]/) do |paren_char|\n                paren_char\
    \ = paren_char.dup\n                paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                  paren_char = paren_char.dup\n                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                    paren_char = paren_char.dup\n   \
    \                 paren_char.scan(/[\\(\\)]/) do |paren_char|\n              \
    \        paren_char = paren_char.dup\n                      paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                        paren_char = paren_char.dup\n\
    \                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n       \
    \                   paren_char = paren_char.dup\n                          paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                            paren_char = paren_char.dup\n\
    \                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n   \
    \                           paren_char = paren_char.dup\n                    \
    \          paren_char.scan(/[\\(\\)]/) do |paren_char|\n                     \
    \           paren_char = paren_char.dup\n                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                  paren_char = paren_char.dup\n\
    \                                  paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                    paren_char = paren_char.dup\n           \
    \                         paren_char.scan(/[\\(\\)]/) do |paren_char|\n      \
    \                                ", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max = 0\n  paren_nesting_level_max_index\
    \ = 0\n  paren_nesting_level_max_index2 = 0\n  paren_nesting_level_max_index3\
    \ = 0\n  paren_nesting_level_max_index4 = 0\n  paren_nesting_level_max_index5\
    \ = 0\n  paren_nesting_level_max_index6 = 0\n  paren_nesting_level_max_index7\
    \ = 0\n  paren_nesting_level_max_index8 = 0\n  paren_nesting_level_max_index9\
    \ = 0\n  paren_nesting_level_max_index10 = 0\n  paren_nesting_level_max_index11\
    \ = 0\n  paren_nesting_level_max_index12 = 0\n  paren_nesting_level_max_index13\
    \ = 0\n  paren_nesting_level_max_index14 = 0\n  paren_nesting_level_max_index15\
    \ = 0\n  paren_nesting_level_max_index16 = 0\n  paren_nesting_level_max_index17\
    \ = 0\n  paren_nesting_level_max_index18 = 0\n  paren_nesting_level_max_index19\
    \ = 0\n  paren_nesting_level_max_index20 = 0\n  paren_nesting_level_max_index21\
    \ = 0\n  paren_nesting_level_max_index22 = 0\n  paren_nesting_level_max_index23\
    \ = 0\n  paren_nesting_level_max_index24 = 0\n  paren_nesting_level_max_index25\
    \ = 0\n  paren_nesting_level_max_index26 = 0\n  paren_nesting_level_max_index27\
    \ = 0\n  paren_nesting_level_max_index28 = 0\n  paren_nesting_level_max_index29\
    \ = 0\n  paren_nesting_level_max_index30 = 0\n  paren_nesting_level_max_index31\
    \ = 0\n  paren_nesting_level_max_index32 = 0\n  paren_nesting_level_max_index33\
    \ = 0\n  paren_nesting_level_max_index34 = 0\n  paren_nesting_level_max_index35\
    \ = 0\n  paren_nesting_level_max_index36 = 0\n  paren_nesting_level_max_index37\
    \ = 0\n  paren_nesting_level_max_index38 = 0\n  paren_nesting_level_max_index39\
    \ = 0\n  paren_nesting_level_max_index40 = 0\n  paren_nesting_level_max_index41\
    \ = 0\n  paren_nesting_level_max_index42 = 0\n  paren_nesting_level_max_index43\
    \ = 0\n  paren_nest", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  \
    \  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                        paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                            paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                              paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                                paren_string.scan(/[\\(\\\
    )]+/) do |paren_string|\n                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/[()]/)\
    \ do |paren_string|\n      paren_string.scan(/[()]/) do |paren_string|\n     \
    \   paren_string.scan(/[()]/) do |paren_string|\n          paren_string.scan(/[()]/)\
    \ do |paren_string|\n            paren_string.scan(/[()]/) do |paren_string|\n\
    \              paren_string.scan(/[()]/) do |paren_string|\n                paren_string.scan(/[()]/)\
    \ do |paren_string|\n                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                    paren_string.scan(/[()]/) do |paren_string|\n           \
    \           paren_string.scan(/[()]/) do |paren_string|\n                    \
    \    paren_string.scan(/[()]/) do |paren_string|\n                          paren_string.scan(/[()]/)\
    \ do |paren_string|\n                            paren_string.scan(/[()]/) do\
    \ |paren_string|\n                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                paren_string.scan(/[()]/) do |paren_string|\n\
    \                                  paren_string.scan(/[()]/) do |paren_string|\n\
    \                                    paren_string.scan(/[()]/) do |paren_string|\n\
    \                                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/[()]/)\
    \ do |paren|\n    paren.scan(/[()]/) do |paren|\n      paren.scan(/[()]/) do |paren|\n\
    \        paren.scan(/[()]/) do |paren|\n          paren.scan(/[()]/) do |paren|\n\
    \            paren.scan(/[()]/) do |paren|\n              paren.scan(/[()]/) do\
    \ |paren|\n                paren.scan(/[()]/) do |paren|\n                  paren.scan(/[()]/)\
    \ do |paren|\n                    paren.scan(/[()]/) do |paren|\n            \
    \          paren.scan(/[()]/) do |paren|\n                        paren.scan(/[()]/)\
    \ do |paren|\n                          paren.scan(/[()]/) do |paren|\n      \
    \                      paren.scan(/[()]/) do |paren|\n                       \
    \       paren.scan(/[()]/) do |paren|\n                                paren.scan(/[()]/)\
    \ do |paren|\n                                  paren.scan(/[()]/) do |paren|\n\
    \                                    paren.scan(/[()]/) do |paren|\n         \
    \                             paren.scan(/[()]/) do |paren|\n                \
    \                        paren.scan(/[()]/) do |paren|\n                     \
    \                     paren.scan(/[()]/) do |paren|\n                        \
    \                    paren.scan(/[()]/) do |paren|\n                         \
    \                     paren.scan(/[()]/) do |paren|\n                        \
    \                        paren.scan(/[()]/) do |paren|\n                     \
    \                             paren.scan(/[()]/) do |paren|\n                \
    \                                    paren.scan(/[()]/) do |paren|\n         \
    \                                             paren.scan(/[()]/) do |paren|\n\
    \                                                        paren.scan(/[()]/) do\
    \ |paren|\n                                                          paren.scan(/[()]/)\
    \ do |paren|\n                                                            paren.scan(/[()]/)\
    \ do |paren|\n                                                              paren.scan(/[()]/)\
    \ do |paren|\n                                                               \
    \ paren.scan(/[()]/) do |paren|\n                                            \
    \                      paren.scan(/[()]/) do |paren|\n                       \
    \                                             paren.scan(/[()]/) do |paren|\n\
    \                                                                      paren.scan(/[()]/)\
    \ do |paren|\n                                                               \
    \         paren.scan(/[()]/) do |paren|\n                                    \
    \                                      paren.", "  paren_string.scan(/[()]/).map\
    \ { |x| x.to_i }.reduce(:+)\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\\
    )]+)\\)\\s*\\)\\s*\\)/) do |group|\n    group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\\
    )/) do |nested_group|\n      nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/)\
    \ do |nested_nested_group|\n        nested_nested_group.scan(/\\s*\\(([^\\(\\\
    )]+)\\)\\s*\\)/) do |nested_nested_nested_group|\n          nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_group|\n       \
    \     nested_nested_nested_nested_group.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*\\)/)\
    \ do |nested_nested_nested_nested_nested_group|\n              nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_group|\n\
    \                nested_nested_nested_nested_nested_nested_group.scan(/\\s*\\\
    (([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                  nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                    nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                      nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                        nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                          nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                            nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                              nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*\\)/) do |nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_nested_group|\n\
    \                                nested_nested_nested_nested_nested_nested_nested_nested_",
  "  paren_string.scan(/[\\(\\)]/) do |paren|\n    paren_level = 0\n    paren_string.scan(/[\\\
    (\\)]/) do |paren|\n      paren_level += 1\n      paren_level if paren_level >\
    \ max_nested_paren_level\n    end\n    max_nested_paren_level = paren_level\n\
    \  end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_char|\n    paren_char\
    \ = paren_char.downcase\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \    paren_char = paren_char.downcase\n      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \        paren_char = paren_char.downcase\n        paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n          paren_char = paren_char.downcase\n          paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n            paren_char = paren_char.downcase\n     \
    \       paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char\
    \ = paren_char.downcase\n              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                paren_char = paren_char.downcase\n                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                  paren_char = paren_char.downcase\n\
    \                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            \
    \        paren_char = paren_char.downcase\n                    paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                      paren_char = paren_char.downcase\n\
    \                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        \
    \                paren_char = paren_char.downcase\n                        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                          paren_char = paren_char.downcase\n\
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                        paren_char = paren_char.downcase\n                  \
    \          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                    \
    \          paren_char = paren_char.downcase\n                              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                paren_char = paren_char.downcase\n\
    \                                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char = paren_char.downcase\n        \
    \                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n    \
    \                                paren_char = paren_char.downcase\n          \
    \                          paren_", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting = 0\n\
    \  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0\n  paren_nesting_nesting_nesting_level\
    \ = 0\n  paren_nesting_nesting_nesting_level = 0", "  paren_string.scan(/[^()]+/)\n\
    \  max_level = 0\n  max_level_string = paren_string.match\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[^()]+/)\n\
    \  paren_string", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_sizes\
    \ = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes\
    \ = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size\
    \ = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes\
    \ = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size\
    \ = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes\
    \ = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size\
    \ = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes\
    \ = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size\
    \ = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes = []\n  paren_stack_sizes_indexs\
    \ = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index = 0\n  paren_stack_sizes_sizes\
    \ = []\n  paren_stack_sizes_indexs = []\n  paren_stack_sizes_size = 0\n  paren_stack_sizes_index\
    \ = 0\n  paren_stack_sizes_", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) do |paren|\n    paren.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/)\
    \ do |paren|\n      paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\\
    )\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) do |paren|\n        paren.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/)\
    \ do |paren|\n          paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\)\\\
    s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) do |paren|\n            paren.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/)\
    \ do |paren|\n              paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) do |paren|\n                paren.paren.scan(/\\\
    s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/)\
    \ do |paren|\n                  paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) do |paren|\n                \
    \    paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\)\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)/) do |paren|\n                      paren.paren.scan(/\\s*\\(\\s*\\((?<paren>[^()]+)\\\
    )\\s*\\)\\s*|\\s*\\((?<paren>[^()]+)\\)\\s*\\)/) ", "  paren_stack = []\n  paren_count\
    \ = 0\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_count\
    \ = 0\n  paren_nesting_paren_level = 0\n  paren_nesting_paren_count = 0\n  paren_nesting_paren_level_count\
    \ = 0\n  paren_nesting_paren_level_count_max = 0\n  paren_nesting_paren_level_count_max_count\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max = 0\n  paren_nesting_paren_level_count_max_count_max_count\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max = 0\n\
    \  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count = 0\n\
    \  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  paren_nesting_paren_level_count_max_count_max_count_max_count_max_count_max_count_max_count_",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    group.each\
    \ do |item|\n      if item =~ /\\(/\n        parse_nested_parens(paren_string)\n\
    \      else\n        parse_nested_parens(paren_string)\n      end\n    end\n \
    \ end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[^()]+/)\n  level = 0\n  paren_stack\
    \ = []\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)\n\
    \  paren_stack.push(0)\n  paren_stack.push(0)\n  paren_stack.push(0)", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_stack = []\n  paren_stack_size = -1\n  paren_stack_index\
    \ = 0\n  paren_stack_max_size = -1\n  paren_stack_max_index = 0\n  paren_stack_max_paren_level\
    \ = -1\n  paren_stack_max_paren_level_index = 0\n  paren_stack_max_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_index = 0\n  paren_stack_max_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_index = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_index\
    \ = 0\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level\
    \ = -1\n  paren_stack_max_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_level_paren_",
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[\\\
    (\\)]/)\n  paren_stack = []\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push\
    \ 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_stack.push 0\n  paren_",
  "  paren_string.scan(/\\s*\\(\\s*\\(([^\\)]*)\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\)]*)\\\
    s*\\)\\s*|\\s*([^\\(]*)\\s*\\)\\s*|\\s*\\(([^\\)]*)\\)/) do |group|\n    if group.captures[0]\n\
    \      max_level = group.captures[0].to_i\n      max_level\n    elsif group.captures[1]\n\
    \      max_level = group.captures[1].to_i\n      max_level\n    elsif group.captures[2]\n\
    \      max_level = group.captures[2].to_i\n      max_level\n    elsif group.captures[3]\n\
    \      max_level = group.captures[3].to_i\n      max_level\n    else\n      max_level\
    \ = 1\n    end\n  end\nend", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_levels = []\n  paren_nestings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nest", "  paren_string.scan(/[()]/)\
    \ do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/)\
    \ do |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n         \
    \ paren_char.scan(/[()]/) do |paren_char|\n            paren_char.scan(/[()]/)\
    \ do |paren_char|\n              paren_char.scan(/[()]/) do |paren_char|\n   \
    \             paren_char.scan(/[()]/) do |paren_char|\n                  paren_char.scan(/[()]/)\
    \ do |paren_char|\n                    paren_char.scan(/[()]/) do |paren_char|\n\
    \                      paren_char.scan(/[()]/) do |paren_char|\n             \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \  paren_char.scan(/[()]/) do |paren_char|\n                            paren_char.scan(/[()]/)\
    \ do |paren_char|\n                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                               paren_char.scan(/[()]/) do |paren_char|\n    \
    \                                paren_char.scan(/[()]/) do |paren_char|\n   \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_stack = []\n  paren_level = 0\n  paren_nesting\
    \ = 0\n  paren_levels = []\n  paren_nestings = []\n  paren_levels_string = \"\"\
    \n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_levels_string = \"\"\n  paren_nestings_string\
    \ = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings = []\n  paren_levels_string\
    \ = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings = []\n  paren_nestings_strings\
    \ = []\n  paren_levels_string = \"\"\n  paren_nestings_string = \"\"\n  paren_levels_strings\
    \ = []\n  paren_nestings_strings = []\n  paren_level", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_char|\n    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n \
    \     paren_char.scan(/[\\(\\)]+/) do |paren_char|\n        paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n              paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n            \
    \        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                      paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                        paren_char.scan(/[\\(\\)]+/)\
    \ do |paren_char|\n                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n  \
    \                              paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                  paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                    paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]+/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]+/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]+/) do |paren_char|\n                                                   \
    \ paren_char.scan(/[\\(\\)]+/) do |paren_char|\n                             \
    \                         paren_char.scan(/[\\(\\)]+/) do |paren_char|\n", " \
    \ paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/) do |group|\n    group.each\
    \ do |item|\n      if item =~ /^\\(([^()]+)\\)$/\n        parse_nested_parens($1)\n\
    \      else\n        parse_nested_parens(item)\n      end\n    end\n  end\nend",
  "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren.scan(/[\\(\\)]+/) do |paren|\n\
    \      paren.scan(/[\\(\\)]+/) do |paren|\n        paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n          paren.scan(/[\\(\\)]+/) do |paren|\n            paren.scan(/[\\\
    (\\)]+/) do |paren|\n              paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                  paren.scan(/[\\\
    (\\)]+/) do |paren|\n                    paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \      paren.scan(/[\\(\\)]+/) do |paren|\n                          paren.scan(/[\\\
    (\\)]+/) do |paren|\n                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                paren.scan(/[\\(\\)]+/) do |paren|\n                        \
    \            paren.scan(/[\\(\\)]+/) do |paren|\n                            \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \            paren.scan(/[\\(\\)]+/) do |paren|\n                            \
    \                paren.scan(/[\\(\\)]+/) do |paren|\n                        \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                                        paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                    paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                                      paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n                                      \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                                paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \                                      paren.scan(/[\\(\\)]+/) do |paren|\n",
  "  paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.length }.max\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]+)\\\
    )\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]+)\\)\\s*\\)\\s*|\\s*([^\\(\\)]+)/) do |group|\n\
    \    if group[1]\n      parse_nested_parens(group[1])\n    elsif group[2]\n  \
    \    parse_nested_parens(group[2])\n    else\n      parse_nested_parens(group[3])\n\
    \    end\n  end\nend", "  paren_string.scan(/\\s*\\(\\s*\\(([^\\(\\)]*)\\)\\s*\\\
    )\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\)\\s*\\)\\s*|\\s*\\(\\s*([^\\(\\)]*)\\s*\\\
    )\\s*\\)\\s*\\)/) do |group|\n    group.captures.map { |paren| paren.size }.max\n\
    \  end\nend", "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n      paren_string.scan(/[\\(\\)]+/) do |paren|\n       \
    \ paren_string.scan(/[\\(\\)]+/) do |paren|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n            paren_string.scan(/[\\(\\)]+/) do |paren|\n \
    \             paren_string.scan(/[\\(\\)]+/) do |paren|\n                paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                  paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren|\n             \
    \         paren_string.scan(/[\\(\\)]+/) do |paren|\n                        paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                          paren_string.scan(/[\\(\\)]+/)\
    \ do |paren|\n                            paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren|\n   \
    \                             paren_string.scan(/[\\(\\)]+/) do |paren|\n    \
    \                              paren_string.scan(/[\\(\\)]+/) do |paren|\n   \
    \                                 paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                  paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                    paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren_string.scan(/[\\(\\)]+/) do |paren|\n                               \
    \                             paren_string.scan(/[\\(\\)]+/) do |paren|\n    \
    \                                                          paren_string.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \        paren_string.scan(/[\\(\\)]+/) do |paren|\n", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }.inject(0) { |sum, el| sum + el }\nend", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_group|\n    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          \
    \          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  \
    \    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                          paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                            paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                              paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                paren_group.scan(/[\\(\\)]+/)\
    \ do |paren_group|\n                                  paren_group.scan(/[\\(\\\
    )]+/) do |paren_group|\n                                    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                      paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                            paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string.scan(/[^()]+/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/", "  paren_string.scan(/[\\\
    (\\)]/) do |paren|\n    paren_level = paren_string.index(paren)\n    paren_string.slice!(paren_level,\
    \ paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, paren.length)\n    paren_string.slice!(paren_level\
    \ + 1, paren.length)\n    paren_string.slice!(paren_level + 1, paren.length)\n\
    \    paren_string.slice!(paren_level + 1, ", "  paren_stack = []\n  paren_level\
    \ = 0\n  paren_groups = []\n  paren_group = []\n  paren_group_size = 0\n  paren_group_level\
    \ = 0\n  paren_group_nesting = 0\n  paren_group_nesting_level = 0\n  paren_group_nesting_count\
    \ = 0\n  paren_group_nesting_max = 0\n  paren_group_nesting_max_level = 0\n  paren_group_nesting_max_count\
    \ = 0\n  paren_group_nesting_max_max = 0\n  paren_group_nesting_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_count = 0\n  paren_group_nesting_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_level = 0\n  paren_group_nesting_max_max_max_count\
    \ = 0\n  paren_group_nesting_max_max_max_max = 0\n  paren_group_nesting_max_max_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_max_max_count = 0\n  paren_group_nesting_max_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_max_level = 0\n  paren_group_nesting_max_max_max_max_count\
    \ = 0\n  paren_group_nesting_max_max_max_max = 0\n  paren_group_nesting_max_max_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_max_max_count = 0\n  paren_group_nesting_max_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_max_level = 0\n  paren_group_nesting_max_max_max_max_count\
    \ = 0\n  paren_group_nesting_max_max_max_max = 0\n  paren_group_nesting_max_max_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_max_max_count = 0\n  paren_group_nesting_max_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_max_level = 0\n  paren_group_nesting_max_max_max_max_count\
    \ = 0\n  paren_group_nesting_max_max_max_max = 0\n  paren_group_nesting_max_max_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_max_max_count = 0\n  paren_group_nesting_max_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_max_level = 0\n  paren_group_nesting_max_max_max_max_count\
    \ = 0\n  paren_group_nesting_max_max_max_max = 0\n  paren_group_nesting_max_max_max_max_level\
    \ = 0\n  paren_group_nesting_max_max_max_max_count = 0\n  paren_group_nesting_max_max_max_max\
    \ = 0\n  paren_group_nesting_max_max_max_max_level", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group|\n    if paren_group[1]\n    \
    \  paren_group[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group2|\n\
    \        if paren_group2[1]\n          paren_group2[1].scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/) do |paren_group3|\n            if paren_group3[1]\n         \
    \     paren_group3[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group4|\n\
    \                if paren_group4[1]\n                  paren_group4[1].scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group5|\n                    if paren_group5[1]\n\
    \                      paren_group5[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\
    \ do |paren_group6|\n                        if paren_group6[1]\n            \
    \              paren_group6[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group7|\n\
    \                            if paren_group7[1]\n                            \
    \  paren_group7[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group8|\n\
    \                                if paren_group8[1]\n                        \
    \          paren_group8[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group9|\n\
    \                                    if paren_group9[1]\n                    \
    \                  paren_group9[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do\
    \ |paren_group10|\n                                        if paren_group10[1]\n\
    \                                          paren_group10[1].scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/) do |paren_group11|\n                                        \
    \    if paren_group11[1]\n                                              paren_group11[1].scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |paren_group12|\n                         \
    \                       if paren_group12[1]\n                                \
    \                  paren_group12[1].scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/) do\
    \ |paren_group13|\n                                                    if paren_group13[1]\n\
    \                                                      paren_group13[1].scan(/\\\
    s*\\(([^()]*)\\)\\s*", "  paren_string.scan(/[^()]+/) do |paren_string|\n    paren_string.scan(/\\\
    (/) do |paren_string|\n      paren_string.scan(/\\)/) do |paren_string|\n    \
    \    paren_string.scan(/[^()]+/) do |paren_string|\n          paren_string.scan(/\\\
    (/) do |paren_string|\n            paren_string.scan(/\\)/) do |paren_string|\n\
    \              paren_string.scan(/[^()]+/) do |paren_string|\n               \
    \ paren_string.scan(/\\(/) do |paren_string|\n                  paren_string.scan(/\\\
    )/) do |paren_string|\n                    paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                      paren_string.scan(/\\(/) do |paren_string|\n          \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \        paren_string.scan(/[^()]+/) do |paren_string|\n                     \
    \       paren_string.scan(/\\(/) do |paren_string|\n                         \
    \     paren_string.scan(/\\)/) do |paren_string|\n                           \
    \     paren_string.scan(/[^()]+/) do |paren_string|\n                        \
    \          paren_string.scan(/\\(/) do |paren_string|\n                      \
    \              paren_string.scan(/\\)/) do |paren_string|\n                  \
    \                    paren_string.scan(/[^()]+/) do |paren_string|\n         \
    \                               paren_string.scan(/\\(/) do |paren_string|\n \
    \                                         paren_string.scan(/\\)/) do |paren_string|\n\
    \                                            paren_string.scan(/[^()]+/) do |paren_string|\n\
    \                                              paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                paren_string.scan(/\\)/) do |paren_string|\n\
    \                                                  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n                                                    paren_string.scan(/\\\
    (/) do |paren_string|\n                                                      paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \  paren_string.scan(/[^()]+/) do |paren_string|\n                           \
    \                               paren_string.scan(/\\(/) do |paren_string|\n \
    \                                                           paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \        paren_string.scan(/[^()]+/) do |paren_string|\n                     \
    \                                           paren_string.scan(/\\(/) do |paren_string|\n\
    \                                                                  paren_string.scan(/\\\
    )/) do |paren_string|\n                                                      \
    \              paren_string.scan"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
