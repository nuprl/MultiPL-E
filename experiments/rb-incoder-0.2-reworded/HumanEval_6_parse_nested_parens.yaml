name: HumanEval_6_parse_nested_parens
language: rb
prompt: "# Input to this function is a string represented multiple groups for nested\
  \ parentheses separated by spaces.\n# For each of the group, output the deepest\
  \ level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting\
  \ while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\"\
  )\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_parse_nested_parens\n\
  \    candidate = method(:parse_nested_parens)\n    assert_equal([2, 3, 1, 3], candidate.call(\"\
  (()()) ((())) () ((())()())\"))\n    assert_equal([1, 2, 3, 4], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([4], candidate.call(\"(()(())((())))\"\
  ))\n  end\nend\n"
completions: ["  paren_string.scan(/[\\(\\)]+/) do |paren_group|\n    paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n          paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \              paren_group.scan(/[\\(\\)]+/) do |paren_group|\n              \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                    paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n      \
    \                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n    \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                    paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                      paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                        paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                          paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                            paren_group.scan(/[\\(\\)]+/) do\
    \ |paren_group|\n                                              paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \  paren_group.scan(/[\\(\\)]+/) do |paren_group|\n                          \
    \                            paren_group.scan(/[\\(\\)]+/) do |paren_group|\n\
    \                                                        paren_group.scan(/[\\\
    (\\)]+/) do |paren_group|\n                                                  \
    \        paren_group.scan(/[\\", "  paren_string = paren_string.strip\n  paren_stack\
    \ = []\n  paren_level = 0\n  paren_nesting = 0\n  paren_nesting_level = 0\n  paren_nesting_level_max\
    \ = 10\n  paren_nesting_level_max_index = paren_nesting_level_max - 1\n  paren_nesting_level_max_index\
    \ -= 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  paren_nesting_level_max_index += 1\n  paren_nesting_level_max_index\
    \ += 1\n  ", "  paren_stack = []\n  paren_stack_size = 0\n  paren_stack_max =\
    \ 0\n  paren_stack_max_index = 0\n  paren_stack_max_depth = 0\n  paren_stack_max_depth_index\
    \ = 0\n  paren_stack_max_depth_level = 0\n  paren_stack_max_depth_level_index\
    \ = 0\n  paren_stack_max_depth_level_length = 0\n  paren_stack_max_depth_level_length_index\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count = 0\n  paren_stack_max_depth_level_length_index_count\
    \ = 0\n  paren_stack_max_depth_level_length_count", "  paren_string.scan(/[^()]+/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n\
    \  paren_string.scan(/[()]/)\n  paren_string.scan(/[()]/)\n  paren_string.scan(/",
  "  paren_string = paren_string.strip\n  paren_stack = []\n  paren_level = 0\n  paren_levels\
    \ = []\n  paren_levels_string = \"\"\n  paren_levels_strings = []\n  paren_levels_strings_lengths\
    \ = []\n  paren_levels_strings_lengths_max = 0\n  paren_levels_strings_lengths_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs = []\n  paren_levels_strings_lengths_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_index = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs = []\n\
    \  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_index\
    \ = 0\n  paren_levels_strings_lengths_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs_max_indexs\
    \ = []\n  paren_level", "  paren_string.scan(/[\\(\\)]+/) do |paren|\n    paren.scan(/[\\\
    (\\)]+/) do |paren|\n      paren.scan(/[\\(\\)]+/) do |paren|\n        paren.scan(/[\\\
    (\\)]+/) do |paren|\n          paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                paren.scan(/[\\(\\)]+/) do |paren|\n              \
    \    paren.scan(/[\\(\\)]+/) do |paren|\n                    paren.scan(/[\\(\\\
    )]+/) do |paren|\n                      paren.scan(/[\\(\\)]+/) do |paren|\n \
    \                       paren.scan(/[\\(\\)]+/) do |paren|\n                 \
    \         paren.scan(/[\\(\\)]+/) do |paren|\n                            paren.scan(/[\\\
    (\\)]+/) do |paren|\n                              paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                            paren.scan(/[\\(\\)]+/) do |paren|\n            \
    \                              paren.scan(/[\\(\\)]+/) do |paren|\n          \
    \                                  paren.scan(/[\\(\\)]+/) do |paren|\n      \
    \                                        paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                  paren.scan(/[\\(\\)]+/) do\
    \ |paren|\n                                                    paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                      paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \  paren.scan(/[\\(\\)]+/) do |paren|\n                                      \
    \                      paren.scan(/[\\(\\)]+/) do |paren|\n                  \
    \                                            paren.scan(/[\\(\\)]+/) do |paren|\n\
    \                                                                paren.scan(/[\\\
    (\\)]+/) do |paren|\n                                                        \
    \          paren.scan(/[\\(\\)]+/) do |paren|\n                              \
    \                                      paren.scan(/[\\(\\)]+/) do |paren|\n",
  "  paren_string.scan(/[()]/) do |paren_char|\n    paren_char.scan(/[()]/) do |paren_char|\n\
    \      paren_char.scan(/[()]/) do |paren_char|\n        paren_char.scan(/[()]/)\
    \ do |paren_char|\n          paren_char.scan(/[()]/) do |paren_char|\n       \
    \     paren_char.scan(/[()]/) do |paren_char|\n              paren_char.scan(/[()]/)\
    \ do |paren_char|\n                paren_char.scan(/[()]/) do |paren_char|\n \
    \                 paren_char.scan(/[()]/) do |paren_char|\n                  \
    \  paren_char.scan(/[()]/) do |paren_char|\n                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                        paren_char.scan(/[()]/) do |paren_char|\n\
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \          paren_char.scan(/[()]/) do |paren_char|\n                         \
    \           paren_char.scan(/[()]/) do |paren_char|\n                        \
    \              paren_char.scan(/[()]/) do |paren_char|\n                     \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                          paren_char.scan(/[()]/) do |paren_char|\n         \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[^()]+/).map do |paren_string|\n    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n      paren_string.scan(/[()]/).map do |paren_string|\n \
    \       paren_string.scan(/[()]/).map do |paren_string|\n          paren_string.scan(/[()]/).map\
    \ do |paren_string|\n            paren_string.scan(/[()]/).map do |paren_string|\n\
    \              paren_string.scan(/[()]/).map do |paren_string|\n             \
    \   paren_string.scan(/[()]/).map do |paren_string|\n                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                  paren_string.scan(/[()]/).map do |paren_string|\n         \
    \                   paren_string.scan(/[()]/).map do |paren_string|\n        \
    \                      paren_string.scan(/[()]/).map do |paren_string|\n     \
    \                           paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                  paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                      paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                          paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                            paren_string.scan(/[()]/).map do\
    \ |paren_string|\n                                              paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/).map do |paren_string|\n                         \
    \                                   paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                                              ", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/) do |group|\n    if group.captures.size == 1\n\
    \      group.captures.first\n    else\n      group.captures.map { |g| parse_nested_parens(g)\
    \ }.max\n    end\n  end\nend", "  paren_string.scan(/[()]/) do |paren_char|\n\
    \    paren_char.scan(/[()]/) do |paren_char|\n      paren_char.scan(/[()]/) do\
    \ |paren_char|\n        paren_char.scan(/[()]/) do |paren_char|\n          paren_char.scan(/[()]/)\
    \ do |paren_char|\n            paren_char.scan(/[()]/) do |paren_char|\n     \
    \         paren_char.scan(/[()]/) do |paren_char|\n                paren_char.scan(/[()]/)\
    \ do |paren_char|\n                  paren_char.scan(/[()]/) do |paren_char|\n\
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \       paren_char.scan(/[()]/) do |paren_char|\n                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                          paren_char.scan(/[()]/) do |paren_char|\n\
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                   paren_char.scan(/[()]/) do |paren_char|\n                \
    \                    paren_char.scan(/[()]/) do |paren_char|\n               \
    \                       paren_char.scan(/[()]/) do |paren_char|\n            \
    \                            paren_char.scan(/[()]/) do |paren_char|\n       \
    \                                   paren_char.scan(/[()]/) do |paren_char|\n\
    \                                            paren_char.scan(/[()]/) do |paren_char|\n\
    \                                              paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                paren_char.scan(/[()]/) do |paren_char|\n\
    \                                                  paren_char.scan(/[()]/) do\
    \ |paren_char|\n                                                    paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                      paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                        paren_char.scan(/[()]/)\
    \ do |paren_char|\n                                                          paren_char.scan(/[",
  "  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n    paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                    paren_string.scan(/[\\(\\)]+/)\
    \ do |paren_string|\n                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n  \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/[()]/).map { |x| x.to_i }\nend", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.to_i }\nend", "  paren_string.scan(/[^()]+/) do |paren_string|\n   \
    \ paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|", "  paren_string.scan(/\\\
    s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ += 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] -= 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n    levels[match[:level]]\
    \ -= 1\n  end\n  paren_string.scan(/\\s*\\(\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/)\
    \ do |match|\n    levels[match[:level]] += 1\n  end\n  paren_string.scan(/\\s*\\\
    (\\s*\\((?<level>\\d+)\\)\\s*\\)\\s*(?<content>[^()]+)/) do |match|\n", "  paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n        paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \            paren_string.scan(/[\\(\\)]+/) do |paren_string|\n              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \              paren_string.scan(/[\\(\\)]+/) do |paren_string|\n            \
    \                paren_string.scan(/[\\(\\)]+/) do |paren_string|\n          \
    \                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n      \
    \                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                  paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                    paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                      paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                        paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                          paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                            paren_string.scan(/[\\(\\)]+/) do\
    \ |paren_string|\n                                              paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \ paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                         \
    \                           paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                      paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n                   \
    \                                       paren_string.scan(/[\\(\\)]+/) do |paren_string|\n\
    \                                                            paren_string.scan(/[\\\
    (\\)]+/) do |paren_string|\n                                                 \
    \             paren", "  paren_string.scan(/\\s*\\(\\s*\\((?<paren>)\\s*\\)\\\
    s*\\)\\s*|\\s*\\(\\s*\\((?<paren>)\\s*\\)\\s*\\)\\s*\\((?<paren>)\\s*\\)\\s*\\\
    )/).map do |group|\n    if group[:paren].nil?\n      0\n    else\n      parse_nested_parens(group[:paren])\n\
    \    end\n  end.reduce(:+)\nend", "  paren_string.scan(/[\\(\\)]/) do |paren_char|\n\
    \    paren_char.scan(/[\\(\\)]/) do |paren_char|\n      paren_char.scan(/[\\(\\\
    )]/) do |paren_char|\n        paren_char.scan(/[\\(\\)]/) do |paren_char|\n  \
    \        paren_char.scan(/[\\(\\)]/) do |paren_char|\n            paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n              paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                paren_char.scan(/[\\(\\)]/) do |paren_char|\n               \
    \   paren_char.scan(/[\\(\\)]/) do |paren_char|\n                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                      paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n         \
    \                       paren_char.scan(/[\\(\\)]/) do |paren_char|\n        \
    \                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n     \
    \                               paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                      paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                        paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                          paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                            paren_char.scan(/[\\(\\)]/) do |paren_char|\n\
    \                                              paren_char.scan(/[\\(\\)]/) do\
    \ |paren_char|\n                                                paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                  paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    paren_char.scan(/[\\\
    (\\)]/) do |paren_char|\n                                                    \
    \  paren_char.scan(/[\\(\\)]/) do |paren_char|\n", "  paren_string.scan(/[^()]+/)\
    \ do |paren_string|\n    paren_string.scan(/[()]/) do |paren_string|\n      paren_string.scan(/[()]/)\
    \ do |paren_string|\n        paren_string.scan(/[()]/) do |paren_string|\n   \
    \       paren_string.scan(/[()]/) do |paren_string|\n            paren_string.scan(/[()]/)\
    \ do |paren_string|\n              paren_string.scan(/[()]/) do |paren_string|\n\
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \   paren_string.scan(/[()]/) do |paren_string|\n                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                      paren_string.scan(/[()]/) do |paren_string|\n\
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \               paren_string.scan(/[()]/) do |paren_string|\n                \
    \                paren_string.scan(/[()]/) do |paren_string|\n               \
    \                   paren_string.scan(/[()]/) do |paren_string|\n            \
    \                        paren_string.scan(/[()]/) do |paren_string|\n       \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                        paren_string.scan(/[()]/) do |paren_string|\n\
    \                                          paren_string.scan(/[()]/) do |paren_string|\n\
    \                                            paren_string.scan(/[()]/) do |paren_string|\n\
    \                                              paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                paren_string.scan(/[()]/) do\
    \ |paren_string|\n                                                  paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                      paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[()]/) do |paren_string|\n                             \
    \                               paren_string.scan(/[()]/) do |paren_string|\n\
    \                                                              paren_string.scan(/[()]/)\
    \ do |paren_string|\n                                                        \
    \        paren_string.scan(/[()]/) do |paren_string|"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
