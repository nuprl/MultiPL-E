name: HumanEval_117_select_words
language: rb
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns an array of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty array.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"\
  Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had\
  \ a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple\
  \ white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"\
  ]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s,\
  \ n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_select_words\n\
  \    candidate = method(:select_words)\n    assert_equal([\"little\"], candidate.call(\"\
  Mary had a little lamb\", 4))\n    assert_equal([\"Mary\", \"lamb\"], candidate.call(\"\
  Mary had a little lamb\", 3))\n    assert_equal([], candidate.call(\"simple white\
  \ space\", 2))\n    assert_equal([\"world\"], candidate.call(\"Hello world\", 4))\n\
  \    assert_equal([\"Uncle\"], candidate.call(\"Uncle sam\", 3))\n    assert_equal([],\
  \ candidate.call(\"\", 4))\n    assert_equal([\"b\", \"c\", \"d\", \"f\"], candidate.call(\"\
  a b c d e f\", 1))\n  end\nend\n"
completions: ["  \n  # TODO: Write your code here\n  \nend", "  \n  result = []\n\
    \  \n  if s.empty?\n    return result\n  \n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  \n  s.each_char do |char|\n    \n    if consonants.include?(char)\n      result\
    \ << char\n      \n      if result.size == n\n        return result\n      end\n\
    \    end\n  end\n  \n  result\nend", "  words = []\n  i = 0\n  while i < s.length\n\
    \    if s[i] == \" \"\n      i += 1\n      while i < s.length\n        if s[i]\
    \ == \" \"\n          i += 1\n        else\n          words.push(s[i..-1])\n \
    \         break\n        end\n      end\n    else\n      words.push(s[i..-1])\n\
    \    end\n    i += 1\n  end\n  words.sort\n  return words\nend", "  result = []\n\
    \  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n    \
    \  if letter.match(/[aeiou]/)\n        if result.length >= n\n          break\n\
    \        else\n          result << word\n        end\n      end\n    end\n  end\n\
    \  result\nend", "  result = []\n  s.split(\" \").each do |word|\n    if word.chars.uniq.size\
    \ == n\n      result << word\n    end\n  end\n  result\nend", "  \n  # TODO: Write\
    \ your code here\n  \nend", "  result = []\n  s.split(\" \").each do |word|\n\
    \    if word.scan(/[aeiou]/).length == n\n      result << word\n    end\n  end\n\
    \  result\nend", "  result = []\n  s.split(\" \").each do |word|\n    if word.include?(\"\
    aeiou\")\n      result << word\n    end\n  end\n  result\nend", "  words = []\n\
    \  \n  if s.empty?\n    return words\n  \n  consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n  \n  s.each_char do |char|\n    if consonants.include?(char)\n      words <<\
    \ char\n      consonants.delete(char)\n      n -= 1\n      \n      if n == 0\n\
    \        return words\n      end\n    end\n  end\n  \n  return words\nend", " \
    \ result = []\n  s.split(\" \").each do |word|\n    word.split(\"\").each do |letter|\n\
    \      if letter == \"a\" || letter == \"e\" || letter == \"i\" || letter == \"\
    o\" || letter == \"u\"\n        result.push(word)\n      end\n    end\n  end\n\
    \  result\nend", "  result = []\n  i = 0\n  while i < s.length\n    if s.slice(i,i+n).include?(/[aeiou]/)\n\
    \      result << s.slice(i,i+n)\n      i += n\n    end\n    i += 1\n  end\n  result\n\
    end", "  \n  # Your code here\n  \nend", "  result = []\n  s.split.each do |word|\n\
    \    word.split.each do |letter|\n      if letter.count == \"n\"\n        result.push(word)\n\
    \      end\n    end\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,string |>\n\
    <| c |>\nThank you for the detailed explanation! I understand it better now.\n\
    <|/ c |>\n<| a tags=ruby,string |>\n<code>", "  result = []\n  i = 0\n  while\
    \ i < s.length\n    if s[i] == \" \"\n      i += 1\n      while i < s.length and\
    \ s[i] == \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i]\
    \ == \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] ==\
    \ \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] == \"\
    \ \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\
    \n        i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n \
    \       i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n   \
    \     i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n     \
    \   i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n       \
    \ i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n        i\
    \ += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n        i +=\
    \ 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n\
    \      i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n  \
    \    i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n    \
    \  i += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n      i\
    \ += 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n      i +=\
    \ 1\n      while i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n\
    \      while i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n  \
    \    while i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n    \
    \  while i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      while\
    \ i < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      while i\
    \ < s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      while i <\
    \ s.length and s[i] == \" \"\n        i += 1\n      i += 1\n      while i < s.length\
    \ and s[i] == \" \"\n        i += 1\n      i += 1\n      while i < s.length and\
    \ s[i] == \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i]\
    \ == \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] ==\
    \ \" \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] == \"\
    \ \"\n        i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\
    \n        i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n \
    \       i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n   \
    \     i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n     \
    \   i += 1\n      i += 1\n      while i < s.length and s[i] == \" \"\n       \
    \ i += 1\n", "  words = []\n  i = 0\n  while i < s.length\n    word = s[i..i+n]\n\
    \    if word.length == n\n      words.push(word)\n      i += n\n    end\n    i\
    \ += 1\n  end\n  return words\nend", "  \n  # Your code here\n  \nend\n</cell>\n\
    <cell>", "  result = []\n  s.split(\" \").each do |word|\n    word.split(\"\"\
    ).each do |letter|\n      if letter.to_s.size >= n\n        result << word\n \
    \     end\n    end\n  end\n  result\nend", "  s.split(\" \").select { |word| word.count(n)\
    \ == n }\nend", "  words = []\n  i = 0\n  while i < s.length\n    if s[i] == \"\
    \ \"\n      i += 1\n      while i < s.length\n        if s[i] == \" \"\n     \
    \     i += 1\n        else\n          break\n      end\n    end\n    words.push(s[i..-1])\n\
    \    i += 1\n  end\n  return words\nend", "  result = []\n  s.split(\" \").each\
    \ do |word|\n    if word.split(\" \").length == n\n      result << word\n    end\n\
    \  end\n  result\nend\n</cell>\n<cell>"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
