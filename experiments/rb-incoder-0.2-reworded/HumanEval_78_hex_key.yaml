name: HumanEval_78_hex_key
language: rb
prompt: "# You have been tasked to write a function that receives \n# a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n# digits that are primes\
  \ (prime number, or a prime, is a natural number \n# greater than 1 that is not\
  \ a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n# So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is\
  \ always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n\
  # Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n\
  # >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n\
  # 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_hex_key\n\
  \    candidate = method(:hex_key)\n    assert_equal(1, candidate.call(\"AB\"))\n\
  \    assert_equal(2, candidate.call(\"1077E\"))\n    assert_equal(4, candidate.call(\"\
  ABED1A33\"))\n    assert_equal(2, candidate.call(\"2020\"))\n    assert_equal(6,\
  \ candidate.call(\"123456789ABCDEF0\"))\n    assert_equal(12, candidate.call(\"\
  112233445566778899AABBCCDDEEFF00\"))\n  end\nend\n"
completions: ["  num = num.upcase\n  num_digits = num.length\n  num_primes = 0\n \
    \ \n  for i in 0...num_digits\n    if num.include?(i)\n      num_primes += 1\n\
    \    end\n  end\n  \n  return num_primes\nend", "  num = num.upcase\n  num_digits\
    \ = num.length\n  num_primes = 0\n  num_primes_count = 0\n  num_primes_digits\
    \ = 0\n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n\
    \  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count\
    \ = 0\n  \n  num_primes_digits_count = 0\n  \n  num_primes_digits_count = 0\n\
    \  \n  num_primes_digits_count = 0\n  \n", "  num = num.upcase\n  count = 0\n\
    \  for i in (0..num.length-1)\n    if num[i] == \"A\" or num[i] == \"B\" or num[i]\
    \ == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  num = num.upcase\n  count = 0\n\
    \  for i in 0..num.length-1\n    if num[i] == \"A\"\n      count += 1\n    elsif\
    \ num[i] == \"B\"\n      count += 1\n    elsif num[i] == \"C\"\n      count +=\
    \ 1\n    elsif num[i] == \"D\"\n      count += 1\n    elsif num[i] == \"E\"\n\
    \      count += 1\n    elsif num[i] == \"F\"\n      count += 1\n    elsif num[i]\
    \ == \"0\"\n      count += 1\n    elsif num[i] == \"1\"\n      count += 1\n  \
    \  elsif num[i] == \"2\"\n      count += 1\n    elsif num[i] == \"3\"\n      count\
    \ += 1\n    elsif num[i] == \"4\"\n      count += 1\n    elsif num[i] == \"5\"\
    \n      count += 1\n    elsif num[i] == \"6\"\n      count += 1\n    elsif num[i]\
    \ == \"7\"\n      count += 1\n    elsif num[i] == \"8\"\n      count += 1\n  \
    \  elsif num[i] == \"9\"\n      count += 1\n    elsif num[i] == \"A\"\n      count\
    \ += 1\n    elsif num[i] == \"B\"\n      count += 1\n    elsif num[i] == \"C\"\
    \n      count += 1\n    elsif num[i] == \"D\"\n      count += 1\n    elsif num[i]\
    \ == \"E\"\n      count += 1\n    elsif num[i] == \"F\"\n      count += 1\n  \
    \  end\n  end\n  return count\nend", "  num = num.upcase\n  num.split(\"\").each\
    \ do |i|\n    if i.to_i.to_s == i\n      num.split(\"\").each do |j|\n       \
    \ if j.to_i.to_s == j\n          num.split(\"\").each do |k|\n            if k.to_i.to_s\
    \ == k\n              return num.split(\"\").count { |x| x.to_i.to_s == x }\n\
    \            end\n          end\n        end\n      end\n    end\n  end\nend",
  "  num.upcase!\n  num_digits = num.length\n  num_primes = 0\n  num_prime_digits\
    \ = 0\n  num_prime_digits_count = 0\n  num_prime_digits_count_max = 2\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_prime_digits_count_max\n  num_prime_digits_count_max = num_digits\
    \ - num_prime_digits_count_min\n  num_prime_digits_count_min = num_digits - num_prime_digits_count_max\n\
    \  num_prime_digits_count_max = num_digits - num_prime_digits_count_min\n  num_prime_digits_count_min\
    \ = num_digits - num_", "  hex = num.to_s.split(\"\").map{|x| x.to_i(16)}\n  hex.each\
    \ do |x|\n    if x.odd?\n      x.next!\n      hex.each do |y|\n        if y.odd?\
    \ && y != x\n          x.next!\n          hex.each do |z|\n            if z.odd?\
    \ && z != x && z != y\n              x.next!\n              hex.each do |a|\n\
    \                if a.odd? && a != x && a != y && a != z\n                  x.next!\n\
    \                  hex.each do |b|\n                    if b.odd? && b != x &&\
    \ b != y && b != z && b != a\n                      x.next!\n                \
    \      hex.each do |c|\n                        if c.odd? && c != x && c != y\
    \ && c != z && c != a && c != b\n                          x.next!\n         \
    \                 hex.each do |d|\n                            if d.odd? && d\
    \ != x && d != y && d != z && d != a && d != b && d != c\n                   \
    \           x.next!\n                              hex.each do |e|\n         \
    \                       if e.odd? && e != x && e != y && e != z && e != a && e\
    \ != b && e != c && e != d\n                                  x.next!\n      \
    \                            hex.each do |f|\n                               \
    \     if f.odd? && f != x && f != y && f != z && f != a && f != b && f != c &&\
    \ f != d && f != e\n                                      x.next!\n          \
    \                          end\n                                  end\n      \
    \                          end\n                              end\n          \
    \                  end\n                          end\n                      \
    \  end\n                      end\n                    end\n                 \
    \ end\n                end\n              end\n            end\n          end\n\
    \        end\n      end\n    end\n  end\n  hex.count\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThank you so much! I really appreciate your help. I understand it much\
    \ better now. :)\n<|/ c |>\n<| c |>\nI added a more efficient version that doesn't\
    \ use recursion.\n<|/ c |>\n<| a tags=ruby,primes |>\nI wrote a solution that\
    \ uses recursion to find prime numbers. I used the sieve of Eratosthenes algorithm\
    \ to find prime numbers. I used the sieve of Eratosthenes algorithm to find prime\
    \ numbers. I used the sieve of Eratosthenes ", "  num.downcase!\n  count = 0\n\
    \  for i in 0...num.length\n    if num[i] == \"A\" or num[i] == \"B\" or num[i]\
    \ == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  num = num.upcase\n  num_digits\
    \ = num.length\n  num_primes = 0\n  num_prime_digits = 0\n  num_prime_digits_count\
    \ = 0\n  num_prime_digits_count_max = 0\n  num_prime_digits_count_max_max = 0\n\
    \  num_prime_digits_count_min = 0\n  num_prime_digits_count_min_max = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max_index\
    \ = 0\n  num_prime_digits_count_max_index = 0\n  num_prime_digits_count_min_index\
    \ = 0\n  num_prime_digits_count_min_index_max = 0\n  num_prime_digits_count_max",
  "  num = num.to_s.upcase\n  count = 0\n  for i in 0..num.length-1\n    if num[i]\
    \ == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i]\
    \ == \"E\" or num[i] == \"F\"\n      count += 1\n    end\n  end\n  return count\n\
    end", "  num = num.upcase\n  count = 0\n  for i in 0...num.length\n    if num[i]\
    \ == \"A\"\n      count += 1\n    end\n  end\n  return count\nend", "  num = num.upcase\n\
    \  count = 0\n  for i in 0...num.length\n    if num[i] == \"A\"\n      count +=\
    \ 1\n    elsif num[i] == \"B\"\n      count += 1\n    elsif num[i] == \"C\"\n\
    \      count += 1\n    elsif num[i] == \"D\"\n      count += 1\n    elsif num[i]\
    \ == \"E\"\n      count += 1\n    elsif num[i] == \"F\"\n      count += 1\n  \
    \  end\n  end\n  return count\nend", "  num = num.upcase\n  count = 0\n  for i\
    \ in 0...num.length\n    if num[i] == \"A\" or num[i] == \"B\" or num[i] == \"\
    C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n      count += 1\n\
    \    end\n  end\n  return count\nend", "  num = num.upcase\n  count = 0\n  for\
    \ i in 0...num.length\n    if num[i] == \"A\" or num[i] == \"B\" or num[i] ==\
    \ \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  num = num.to_s.upcase\n  count\
    \ = 0\n  for i in 0...num.length\n    if num[i] == \"A\"\n      count += 1\n \
    \   elsif num[i] == \"B\"\n      count += 1\n    elsif num[i] == \"C\"\n     \
    \ count += 1\n    elsif num[i] == \"D\"\n      count += 1\n    elsif num[i] ==\
    \ \"E\"\n      count += 1\n    elsif num[i] == \"F\"\n      count += 1\n    end\n\
    \  end\n  return count\nend", "  num = num.upcase\n  digits = num.to_s.split(//)\n\
    \  digits.each do |digit|\n    if digit == \"A\"\n      prime_digit = 2\n    elsif\
    \ digit == \"B\"\n      prime_digit = 3\n    elsif digit == \"C\"\n      prime_digit\
    \ = 5\n    elsif digit == \"D\"\n      prime_digit = 7\n    elsif digit == \"\
    E\"\n      prime_digit = 11\n    elsif digit == \"F\"\n      prime_digit = 13\n\
    \    else\n      prime_digit = digit.to_i\n    end\n    prime_digit += prime_digit\
    \ % prime_digit\n  end\n  prime_digit\nend", "  num = num.upcase\n  count = 0\n\
    \  for i in 0..num.length-1\n    if num[i] == \"A\" or num[i] == \"B\" or num[i]\
    \ == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n      count\
    \ += 1\n    end\n  end\n  return count\nend", "  num = num.upcase\n  prime_digits\
    \ = 2\n  prime_digits_count = 0\n  while prime_digits_count < prime_digits\n \
    \   prime_digits_count += 1 if num.include?(prime_digits) else 0\n    prime_digits\
    \ += 1\n  end\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n\
    \  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include?(prime_digits) else 0\n  prime_digits_count\
    \ += 1 if num.include?(prime_digits) else 0\n  prime_digits_count += 1 if num.include?(prime_digits)\
    \ else 0\n  prime_digits_count += 1 if num.include", "  num = num.upcase\n  count\
    \ = 0\n  for i in 0...num.length\n    if num[i] == \"A\" or num[i] == \"B\" or\
    \ num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\"\n \
    \     count += 1\n    end\n  end\n  return count\nend", "  num = num.upcase\n\
    \  num_digits = num.length\n  num_primes = 0\n  \n  for i in 0...num_digits\n\
    \    if num[i] == \"A\"\n      num_primes += 1\n    elsif num[i] == \"B\"\n  \
    \    num_primes += 1\n    elsif num[i] == \"C\"\n      num_primes += 1\n    elsif\
    \ num[i] == \"D\"\n      num_primes += 1\n    elsif num[i] == \"E\"\n      num_primes\
    \ += 1\n    elsif num[i] == \"F\"\n      num_primes += 1\n    end\n  end\n  \n\
    \  return num_primes\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
