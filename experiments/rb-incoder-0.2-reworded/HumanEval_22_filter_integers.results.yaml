language: rb
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |v| v.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmphs4cbsp8

    Started

    .

    Finished in 0.000520632 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    1920.74 tests/s, 5762.23 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
- exit_code: 0
  program: "# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"\
    a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n\
    # [1, 2, 3]\ndef filter_integers(values)\n  values.select { |value| value.is_a?(Integer)\
    \ }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def\
    \ test_filter_integers\n    candidate = method(:filter_integers)\n    assert_equal([],\
    \ candidate.call([]))\n    assert_equal([4, 9], candidate.call([4, {}, [], 23.2,\
    \ 9, \"adasd\"]))\n    assert_equal([3, 3, 3], candidate.call([3, \"c\", 3, 3,\
    \ \"a\", \"b\"]))\n  end\nend\n"
  status: OK
  stderr: 'Loaded suite /tmp/tmpnm6std3h

    Started

    .

    Finished in 0.000403207 seconds.

    -------------------------------------------------------------------------------

    1 tests, 3 assertions, 0 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications

    100% passed

    -------------------------------------------------------------------------------

    2480.12 tests/s, 7440.35 assertions/s

    '
  stdout: ''
  timestamp: 1659795193
