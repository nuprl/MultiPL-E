name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n    sum += nums[i]\n   \
    \ if sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n  \
    \  (i..nums.size-1).each do |j|\n      min = min + nums[j] if nums[j] < min\n\
    \    end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n    end\n\
    \    return min if min > max\n  end\n  nil\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a, b|\
    \ a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    min + max\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c\
    \ |>\nThis solution doesn't work if you have a negative number in the array. Try\
    \ `minSubArraySum.call([-1, -2, -3])`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code by adding `min = nums.min { |a, b| a <=> b }` before\
    \ the `until` loop.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  nums.each do |n|\n\
    \    min = n\n    n.times do |i|\n      min = min > nums[i] || nums[i] > nums[i\
    \ - 1] ? nums[i] : min\n    end\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max =\
    \ num\n    until nums.empty? do\n      min = nums.min {|a, b| a + b}\n      max\
    \ = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min if min > max\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for\
    \ i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    (i..nums.size).each do |j|\n      min = min\
    \ > nums[j] ? min : nums[j]\n    end\n    return min\n  end\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min\
    \ = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
